/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 14:45:41 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StreamCorruptedException;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.MemorySensitiveClassPathRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)111;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 32, 32, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-55);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 81, (int) (byte)40, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "%'sQ=v$JV/j";
      Utility.compactClassName("V", "%'sQ=v$JV/j", false);
      Utility.methodSignatureReturnType("V");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)27;
      byte byte0 = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 38, 38, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = " not found.";
      Utility.replace(">:p;", "org.apache.bcel.classfile.Utility$1", " not found.");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)76;
      byte byte0 = (byte)53;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte)73;
      byteArray0[7] = (byte) (-17);
      Utility.codeToString(byteArray0, (ConstantPool) null, 0, (int) (byte) (-128), false);
      try { 
        Utility.typeOfMethodSignature("lm}dW'E$g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lm}dW'E$g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)35;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 756, (int) (byte)100, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Utility.searchOpcode("iaload");
      Utility.accessToString(109);
      Utility.classOrInterface(1);
      Utility.classOrInterface(109);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-105);
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)25;
      byte byte1 = (byte) (-58);
      byteArray0[2] = (byte) (-58);
      int int0 = 6;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), 6);
      try { 
        Utility.typeOfMethodSignature("0:    dcmpl\n1:    aload\t\t%198\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    dcmpl
         // 1:    aload\t\t%198
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)47;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)47, 392);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("JIA1xR9=Pa1*l7-");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)0;
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)88);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(3);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-2031), 40);
      assertEquals("0:    lrem\n1:    nop\n2:    istore_2\n3:    pop2\n4:    dload\t\t%2\n6:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      Utility.printArray(objectArray0, true, false);
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null, null, null, null, null, null, null}", string0);
      
      Utility.isJavaIdentifierPart('f');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("From\tTo\tHandler\tType\n", "{null, null, null, null, null, null, null}", true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{null, null, null, null, null, null, null}";
      stringArray0[1] = "{null, null, null, null, null, null, null}";
      stringArray0[2] = "{null, null, null, null, null, null, null}";
      stringArray0[3] = "From\tTo\tHandler\tType\n";
      Utility.methodTypeToSignature("{null, null, null, null, null, null, null}", stringArray0);
      String string1 = Utility.methodTypeToSignature("{null, null, null, null, null, null, null}", stringArray0);
      assertEquals("(L{null,;L{null,;L{null,;LFrom;)L{null,;", string1);
      
      Utility.methodSignatureReturnType("From\tTo\tHandler\tType\n", true);
      String string2 = Utility.methodSignatureToString("(L{null,;L{null,;L{null,;LFrom;)L{null,;", "{null, null, null, null, null, null, null}", "float", true);
      assertEquals("float {null, {null, null, null, null, null, null, null}({null, arg1, {null, arg2, {null, arg3, From arg4)", string2);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('f');
      assertTrue(boolean0);
      
      short short0 = Utility.searchOpcode("From\tTo\tHandler\tType\n");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = (byte)27;
      byteArray0[0] = (byte)27;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte byte1 = (byte)98;
      byteArray0[1] = (byte)98;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.decode("$hb", false);
      try { 
        Utility.typeOfSignature("$hb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $hb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)68;
      byteArray0[7] = (byte) (-30);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureReturnType("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `? super '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)20;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), (int) (byte)20);
      Utility.decode("0:    ret\t\t%20\n", false);
      try { 
        Utility.decode("0:    ret\t\t%20\n", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "Q&Q?i1fDTmENP";
      try { 
        Utility.typeOfSignature("Q&Q?i1fDTmENP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q&Q?i1fDTmENP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.format((-413), 198, false, 'z');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)45;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)53, (int) (byte)53, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8R*gIWQ3*1q");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte) (-10);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.isSet((byte) (-10), 9);
      Utility.clearBit((byte)8, (-215));
      Utility.clearBit((byte)116, (byte)116);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-1055), (int) (byte)34);
      Utility.isSet((byte)8, (byte) (-50));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "-I`s <N])<KTLiv0Q[g";
      try { 
        Utility.typeOfSignature("-I`s <N])<KTLiv0Q[g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -I`s <N])<KTLiv0Q[g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "%!Gg";
      try { 
        Utility.typeOfSignature("%!Gg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %!Gg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(45);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[2];
      mockPrintWriter0.print(true);
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      stringWriter0.close();
      PrintWriter printWriter0 = mockPrintWriter0.format("long", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      Utility.fillup("long", 45, true, '0');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 71, (int) (byte) (-15));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Utility.setBit(68, 2364);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-10);
      Utility.toHexString(byteArray0);
      Utility.getSignature("b8 75 31 f6");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-72), 2364, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)26;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-121), (int) (byte) (-69), true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("))$xE3b+", "6F`T`Ov~J_A\"UsTy`Q", "6F`T`Ov~J_A\"UsTy`Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ))$xE3b+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)44;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)108, 1601, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "void";
      stringArray0[1] = ", low = ";
      stringArray0[2] = "void";
      stringArray0[3] = "void";
      stringArray0[4] = "void";
      stringArray0[5] = "void";
      stringArray0[6] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fdiv", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte)80;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 32, 46, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E<");
      Utility.getSignature("E<");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.printArray((Object[]) null);
      Utility.accessToString((-1257), true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte)3;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)96, (int) (byte)54, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utility.getSignature("&Y");
      try { 
        Utility.typeOfSignature("&Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Utility.getSignature(">Y");
      try { 
        Utility.typeOfSignature(">Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("'", stringArray0);
      Utility.printArray((Object[]) stringArray0, false);
      Utility.methodSignatureToString("()L';", "0aNE|Ed#r5", "vvJ[Izv<!", true);
      boolean boolean0 = true;
      Utility.fillup("QUnb61KZ5q", 434, true, 'C');
      Utility.getSignature("#O\"n");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)69;
      Utility.encode(byteArray0, false);
      Utility.decode("0aNE|Ed#r5", false);
      try { 
        Utility.methodSignatureReturnType("return", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `return'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte) (-51);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-301), (int) (byte) (-104));
      assertEquals("0:    dup2\n1:    fconst_2\n2:    dcmpg\n3:    fconst_0\n4:    i2f\n5:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2");
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("d2i", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Utility.signatureToString("DaqUj8$Q`:o9_;##");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantMethodHandle constantMethodHandle0 = null;
      try {
        constantMethodHandle0 = new ConstantMethodHandle((ConstantMethodHandle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantMethodHandle", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "I'N7@r-k,vqy";
      Utility.replace("I'N7@r-k,vqy", "I'N7@r-k,vqy", "I'N7@r-k,vqy");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "`VLfHAmnk_L)<nq";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`VLfHAmnk_L)<nq");
      boolean boolean0 = false;
      Utility.compactClassName("U~$?Huc\"}]p?[Q4", "V3[U-A|k1 :r'H{8", false);
      try { 
        Utility.typeOfSignature("U~$?Huc\"}]p?[Q4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U~$?Huc\"}]p?[Q4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("Pmkp%:.BN5;-.X;E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Pmkp%:.BN5;-.X;E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "qZ)Hj%EFJm2Q]";
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("qZ)Hj%EFJm2Q]", stringArray0);
      try { 
        Utility.typeOfMethodSignature("()LqZ)Hj%EFJm2Q];");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Hj%EFJm2Q];
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)125, (int) (byte) (-69), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*xv=f2Cidz$f%y>M=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: xv=f2Cidz$f%y>M=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.getSignature("4");
      Utility.isJavaIdentifierPart('\\');
      try { 
        Utility.typeOfSignature("4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "6w<SQBUP QMBKya!lo";
      try { 
        Utility.typeOfSignature("6w<SQBUP QMBKya!lo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6w<SQBUP QMBKya!lo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-48);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)71;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-48), (int) (byte)71);
      assertEquals("0:    aload_1\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    lconst_0\n4:    fsub\n5:    lconst_1\n6:    dstore_0\n", string0);
      
      String string1 = Utility.getSignature("0:    aload_1\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    lconst_0\n4:    fsub\n5:    lconst_1\n6:    dstore_0\n");
      assertEquals("L0:;", string1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString(8192, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)0;
      byteArray0[1] = (byte) (-119);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)94;
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-119), 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 23676. Constant pool size is: 6
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte) (-24);
      byteArray0[7] = (byte)84;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-59), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utility.isSet(220, 220);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ldc2_w";
      Utility.methodTypeToSignature("ldc2_w", stringArray0);
      String string0 = "8yH~{4C>-0e";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.compactClassName("8yH~{4C>-0e", "?>...", false);
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.typeOfSignature("Synthetic attribute with length > 0");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Synthetic attribute with length > 0");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[0];
      mockPrintWriter0.println(charArray0);
      mockPrintWriter0.append((CharSequence) "Synthetic attribute with length > 0");
      char[] charArray1 = new char[1];
      charArray1[0] = 'p';
      mockPrintWriter0.write(charArray1);
      mockPrintWriter0.append('p');
      int int0 = (-1350);
      mockPrintWriter0.print((-1350));
      mockPrintWriter0.append('E');
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      Utility.convertString("Synthetic attribute with length > 0");
      try { 
        Utility.methodSignatureArgumentTypes("b(nvt\"sxEqt|1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: b(nvt\"sxEqt|1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Utility.replace("\r", "Wo<F0=>(!;b,", "ag=B6\"");
      Utility.isJavaIdentifierPart('4');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("Wo<F0=>(!;b,", ": P$Ip;gI],W`_9d[~5", "Invalid si");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte) (-107);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)65, 2133, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-118);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$p$8a", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("23 8a", string1);
      
      String string2 = Utility.signatureToString("Tbw:Xnx#;Xm-}A\"I", false);
      assertEquals("bw:Xnx#", string2);
      
      Utility.compactClassName("\"");
      boolean boolean0 = Utility.isJavaIdentifierPart('0');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)91;
      Utility.encode(byteArray0, true);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)18;
      byteArray1[1] = (byte)74;
      byteArray1[2] = (byte)89;
      byteArray1[3] = (byte)74;
      byteArray1[4] = (byte)72;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)18, (int) (byte)74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 74. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = Utility.compactClassName("]Rk/q{ m", "S@", false);
      assertEquals("]Rk.q{ m", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte)95;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-49), (int) (byte) (-21));
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    astore_0\n3:    baload\n4:    i2c\n5:    <illegal opcode>\n6:    astore\t\t%207\n8:    swap\n", string1);
      
      String string2 = Utility.format((byte)58, 97, true, '\'');
      assertEquals("58'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''", string2);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)127;
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(32, 34);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)16);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2065, 4096, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)87;
      byteArray0[8] = (byte)12;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("0c 0c 0c 0c 0c 7b 0c 57 0c", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Utility.compactClassName("\"A<Fs2Ck;,[5C|D", "\"A<Fs2Ck;,[5C|D", true);
      String string0 = "2P";
      try { 
        Utility.typeOfSignature("2P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)70;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)70;
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1393, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 23366. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "w$0*";
      // Undeclared exception!
      try { 
        Utility.decode("w$0*", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0*\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = Utility.accessToString(146);
      assertEquals("private final transient", string0);
      
      byte byte0 = Utility.typeOfSignature("Z^A?}%JO&&YsC,'*])");
      assertEquals((byte)4, byte0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('{');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "Ng!?mK";
      try { 
        Utility.typeOfSignature("Ng!?mK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ng!?mK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)21;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fload\t\t%255", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.decode("\".i@WiF-(_s8<_A+$\"", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Utility.accessToString((-2092), true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-56);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 18, (int) (byte) (-56));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "Object";
      try { 
        Utility.typeOfSignature("Object");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Object
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)90;
      byteArray0[8] = (byte) (-95);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-2763), 34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 64064. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)121;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)84, 53);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      byteSequence0.mark((byte) (-65));
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("athrow", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)20;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("03 71 00 fd c7 28 14", string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-57), 150, false);
      assertEquals("0:    iconst_0\n1:    lrem\n2:    nop\n3:    <illegal opcode>\n4:    ifnonnull\t\t#10264\n", string1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "LsHK<";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("LsHK<", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LsHK<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = false;
      char char0 = '5';
      Utility.format(57, (-2962), false, '5');
      try { 
        Utility.typeOfSignature("57");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 57
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = Utility.clearBit((-313), 2872);
      assertEquals((-16777529), int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)87;
      Constant[] constantArray0 = new Constant[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)2, (byte)2);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantLong constantLong0 = new ConstantLong((byte)87);
      constantArray0[2] = (Constant) constantLong0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[3] = (Constant) constantNameAndType1;
      ConstantInteger constantInteger0 = new ConstantInteger(1613);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[4] = (Constant) constantInteger1;
      ConstantClass constantClass1 = new ConstantClass(171);
      constantArray0[5] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2514), (int) (byte)46);
      assertEquals("0:    if_icmpeq\t\t#-3570\n3:    iconst_m1\n4:    lshr\n5:    dload\t\t%46\n7:    pop\n", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utility.accessToString(44);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte)0;
      Utility.toHexString(byteArray0);
      Utility.compactClassName("org.apache.bcel.classfile.ConstantMethodref");
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 3096, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 60, (-2430), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "X^\"d~8";
      try { 
        Utility.typeOfSignature("X^\"d~8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X^\"d~8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-27);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      byteSequence0.skip(1L);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("l2d", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.accessToString(8192, false);
      assertEquals("annotation", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)94;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 12);
      assertEquals("0:    ifnull\t\t#137\n3:    dup2_x1\n4:    dup2\n5:    iushr\n6:    dup2_x2\n", string1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("4px%,^4", false);
      int int0 = (-22);
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-22), (-22), true);
      boolean boolean1 = false;
      Utility.convertString("0:    caload\n1:    irem\n2:    ishl\n3:    fload_3\n4:    aload_2\n5:    dup2_x2\n6:    caload\n");
      boolean boolean2 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("WYVyhJ=F7S4Q<T#", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WYVyhJ=F7S4Q<T#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.typeOfMethodSignature("invokedynamic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokedynamic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-27);
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte) (-27);
      objectArray0[1] = (Object) (byte) (-27);
      objectArray0[2] = (Object) (byte) (-85);
      objectArray0[3] = (Object) (byte)112;
      objectArray0[4] = (Object) (byte) (-85);
      Utility.printArray(objectArray0, true, true);
      Utility.accessToString((-2441), false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('^');
      Utility.fillup("monitorexit", 1913, true, '(');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)21;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)118;
      byteArray1[1] = (byte)44;
      byteArray1[2] = (byte)118;
      byteArray1[3] = (byte)26;
      byteArray1[4] = (byte)26;
      byteArray1[5] = (byte)45;
      byteArray1[6] = (byte)17;
      boolean boolean1 = Utility.equals(byteArray0, byteArray1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Eg*$WRtJbzO%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Eg*$WRtJbzO%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Utility.signatureToString("Zv6f(Dy9?zAVYn", true);
      Utility.searchOpcode("\t\t<");
      Utility.searchOpcode("Zv6f(Dy9?zAVYn");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte) (-97);
      byteArray0[6] = (byte)1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 64
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte)91;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-108), (int) (byte)38, false);
      assertEquals("0:    dload_0\n1:    daload\n2:    frem\n3:    lcmp\n4:    isub\n5:    pop2\n6:    <illegal opcode>\n7:    frem\n8:    dup_x2\n", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "rAv2TW";
      Utility.replace("?>...", "?>...", "rAv2TW");
      Utility.classOrInterface((-2066));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)60;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)60, 93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)6;
      String string0 = "java.lang.4eP";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.4eP");
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte) (-51);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-108), (-1072), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 51014. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)50;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-29), (int) (byte)28);
      assertEquals("0:    fstore\t\t%20\n2:    iload_2\n3:    iastore\n4:    freturn\n5:    aaload\n", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte) (-59);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-60), (int) (byte)53, false);
      assertEquals("0:    <illegal opcode>\n1:    wide\t(wide)\n2:    saload\n3:    lshr\n4:    lload_2\n5:    jsr\t\t#24522\n", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)19;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      int int0 = 53;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 53, (int) (byte)86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Lprotected;V");
      Utility.searchOpcode("Lprotected;V");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte) (-78);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = "F~zS-.3";
      Utility.decode("F~zS-.3", false);
      Utility.decode("lastore", false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("F~zS-.3", "lastore");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // lastore
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utility.compactClassName("", "", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-11);
      Constant[] constantArray0 = new Constant[8];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-69), (-1441));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantClass constantClass0 = new ConstantClass((byte) (-69));
      constantArray0[1] = (Constant) constantClass0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-11));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[2] = (Constant) constantInteger1;
      ConstantString constantString0 = new ConstantString((byte) (-69));
      constantArray0[3] = (Constant) constantString0;
      ConstantLong constantLong0 = new ConstantLong((byte) (-11));
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[4] = (Constant) constantLong1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-69), (byte) (-11));
      constantArray0[5] = (Constant) constantMethodHandle0;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      constantArray0[6] = (Constant) constantDouble0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(244, 9981);
      constantArray0[7] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1441), (int) (byte) (-69), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("lxor", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = Utility.compactClassName("monitorenter", false);
      assertEquals("monitorenter", string0);
      
      String string1 = Utility.getSignature("boolean");
      assertEquals("Z", string1);
      
      String string2 = Utility.accessToString(64);
      assertEquals("volatile", string2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)88;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(151);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream(bufferedOutputStream0);
      constantPool0.dump(dataOutputStream0);
      String string3 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-17), (int) (byte) (-17));
      assertEquals("0:    i2s\n1:    <illegal opcode>\n2:    pop2\n", string3);
      
      String string4 = Utility.encode(byteArray0, false);
      assertEquals("$93$efX", string4);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "Q]{k{sO2C,";
      Utility.compactClassName("Q]{k{sO2C,", false);
      try { 
        Utility.methodSignatureReturnType("Q]{k{sO2C,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q]{k{sO2C,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ji[%%k&Q8<83<");
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)83;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1151630435), (-2203), false);
      Utility.isJavaIdentifierPart(')');
      Utility.convertString("A5Z}0H~#zQ-M-x");
      byte[] byteArray1 = new byte[7];
      byte byte0 = (byte)75;
      byteArray1[0] = (byte)75;
      byteArray1[1] = (byte)83;
      byteArray1[2] = (byte) (-91);
      byteArray1[3] = (byte) (-91);
      byteArray1[4] = (byte)83;
      byteArray1[5] = (byte) (-46);
      byteArray1[6] = (byte)83;
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("ji[%%k&Q8<83<");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Utility.methodTypeToSignature("arraylength", (String[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)113;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1393, (int) (byte)48, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "=DAr2hk~4M9oYZWg[-";
      try { 
        Utility.typeOfSignature("=DAr2hk~4M9oYZWg[-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =DAr2hk~4M9oYZWg[-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "'";
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-126);
      byteArray0[0] = (byte) (-126);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.printArray((Object[]) null, true);
      Utility.toHexString(byteArray0);
      Utility.setBit(91, (byte) (-126));
      Utility.setBit(95, (-1841840945));
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("82");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 82
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("'", stringArray0);
      Utility.methodSignatureReturnType("()L';");
      String string0 = "Bu3%N";
      Utility.typeOfSignature("Bu3%N");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)8;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.decode("+", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 160;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Utility.format(160, 1419, true, '&');
      try { 
        Utility.typeOfSignature(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)110;
      byteArray0[5] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lreturn", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte)122;
      byteArray0[7] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)43, (byte)123);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lshr", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)101;
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-42);
      ConstantPool constantPool0 = null;
      int int0 = 36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)101, 36);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("4px%,^4", false);
      int int0 = (-22);
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-22), (-22), true);
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Utility.convertString("Q");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte) (-2);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, 6, 4, false);
      String string0 = "int";
      ClassPath classPath0 = new ClassPath("");
      MemorySensitiveClassPathRepository memorySensitiveClassPathRepository0 = new MemorySensitiveClassPathRepository(classPath0);
      memorySensitiveClassPathRepository0.findClass("Q");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      // Undeclared exception!
      try { 
        constantPool0.accept(descendingVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.DescendingVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Utility.replace("^bR1v$nsP>Xd zY", "if_icmplt", "^bR1v$nsP>Xd zY");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)112;
      byteArray0[5] = (byte)64;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-78), (int) (byte) (-78), false);
      assertEquals("0:    baload\n1:    caload\n2:    ifge\t\t#-19854\n5:    lstore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "A%o9MvjvXb6T`j";
      try { 
        Utility.typeOfSignature("A%o9MvjvXb6T`j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A%o9MvjvXb6T`j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "\"(v0";
      try { 
        Utility.typeOfSignature("\"(v0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"(v0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("invokespecial");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals("jsr_w\t\t#-1422106661", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "DnJ.u&!O3r";
      Utility.typeOfSignature("DnJ.u&!O3r");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Utility.accessToString(992);
      String string0 = "TIDp0qrrzY]1|\"Yd8";
      Utility.searchOpcode("TIDp0qrrzY]1|\"Yd8");
      Utility.typeOfSignature("TIDp0qrrzY]1|\"Yd8");
      Utility.isJavaIdentifierPart('N');
      String string1 = "v7<;";
      Utility.compactClassName("v7<;", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("v7<;", "TIDp0qrrzY]1|\"Yd8", "synchronized volatile transient native interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: v7<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-52);
      Utility.encode(byteArray0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.decode("Gz$cc", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "invokevirtual";
      Utility.convertString("invokevirtual");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)65;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)14, (int) (byte)14, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("if_icmple", true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)75;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 7, 71, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "5";
      Utility.searchOpcode("5");
      Utility.classOrInterface(2671);
      String string1 = "O)iOJNl2CZjrnLggJp/";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("O)iOJNl2CZjrnLggJp/", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O)iOJNl2CZjrnLggJp/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Utility.getSignature("Y^zbhP'W RQ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "LY^zbhP'W;";
      stringArray0[1] = "LY^zbhP'W;";
      stringArray0[2] = "Y^zbhP'W RQ";
      stringArray0[3] = "Y^zbhP'W RQ";
      stringArray0[4] = "LY^zbhP'W;";
      stringArray0[5] = "LY^zbhP'W;";
      stringArray0[6] = "Y^zbhP'W RQ";
      stringArray0[7] = "LY^zbhP'W;";
      stringArray0[8] = "LY^zbhP'W;";
      Utility.methodTypeToSignature("LY^zbhP'W;", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(LLY^zbhP'W;;LLY^zbhP'W;;LY^zbhP'W;LY^zbhP'W;LLY^zbhP'W;;LLY^zbhP'W;;LY^zbhP'W;LLY^zbhP'W;;LLY^zbhP'W;;)LLY^zbhP'W;;", "newarray", "java.lang.Boolean");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;LLY^zbhP'W;;LY^zbhP'W;LY^zbhP'W;LLY^zbhP'W;;LLY^zbhP'W;;LY^zbhP'W;LLY^zbhP'W;;LLY^zbhP'W;;)LLY^zbhP'W;;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      byte byte0 = (byte) (-89);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)122;
      byteArray0[0] = (byte)82;
      byteArray0[6] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.setBit(31, (byte)69);
      try { 
        Utility.methodSignatureReturnType("invokedynamic", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokedynamic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "/c99_W(j ib";
      try { 
        Utility.typeOfSignature("/c99_W(j ib");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /c99_W(j ib
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      try { 
        Utility.typeOfSignature("R~8[I)BRPq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R~8[I)BRPq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Utility.format('0', 10, false, '0');
      Utility.isSet(10, 10);
      try { 
        Utility.typeOfSignature("0000000048");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0000000048
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)27;
      byteArray0[5] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("baload", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = "G`f6~TWP";
      try { 
        Utility.typeOfSignature("G`f6~TWP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G`f6~TWP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "]N-^[1Qg[P_BD<V41";
      stringArray0[1] = "]N-^[1Qg[P_BD<V41";
      stringArray0[2] = "]N-^[1Qg[P_BD<V41";
      stringArray0[3] = "]N-^[1Qg[P_BD<V41";
      stringArray0[4] = "]N-^[1Qg[P_BD<V41";
      stringArray0[5] = "RI";
      stringArray0[6] = "gG4q5d&4r-(]^*";
      stringArray0[7] = "]N-^[1Qg[P_BD<V41";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[8] = "]N-^[1Qg[P_BD<V41";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("]N-^[1Qg[P_BD<V41", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[1Qg[P_BD<V41
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = false;
      Utility.methodSignatureReturnType("B1O", false);
      String string0 = Utility.fillup("byte", 1866, false, '3');
      Utility.compactClassName("B1O", string0, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = Utility.compactClassName("monitorenter", false);
      assertEquals("monitorenter", string0);
      
      String string1 = Utility.getSignature("boolean");
      assertEquals("Z", string1);
      
      String string2 = Utility.accessToString(64);
      assertEquals("volatile", string2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)114;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(151);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string3 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-17), (int) (byte) (-17));
      assertEquals("0:    if_icmplt\t\t#-4238\n", string3);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "FhAk0)3U;";
      Utility.decode("FhAk0)3U;", false);
      Utility.typeOfSignature("FhAk0)3U;");
      String string1 = "org.apache.bcel.classfile.ConstantMethodType";
      try { 
        Utility.methodSignatureReturnType("org.apache.bcel.classfile.ConstantMethodType");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.ConstantMethodType'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte) (-36);
      byteArray0[7] = (byte) (-19);
      byteArray0[8] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(222);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fadd", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Utility.isJavaIdentifierPart('A');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)52;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("null");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.constantToString(constantArray0[0]);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)44, (-2327), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-124);
      Constant[] constantArray0 = new Constant[3];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)12);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(174, (byte)12);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)12);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("if_icmpne");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      constantInteger1.dump(dataOutputStream0);
      constantArray0[2] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 201, (int) (byte)75);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Utility.getSignature("char");
      Utility.searchOpcode("f,!lX>$%iq3=Zb06x");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)10, (int) (byte) (-31), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-98);
      Constant[] constantArray0 = new Constant[7];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)10, (byte) (-98));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)12, (byte)105);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-3318), (byte)73);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantClass constantClass0 = new ConstantClass(93);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[3] = (Constant) constantClass1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-98), 1068);
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(121, (-1));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[5] = (Constant) constantFieldref1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(110, 1769);
      constantArray0[6] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-342), (int) (byte)73, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lmul
         // 1:    lconst_1
         // 2:    fconst_1
         // 3:    dstore_2
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.clearBit((-2649), (-2649));
      String string0 = "Warning: Padding byte != 0 in ";
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)63;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(1944, (byte)63);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("lload_2", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.Utility$1");
      byteArray0[0] = (byte) (-82);
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6, 434);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "=whl$|";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=whl$|";
      stringArray0[1] = "=whl$|";
      stringArray0[2] = "[\"i}=d?qu";
      stringArray0[3] = "=whl$|";
      stringArray0[4] = "=whl$|";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("=whl$|", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [\"i}=d?qu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".(cxqj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .(cxqj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("9+j`h])='\"<u_wi&I$", false);
      assertEquals(18, byteArray0.length);
      
      short short0 = Utility.searchOpcode("9+j`h])='\"<u_wi&I$");
      assertEquals((short) (-1), short0);
      
      Utility.decode("2l3hmXX_TZ.ew", false);
      MockFile mockFile0 = new MockFile("9+j`h])='\"<u_wi&I$", "impdep1");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("getstatic", (Object[]) null);
      Utility.printArray(printWriter0, (Object[]) null);
      String string0 = Utility.format((short) (-1), (-1620), false, '\'');
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "m");
      Utility.isSet(80, 2137);
      Utility.accessToString(80);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "m";
      Utility.printArray(objectArray0, false, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(KWfaYIV<BY$8g+q;", "final volatile", "u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KWfaYIV<BY$8g+q;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Utility.isJavaIdentifierPart('A');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte)52;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("null");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)44, (-2327), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-87);
      String string0 = Utility.toHexString(byteArray0);
      Utility.compactClassName("f2 ce 48 5f 52 a9", false);
      String string1 = Utility.compactClassName("java.lang.Object@779ffe57, java.lang.Object@78b41352, java.lang.Object@b64f5dd, java.lang.Object@7e638eaa, java.lang.Object@7606ba77");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Utility.isSet(68, 251);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-108);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 14, (int) (byte)114, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)89;
      byte byte0 = (byte)50;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-211), 75, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    imul
         // 1:    dstore_0
         // 2:    nop
         // 3:    dup
         // 4:    aaload
         // 5:    iaload
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Utility.clearBit(87, 87);
      Utility.typeOfSignature("CLASSPATH component ");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-33);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.fillup("ldiv", (-70), false, 'B');
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)103;
      byte byte0 = (byte)97;
      byteArray0[3] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong((byte)66);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantLong0.setBytes((-1L));
      constantArray0[1] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      String string0 = "yiz<^gus(T@#\"m+S";
      try { 
        Utility.typeOfMethodSignature("yiz<^gus(T@#\"m+S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: yiz<^gus(T@#\"m+S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("[jY=Ngj{<", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `jY=Ngj{<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)71;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-52);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.decode("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // Unexpected end of ZLIB input stream
         //
         verifyException("java.util.zip.InflaterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Utility.typeOfSignature("[");
      Utility.searchOpcode("[");
      boolean boolean0 = true;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureArgumentTypes("castore", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: castore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = (-138);
      Utility.accessToString((-138), true);
      try { 
        Utility.decode("=<Y}AdnKX>D${R", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "L";
      String string1 = "freturn";
      Utility.replace("L", "freturn", "L");
      Utility.compactClassName("L", "L", false);
      Utility.accessToString(113);
      // Undeclared exception!
      try { 
        Utility.signatureToString("L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)91;
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-86);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte)96;
      byte byte1 = (byte)112;
      byteArray0[4] = (byte)112;
      byte byte2 = (byte)67;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = null;
      boolean boolean0 = false;
      int int0 = 1;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: 96AA6070
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((-1255L));
      constantArray0[0] = (Constant) constantLong0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1472), (byte) (-81));
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("dneg", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = Utility.clearBit(33, 33);
      assertEquals(33, int0);
      
      String string0 = Utility.methodSignatureReturnType(")F[ac$Ok0Q_oN2", false);
      assertEquals("float", string0);
      
      boolean boolean0 = Utility.isSet(33, 33);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)40;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)79;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("ba 28 00 4f", string1);
      
      int int1 = Utility.clearBit((byte) (-70), 167);
      assertEquals((-198), int1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "ba 28 00 4f";
      objectArray0[1] = (Object) (byte)0;
      objectArray0[2] = (Object) (byte)79;
      objectArray0[3] = (Object) (byte)0;
      objectArray0[4] = (Object) null;
      String string2 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"ba 28 00 4f\", \"0\", \"79\", \"0\", null}", string2);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Utility.searchOpcode("java.lang., high = ");
      short short0 = Utility.searchOpcode("java.lang., high = ");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[0] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(141, 83);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("iastore", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "<illegal opcode>";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<illegal opcode>");
      String string1 = "#fQZ%ZFe&MIF_~&";
      try { 
        Utility.typeOfSignature("#fQZ%ZFe&MIF_~&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #fQZ%ZFe&MIF_~&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)66;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte) (-17);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("d$9c_xv$f4B$K$ef", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte)31;
      byteArray0[8] = (byte)76;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance(";9Zp@Fb7n4e0P7");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-562), 192, false);
      assertEquals("0:    areturn\n1:    <illegal opcode>\n2:    daload\n3:    iload_0\n4:    bipush\t\t71\n6:    monitorexit\n7:    lload_1\n8:    astore_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte)26;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)14, (int) (byte) (-96), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)99;
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)36, (byte)36);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantLong constantLong0 = new ConstantLong((byte)99);
      constantArray0[1] = (Constant) constantLong0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-3948));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[2] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-3948), (-3948), true);
      assertEquals("0:    fload_2\n1:    dadd\n", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)33;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-6), (int) (byte)16);
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false, false);
      Utility.isJavaIdentifierPart('g');
      try { 
        Utility.decode("0:    bipush\t\t-85\n2:    <illegal opcode>\n3:    dup_x1\n4:    dstore_1\n5:    lload_3\n", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = Utility.accessToString(323);
      String string1 = Utility.compactClassName("public private volatile native");
      assertTrue(string1.equals((Object)string0));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "public private volatile native";
      objectArray0[1] = (Object) "public private volatile native";
      objectArray0[2] = (Object) "public private volatile native";
      objectArray0[3] = (Object) "public private volatile native";
      objectArray0[4] = (Object) "public private volatile native";
      objectArray0[5] = (Object) "public private volatile native";
      objectArray0[6] = (Object) "public private volatile native";
      objectArray0[7] = (Object) "public private volatile native";
      String string2 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"public private volatile native\", \"public private volatile native\", \"public private volatile native\", \"public private volatile native\", \"public private volatile native\", \"public private volatile native\", \"public private volatile native\", \"public private volatile native\"}", string2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-117);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string3 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("f2i", string3);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)103;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(331);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 190, (-359), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Utility.replace("File ", "<:zUKJE", "File ");
      try { 
        Utility.typeOfSignature("@PR`}\u0002:E)%a%D8Ab");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @PR`}\u0002:E)%a%D8Ab
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.compactClassName("monitorenter", false);
      String string0 = Utility.getSignature("boolean");
      assertEquals("Z", string0);
      
      String string1 = Utility.accessToString(64);
      assertEquals("volatile", string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)114;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(151);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-17), (int) (byte) (-17));
      assertEquals("0:    i2s\n1:    <illegal opcode>\n2:    frem\n", string2);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("M@lsaxb&x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M@lsaxb&x'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Utility.compactClassName("]Rk/q{ m", "S@", false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)58;
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte)95;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-49), (int) (byte) (-21));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\t\t<";
      stringArray0[1] = "\t\t<";
      stringArray0[2] = "\t\t<";
      stringArray0[3] = "\t\t<";
      stringArray0[4] = "\t\t<";
      stringArray0[5] = "\t\t<";
      stringArray0[6] = "\t\t<";
      stringArray0[7] = "\t\t<";
      stringArray0[8] = "`SwVU-q~";
      Utility.methodTypeToSignature("\t\t<", stringArray0);
      try { 
        Utility.methodSignatureReturnType("\t\t<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t\t<'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-22), (-1451800776));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 19795. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Utility.convertString("Class ");
      Utility.isJavaIdentifierPart('l');
      try { 
        Utility.typeOfSignature("9)K#+uN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9)K#+uN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "Unreachable default case reached!";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("Unreachable default case reached!", false);
      boolean boolean0 = false;
      Utility.fillup("Unreachable default case reached!", 91, false, 'W');
      String string1 = "Illegal type: ";
      Utility.typeOfSignature("Illegal type: ");
      try { 
        Utility.methodSignatureReturnType("Unreachable default case reached!", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = "N'HyN6N,#";
      boolean boolean0 = true;
      Utility.compactClassName("N'HyN6N,#", true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", ");
      Utility.decode("u~Jx", false);
      try { 
        Utility.methodSignatureReturnType("N'HyN6N,#", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N'HyN6N,#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Utility.convertString("9Li37--1r-V[)\"zj/}");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-89);
      Utility.toHexString(byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("29 a7", "9Li37--1r-V[)\"zj/}", "9Li37--1r-V[)\"zj/}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 29 a7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Utility.replace("java.lang.Throwable", "java.lang.Throwable", "java.lang.Throwable");
      String string0 = "'";
      Utility.convertString("'");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte) (-116);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)64, 86);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = 2237;
      Utility.setBit(2237, 62);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("r#MjsX'b", stringArray0);
      Utility.typeOfMethodSignature("()Lr#MjsX'b;");
      Utility.replace("()Lr#MjsX'b;", "()Lr#MjsX'b;", "r#MjsX'b");
      String string0 = "3g;b@l<(*X6\\vg#Qf";
      try { 
        Utility.typeOfSignature("3g;b@l<(*X6vg#Qf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3g;b@l<(*X6vg#Qf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Utility.replace("0oB1=4J@Az+$F", ":", ":");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "0oB1=4J@Az+$F";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[1] = (Object) ":";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[2] = (Object) "0oB1=4J@Az+$F";
      objectArray0[3] = (Object) "0oB1=4J@Az+$F";
      objectArray0[4] = (Object) ":";
      objectArray0[5] = (Object) "0oB1=4J@Az+$F";
      objectArray0[6] = (Object) "0oB1=4J@Az+$F";
      Utility.printArray(objectArray0);
      int int0 = (-1275);
      Utility.isSet((-1275), 1653);
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.signatureToString("CIVJ*zADmo)x/DP],", false);
      Utility.printArray((Object[]) null, true, false);
      Utility.accessToString(83);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-60);
      byte byte0 = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 99
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Utility.isSet(76, 76);
      try { 
        Utility.typeOfMethodSignature("(Ifq{@j`m&i11f[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (Ifq{@j`m&i11f[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.methodSignatureReturnType("V", true);
      Utility.accessToString((-77), true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "void";
      objectArray0[1] = (Object) "V";
      objectArray0[2] = (Object) "void";
      objectArray0[3] = (Object) "void";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "public private final transient native abstract strictfp synthetic annotation enum";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) "void";
      String string1 = Utility.printArray(objectArray0, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = "R\">xABByn`W";
      // Undeclared exception!
      try { 
        Utility.signatureToString("R\">xABByn`W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R\">xABByn`W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("SyntheticRepository could not load ", true);
      String string0 = "Sh|:Xc";
      Utility.methodSignatureReturnType("Sh|:Xc");
      int int0 = (-790);
      Utility.fillup("SyntheticRepository could not load ", (-790), true, 's');
      // Undeclared exception!
      try { 
        Utility.signatureToString("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `short'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureArgumentTypes("(~|9jMZ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `~|9jMZ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = "L{java/lang/Object@4ccd1de6,;V";
      Utility.replace("dmul", "s<}B!;+njm},c(-", "L{java/lang/Object@4ccd1de6,;V");
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)94;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)107;
      byteArray1[3] = (byte) (-21);
      byteArray1[4] = (byte)94;
      byteArray1[5] = (byte)94;
      byteArray1[6] = (byte) (-21);
      byteArray1[7] = (byte)94;
      byteArray1[8] = (byte)94;
      Utility.equals(byteArray1, byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 171, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dJe1p");
      String string0 = Utility.convertString("");
      String string1 = Utility.fillup("", 2386, true, 'B');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = "EmcK_9,W";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("EmcK_9,W", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EmcK_9,W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Utility.classOrInterface(190);
      boolean boolean0 = false;
      Utility.fillup("WXy4h1ly0<H8O'rxX", 168, false, 'M');
      Utility.decode("float", false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "float";
      objectArray0[1] = (Object) "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXy4h1ly0<H8O'rxX";
      Utility.printArray(objectArray0, false, true);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Utility.convertString("float");
      Utility.accessToString((-2306));
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "private protected static final synchronized volatile transient interface abstract synthetic annotation enum";
      objectArray0[1] = (Object) "float";
      objectArray0[2] = (Object) "float";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "float";
      Utility.printArray(objectArray0, true);
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("YI-C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YI-C
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("G(0u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G(0u'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("EA", false);
      String string0 = "Td-palnj\"^Y:2Ms";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Td-palnj\"^Y:2Ms", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Td-palnj\"^Y:2Ms
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      int int0 = Utility.setBit(186, (-1338));
      assertEquals(250, int0);
      
      String string0 = Utility.methodTypeToSignature("|?a29zhP{)I2r6]:", (String[]) null);
      assertEquals("()L|?a29zhP{)I2r6]:;", string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Utility.compactClassName("monitorenter", false);
      Utility.getSignature("boolean");
      Utility.accessToString((-350));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)114;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(151);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      constantClass0.clone();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-85), (int) (byte)14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Utility.accessToString((-1070), true);
      Utility.classOrInterface(116);
      Utility.convertString("d2i");
      Utility.replace("g4RzS}|:B", "saload", "char");
      Utility.accessToString(116);
      Utility.convertString("q{G4l.)4&MbnMP");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(116);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "q{G4l.)4&MbnMP", 2, 2);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "d2i";
      Utility.printArray(printStream0, objectArray0);
      assertEquals("{d2i}\n", byteArrayOutputStream0.toString());
      assertEquals(6, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      String string0 = "H9";
      // Undeclared exception!
      try { 
        Utility.signatureToString("H9", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H9'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int int0 = 166;
      Utility.setBit(166, 166);
      String string0 = "KD";
      try { 
        Utility.methodSignatureReturnType("KD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KD'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.replace("dmul", "s<}B!;+njm},c(-", "L{java/lang/Object@4ccd1de6,;V");
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)94;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)107;
      byteArray1[3] = (byte) (-21);
      byteArray1[4] = (byte)94;
      byteArray1[5] = (byte)94;
      byteArray1[6] = (byte) (-21);
      byteArray1[7] = (byte)94;
      byteArray1[8] = (byte)94;
      boolean boolean0 = Utility.equals(byteArray1, byteArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.fillup(")>;`s={:`TJR@", 10, false, '0');
      Utility.isSet(10, 10);
      Utility.compactClassName(")>;`s={:`TJR@", ")>;`s={:`TJR@", true);
      try { 
        Utility.typeOfSignature(")>;`s={:`TJR@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )>;`s={:`TJR@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType(";]Tf[)W,", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-21);
      Utility.equals(byteArray0, byteArray0);
      Utility.signatureToString("I'*", true);
      String string0 = Utility.accessToString((int) (byte) (-32));
      assertEquals("synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string0);
      
      int int0 = Utility.clearBit(92, (byte) (-71));
      assertEquals(92, int0);
      
      Utility.format((byte) (-21), 5136, true, 'k');
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{}", string1);
      
      int int1 = Utility.setBit(92, 5136);
      assertEquals(65628, int1);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      try { 
        Utility.typeOfSignature("79@e]{_%unjx2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 79@e]{_%unjx2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("jsr\t\t#31501");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `jsr\t\t#31501'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Utility.accessToString(79, true);
      Utility.clearBit((-2601), 64);
      Utility.setBit((-2037), 64);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte)96;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2602), (int) (byte)96, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      int int0 = (-3118);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "void");
      Utility.classOrInterface((-3118));
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = "M7jfy-M6U&bz8jQa$";
      try { 
        Utility.typeOfSignature("M7jfy-M6U&bz8jQa$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M7jfy-M6U&bz8jQa$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      short short0 = Utility.searchOpcode("d2i");
      assertEquals((short)142, short0);
      
      String string0 = Utility.getSignature("double");
      assertEquals("D", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-32);
      byteArray0[0] = (byte) (-32);
      String string0 = "breakpoint";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "breakpoint");
      byteArray0[1] = (byte)43;
      byte byte1 = (byte) (-102);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)117;
      Utility.equals(byteArray0, byteArray0);
      Utility.clearBit((byte)43, (byte) (-32));
      ConstantPool constantPool0 = null;
      int int0 = (-583);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)43, (-583));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)53;
      byte byte0 = (byte)71;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-96);
      byte byte1 = (byte)89;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)53;
      byteArray0[8] = (byte) (-96);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = " _=-b]=+dp:{%]W0";
      Utility.decode(" _=-b]=+dp:{%]W0", false);
      try { 
        Utility.typeOfSignature("<>;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <>;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      int int0 = 46;
      int int1 = 93;
      boolean boolean0 = false;
      Utility.format(46, 93, false, '#');
      Utility.fillup("###########################################################################################46", 46, true, '#');
      // Undeclared exception!
      try { 
        Utility.signatureToString("XkL4od@\"]D", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XkL4od@\"]D'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-7);
      byte byte0 = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-122);
      byteArray0[4] = (byte)123;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      try { 
        Utility.methodSignatureReturnType("YMmv!he");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YMmv!he'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null, true);
      try { 
        Utility.typeOfSignature(", npairs = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , npairs = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-19);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)39, true);
      assertEquals("0:    dload_1\n1:    arraylength\n2:    nop\n3:    <illegal opcode>\n4:    <illegal opcode>\n", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dload_1", string1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "JLkGCCD?";
      Utility.methodSignatureReturnType("JLkGCCD?");
      String string1 = "_{:pz%`h";
      Utility.compactClassName("_{:pz%`h");
      MockPrintStream mockPrintStream0 = new MockPrintStream("long");
      String string2 = "";
      Object[] objectArray0 = new Object[3];
      mockPrintStream0.print((Object) "");
      objectArray0[0] = (Object) "long";
      objectArray0[1] = (Object) "long";
      objectArray0[2] = (Object) "_{:pz%`h";
      PrintStream printStream0 = mockPrintStream0.format("", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      try { 
        Utility.decode("ygjJk\"", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Utility.compactClassName("monitorenter", false);
      Utility.getSignature("boolean");
      Utility.accessToString((-350));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)114;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(151);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)14, (int) (byte)14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)69;
      byte byte0 = (byte) (-89);
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte) (-118);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.setBit(31, (byte)69);
      try { 
        Utility.methodSignatureReturnType("invokedynamic", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `invokedynamic'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)65;
      byteArray0[0] = (byte)65;
      byte[] byteArray1 = new byte[2];
      byte byte1 = (byte)74;
      byteArray1[0] = (byte)74;
      byteArray1[1] = (byte)65;
      Utility.equals(byteArray0, byteArray1);
      char char0 = '3';
      Utility.isJavaIdentifierPart('3');
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      try { 
        Utility.methodSignatureArgumentTypes("\"", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Utility.searchOpcode("java.lang., high = ");
      short short0 = Utility.searchOpcode("java.lang., high = ");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)79;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(141, 83);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Utility.fillup("D", (-1654), true, 'o');
      Utility.accessToString(34, true);
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null);
      Utility.setBit(3604, 34);
      MockFile mockFile0 = new MockFile("hhvh4X;Is7X|[e+", "\t\t<");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "\t\t<");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // \t\t<
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      try { 
        Utility.methodSignatureToString("Illegally nested brackets:", "Illegally nested brackets:", "putstatic", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Illegally nested brackets:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = Utility.accessToString(2402);
      assertEquals("private synchronized volatile native strictfp", string0);
      
      byte[] byteArray0 = Utility.decode("s14TEXhT", false);
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("s14TEXhT", string1);
      
      String string2 = Utility.compactClassName("Vm/o&", "private synchronized volatile native strictfp", false);
      assertEquals("Vm.o&", string2);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = "Ks[\\\"#n";
      // Undeclared exception!
      try { 
        Utility.getSignature("Ks[\"#n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[\"#n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Utility.format(161, 161, false, 's');
      // Undeclared exception!
      try { 
        Utility.signatureToString("PP", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PP'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "Unrecognized attribute type tag parsed: ";
      try { 
        Utility.methodSignatureReturnType("Unrecognized attribute type tag parsed: ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unrecognized attribute type tag parsed: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.convertString("float");
      Utility.accessToString(81);
      Utility.setBit(162, 2422);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("float");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "public final volatile";
      mockPrintStream0.append('\"');
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "public final volatile";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      Utility.compactClassName("org.apache.bcel.util.ClassLoaderRepository");
      Utility.isJavaIdentifierPart('~');
      Utility.convertString(":VYL%xE@N");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\r");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      String string0 = Utility.printArray(objectArray0, false, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Utility.format(3284, 3284, true, 'p');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble(1130.56);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantMethodref constantMethodref1 = new ConstantMethodref(1011, 1011);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("lstore\t\t%118", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Utility.getSignature("if_icmpgt");
      String string0 = "Ld8yEkOSUi4I68";
      Utility.typeOfSignature("Ld8yEkOSUi4I68");
      Utility.getSignature("if_icmpgt");
      byte[] byteArray0 = Utility.decode("ifnull", false);
      Utility.signatureToString("Lif_icmpgt;", false);
      Utility.equals(byteArray0, byteArray0);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lookupswitch");
      Utility.decode("o", false);
      Utility.compactClassName("ret");
      // Undeclared exception!
      try { 
        Utility.signatureToString("ifnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ifnull'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-8);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Utility.setBit(167, 167);
      Utility.searchOpcode("short");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(167);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append(',');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) charArrayWriter1;
      objectArray0[2] = (Object) charArrayWriter1;
      objectArray0[3] = (Object) charArrayWriter1;
      objectArray0[4] = (Object) charArrayWriter1;
      objectArray0[5] = (Object) "short";
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) charArrayWriter0;
      objectArray0[8] = (Object) "short";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(151, charArrayWriter1.size());
      assertEquals(151, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-104);
      byteArray0[2] = (byte)81;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)55, (-2861), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Utility.classOrInterface(737);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "interface";
      objectArray0[1] = (Object) "interface";
      objectArray0[2] = (Object) "interface";
      objectArray0[3] = (Object) "interface";
      objectArray0[4] = (Object) "interface";
      objectArray0[5] = (Object) "interface";
      objectArray0[6] = (Object) "interface";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.printArray(objectArray0, false, false);
      Utility.accessToString(737);
      Utility.format(737, 737, true, 'L');
      Utility.compactClassName("interface, interface, interface, interface, interface, interface, interface");
      Utility.accessToString(737);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)120;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)81;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)55, (-2861), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-61);
      byteArray0[0] = (byte) (-61);
      byte byte1 = (byte)12;
      byteArray0[1] = (byte)12;
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte)12, false);
      Utility.isSet((byte)12, (byte)12);
      int int0 = 9;
      Utility.classOrInterface(9);
      int int1 = 127;
      int int2 = 129;
      Utility.isSet(127, 129);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.accessToString(102, false);
      Utility.accessToString((-53786696), false);
      try { 
        Utility.typeOfSignature("c3 0c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: c3 0c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Utility.classOrInterface(1865);
      Utility.accessToString(1865);
      boolean boolean0 = true;
      Utility.format(1865, 393, true, '7');
      String string0 = "ldiv";
      try { 
        Utility.methodSignatureArgumentTypes("ldiv", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ldiv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      char char0 = 'J';
      Utility.isJavaIdentifierPart('J');
      try { 
        Utility.methodSignatureArgumentTypes(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)79;
      Utility.equals(byteArray0, byteArray0);
      Utility.isSet((byte) (-1), 314);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)28;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)28;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "long";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "long");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)28, (-850), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)78;
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)52;
      Constant[] constantArray0 = new Constant[7];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", ", low = ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \", low = \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      int int0 = 60;
      Utility.classOrInterface(60);
      File file0 = null;
      String string0 = "c0Wh$[\\Gw #h<";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "c0Wh$[Gw #h<");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // c0Wh$[Gw #h<
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)0;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("49 00 00 90 6a 00", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-22);
      Utility.encode(byteArray0, true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) (byte) (-22);
      objectArray0[1] = (Object) (byte) (-2);
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (byte) (-22);
      objectArray0[5] = (Object) (byte) (-22);
      objectArray0[6] = (Object) (byte) (-22);
      objectArray0[7] = (Object) (byte) (-22);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@y H9H=7=Bf]";
      stringArray0[1] = "@y H9H=7=Bf]";
      stringArray0[2] = "@y H9H=7=Bf]";
      stringArray0[3] = "@y H9H=7=Bf]";
      stringArray0[4] = "@y H9H=7=Bf]";
      stringArray0[5] = "@y H9H=7=Bf]";
      stringArray0[6] = "@y H9H=7=Bf]";
      stringArray0[7] = "@y H9H=7=Bf]";
      stringArray0[8] = "@y H9H=7=Bf]";
      Utility.methodTypeToSignature("@y H9H=7=Bf]", stringArray0);
      Utility.compactClassName("@y H9H=7=Bf]");
      try { 
        Utility.methodSignatureReturnType("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      int int0 = (-2696);
      Utility.format((-2696), 0, false, 'j');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        byteSequence0.readFloat();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = "jIK<0rLR<MzkI";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("jIK<0rLR<MzkI", "jIK<0rLR<MzkI", "t[|j:};kukcgs=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: jIK<0rLR<MzkI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = "+";
      try { 
        Utility.typeOfSignature("+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      int int0 = Utility.clearBit(3549, 715);
      assertEquals(1501, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte) (-2);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "drem";
      boolean boolean0 = true;
      Utility.compactClassName("drem", "drem", true);
      Object[] objectArray0 = new Object[4];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-36);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      objectArray0[3] = object0;
      Utility.printArray(objectArray0, true);
      String string1 = "vr";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vr");
      Utility.replace("", "{, , , java.lang.Object@2a93cfc4}", "");
      try { 
        Utility.methodSignatureReturnType("drem");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `drem'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      char char0 = '(';
      Utility.isJavaIdentifierPart('(');
      Utility.clearBit((-446), 3176);
      String string0 = "ES&k9`Pekm8CBLth7";
      Utility.compactClassName("ES&k9`Pekm8CBLth7", "5TX\"0f)y|R4vWK", false);
      String string1 = "fT2";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ES&k9`Pekm8CBLth7", "fT2", "ES&k9`Pekm8CBLth7", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ES&k9`Pekm8CBLth7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "|)&Te;c 4vuk#";
      stringArray0[1] = "|)&Te;c 4vuk#";
      stringArray0[2] = "|)&Te;c 4vuk#";
      stringArray0[3] = "|)&Te;c 4vuk#";
      stringArray0[4] = "|)&Te;c 4vuk#";
      stringArray0[5] = "|)&Te;c 4vuk#";
      stringArray0[6] = "|)&Te;c 4vuk#";
      stringArray0[7] = "|)&Te;c 4vuk#";
      Utility.methodTypeToSignature("|)&Te;c 4vuk#", stringArray0);
      Utility.getSignature("YI-C[Wpqf9<j$9.].~");
      Utility.accessToString(16, true);
      try { 
        Utility.methodSignatureReturnType("+&;", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `+&;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)103;
      byte byte0 = (byte)97;
      byteArray0[3] = (byte)97;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantLong constantLong0 = new ConstantLong((byte)66);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantLong0.setBytes((-1L));
      constantArray0[1] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool1.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      String string0 = "yiz<^gus(T@#\"m+S";
      try { 
        Utility.typeOfMethodSignature("yiz<^gus(T@#\"m+S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: yiz<^gus(T@#\"m+S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.getSignature("char");
      Utility.searchOpcode("char");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-62);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C");
      byteArray0[3] = (byte)10;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)10, (int) (byte) (-31), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)71;
      byteArray0[0] = (byte)71;
      byte byte1 = (byte)94;
      byteArray0[1] = (byte)94;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.toHexString(byteArray0);
      Utility.getSignature("-Bh%+B\"Kg<#+SS_|");
      Utility.accessToString(4);
      Utility.classOrInterface(182);
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfMethodSignature("Signature: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)0;
      byte byte0 = (byte)68;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)52;
      Constant[] constantArray0 = new Constant[7];
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("", ", low = ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \", low = \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Utility.replace("gb^%*QD", "gb^%*QD", "gb^%*QD");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)70, 888);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
