/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:36:19 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.ObjectStreamConstants;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Member;
import java.util.regex.Pattern;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BranchInstruction;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.CompoundInstruction;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.IFLE;
import org.apache.bcel.generic.IXOR;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.verifier.structurals.ExecutionVisitor;
import org.apache.bcel.verifier.structurals.Frame;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      assertEquals(1, constantPool0.getLength());
      
      ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
      assertEquals(256, constantPool1.getLength());
      
      int int0 = constantPoolGen0.lookupString("lload_2");
      int int1 = constantPoolGen0.lookupFieldref("lload_2", "lload_2", "j2");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.getSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1111), (-1111));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantDouble constantDouble0 = new ConstantDouble((-1111));
      constantArray0[1] = (Constant) constantDouble0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(2468);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[3] = (Constant) constantMethodType1;
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[4] = (Constant) constantDouble1;
      ConstantString constantString0 = new ConstantString((-2592));
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-2592), 187);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.toString();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantDouble1, constantPoolGen1);
      assertEquals(1, constantPoolGen1.getSize());
      assertEquals(1, int0);
      
      int int1 = Character.MIN_RADIX;
      int int2 = constantPoolGen0.lookupFloat(0.0F);
      assertEquals((-1), int2);
      assertEquals(8, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.getFinalConstantPool();
      int int0 = constantPoolGen0.addNameAndType("%", "%");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addDouble(0.0);
      int int0 = constantPoolGen0.lookupInteger(1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInteger((-377));
      int int0 = constantPoolGen0.addInteger(1);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addDouble(0.0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantString constantString0 = new ConstantString(245);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.toString();
      constantArray0[2] = (Constant) constantString0;
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addClass("$\"]!l`_i3tO*CJBv");
      constantPoolGen0.addDouble(730.865102);
      constantPoolGen0.addMethodref("$\"]!l`_i3tO*CJBv", "$\"]!l`_i3tO*CJBv", "$\"]!l`_i3tO*CJBv");
      constantPoolGen0.toString();
      assertEquals(7, constantPoolGen0.getSize());
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(252, 240);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantDouble constantDouble0 = new ConstantDouble(252);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble((-2081.3523864915));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantInteger constantInteger0 = new ConstantInteger(3);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.adjustSize();
      MockFile mockFile0 = new MockFile(":", ":");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, ":");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \":\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      assertEquals(1, constantPool0.getLength());
      
      int int0 = constantPoolGen0.lookupLong((-323L));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      assertEquals(2, constantPool0.getLength());
      
      int int0 = constantPoolGen0.lookupLong((-323L));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(174);
      constantArray0[0] = (Constant) constantString0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(174, 255);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantString constantString1 = new ConstantString(constantString0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(174, 249);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[0], constantPoolGen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Constant[] constantArray0 = new Constant[25];
      ConstantDouble constantDouble0 = new ConstantDouble((-1097));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantInteger constantInteger0 = new ConstantInteger((-1097));
      constantArray0[2] = (Constant) constantInteger0;
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen1);
      constantPool0.copy();
      String[] stringArray0 = new String[3];
      Boolean boolean0 = Boolean.TRUE;
      PUSH pUSH0 = new PUSH(constantPoolGen1, boolean0);
      pUSH0.getInstructionList();
      int int0 = Short.SIZE;
      int int1 = constantPoolGen0.getSize();
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(222, 222);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantMethodHandle0.setReferenceIndex(249);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.getSize();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[0], constantPoolGen1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_MethodHandle[15](reference_kind = 222, reference_index = 249)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      float float0 = 0.0F;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1912, 273);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantFloat constantFloat0 = new ConstantFloat(305.0F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(5, 256);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Ic~BI?S#m(sMDE.4B$");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-4249), (-4249));
      constantArray0[3] = (Constant) constantMethodref0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupString("%-fD?LYeC6f");
      ObjectType objectType0 = Type.STRING;
      constantPoolGen0.addClass(objectType0);
      constantPoolGen0.toString();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-1));
      InstructionList instructionList0 = new InstructionList(pUSH0);
      MethodGen methodGen0 = new MethodGen(3128, objectType0, objectType0.NO_ARGS, (String[]) null, "", "1)CONSTANT_Utf8[1](\"java/lang/String\")\n2)CONSTANT_Class[7](name_index = 1)\n", instructionList0, constantPoolGen0);
      constantPoolGen0.addInterfaceMethodref(methodGen0);
      constantPoolGen0.addFieldref("", "", "");
      constantPoolGen0.lookupClass("");
      constantPoolGen0.getConstantPool();
      constantPoolGen0.addInteger(11);
      int int0 = constantPoolGen0.addInterfaceMethodref(methodGen0);
      assertEquals(13, constantPoolGen0.getSize());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant(991, (Constant) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 991
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(223, (-51));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Exceptions");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.getSize();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(113, 113);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(76, 113);
      constantNameAndType1.setSignatureIndex(113);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addLong(187L);
      GETFIELD gETFIELD0 = new GETFIELD();
      String[] stringArray0 = new String[4];
      IFLE iFLE0 = new IFLE();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) iFLE0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      String string0 = "";
      constantPoolGen0.addFieldref("", "", "");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantInteger constantInteger0 = new ConstantInteger((-2707));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.lookupClass("");
      constantPoolGen0.lookupMethodref("", "", "");
      constantPool0.toString();
      String string1 = "4";
      constantPoolGen1.lookupUtf8("4");
      try { 
        constantPool0.constantToString((-1), (byte) (-65));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -1. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupString("%-fD?LYeC6f");
      ObjectType objectType0 = Type.STRING;
      constantPoolGen0.toString();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-1));
      InstructionList instructionList0 = pUSH0.getInstructionList();
      MethodGen methodGen0 = new MethodGen(3128, objectType0, objectType0.NO_ARGS, (String[]) null, "t", "", instructionList0, constantPoolGen0);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      methodGen0.isSynthetic(true);
      ConstantInteger constantInteger0 = new ConstantInteger((-2707));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addConstant(constantInteger1, constantPoolGen1);
      constantPoolGen0.addConstant(constantInteger0, constantPoolGen1);
      constantPoolGen1.lookupNameAndType((String) null, (String) null);
      constantPool0.getConstant(1);
      Integer integer0 = new Integer(628);
      String string0 = "V=$_nUV";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&");
      try { 
        Integer.decode("&");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"&\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantDouble constantDouble0 = new ConstantDouble((-700.9));
      ConstantMethodType constantMethodType0 = new ConstantMethodType(6);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      ConstantString constantString0 = new ConstantString(234);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(3, 3);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(246, (-1));
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addDouble(246);
      constantPoolGen0.lookupDouble(1);
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2460, 2460);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-7), 3);
      constantPool1.toString();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantMethodref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -7
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      String string0 = "";
      constantPoolGen0.addInterfaceMethodref("", "", "");
      constantPoolGen0.addMethodref("", "", "");
      ObjectType objectType0 = Type.OBJECT;
      constantPoolGen0.lookupClass("");
      // Undeclared exception!
      try { 
        Type.getReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString(229);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-733), 245);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addFloat(245);
      constantPoolGen0.lookupFloat(3);
      int int0 = constantPoolGen0.addDouble(0.0);
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "";
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupString("qO '&");
      ObjectType objectType0 = Type.STRING;
      constantPoolGen0.toString();
      PUSH pUSH0 = new PUSH(constantPoolGen0, (-1));
      InstructionList instructionList0 = new InstructionList(pUSH0);
      MethodGen methodGen0 = new MethodGen((-1), objectType0, objectType0.NO_ARGS, (String[]) null, "t", "", instructionList0, constantPoolGen0);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      methodGen0.isSynthetic(true);
      ConstantInteger constantInteger0 = new ConstantInteger((-2707));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addConstant(constantInteger1, constantPoolGen1);
      constantPool0.toString();
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantInteger1;
      constantArray0[1] = (Constant) constantInteger1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-1), (-607));
      constantPoolGen1.addConstant(constantArray0[1], constantPoolGen1);
      constantPoolGen0.addDouble((-2707));
      constantPoolGen1.addMethodref(methodGen0);
      constantPoolGen1.lookupFloat(2);
      constantPoolGen1.addDouble((-1565.95));
      constantPoolGen1.addMethodref(methodGen0);
      constantPoolGen0.getSize();
      constantPoolGen0.lookupInterfaceMethodref("CONSTANT_Integer[3](bytes = 16)%\n%CONSTANT_Integer[3](bytes = 16)%\n", "FNVm", "");
      assertEquals(4, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[7];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(46);
      constantArray0[4] = (Constant) constantMethodType0;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addUtf8("::istore_0:Z@>~b2\"l%ER`jx5wI#Z@>~b2\"l%ER`jx5wI#Al:Z@>~b2\"l%ER`jx5wI#Z@>~b2\"l%ER`jx5wI#Al:2 FhCoPR|j");
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addInterfaceMethodref("#", "#", "#");
      int int0 = Float.SIZE;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantInteger constantInteger0 = new ConstantInteger(76);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
      ConstantString constantString0 = new ConstantString(76);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      constantPool2.copy();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(209, 910);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      // Undeclared exception!
      try { 
        constantFieldref1.getClass(constantPool1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 209 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantPoolGen0.addLong((-1L));
      constantPoolGen0.getFinalConstantPool();
      int int0 = constantPoolGen0.lookupLong((-323L));
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addLong((-73L));
      ObjectType objectType0 = Type.STRING;
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      Type.getType(class0);
      constantPoolGen0.addClass(objectType0);
      constantPoolGen0.addLong((-73L));
      String string0 = null;
      objectType0.toString();
      int int0 = Long.SIZE;
      // Undeclared exception!
      try { 
        constantPoolGen0.addString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes must not be null!
         //
         verifyException("org.apache.bcel.classfile.ConstantUtf8", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantInteger constantInteger0 = new ConstantInteger(2);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantLong constantLong0 = new ConstantLong(2296L);
      constantArray0[1] = (Constant) constantLong0;
      ConstantFloat constantFloat0 = new ConstantFloat(2);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(46, 2);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[3] = (Constant) constantMethodref1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(46);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[4] = (Constant) constantMethodType1;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(241, 241);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(241, 241);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(220);
      String string0 = "The 'arrayref' does not refer to an array with elements of a ReferenceType but to an array of ";
      String string1 = "!{*<N<?jI";
      String string2 = "";
      constantPoolGen0.lookupNameAndType("", "");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      String string0 = "Y_\"K?ff[K8'Ir";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Y_\"K?ff[K8'Ir");
      constantArray0[1] = (Constant) constantUtf8_0;
      int int0 = 242;
      ConstantFloat constantFloat0 = new ConstantFloat(242);
      constantArray0[3] = (Constant) constantFloat0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[4] = (Constant) constantUtf8_1;
      int int1 = 2104;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-360), 2104);
      constantArray0[5] = (Constant) constantInvokeDynamic0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Constant[] constantArray0 = new Constant[15];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(98, 98);
      constantNameAndType0.toString();
      constantNameAndType0.setNameIndex(76);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(76, 98);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.adjustSize();
      constantPoolGen0.addString("");
      ExecutionVisitor executionVisitor0 = new ExecutionVisitor();
      constantPoolGen0.addLong((-976L));
      constantPoolGen0.lookupNameAndType("c]GQwA9s:/dJ:", "");
      constantPoolGen0.lookupString("");
      String string0 = "1,Yk/g^}402j,%G";
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantNameAndType1.setSignatureIndex(247);
      MockFile mockFile0 = new MockFile("", "-iR3aN{+`b3gm),}");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "nmy/1$!x#DIzFE!(");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // nmy/1$!x#DIzFE!(
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1813), (-1813));
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1101), 241);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantClass constantClass0 = new ConstantClass(46);
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1813));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantFloat constantFloat0 = new ConstantFloat(46);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen0.addConstant(constantFloat0, constantPoolGen1);
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(174, 255);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(174, 249);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      assertEquals(1, constantPoolGen0.getSize());
      
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      assertEquals(3, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(2861, 20000);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantInteger constantInteger0 = new ConstantInteger(20000);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantFloat constantFloat0 = new ConstantFloat(20000);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(1999);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[3] = (Constant) constantMethodType1;
      ConstantLong constantLong0 = new ConstantLong(1999);
      MockFile mockFile0 = new MockFile("mN-;@#");
      MockFile mockFile1 = new MockFile(mockFile0, "mN-;@#");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      constantNameAndType1.dump(dataOutputStream0);
      constantArray0[4] = (Constant) constantLong0;
      ConstantMethodType constantMethodType2 = new ConstantMethodType(2598);
      constantArray0[5] = (Constant) constantMethodType2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.lookupFloat(20000);
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1813), (-1813));
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1101), 241);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantClass constantClass0 = new ConstantClass(130);
      constantArray0[2] = (Constant) constantClass0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1348));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[3] = (Constant) constantMethodType1;
      ConstantFloat constantFloat0 = new ConstantFloat((-1813));
      constantArray0[2] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.addConstant(constantArray0[2], constantPoolGen1);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = (-3226);
      // Undeclared exception!
      try { 
        constantPoolGen0.addDouble((-4570770991734587392L));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-143), 1232);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-295), 256);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantFieldref1.toString();
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantPool1.toString();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.adjustSize();
      ConstantClass constantClass0 = new ConstantClass((-143));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass1, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -143
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1769), (-1769));
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1769), (-1769));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mr53g-<.");
      ConstantInteger constantInteger0 = new ConstantInteger((-1973));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = Member.DECLARED;
      constantMethodHandle0.clone();
      int int1 = Double.BYTES;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPool0.copy();
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(122, (-1769));
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantInterfaceMethodref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1769
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1101), 241);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(130, 241);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.toString();
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantInteger constantInteger0 = new ConstantInteger(256);
      constantPoolGen0.addDouble(130);
      constantPoolGen0.addString("%-2");
      ConstantInteger constantInteger1 = new ConstantInteger((-1101));
      ConstantInteger constantInteger2 = new ConstantInteger(constantInteger1);
      int int0 = Pattern.CASE_INSENSITIVE;
      ConstantInteger constantInteger3 = new ConstantInteger(constantInteger0);
      ConstantInteger constantInteger4 = new ConstantInteger(constantInteger3);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      Frame.getThis();
      JSR_W jSR_W0 = new JSR_W();
      InstructionList instructionList0 = new InstructionList((BranchInstruction) jSR_W0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, (float) 8);
      instructionList0.append((Instruction) jSR_W0, (CompoundInstruction) pUSH0);
      // Undeclared exception!
      try { 
        instructionList0.append((Instruction) jSR_W0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(241, 241);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(225, 41);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(41, 241);
      constantPoolGen0.addFloat((-1926.1998F));
      constantPoolGen0.lookupNameAndType("W6j|{Gl5&hFU60{J|18@VR&#H[Cv", (String) null);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("W6j|{Gl5&hFU60{J|18@VR&#H[Cv");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8(constantUtf8_0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addConstant(constantUtf8_2, constantPoolGen0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      int int0 = constantPoolGen1.addDouble(225);
      assertEquals(9, constantPoolGen1.getSize());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1101), 241);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(241, 248);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantInteger constantInteger0 = new ConstantInteger(1);
      constantPoolGen0.addMethodref("\n", "\n", "The 'arrayref' does not refer to an array with elements of a ReferenceType but to an array of ");
      int int0 = Long.BYTES;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      assertFalse(constantPoolGen2.equals((Object)constantPoolGen1));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant[] constantArray0 = new Constant[1];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addInterfaceMethodref("", "", "");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(4, 47);
      constantNameAndType0.toString();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantArray0);
      ConstantPool constantPool0 = constantPoolGen2.getConstantPool();
      constantPoolGen2.addString("");
      int int0 = Double.MIN_EXPONENT;
      constantNameAndType0.clone();
      ConstantFieldref constantFieldref0 = new ConstantFieldref(4, (-57));
      constantPoolGen1.size = 2;
      constantPool0.copy();
      ConstantString constantString0 = new ConstantString(2);
      constantString0.copy();
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantArray0);
      int int1 = constantPoolGen2.addString("");
      assertEquals(3, constantPoolGen2.getSize());
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Constant[] constantArray0 = new Constant[6];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(241, 241);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(225, 41);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(41, 241);
      constantPoolGen0.addFloat((-1926.1998F));
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      ConstantInteger constantInteger0 = new ConstantInteger(1242);
      constantPoolGen1.lookupNameAndType("12PLwEd50,y Ta6JR", "");
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      ConstantLong constantLong0 = new ConstantLong((-1L));
      constantPoolGen0.addConstant(constantLong0, constantPoolGen1);
      constantPoolGen1.adjustSize();
      constantPoolGen0.adjustSize();
      constantPoolGen1.addMethodref("The 'arrayref' does not refer to an array with elements of a ReferenceType but to an array of ", "&@Zh", "k7D#qN'T&E6>");
      int int0 = Byte.BYTES;
      constantPoolGen1.lookupLong((-586L));
      assertEquals(12, constantPoolGen1.getSize());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addInterfaceMethodref("\"astore", "\"astore", "\"astore");
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(6, 6);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      constantPoolGen0.addString("\"astore");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = Byte.SIZE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen1.addMethodref("\"astore", "CONSTANT_Integer[3](bytes = 16)%\n", "CONSTANT_Integer[3](bytes = 16)%\n");
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      int int1 = Character.MIN_SUPPLEMENTARY_CODE_POINT;
      constantNameAndType0.toString();
      Constant constant0 = constantPoolGen2.getConstant(6);
      constantPool0.copy();
      ConstantPoolGen constantPoolGen3 = new ConstantPoolGen(constantPool0);
      int int2 = Member.DECLARED;
      constantPoolGen1.addConstant(constant0, constantPoolGen2);
      ConstantString constantString0 = new ConstantString(7);
      Integer integer0 = new Integer(6);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "V=$_nUV");
      try { 
        Integer.decode("`plkT?42I/VHMdyNY");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"`plkT?42I/VHMdyNY\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      int int0 = constantPoolGen1.addFieldref("[<{", "\"astore", "[<{");
      int int1 = Byte.SIZE;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(16, 8);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      constantPoolGen0.toString();
      Constant constant0 = constantPoolGen1.getConstant(5);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      constantPoolGen1.addConstant(constant0, constantPoolGen1);
      int int2 = constantPoolGen0.lookupLong((-1L));
      assertFalse(int2 == int0);
  }
}
