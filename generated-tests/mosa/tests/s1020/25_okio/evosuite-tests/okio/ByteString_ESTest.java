/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:15:07 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSource;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Pipe;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      byte[] byteArray0 = byteString0.toByteArray();
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      ByteString byteString1 = byteString0.substring(0);
      int int0 = byteString0.lastIndexOf(byteString1);
      assertSame(byteString1, byteString0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64();
      int int0 = byteString0.lastIndexOf(byteArray0);
      ByteString byteString1 = byteString0.substring(0);
      int int1 = byteString1.indexOf(byteString0);
      assertSame(byteString1, byteString0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring(97);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Pipe pipe0 = new Pipe(1962L);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      byteString0.write(realBufferedSource0.buffer);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.EMPTY.lastIndexOf(byteArray0);
      assertEquals((-1), int0);
      
      String string0 = byteString0.toString();
      assertEquals("[hex=00000000000000000000000000000000]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
      
      byteString0.size();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      assertTrue(byteBuffer0.hasRemaining());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
      
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((-56321));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
      
      ByteString byteString1 = byteString0.substring(0);
      byteString1.hmacSha1(byteString0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteString.decodeBase64("");
      ByteString byteString0 = ByteString.decodeBase64("");
      ByteString byteString1 = ByteString.decodeHex("");
      assertTrue(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=000000000000000000]", string0);
      
      byteString0.sha512();
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      int int0 = byteString1.lastIndexOf(byteArray0);
      assertEquals((-1), int0);
      
      ByteString byteString2 = byteString1.substring(44);
      assertEquals(20, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha512();
      byteString0.toString();
      byteString0.toString();
      ByteString byteString1 = byteString0.md5();
      byteString0.rangeEquals((-4122), byteArray0, (-4122), 40);
      ByteString byteString2 = byteString1.hmacSha256(byteString0);
      assertNotSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      boolean boolean0 = byteString1.endsWith(byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      byteString1.toString();
      ByteString byteString2 = byteString1.sha512();
      int int0 = byteString2.compareTo(byteString0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.rangeEquals(1869, byteString1, 1869, 299);
      assertFalse(boolean0);
      assertTrue(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      byteString0.endsWith(byteString1);
      String string0 = byteString1.toString();
      assertEquals("[hex=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      String string0 = byteString1.toString();
      assertEquals("[hex=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]", string0);
      
      ByteString byteString2 = new ByteString(byteArray0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      // Undeclared exception!
      try { 
        ByteString.encodeString("[hex=00]", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      boolean boolean0 = byteString1.endsWith(byteString0);
      assertFalse(boolean0);
      
      String string0 = byteString1.toString();
      assertEquals("[hex=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]", string0);
      
      ByteString byteString2 = byteString1.toAsciiLowercase();
      assertNotSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      byteString1.toAsciiLowercase();
      byteString1.toString();
      ByteString byteString2 = new ByteString(byteArray0);
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("8H");
      byteString0.utf8();
      boolean boolean0 = byteString0.equals("8H");
      assertFalse(boolean0);
      assertEquals(2, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("ID1ID2");
      ByteString byteString1 = ByteString.decodeBase64("ID1ID2");
      assertNotNull(byteString1);
      
      ByteString byteString2 = ByteString.encodeUtf8("ID1ID2");
      boolean boolean0 = byteString0.equals(byteString2);
      assertFalse(boolean0);
      assertEquals(6, byteString2.size());
      
      byteString0.sha512();
      assertTrue(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("3G}ezm[(ie;\"$%!nm");
      assertNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("70j;^C%t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: j
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=00]", string0);
      
      ByteString byteString1 = byteString0.md5();
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex(")");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: )
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 53, 53);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=53 byteCount=53
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 36, 36);
      try { 
        ByteString.read(byteArrayInputStream0, 36);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      byteString0.substring(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        ByteString.read(pipedInputStream0, (-3326));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3326
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("%s: actual 0x%08x != expected 0x%08x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: %
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      boolean boolean0 = byteString1.endsWith(byteString0);
      assertFalse(boolean0);
      
      String string0 = byteString1.toString();
      assertEquals("[hex=00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]", string0);
      
      int int0 = byteString1.indexOf(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.toString();
      byteString1.sha512();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
      
      ByteString byteString1 = byteString0.substring(0);
      byteString1.hmacSha512(byteString0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0);
      ByteString byteString1 = byteString0.substring(0);
      byteString1.EMPTY.equals(byteString0);
      int int1 = byteString1.compareTo(byteString0);
      assertSame(byteString1, byteString0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      String string0 = byteString0.toString();
      assertEquals("[hex=00]", string0);
      
      int int0 = byteString1.lastIndexOf(byteString0, 45);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("");
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeAll(buffer0);
      HashingSink hashingSink0 = HashingSink.sha256(realBufferedSource0.buffer);
      ByteString byteString1 = hashingSink0.hash();
      byteString1.toString();
      byteString1.compareTo(byteString0);
      String string0 = byteString1.base64();
      assertEquals("47DEQpj8HBSa+/TImW+5JCeuQeRkm5NMpJWZG3hSuFU=", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("uc&|aJ6}~kI'#up|d`", 36);
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 3054);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      String string0 = byteString0.toString();
      assertEquals("[hex=00000000000000000000000000]", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64Url();
      byteString0.toString();
      byteString0.lastIndexOf(byteArray0);
      byteString0.substring(0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("AAAAAA==");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: =
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      Charset charset0 = Charset.defaultCharset();
      String string0 = byteString0.string(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      ByteString.decodeBase64("");
      ByteString byteString1 = ByteString.encodeUtf8("");
      boolean boolean0 = byteString0.equals(byteString1);
      assertTrue(boolean0);
      
      ByteString byteString2 = byteString0.sha512();
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
      
      ByteString byteString1 = byteString0.substring(0);
      byteString0.hmacSha256(byteString1);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
      
      ByteString byteString1 = byteString0.substring(0);
      byteString0.sha1();
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring(47, 47);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.writeAll(hashingSource0);
      HashingSink.sha256(realBufferedSource0.buffer);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      byteString1.toString();
      ByteString byteString2 = realBufferedSource0.readByteString();
      byteString2.compareTo(byteString1);
      String string0 = byteString0.base64();
      assertEquals("AAAAAA==", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)112;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64Url();
      byteString0.toString();
      byteString0.lastIndexOf(byteArray0);
      byteString0.substring(0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("cA==");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: =
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      byteString0.substring(0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        ByteString.read(byteArrayInputStream0, 1467);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ByteString.encodeUtf8("");
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString1 = hashingSource0.hash();
      byteString1.utf8();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)116;
      byteArray1[1] = (byte)95;
      ByteString byteString2 = new ByteString(byteArray1);
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, (-1), 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.endsWith(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ByteString byteString1 = byteString0.substring(1);
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)112;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      byteString0.toString();
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.hashCode();
      byteString0.toString();
      ByteString byteString1 = new ByteString(byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)112;
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("Unexpected hex digit: ");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      charBuffer0.flip();
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      ByteString.of(byteBuffer1);
      String string0 = byteString0.toString();
      assertEquals("[text=p]", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      String string0 = byteString1.toString();
      assertEquals("[hex=0000000000000000000000000000000000000000000000000000000000000000]", string0);
      
      ByteString byteString2 = byteString1.sha512();
      int int0 = byteString2.indexOf(byteString0, 71);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[30];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
      
      ByteString byteString1 = byteString0.substring(0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 1);
      ByteString.read(bufferedInputStream0, 0);
      int int1 = byteString1.hashCode();
      assertFalse(int1 == int0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte byte0 = (byte)112;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)112;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha512();
      byteString1.endsWith(byteString0);
      byteString1.toString();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        byteString0.write(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("rgkGZ", charset0);
      int int0 = ByteString.codePointIndexToCharIndex("xadj,v'WQ-L^MK", 11);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("9");
      byte[] byteArray0 = new byte[1];
      ByteString byteString1 = new ByteString(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ByteString.encodeUtf8("9");
      byteString0.equals(byteString1);
      ByteString byteString2 = byteString0.sha512();
      byte[] byteArray1 = new byte[3];
      byteArray1[1] = (byte)20;
      byteArray1[1] = (byte)64;
      byteArray1[2] = (byte)88;
      ByteString byteString3 = new ByteString(byteArray1);
      byteString1.indexOf(byteString3);
      byteString2.toString();
      byteString1.toAsciiUppercase();
      ByteString byteString4 = new ByteString(byteArray1);
      byteString3.toString();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      // Undeclared exception!
      try { 
        HashingSource.hmacSha256(hashingSource0, (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.HashingSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      Buffer buffer0 = new Buffer();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)81;
      byteArray1[1] = (byte)37;
      byteArray1[2] = (byte)10;
      ByteString byteString0 = new ByteString(byteArray1);
      byteString0.hashCode();
      ByteString byteString1 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[text=Q%\\n]", string0);
  }
}
