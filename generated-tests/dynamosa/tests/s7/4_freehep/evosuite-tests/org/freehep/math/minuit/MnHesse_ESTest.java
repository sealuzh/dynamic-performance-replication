/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 16:46:24 GMT 2019
 */

package org.freehep.math.minuit;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.freehep.math.minuit.FCNBase;
import org.freehep.math.minuit.FunctionGradient;
import org.freehep.math.minuit.MinimumError;
import org.freehep.math.minuit.MinimumParameters;
import org.freehep.math.minuit.MinimumState;
import org.freehep.math.minuit.MnAlgebraicSymMatrix;
import org.freehep.math.minuit.MnAlgebraicVector;
import org.freehep.math.minuit.MnFcn;
import org.freehep.math.minuit.MnHesse;
import org.freehep.math.minuit.MnStrategy;
import org.freehep.math.minuit.MnUserCovariance;
import org.freehep.math.minuit.MnUserParameterState;
import org.freehep.math.minuit.MnUserParameters;
import org.freehep.math.minuit.MnUserTransformation;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MnHesse_ESTest extends MnHesse_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      mnStrategy0.setGradientStepTolerance(0.0);
      mnStrategy0.setGradientTolerance(974.682641859);
      mnStrategy0.setGradientNCycles(0);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      mnStrategy0.setHessianG2Tolerance(0.0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2.8421709430404007E-14, 990.9720616581365, (double)0, 4.5342380511772425E-17, 2877.9129622).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-335.0811779081774);
      doubleArray0[1] = (-335.0811779081774);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10000.0, 0.0, (-1002099.4019065484), 2.8722680000000005, 1.9507086778347271E-7).when(fCNBase1).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0, 879);
      doubleArray0[2] = 974.682641859;
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, 0);
      double double0 = mnHesse0.tolerg2();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      double double0 = 10.0;
      MnFcn mnFcn0 = new MnFcn((FCNBase) null, 10.0);
      MinimumState minimumState0 = new MinimumState(0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-914.5099369770835), (-914.5099369770835), (-1598.0), 0.02, 0.8000000000000002).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("-]WP4^Q+PD[NXMYitIC", (-914.5099369770835), 3.200000000000002E-6, (-709.712310706), 1394.11355138);
      mnHesse0.calculate(fCNBase0, mnUserParameters0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-914.5099369770835);
      doubleArray0[1] = (-977.130131624474);
      doubleArray0[2] = (-709.712310706);
      doubleArray0[3] = 3.200000000000002E-6;
      doubleArray0[4] = 1394.11355138;
      doubleArray0[5] = 3.200000000000002E-6;
      doubleArray0[6] = 1394.11355138;
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, doubleArray0, 3801);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      mnHesse0.tolerg2();
      MnHesse mnHesse1 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, 2520.8196322154, 0.1, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0.1);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(96);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 2903.0067624);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2520.8196322154, 96);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(96);
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, (-15.93962));
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0, mnAlgebraicVector0, mnAlgebraicVector0);
      MinimumState minimumState1 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, 0.1, (-2296));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.1;
      doubleArray0[1] = (-15.93962);
      doubleArray0[2] = (double) 96;
      doubleArray0[3] = 2520.8196322154;
      doubleArray0[4] = 516.4694703023983;
      doubleArray0[5] = (double) (-2296);
      doubleArray0[6] = (-15.93962);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnHesse mnHesse2 = new MnHesse();
      MinimumState minimumState2 = mnHesse2.calculate(mnFcn0, minimumState1, mnUserTransformation0, (-2296));
      mnHesse2.calculate(mnFcn0, minimumState2, mnUserTransformation0, 0);
      MinimumState minimumState3 = mnHesse0.calculate(mnFcn0, minimumState2, mnUserTransformation0, 2);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState3, (-2296), mnUserTransformation0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase1, mnUserParameterState0, (-428));
      assertEquals((-2228), mnUserParameterState1.nfcn());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1.9309634727799988E10, 1.9309634727799988E10, 1.9309634727799988E10, 4.287548049407, 1.9309634727799988E10).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0);
      doubleArray0[0] = 431.898;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
      assertEquals(16, mnUserParameterState0.nfcn());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1279.167;
      doubleArray0[1] = 1279.167;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnHesse0.calculate(fCNBase1, mnUserParameters0, mnUserCovariance0, Integer.MAX_VALUE);
      doubleArray0[2] = 1279.167;
      doubleArray0[3] = 1279.167;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      mnHesse0.tolerg2();
      MnHesse mnHesse1 = new MnHesse();
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(96);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 2903.0067624);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, (-2385.30203), 96);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      FCNBase fCNBase0 = null;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 96;
      doubleArray0[1] = (double) 0;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(0);
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, (MnUserParameters) null, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(3803);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)3803, (-500334.0529701458), (-500334.0529701458), (-1511.64719006026), (double)3803).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 3803;
      doubleArray1[1] = 1.1881487820584719E-11;
      doubleArray1[2] = (double) 3803;
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray1);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      mnUserCovariance0.clone();
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, mnUserCovariance0, 515);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-1441.134));
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(0);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 0.0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 1.0E-35, (-1));
      MinimumError minimumError0 = new MinimumError(2537);
      MnAlgebraicVector mnAlgebraicVector1 = new MnAlgebraicVector(0);
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector1);
      MinimumState minimumState1 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, (-1.0), (-1720));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserTransformation mnUserTransformation0 = mnUserParameters1.trafo();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState1, (-762.588598), mnUserTransformation0);
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, mnUserParameterState0, (-1720));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0E-6;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 332.99520534;
      doubleArray0[3] = 0.02;
      int int0 = (-2407);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance((-2407));
      int int1 = 0;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, mnUserCovariance0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          MnHesse mnHesse0 = new MnHesse();
          FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
          doReturn(10.0, 1978.61745, 10.0, 213.196347278, 0.9000000000000001).when(fCNBase0).valueOf(any(double[].class));
          MnFcn mnFcn0 = new MnFcn(fCNBase0, (-1573.854976607445));
          MinimumState minimumState0 = new MinimumState(1245);
          double[] doubleArray0 = new double[1];
          doubleArray0[0] = (-1573.854976607445);
          MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
          MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray0, doubleArray0);
          MnUserParameters mnUserParameters2 = mnUserParameters0.clone();
          MnUserTransformation mnUserTransformation0 = mnUserParameters2.trafo();
          MnUserTransformation mnUserTransformation1 = new MnUserTransformation();
          MinimumState minimumState1 = new MinimumState(699876);
          MnUserParameters mnUserParameters3 = new MnUserParameters(doubleArray0, doubleArray0);
          mnUserParameters3.trafo();
          // Undeclared exception!
          mnHesse0.calculate(mnFcn0, minimumState1, mnUserTransformation0, 1311);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, mnUserCovariance0, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setHessianG2Tolerance((-2478.637693678));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2.8267706519102624;
      doubleArray0[1] = (-2478.637693678);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-2478.637693678);
      doubleArray0[4] = 1279.167;
      doubleArray0[5] = (-2478.637693678);
      doubleArray0[6] = 1279.167;
      MnUserCovariance mnUserCovariance1 = new MnUserCovariance(3792);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, mnUserCovariance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(3803);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, (-2872.268), 10.0, (double)3803, 0.0087110126332492).when(fCNBase0).valueOf(any(double[].class));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserCovariance mnUserCovariance1 = mnUserCovariance0.clone();
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 8.0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3803);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 8.0);
      MinimumParameters minimumParameters1 = new MinimumParameters(4460);
      MinimumState minimumState0 = new MinimumState(minimumParameters1, 8.0, 759);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 8.0;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, (-1));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = 2.0;
      doubleArray1[2] = (double) 3803;
      doubleArray1[3] = (double) 4460;
      doubleArray1[4] = (double) (-3449);
      doubleArray1[5] = (double) 787;
      doubleArray1[6] = 0.03350811779081775;
      doubleArray1[7] = (-3.6459319234425493E12);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase1, doubleArray1, mnUserCovariance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, 1978.61745, 10.0, 213.196347278, 0.9000000000000001).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-1573.854976607445));
      MinimumState minimumState0 = new MinimumState(1249);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1573.854976607445);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.clone();
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 699876);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setLowStrategy();
      MnHesse mnHesse1 = new MnHesse(mnStrategy0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1573.854976607445), (-1107.81965), (-1573.854976607445), 0.0, 1978.61745).when(fCNBase1).valueOf(any(double[].class));
      mnStrategy0.setHessianNCycles((-1129));
      mnHesse1.calculate(fCNBase1, doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      mnStrategy0.setGradientStepTolerance(0.0);
      mnStrategy0.setGradientTolerance(974.682641859);
      mnStrategy0.setGradientNCycles(0);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      mnStrategy0.setHessianG2Tolerance(0.0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2.8421709430404007E-14, 990.9720616581365, (double)0, 4.5342380511772425E-17, 2877.9129622).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-335.0811779081774);
      doubleArray0[1] = (-335.0811779081774);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10000.0, 0.0, (-1002099.4019065484), 2.8722680000000005, 1.9507086778347271E-7).when(fCNBase1).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0, 879);
      doubleArray0[2] = 974.682641859;
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, 0);
      int int0 = mnHesse0.ncycles();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-5400.591487497), 0.1, 0.1, 0.1, (-0.27740942628257126)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1508.74;
      doubleArray0[1] = 3119.84035488606;
      doubleArray0[2] = 0.1;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
      assertEquals((-5400.591487497), mnUserParameterState0.fval(), 0.01);
      assertEquals(26, mnUserParameterState0.nfcn());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnStrategy mnStrategy0 = new MnStrategy();
      double double0 = 0.1;
      mnStrategy0.setGradientTolerance(0.1);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(759);
      // Undeclared exception!
      mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0, 1879);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      mnStrategy0.setGradientStepTolerance(0.0);
      mnStrategy0.setGradientTolerance(974.682641859);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserCovariance mnUserCovariance1 = mnUserCovariance0.clone();
      mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance1, 0);
      // Undeclared exception!
      try { 
        mnUserCovariance1.get(0, 1322);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserCovariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 0;
      MnHesse mnHesse0 = new MnHesse(0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      int int1 = (-3641);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnHesse0.calculate(fCNBase1, mnUserParameters0, 0);
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, (-3641));
      mnHesse0.tolerstp();
      mnHesse0.tolerg2();
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserCovariance mnUserCovariance0 = null;
      try {
        mnUserCovariance0 = new MnUserCovariance(doubleArray0, (-3641));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Inconsistent arguments
         //
         verifyException("org.freehep.math.minuit.MnUserCovariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, mnUserCovariance0, 3771);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameterState0, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1172.569491713595;
      doubleArray0[1] = 1172.569491713595;
      doubleArray0[2] = (-1064.344879672207);
      doubleArray0[3] = (-5955.2);
      doubleArray0[4] = 1172.569491713595;
      doubleArray0[5] = 1172.569491713595;
      doubleArray0[6] = 1172.569491713595;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters1);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(40, mnUserParameterState0.nfcn());
      
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1508.74;
      doubleArray1[1] = 3128.445472793;
      doubleArray1[2] = 0.1;
      int int0 = mnHesse0.ncycles();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnStrategy mnStrategy1 = new MnStrategy(2146351904);
      mnStrategy1.setHessianG2Tolerance(616.2757115636708);
      MnHesse mnHesse0 = new MnHesse(mnStrategy1);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, (double[]) null, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(233);
      mnStrategy0.setHessianG2Tolerance(233);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 233);
      MinimumParameters minimumParameters0 = new MinimumParameters(233);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("", 3.2701019309880785E15, 2388.0, 125.231585734041, 1996.0430337947782);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase1, mnUserParameters0);
      FCNBase fCNBase2 = null;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 125.231585734041;
      doubleArray0[1] = (-3213.853000838491);
      doubleArray0[2] = (double) 233;
      doubleArray0[3] = 1704.08575;
      doubleArray0[4] = 3.2701019309880785E15;
      doubleArray0[5] = (double) 3801;
      doubleArray0[6] = 2388.0;
      doubleArray0[7] = 1996.0430337947782;
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, doubleArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      mnStrategy0.setGradientStepTolerance(0.0);
      mnStrategy0.setGradientTolerance((-997.9839060376));
      mnStrategy0.setGradientTolerance((-2345.0));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 974.682641859;
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, 0);
      mnHesse0.ncycles();
      FCNBase fCNBase1 = null;
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, mnUserParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(1);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserCovariance mnUserCovariance1 = mnUserCovariance0.clone();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, 1807);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0010000000000000002;
      doubleArray0[1] = 0.5;
      doubleArray0[2] = (-1271.3012);
      doubleArray0[3] = 1297.251405;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0017008781433389686;
      doubleArray0[6] = (-1394.92022381);
      doubleArray0[7] = 10.0;
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1271.3012);
      doubleArray1[1] = 0.5;
      doubleArray1[2] = (-1271.3012);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 0.5;
      doubleArray1[6] = 10.0;
      doubleArray1[7] = 0.5;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray1);
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      mnHesse0.calculate(fCNBase1, mnUserParameters1);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase2).valueOf(any(double[].class));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      mnHesse0.calculate(fCNBase2, mnUserParameters1, mnUserCovariance0);
      FCNBase fCNBase3 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase3, doubleArray0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1508.74;
      doubleArray0[1] = 3128.445472793;
      doubleArray0[2] = 0.1;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
      assertEquals(24, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0E-35;
      doubleArray0[1] = (-1.0);
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
      assertEquals(20, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(579);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(8.386624250684468E10, (-1619.03765189152), 4.0E-7, 1293.3414, (-1619.03765189152)).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 884.0873997323;
      doubleArray0[1] = (double) 579;
      doubleArray0[2] = (double) 579;
      doubleArray0[3] = (double) 579;
      doubleArray0[4] = 0.1;
      doubleArray0[5] = (double) 579;
      doubleArray0[6] = (double) 579;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnHesse0.calculate(fCNBase1, mnUserParameters0, 579);
      double double0 = mnHesse0.tolerg2();
      assertEquals(0.02, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy((-475));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-475);
      doubleArray0[1] = 1886.2203345;
      doubleArray0[2] = (double) (-475);
      doubleArray0[3] = (double) (-475);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance((-475));
      // Undeclared exception!
      mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0, (-475));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(3803);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, (MnUserCovariance) null, 3803);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      mnStrategy0.setHessianNCycles(0);
      mnHesse0.calculate(fCNBase0, mnUserParameters0, (-4));
      mnHesse0.tolerg2();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      // Undeclared exception!
      mnHesse0.calculate(fCNBase1, mnUserParameters0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy((-1));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, (MnUserParameters) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 2743.0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(2);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 0.0);
      int int0 = 1416;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 1.0E-35, 1416);
      mnUserParameters1.trafo();
      int int1 = 0;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase1, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, mnUserParameters0, 261);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      mnHesse0.tolerg2();
      MnHesse mnHesse1 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, 2520.8196322154, 0.1, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MinimumParameters minimumParameters0 = new MinimumParameters(7);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 7, 3792);
      MinimumState minimumState1 = new MinimumState(minimumParameters0, (-3481.2992583538903), 3782);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 0.1;
      doubleArray0[2] = 0.1;
      doubleArray0[3] = (double) 3792;
      doubleArray0[4] = (-3481.2992583538903);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MnHesse mnHesse2 = new MnHesse();
      MnHesse mnHesse3 = new MnHesse();
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 1777.5777619167);
      mnHesse1.calculate(mnFcn0, minimumState0, mnUserTransformation0, (-1514));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase1, mnUserParameters0);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy((-1));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, 8.0, 8.0, (-1809.524019986), 0.0).when(fCNBase0).valueOf(any(double[].class));
      mnStrategy0.setHessianStepTolerance((-1));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-3727.29);
      mnStrategy0.setHessianNCycles((-1));
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, 1245);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.5, (-1.0)).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase1, mnUserParameters1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, 1737);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-3424.138382526697), 1261.7476652, 1261.7476652, (-3424.138382526697), (-591.74583906)).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-1573.854976607445));
      MinimumState minimumState0 = new MinimumState(1249);
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = (-1573.854976607445);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(5);
      MnAlgebraicVector mnAlgebraicVector1 = mnUserTransformation0.transform(mnAlgebraicVector0);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector1, (-1573.854976607445));
      MinimumState minimumState1 = new MinimumState(minimumParameters0, 2.0, 3174);
      MnUserTransformation mnUserTransformation1 = new MnUserTransformation();
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector1);
      MinimumState minimumState2 = new MinimumState(minimumParameters0, (MinimumError) null, functionGradient0, 2.8421709430404007E-14, 241040);
      MinimumState minimumState3 = mnHesse0.calculate(mnFcn0, minimumState2, mnUserTransformation0, 1241);
      assertNotSame(minimumState2, minimumState3);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 3803;
      MnHesse mnHesse0 = new MnHesse(3803);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, (-2872.268), 10.0, (double)3803, 0.0087110126332492).when(fCNBase0).valueOf(any(double[].class));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 10.0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3803);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 0.0);
      int int1 = (-1);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 1000.30872831292, (-1));
      mnFcn0.valueOf(mnAlgebraicVector0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1000.30872831292;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MnHesse mnHesse1 = new MnHesse();
      // Undeclared exception!
      try { 
        mnHesse1.calculate(mnFcn0, minimumState0, mnUserTransformation0, 3803);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy((-272));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, (MnUserParameters) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, (MnUserParameterState) null, 684);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      mnStrategy0.setGradientStepTolerance(0.0);
      mnStrategy0.setGradientTolerance(974.682641859);
      mnStrategy0.setGradientNCycles(0);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      mnStrategy0.setHessianG2Tolerance(0.0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2.8421709430404007E-14, 990.9720616581365, (double)0, 4.5342380511772425E-17, 2877.9129622).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-335.0811779081774);
      doubleArray0[1] = (-335.0811779081774);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0, 879);
      doubleArray0[2] = 974.682641859;
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, 0);
      int int0 = mnHesse0.ncycles();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setGradientTolerance(0);
      mnStrategy0.setGradientStepTolerance(0.0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0.0);
      MinimumParameters minimumParameters0 = new MinimumParameters(0);
      MinimumError.MnMadePosDef minimumError_MnMadePosDef0 = new MinimumError.MnMadePosDef();
      MinimumError minimumError0 = new MinimumError((MnAlgebraicSymMatrix) null, minimumError_MnMadePosDef0);
      FunctionGradient functionGradient0 = new FunctionGradient(0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, 0.0, 0);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
      int int0 = 4451;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation1, 4451);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(0);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 8.197424187582412);
      MnHesse mnHesse0 = new MnHesse();
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 8.197424187582412, 0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(905);
      int int0 = mnHesse0.ncycles();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(3803);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3803);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 0.0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 1000.30872831292, (-1));
      double[] doubleArray0 = new double[1];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      mnAlgebraicVector0.clone();
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserTransformation mnUserTransformation1 = mnUserParameters1.trafo();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, 0.0, mnUserTransformation1);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase0, mnUserParameterState0, (-1));
      MnUserParameters mnUserParameters2 = new MnUserParameters();
      MnStrategy mnStrategy0 = new MnStrategy((-1));
      MnHesse mnHesse1 = new MnHesse(mnStrategy0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      // Undeclared exception!
      try { 
        mnHesse1.calculate(fCNBase1, mnUserParameters2, (MnUserCovariance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(233);
      mnStrategy0.setHessianG2Tolerance(233);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1279.167;
      doubleArray0[1] = (double) 233;
      doubleArray0[2] = (double) 233;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(5);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      int int0 = (-3256);
      mnStrategy0.setHessianG2Tolerance((-3256));
      mnStrategy0.setHessianGradientNCycles((-3256));
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((-585));
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserCovariance mnUserCovariance1 = mnUserCovariance0.clone();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, (MnUserParameters) null, mnUserCovariance1, (-585));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-3424.138382526697), 1261.7476652, 1261.7476652, (-3424.138382526697), (-591.74583906)).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-1573.854976607445));
      MinimumState minimumState0 = new MinimumState(1249);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1573.854976607445);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(1);
      MnAlgebraicVector mnAlgebraicVector1 = mnUserTransformation0.transform(mnAlgebraicVector0);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector1, (-1573.854976607445));
      MinimumState minimumState1 = new MinimumState(minimumParameters0, 2.0, 3174);
      MnUserTransformation mnUserTransformation1 = new MnUserTransformation();
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector1);
      MinimumState minimumState2 = new MinimumState(minimumParameters0, (MinimumError) null, functionGradient0, 2.8421709430404007E-14, 241040);
      MinimumState minimumState3 = mnHesse0.calculate(mnFcn0, minimumState2, mnUserTransformation0, 1241);
      assertNotSame(minimumState3, minimumState2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, 1978.61745, 10.0, 213.196347278, 0.9000000000000001).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-1573.854976607445));
      MinimumState minimumState0 = new MinimumState(1249);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1573.854976607445);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters2 = mnUserParameters0.clone();
      mnUserParameters2.trafo();
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      mnUserTransformation0.add("", (-1573.854976607445), 0.1, (-1573.854976607445), 1249);
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 699876);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setLowStrategy();
      MnHesse mnHesse1 = new MnHesse(mnStrategy0);
      mnStrategy0.setHessianNCycles(100);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance((-1));
      MnUserCovariance mnUserCovariance1 = mnUserCovariance0.clone();
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse1.calculate(fCNBase2, doubleArray0, mnUserCovariance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(233);
      mnStrategy0.setHessianG2Tolerance(233);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1279.167;
      doubleArray0[1] = (double) 233;
      doubleArray0[2] = (double) 233;
      int int0 = 1488;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, (double[]) null, doubleArray0, 1488);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-4029.5));
      MinimumState minimumState0 = new MinimumState(948);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 948);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      int int0 = 100;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(100);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, 1978.61745, 10.0, 213.196347278, 0.9000000000000001).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-1573.854976607445));
      MinimumState minimumState0 = new MinimumState(1249);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1573.854976607445);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray0, doubleArray0);
      MnAlgebraicVector mnAlgebraicVector0 = minimumState0.vec();
      mnFcn0.valueOf(mnAlgebraicVector0);
      mnUserParameters0.clone();
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 699876);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setLowStrategy();
      MnHesse mnHesse1 = new MnHesse(mnStrategy0);
      mnStrategy0.setGradientStepTolerance(10.0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1573.854976607445), (-1107.81965)).when(fCNBase1).valueOf(any(double[].class));
      mnStrategy0.setHessianNCycles((-1129));
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase2).valueOf(any(double[].class));
      mnHesse1.calculate(fCNBase2, mnUserParameters1, 6);
      mnHesse1.calculate(fCNBase1, doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      FCNBase fCNBase3 = null;
      mnHesse1.tolerg2();
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-281.34906048196), (-2.4998002760541626E19), (-2.4998002760541626E19), (-2.4998002760541626E19), (-2.4998002760541626E19)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1508.74;
      doubleArray0[1] = 3128.445472793;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, (-949));
      assertEquals((-281.34906048196), mnUserParameterState0.fval(), 0.01);
      assertEquals(26, mnUserParameterState0.nfcn());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnHesse mnHesse0 = new MnHesse(0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(3803);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)3803, (double)3803, (double)3803, (double)3803, (double)3803).when(fCNBase0).valueOf(any(double[].class));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 3803);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3803);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 3803);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, (-1), (-1));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3803;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MnHesse mnHesse1 = new MnHesse();
      mnHesse1.calculate(mnFcn0, minimumState0, mnUserTransformation0, 3803);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState0, (-308.2380413336), mnUserTransformation0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState1 = mnHesse1.calculate(fCNBase1, mnUserParameterState0, (-1));
      assertEquals(17, mnUserParameterState1.nfcn());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 2.8421709430404007E-14, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 7);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(7);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 2.82321557628017);
      MinimumError minimumError0 = new MinimumError(7);
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, 7, (-2585));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2.82321557628017;
      doubleArray0[1] = 2.82321557628017;
      doubleArray0[2] = (double) (-2585);
      doubleArray0[3] = 2.82321557628017;
      doubleArray0[4] = (double) 7;
      doubleArray0[5] = 2.82321557628017;
      doubleArray0[6] = (-2685.3075834873);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 1054);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase1, mnUserParameters0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(0);
      double double0 = (-335.0811779081774);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      mnStrategy0.setGradientStepTolerance(0.0);
      double double1 = 974.682641859;
      mnStrategy0.setGradientTolerance(974.682641859);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      int int1 = 154;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(154);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase1, doubleArray0, mnUserCovariance0, 547);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(3803);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, 10.0, 10.0, (double)3803, 10.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 10.0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3803);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 10.0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, (-1), (-1));
      mnFcn0.valueOf(mnAlgebraicVector0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 10.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.trafo();
      MnHesse mnHesse1 = new MnHesse();
      mnUserParameters0.setLowerLimit(0, 33.50811779081774);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MinimumState minimumState1 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 3803);
      assertNotSame(minimumState0, minimumState1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(3803);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, (-2872.268), 10.0, (double)3803, 0.0087110126332492).when(fCNBase0).valueOf(any(double[].class));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 10.0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3803);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 0.0);
      mnAlgebraicVector0.toString();
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 1000.30872831292, (-1));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1000.30872831292;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MnHesse mnHesse1 = new MnHesse();
      mnHesse1.calculate(mnFcn0, minimumState0, mnUserTransformation0, 3803);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, 1000.30872831292, 141.25684554528294, 1000.30872831292, 141.25684554528294).when(fCNBase1).valueOf(any(double[].class));
      mnUserParameters0.add("d6u.SY1Jg.W$` S", 1775.2253700708554);
      int int0 = (-1);
      mnHesse1.calculate(fCNBase1, mnUserParameters0, (-1));
      FCNBase fCNBase2 = null;
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(0);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 8.197424187582412);
      MnHesse mnHesse0 = new MnHesse();
      MinimumState minimumState0 = new MinimumState(0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // parameters are invalid
         //
         verifyException("org.freehep.math.minuit.HessianGradientCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 0;
      MnHesse mnHesse0 = new MnHesse(0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-115.7991186), (double)0, (-721.0), (-721.0), 0.5).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      int int1 = (-3641);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-115.7991186), 0.0, 0.1, 1.1923748699226459E-11, 0.001813411712674906).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnHesse0.calculate(fCNBase1, mnUserParameters0, 0);
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, (-3641));
      mnHesse0.tolerstp();
      mnHesse0.tolerg2();
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserCovariance mnUserCovariance0 = null;
      try {
        mnUserCovariance0 = new MnUserCovariance(doubleArray0, (-3641));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Inconsistent arguments
         //
         verifyException("org.freehep.math.minuit.MnUserCovariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(100);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = null;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase1, (double[]) null, mnUserCovariance0, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(100);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 100);
      int int0 = (-1);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, (-1), 100);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 100;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (-16.65788);
      doubleArray0[6] = 0.0;
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MnHesse mnHesse1 = new MnHesse();
      int int1 = 200;
      // Undeclared exception!
      try { 
        mnHesse1.calculate((MnFcn) null, minimumState0, mnUserTransformation0, 200);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(200);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 200;
      doubleArray0[1] = (double) 200;
      doubleArray0[2] = (double) 200;
      doubleArray0[3] = (double) 200;
      doubleArray0[4] = (double) 200;
      doubleArray0[5] = (double) 200;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 200;
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, doubleArray1, 1565);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setGradientTolerance(0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[7];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1.0E-35, 1.0E-35, (-1350.44), 2738.258594844232, 2738.258594844232).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      mnHesse0.calculate(fCNBase1, mnUserParameterState0, 0);
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnUserCovariance0.get(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserCovariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.1;
      doubleArray0[1] = 3128.445472793;
      doubleArray0[2] = 1508.74;
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserCovariance mnUserCovariance1 = mnUserCovariance0.clone();
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, mnUserCovariance1, 745);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 2743.0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(2);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 0.0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 1.0E-35, 1416);
      MnUserTransformation mnUserTransformation0 = mnUserParameters1.trafo();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 1416);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnHesse mnHesse0 = new MnHesse((MnStrategy) null);
      // Undeclared exception!
      try { 
        mnHesse0.tolerstp();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnHesse", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, 1978.61745, 10.0, 213.196347278, 0.9000000000000001).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-1573.854976607445));
      MinimumState minimumState0 = new MinimumState(1249);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1573.854976607445);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      mnUserTransformation0.add("", (-1573.854976607445), 10.0, (-1573.854976607445), 1249);
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 699876);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setLowStrategy();
      MnHesse mnHesse1 = new MnHesse(mnStrategy0);
      mnStrategy0.setHessianNCycles(100);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.9000000000000001, (double)1249, 0.0, 213.196347278, (-369.08248679)).when(fCNBase1).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(699876);
      mnUserCovariance0.clone();
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase2, doubleArray0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(3803);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, (-2872.268), 10.0, (double)3803, 0.0087110126332492).when(fCNBase0).valueOf(any(double[].class));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 10.0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3803);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 0.0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 1000.30872831292, (-1));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1000.30872831292;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MnHesse mnHesse1 = new MnHesse();
      MinimumState minimumState1 = mnHesse1.calculate(mnFcn0, minimumState0, mnUserTransformation0, 3803);
      MnUserTransformation mnUserTransformation1 = new MnUserTransformation(doubleArray0, doubleArray0);
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation1, (-1));
      MnUserTransformation mnUserTransformation2 = mnUserParameters0.trafo();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState1, (-2363.23313588098), mnUserTransformation2);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase1, mnUserParameterState0, 3803);
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertEquals(36, mnUserParameterState1.nfcn());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(785.3710629, 2.8421709430404007E-14, 0.0, 0.0, 785.3710629).when(fCNBase0).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase0, mnUserParameters0, (-4));
      mnHesse0.tolerg2();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-4), 0.1, (-1.7998451282508437E7), (-358.4431200043255), 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase1, mnUserParameters0);
      assertEquals((-4.0), mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((-2112));
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0, (-2112));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse((MnStrategy) null);
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(3768);
      // Undeclared exception!
      mnHesse0.calculate((FCNBase) null, mnUserParameters0, mnUserCovariance0, 3795);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(3803);
      MnStrategy mnStrategy0 = new MnStrategy(3803);
      mnStrategy0.setGradientTolerance(677.7536741309121);
      mnStrategy0.setGradientStepTolerance(677.7536741309121);
      mnStrategy0.setGradientTolerance(209.7903953667827);
      mnStrategy0.setGradientTolerance(209.7903953667827);
      MnHesse mnHesse1 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        mnHesse1.calculate(fCNBase0, doubleArray0, doubleArray0, 3803);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(3803);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setGradientTolerance(0.0087110126332492);
      double double0 = 0.0;
      mnStrategy0.setGradientStepTolerance(3803);
      mnStrategy0.setGradientTolerance(974.682641859);
      MnHesse mnHesse1 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3159.68505871456);
      doubleArray0[1] = (-3159.68505871456);
      // Undeclared exception!
      try { 
        mnHesse1.calculate(fCNBase1, doubleArray0, (MnUserCovariance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(3803);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)3803, 0.37118949190508527, (double)3803, (double)3803, (-1120.9267657322105)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters0, 2446);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase1, mnUserParameterState0, 3803);
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
      assertEquals(44, mnUserParameterState1.nfcn());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 3803;
      MnHesse mnHesse0 = new MnHesse(3803);
      double double0 = 10.0;
      double double1 = (-2872.268);
      double double2 = 0.0087110126332492;
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      int int1 = 3772;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(3772);
      int int2 = 7;
      // Undeclared exception!
      mnHesse0.calculate((FCNBase) null, mnUserParameters0, mnUserCovariance0, 7);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-1441.134));
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(0);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 0.0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 1.0E-35, (-1));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-335.0811779081774);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MnHesse mnHesse0 = new MnHesse();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 6555;
      MnHesse mnHesse0 = new MnHesse(6555);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 6555;
      doubleArray0[1] = (double) 6555;
      doubleArray0[2] = (double) 6555;
      doubleArray0[3] = (double) 6555;
      doubleArray0[4] = 1.0E-35;
      doubleArray0[5] = (double) 6555;
      doubleArray0[6] = (double) 6555;
      doubleArray0[7] = (double) 6555;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.0E-35;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (double) 6555;
      doubleArray1[3] = (double) 6555;
      MnUserParameters mnUserParameters0 = null;
      try {
        mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setMediumStrategy();
      mnStrategy0.setHessianStepTolerance((-355.72433));
      int int0 = 1957;
      mnStrategy0.setHessianNCycles(1957);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      mnHesse0.tolerstp();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      MnUserCovariance mnUserCovariance0 = null;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, (MnUserCovariance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(233);
      MnHesse mnHesse0 = new MnHesse((MnStrategy) null);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, (double[]) null, (double[]) null, 1240);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, (double[]) null, (double[]) null, 2703);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      double double0 = mnHesse0.tolerstp();
      assertEquals(0.3, double0, 0.01);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.3;
      doubleArray0[1] = 0.3;
      doubleArray0[2] = 0.3;
      doubleArray0[3] = 0.3;
      doubleArray0[4] = 0.3;
      double double1 = 0.02;
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase1, doubleArray0, mnUserCovariance0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(100);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 4409.3308, 4409.3308, (double)100, 4409.3308).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 100;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, 100);
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
      assertEquals(30, mnUserParameterState0.nfcn());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-4331.860840171), 612.2365, 2443.9241291, 3899.650876, (-483.2765319139)).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1508.74;
      doubleArray0[1] = 3128.445472793;
      doubleArray0[2] = 0.1;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, mnUserParameters0, (MnUserCovariance) null);
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase0, mnUserParameterState0, 2703);
      assertEquals((-483.2765319139), mnUserParameterState1.fval(), 0.01);
      assertEquals(50, mnUserParameterState1.nfcn());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      MnHesse mnHesse0 = new MnHesse();
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)3803, (double)3803, (-1428.40734122955), (-1277.4664694892313), (double)3803).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3803;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 1781.2707184231608);
      mnFcn0.theNumCall = 370;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3803);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 3803);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 3803.0, 111);
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 3803);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-2457), 3803.0, 0.1, (double)3803, 3.4757952924137337E-4).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase1, mnUserParameters0, (-2457));
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1000.0, (-1.0), (-1428.40734122955), 0.1, (double)111).when(fCNBase2).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase2, mnUserParameterState0, (-1));
      FCNBase fCNBase3 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase3).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState2 = mnHesse0.calculate(fCNBase3, mnUserParameterState1, 1899);
      assertEquals(24, mnUserParameterState2.nfcn());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(3803);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)3803, (double)3803, (-1428.40734122955), (-1277.19895817), (double)3803).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3803;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 1781.2707184231608);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3803);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 3803);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 3803.0, 111);
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 3803);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase1, mnUserParameters0, (-2457));
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase2).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase2, mnUserParameterState0, (-1));
      assertEquals(32, mnUserParameterState1.nfcn());
      assertEquals(0.0, mnUserParameterState1.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(3803);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)3803, (double)3803, (-1428.40734122955), (-1277.19895817), (double)3803).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3803;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 1781.2707184231608);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3803);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 3803);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 3803.0, 111);
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 3803);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-2457), 3803.0, 0.1, (double)3803, 3.4757952924137337E-4).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase1, mnUserParameters0, (-2457));
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1000.0, (-1.0), (-1428.40734122955), 0.1, (double)111).when(fCNBase2).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase2, mnUserParameterState0, (-1));
      assertEquals(8, mnUserParameterState1.nfcn());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      mnHesse0.tolerg2();
      MnHesse mnHesse1 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0.1);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(96);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1059.8634099;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 3785;
      doubleArray0[3] = 0.8000000000000002;
      doubleArray0[4] = 5.9604644775390625E-8;
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0, 0);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse1.calculate(fCNBase2, doubleArray0, (MnUserCovariance) null, 3785);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(233);
      mnStrategy0.setHessianG2Tolerance(233);
      MnHesse mnHesse0 = new MnHesse();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnHesse mnHesse1 = new MnHesse(mnStrategy0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState();
      // Undeclared exception!
      try { 
        mnHesse1.calculate(fCNBase0, mnUserParameterState0, 233);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 2737.4941954822684);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(2);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 0.0);
      int int0 = 1416;
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 1.0E-35, 1416);
      mnUserParameters1.trafo();
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase2).valueOf(any(double[].class));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase2, doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(860.2633905072215, 860.2633905072215, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[2];
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
      assertEquals(24, mnUserParameterState0.nfcn());
      assertEquals(860.2633905072215, mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(233);
      mnStrategy0.setHessianG2Tolerance(233);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 233);
      MinimumParameters minimumParameters0 = new MinimumParameters(233);
      int int0 = 652;
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(652);
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, 233);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(233);
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, 652, 652);
      double[] doubleArray0 = new double[0];
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, (double[]) null);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 652);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameters are invalid
         //
         verifyException("org.freehep.math.minuit.InitialGradientCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(233);
      mnStrategy0.setHessianG2Tolerance(233);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1279.167;
      doubleArray0[1] = (double) 233;
      doubleArray0[2] = (double) 233;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      mnUserCovariance0.clone();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase1, 2.0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(787);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, mnAlgebraicVector0, 1279.167);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 2.0, 787);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, (-3449));
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, doubleArray0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy((-1));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      mnStrategy0.setHessianStepTolerance((-1));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (-3727.29);
      mnStrategy0.setHessianNCycles((-1));
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, 1245);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase1, mnUserParameters1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setGradientTolerance(0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-1441.134));
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(0);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 0.0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 1.0E-35, 0);
      double[] doubleArray0 = new double[2];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, 1.0E-35, (-1441.134), 702.6963951676, (-983.12606982)).when(fCNBase1).valueOf(any(double[].class));
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1955.33, 0.0, 0.0, 1.0E-35, 2.8421709430404007E-14).when(fCNBase2).valueOf(any(double[].class));
      double[] doubleArray1 = new double[0];
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(doubleArray1, 0);
      mnHesse0.calculate(fCNBase2, mnUserParameters0, mnUserCovariance0, (-1));
      mnHesse0.calculate(fCNBase1, mnUserParameters0);
      FCNBase fCNBase3 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnHesse mnHesse1 = new MnHesse();
      mnUserParameters0.trafo();
      // Undeclared exception!
      try { 
        mnHesse1.calculate(mnFcn0, minimumState0, mnUserTransformation0, 2335);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(0);
      MnHesse mnHesse0 = new MnHesse((MnStrategy) null);
      // Undeclared exception!
      try { 
        mnHesse0.tolerg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnHesse", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      mnStrategy0.setGradientStepTolerance(0.0);
      mnStrategy0.setGradientTolerance(974.682641859);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-335.0811779081774);
      doubleArray0[1] = (-335.0811779081774);
      doubleArray0[2] = 974.682641859;
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, 0);
      int int0 = mnHesse0.ncycles();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, 10.0, 10.0, 213.196347278, 10.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-1573.854976607445));
      MinimumState minimumState0 = new MinimumState(1261);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      mnUserTransformation0.add("MnHesse: 2nd derivative zero for parameter", 10.0, 1261, (-1573.854976607445), 1261);
      MinimumState minimumState1 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 1261);
      assertNotSame(minimumState0, minimumState1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 20.174209372269864, 20.174209372269864).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0.0);
      MinimumState minimumState0 = new MinimumState(1818);
      double[] doubleArray0 = new double[4];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 1818);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(7);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 7);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 7;
      doubleArray0[1] = (double) 7;
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = 2.0;
      doubleArray0[4] = (double) 7;
      doubleArray0[5] = (double) 7;
      doubleArray0[6] = (-2839.972);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      int int0 = 3077;
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, (MinimumState) null, mnUserTransformation0, 3077);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 431.898;
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0);
      assertEquals(16, mnUserParameterState0.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, 1978.61745, 10.0, 213.196347278, 0.9000000000000001).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-1573.854976607445));
      MinimumState minimumState0 = new MinimumState(1249);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1573.854976607445);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.clone();
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 699876);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setLowStrategy();
      MnHesse mnHesse1 = new MnHesse(mnStrategy0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-1573.854976607445), (-1107.81965), (-1573.854976607445), 0.0, 1978.61745).when(fCNBase1).valueOf(any(double[].class));
      mnStrategy0.setHessianNCycles((-1129));
      MnUserParameterState mnUserParameterState0 = mnHesse1.calculate(fCNBase1, doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase2).valueOf(any(double[].class));
      mnHesse1.calculate(fCNBase2, mnUserParameters1);
      FCNBase fCNBase3 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase3).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase3, mnUserParameterState0, 1702);
      int int0 = mnHesse1.ncycles();
      assertEquals((-1129), int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      mnUserTransformation0.add("", 6.203841847993869, (-0.9999994999999999), 6.203841847993869, (-1229.11462));
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 1204.577965403718);
      MinimumParameters minimumParameters0 = new MinimumParameters(3901);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(1953);
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, (MinimumError.MnMadePosDef) null);
      FunctionGradient functionGradient0 = new FunctionGradient(1953);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, 2.8421709430404007E-14, 3901);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 1953);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, 1978.61745, 10.0, 213.196347278, 0.9000000000000001).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-1573.854976607445));
      MinimumState minimumState0 = new MinimumState(1249);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1573.854976607445);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.clone();
      mnUserParameters0.trafo();
      MnUserParameters mnUserParameters2 = mnUserParameters1.clone();
      MnUserTransformation mnUserTransformation0 = mnUserParameters2.trafo();
      mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 1602);
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setLowStrategy();
      MnHesse mnHesse1 = new MnHesse(mnStrategy0);
      mnStrategy0.setHessianNCycles((-1129));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)1249, 0.9000000000000001, 1978.61745, (double)1602, 3430.106).when(fCNBase1).valueOf(any(double[].class));
      MnHesse mnHesse2 = new MnHesse(mnStrategy0);
      MnUserParameterState mnUserParameterState0 = mnHesse2.calculate(fCNBase1, mnUserParameters1);
      assertEquals(164.84963273221413, mnUserParameterState0.edm(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance(0);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, (MnUserParameters) null, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      mnStrategy0.setGradientStepTolerance(0.0);
      mnStrategy0.setGradientTolerance(0.0);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(106.6688890024, 0.0, (-335.0811779081774), (-335.0811779081774), (double)0).when(fCNBase1).valueOf(any(double[].class));
      mnStrategy0.setHessianNCycles(0);
      // Undeclared exception!
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0, 879);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      mnStrategy0.setGradientStepTolerance(0.0);
      mnStrategy0.setGradientTolerance(974.682641859);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      MnHesse mnHesse1 = new MnHesse(mnStrategy0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        mnHesse1.calculate(fCNBase0, doubleArray0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = null;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.1;
      doubleArray0[1] = 0.1;
      doubleArray0[2] = 4.0;
      doubleArray0[3] = 0.1;
      doubleArray0[4] = 0.1;
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(100);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 100;
      doubleArray0[1] = (double) 100;
      doubleArray0[2] = (double) 100;
      doubleArray0[3] = (double) (-3567);
      doubleArray0[4] = (double) (-3567);
      doubleArray0[5] = (double) 100;
      doubleArray0[6] = (double) 100;
      doubleArray0[7] = (double) (-3567);
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, doubleArray0, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 21.089605064486022, 21.089605064486022).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-2026.30964962395));
      MinimumState minimumState0 = new MinimumState(1818);
      double[] doubleArray0 = new double[4];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 1818);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(3803);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, 10.0, 10.0, (double)3803, 0.0087110126332492).when(fCNBase0).valueOf(any(double[].class));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 10.0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3803);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 0.0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 1000.30872831292, (-1));
      mnFcn0.valueOf(mnAlgebraicVector0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1000.30872831292;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 3803;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserTransformation mnUserTransformation1 = mnUserParameters1.trafo();
      MinimumState minimumState1 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation1, (-1));
      mnHesse0.calculate(mnFcn0, minimumState1, mnUserTransformation1, (-1));
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(minimumState1, 0.0087110126332492, mnUserTransformation0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase1, mnUserParameterState0, (-1));
      MnUserParameters mnUserParameters2 = new MnUserParameters();
      MnStrategy mnStrategy0 = new MnStrategy(200);
      MnHesse mnHesse1 = new MnHesse(mnStrategy0);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase2).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase2, mnUserParameters0, (MnUserCovariance) null);
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, mnUserParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, mnUserParameters0, mnUserCovariance0, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setGradientTolerance(0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0.1);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(0);
      double[] doubleArray0 = new double[0];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MnAlgebraicVector mnAlgebraicVector1 = mnUserTransformation0.transform(mnAlgebraicVector0);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector1, (-1440.3064233785472));
      MinimumState minimumState0 = new MinimumState(minimumParameters0, (-5001.2435839069), 0);
      MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters1.trafo();
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn1 = new MnFcn(fCNBase1, 0.1);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn1, minimumState0, (MnUserTransformation) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(3803);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.51, 1.1920927889264116E-9, (-106.26150330896), 0.51, 784.07767).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3803;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      mnHesse0.calculate(fCNBase0, mnUserParameters1, 0);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase1, (MnUserParameterState) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      mnStrategy0.setGradientTolerance(0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-1441.134));
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1441.134);
      doubleArray0[3] = (-1441.134);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation1 = mnUserTransformation0.clone();
      MnAlgebraicVector mnAlgebraicVector1 = mnUserTransformation1.transform(mnAlgebraicVector0);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector1, (-1441.134));
      MinimumState minimumState0 = new MinimumState(minimumParameters0, (-1725.7), 3);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.trafo();
      MnHesse mnHesse0 = new MnHesse();
      MnHesse mnHesse1 = new MnHesse();
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(3797);
      MinimumError.MnNotPosDef minimumError_MnNotPosDef0 = new MinimumError.MnNotPosDef();
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, minimumError_MnNotPosDef0);
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0, mnAlgebraicVector1, mnAlgebraicVector1);
      MinimumState minimumState1 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, (-3254.7178161402), (-1));
      mnHesse1.calculate(mnFcn0, minimumState1, mnUserTransformation0, (-1));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase1, (MnUserParameters) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      mnStrategy0.setGradientStepTolerance(5.753652641623589);
      mnStrategy0.setGradientTolerance(974.682641859);
      mnStrategy0.setGradientNCycles(0);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      mnStrategy0.setHessianG2Tolerance(5.753652641623589);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(2.8421709430404007E-14, 990.9720616581365, (double)0, 4.5342380511772425E-17, 2877.9129622).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-335.0811779081774);
      doubleArray0[1] = (-335.0811779081774);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10000.0, 5.753652641623589, (-1002099.4019065484), 2.8722680000000005, 1.9507086778347271E-7).when(fCNBase1).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0, 879);
      doubleArray0[2] = 974.682641859;
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, 0);
      int int0 = mnHesse0.ncycles();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance((-1139));
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, mnUserParameters0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 20.174209372269864, 20.174209372269864).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0.0);
      MinimumState minimumState0 = new MinimumState(1818);
      double[] doubleArray0 = new double[4];
      mnFcn0.theNumCall = 2123;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MinimumState minimumState1 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 1818);
      assertNotSame(minimumState0, minimumState1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(3803);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, (-2872.268), 10.0, (double)3803, 0.0087110126332492).when(fCNBase0).valueOf(any(double[].class));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 10.0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3803);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 0.0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 1000.30872831292, (-1));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1000.30872831292;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MnHesse mnHesse1 = new MnHesse();
      mnHesse1.calculate(mnFcn0, minimumState0, mnUserTransformation0, 3803);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState0 = mnHesse1.calculate(fCNBase1, mnUserParameters0, (-1));
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, mnUserParameterState0, 3803);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 2629.52056940613);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, (MinimumState) null, mnUserTransformation0, 98);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setGradientTolerance(0);
      mnStrategy0.setGradientStepTolerance(0.0);
      mnStrategy0.setGradientTolerance(1124.6);
      mnStrategy0.setGradientTolerance(1124.6);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1124.6;
      doubleArray0[2] = 974.682641859;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, 1128);
      int int0 = mnHesse0.ncycles();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      int int0 = mnHesse0.ncycles();
      assertEquals(5, int0);
      
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameters mnUserParameters0 = null;
      FCNBase fCNBase1 = null;
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      // Undeclared exception!
      try { 
        mnUserTransformation0.transform((MnAlgebraicVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      int int0 = mnHesse0.ncycles();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 700.3666497052652;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-335.0811779081774);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnHesse mnHesse0 = new MnHesse(823);
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, mnUserParameters0, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-335.0811779081774), 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-3099.87504695));
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(0);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, (-335.0811779081774), 200);
      mnFcn0.valueOf(mnAlgebraicVector0);
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-3099.87504695);
      doubleArray0[2] = (-335.0811779081774);
      doubleArray0[3] = 1000.30872831292;
      doubleArray0[4] = (-335.0811779081774);
      doubleArray0[5] = (-3099.87504695);
      doubleArray0[6] = 1000.30872831292;
      doubleArray0[7] = 0.0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MnHesse mnHesse0 = new MnHesse();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-675.883813628234);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, mnUserCovariance0, (-491));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, mnUserParameters0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, (-2872.268), 10.0, (double)3803, 0.0087110126332492).when(fCNBase0).valueOf(any(double[].class));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 10.0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3803);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 2.1353203987999444E-29);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 1000.30872831292, (-1));
      double[] doubleArray0 = new double[1];
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MnHesse mnHesse1 = new MnHesse();
      mnHesse1.calculate(mnFcn0, minimumState0, mnUserTransformation0, 3803);
      mnUserCovariance0.toString();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(1000.30872831292, 0.0087110126332492, 3966.047707, (-1937.0251650135087), 1193.7252).when(fCNBase1).valueOf(any(double[].class));
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(3966.047707, 355.43165, 1000.30872831292, 2.1353203987999444E-29, 2.0).when(fCNBase2).valueOf(any(double[].class));
      mnHesse1.calculate(fCNBase2, mnUserParameters0, mnUserCovariance0);
      mnHesse1.calculate(fCNBase1, mnUserParameters0, (-1));
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-2872.268);
      mnHesse1.ncycles();
      doubleArray1[1] = (-280.4449564037166);
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters1, mnUserCovariance0, (-2101));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(233);
      mnStrategy0.setHessianG2Tolerance(233);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, (MnUserParameters) null, 233);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = 5;
      MnHesse mnHesse0 = new MnHesse(5);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate(fCNBase0, mnUserParameters0, mnUserCovariance0, 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(579);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 579;
      doubleArray0[1] = (double) 579;
      doubleArray0[2] = 728.21122816;
      doubleArray0[3] = (double) 579;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameters mnUserParameters1 = mnUserParameters0.clone();
      mnHesse0.calculate(fCNBase1, mnUserParameters1, 579);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 579;
      MnUserParameters mnUserParameters2 = new MnUserParameters(doubleArray1, doubleArray1);
      mnHesse0.calculate(fCNBase0, mnUserParameters2, (-494));
      mnHesse0.tolerstp();
      double double0 = mnHesse0.tolerg2();
      assertEquals(0.02, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy();
      MnHesse mnHesse0 = new MnHesse((MnStrategy) null);
      // Undeclared exception!
      try { 
        mnHesse0.ncycles();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnHesse", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 0;
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setGradientTolerance(0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[7];
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      mnHesse0.calculate(fCNBase1, mnUserParameterState0, 0);
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      MnUserParameters mnUserParameters1 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnUserCovariance0.get(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserCovariance", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((-914.5099369770835), (-914.5099369770835), 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      mnUserParameters0.add("-]WP4^Q+PD[NXMYitIC", (-914.5099369770835), 3.200000000000002E-6, (-709.712310706), 1394.11355138);
      mnHesse0.calculate(fCNBase0, mnUserParameters0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.200000000000002E-6;
      doubleArray0[1] = (-977.130131624474);
      doubleArray0[2] = (-709.712310706);
      doubleArray0[3] = 3.200000000000002E-6;
      doubleArray0[4] = 1394.11355138;
      doubleArray0[5] = 3.200000000000002E-6;
      doubleArray0[6] = 1394.11355138;
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, doubleArray0, doubleArray0, 3801);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.05).when(fCNBase0).valueOf(any(double[].class));
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 10.0);
      int int0 = 477;
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(477);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 10.0);
      MnAlgebraicSymMatrix mnAlgebraicSymMatrix0 = new MnAlgebraicSymMatrix(477);
      MinimumError.MnMadePosDef minimumError_MnMadePosDef0 = new MinimumError.MnMadePosDef();
      MinimumError minimumError0 = new MinimumError(mnAlgebraicSymMatrix0, minimumError_MnMadePosDef0);
      FunctionGradient functionGradient0 = new FunctionGradient(mnAlgebraicVector0);
      MinimumState minimumState0 = new MinimumState(minimumParameters0, minimumError0, functionGradient0, 477, 477);
      // Undeclared exception!
      try { 
        mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 477);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameters have invalid size
         //
         verifyException("org.freehep.math.minuit.InitialGradientCalculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 0.05);
      MinimumState minimumState0 = new MinimumState(1261);
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation();
      mnUserTransformation0.add("", 0.05, 1.0E-6, 1261, 1.0E-6);
      MinimumState minimumState1 = mnHesse0.calculate(mnFcn0, minimumState0, mnUserTransformation0, 1261);
      assertNotSame(minimumState0, minimumState1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, (-4076));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase1, doubleArray0, doubleArray0, 3795);
      mnUserParameters0.clone();
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase2).valueOf(any(double[].class));
      mnHesse0.calculate(fCNBase2, mnUserParameters0);
      mnStrategy0.setGradientNCycles(3770);
      FCNBase fCNBase3 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0);
      FCNBase fCNBase4 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase4).valueOf(any(double[].class));
      // Undeclared exception!
      mnHesse0.calculate(fCNBase4, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse(3788);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(10.0, (-2872.268), 10.0, (double)3788, (-1440.3064233785472)).when(fCNBase0).valueOf(any(double[].class));
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      MnFcn mnFcn0 = new MnFcn(fCNBase0, 10.0);
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(3788);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 0.0);
      MinimumState minimumState0 = new MinimumState(3788);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1000.30872831292;
      MnHesse mnHesse1 = new MnHesse();
      MnUserTransformation mnUserTransformation0 = new MnUserTransformation(doubleArray0, doubleArray0);
      mnHesse1.calculate(mnFcn0, minimumState0, mnUserTransformation0, (-1));
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn((double)3788, (-2872.268)).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserParameterState mnUserParameterState0 = new MnUserParameterState(mnUserParameters0, mnUserCovariance0);
      // Undeclared exception!
      try { 
        mnHesse1.calculate(fCNBase1, mnUserParameterState0, (-515));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnAlgebraicSymMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      mnStrategy0.setGradientStepTolerance(0.0);
      mnStrategy0.setGradientTolerance(974.682641859);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      MnHesse mnHesse0 = new MnHesse(mnStrategy0);
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(974.682641859, (-2480.2470997187), 974.682641859, (-2480.2470997187), 0.0).when(fCNBase0).valueOf(any(double[].class));
      double[] doubleArray0 = new double[3];
      mnStrategy0.setHessianNCycles(0);
      doubleArray0[0] = (-335.0811779081774);
      doubleArray0[1] = (-335.0811779081774);
      mnStrategy0.setHessianNCycles(6);
      doubleArray0[2] = 974.682641859;
      mnHesse0.calculate(fCNBase0, doubleArray0, doubleArray0, 0);
      int int0 = mnHesse0.ncycles();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase0).valueOf(any(double[].class));
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-1124.7532634));
      MinimumState minimumState0 = new MinimumState(100);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 381.7;
      doubleArray0[1] = 0.05;
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      MnUserTransformation mnUserTransformation0 = mnUserParameters0.trafo();
      MnHesse mnHesse1 = new MnHesse();
      MinimumState minimumState1 = new MinimumState(100);
      mnHesse0.calculate(mnFcn0, minimumState1, mnUserTransformation0, 100);
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase1).valueOf(any(double[].class));
      MnUserParameters mnUserParameters1 = new MnUserParameters();
      mnUserParameters1.add((String) null, (-1124.7532634), 0.05, (-2466.190461578639), 0.5);
      MnUserParameterState mnUserParameterState0 = mnHesse0.calculate(fCNBase1, mnUserParameters1, 100);
      FCNBase fCNBase2 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(fCNBase2).valueOf(any(double[].class));
      MnUserParameterState mnUserParameterState1 = mnHesse0.calculate(fCNBase2, mnUserParameterState0, 100);
      assertEquals(26, mnUserParameterState1.nfcn());
      assertEquals(0.0, mnUserParameterState0.fval(), 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      double double0 = mnHesse0.tolerg2();
      assertEquals(0.05, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      MnStrategy mnStrategy0 = new MnStrategy(0);
      mnStrategy0.setGradientTolerance((-335.0811779081774));
      FCNBase fCNBase0 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnFcn mnFcn0 = new MnFcn(fCNBase0, (-1441.134));
      MnAlgebraicVector mnAlgebraicVector0 = new MnAlgebraicVector(0);
      MinimumParameters minimumParameters0 = new MinimumParameters(mnAlgebraicVector0, 0.0);
      mnAlgebraicVector0.clone();
      MinimumState minimumState0 = new MinimumState(minimumParameters0, 1.0E-35, (-1));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-335.0811779081774);
      MnUserParameters mnUserParameters0 = new MnUserParameters(doubleArray0, doubleArray0);
      mnUserParameters0.trafo();
      MnHesse mnHesse0 = new MnHesse();
      FCNBase fCNBase1 = mock(FCNBase.class, new ViolatedAssumptionAnswer());
      MnStrategy mnStrategy1 = new MnStrategy(0);
      MnHesse mnHesse1 = new MnHesse(mnStrategy1);
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance((-1300));
      // Undeclared exception!
      try { 
        mnHesse1.calculate(fCNBase1, doubleArray0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.freehep.math.minuit.MnUserParameterState", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      MnHesse mnHesse0 = new MnHesse();
      MnUserParameters mnUserParameters0 = new MnUserParameters();
      MnUserCovariance mnUserCovariance0 = new MnUserCovariance();
      // Undeclared exception!
      try { 
        mnHesse0.calculate((FCNBase) null, mnUserParameters0, mnUserCovariance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
