/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:41:42 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.text.StringCharacterIterator;
import java.time.DateTimeException;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.IntBinaryOperator;
import java.util.function.IntUnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      TypeUtils.castToBytes("Ljava.util.concurrent.ConcurrentSkipListMap");
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListMap");
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithFieldName);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(1771);
      Class<Byte> class0 = Byte.TYPE;
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      ThreadGroup threadGroup1 = new ThreadGroup("+pFr#");
      MockThread mockThread0 = new MockThread(threadGroup1, "+pFr#");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      TypeUtils.loadClass("3", classLoader0);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      TypeUtils typeUtils0 = new TypeUtils();
      Type type0 = TypeUtils.getCollectionItemType((Type) null);
      assertNotNull(type0);
      
      Class<NoSuchMethodException> class1 = NoSuchMethodException.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, true);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TypeUtils.castToTimestamp((Object) null);
      String string0 = "syntax error, ";
      TypeUtils.isNumber("syntax error, ");
      Class<MessageFormat> class0 = MessageFormat.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null);
      OptionalCodec optionalCodec0 = OptionalCodec.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(optionalCodec0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : com.alibaba.fastjson.parser.deserializer.OptionalCodec@4
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TypeUtils.toLocale("yyyy-MM-dd");
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Hashtable<SimpleDateFormat, MockCalendar> hashtable0 = new Hashtable<SimpleDateFormat, MockCalendar>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("-L[t!<6e", "-L[t!<6e");
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn(">y{BuO").when(biFunction0).apply(anyString() , any());
      linkedHashMap0.compute("-L[t!<6e", biFunction0);
      String string0 = null;
      Class<MessageFormat> class0 = MessageFormat.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = null;
      try {
        decimalFormat0 = new DecimalFormat((String) null, decimalFormatSymbols0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.DecimalFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      MockThread mockThread0 = new MockThread("Ljava.awt.Font");
      mockThread0.getStackTrace();
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeUtils.fnv1a_64_lower("j");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>((Map<? extends String, ? extends String>) treeMap0);
      Class<Double> class0 = Double.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) treeMap0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<IllegalMonitorStateException> class0 = IllegalMonitorStateException.class;
      TypeUtils.getSerializeFeatures(class0);
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      Class<JobAttributes> class1 = JobAttributes.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) timeDeserializer0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.JobAttributes
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      Point point0 = new Point((-310), (-310));
      Locale locale0 = TypeUtils.toLocale("t2Lx7H %vI@GJ4");
      assertEquals("", locale0.getVariant());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<Boolean> class0 = Boolean.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) null, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TypeUtils.castToBoolean((Object) null);
      Class<Object> class0 = Object.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      TypeUtils.getClass((Type) class1);
      Class class2 = (Class)TypeUtils.unwrapOptional(class1);
      assertFalse(class2.isInterface());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TypeUtils.castToBigDecimal((Object) null);
      Class<Long> class0 = Long.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.clear();
      identityHashMap0.put("", "");
      identityHashMap0.put("Ljava.awt.Color", "YT4VV");
      SecurityException securityException0 = new SecurityException("getgetTimeInMillis");
      identityHashMap0.remove((Object) null, (Object) securityException0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, identityHashMap0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      Class<?> class2 = TypeUtils.getCollectionItemClass(class1);
      TypeUtils typeUtils0 = new TypeUtils();
      Class<PropertyProcessableDeserializer> class3 = PropertyProcessableDeserializer.class;
      TypeUtils.isKotlin(class3);
      TypeUtils.getParserFeatures(class2);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Dimension dimension0 = new Dimension((-1933437815), (-1933437815));
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class org.evosuite.runtime.mock.java.text.MockSimpleDateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Hashtable<SimpleDateFormat, MockCalendar> hashtable0 = new Hashtable<SimpleDateFormat, MockCalendar>();
      Class<Integer> class0 = Integer.TYPE;
      TypeUtils.unwrapOptional(class0);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>();
      treeMap1.navigableKeySet();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) treeMap0, propertyNamingStrategy0);
      String string0 = TypeUtils.decapitalize("ZEi.mk08Zx\"mx");
      assertEquals("ZEi.mk08Zx\"mx", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TypeUtils.toLocale("getlongValue");
      TypeUtils.getCollectionItemType((Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Hashtable<SimpleDateFormat, MockCalendar> hashtable1 = new Hashtable<SimpleDateFormat, MockCalendar>();
      hashtable1.clear();
      TypeUtils.castToInt((Object) null);
      TypeUtils.loadClass("");
      TypeUtils typeUtils0 = new TypeUtils();
      Class<Method> class0 = Method.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(1771);
      Class<Byte> class0 = Byte.TYPE;
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Point point0 = new Point();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) point0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<JavaBeanDeserializer> class0 = JavaBeanDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Short short0 = new Short((short)48);
      Short.toUnsignedLong((short)48);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Short.compare((short)48, (short)48);
      Short.compare((short)48, (short) (-1544));
      Short.toUnsignedLong((short)3450);
      parserConfig0.setDefaultClassLoader((ClassLoader) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) short0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      Class<JobAttributes> class0 = JobAttributes.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) noSuchMethodError0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.awt.JobAttributes
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Class<SQLWarning> class0 = SQLWarning.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.getGenericParamType(class0);
      String string0 = "get";
      Boolean boolean0 = Boolean.valueOf("get");
      Boolean.logicalAnd(false, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(boolean0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TypeUtils.castToByte((Object) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.castToBigDecimal((Object) null);
      boolean boolean0 = TypeUtils.isNumber("2");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("oJ{Q G_5U6_,%");
      // Undeclared exception!
      try { 
        Collator.getInstance((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      TypeUtils.toLocale("t2Lx7H %vI@GJ4");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, Field> linkedHashMap1 = new LinkedHashMap<String, Field>();
      hashMap0.putAll(linkedHashMap1);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.getParserFeatures(class0);
      Class<BreakIterator> class1 = BreakIterator.class;
      TypeUtils.isProxy(class1);
      Class<IllegalArgumentException> class2 = IllegalArgumentException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      TypeUtils.isKotlin(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.LinkageError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("t-XTn");
      Class<Timestamp> class0 = Timestamp.class;
      TypeUtils.getParserFeatures(class0);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.text.MockDateFormat@77633c5c
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeUtils.castToBigDecimal((Object) null);
      boolean boolean0 = TypeUtils.isNumber("J");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      InstantiationException instantiationException0 = new InstantiationException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Byte> class0 = Byte.TYPE;
      DataTruncation dataTruncation0 = new DataTruncation((-649), true, true, (-649), (-649), instantiationException0);
      instantiationException0.getSuppressed();
      Hashtable<HttpCookie, SimpleDateFormat> hashtable0 = new Hashtable<HttpCookie, SimpleDateFormat>();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "IKC";
      TypeUtils.fnv1a_64("IKC");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("IKC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : IKC
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      TypeUtils.castToDouble((Object) null);
      Class<?> class1 = TypeUtils.loadClass((String) null);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TypeUtils.castToDouble((Object) null);
      String string0 = "Ljava.awt.Color";
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.awt.Color");
      MockThread mockThread0 = new MockThread(threadGroup0, "Ljava.awt.Font");
      MockThread mockThread1 = new MockThread(mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      classLoader0.getParent();
      TypeUtils.loadClass("com.alibaba.fastjson.parser.JSONReaderScanner");
      ParameterizedType parameterizedType0 = null;
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Class<Short> class1 = Short.class;
      // Undeclared exception!
      try { 
        parserConfig0.checkAutoType("matchedCount", class1, 44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. matchedCount
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InstantiationException instantiationException0 = new InstantiationException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Byte> class0 = Byte.TYPE;
      DataTruncation dataTruncation0 = new DataTruncation((-649), true, true, (-649), (-649), instantiationException0);
      instantiationException0.getSuppressed();
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      Byte byte0 = new Byte((byte)88);
      TypeUtils.castToDate(byte0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : byte
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TypeUtils.castToByte((Object) null);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Insets insets0 = new Insets(242, (-1133), 49, 378);
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TypeUtils.fnv1a_64("S");
      TypeUtils.castToBigInteger((Object) null);
      TypeUtils.fnv1a_64_lower("S");
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      treeMap0.navigableKeySet();
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      batchUpdateException0.getStackTrace();
      TypeUtils.castToSqlTime((Object) null);
      TypeUtils.loadClass("naN");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        MockHijrahDate.of((-476), 13, (-479));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid Hijrah month: 13
         //
         verifyException("java.time.chrono.HijrahChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      TreeSet<HttpCookie> treeSet0 = new TreeSet<HttpCookie>();
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      TypeUtils.isHibernateInitialized(class0);
      Class<Byte> class1 = Byte.TYPE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0|Ko$|n~<RE>Of`Dw");
      TypeUtils.toLocale("0|Ko$|n~<RE>Of`Dw");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      TypeUtils.decapitalize("Y");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(map0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : {CTT=Asia/Shanghai, ART=Africa/Cairo, CNT=America/St_Johns, PRT=America/Puerto_Rico, PNT=America/Phoenix, PLT=Asia/Karachi, AST=America/Anchorage, BST=Asia/Dhaka, CST=America/Chicago, EST=-05:00, HST=-10:00, JST=Asia/Tokyo, IST=Asia/Kolkata, AGT=America/Argentina/Buenos_Aires, NST=Pacific/Auckland, MST=-07:00, AET=Australia/Sydney, BET=America/Sao_Paulo, PST=America/Los_Angeles, ACT=Australia/Darwin, SST=Pacific/Guadalcanal, VST=Asia/Ho_Chi_Minh, CAT=Africa/Harare, ECT=Europe/Paris, EAT=Africa/Addis_Ababa, IET=America/Indiana/Indianapolis, MIT=Pacific/Apia, NET=Asia/Yerevan}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      TypeUtils.isKotlin(class0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      Class<Long> class1 = Long.class;
      Class<Annotation> class2 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class1, class2);
      TypeUtils.isGenericParamType(class0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      VerifyError verifyError0 = new VerifyError();
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("kotlin.ranges.ClosedDoubleRange", "scanFieldDouble", verifyError0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("qzj", "UA^*9W~;5N");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("Ljava.lang.AutoCloseable", "UA^*9W~;5N", sQLTransactionRollbackException0);
      PageAttributes pageAttributes0 = new PageAttributes();
      hashtable0.getOrDefault(pageAttributes0, "UA^*9W~;5N");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) hashtable0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      Class<BigDecimal> class0 = BigDecimal.class;
      Class<RenderingHints> class1 = RenderingHints.class;
      Class<SQLDataException> class2 = SQLDataException.class;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("s]h',X{rph", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo("equals", class1, class2, class2, (Field) null, 91, 27, 27);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TypeUtils.loadClass("N9x'8");
      Class<Annotation> class0 = Annotation.class;
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      TypeUtils.getAnnotation((Class<?>) class1, class0);
      TypeUtils typeUtils0 = new TypeUtils();
      IllegalMonitorStateException illegalMonitorStateException0 = new IllegalMonitorStateException();
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<Dimension> class2 = Dimension.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class2);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer@9c
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Hashtable<SimpleDateFormat, MockCalendar> hashtable0 = new Hashtable<SimpleDateFormat, MockCalendar>();
      hashtable0.clear();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(mockIllegalStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.lang.MockThrowable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(noSuchMethodException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.NoSuchMethodException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TypeUtils.castToBigDecimal((Object) null);
      Object object0 = new Object();
      String string0 = TypeUtils.castToString(object0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TypeUtils.fnv1a_64("IKC");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("IKC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : IKC
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TypeUtils.fnv1a_64("port is not int");
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(timeUnit0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : DAYS
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      ThreadGroup threadGroup0 = new ThreadGroup("]#%}M");
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0, "]#%}M", 2887L);
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      threadGroup0.getParent();
      parserConfig0.compatibleWithJavaBean = true;
      TypeUtils.cast((Object) null, class0, parserConfig0);
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TypeUtils.castToString("Ljava.awt.Color");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(1771);
      String string0 = "Ljava.awt.Rectangle";
      linkedHashMap0.put("j", "Ljava.awt.Rectangle");
      linkedHashMap0.put(",U|@%\"_Bvezy?82L#;I", "getClass");
      String string1 = "bzkcf%>SafYrPXgrbJ";
      ThreadGroup threadGroup0 = new ThreadGroup("bzkcf%>SafYrPXgrbJ");
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(treeSet0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Insets insets0 = new Insets(1831, 1831, 9, 1831);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(insets0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.Insets[top=1831,left=1831,bottom=9,right=1831]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      InstantiationException instantiationException0 = new InstantiationException();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TypeUtils.isProxy(class0);
      WeakHashMap<JobAttributes, ClassLoader> weakHashMap0 = new WeakHashMap<JobAttributes, ClassLoader>();
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      MockThread mockThread0 = new MockThread(threadGroup0, "isgetEra");
      MockThread mockThread1 = new MockThread(mockThread0);
      PageAttributes pageAttributes0 = new PageAttributes();
      PageAttributes pageAttributes1 = new PageAttributes(pageAttributes0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(pageAttributes1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : color=monochrome,media=iso-a4,orientation-requested=portrait,origin=physical,print-quality=normal,printer-resolution=[72,72,3]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Class<Byte> class0 = Byte.TYPE;
      Type[] typeArray0 = new Type[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[0]);
      ParserConfig parserConfig0 = new ParserConfig();
      ArrayList<SecurityException> arrayList0 = new ArrayList<SecurityException>();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) arrayList0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@1b4d89f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TypeUtils.getClassFromMapping("syntax error");
      Type[] typeArray0 = new Type[6];
      typeArray0[0] = (Type) null;
      Class<Byte> class0 = Byte.TYPE;
      typeArray0[3] = (Type) null;
      typeArray0[5] = (Type) null;
      typeArray0[5] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], typeArray0[4]);
      ParserConfig parserConfig0 = new ParserConfig();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      parserConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) ".0m00*0000", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@94446f01
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<LinkageError> class0 = LinkageError.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      Class<SQLFeatureNotSupportedException> class1 = SQLFeatureNotSupportedException.class;
      boolean boolean1 = TypeUtils.isGenericParamType(class1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      TypeUtils.isKotlin(class0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Type[] typeArray0 = new Type[5];
      typeArray0[1] = (Type) class0;
      Class<Short> class1 = Short.TYPE;
      Class<Byte> class2 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class2).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<BufferCapabilities> class3 = BufferCapabilities.class;
      TypeUtils.isProxy(class3);
      WeakHashMap<JobAttributes, ClassLoader> weakHashMap0 = new WeakHashMap<JobAttributes, ClassLoader>();
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      Class<?> class4 = TypeUtils.loadClass("", classLoader0, false);
      assertNull(class4);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      TypeUtils.isKotlin(class0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Type[] typeArray0 = new Type[5];
      typeArray0[1] = (Type) class0;
      Class<Short> class1 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<BufferCapabilities> class2 = BufferCapabilities.class;
      TypeUtils.isProxy(class2);
      WeakHashMap<JobAttributes, ClassLoader> weakHashMap0 = new WeakHashMap<JobAttributes, ClassLoader>();
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      MockThread mockThread0 = new MockThread(threadGroup0, "isgetEra");
      MockThread mockThread1 = new MockThread(mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      weakHashMap0.put((JobAttributes) null, classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("isgetEra");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : isgetEra
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TypeUtils.castToDouble((Object) null);
      TypeUtils.castToTimestamp((Object) null);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "kotlin.ranges.IntRange";
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "kotlin.ranges.IntRange", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(1771);
      Class<Byte> class0 = Byte.TYPE;
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ParserConfig parserConfig0 = new ParserConfig();
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl1 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      MockThread mockThread0 = new MockThread("fastjson.parser.autoTypeSupport");
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0);
      MockThread.reset();
      MockThread mockThread2 = new MockThread(mockThread1, "null");
      mockThread2.getStackTrace();
      mockThread2.getContextClassLoader();
      ParserConfig parserConfig1 = new ParserConfig();
      ParameterizedTypeImpl parameterizedTypeImpl2 = new ParameterizedTypeImpl(typeArray0, parameterizedTypeImpl1, class0);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      ParserConfig parserConfig2 = new ParserConfig();
      Class<Throwable> class1 = Throwable.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig2, class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(parameterizedTypeImpl2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.util.ParameterizedTypeImpl@29bf
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("IKC");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"IKC\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TypeUtils.castToByte((Object) null);
      Class<Byte> class0 = Byte.TYPE;
      Type[] typeArray0 = new Type[3];
      typeArray0[1] = (Type) class0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      typeArray0[2] = (Type) class0;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.clearAssertionStatus();
      classLoader1.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      aSMDeserializerFactory0.classLoader.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory((ClassLoader) null);
      TypeUtils.loadClass("scanLong", (ClassLoader) null, true);
      String string0 = "BackBufferCapabilities";
      TypeUtils.loadClass("BackBufferCapabilities", (ClassLoader) aSMDeserializerFactory0.classLoader, false);
      TypeUtils.decapitalize("scanLong");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<SqlDateDeserializer> class1 = SqlDateDeserializer.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      Type type0 = TypeUtils.unwrapOptional(genericArrayType0);
      TypeUtils.unwrapOptional(class0);
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) type0, (Type) class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      TypeUtils.isKotlin(class0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Class<Byte> class1 = Byte.TYPE;
      TypeUtils.isNumber("isiterator");
      Class<ChronoLocalDate> class2 = ChronoLocalDate.class;
      TypeUtils.isKotlin(class2);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : class java.text.DateFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(parameterizedTypeImpl0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"sun.refl\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TypeUtils.isNumber("J");
      WeakHashMap<String, Object> weakHashMap0 = new WeakHashMap<String, Object>();
      Class<SQLWarning> class0 = SQLWarning.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      SQLWarning sQLWarning0 = TypeUtils.castToJavaBean((Map<String, Object>) weakHashMap0, class0, parserConfig0);
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("hCp~YT}X[F}K #Fk7", "f}i|Cg! 2Ltf");
      hashMap0.put("hCp~YT}X[F}K #Fk7", "hCp~YT}X[F}K #Fk7");
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "hCp~YT}X[F}K #Fk7", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.isProxy(class0);
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, 3444.2, (-898.861210678945), (-1962.6855821508298), 3.0);
      affineTransform0.rotate((-898.861210678945), 3.0, 3444.2);
      AffineTransform affineTransform1 = new AffineTransform(affineTransform0);
      Point point0 = new Point();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(propertyNamingStrategy0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : SnakeCase
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      InstantiationException instantiationException0 = new InstantiationException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader classLoader1 = aSMDeserializerFactory0.classLoader.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader0);
      TypeUtils.loadClass((String) null, classLoader0, false);
      TypeUtils.loadClass("BackBufferCapabilities", (ClassLoader) aSMDeserializerFactory0.classLoader, false);
      TypeUtils.decapitalize((String) null);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.unwrapOptional(class0);
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader1, (Type) null, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      InstantiationException instantiationException0 = new InstantiationException("can not cast to short, value : ");
      instantiationException0.getStackTrace();
      instantiationException0.getSuppressed();
      TypeUtils.castToDate((Object) null);
      DataTruncation dataTruncation0 = new DataTruncation(12, true, true, 12, 34);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(dataTruncation0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.sql.DataTruncation: Data truncation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TypeUtils.castToBigDecimal((Object) null);
      TypeUtils.isNumber("");
      TypeUtils.castToSqlDate("");
      Class<Calendar> class0 = Calendar.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "\\$";
      OptionalCodec optionalCodec0 = new OptionalCodec();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : $
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("IC");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"IC\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = TypeUtils.castToBytes("Ljava.util.concurrent.ConcurrentSkipListMap");
      TypeUtils.loadClass("adrs$Lhgo");
      Class<Annotation> class0 = Annotation.class;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TypeUtils.getAnnotation((Class<?>) class0, class0);
      TypeUtils.getClassFromMapping("adrs$Lhgo");
      boolean boolean0 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      Class<MockThaiBuddhistDate> class2 = MockThaiBuddhistDate.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) hashtable0, propertyNamingStrategy0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.unwrapOptional(class2);
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      TypeUtils.cast((Object) null, (Type) class1, (ParserConfig) null);
      long long0 = TypeUtils.fnv1a_64("toS");
      assertEquals(6267285656077460405L, long0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      Point point0 = new Point((-310), (-310));
      AffineTransform affineTransform0 = new AffineTransform(0.0, 0.0, (-277.21718), 0.0, (-898.861210678945), (-1.0));
      AffineTransform affineTransform1 = new AffineTransform(affineTransform0);
      Point point1 = new Point();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("Ljava.awt.Font");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TypeUtils.fnv1a_64("IbC");
      Boolean boolean0 = new Boolean("IbC");
      BreakIterator.getSentenceInstance();
      Date date0 = new Date(4727365747540580451L);
      Integer integer0 = TypeUtils.castToInt((Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      InstantiationException instantiationException0 = new InstantiationException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RA%:\"iEGI");
      Class<Byte> class0 = Byte.TYPE;
      DataTruncation dataTruncation0 = new DataTruncation((-649), true, true, (-649), (-649), instantiationException0);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[0]);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Class<Method> class0 = Method.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>(concurrentHashMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) hashtable0, true, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TypeUtils.castToString("Ljava.awt.Color");
      ThreadGroup threadGroup0 = new ThreadGroup("bzkcf%>SafYrPXgrbJ");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "illegal getter");
      MockThread mockThread0 = new MockThread(threadGroup1, "multiBufferAvailable");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      aSMDeserializerFactory0.classLoader.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      TypeUtils.loadClass("j", (ClassLoader) aSMDeserializerFactory1.classLoader, true);
      TypeUtils.loadClass("BackBufferCapabilities", classLoader0, false);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.unwrapOptional(class0);
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      TypeUtils.cast((Object) null, (Type) null, (ParserConfig) null);
      TypeUtils.loadClass("multiBufferAvailable");
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn((Class<?>) null).when(genericArrayType1).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType1);
      Class<?> class1 = TypeUtils.getClass(type0);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("hCp~YT}X[F}K #Fk7", "hCp~YT}X[F}K #Fk7");
      Constructor<SQLException>[] constructorArray0 = (Constructor<SQLException>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      String string0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.toLocale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InstantiationException instantiationException0 = new InstantiationException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Byte> class0 = Byte.TYPE;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[0]);
      ParserConfig parserConfig0 = new ParserConfig();
      Long.valueOf((-1L));
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, class0, typeArray0[1]);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      Class<Byte> class1 = Byte.TYPE;
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class1;
      typeArray0[0] = (Type) class1;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.clearAssertionStatus();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      TypeUtils.loadClass("s.rZ.SH+8swcw", classLoader0, false);
      TypeUtils.loadClass("java.time.Duration", classLoader1, true);
      TypeUtils.decapitalize("3'?PO");
      classLoader1.clearAssertionStatus();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.unwrapOptional(class1);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("3'?PO");
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("}uuFa237Tp", "05i /cjk{%S{`2,p", sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("05i /cjk{%S{`2,p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 05i /cjk{%S{`2,p
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Hashtable<SimpleDateFormat, MockCalendar> hashtable0 = new Hashtable<SimpleDateFormat, MockCalendar>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Byte> class0 = Byte.TYPE;
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      DataTruncation dataTruncation0 = new DataTruncation(85, true, false, (-649), 2268, sQLNonTransientException0);
      InstantiationException instantiationException0 = new InstantiationException();
      instantiationException0.getSuppressed();
      Hashtable<HttpCookie, SimpleDateFormat> hashtable1 = new Hashtable<HttpCookie, SimpleDateFormat>();
      TypeUtils.castToSqlTime((Object) null);
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) illegalAccessError0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.IllegalAccessError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TreeMap<HttpCookie, PropertyNamingStrategy> treeMap0 = new TreeMap<HttpCookie, PropertyNamingStrategy>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("+ntN<CQ(^c!i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : +ntN<CQ(^c!i
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      InstantiationException instantiationException0 = new InstantiationException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Byte> class0 = Byte.TYPE;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      boolean boolean0 = TypeUtils.isNumber("*'{UWKY$?>/_H>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(89);
      atomicInteger0.getAndDecrement();
      TypeUtils.castToString(atomicInteger0);
      IntBinaryOperator intBinaryOperator0 = mock(IntBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn((-670)).when(intBinaryOperator0).applyAsInt(anyInt() , anyInt());
      atomicInteger0.getAndAccumulate(89, intBinaryOperator0);
      TypeUtils.castToShort(atomicInteger0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.util.concurrent.atomic.AtomicInteger@0000000001");
      Class<PageAttributes> class0 = PageAttributes.class;
      IntUnaryOperator intUnaryOperator0 = mock(IntUnaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn((-1630416251)).when(intUnaryOperator0).applyAsInt(anyInt());
      atomicInteger0.getAndUpdate(intUnaryOperator0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      LinkedHashMap<String, Field> linkedHashMap0 = new LinkedHashMap<String, Field>();
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      linkedHashMap0.putAll(hashtable0);
      Class<Dimension> class1 = Dimension.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGetters((Class<?>) class1, jSONType0, (Map<String, String>) weakHashMap0, (Map<String, Field>) hashtable0, false, propertyNamingStrategy0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.awt.PageAttributes
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      TypeUtils.isKotlin(class0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("le", "fastjson.compatibleWithFieldName");
      Class<BreakIterator> class1 = BreakIterator.class;
      boolean boolean0 = false;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashMap0, false);
      TypeUtils.getGenericParamType(typeArray0[0]);
      MockThread mockThread0 = new MockThread("fastjson.compatibleWithFieldName");
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0);
      MockThread.reset();
      MockThread mockThread2 = new MockThread((ThreadGroup) null, mockThread0);
      mockThread2.getStackTrace();
      mockThread0.getContextClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], class0);
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) outOfMemoryError0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.lang.OutOfMemoryError -> java.text.DateFormatSymbols
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      ThreadGroup threadGroup0 = new ThreadGroup("]#%}M");
      Insets insets0 = new Insets(52, 65, 52, 65);
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      AtomicInteger atomicInteger0 = new AtomicInteger(72);
      Timestamp timestamp0 = TypeUtils.castToTimestamp(atomicInteger0);
      assertEquals("1970-01-01 00:00:00.072", timestamp0.toString());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      Point point0 = new Point((-310), (-310));
      Class<Double> class0 = Double.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "eK`Yf";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      javaBeanSerializer0.getType();
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.computeGettersWithFieldBase(class1, (Map<String, String>) null, false, propertyNamingStrategy0);
      TypeUtils.castToString(point0);
      // Undeclared exception!
      try { 
        TypeUtils.isNumber((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      InstantiationException instantiationException0 = new InstantiationException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Byte> class0 = Byte.TYPE;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[0]);
      ParserConfig parserConfig0 = new ParserConfig();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Point point0 = new Point();
      Insets insets0 = new Insets(13, 30, 109, 3811);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints((-65015560), (-2797), (-1812), 0, 0.0, (-2083.014538), (-65015560), 13, insets0, 3811, 30);
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[0]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) gridBagConstraints0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Class<NegativeArraySizeException> class0 = NegativeArraySizeException.class;
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      TypeUtils.isKotlin(class0);
      JSONObject jSONObject0 = new JSONObject(true);
      Class<String> class1 = String.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class1, parserConfig0);
      Method method0 = null;
      BiFunction<String, String, String> biFunction0 = (BiFunction<String, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , anyString());
      linkedHashMap0.compute("Lorg.springframework.util.LinkedMultiValueMap", biFunction0);
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockHijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate@9cc4b4c
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TypeUtils.castToString("Ljava.awt.Color");
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "j", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.JSONPDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Hashtable<SimpleDateFormat, MockCalendar> hashtable1 = new Hashtable<SimpleDateFormat, MockCalendar>();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TypeUtils.isProxy(class0);
      WeakHashMap<JobAttributes, ClassLoader> weakHashMap0 = new WeakHashMap<JobAttributes, ClassLoader>();
      TypeUtils.getParserFeatures(class0);
      TypeUtils.toLocale("");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) hashtable0, (Map<String, Field>) hashMap0, false, propertyNamingStrategy0);
      TypeUtils.isPath(class0);
      Class<ChronoLocalDate> class1 = ChronoLocalDate.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      ChronoLocalDate chronoLocalDate0 = TypeUtils.cast((Object) weakHashMap0, class1, parserConfig0);
      assertNotNull(chronoLocalDate0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String string0 = "f}i|Cg! 2Ltf";
      hashMap0.put("hCp~YT}X[F}K #Fk7", "f}i|Cg! 2Ltf");
      hashMap0.put("hCp~YT}X[F}K #Fk7", "hCp~YT}X[F}K #Fk7");
      Type[] typeArray0 = new Type[1];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "hCp~YT}X[F}K #Fk7", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      InstantiationException instantiationException0 = new InstantiationException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Byte> class0 = Byte.TYPE;
      DataTruncation dataTruncation0 = new DataTruncation((-649), true, true, (-649), (-649), instantiationException0);
      instantiationException0.getSuppressed();
      Hashtable<HttpCookie, SimpleDateFormat> hashtable0 = new Hashtable<HttpCookie, SimpleDateFormat>();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"n\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Hashtable<SimpleDateFormat, MockCalendar> hashtable1 = new Hashtable<SimpleDateFormat, MockCalendar>();
      Class<MockSimpleDateFormat> class0 = MockSimpleDateFormat.class;
      TypeUtils.isProxy(class0);
      WeakHashMap<JobAttributes, ClassLoader> weakHashMap0 = new WeakHashMap<JobAttributes, ClassLoader>();
      int int0 = DateFormat.DATE_FIELD;
      TypeUtils.toLocale("fied_ser");
      TypeUtils.toLocale("printerResolution");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("Aa", "java.time.");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      List<FieldInfo> list0 = new Vector<FieldInfo>(3);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      InstantiationException instantiationException0 = new InstantiationException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Byte> class0 = Byte.TYPE;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      DataTruncation dataTruncation0 = new DataTruncation((-649), true, true, (-649), (-649), instantiationException0);
      instantiationException0.getSuppressed();
      LinkedHashSet<DataTruncation> linkedHashSet0 = new LinkedHashSet<DataTruncation>();
      TypeUtils.getCollectionItemType(typeArray0[2]);
      TypeUtils.getParserFeatures(class0);
      Time time0 = new Time(0L);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(typeArray0[2]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : byte
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TreeSet<HttpCookie> treeSet0 = new TreeSet<HttpCookie>();
      TypeUtils.isHibernateInitialized((Object) null);
      Class<Byte> class1 = Byte.TYPE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getEras");
      TypeUtils.toLocale("G3S(QQm9}aI+");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("hCp~YT}X[F}K #Fk7", "f}i|Cg! 2Ltf");
      hashMap0.put("hCp~YT}X[F}K #Fk7", "hCp~YT}X[F}K #Fk7");
      Point point0 = new Point((-310), (-310));
      AffineTransform affineTransform0 = new AffineTransform(0.0F, 1.0F, 2576.854F, (-310), (-310), 0.0);
      Point point1 = new Point();
      affineTransform0.deltaTransform((Point2D) point0, (Point2D) point1);
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Class<Short> class0 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<Jdk8DateCodec> class1 = Jdk8DateCodec.class;
      TypeUtils.isProxy(class1);
      WeakHashMap<JobAttributes, ClassLoader> weakHashMap0 = new WeakHashMap<JobAttributes, ClassLoader>();
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.util.concurrent.ConcurrentSkipListSet");
      MockThread mockThread0 = new MockThread(threadGroup0, "Ljava.util.concurrent.ConcurrentSkipListSet");
      MockThread mockThread1 = new MockThread(mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      weakHashMap0.put((JobAttributes) null, classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : {null=org.evosuite.instrumentation.InstrumentingClassLoader@15fdcd96}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Class<Long> class0 = Long.TYPE;
      TypeUtils.isGenericParamType(class0);
      System.setCurrentTimeMillis(3794316665763266033L);
      TypeUtils.isPath(class0);
      Class<Float> class1 = Float.TYPE;
      TypeUtils.getCollectionItemClass(class1);
      TypeUtils.loadClass("");
      Class<Throwable> class2 = Throwable.class;
      Class<Annotation> class3 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class2, class3);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.PRIOR;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      Class<Float> class4 = Float.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) bufferCapabilities0, class4, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.awt.BufferCapabilities@24edc8f7
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      TypeUtils.toLocale("");
      ThreadGroup threadGroup0 = new ThreadGroup("");
      MockThread mockThread0 = new MockThread("");
      WeakHashMap<JobAttributes, ClassLoader> weakHashMap0 = new WeakHashMap<JobAttributes, ClassLoader>();
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      TypeUtils.isKotlin(class0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Type[] typeArray0 = new Type[5];
      typeArray0[1] = (Type) class0;
      Class<Short> class1 = Short.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<BufferCapabilities> class2 = BufferCapabilities.class;
      TypeUtils.isProxy(class2);
      WeakHashMap<JobAttributes, ClassLoader> weakHashMap0 = new WeakHashMap<JobAttributes, ClassLoader>();
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      MockThread mockThread0 = new MockThread(threadGroup0, "isgetEra");
      MockThread mockThread1 = new MockThread(mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      weakHashMap0.put((JobAttributes) null, classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("isgetEra");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : isgetEra
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      TypeUtils.isKotlin(class0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Type[] typeArray0 = new Type[29];
      typeArray0[2] = (Type) class0;
      typeArray0[4] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[3]);
      ParserConfig.getGlobalInstance();
      Constructor<BreakIterator>[] constructorArray0 = (Constructor<BreakIterator>[]) Array.newInstance(Constructor.class, 1);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      InstantiationException instantiationException0 = new InstantiationException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Byte> class0 = Byte.TYPE;
      Type[] typeArray0 = new Type[4];
      ThreadGroup threadGroup0 = new ThreadGroup("istoString");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "istoString");
      MockThread mockThread0 = new MockThread(threadGroup0, "Y-JL@3t>{znjFaE;@");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      aSMClassLoader1.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      TypeUtils.loadClass("Y-JL@3t>{znjFaE;@", (ClassLoader) aSMDeserializerFactory1.classLoader, false);
      String string0 = "BackBufferCapabilities";
      TypeUtils.loadClass("multiBufferAvailable", classLoader0, true);
      TypeUtils.decapitalize("multiBufferAvailable");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.unwrapOptional((Type) null);
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      negativeArraySizeException0.getSuppressed();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, (Type) null);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) negativeArraySizeException0, (Type) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@34e63bdc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Class<Locale> class0 = Locale.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("hCp~YT}X[F}K #Fk7", "hCp~YT}X[F}K #Fk7");
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      SQLWarning sQLWarning0 = new SQLWarning("list_item");
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("hCp~YT}X[F}K #Fk7");
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(mockIllegalStateException0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTransactionRollbackException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. java.sql.SQLTransactionRollbackException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      TypeUtils.computeGetters(class0, (Map<String, String>) null, false);
      TreeSet<HttpCookie> treeSet0 = new TreeSet<HttpCookie>();
      TypeUtils.isHibernateInitialized((Object) null);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      Class<TimeUnit> class1 = TimeUnit.class;
      Byte byte0 = new Byte((byte) (-117));
      VerifyError verifyError0 = new VerifyError();
      Double double0 = new Double((byte) (-117));
      TypeUtils.castToDouble(double0);
      TypeUtils.getCollectionItemType(class1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TypeUtils.castToString("Ljava.awt.Color");
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(1771);
      linkedHashMap0.put("j", "Ljava.awt.Rectangle");
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = ParserConfig.AUTOTYPE_ACCEPT;
      linkedHashMap0.put(",U|@%\"_Bvezy?82L;I", "getClass");
      ThreadGroup threadGroup0 = new ThreadGroup("MM/dd/yyyy HH:mm:ss");
      Hashtable<SimpleDateFormat, MockCalendar> hashtable0 = new Hashtable<SimpleDateFormat, MockCalendar>();
      Double double0 = new Double(0.0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("java.lang.String@0000000001");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Hashtable<SimpleDateFormat, MockCalendar> hashtable0 = new Hashtable<SimpleDateFormat, MockCalendar>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup0 = new ThreadGroup("bzkcf%>SafYrPXgrbJ");
      hashtable0.clear();
      Hashtable<HttpCookie, SimpleDateFormat> hashtable1 = new Hashtable<HttpCookie, SimpleDateFormat>();
      Properties properties0 = new Properties();
      TypeUtils.decapitalize("value");
      TypeUtils.isGenericParamType(parameterizedTypeImpl0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      Class<LinkageError> class0 = LinkageError.class;
      ParserConfig parserConfig1 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "##v,o_VE8'1(A", class0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.LinkageError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      VerifyError verifyError0 = new VerifyError("Lorg.springframework.util.LinkedMultiValueMap");
      Class<JobAttributes> class0 = JobAttributes.class;
      Class<FieldInfo> class1 = FieldInfo.class;
      Type[] typeArray0 = new Type[3];
      typeArray0[2] = (Type) class1;
      Class<Float> class2 = Float.TYPE;
      TypeUtils.getCollectionItemClass(class0);
      TypeUtils.loadClass("pageRanges");
      Class<MockMinguoDate> class3 = MockMinguoDate.class;
      Class<Annotation> class4 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class3, class4);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.PRIOR;
      Class<Float> class5 = Float.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException(7);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stringIndexOutOfBoundsException0, class5, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.lang.StringIndexOutOfBoundsException: String index out of range: 7
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Hashtable<SimpleDateFormat, MockCalendar> hashtable0 = new Hashtable<SimpleDateFormat, MockCalendar>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("-L[t!<6e", "-L[t!<6e");
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("dialog").when(biFunction0).apply(anyString() , any());
      linkedHashMap0.compute("-L[t!<6e", biFunction0);
      linkedHashMap0.put((String) null, "-L[t!<6e");
      ThreadGroup threadGroup0 = new ThreadGroup("bzkcf%>SafYrPXgrbJ");
      Hashtable<SimpleDateFormat, MockCalendar> hashtable1 = new Hashtable<SimpleDateFormat, MockCalendar>();
      hashtable0.clear();
      Hashtable<HttpCookie, SimpleDateFormat> hashtable2 = new Hashtable<HttpCookie, SimpleDateFormat>();
      Properties properties0 = new Properties();
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) threadGroup0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"daemon\":false,\"destroyed\":false,\"maxPriority\":10,\"name\":\"bzkcf%>Saf\\u007FYrPXgrbJ\",\"parent\":{\"daemon\":false,\"destroyed\":false,\"maxPriority\":10,\"name\":\"Test_Execution_Group\",\"parent\":{\"daemon\":false,\"destroyed\":false,\"maxPriority\":10,\"name\":\"main\",\"parent\":{\"daemon\":false,\"destroyed\":false,\"maxPriority\":10,\"name\":\"system\"}}}}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Class<DateFormatSymbols> class0 = DateFormatSymbols.class;
      TypeUtils.isKotlin(class0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HY_\"`");
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[3]);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.text.DateFormatSymbols
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      TypeUtils.isProxy(class0);
      WeakHashMap<JobAttributes, ClassLoader> weakHashMap0 = new WeakHashMap<JobAttributes, ClassLoader>();
      TreeSet<SQLRecoverableException> treeSet0 = new TreeSet<SQLRecoverableException>();
      TypeUtils.castToShort((Object) null);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      Class<?> class1 = TypeUtils.loadClass("[S", (ClassLoader) aSMClassLoader0, true);
      TypeUtils.decapitalize("");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.unwrapOptional(class1);
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) timeUnit0, type0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : Mock for GenericArrayType, hashCode: 141227025
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      Point point0 = new Point((-310), (-310));
      TypeUtils.toLocale("t2Lx7H %vI@GJ4");
      Class<Point> class0 = Point.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.computeGetters((Class<?>) class0, jSONType0, (Map<String, String>) linkedHashMap0, (Map<String, Field>) hashMap0, true, propertyNamingStrategy0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<Integer> class0 = Integer.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      StackTraceElement stackTraceElement0 = new StackTraceElement("Lorg.springframework.util.LinkedMultiValueMap", "Lorg.springframework.util.LinkedMultiValueMap", "Lorg.springframework.util.LinkedMultiValueMap", 29);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(stackTraceElement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : Lorg.springframework.util.LinkedMultiValueMap.Lorg.springframework.util.LinkedMultiValueMap(Lorg.springframework.util.LinkedMultiValueMap:29)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[7] = (byte) (-69);
      byteArray0[2] = (byte) (-70);
      byteArray0[4] = (byte)36;
      Class<Double> class0 = Double.TYPE;
      String[] stringArray0 = new String[4];
      stringArray0[1] = "eK`Yfj";
      stringArray0[3] = "eK`Yfj";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      javaBeanSerializer0.getType();
      TypeUtils.isGenericParamType(class0);
      WeakHashMap<SQLNonTransientException, NoClassDefFoundError> weakHashMap0 = new WeakHashMap<SQLNonTransientException, NoClassDefFoundError>();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("eK`Yfj");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TypeUtils.fnv1a_64("IC");
      Boolean boolean0 = new Boolean("IC");
      BreakIterator.getSentenceInstance();
      Date date0 = new Date(658674568360682021L);
      TypeUtils.castToInt(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      Hashtable<SimpleDateFormat, MockCalendar> hashtable0 = new Hashtable<SimpleDateFormat, MockCalendar>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      hashtable0.clear();
      Hashtable<String, String> hashtable1 = new Hashtable<String, String>();
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      String string0 = "3<YBP";
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLNonTransientException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TypeUtils.fnv1a_64("IbC");
      Boolean boolean0 = new Boolean("IbC");
      Point point0 = new Point((-310), (-310));
      Class<NumberDeserializer> class0 = NumberDeserializer.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "IbC";
      stringArray0[1] = "IbC";
      stringArray0[2] = "IbC";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      TypeUtils.isGenericParamType(class0);
      WeakHashMap<SQLNonTransientException, NoClassDefFoundError> weakHashMap0 = new WeakHashMap<SQLNonTransientException, NoClassDefFoundError>();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("IbC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : IbC
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Hashtable<SimpleDateFormat, MockCalendar> hashtable1 = new Hashtable<SimpleDateFormat, MockCalendar>();
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      TypeUtils.isProxy(class1);
      WeakHashMap<JobAttributes, ClassLoader> weakHashMap0 = new WeakHashMap<JobAttributes, ClassLoader>();
      int int0 = DateFormat.DATE_FIELD;
      Locale locale0 = TypeUtils.toLocale("fied_ser");
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class1;
      typeArray0[4] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[3], typeArray0[1]);
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      parameterizedTypeImpl0.getTypeName();
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      locale0.toString();
      ParserConfig.getFieldFromCache("fied_ser", hashMap0);
      hashMap0.put("getDeclaringClass", (Field) null);
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer@9a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TypeUtils.castToByte((Object) null);
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      Point point0 = new Point(6, 6);
      Class<Double> class0 = Double.class;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "eK`Yf";
      stringArray0[1] = "eK`Yf";
      stringArray0[2] = "eK`Yf";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      javaBeanSerializer0.getType();
      Class<JobAttributes> class1 = JobAttributes.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class1, jSONType0);
      TypeUtils.isGenericParamType((Type) null);
      WeakHashMap<SQLNonTransientException, NoClassDefFoundError> weakHashMap0 = new WeakHashMap<SQLNonTransientException, NoClassDefFoundError>();
      TypeUtils.castToLong((Object) null);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      InstantiationException instantiationException0 = new InstantiationException();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Hashtable<HttpCookie, SimpleDateFormat> hashtable0 = new Hashtable<HttpCookie, SimpleDateFormat>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      TypeUtils.isGenericParamType((Type) null);
      Class<DecimalFormat> class0 = DecimalFormat.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava.awt.Rectangle");
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      weakHashMap0.put("\"Mf+@zA%HFI!8B>7be", "\"Mf+@zA%HFI!8B>7be");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0, false);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("\"Mf+@zA%HFI!8B>7be", true);
      classLoader0.clearAssertionStatus();
      TypeUtils.loadClass("Z&<gF", classLoader0, false);
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListMap", classLoader0, true);
      TypeUtils.decapitalize("1FX+B)IO|<!.X0Iz");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<SqlDateDeserializer> class1 = SqlDateDeserializer.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.unwrapOptional(class1);
      ClassLoader.getSystemClassLoader();
      LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "Ljava.util.concurrent.ConcurrentSkipListMap", (Type) null, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OptionalCodec optionalCodec0 = new OptionalCodec();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.IgnoreErrorGetter;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializeWriter serializeWriter0 = new SerializeWriter(serializerFeatureArray0);
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$";
      stringArray0[2] = "$";
      stringArray0[3] = "$";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      simplePropertyPreFilter0.getClazz();
      VerifyError verifyError0 = new VerifyError(stringArray0[1]);
      simplePropertyPreFilter0.setMaxLevel((-2751));
      Class<BitSet> class1 = BitSet.class;
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class1, stringArray0);
      javaBeanSerializer0.getType();
      TypeUtils.isGenericParamType(class1);
      WeakHashMap<SQLNonTransientException, NoClassDefFoundError> weakHashMap0 = new WeakHashMap<SQLNonTransientException, NoClassDefFoundError>();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("\"}");
      weakHashMap0.put(sQLFeatureNotSupportedException0, noClassDefFoundError0);
      Integer integer0 = new Integer(1192);
      TypeUtils.castToLong(integer0);
      Class<Integer> class2 = Integer.TYPE;
      TypeUtils.getGenericParamType(class2);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      AtomicInteger atomicInteger0 = new AtomicInteger(89);
      atomicInteger0.getAndDecrement();
      TypeUtils.castToString(atomicInteger0);
      IntBinaryOperator intBinaryOperator0 = mock(IntBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn((-670)).when(intBinaryOperator0).applyAsInt(anyInt() , anyInt());
      atomicInteger0.getAndAccumulate(89, intBinaryOperator0);
      TypeUtils.castToShort(atomicInteger0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "java.util.concurrent.atomic.AtomicInteger@0000000001");
      Class<PageAttributes> class0 = PageAttributes.class;
      IntUnaryOperator intUnaryOperator0 = mock(IntUnaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn((-1630416251)).when(intUnaryOperator0).applyAsInt(anyInt());
      atomicInteger0.getAndUpdate(intUnaryOperator0);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      atomicInteger0.compareAndSet(122, 88);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) weakHashMap0);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("syntax error, ", concurrentHashMap0);
      TypeUtils.toLocale("can not cast to char, value : ");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      MockDate mockDate0 = new MockDate((-1631996908), 110, 110, 88, 54);
      TypeUtils.castToDate(mockDate0);
      TypeUtils.loadClass("g#n Q");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      TypeUtils.loadClass("syntax error, ", classLoader0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TypeUtils.fnv1a_64("IbC");
      Boolean boolean0 = Boolean.TRUE;
      BreakIterator.getCharacterInstance();
      Date date0 = new Date(4727365747540580451L);
      TypeUtils.castToInt(boolean0);
      TypeUtils.loadClass("'3oUn kQqr");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("IbC");
      sQLNonTransientConnectionException0.spliterator();
      BigDecimal bigDecimal0 = new BigDecimal(4727365747540580451L);
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("'3oUn kQqr");
      OutOfMemoryError outOfMemoryError0 = new OutOfMemoryError();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(noClassDefFoundError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.lang.NoClassDefFoundError: '3oUn kQqr
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TypeUtils.castToString("Ljava.awt.Color");
      ThreadGroup threadGroup0 = new ThreadGroup("bzkcf%>SafYrPXgrbJ");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "illegal getter");
      MockThread mockThread0 = new MockThread(threadGroup1, "multiBufferAvailable");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      Class<Point> class0 = Point.class;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null);
      aSMDeserializerFactory0.createJavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      aSMDeserializerFactory0.classLoader.getParent();
      ASMDeserializerFactory aSMDeserializerFactory2 = new ASMDeserializerFactory(classLoader1);
      TypeUtils.loadClass("j", (ClassLoader) aSMDeserializerFactory2.classLoader, true);
      TypeUtils.loadClass("BackBufferCapabilities", classLoader0, false);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Class<SqlDateDeserializer> class1 = SqlDateDeserializer.class;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.cast((Object) null, (Type) null, (ParserConfig) null);
      TypeUtils.loadClass("multiBufferAvailable");
      ChoiceFormat choiceFormat0 = new ChoiceFormat("Ljava.awt.Rectangle");
      choiceFormat0.clone();
      // Undeclared exception!
      try { 
        choiceFormat0.getCurrency();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.NumberFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Hashtable<SimpleDateFormat, MockCalendar> hashtable0 = new Hashtable<SimpleDateFormat, MockCalendar>();
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.clearAssertionStatus();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      TypeUtils.loadClass("getCalendar", classLoader1, false);
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      Class<?> class0 = TypeUtils.loadClass("java.time.Duration", classLoader2, false);
      TypeUtils.decapitalize("getCalendar");
      classLoader1.clearAssertionStatus();
      Properties properties0 = new Properties();
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.unwrapOptional(class0);
      TypeUtils.decapitalize("fastjson.parser.autoTypeSupport");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.decapitalize("Lorg.springframework.util.LinkedMultiValueMap");
      TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      TypeUtils.castToSqlTime((Object) null);
      // Undeclared exception!
      try { 
        JSON.parseObject("java.time.Duration");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : java.time.Duration
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      NoSuchMethodError noSuchMethodError0 = new NoSuchMethodError();
      Point point0 = new Point((-310), (-310));
      Class<Double> class0 = Double.class;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "eK`Yf";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      javaBeanSerializer0.getType();
      TypeUtils.isNumber("eK`Yf");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader0.getParent();
      classLoader1.getParent();
      TypeUtils.loadClass("A", (ClassLoader) null);
      TreeMap<MockSimpleDateFormat, InstantiationException> treeMap0 = new TreeMap<MockSimpleDateFormat, InstantiationException>();
      ArrayList<Insets> arrayList0 = new ArrayList<Insets>();
      Byte byte0 = new Byte((byte) (-7));
      TypeUtils.castToByte(byte0);
      Class<JSONPDeserializer> class1 = JSONPDeserializer.class;
      TypeUtils.getParserFeatures(class1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<Short> class0 = Short.TYPE;
      TypeUtils.getClass((Type) class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AtomicInteger atomicInteger0 = new AtomicInteger(70);
      atomicInteger0.compareAndSet(70, 124);
      TypeUtils.castToBoolean(atomicInteger0);
      TypeUtils.isNumber("to");
      Class<JobAttributes> class1 = JobAttributes.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>(map0);
      String string0 = "fi";
      TypeUtils.toLocale("fi");
      TypeUtils.getCollectionItemType(class1);
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : true
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Class<SQLTransientException> class0 = SQLTransientException.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      TreeSet<HttpCookie> treeSet0 = new TreeSet<HttpCookie>();
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException();
      TypeUtils.isHibernateInitialized(class0);
      Class<Byte> class1 = Byte.TYPE;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.clearAssertionStatus();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) concurrentHashMap0, true);
      TreeSet<HttpCookie> treeSet1 = new TreeSet<HttpCookie>();
      TypeUtils.isHibernateInitialized(class1);
      Class<Byte> class2 = Byte.TYPE;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      TypeUtils.toLocale("java.lang.Cloneable");
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Hashtable<HttpCookie, SimpleDateFormat> hashtable0 = new Hashtable<HttpCookie, SimpleDateFormat>();
      Properties properties0 = new Properties();
      ChoiceFormat choiceFormat0 = null;
      try {
        choiceFormat0 = new ChoiceFormat((double[]) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.ChoiceFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[2] = (byte)37;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[7] = (byte) (-69);
      byteArray0[2] = (byte) (-70);
      byteArray0[4] = (byte)36;
      Class<Double> class0 = Double.TYPE;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.";
      stringArray0[1] = "eK`Yfj";
      stringArray0[3] = "eK`Yfj";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      javaBeanSerializer0.getType();
      TypeUtils.isGenericParamType(class0);
      WeakHashMap<SQLNonTransientException, NoClassDefFoundError> weakHashMap0 = new WeakHashMap<SQLNonTransientException, NoClassDefFoundError>();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("ai\"");
      weakHashMap0.put((SQLNonTransientException) null, noClassDefFoundError0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("java.", "eK`Yfj");
      NoClassDefFoundError noClassDefFoundError1 = new NoClassDefFoundError("eK`Yfj");
      weakHashMap0.isEmpty();
      weakHashMap0.put(sQLFeatureNotSupportedException0, noClassDefFoundError1);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(weakHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {java.sql.SQLFeatureNotSupportedException: java.=java.lang.NoClassDefFoundError: eK`Yfj, null=java.lang.NoClassDefFoundError: ai\"}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>(497);
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      linkedHashMap0.computeIfPresent("toString", biFunction0);
      linkedHashMap0.put("vYTgob*3.", "j");
      linkedHashMap0.entrySet();
      linkedHashMap0.put("getClass", "I#>\"`tYW!o1DGdy0c");
      ThreadGroup threadGroup0 = new ThreadGroup("~WoQU>Lw&5%");
      Hashtable<SimpleDateFormat, MockCalendar> hashtable0 = new Hashtable<SimpleDateFormat, MockCalendar>();
      Hashtable<HttpCookie, SimpleDateFormat> hashtable1 = new Hashtable<HttpCookie, SimpleDateFormat>();
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn("zKVF|Y_tI*").when(function0).apply(any());
      weakHashMap0.computeIfAbsent("com.alibaba.fastjson.serializer.GuavaCodec", function0);
      Class<Short> class0 = Short.class;
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0, true);
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      Class<Short> class2 = Short.class;
      TypeUtils.isKotlin(class2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "j", (Type) class0, (ParserConfig) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
