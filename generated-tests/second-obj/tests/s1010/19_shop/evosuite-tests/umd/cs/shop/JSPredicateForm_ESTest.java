/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:25:21 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.LineNumberReader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      assertEquals(0, jSPredicateForm0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.equals((JSPredicateForm) null);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(opiY4Jo;W6");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.toStr();
      JSJshopVars.leftPar = (-3);
      JSPredicateForm jSPredicateForm1 = null;
      try {
        jSPredicateForm1 = new JSPredicateForm("J+>t");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      JSPredicateForm jSPredicateForm0 = null;
      String string0 = "3";
      StringReader stringReader0 = new StringReader("3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = (-4225);
      streamTokenizer0.ordinaryChar((-4225));
      System.setCurrentTimeMillis((byte)0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Object object0 = new Object();
      jSTerm0.add(object0);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.setSize(42);
      JSTerm jSTerm0 = new JSTerm();
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      StringReader stringReader0 = new StringReader("not");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4225));
      System.setCurrentTimeMillis((-10L));
      Object[] objectArray0 = new Object[1];
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.remove((Object) jSSubstitution1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("(3.0)", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z]-)x)cp@oMmP>k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clonePF();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("l\"A&EXPuUKo");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSJshopVars.leftPar = (-3);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("Q");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "Z]-)x)cp@oMmP>k";
      StringReader stringReader0 = new StringReader("Z]-)x)cp@oMmP>k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.equals(jSPredicateForm0);
      jSPredicateForm0.print();
      UnaryOperator.identity();
      JSPredicateForm jSPredicateForm1 = null;
      try {
        jSPredicateForm1 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z]-)x)cp@oMmP>k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      streamTokenizer0.nval = 0.0;
      jSTerm0.matches((JSPredicateForm) jSTerm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.listIterator(1850);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1850
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z]-)x)cp@oMmP>k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((byte) (-9));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z]-)x)cp@oMmP>k");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((byte) (-9));
      System.setCurrentTimeMillis((-4225));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      jSTerm1.toStr();
      jSTerm0.toStr();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm1.equals(jSPredicateForm0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      jSPredicateForm0.standarizerPredicateForm();
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("=a");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z]-)x)cp@oMmP>k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((byte) (-9));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((byte) (-9));
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm1.clonePF();
      Object object0 = new Object();
      JSPredicateForm jSPredicateForm1 = jSTerm1.standarizerPredicateForm();
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm2 = jSTerm0.standarizerPredicateForm();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSPredicateForm0;
      objectArray0[1] = (Object) stringReader0;
      jSPredicateForm1.toArray(objectArray0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer2);
      jSSubstitution0.add((Object) jSTerm2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm3.applySubstitutionPF(jSSubstitution0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0);
      JSPredicateForm jSPredicateForm5 = new JSPredicateForm();
      jSPredicateForm5.toStr();
      jSTerm2.equals(jSPredicateForm1);
      jSPredicateForm3.print();
      jSPredicateForm4.matches(jSPredicateForm2);
      System.setCurrentTimeMillis((byte) (-9));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.toStr();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSJshopVars.leftPar = (-3);
      JSPredicateForm jSPredicateForm1 = null;
      try {
        jSPredicateForm1 = new JSPredicateForm("Unexpected ) while reading Predicate");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z]-)x)cp@oMmP>k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      Object object0 = new Object();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-91);
      byteArray0[1] = (byte)47;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-2);
      jSTerm0.add((Object) "Z]-)x)cp@oMmP>k");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSPredicateForm0.print();
      jSTerm0.toStr();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z]-)x)cp@oMmP>k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clonePF();
      Object object0 = new Object();
      EvoSuiteFile evoSuiteFile0 = null;
      jSTerm0.add((Object) streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object object1 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Object object2 = new Object();
      jSTerm0.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z]-)x)cp@oMmP>k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      Object object0 = new Object();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      Object object1 = new Object();
      jSPredicateForm0.addElement(object1);
      streamTokenizer0.lowerCaseMode(true);
      Object object2 = new Object();
      jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z]-)x)cp@oMmP>k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.standarizerPredicateForm();
      streamTokenizer0.lowerCaseMode(false);
      jSPredicateForm0.print();
      Object object0 = new Object();
      JSPredicateForm jSPredicateForm4 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Object object1 = new Object();
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      JSPredicateForm jSPredicateForm5 = jSPredicateForm4.standarizerPredicateForm();
      jSSubstitution0.standarizerSubs();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm3.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm3.equals(jSPredicateForm6);
      jSPredicateForm6.setSize(41);
      jSPredicateForm0.print();
      jSPredicateForm1.matches(jSPredicateForm6);
      jSPredicateForm5.matches(jSPredicateForm3);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Z]-)x)cp@oMmP>k");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSPredicateForm0.applySubstitutionPF(jSSubstitution4);
      JSPredicateForm jSPredicateForm7 = jSPredicateForm1.clonePF();
      jSPredicateForm0.equals(jSPredicateForm7);
      // Undeclared exception!
      try { 
        jSPredicateForm6.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
