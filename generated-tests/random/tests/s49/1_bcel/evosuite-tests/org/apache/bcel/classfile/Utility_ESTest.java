/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 11:06:27 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "_,A6mHHPbn<";
      Utility.getSignature("_,A6mHHPbn<");
      // Undeclared exception!
      try { 
        Utility.signatureToString("L_,A6mHHPbn<;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L_,A6mHHPbn<;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.accessToString(768, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-82);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)103;
      byte byte0 = (byte)8;
      byteArray0[4] = (byte)8;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)73, (-4203), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "#{V8HX?YD:t<Bi72";
      Utility.getSignature("#{V8HX?YD:t<Bi72");
      Utility.searchOpcode("org.apache.bcel.classfile.AccessFlags");
      try { 
        Utility.typeOfSignature("#{V8HX?YD:t<Bi72");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #{V8HX?YD:t<Bi72
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte) (-113);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-97), (byte) (-113));
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(55);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-120), 4475, true);
      assertEquals("0:    if_icmpeq\t\t#-215\n3:    dup2\n4:    l2i\n5:    d2l\n", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.clearBit(900, 900);
      Utility.getSignature("ifle");
      Utility.compactClassName("P");
      try { 
        Utility.typeOfSignature("P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      char char0 = 'h';
      Utility.format((-2903), 122, false, 'h');
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Code", false);
      Utility.getSignature("hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh-2903");
      int int0 = 2149;
      Utility.accessToString(2149);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[1] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        constantPool0.getConstant(122, (byte)56);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 122. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Utility.isJavaIdentifierPart('\\');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-24);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("83 e8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 83 e8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "Only element values of type array can be built with this ctor - type specified: ";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Utility.fillup("Only element values of type array can be built with this ctor - type specified: ", 1762, true, 'V');
      try { 
        Utility.typeOfSignature("Only element values of type array can be built with this ctor - type specified: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Only element values of type array can be built with this ctor - type specified: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.isJavaIdentifierPart('/');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)102;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)13;
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 69, 234, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)19, 37, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = Utility.fillup("*J$+g!/", (-350), false, '{');
      assertEquals("*J$+g!/", string0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "annotation");
      byte byte0 = Utility.typeOfSignature("*J$+g!/");
      assertEquals((byte)11, byte0);
      
      short short0 = Utility.searchOpcode("sB';c,KYO");
      assertEquals((short) (-1), short0);
      
      int int0 = Utility.setBit(241, (short) (-1));
      assertEquals((-2147483407), int0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string1 = Utility.compactClassName("sB';c,KYO");
      assertEquals("sB';c,KYO", string1);
      
      String string2 = Utility.format(1140, (short) (-1), false, '{');
      assertEquals("1140", string2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Utility.printArray((Object[]) null, true, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte)52;
      byteArray0[8] = (byte)75;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 43, (int) (byte)101, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-115);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2764, 197, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Utility.typeOfSignature("T=");
      Utility.replace("\t\t#", "01,IsG", "T=");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.compactClassName("V", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      EvoSuiteFile evoSuiteFile1 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("", "", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.skip((-3063L));
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        byteSequence0.readUTF();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.clearBit(43, 43);
      Utility.isSet(107, 1399);
      Utility.searchOpcode("new");
      Utility.classOrInterface((short)187);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "new";
      objectArray0[1] = (Object) "class";
      objectArray0[2] = (Object) "new";
      objectArray0[3] = (Object) "new";
      objectArray0[4] = (Object) "new";
      objectArray0[5] = (Object) "new";
      Utility.printArray(objectArray0, false, false);
      Utility.replace("class", "new", "byte");
      try { 
        Utility.typeOfSignature("+40@H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 40@H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)76;
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(117);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)127, 82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.replace("']jx7DxA", "']jx7DxA", "']jx7DxA");
      Utility.searchOpcode("']jx7DxA");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)100;
      byteArray0[0] = (byte)100;
      byte byte1 = (byte)27;
      byteArray0[1] = (byte)27;
      Utility.encode(byteArray0, false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "d$h";
      stringArray0[1] = "T\"d7^m";
      stringArray0[2] = "d$h";
      stringArray0[3] = "d$h";
      Utility.methodTypeToSignature("T\"d7^m", stringArray0);
      Utility.encode(byteArray0, false);
      Constant[] constantArray0 = new Constant[2];
      int int0 = 1141;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1141, (byte)100);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantMethodref constantMethodref2 = new ConstantMethodref(constantMethodref1);
      constantArray0[1] = (Constant) constantMethodref2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4, (-431));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte) (-97);
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("\t\t");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantUtf8.getCachedInstance("\t\t");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-5431), (-196));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    i2b
         // 1:    goto_w\t\t#-1526219579
         // 6:    baload
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      try { 
        Utility.typeOfSignature("N HGl=8jiQ=erT'Ip6 ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N HGl=8jiQ=erT'Ip6 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte) (-24);
      byteArray0[7] = (byte) (-108);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)2, (int) (byte)103, false);
      assertEquals("2:    dstore_0\n3:    dsub\n4:    iconst_m1\n5:    iinc\t\t%232\t-108\n", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-18);
      byteArray0[0] = (byte) (-18);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      try { 
        Utility.typeOfSignature(":dG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :dG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Utility.format((-4160), (-4160), true, 'y');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byte byte0 = (byte)23;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte) (-70);
      byteArray0[8] = (byte)8;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-4160), 372);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    astore_1
         // 1:    fload\t\t%205
         // 3:    faload
         // 4:    lstore_3
         // 5:    ineg
         // 6:    iload_3
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = Utility.accessToString(3559, false);
      assertEquals("public private protected synchronized volatile transient native abstract strictfp", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte) (-6);
      byteArray0[7] = (byte)81;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-544), (int) (byte)122, false);
      assertEquals("0:    ishr\n1:    fstore_2\n2:    i2l\n3:    ior\n4:    <illegal opcode>\n5:    breakpoint\n6:    <illegal opcode>\n7:    fastore\n", string1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte) (-66);
      byteArray0[8] = (byte)39;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 43, (int) (byte)13, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      try { 
        Utility.typeOfSignature("QLX9Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QLX9Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)9;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)9, 2982, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)102;
      byteArray0[0] = (byte)29;
      byteArray0[6] = (byte)127;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1066, (int) (byte) (-65), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t(wide)");
      Utility.getSignature("\t(wide)");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-4056), (-704), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    frem
         // 1:    dup_x1
         // 2:    breakpoint
         // 3:    nop
         // 4:    iand
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte)89;
      byteArray0[8] = (byte) (-19);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "fwn}uz";
      stringArray0[1] = "fwn}uz";
      Utility.methodTypeToSignature("fwn}uz", stringArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "EnclosingMethod");
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)126;
      byteArray0[7] = (byte)67;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, (-301));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.replace("instanceof", "instanceof", "instanceof");
      Utility.compactClassName("FyFeDw", false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.setBit(14, 14);
      Utility.typeOfSignature("FyFeDw");
      Utility.searchOpcode("+D)>G|5=O)VBJXB");
      Utility.replace(":", "Y#O91", "jsr");
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("B:,@hl($1,#B?x", stringArray0);
      Utility.methodSignatureToString("()LB:,@hl($1,#B?x;", "B:,@hl($1,#B?x", "+D)>G|5=O)VBJXB", false);
      try { 
        Utility.methodSignatureArgumentTypes("instanceof");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: instanceof
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-67);
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)100;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "/d:qvkXyC&s";
      try { 
        Utility.typeOfSignature("/d:qvkXyC&s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /d:qvkXyC&s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte) (-60);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5=O:K`#n$. `");
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte) (-125);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)65, 10, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 50241. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-44);
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)21;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-49);
      byteArray0[0] = (byte)61;
      byteArray0[7] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("istore_2", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Utility.clearBit(168, 168);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-94);
      byte byte0 = (byte) (-89);
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte) (-61);
      byteArray0[8] = (byte)52;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)52, (int) (byte)7, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "?sCD=q -Puy%lhi";
      stringArray0[1] = "Invalid type: ";
      stringArray0[2] = "Rh{@U}8w;J4dq).!";
      stringArray0[3] = "java.lang.Cloneable";
      stringArray0[4] = "Rh{@U}8w;J4dq).!";
      stringArray0[5] = "Rh{@U}8w;J4dq).!";
      stringArray0[6] = "Rh{@U}8w;J4dq).!";
      stringArray0[7] = "Rh{@U}8w;J4dq).!";
      Utility.methodTypeToSignature("Rh{@U}8w;J4dq).!", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(L?sCD=q;LInvalid;LRh{@U}8w;J4dq)/!;Ljava/lang/Cloneable;LRh{@U}8w;J4dq)/!;LRh{@U}8w;J4dq)/!;LRh{@U}8w;J4dq)/!;LRh{@U}8w;J4dq)/!;)LRh{@U}8w;J4dq)/!;", ", npairs = ", "Rh{@U}8w;J4dq).!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `4dq)/!;Ljava/lang/Cloneable;LRh{@U}8w;J4dq)/!;LRh{@U}8w;J4dq)/!;LRh{@U}8w;J4dq)/!;LRh{@U}8w;J4dq)/!;)LRh{@U}8w;J4dq)/!;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "Yuvw(iS4z.2_B-#7>";
      try { 
        Utility.typeOfSignature("Yuvw(iS4z.2_B-#7>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Yuvw(iS4z.2_B-#7>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-36);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-3);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2729, (int) (byte) (-3));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)0;
      byte byte0 = (byte)93;
      byteArray0[4] = (byte)93;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)93, (int) (byte) (-58));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)109;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-119);
      byteArray0[7] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1734, (int) (byte)95, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup2", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!ent<Y-?$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ent<Y-?$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-15);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-57), 70, true);
      assertEquals("0:    pop\n1:    ifnonnull\t\t#-31502\n", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-100);
      byte byte0 = (byte)90;
      byteArray0[2] = (byte)90;
      byte byte1 = (byte) (-86);
      byteArray0[3] = (byte) (-86);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte)90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmple\t\t#-25510
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Utility.classOrInterface(165);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-74);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 186, (-1455), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Utility.isSet(231, 231);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte) (-65);
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1153076851), 144);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      Constant constant0 = constantInterfaceMethodref1.copy();
      constantArray0[0] = constant0;
      ConstantClass constantClass0 = new ConstantClass((byte) (-65));
      constantArray0[1] = (Constant) constantClass0;
      ConstantClass constantClass1 = new ConstantClass((byte)10);
      constantArray0[2] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)95, 230, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte) (-81);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 98, (int) (byte) (-81));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)122;
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte)38;
      byteArray0[8] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2342), (-216));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dcmpl
         // 1:    ifne\t\t#-22090
         // 4:    ifgt\t\t#31469
         // 7:    dload_0
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char char0 = 'I';
      Utility.isJavaIdentifierPart('I');
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)75;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(103);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)58, (int) (byte)75, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, false);
      Utility.isJavaIdentifierPart('~');
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{java.lang.Object@2c8f09c4, java.lang.Object@1a3e9e9f, java.lang.Object@45af9369, java.lang.Object@6564289, java.lang.Object@5243baae}";
      stringArray0[1] = "{java.lang.Object@2c8f09c4, java.lang.Object@1a3e9e9f, java.lang.Object@45af9369, java.lang.Object@6564289, java.lang.Object@5243baae}";
      stringArray0[2] = "{java.lang.Object@2c8f09c4, java.lang.Object@1a3e9e9f, java.lang.Object@45af9369, java.lang.Object@6564289, java.lang.Object@5243baae}";
      Utility.methodTypeToSignature("{java.lang.Object@2c8f09c4, java.lang.Object@1a3e9e9f, java.lang.Object@45af9369, java.lang.Object@6564289, java.lang.Object@5243baae}", stringArray0);
      Utility.methodSignatureToString("(L{java/lang/Object@2c8f09c4,;L{java/lang/Object@2c8f09c4,;L{java/lang/Object@2c8f09c4,;)L{java/lang/Object@2c8f09c4,;", "{java.lang.Object@2c8f09c4, java.lang.Object@1a3e9e9f, java.lang.Object@45af9369, java.lang.Object@6564289, java.lang.Object@5243baae}", "{java.lang.Object@2c8f09c4, java.lang.Object@1a3e9e9f, java.lang.Object@45af9369, java.lang.Object@6564289, java.lang.Object@5243baae}");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)87;
      byteArray0[8] = (byte) (-6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -26
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.classOrInterface(200);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte)27;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)27, 1625, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 46363. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.searchOpcode("(SayE]t)&{q]6");
      byte[] byteArray0 = Utility.decode("RGD|`p$", false);
      Utility.setBit(883, 3);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.reset();
      try { 
        DataInputStream.readUTF((DataInput) byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "4tJyL:JcIRCn#";
      boolean boolean0 = false;
      Utility.compactClassName("4tJyL:JcIRCn#", false);
      try { 
        Utility.typeOfSignature("4tJyL:JcIRCn#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4tJyL:JcIRCn#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.isSet(220, 220);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.printArray((Object[]) null, false);
      Utility.accessToString(220);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      byteSequence0.skipBytes((-1637));
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Utility.accessToString((-697));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)103;
      byteArray0[8] = (byte)41;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)20, (int) (byte)20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 768. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Utility.isSet(231, 231);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)22;
      byteArray0[6] = (byte) (-65);
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1153076851), 144);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      Constant constant0 = constantInterfaceMethodref1.copy();
      constantArray0[0] = constant0;
      ConstantClass constantClass0 = new ConstantClass((byte) (-65));
      constantArray0[1] = (Constant) constantClass0;
      ConstantClass constantClass1 = new ConstantClass((byte)10);
      constantArray0[2] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)95, 230, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-110);
      byteArray0[7] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 188, (int) (byte)42);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("d2f", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-55);
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("if_acmpne");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-1479), (byte) (-102));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[1] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dup_x1", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)119;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)119, (int) (byte)119, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)27;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte) (-121);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName("Unreachable default case reached!", false);
      String string0 = "G)j4h>~)_";
      boolean boolean0 = true;
      Utility.compactClassName("G)j4h>~)_", "]", true);
      try { 
        Utility.typeOfSignature("G)j4h>~)_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G)j4h>~)_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-26);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.");
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 233, 48, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Utility.compactClassName("kx", "kx", true);
      Utility.compactClassName("org.apache.bcel.classfile.ConstantInvokeDynamic", "", true);
      int int0 = 1220;
      Utility.fillup("java.lang.", 1220, true, 'k');
      try { 
        Utility.methodSignatureArgumentTypes("dreturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dreturn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.compactClassName("UvQp>6~{`o Ht{");
      Utility.typeOfSignature("V8?x$TPca&%#Bxt`.S");
      boolean boolean0 = true;
      Utility.compactClassName("UvQp>6~{`o Ht{", "[q^mG';$gO", true);
      Utility.convertString("UvQp>6~{`o Ht{");
      Utility.clearBit(197, (byte)12);
      int int0 = (-105);
      Utility.accessToString((-105), true);
      try { 
        Utility.decode("zzzr.}$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte) (-13);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte) (-26);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-26), (byte) (-83));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1424), (-2897), false);
      assertEquals("0:    daload\n1:    sastore\n2:    dload_3\n3:    lreturn\n4:    iconst_2\n5:    dload_0\n6:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Utility.typeOfSignature("J{phr.iEd<)$");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "J{phr.iEd<)$";
      objectArray0[1] = (Object) "J{phr.iEd<)$";
      objectArray0[2] = (Object) "J{phr.iEd<)$";
      objectArray0[3] = (Object) "J{phr.iEd<)$";
      objectArray0[4] = (Object) "J{phr.iEd<)$";
      Utility.printArray(objectArray0);
      boolean boolean0 = true;
      Utility.compactClassName("<", true);
      Utility.clearBit(2564, (-2707));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      Constant[] constantArray0 = new Constant[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantString constantString0 = null;
      try {
        constantString0 = new ConstantString(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.clearBit(2209, 1782);
      String string0 = "K(";
      try { 
        Utility.typeOfSignature("K(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)75;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass(103);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)58, (int) (byte)75, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)21;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-35);
      byteArray0[5] = (byte)61;
      byteArray0[7] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, false, true);
      try { 
        Utility.typeOfSignature("\"java.lang.Object@6e1b00f2\", \"java.lang.Object@6288962\", \"java.lang.Object@4c612483\", \"java.lang.Object@40fb5c76\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"java.lang.Object@6e1b00f2\", \"java.lang.Object@6288962\", \"java.lang.Object@4c612483\", \"java.lang.Object@40fb5c76\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Utility.typeOfSignature("SyntheticRepository could not load ");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)115;
      byteArray0[0] = (byte)115;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = " arg";
      String string1 = "6Chy";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" arg", "6Chy", "6Chy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  arg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte) (-99);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-101), 11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ifne\t\t#-25659
         // 3:    iaload
         // 4:    <illegal opcode>
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("2@z", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `2@z'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.format(1205, 1205, true, 'B');
      Utility.isJavaIdentifierPart('2');
      Utility.convertString("^2S{G7`$g<RbFW$0");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "^2S{G7`$g<RbFW$0";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)116;
      byteArray1[1] = (byte) (-95);
      byteArray1[2] = (byte) (-28);
      byteArray1[3] = (byte)120;
      byteArray1[4] = (byte) (-44);
      byteArray1[5] = (byte)28;
      byteArray1[6] = (byte) (-66);
      byteArray1[7] = (byte) (-51);
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2061, 189);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("lws`Uwg");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 10, 12, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = Utility.classOrInterface((-2515));
      assertEquals("interface", string0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "interface");
      Utility.accessToString((-2515), true);
      String string1 = Utility.accessToString((-2515), true);
      assertEquals("public protected static abstract synthetic annotation enum", string1);
      
      boolean boolean0 = Utility.isSet((-2515), (-2515));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-51);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(216);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fneg", string2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)13;
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(528, 87);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 16, (int) (byte)13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte) (-10);
      byteArray0[7] = (byte) (-110);
      byteArray0[8] = (byte)17;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-110), (-3240));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      MockFile mockFile0 = new MockFile("5Ux9|H?X7,<A?\"H");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.format("B: oPvz23 :B", (Object[]) constantArray0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      constantPool0.dump(dataOutputStream0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 66, 67, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-43);
      byteArray0[7] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "Ma`";
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("Ma`", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      int int0 = 58;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 58, 58, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)50;
      byteArray0[7] = (byte)25;
      byteArray0[8] = (byte) (-112);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("<7>Hw3L[w1+");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 210, (int) (byte)25, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utility.compactClassName("aload", "lT4f'JUXqDV!B0WM.", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)93;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      Utility.codeToString(byteArray0, constantPool0, (-2409), 1, true);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = "}";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}");
      byteArray0[0] = (byte)76;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4089, 4089, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)50;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)28;
      byteArray1[1] = (byte)50;
      byteArray1[2] = (byte)126;
      byteArray1[3] = (byte) (-100);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)7;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 36, 16384);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)40;
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)13;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("28 58 0d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 28 58 0d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Utility.isJavaIdentifierPart('k');
      String string0 = "%:68";
      try { 
        Utility.typeOfSignature("%:68");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %:68
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 455;
      Utility.accessToString(455);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[2];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}7!@00Zz4h{lT>");
      byteArray1[0] = (byte)113;
      byte byte0 = (byte) (-85);
      byteArray1[1] = (byte) (-85);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "breakpoint");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-85), (int) (byte)113);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lrem
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.fillup("^POOx", (-1000), false, 's');
      Utility.isJavaIdentifierPart('h');
      Utility.typeOfSignature("B");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) (byte)8;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) (byte)8;
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)125;
      byteArray0[2] = (byte)40;
      byteArray0[5] = (byte)58;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)38;
      String string0 = "$*U!+s8-'*525\"tm";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$*U!+s8-'*525\"tm");
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-96);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("org.apache.bcel.util.ClassPath$PathEntry");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-75), (int) (byte) (-98), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    i2s
         // 1:    dload_0
         // 2:    ifle\t\t#4101
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utility.setBit((-1454832235), (-1454832235));
      // Undeclared exception!
      try { 
        Utility.signatureToString("U{FyitSnYo+p%pzt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U{FyitSnYo+p%pzt'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, true, false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "oH,(aK@P";
      stringArray0[1] = "oH,(aK@P";
      stringArray0[2] = "oH,(aK@P";
      stringArray0[3] = "{java.lang.Object@1b3658dc, java.lang.Object@6c174eaf}";
      Utility.methodTypeToSignature("oH,(aK@P", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-15);
      Constant[] constantArray0 = new Constant[7];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(74, (byte) (-1));
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-72), 2031);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-68), (byte) (-1));
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)12);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[3] = (Constant) constantMethodType1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)10, (-1484));
      constantArray0[4] = (Constant) constantFieldref0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)10, (byte) (-68));
      constantArray0[5] = (Constant) constantMethodref0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref2 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[6] = (Constant) constantInterfaceMethodref2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)12, 67, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "l^ m;K.";
      Utility.searchOpcode("l^ m;K.");
      Utility.searchOpcode("l^ m;K.");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.replace("l^ m;K.", "lushr", "H+-AQ$b[^v.6l");
      // Undeclared exception!
      try { 
        Utility.decode("H+-AQ$b[^v.6l", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"b[\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.signatureToString("V", false);
      int int0 = 855;
      Utility.accessToString(855, false);
      Utility.isSet(67, 1885);
      Utility.isSet(61, (-686));
      String[] stringArray0 = new String[8];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[0] = "public private protected final volatile native interface";
      stringArray0[1] = "q$=)]Ch1|.YkR&6";
      stringArray0[2] = "public private protected final volatile native interface";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      stringArray0[3] = "V";
      stringArray0[4] = "void";
      stringArray0[5] = "V";
      stringArray0[6] = "land";
      stringArray0[7] = "B9i)j[S|.!c?o)2(";
      try { 
        Utility.methodTypeToSignature("public private protected final volatile native interface", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)127;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1066, (int) (byte) (-65), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Utility.accessToString(43);
      Utility.convertString("T\"y4!PA_'A8F@>) (");
      int int0 = 6;
      Utility.classOrInterface(6);
      try { 
        Utility.typeOfSignature("6vN`*x0j,yI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6vN`*x0j,yI
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utility.setBit(1003, 1003);
      Utility.typeOfSignature("D^}/V");
      Utility.replace("D^}/V", "ConstantValue", "/Eagc2Gbf");
      Utility.accessToString(1003);
      try { 
        Utility.methodSignatureArgumentTypes("D^}/V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: D^}/V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "YKHs$$E|v";
      boolean boolean0 = true;
      try { 
        Utility.decode("YKHs$$E|v", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%^u96Cm]lT7Y$#g~");
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("multianewarray", stringArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)69;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)88;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.classOrInterface(66);
      Utility.compactClassName("multianewarray", false);
      int int0 = 50;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 50, (int) (byte)88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("H*BHEL|~G97]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H*BHEL|~G97]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode(";0(6", false);
      Utility.setBit((-574), 1900);
      Utility.replace(";0(6", ";0(6", "Vc]7G_'|CHf}=6p.6");
      Utility.accessToString((-574));
      Utility.replace("Vc]7G_'|CHf}=6p.6", ";0(6", ";0(6");
      Utility.encode(byteArray0, false);
      Utility.accessToString((-740));
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(66, (-280));
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.accept(emptyVisitor0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2770, 81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)82;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)82, 77, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte)99;
      String string0 = "$*U!+s8-'*525\"tm";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$*U!+s8-'*525\"tm");
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-96);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("org.apache.bcel.util.ClassPath$PathEntry");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (-75), (int) (byte) (-110), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    i2s
         // 1:    dadd
         // 2:    i2c
         // 3:    bipush\t\t3
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-]W3+$$G1Y|Hpnn;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -]W3+$$G1Y|Hpnn;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "&MQKS1;u'3>Al])hGJs";
      try { 
        Utility.typeOfSignature("&MQKS1;u'3>Al])hGJs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &MQKS1;u'3>Al])hGJs
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = Utility.classOrInterface(13);
      String string1 = Utility.compactClassName("class", "Ale?3G](+FP", false);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.signatureToString("InitObject");
      assertEquals("int", string2);
      
      byte byte0 = Utility.typeOfSignature("Could not create the directory ");
      assertEquals((byte)5, byte0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)5;
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("05 05 05 05 05 05 05 05", string3);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "9v/O~9qe\"/";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      try { 
        Utility.typeOfSignature("9v/O~9qe\"/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9v/O~9qe\"/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)67;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-96), 58, true);
      assertEquals("0:    lshr\n1:    <illegal opcode>\n2:    if_icmpne\t\t#8773\n", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "org.apache.bcel.util.ClassPath$Dir";
      Utility.getSignature("org.apache.bcel.util.ClassPath$Dir");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-70);
      byte byte0 = (byte)53;
      byteArray0[2] = (byte)53;
      byte byte1 = (byte)127;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)106;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("3_UQgq_z1APV2Fq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3_UQgq_z1APV2Fq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = Utility.accessToString(122, false);
      assertEquals("private static final synchronized volatile", string0);
      
      String string1 = Utility.classOrInterface(122);
      assertEquals("class", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-63);
      byteArray0[6] = (byte) (-83);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dmul", string2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Utility.accessToString(32767, true);
      Utility.clearBit(32767, 32767);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 32767, 250);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Utility.isSet(13, 13);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)114;
      byteArray1[1] = (byte)91;
      byteArray1[2] = (byte)74;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)91, (int) (byte)91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char char0 = '-';
      Utility.isJavaIdentifierPart('-');
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("vKxvL])}Nk#", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3808, (int) (byte) (-30), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = ">\t";
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = Utility.clearBit(48, 993);
      assertEquals(48, int0);
      
      String string0 = Utility.signatureToString("Fm\"BXR't$,", false);
      assertEquals("float", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("arraylength", string1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = Utility.isSet(123, 123);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName("dload\t\t%193", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("long", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `long'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)93;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2696, (int) (byte)93);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-75);
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte)105;
      byteArray0[8] = (byte)0;
      Constant[] constantArray0 = new Constant[8];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("wide");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-119), 48);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)0, 103);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[2] = (Constant) constantInvokeDynamic1;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)3);
      constantArray0[3] = (Constant) constantFloat0;
      ConstantInteger constantInteger0 = new ConstantInteger(78);
      constantArray0[4] = (Constant) constantInteger0;
      ConstantDouble constantDouble0 = new ConstantDouble(21.710881966725);
      constantArray0[5] = (Constant) constantDouble0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)105, (byte) (-95));
      constantArray0[6] = (Constant) constantInterfaceMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)0, (byte)105);
      constantArray0[7] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 11, (int) (byte) (-120));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 34921. Constant pool size is: 8
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.replace("9-IpQf]3nBJtN", "getstatic", "9-IpQf]3nBJtN");
      assertEquals("9-IpQf]3nBJtN", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)54;
      byteArray0[8] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(20, 44);
      constantArray0[0] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lor", string1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Unknown constant type ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unknown constant type 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "zO~>(5");
      try { 
        Utility.typeOfSignature("H{IT`{LzVK&$q{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H{IT`{LzVK&$q{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "=Uj1A";
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)35;
      byteArray0[0] = (byte)35;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("=Uj1A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =Uj1A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.typeOfSignature("VITDw9r@`WQ:,");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)58;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, (int) (byte)40, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Utility.getSignature("):\n");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "L):;";
      objectArray0[1] = (Object) "L):;";
      objectArray0[2] = (Object) "L):;";
      objectArray0[3] = (Object) "L):;";
      objectArray0[4] = (Object) "L):;";
      objectArray0[5] = (Object) "):\n";
      objectArray0[6] = (Object) "L):;";
      Object object0 = new Object();
      objectArray0[7] = object0;
      Utility.printArray(objectArray0, true);
      Utility.printArray(objectArray0, false);
      try { 
        Utility.methodSignatureArgumentTypes("L):;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L):;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-123);
      byteArray0[7] = (byte) (-99);
      byteArray0[8] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fload_1", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Utility.compactClassName("+K=P' @h$ee=]?\"+");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)56;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)97;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte) (-125);
      Object object0 = new Object();
      objectArray0[1] = object0;
      Utility.printArray(objectArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 71, 47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "FG1r";
      Utility.signatureToString("FG1r", true);
      Utility.signatureToString("FG1r", true);
      Utility.getSignature("float");
      try { 
        Utility.methodSignatureReturnType("float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `float'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "arraylength");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iaload", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Utility.typeOfSignature("L8=Y5jhw#aMan/~");
      MockFile mockFile0 = new MockFile("L8=Y5jhw#aMan/~");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      char[] charArray0 = new char[2];
      mockFile0.delete();
      charArray0[0] = 'f';
      charArray0[1] = ':';
      int int0 = 14;
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 14, 14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte)50;
      byteArray0[8] = (byte)41;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 9, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      short short0 = Utility.searchOpcode("{*{?jPx[!0@R>O");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)91;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1969), (int) (byte) (-33));
      assertEquals("0:    iconst_0\n1:    <illegal opcode>\n2:    iconst_m1\n3:    i2d\n4:    aconst_null\n5:    dup_x2\n", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string0 = "(3+z`";
      String string1 = "if_icmpne";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(3+z`", "", "if_icmpne");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `3+z`'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = Utility.accessToString(73);
      assertEquals("public static volatile", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fcmpl", string1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FJP;U vA, \"&&b/]");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.typeOfSignature("Invalid method signature: ");
      Utility.signatureToString("Invalid method signature: ", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("ifnonnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ifnonnull'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Utility.setBit((-1579), (-1579));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-12);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(11);
      constantArray0[0] = (Constant) constantMethodType0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(59, 11);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("ICkmA6Z;x}V}XZV");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      constantMethodType0.dump(dataOutputStream0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 16, 1444);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "mTa6";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mTa6");
      Utility.decode("mTa6", false);
      String string1 = "RDv|_uVBVXZ]X7:il6";
      // Undeclared exception!
      try { 
        Utility.signatureToString("RDv|_uVBVXZ]X7:il6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RDv|_uVBVXZ]X7:il6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte)36;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iload\t\t%232", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      char char0 = 'G';
      Utility.isJavaIdentifierPart('G');
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-125);
      byteArray0[0] = (byte) (-125);
      Utility.equals(byteArray0, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-125), (int) (byte) (-125), true);
      Utility.isJavaIdentifierPart('G');
      String string0 = "MmR~Cu#oJQuA%#";
      try { 
        Utility.decode("MmR~Cu#oJQuA%#", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte) (-96);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5=O:K`#n$. `");
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte) (-125);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)65, 10, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 41025. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Utility.methodSignatureReturnType("V");
      Utility.compactClassName("uh+LJl$}L8d2,\"MF7", "if_icmplt", true);
      String string0 = Utility.format(54, 1470, true, 'K');
      Utility.isJavaIdentifierPart('K');
      try { 
        Utility.methodSignatureArgumentTypes(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString((-523));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte) (-67);
      byteArray0[8] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 169, 1403, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(5, byteSequence0.getIndex());
      assertEquals("iload_0", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, false, true);
      try { 
        Utility.typeOfSignature(",SVKu4X1o^&:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,SVKu4X1o^&:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("Warning: Padding byte != 0 in ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Utility.accessToString(932, true);
      Utility.isSet(1372, 1372);
      Utility.classOrInterface(1372);
      int int0 = 79;
      Utility.isSet(932, 79);
      Utility.convertString("_KL+b|]'M");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)33;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("=ner['", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =ner['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      try { 
        Utility.typeOfSignature("X^L?/!Kz}s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X^L?/!Kz}s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)59;
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-99);
      Constant[] constantArray0 = new Constant[4];
      String string0 = "7<It#(0d~Cngs";
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("7<It#(0d~Cngs");
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      constantArray0[0] = (Constant) constantUtf8_0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(163, (byte)59);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantClass constantClass0 = new ConstantClass(165);
      constantArray0[3] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-99), 163);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    istore_0
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString((-523));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte) (-67);
      byteArray0[8] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 169, 1403, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)13;
      String string0 = Utility.encode(byteArray0, true);
      Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)60;
      objectArray0[1] = (Object) (byte)92;
      objectArray0[2] = (Object) (byte)92;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) (byte)13;
      objectArray0[5] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Utility.methodSignatureReturnType("BootstrapMethods(", false);
      Utility.convertString("FbPHN2aw06");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(">", "Xkoz", "FbPHN2aw06", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Utility.typeOfSignature("Z8zi");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)4;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, (int) (byte)4, false);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      Utility.classOrInterface((-1891));
      Utility.accessToString((int) (byte)4, false);
      Utility.encode(byteArray0, false);
      Utility.convertString("4:    iconst_1\n5:    iconst_1\n6:    iconst_1\n");
      try { 
        Utility.typeOfMethodSignature("?oMKGCr7s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?oMKGCr7s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Utility.getSignature("int");
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-90);
      byteArray0[0] = (byte) (-90);
      ConstantPool constantPool0 = null;
      int int0 = 7;
      int int1 = (-79);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 7, (-79));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("X79memP`(s]yjy&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X79memP`(s]yjy&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)78;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-3188), (int) (byte)120, false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("0:    fconst_1\n1:    lload_2\n2:    fstore_0\n3:    <illegal opcode>\n4:    saload\n5:    ishl\n6:    lstore_1\n7:    astore_3\n", "0:    fconst_1\n1:    lload_2\n2:    fstore_0\n3:    <illegal opcode>\n4:    saload\n5:    ishl\n6:    lstore_1\n7:    astore_3\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 0:    fconst_1
         // 1:    lload_2
         // 2:    fstore_0
         // 3:    <illegal opcode>
         // 4:    saload
         // 5:    ishl
         // 6:    lstore_1
         // 7:    astore_3
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-103);
      String string0 = Utility.encode(byteArray0, false);
      Utility.convertString("!dWGVE7/C");
      Utility.compactClassName("\t\t%", ")", false);
      String string1 = Utility.fillup("\t\t%", (byte) (-103), true, '(');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true);
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(512);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      String string2 = Utility.convertString("\"");
      assertEquals("\\\"", string2);
      
      boolean boolean0 = Utility.isSet((byte)42, 911);
      assertFalse(boolean0);
      
      int int0 = Utility.clearBit(64, (byte)42);
      assertEquals(64, int0);
      
      String string3 = Utility.compactClassName("bastore");
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Utility.fillup("(njoENeLA0]r&", (-1127), true, '_');
      Utility.accessToString((-1127));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(njoENeLA0]r&";
      stringArray0[1] = "(njoENeLA0]r&";
      stringArray0[2] = "public static final transient native interface strictfp synthetic annotation enum";
      stringArray0[3] = "(njoENeLA0]r&";
      stringArray0[4] = "public static final transient native interface strictfp synthetic annotation enum";
      Utility.methodTypeToSignature("(njoENeLA0]r&", stringArray0);
      try { 
        Utility.methodSignatureReturnType("Kjs4J%vGd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Kjs4J%vGd'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte) (-55);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-97);
      byteArray1[1] = (byte)86;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Utility.compactClassName("\"", "\"", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"");
      Utility.compactClassName("monitorenter", "eibdD#.;]AmGd", true);
      Utility.setBit((-2323), (-2323));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-2);
      byte byte0 = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-67);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 161, (-3414), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[21];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-63));
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantInteger0.copy();
      Constant[] constantArray1 = new Constant[4];
      constantArray1[0] = (Constant) constantDouble0;
      ConstantDouble constantDouble1 = new ConstantDouble((byte)124);
      constantArray1[1] = (Constant) constantDouble1;
      constantArray1[2] = (Constant) constantInteger0;
      constantArray1[3] = (Constant) constantDouble0;
      constantPool0.setConstantPool(constantArray1);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("iload_3", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Utility.setBit(23, 23);
      Utility.setBit(6, 23);
      // Undeclared exception!
      try { 
        Utility.signatureToString("The filters must not be null", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The filters must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-56);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)89;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)89;
      byteArray1[1] = (byte)89;
      byteArray1[2] = (byte)89;
      byteArray1[3] = (byte)89;
      byteArray1[4] = (byte) (-56);
      byteArray1[5] = (byte) (-56);
      byteArray1[7] = (byte) (-56);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("m7WP+s&9&(vTH]:", stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)103;
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte) (-69);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)50, (int) (byte)50, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.getSignature("CONSTANT_MethodType");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "CONSTANT_MethodType";
      objectArray0[1] = (Object) fileSystemHandling0;
      objectArray0[2] = (Object) "LCONSTANT_MethodType;";
      objectArray0[3] = (Object) fileSystemHandling0;
      objectArray0[4] = (Object) "CONSTANT_MethodType";
      Object object0 = new Object();
      objectArray0[5] = object0;
      Utility.printArray(objectArray0, false);
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-63);
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-63));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantClass constantClass0 = new ConstantClass((-6936));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[1] = (Constant) constantClass1;
      ConstantFloat constantFloat1 = new ConstantFloat((byte) (-63));
      constantArray0[2] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)32, (-6936), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = "7f(";
      try { 
        Utility.typeOfSignature("7f(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7f(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte) (-92);
      byteArray0[7] = (byte) (-13);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("(r<-\"I<", false);
      Utility.encode(byteArray0, false);
      Utility.setBit(67, 1147);
      Utility.signatureToString("Z/DO");
      Utility.toHexString(byteArray0);
      Utility.accessToString(97);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Z/DO";
      stringArray0[1] = "public synchronized volatile";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[2] = "boolean";
      String string0 = "\t<";
      stringArray0[3] = "\t<";
      stringArray0[4] = "boolean";
      Utility.methodTypeToSignature("boolean", stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.methodTypeToSignature("DQbuoZu$I", stringArray0);
      Utility.printArray((Object[]) stringArray0, false);
      Utility.convertString("Byte code error: ");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("lload_1", "(LZ/DO;Lpublic;ZL<;Z)Z", "\t<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lload_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-56));
      constantArray0[1] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Constant[] constantArray1 = new Constant[4];
      constantArray1[0] = (Constant) constantDouble0;
      ConstantDouble constantDouble1 = new ConstantDouble((byte)124);
      constantArray1[1] = (Constant) constantDouble1;
      constantArray1[2] = (Constant) constantInteger0;
      constantArray1[3] = (Constant) constantDouble0;
      constantPool0.setConstantPool(constantArray1);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("istore_3", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = "1b(iE{b%(oNkj/3E[";
      try { 
        Utility.typeOfSignature("1b(iE{b%(oNkj/3E[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1b(iE{b%(oNkj/3E[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "G \"-xDFpdn{'O5Y%~";
      // Undeclared exception!
      try { 
        Utility.signatureToString("G \"-xDFpdn{'O5Y%~", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G \"-xDFpdn{'O5Y%~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)115;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)78;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-3188), (int) (byte)115, false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("0:    fconst_1\n1:    lload_2\n2:    fstore_0\n3:    <illegal opcode>\n4:    saload\n5:    drem\n6:    lstore_1\n7:    astore_3\n", "0:    fconst_1\n1:    lload_2\n2:    fstore_0\n3:    <illegal opcode>\n4:    saload\n5:    drem\n6:    lstore_1\n7:    astore_3\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 0:    fconst_1
         // 1:    lload_2
         // 2:    fstore_0
         // 3:    <illegal opcode>
         // 4:    saload
         // 5:    drem
         // 6:    lstore_1
         // 7:    astore_3
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Utility.typeOfSignature("[3UD0T7");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "GA");
      // Undeclared exception!
      try { 
        Utility.getSignature("8`LA-B)[7iyLx7>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[7iyLx7>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-41);
      byteArray0[0] = (byte) (-41);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1185), (-1185));
      try { 
        Utility.typeOfSignature("0:    <illegal opcode>\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Or^");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-17);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-17), 2884);
      assertEquals("0:    wide\t(wide)\n1:    <illegal opcode>\n", string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) (byte) (-17);
      String string1 = Utility.printArray(objectArray0, false);
      assertEquals("null, null, -17", string1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = ";i!mT|B";
      try { 
        Utility.typeOfSignature(";i!mT|B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;i!mT|B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      try { 
        Utility.typeOfSignature("RuntimeInvisibleAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RuntimeInvisibleAnnotations
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Utility.clearBit(2078, 2078);
      try { 
        Utility.typeOfSignature("58m}48#CsXr>O99^jQ-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 58m}48#CsXr>O99^jQ-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.format(171, 171, true, ';');
      String string0 = "nsx%+C*vO*-6\"~#<]%";
      Utility.convertString("nsx%+C*vO*-6\"~#<]%");
      Utility.accessToString(171, true);
      String string1 = ":~1w:z9np!d2!";
      try { 
        Utility.methodSignatureArgumentTypes(":~1w:z9np!d2!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :~1w:z9np!d2!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Utility.methodSignatureReturnType("DZ0bS!E\"v7\"Kh-_:");
      File file0 = MockFile.createTempFile("lmul", "DZ0bS!E\"v7\"Kh-_:");
      try { 
        MockFile.createTempFile("double", (String) null, file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Expected class `");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Expected class `
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.signatureToString("JP?'jxoJaFnwSy|", true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JP?'jxoJaFnwSy|");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dataOutputStream0, true);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "JP?'jxoJaFnwSy|";
      objectArray0[1] = (Object) mockFileOutputStream0;
      objectArray0[2] = (Object) "JP?'jxoJaFnwSy|";
      objectArray0[3] = (Object) fileSystemHandling0;
      objectArray0[4] = (Object) "JP?'jxoJaFnwSy|";
      objectArray0[5] = (Object) dataOutputStream0;
      objectArray0[6] = (Object) objectOutputStream0;
      objectArray0[7] = (Object) objectOutputStream0;
      objectArray0[8] = (Object) "JP?'jxoJaFnwSy|";
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(9, objectArray0.length);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "long";
      stringArray0[1] = "long";
      stringArray0[2] = "JP?'jxoJaFnwSy|";
      stringArray0[3] = "long";
      stringArray0[4] = "long";
      stringArray0[5] = "long";
      stringArray0[6] = "JP?'jxoJaFnwSy|";
      String string0 = Utility.methodTypeToSignature("long", stringArray0);
      assertEquals("(JJLJP?'jxoJaFnwSy|;JJJLJP?'jxoJaFnwSy|;)J", string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = " is no interface";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " is no interface");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-1), 2221, true);
      try { 
        Utility.decode("0:    bipush\t\t-1\n", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      int int0 = (-1911613504);
      Utility.setBit((-1911613504), (-1911613504));
      String string0 = "Z";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Z");
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.printf("*2CBS9z;a5g[1'9W", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)31;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-14), 87);
      assertEquals("0:    <illegal opcode>\n1:    fastore\n2:    iand\n3:    <illegal opcode>\n4:    lload_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = "ddhh^CUWP$m~0n?$6N";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ddhh^CUWP$m~0n?$6N");
      try { 
        Utility.methodSignatureReturnType("Qu\"FZUd7\"N:{4>[@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Qu\"FZUd7\"N:{4>[@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "/_bYV[uFD9l,LI`G H";
      Utility.compactClassName("/_bYV[uFD9l,LI`G H", false);
      try { 
        Utility.typeOfSignature("._bYV[uFD9l,LI`G H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ._bYV[uFD9l,LI`G H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "AH=/V*vu}";
      try { 
        Utility.typeOfSignature("AH=/V*vu}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AH=/V*vu}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Utility.searchOpcode("Illegally nested brackets:");
      String string0 = "No\\\"<{I\"vQhk\" t/-yO";
      try { 
        Utility.methodSignatureReturnType("No\"<{I\"vQhk\" t/-yO", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `No\"<{I\"vQhk\" t/-yO'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{\"java.lang.Object@2ae08d90\", \"java.lang.Object@6ef0cca8\", \"java.lang.Object@12573ec4\", \"java.lang.Object@163373a4\", \"java.lang.Object@3891f0ff\", \"java.lang.Object@506ceec9\", \"java.lang.Object@7be65b1e\"}", "{\"java.lang.Object@2ae08d90\", \"java.lang.Object@6ef0cca8\", \"java.lang.Object@12573ec4\", \"java.lang.Object@163373a4\", \"java.lang.Object@3891f0ff\", \"java.lang.Object@506ceec9\", \"java.lang.Object@7be65b1e\"}", "putstatic", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {\"java.lang.Object@2ae08d90\", \"java.lang.Object@6ef0cca8\", \"java.lang.Object@12573ec4\", \"java.lang.Object@163373a4\", \"java.lang.Object@3891f0ff\", \"java.lang.Object@506ceec9\", \"java.lang.Object@7be65b1e\"}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")\t");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "[@@Cx)8";
      stringArray0[1] = "[@@Cx)8";
      stringArray0[2] = "[@@Cx)8";
      stringArray0[3] = "[@@Cx)8";
      stringArray0[4] = "[@@Cx)8";
      stringArray0[5] = "[@@Cx)8";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[@@Cx)8", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [@@Cx)8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)9;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte)3;
      byte byte0 = (byte)48;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)88;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (int) (byte)9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = Utility.format(33, 33, false, 'S');
      assertEquals("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS33", string0);
      
      String string1 = Utility.getSignature("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS33");
      String string2 = Utility.compactClassName("LSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS33;");
      assertTrue(string2.equals((Object)string1));
      
      Utility.signatureToString("SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS33");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.fillup("short", 33, false, '(');
      Utility.accessToString((-1538), false);
      int int0 = Utility.clearBit((-1495), 2800);
      assertEquals((-67031), int0);
      
      String string3 = Utility.accessToString(681, true);
      assertEquals("public static transient", string3);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      String string4 = Utility.encode(byteArray0, false);
      assertEquals("$o", string4);
      
      String string5 = Utility.compactClassName("LSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS33;", "saload", false);
      assertEquals("LSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS33;", string5);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int int0 = 1139;
      String string0 = Utility.format(1139, 1139, false, ' ');
      Utility.accessToString(1139);
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      Utility.methodTypeToSignature("ifnonnull", stringArray0);
      Utility.accessToString(245, false);
      try { 
        Utility.methodSignatureReturnType(stringArray0[1], false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "P>VO|bSx!T=j";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("P>VO|bSx!T=j", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P>VO|bSx!T=j'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("c:0Z~XG}qy5s)$iAr", false);
      Utility.equals(byteArray0, byteArray0);
      Utility.methodTypeToSignature("^", (String[]) null);
      Utility.accessToString(597, true);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      int int0 = 568;
      byte byte0 = (byte)77;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("c:0Z~XG}qy5s)$iAr", "'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"'\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Utility.searchOpcode("[]Gh");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "[]Gh";
      Object object0 = new Object();
      objectArray0[1] = object0;
      Utility.printArray(objectArray0, true);
      try { 
        Utility.methodSignatureReturnType("O4E:K1 l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O4E:K1 l'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString(1510);
      Utility.compactClassName("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfMethodSignature("(W_CF>'B%K%i+#M[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (W_CF>'B%K%i+#M[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)12;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-51), (int) (byte)12);
      assertEquals("0:    iand\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    fconst_1\n", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Utility.replace("The list of suffixes must not be null", "The list of suffixes must not be null", "The list of suffixes must not be null");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "The list of suffixes must not be null";
      objectArray0[1] = (Object) "The list of suffixes must not be null";
      objectArray0[2] = (Object) "The list of suffixes must not be null";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "The list of suffixes must not be null";
      objectArray0[5] = (Object) "The list of suffixes must not be null";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)19, (int) (byte)54, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = Utility.convertString("\u0007u+k/x&Dv7rPYDQ");
      assertEquals("\u0007u+k/x&Dv7rPYDQ", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ifnonnull";
      Utility.methodTypeToSignature("ifnonnull", stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-52);
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('=');
      Utility.methodSignatureArgumentTypes("(Lifnonnull;)Lifnonnull;");
      Utility.toHexString(byteArray0);
      Utility.accessToString(816, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "u:9h(P^*!)&{");
      Utility.compactClassName("O4E:K1 l");
      Utility.compactClassName("0E\"jZP,Y}Gr7'4z");
      Utility.compactClassName("ret");
      Utility.accessToString(166, true);
      Utility.accessToString(1383, false);
      Utility.isJavaIdentifierPart('/');
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "O4E:K1 l", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte)106;
      byteArray0[8] = (byte)121;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 123, (int) (byte)121);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.replace("QV}1|;&m7", "QV}1|;&m7", (String) null);
      assertEquals("null", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-9);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-4855), (int) (byte) (-9), false);
      assertEquals("0:    frem\n1:    <illegal opcode>\n2:    sastore\n3:    dload_1\n4:    <illegal opcode>\n", string1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Utility.clearBit(1219, 1219);
      String string0 = "[]";
      try { 
        Utility.methodSignatureReturnType("[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Utility.isSet((-1345), (-1345));
      String string0 = "java.lang.interface";
      try { 
        Utility.methodSignatureArgumentTypes("java.lang.interface", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = "getstatic";
      Utility.searchOpcode("getstatic");
      Utility.clearBit((short)178, 20);
      Utility.setBit((-1278), 11);
      String string1 = "LocalVariableTable";
      try { 
        Utility.methodSignatureReturnType("LocalVariableTable", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariableTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, true, true);
      Utility.accessToString((int) 'T');
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{\"java.lang.Object@12f12c61\", \"java.lang.Object@2a7af48\", \"java.lang.Object@1e0462cd\", \"java.lang.Object@4f77d193\", \"java.lang.Object@547e7e38\"}";
      stringArray0[1] = "x`I[gA%0.=[I";
      stringArray0[2] = "{\"java.lang.Object@12f12c61\", \"java.lang.Object@2a7af48\", \"java.lang.Object@1e0462cd\", \"java.lang.Object@4f77d193\", \"java.lang.Object@547e7e38\"}";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("protected final volatile", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[gA%0.=[I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Utility.getSignature("void");
      String string0 = "Illegal signature: ";
      Utility.methodSignatureReturnType("Illegal signature: ", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Illegal signature: ", "Illegal signature: ", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "'=v[O'}4Mb<&}";
      try { 
        Utility.typeOfSignature("'=v[O'}4Mb<&}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '=v[O'}4Mb<&}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Utility.methodSignatureReturnType("CONSTANT_Methodref");
      Utility.clearBit(109, 109);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)12;
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-124);
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -124
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-16);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = "ifle";
      Utility.replace("ifle", "ifle", "ifle");
      Utility.getSignature("ifle");
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("iaload", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iaload
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      try { 
        Utility.typeOfSignature("<yL!_R0e'd\"'js");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <yL!_R0e'd\"'js
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)15;
      byteArray0[8] = (byte) (-99);
      Constant[] constantArray0 = new Constant[1];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)70;
      byteArray1[1] = (byte)114;
      byteArray1[2] = (byte)95;
      byteArray1[3] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1404), (int) (byte)70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    return
         // 1:    fconst_0
         // 2:    frem
         // 3:    dconst_1
         // 4:    fstore_3
         // 5:    castore
         // 6:    swap
         // 7:    dconst_1
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.clearBit(92, 634);
      Utility.classOrInterface(16);
      Utility.isJavaIdentifierPart('s');
      Utility.clearBit(16, 126);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "d:ntCiu>9zx_$Lc");
      // Undeclared exception!
      try { 
        Utility.compactClassName("class", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = (-583812753);
      Utility.accessToString((-583812753));
      String string0 = "ZcklIaX1";
      Utility.signatureToString("ZcklIaX1");
      PrintStream printStream0 = null;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "fwn}uz";
      stringArray0[1] = "fwn}uz";
      String string0 = Utility.methodTypeToSignature("fwn}uz", stringArray0);
      assertEquals("(Lfwn}uz;Lfwn}uz;)Lfwn}uz;", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)126;
      byteArray0[7] = (byte)67;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("YI$af$8d$856$7eC", string1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-99);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4303, (-297));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Utility.compactClassName("(", "YVU[8^vp4=}H.fDoq%", false);
      try { 
        Utility.methodSignatureReturnType("YVU[8^vp4=}H.fDoq%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YVU[8^vp4=}H.fDoq%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      char char0 = 'H';
      Utility.isJavaIdentifierPart('H');
      String string0 = "\t\t#";
      try { 
        Utility.typeOfSignature("\t\t#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.clearBit((-1), (-1));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 120
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("E1|dL", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E1|dL'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      int int0 = 1871;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.accessToString(1871, true);
      Utility.printArray((Object[]) null, true, true);
      try { 
        Utility.decode("public private protected static volatile native abstract", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = "if_icmpgt";
      boolean boolean0 = true;
      Utility.compactClassName("if_icmpgt", true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "if_icmpgt";
      stringArray0[1] = "if_icmpgt";
      Utility.methodTypeToSignature("if_icmpgt", stringArray0);
      String string1 = "";
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("", true);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Utility.isJavaIdentifierPart('o');
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("{java.lang.Object@390e41e7, java.lang.Object@3d1cd789, java.lang.Object@2f117f19, java.lang.Object@1ca9587a, java.lang.Object@57633371, java.lang.Object@c18068b, java.lang.Object@285549a6}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append('{');
      Utility.printArray(printWriter0, objectArray0);
      boolean boolean0 = Utility.isJavaIdentifierPart('U');
      assertTrue(boolean0);
      
      String string0 = Utility.accessToString(85);
      assertEquals("public protected final volatile", string0);
      
      String string1 = Utility.replace("org.apache.bcel.util.ClassPathRepository", "Et}\"D", "public protected final volatile");
      assertEquals("org.apache.bcel.util.ClassPathRepository", string1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "Mrk4'G";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Mrk4'G", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mrk4'G'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int int0 = 13;
      boolean boolean0 = true;
      Utility.accessToString(13, true);
      Utility.compactClassName(">Kpd/X(qz<s@($(=[", true);
      Utility.setBit(13, 13);
      // Undeclared exception!
      try { 
        Utility.getSignature(">Kpd.X(qz<s@($(=[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      int int0 = 13;
      Utility.accessToString(13);
      try { 
        Utility.typeOfMethodSignature("public protected static");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public protected static
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, true, false);
      int int0 = 97;
      Utility.format(97, 97, true, 'T');
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{java.lang.Object@64bec736, java.lang.Object@155701a7, java.lang.Object@4980da4a, java.lang.Object@70b9390e, java.lang.Object@622cd758}";
      stringArray0[1] = "x`I[gA%0.=[I";
      stringArray0[2] = "{java.lang.Object@64bec736, java.lang.Object@155701a7, java.lang.Object@4980da4a, java.lang.Object@70b9390e, java.lang.Object@622cd758}";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("97TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[gA%0.=[I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString(14, true);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)102;
      byteArray0[0] = (byte)102;
      byte byte1 = (byte)35;
      byteArray0[1] = (byte)35;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0);
      Utility.compactClassName("{java.lang.Object@16d6dd14, java.lang.Object@6f4fc974, java.lang.Object@7ac379b6, java.lang.Object@209932bf, java.lang.Object@8775c5, java.lang.Object@111218c8, java.lang.Object@707dcd95, java.lang.Object@199815ef}");
      int int0 = (-507);
      Utility.classOrInterface((-507));
      char char0 = 'M';
      Utility.isJavaIdentifierPart('M');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\"nAt#Qu2=`YyM} ", "{java.lang.Object@16d6dd14, java.lang.Object@6f4fc974, java.lang.Object@7ac379b6, java.lang.Object@209932bf, java.lang.Object@8775c5, java.lang.Object@111218c8, java.lang.Object@707dcd95, java.lang.Object@199815ef}", "interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"nAt#Qu2=`YyM} 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = Utility.fillup("O", 2298, false, 'v');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = "";
      String string1 = "C}PcR";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "C}PcR", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = Utility.decode("java.lang.Object@aedb4ea, java.lang.Object@6a31176a, java.lang.Object@1491ffec", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(0, 0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("fmul", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = " arg";
      try { 
        Utility.methodSignatureReturnType(" arg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` arg'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = "org.apache.bcel.Const";
      // Undeclared exception!
      Utility.replace("org.apache.bcel.Const", "", "org.apache.bcel.Const");
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)0;
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      Utility.toHexString(byteArray0);
      Utility.isSet((byte)46, (byte)0);
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A");
      String string0 = null;
      String string1 = "*y9lBNU";
      int int0 = 0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 0
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Utility.accessToString(2112, false);
      Utility.convertString("if_acmpeq");
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)21;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("00 00 13 15", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Utility.compactClassName("D>/[FpTH./D\"3!L:>", false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString(334);
      Utility.methodTypeToSignature("private protected static volatile native", (String[]) null);
      Utility.methodSignatureToString("()Lprivate;", "private protected static volatile native", "dreturn");
      Utility.convertString(" /nSKq");
      Utility.isSet(334, (byte)47);
      boolean boolean0 = false;
      Utility.format(334, (byte)47, false, '\"');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(122, 122);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.setConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureArgumentTypes("dreturn private private protected static volatile native()");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dreturn private private protected static volatile native()
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = Utility.compactClassName("if_acmpne", false);
      assertEquals("if_acmpne", string0);
      
      String string1 = Utility.methodSignatureReturnType("Invalid signature: `");
      assertEquals("int", string1);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(60);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Object[] objectArray0 = new Object[1];
      mockPrintStream0.append('e');
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.JAPANESE;
      locale0.getDisplayName(locale1);
      mockPrintStream0.close();
      mockPrintStream0.format(locale0, "if_acmpne", objectArray0);
      byteArrayOutputStream0.write(40);
      byteArrayOutputStream0.reset();
      objectArray0[0] = (Object) byteArrayOutputStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      boolean boolean0 = Utility.isSet(39, 122);
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "LVjy4L>GZcfMsm";
      try { 
        Utility.methodSignatureArgumentTypes("LVjy4L>GZcfMsm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LVjy4L>GZcfMsm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "zO~>(5");
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-6);
      ConstantPool constantPool0 = null;
      int int0 = 65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 65, 651);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = Utility.compactClassName("ifle", "ifle", true);
      assertEquals("", string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "ifle";
      objectArray0[1] = (Object) "ifle";
      String string1 = Utility.printArray(objectArray0, false);
      assertNotNull(string1);
      assertEquals("ifle, ifle", string1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte) (-89);
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("40 4c 81 3f a8 3a 1d a7", string2);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-13);
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte) (-110);
      byteArray0[8] = (byte)17;
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-110), (-3240));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 66, 67, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Utility.searchOpcode("w>H`M?");
      byte[] byteArray0 = Utility.decode("Signature: ", false);
      Utility.compactClassName("w>H`M?");
      Utility.replace("Signature: ", "w>H`M?", "E)");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      int int0 = 1868;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1868, 1868);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("invokedynamic");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-116);
      byte byte0 = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      byte byte1 = (byte)32;
      byteArray0[2] = (byte)32;
      Utility.toHexString(byteArray0);
      boolean boolean0 = true;
      Utility.format((byte) (-116), (-799), true, 'v');
      String string0 = null;
      String string1 = null;
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("8c ad 20", (String) null, (String) null, false, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
