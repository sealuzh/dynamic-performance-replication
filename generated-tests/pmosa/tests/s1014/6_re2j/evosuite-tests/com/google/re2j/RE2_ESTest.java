/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 05:03:58 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("BtGA.@V~y-IK", 2371, true);
      rE2_0.find("~EX&6*SEKU");
      rE2_0.numberOfCapturingGroups();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      List<String> list0 = rE2_0.findAll("G", 0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("2Dw:eR");
      // Undeclared exception!
      try { 
        rE2_0.findUTF8Index((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = new RE2("ms(=-M3`)Wsp");
      byte[] byteArray0 = new byte[0];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (-1300));
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      rE2_0.get();
      rE2_0.match("");
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RE2 rE2_0 = RE2.compilePOSIX("");
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = RE2.quoteMeta("Q");
      assertEquals("Q", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      RE2.quoteMeta("");
      String[] stringArray0 = rE2_0.findSubmatch("");
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[1];
      rE2_0.findUTF8Submatch(byteArray0);
      rE2_0.numberOfCapturingGroups();
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = RE2.compile(": `");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)118;
      rE2_0.findAllUTF8(byteArray0, (-929));
      RE2.quoteMeta(": `");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-95);
      byteArray1[1] = (byte) (-9);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-11);
      byteArray1[4] = (byte)16;
      rE2_0.prefixRune = (int) (byte) (-95);
      byteArray1[5] = (byte)44;
      byteArray1[6] = (byte)80;
      rE2_0.matchUTF8(byteArray1);
      rE2_0.match(": `");
      rE2_0.matchUTF8(byteArray1);
      RE2 rE2_1 = RE2.compileImpl(": `", 0, true);
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte) (-9);
      byteArray2[1] = (byte) (-9);
      byteArray2[2] = (byte)44;
      rE2_0.findUTF8SubmatchIndex(byteArray2);
      List<int[]> list0 = rE2_1.findAllUTF8SubmatchIndex(byteArray1, 45);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = new RE2("Kp%PzQHrt");
      int[] intArray0 = rE2_0.findSubmatchIndex(";m5QPhdh~");
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = new RE2(" @_E\"'-~UTMs");
      String string0 = rE2_0.replaceFirst(" @_E\"'-~UTMs", " @_E\"'-~UTMs");
      assertEquals(" @_E\"'-~UTMs", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = new RE2("l");
      byte[] byteArray0 = new byte[22];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 1461);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)127;
      rE2_0.prefix = "";
      rE2_0.findAllUTF8Submatch(byteArray0, (byte)127);
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      rE2_0.findUTF8Submatch(byteArray0);
      RE2 rE2_1 = RE2.compilePOSIX("K?");
      rE2_0.find("K?");
      RE2.match("", "");
      rE2_1.toString();
      rE2_1.replaceAll("K?", ":JU,A1McnLWj");
      RE2 rE2_2 = RE2.compileImpl("", 1190, true);
      rE2_0.replaceFirst("com.google.re2j.RE2", "K?");
      RE2 rE2_3 = RE2.compileImpl("`-", 1190, true);
      rE2_2.replaceFirst("E~j]t?S/R/dwQ'", "|");
      rE2_3.findUTF8Submatch(byteArray0);
      rE2_2.match("K?");
      rE2_3.findAllSubmatch("NqeJLe&Obb;5juI", (byte)127);
      rE2_3.findAllUTF8SubmatchIndex(byteArray0, (-745));
      int[] intArray0 = rE2_3.findUTF8Index(byteArray0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      List<int[]> list0 = rE2_0.findAllIndex("", (byte) (-126));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-17);
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte) (-17));
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-126);
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)123;
      RE2 rE2_0 = RE2.compile("[:^alnum:]");
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      List<String[]> list0 = rE2_0.findAllSubmatch("", (-1));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 743;
      RE2 rE2_0 = RE2.compileImpl("2l!j", 743, true);
      rE2_0.findSubmatch("2l!j");
      RE2.match("2l!j", "2l!j");
      rE2_0.replaceAll("2l!j", "2l!j");
      // Undeclared exception!
      try { 
        rE2_0.find((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      RE2 rE2_0 = RE2.compileImpl("", 0, false);
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = RE2.compile(" I#TiJdT:H");
      rE2_0.get();
      rE2_0.replaceFirst("w[$v", "w[$v");
      rE2_0.replaceAll(" I#TiJdT:H", " I#TiJdT:H");
      rE2_0.find(" I#TiJdT:H");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 128);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "UTF-8";
      RE2 rE2_0 = new RE2("UTF-8");
      rE2_0.find("UTF-8");
      RE2.match("UTF-8", "UTF-8");
      String string1 = "";
      rE2_0.findSubmatch("");
      rE2_0.find("");
      RE2.match("UTF-8", "");
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 3683;
      intArray0[3] = 0;
      intArray0[4] = 0;
      rE2_0.replaceAll("F9o<x$0Y^b)RS&x", "UTF-8");
      intArray0[5] = 0;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        rE2_0.match("UTF-8", 0, 0, 0, intArray0, (-2927));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 91, true);
      rE2_0.findAllIndex("", 5);
      List<String[]> list0 = rE2_0.findAllSubmatch("[^x00-x{10FFFF}]", (-1966));
      assertEquals(17, list0.size());
      assertNotNull(list0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      rE2_0.matchUTF8(byteArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-2);
      intArray0[1] = (int) (byte) (-2);
      intArray0[2] = (int) (byte) (-2);
      intArray0[3] = 91;
      List<int[]> list1 = rE2_0.findAllIndex("9=yn]1- dCpB", (byte) (-2));
      assertEquals(13, list1.size());
      assertNotNull(list1);
      
      intArray0[4] = (int) (byte) (-2);
      intArray0[5] = 0;
      rE2_0.match("", 91, 0, 0, intArray0, 757);
      int[] intArray1 = rE2_0.findIndex("com.google.re2j.RE2");
      assertArrayEquals(new int[] {0, 0}, intArray1);
      
      List<int[]> list2 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (-994));
      assertEquals(1, list2.size());
      assertNotNull(list2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = new RE2("17_'S");
      rE2_0.findIndex("17_'S");
      // Undeclared exception!
      try { 
        rE2_0.findUTF8Index((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte) (-72);
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (byte)4);
      assertEquals(4, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("?#\"R4ZX;{Yek23XM", 19, true);
      rE2_0.replaceAll("?#\"R4ZX;{Yek23XM", "?#\"R4ZX;{Yek23XM");
      rE2_0.findAllSubmatch("?#\"R4ZX;{Yek23XM", 19);
      rE2_0.replaceAllFunc("WORD_BOUNDARY", (RE2.ReplaceFunc) null, (-452));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)49;
      rE2_0.findUTF8Index(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte) (-67);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-72);
      byteArray1[4] = (byte)8;
      byteArray1[5] = (byte)2;
      byteArray1[6] = (byte)0;
      byte[][] byteArray2 = rE2_0.findUTF8Submatch(byteArray1);
      assertNull(byteArray2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      RE2 rE2_1 = RE2.compile("");
      RE2.match("^B", "");
      rE2_0.reset();
      rE2_0.findAll("", (-1498));
      rE2_0.numberOfCapturingGroups();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 11;
      intArray0[2] = 11;
      intArray0[3] = 1871;
      intArray0[4] = 0;
      intArray0[5] = (-1498);
      intArray0[6] = (-1498);
      intArray0[7] = (-20);
      intArray0[8] = 0;
      // Undeclared exception!
      try { 
        rE2_1.match("^B", (-20), 11, (-1498), intArray0, 11);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)0;
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      int[] intArray0 = new int[4];
      boolean boolean0 = rE2_0.match("", (-2061), (-2061), (-2061), intArray0, 2568);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      RE2 rE2_1 = RE2.compile("");
      RE2.match("^B", "");
      List<String> list0 = rE2_0.findAll("", (-1498));
      assertNotNull(list0);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[0];
      List<byte[]> list1 = rE2_1.findAllUTF8(byteArray0, 611);
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte) (-86);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)10;
      String string0 = "F9o<x$0Y^b)RS&x";
      String string1 = "can't happen";
      rE2_0.replaceAll("can't happen", "F9o<x$0Y^b)RS&x");
      rE2_0.match("can't happen", (byte)10, (byte)0, (-666), (int[]) null, 2958);
      rE2_0.findUTF8Submatch(byteArray0);
      try { 
        RE2.match("F9o<x$0Y^b)RS&xcF9o<x$0Y^b)RS&xaF9o<x$0Y^b)RS&xnF9o<x$0Y^b)RS&x'F9o<x$0Y^b)RS&xtF9o<x$0Y^b)RS&x F9o<x$0Y^b)RS&xhF9o<x$0Y^b)RS&xaF9o<x$0Y^b)RS&xpF9o<x$0Y^b)RS&xpF9o<x$0Y^b)RS&xeF9o<x$0Y^b)RS&xnF9o<x$0Y^b)RS&x", "can't happen");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: regexp/syntax: internal error: `stack underflow`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)112;
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)112;
      byteArray0[7] = (byte)112;
      byteArray0[8] = (byte)0;
      rE2_0.findUTF8(byteArray0);
      rE2_0.find("o)[I *Yf/5 Fg56O{3");
      RE2 rE2_1 = RE2.compilePOSIX("");
      rE2_1.findAllSubmatch("", (-1027));
      Machine machine0 = rE2_0.get();
      rE2_1.put(machine0);
      assertFalse(rE2_0.equals((Object)rE2_1));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RE2 rE2_0 = new RE2("Kp%PzQHrt");
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("Kp%PzQHrt", 3450);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      int int0 = 0;
      rE2_0.prefixRune = 0;
      rE2_0.replaceFirst("", "");
      rE2_0.match("");
      int[] intArray0 = rE2_0.findIndex("");
      RE2 rE2_1 = RE2.compilePOSIX("");
      // Undeclared exception!
      try { 
        rE2_1.match("", 0, 0, 0, intArray0, 218);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = rE2_0.match("", 0, 0, (-1705), intArray0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      rE2_0.replaceFirst("", "com.google.re2j.RE2");
      RE2 rE2_1 = RE2.compilePOSIX("");
      RE2 rE2_2 = RE2.compileImpl("", 0, false);
      rE2_2.match("");
      rE2_1.findSubmatch("");
      rE2_2.findIndex("RUNE_ANY");
      RE2 rE2_3 = RE2.compilePOSIX("");
      RE2.compilePOSIX("CONCAT");
      rE2_3.match("CONCAT", 0, 128, 128, (int[]) null, 9);
      rE2_0.findAllSubmatch("", 14);
      RE2 rE2_4 = RE2.compile("");
      rE2_2.numberOfCapturingGroups();
      // Undeclared exception!
      try { 
        rE2_4.match("", 0, 0, 0, (int[]) null, (-800));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.findSubmatchIndex("wNN>S\"G");
      rE2_0.findIndex("wNN>S\"G");
      RE2 rE2_1 = RE2.compile("B");
      rE2_0.findAllSubmatch("", (-6009));
      rE2_1.findAllSubmatchIndex("wNN>S\"G", (-6009));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)12;
      int[] intArray0 = rE2_1.findUTF8SubmatchIndex(byteArray0);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RE2 rE2_0 = new RE2("f?");
      String string0 = rE2_0.replaceAll("f?", "f?");
      assertEquals("f??f?", string0);
  }
}
