/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 02:31:17 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.Date;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLWarning;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.RuleBasedCollator;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.JapaneseDate;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.SortedMap;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockIllegalAccessException;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TypeUtils.clearClassMapping();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      Class<TimeDeserializer> class0 = TimeDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) imageCapabilities0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.TimeDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) illegalThreadStateException0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      TypeUtils.loadClass("m");
      decimalFormat0.setGroupingSize((-1987));
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(decimalFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.text.DecimalFormat@674dc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Float float0 = new Float(0.0F);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      mockMinguoDate0.getMockedClassName();
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("oracle.sql.TIMESTAMP", stringIndexOutOfBoundsException0);
      InternalError internalError0 = new InternalError("java.time.chrono.MinguoDate", sQLTransientConnectionException0);
      Consumer<Throwable> consumer0 = (Consumer<Throwable>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLTransientConnectionException0.forEach(consumer0);
      TypeUtils.castToString(internalError0);
      TypeUtils.toLocale("java.lang.InternalError@0000000001");
      TypeUtils.loadClass("java.time.chrono.MinguoDate");
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      Class<?> class0 = TypeUtils.loadClass(">ql", (ClassLoader) aSMClassLoader0);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TypeUtils.loadClass((String) null);
      // Undeclared exception!
      try { 
        TypeUtils.getRawClass((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Class<DecimalFormat> class0 = DecimalFormat.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.computeGettersWithFieldBase(class0, map0, false, propertyNamingStrategy0);
      Class<Point> class1 = Point.class;
      TypeUtils.getSerializeFeatures(class1);
      Class<BigInteger> class2 = BigInteger.class;
      TypeUtils.getSerializeFeatures(class2);
      TypeUtils.decapitalize("java/lang/Boolean");
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class2;
      Class<Byte> class3 = Byte.TYPE;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class3, class1);
      ParserConfig parserConfig0 = new ParserConfig(true);
      parserConfig0.setAsmEnable(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) map0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not support awt class : com.alibaba.fastjson.util.ParameterizedTypeImpl@6f416f20
         //
         verifyException("com.alibaba.fastjson.serializer.AwtCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils typeUtils0 = new TypeUtils();
      Class<MockThaiBuddhistDate> class1 = MockThaiBuddhistDate.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashtable0, true);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<Boolean> class0 = Boolean.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("");
      assertEquals((-3750763034362895579L), long0);
      
      Class<MockDateFormat> class0 = MockDateFormat.class;
      boolean boolean0 = TypeUtils.isProxy(class0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      Class<?> class1 = TypeUtils.loadClass("oracle.sql.DATE");
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<Annotation> class1 = Annotation.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) linkedHashMap0, true);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(stringIndexOutOfBoundsException0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      TypeUtils.isKotlin(class0);
      Class<ImageCapabilities> class1 = ImageCapabilities.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      identityHashMap0.computeIfPresent("()I", biFunction0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : class org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TypeUtils.decapitalize("LaH\"K");
      Class<String> class0 = String.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, linkedHashMap0, false, propertyNamingStrategy0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("cLYPz\"Cm}");
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) negativeArraySizeException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"@type\":\"java.lang.NegativeArraySizeException\",\"localizedMessage\":\"cLY\\u007FPz\\\"Cm}\",\"message\":\"cLY\\u007FPz\\\"Cm}\",\"stackTrace\":[{\"className\":\"sun.reflect.GeneratedConstructorAccessor83\",\"lineNumber\":-1,\"methodName\":\"newInstance\",\"nativeMethod\":false},{\"className\":\"sun.reflect.DelegatingConstructorAccessorImpl\",\"fileName\":\"DelegatingConstructorAccessorImpl.java\",\"lineNumber\":45,\"methodName\":\"newInstance\",\"nativeMethod\":false},{\"className\":\"java.lang.reflect.Constructor\",\"fileName\":\"Constructor.java\",\"lineNumber\":423,\"methodName\":\"newInstance\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.statements.ConstructorStatement$1\",\"fileName\":\"ConstructorStatement.java\",\"lineNumber\":233,\"methodName\":\"execute\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.statements.AbstractStatement\",\"fileName\":\"AbstractStatement.java\",\"lineNumber\":169,\"methodName\":\"exceptionHandler\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.statements.ConstructorStatement\",\"fileName\":\"ConstructorStatement.java\",\"lineNumber\":188,\"methodName\":\"execute\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.execution.TestRunnable\",\"fileName\":\"TestRunnable.java\",\"lineNumber\":307,\"methodName\":\"executeStatements\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.execution.TestRunnable\",\"fileName\":\"TestRunnable.java\",\"lineNumber\":213,\"methodName\":\"call\",\"nativeMethod\":false},{\"className\":\"org.evosuite.testcase.execution.TestRunnable\",\"fileName\":\"TestRunnable.java\",\"lineNumber\":55,\"methodName\":\"call\",\"nativeMethod\":false},{\"className\":\"java.util.concurrent.FutureTask\",\"fileName\":\"FutureTask.java\",\"lineNumber\":266,\"methodName\":\"run\",\"nativeMethod\":false},{\"className\":\"java.util.concurrent.ThreadPoolExecutor\",\"fileName\":\"ThreadPoolExecutor.java\",\"lineNumber\":1142,\"methodName\":\"runWorker\",\"nativeMethod\":false},{\"className\":\"java.util.concurrent.ThreadPoolExecutor$Worker\",\"fileName\":\"ThreadPoolExecutor.java\",\"lineNumber\":617,\"methodName\":\"run\",\"nativeMethod\":false},{\"className\":\"java.lang.Thread\",\"fileName\":\"Thread.java\",\"lineNumber\":745,\"methodName\":\"run\",\"nativeMethod\":false}]}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      Class<Point> class1 = Point.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.toLocale("org.springframework.util.LinkedMultiValueMap");
      TypeUtils.isNumber("$");
      String string0 = TypeUtils.decapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Class<NoSuchMethodError> class0 = NoSuchMethodError.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      JSONField jSONField0 = TypeUtils.getSuperMethodAnnotation(class0, (Method) null);
      assertNull(jSONField0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Hashtable<IllegalAccessError, JavaBeanDeserializer> hashtable0 = new Hashtable<IllegalAccessError, JavaBeanDeserializer>();
      IllegalAccessError illegalAccessError0 = new IllegalAccessError();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<String> class0 = String.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, propertyNamingStrategy0);
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, javaBeanInfo0);
      hashtable0.put(illegalAccessError0, javaBeanDeserializer0);
      Class<EnumDeserializer> class1 = EnumDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) hashtable0, class1, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.EnumDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Object> class0 = Object.class;
      TypeUtils.getParserFeatures(class0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashtable0.forEach(biConsumer0);
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, false);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Properties properties0 = new Properties();
      TypeUtils.toLocale("unsupported array put operation. ");
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TypeUtils.isAnnotationPresentOneToMany((Method) null);
      Date date0 = TypeUtils.castToSqlDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TypeUtils.castToSqlTime("");
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      TypeUtils.getSerializeFeatures(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      TypeUtils.isNumber(",");
      Class<NumberDeserializer> class1 = NumberDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation(class1, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      TypeUtils.isHibernateInitialized(mockJapaneseDate0);
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class byte
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, weakHashMap0);
      weakHashMap0.put("o", "o");
      weakHashMap0.put((String) null, (String) null);
      Class<?> class1 = javaBeanSerializer0.getType();
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Collator> class0 = Collator.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      String string0 = TypeUtils.decapitalize("NItz");
      assertEquals("NItz", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TypeUtils.castToByte((Object) null);
      Byte.toUnsignedInt((byte)7);
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      classLoader0.setPackageAssertionStatus("Ljava.util.concurrent.ConcurrentSkipListMap", true);
      ClassLoader classLoader1 = classLoader0.getParent();
      classLoader1.setPackageAssertionStatus("\"f|w=|w>C..*T", true);
      TypeUtils.loadClass("Ljava.util.concurrent.ConcurrentSkipListMap", classLoader1, true);
      TypeUtils.castToByte((Object) null);
      Class<SQLDataException> class0 = SQLDataException.class;
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) classLoader0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLDataException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Class<Float> class0 = Float.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.put("Ljava.awt.Rectangle", "Ljava.awt.Rectangle");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      linkedHashMap0.entrySet();
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0);
      linkedHashMap0.put("boi/6lFm", "boi/6lFm");
      Class<Short> class1 = Short.class;
      boolean boolean0 = true;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) linkedHashMap0, true);
      Class<NoSuchMethodError> class2 = NoSuchMethodError.class;
      linkedHashMap0.replace("}CjI6 kWLU:", "NE");
      TypeUtils.isPath(class2);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("Ljava.awt.Rectangle");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Long> class0 = Long.TYPE;
      TypeUtils.getCollectionItemType(class0);
      Class<PropertyNamingStrategy> class1 = PropertyNamingStrategy.class;
      Map<String, String> map0 = new ConcurrentHashMap<String, String>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>(map0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) hashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ClassLoader.getSystemClassLoader();
      DecimalFormat decimalFormat0 = new DecimalFormat(".I_3u~oZ");
      decimalFormat0.setGroupingSize((-721));
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(".I_3u~oZ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ClassLoader.getSystemClassLoader();
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      TypeUtils.isKotlin(class0);
      Double double0 = new Double((-174.0));
      Long long0 = TypeUtils.castToLong(double0);
      assertEquals((-174L), (long)long0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TypeUtils.getClassFromMapping("O}))AW=|A`*g");
      TypeUtils.cast((Object) null, (Type) null, (ParserConfig) null);
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      TreeMap<String, String> treeMap1 = new TreeMap<String, String>((SortedMap<String, ? extends String>) treeMap0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        TypeUtils.buildBeanInfo((Class<?>) null, (Map<String, String>) treeMap1, propertyNamingStrategy0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      TypeUtils.getClassFromMapping("J");
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) timeUnit0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      String string0 = "r*BWoij0a1";
      linkedHashMap0.put("java.util.Optional", "java.util.Optional");
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      linkedHashMap0.computeIfAbsent("r*BWoij0a1", function0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : class org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "g:B";
      TypeUtils.loadClass("g:B");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      // Undeclared exception!
      try { 
        JavaBeanInfo.getDefaultConstructor((Class<?>) null, (Constructor<?>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Reflection", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      Class<?> class0 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : class java.lang.String
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils.isGenericParamType(type0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      TypeUtils.isPath(class0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Locale locale0 = TypeUtils.toLocale("getgetCause");
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "BUKphkv";
      TypeUtils.isNumber("BUKphkv");
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("BUKphkv");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : m
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TypeUtils.getCollectionItemClass((Type) null);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException((String) null, (String) null);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("Ljava.util.concurrent.ConcurrentSkipListMap", (int[]) null, sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(batchUpdateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.sql.BatchUpdateException: Ljava.util.concurrent.ConcurrentSkipListMap
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Q1TiR(BH6C8R", "Lorg.springframework.util.LinkedMultiValueMap", 1611, (Map<String, ClientInfoStatus>) null);
      DataTruncation dataTruncation0 = new DataTruncation(1611, true, false, 1611, 1611, sQLClientInfoException0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) dataTruncation0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getRawClass(parameterizedTypeImpl0);
      Class<JavaObjectDeserializer> class1 = JavaObjectDeserializer.class;
      TypeUtils.isPath(class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but string, pos 16, json : \"java.util.List\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      Random.setNextRandom(853);
      LinkedHashMap<String, Object> linkedHashMap0 = new LinkedHashMap<String, Object>();
      Class<SQLInvalidAuthorizationSpecException> class0 = SQLInvalidAuthorizationSpecException.class;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = TypeUtils.castToJavaBean((Map<String, Object>) linkedHashMap0, class0, parserConfig0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TypeUtils.fnv1a_64("dd/MM/yyyy");
      MockIllegalAccessException mockIllegalAccessException0 = new MockIllegalAccessException("dd/MM/yyyy");
      Type[] typeArray0 = new Type[0];
      mockIllegalAccessException0.getCause();
      Class<Double> class0 = Double.TYPE;
      MockFile mockFile0 = new MockFile("dd/MM/yyyy");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      PrintStream printStream0 = mockPrintStream0.printf("dd/MM/yyyy", (Object[]) typeArray0);
      mockIllegalAccessException0.printStackTrace(printStream0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class0, class0);
      parameterizedTypeImpl0.getTypeName();
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockIllegalAccessException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // autoType is not support. org.evosuite.runtime.mock.java.lang.MockIllegalAccessException
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Class<Insets> class0 = Insets.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      Class<?> class0 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      Field[] fieldArray0 = new Field[0];
      TypeUtils.getField(class0, "java.lang.Object@0000000001", fieldArray0);
      assertEquals("class java.lang.String", class0.toString());
      assertEquals(17, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("");
      assertEquals((-3750763034362895579L), long0);
      
      MockJapaneseDate.now();
      TypeUtils.castToSqlTime("");
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Class<NullPointerException> class0 = NullPointerException.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "s", fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<MockDateFormat> class0 = MockDateFormat.class;
      int int0 = TypeUtils.getParserFeatures(class0);
      assertEquals(0, int0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(class0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      TypeUtils.loadClass("m");
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(numberFormat0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.isHibernateInitialized(parameterizedTypeImpl0);
      Class<Integer> class0 = Integer.TYPE;
      Collection collection0 = new ArrayDeque<StackTraceElementDeserializer>();
      Class<SQLInvalidAuthorizationSpecException> class1 = SQLInvalidAuthorizationSpecException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      TypeUtils typeUtils0 = new TypeUtils();
      TypeUtils.getCollectionItemType(type0);
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.isProxy(class0);
      JSON.DEFFAULT_DATE_FORMAT = "i%Gbd#+QR3xE;>";
      Class<Time> class1 = Time.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(type0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.castToFloat((Object) null);
      Class class0 = (Class)TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      assertEquals(17, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      Double.isFinite(588.31295306);
      Double.min(588.31295306, 0.0);
      Double.max((-1.0), (-1.0));
      TypeUtils.isHibernateInitialized(double0);
      TypeUtils.loadClass("nextToken");
      StackTraceElement stackTraceElement0 = new StackTraceElement("java/io/IOException", "", "", 8);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(stackTraceElement0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java/io/IOException.(:8)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Class<RuleBasedCollator> class0 = RuleBasedCollator.class;
      TypeUtils.isKotlin(class0);
      TypeUtils.isNumber("");
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.awt.Font");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "?CqrDO$I721E>M");
      MockThread mockThread0 = new MockThread("OrderedField");
      threadGroup1.setMaxPriority((-1388));
      MockThread mockThread1 = new MockThread(threadGroup1, mockThread0, "Ljava.util.concurrent.ConcurrentSkipListSet");
      mockThread0.getStackTrace();
      ThreadGroup[] threadGroupArray0 = new ThreadGroup[8];
      threadGroupArray0[0] = threadGroup1;
      threadGroupArray0[1] = threadGroup1;
      threadGroupArray0[2] = threadGroup1;
      threadGroupArray0[3] = threadGroup1;
      ThreadGroup threadGroup2 = new ThreadGroup("Ljava.awt.Point");
      threadGroupArray0[4] = threadGroup2;
      threadGroupArray0[5] = threadGroup1;
      ThreadGroup threadGroup3 = new ThreadGroup(threadGroup1, "OrderedField");
      threadGroupArray0[6] = threadGroup3;
      threadGroupArray0[7] = threadGroup1;
      threadGroup0.enumerate(threadGroupArray0, true);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      MockThread.getAllStackTraces();
      TypeUtils.loadClass("", classLoader1, false);
      TypeUtils typeUtils0 = new TypeUtils();
      Class<MockHijrahDate> class1 = MockHijrahDate.class;
      Class<Annotation> class2 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class1, class2);
      assertNull(annotation0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("");
      assertEquals((-3750763034362895579L), long0);
      
      TypeUtils.castToSqlDate("");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.isPath(class0);
      TypeUtils.castToByte((Object) null);
      Integer integer0 = new Integer(46);
      Boolean boolean0 = TypeUtils.castToBoolean(integer0);
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.max(0.0F, Float.NaN);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : 0.0
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NumberFormat.getCurrencyInstance();
      TypeUtils.getClassFromMapping("getSuppressed");
      Type type0 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      Class<SQLException> class0 = SQLException.class;
      TypeUtils.isProxy(class0);
      JSON.DEFFAULT_DATE_FORMAT = "i%Gbd#+QR3xE;>";
      Class<Time> class1 = Time.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i%Gbd#+QR3xE;>");
      TypeUtils.getGenericParamType(class1);
      Point point0 = new Point(1839, 1839);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(point0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.awt.Point[x=1839,y=1839]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Long long0 = new Long(2868L);
      String string0 = "X;$Y<Ly%YW$&U h/]";
      Long.getLong("X;$Y<Ly%YW$&U h/]", 2868L);
      TypeUtils.castToSqlDate(long0);
      SecurityException securityException0 = new SecurityException();
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(securityException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.lang.SecurityException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("o");
      assertEquals((-5808550276084140354L), long0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      identityHashMap0.put("`!cM0ciPlt|MuAJR", "o");
      Class<Locale> class0 = Locale.class;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) identityHashMap0, propertyNamingStrategy0, true);
      TypeUtils.isNumber("'A2\"4kERFC3*");
      String string0 = TypeUtils.decapitalize("fastjson.compatibleWithJavaBean");
      assertEquals("fastjson.compatibleWithJavaBean", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Class<Point> class0 = Point.class;
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      linkedHashMap0.getOrDefault(class1, "org.springframework.remoting.support.RemoteInvocationResult");
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) linkedHashMap0);
      TypeUtils.isProxy(class1);
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<?> class0 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertEquals(17, class0.getModifiers());
      
      long long0 = TypeUtils.fnv1a_64_lower("IX");
      assertEquals(628052070009432660L, long0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(33);
      jSONArray0.getComponentType();
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      BigInteger bigInteger0 = null;
      try {
        bigInteger0 = new BigInteger((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TypeUtils.castToTimestamp((Object) null);
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("Q1TiR(BH6C8R", "Lorg.springframework.util.LinkedMultiValueMap", 1611, (Map<String, ClientInfoStatus>) null);
      DataTruncation dataTruncation0 = new DataTruncation(1611, true, false, 1611, 1611, sQLClientInfoException0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      Class<Properties> class0 = Properties.class;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, (PropertyNamingStrategy) null, true);
      java.util.Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      Hashtable<Dimension, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<Dimension, SQLFeatureNotSupportedException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(numberFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.text.DecimalFormat@67580
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      Class<Byte> class0 = Byte.TYPE;
      boolean boolean0 = TypeUtils.isGenericParamType(class0);
      boolean boolean1 = TypeUtils.isNumber("ishashCode");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      Class<AtomicInteger> class0 = AtomicInteger.class;
      boolean boolean0 = TypeUtils.isKotlin(class0);
      boolean boolean1 = TypeUtils.isNumber("");
      assertFalse(boolean1 == boolean0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      mockMinguoDate0.getMockedClassName();
      String string0 = TypeUtils.castToString(mockMinguoDate0);
      assertNotNull(string0);
      
      Locale locale0 = TypeUtils.toLocale("2Z");
      assertEquals("", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TypeUtils.isProxy(class0);
      TypeUtils.getClass((Type) class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : class java.sql.SQLTransactionRollbackException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TypeUtils typeUtils0 = new TypeUtils();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("9#|;pC7VoPw Q");
      MockIllegalStateException mockIllegalStateException0 = new MockIllegalStateException("9#|;pC7VoPw Q", sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(mockIllegalStateException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : org.evosuite.runtime.mock.java.lang.MockThrowable: 9#|;pC7VoPw Q
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      TypeUtils.getRawClass(class0);
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      Locale locale0 = Locale.JAPANESE;
      DecimalFormatSymbols.getInstance(locale0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(decimalFormatSymbols0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.text.DecimalFormatSymbols@1073a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(mockMinguoDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@34e9b38d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      negativeArraySizeException0.getLocalizedMessage();
      String string0 = "Ugbx8 yA~9";
      SQLDataException sQLDataException0 = new SQLDataException("Ugbx8 yA~9");
      negativeArraySizeException0.addSuppressed(sQLDataException0);
      negativeArraySizeException0.getSuppressed();
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(negativeArraySizeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.lang.NegativeArraySizeException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TypeUtils.fnv1a_64("");
      TypeUtils.castToSqlDate("");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.isPath(class0);
      Integer integer0 = new Integer(46);
      Boolean boolean0 = TypeUtils.castToBoolean(integer0);
      TypeUtils.isHibernateInitialized(boolean0);
      TypeUtils.fnv1a_64_lower("W_ZvW|SdrW+Z2");
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      Class<?> class1 = TypeUtils.loadClass("SQLState", classLoader0, false);
      assertNull(class1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      TypeUtils.fnv1a_64("Xgz8");
      Locale locale0 = TypeUtils.toLocale("Xgz8");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : xgz8
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Long long0 = new Long(2854L);
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      Jdk8DateCodec jdk8DateCodec0 = new Jdk8DateCodec();
      TypeUtils.isHibernateInitialized(jdk8DateCodec0);
      Class<Long> class0 = Long.TYPE;
      TypeUtils.getCollectionItemType(class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(japaneseDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : Japanese Heisei 26-02-14
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      boolean boolean0 = TypeUtils.isNumber("not match ");
      assertFalse(boolean0);
      
      Class<BigInteger> class1 = BigInteger.class;
      int int0 = TypeUtils.getSerializeFeatures(class1);
      assertEquals(0, int0);
      
      Class class2 = (Class)TypeUtils.getCollectionItemType(class1);
      assertNotNull(class2);
      assertEquals("class java.lang.Object", class2.toString());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      TypeUtils.isHibernateInitialized(japaneseDate0);
      TypeUtils.castToLong(float0);
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = TypeUtils.fnv1a_64("");
      assertEquals((-3750763034362895579L), long0);
      
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      TypeUtils.isPath(class0);
      Integer integer0 = new Integer(46);
      Boolean boolean0 = TypeUtils.castToBoolean(integer0);
      assertFalse(boolean0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized(boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = TypeUtils.isHibernateInitialized(class0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      String string0 = TypeUtils.castToString(type0);
      assertNotNull(string0);
      
      long long0 = TypeUtils.fnv1a_64("8*");
      assertEquals(583073248331470647L, long0);
      
      Class<?> class0 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertEquals(17, class0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TypeUtils.fnv1a_64("j");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate("j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : j
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Float float0 = new Float(0.0F);
      MockJapaneseDate.now();
      TypeUtils.isHibernateInitialized(parameterizedTypeImpl0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(mockMinguoDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@5debd751
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<MockDateFormat> class0 = MockDateFormat.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.toLocale("S)");
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("S)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : S)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      identityHashMap0.replaceAll(biFunction0);
      identityHashMap0.put((String) null, "toU");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockMinguoDate0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@6b924ef
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      Class<Double> class0 = Double.class;
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mapDeserializer0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.parser.deserializer.MapDeserializer@96
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Class<Exception> class0 = Exception.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class java.lang.Exception
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TypeUtils.castToSqlTime("");
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      TypeUtils.castToJavaBean((Object) null, class0);
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("Ljava.awt.Rectangle", classLoader0);
      TypeUtils.unwrapOptional((Type) null);
      ParserConfig parserConfig0 = new ParserConfig(false);
      TypeUtils.cast((Object) null, (Type) null, parserConfig0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("Ljava.awt.Rectangle");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        TypeUtils.castToChar("java.lang.Object@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : java.lang.Object@0000000001
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      WeakHashMap<RenderingHints.Key, Boolean> weakHashMap0 = new WeakHashMap<RenderingHints.Key, Boolean>();
      RenderingHints renderingHints0 = new RenderingHints(weakHashMap0);
      Class<Calendar> class0 = Calendar.class;
      TypeUtils.castToJavaBean((Object) weakHashMap0, class0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("KA");
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : class java.util.Calendar
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      TypeUtils.fnv1a_64("ha");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("ha");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : ha
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : m
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "java.lang.Object@0000000001", fieldArray0);
      assertNull(field0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TypeUtils.getClassFromMapping("");
      Class class0 = (Class)TypeUtils.getCollectionItemType((Type) null);
      Class<IllegalMonitorStateException> class1 = IllegalMonitorStateException.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap0);
      Class<Boolean> class2 = Boolean.class;
      TypeUtils.isProxy(class2);
      TypeUtils.getCollectionItemType(class1);
      Class<MockThaiBuddhistDate> class3 = MockThaiBuddhistDate.class;
      Class<DataTruncation> class4 = DataTruncation.class;
      Class<?> class5 = TypeUtils.getRawClass(class2);
      FieldInfo fieldInfo0 = new FieldInfo("", class3, class4, class5, (Field) null, (-1891), (-2034882653), (-2034882653));
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      // Undeclared exception!
      try { 
        TypeUtils.getSuperMethodAnnotation((Class<?>) null, (Method) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Character character0 = TypeUtils.castToChar("m");
      assertEquals('m', (char)character0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      TypeUtils.isHibernateInitialized(type0);
      Hashtable<RenderingHints.Key, MockJapaneseDate> hashtable0 = new Hashtable<RenderingHints.Key, MockJapaneseDate>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) renderingHints0, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.String cannot be cast to java.awt.RenderingHints$Key
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ClassLoader.getSystemClassLoader();
      TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ParserConfig.getGlobalInstance();
      TypeUtils.getClass((Type) parameterizedTypeImpl0);
      StackTraceElementDeserializer stackTraceElementDeserializer0 = StackTraceElementDeserializer.instance;
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(stackTraceElementDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Hashtable<Dimension, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<Dimension, SQLFeatureNotSupportedException>();
      TypeUtils.castToDate("");
      System.setCurrentTimeMillis(2868L);
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Boolean boolean0 = TypeUtils.castToBoolean("");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("Baw8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : Baw8
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TypeUtils.isGenericParamType((Type) null);
      TypeUtils.isNumber("getSuppressed");
      JSONObject jSONObject0 = new JSONObject(false);
      Map<String, Object> map0 = jSONObject0.getInnerMap();
      Class<DecimalFormat> class0 = DecimalFormat.class;
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.castToJavaBean(map0, class0, parserConfig0);
      Class<?> class1 = TypeUtils.getClass((Type) class0);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L");
      TypeUtils.castToDate("");
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject(concurrentHashMap0);
      Class<OutOfMemoryError> class0 = OutOfMemoryError.class;
      ParserConfig parserConfig0 = new ParserConfig();
      OutOfMemoryError outOfMemoryError0 = TypeUtils.castToJavaBean((Map<String, Object>) jSONObject0, class0, parserConfig0);
      assertNull(outOfMemoryError0.getMessage());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      TypeUtils.decapitalize("gtDeclringClass");
      String string0 = TypeUtils.decapitalize("Xa=I\"=K(~");
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Class<String> class0 = String.class;
      String string1 = TypeUtils.castToJavaBean((Object) mockThaiBuddhistDate0, class0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) "(@xP|-l", class0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.parser.deserializer.EnumDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Class<SimpleDateFormat> class0 = SimpleDateFormat.class;
      ParserConfig parserConfig1 = ParserConfig.global;
      SimpleDateFormat simpleDateFormat0 = TypeUtils.castToEnum((Object) "", class0, parserConfig1);
      assertNull(simpleDateFormat0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TypeUtils.isHibernateInitialized("wZSGJ!;kyEX");
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("wZSGJ!;kyEX");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"wZSGJ!;kyEX\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ThreadGroup threadGroup0 = new ThreadGroup("com.alibaba.fastjson.serializer.BooleanCodec");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "com.alibaba.fastjson.serializer.BooleanCodec");
      MockThread mockThread0 = new MockThread(threadGroup1, "com.alibaba.fastjson.serializer.BooleanCodec");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("com.alibaba.fastjson.serializer.BooleanCodec", classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.castToInt("com.alibaba.fastjson.serializer.BooleanCodec");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"com.alibaba.fastjson.serializer.BooleanCodec\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<MockDateFormat> class0 = MockDateFormat.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "(@xP|-xl";
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "(@xP|-xl", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.sql.SQLRecoverableException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      System.setCurrentTimeMillis(3256L);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Class<Boolean> class0 = Boolean.TYPE;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ThreadGroup threadGroup0 = new ThreadGroup("fastjson.parser.autoTypeAccept");
      String string0 = "VV9`iA={0R";
      MockThread mockThread0 = new MockThread("VV9`iA={0R");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "VV9`iA={0R", (-1L));
      mockThread0.getStackTrace();
      MockThread.getAllStackTraces();
      MockThread.interrupted();
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      parserConfig0.setDefaultClassLoader(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mockMinguoDate0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate@18b83294
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Class<NegativeArraySizeException> class0 = NegativeArraySizeException.class;
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, true);
      Class<Boolean> class1 = Boolean.class;
      Class<Field> class2 = Field.class;
      Field[] fieldArray0 = new Field[0];
      Field field0 = TypeUtils.getField(class0, "H5G7", fieldArray0);
      assertNull(field0);
      
      FieldInfo fieldInfo0 = new FieldInfo("getintValue", class1, class2, class2, (Field) null, 102, 102, 95);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean0 = TypeUtils.isTransient((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Hashtable<Dimension, SQLFeatureNotSupportedException> hashtable0 = new Hashtable<Dimension, SQLFeatureNotSupportedException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("Z:)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Z:)\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)48;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      MathContext mathContext0 = MathContext.DECIMAL32;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0, mathContext0);
      Time time0 = TypeUtils.castToSqlTime(bigDecimal0);
      assertEquals("16:52:31", time0.toString());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Constructor<DecimalFormat>[] constructorArray0 = (Constructor<DecimalFormat>[]) Array.newInstance(Constructor.class, 0);
      TypeUtils.getKoltinConstructor(constructorArray0);
      Class<IllegalAccessError> class0 = IllegalAccessError.class;
      Class<Annotation> class1 = Annotation.class;
      TypeUtils.getAnnotation((Class<?>) class0, class1);
      String string0 = "detailMessage";
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "J%}!~<C&g;F8We!9", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      Constructor<DecimalFormat>[] constructorArray0 = (Constructor<DecimalFormat>[]) Array.newInstance(Constructor.class, 1);
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("^iBq1!RVm[?");
      Type[] typeArray0 = new Type[0];
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "^iBq1!RVm[?";
      stringArray0[1] = "^iBq1!RVm[?";
      stringArray0[2] = "^iBq1!RVm[?";
      stringArray0[3] = "nA6Rl\"38}DY6Y.|%D";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Class<?> class1 = simplePropertyPreFilter0.getClazz();
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class1, class1);
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLNonTransientConnectionException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Class<SQLRecoverableException> class0 = SQLRecoverableException.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.entrySet();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      TypeUtils.computeGettersWithFieldBase(class0, hashtable0, false, propertyNamingStrategy0);
      BigDecimal bigDecimal0 = new BigDecimal(69.758);
      Timestamp timestamp0 = TypeUtils.castToTimestamp(bigDecimal0);
      assertEquals(69000000, timestamp0.getNanos());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      MockThread mockThread0 = new MockThread();
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("", classLoader0);
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) parameterizedTypeImpl0, type0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"actualTypeArguments\":[{}],\"rawType\":{},\"typeName\":\"java.util.List<java.lang.String>\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      TypeUtils.getCollectionItemClass(type0);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TypeUtils.castToByte("");
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("6aw8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : 6aw8
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      TypeUtils.getClassFromMapping("J");
      ParserConfig parserConfig0 = new ParserConfig(false);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "J", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("Baw8");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Baw8\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("null,");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"null,\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Class<Calendar> class0 = Calendar.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) "", class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TypeUtils.castToDate("");
      HashMap<SQLTransactionRollbackException, SQLSyntaxErrorException> hashMap0 = new HashMap<SQLTransactionRollbackException, SQLSyntaxErrorException>();
      Type[] typeArray0 = new Type[1];
      ThreadGroup threadGroup0 = new ThreadGroup("wr{ArK");
      MockThread mockThread0 = new MockThread(threadGroup0, (Runnable) null, "%?.mP[N/3o^H");
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      TypeUtils.loadClass("", classLoader0);
      typeArray0[0] = (Type) null;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], (Type) null);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) hashMap0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@745f
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) class0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : int
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "[";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[");
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("[S");
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class [Z
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Float float0 = new Float(2524.92);
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(float0);
      assertEquals((byte) (-36), bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Long long0 = TypeUtils.castToLong("");
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Collection collection0 = new Stack<OutOfMemoryError>();
      BigDecimal bigDecimal0 = new BigDecimal(3256L);
      Class<TimeUnit> class0 = TimeUnit.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) bigDecimal0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = Calendar.TUESDAY;
      Locale locale0 = TypeUtils.toLocale("9t_~-Mobs");
      assertEquals("9t_~-MOBS", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      TypeUtils.getCollectionItemType(parameterizedTypeImpl0);
      LinkedHashMap<SQLException, String> linkedHashMap0 = new LinkedHashMap<SQLException, String>();
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(linkedHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Class<Integer> class0 = Integer.TYPE;
      ParserConfig parserConfig0 = new ParserConfig();
      TypeUtils.getCollectionItemClass(class0);
      StringIndexOutOfBoundsException stringIndexOutOfBoundsException0 = new StringIndexOutOfBoundsException(12);
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[0], typeArray0[1]);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) stringIndexOutOfBoundsException0, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseInt error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.IntegerCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      System.setCurrentTimeMillis(2056L);
      Boolean boolean0 = Boolean.valueOf(true);
      Integer integer0 = TypeUtils.castToInt(boolean0);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "";
      TypeUtils.castToShort("");
      Class<ParameterizedTypeImpl> class0 = ParameterizedTypeImpl.class;
      // Undeclared exception!
      try { 
        TypeUtils.getField(class0, "%Uv@*DB*}:6*t", (Field[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Integer integer0 = TypeUtils.castToInt("");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      System.setCurrentTimeMillis(2056L);
      Boolean boolean0 = Boolean.valueOf(false);
      Integer integer0 = TypeUtils.castToInt(boolean0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(",");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \",\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LinkedHashMap<MockJapaneseDate, InternalError> linkedHashMap0 = new LinkedHashMap<MockJapaneseDate, InternalError>(2441);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("fastjson.serializerFeatures.MapSortField", "modifiers", (-1619));
      InternalError internalError0 = new InternalError(sQLRecoverableException0);
      linkedHashMap0.put(mockJapaneseDate0, internalError0);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(linkedHashMap0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "JM{G:";
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "JM{G:", (Type) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : ,
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TypeUtils.fnv1a_64_lower("jG1}q(@^/");
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      Class<?> class1 = TypeUtils.getClass(type0);
      TypeUtils.unwrapOptional(type0);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }
}
