/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:42:15 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Locale;
import java.util.Vector;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.CheckOptionHandler;
import weka.core.ClassCache;
import weka.core.ClassDiscovery;
import weka.core.FindWithCapabilities;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instances;
import weka.core.OptionHandlerJavadoc;
import weka.core.SingleIndex;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "-.+^f\"_<?8b";
      stringArray0[2] = "1/O;s<k.[CI/:)8*PQ=";
      String string0 = "<q~AScz;zc [,%|?/";
      stringArray0[3] = "<q~AScz;zc [,%|?/";
      String string1 = "5EO`r";
      stringArray0[4] = "5EO`r";
      stringArray0[5] = "-not-relational-class";
      stringArray0[6] = "R6as!4*K";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("FkN?H9@xG%AVLOD");
      findWithCapabilities0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@";
      stringArray0[1] = "Rel";
      findWithCapabilities0.getHandler();
      findWithCapabilities0.m_Handler = null;
      stringArray0[2] = "-not-string-atts";
      findWithCapabilities0.m_Filename = "@";
      stringArray0[3] = "`o`'DQN";
      stringArray0[4] = "KC1jq5 ~WI#";
      stringArray0[5] = "";
      stringArray0[6] = "iF8iO=HA*]";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      vector0.removeAllElements();
      findWithCapabilities0.find();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getNotCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.disableAllClassDependencies();
      capabilities0.enableAll();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      try { 
        findWithCapabilities0.setOptions((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Superclass = "8034";
      vector0.add("");
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("-1");
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.disableAllClassDependencies();
      capabilities0.enableAll();
      capabilities0.m_MissingClassValuesTest = true;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getRevision();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "cc+.Pp~9Y";
      stringArray0[1] = "Enumerating attributes (leaving out class):";
      stringArray0[2] = "-not-string-class";
      stringArray0[3] = "Enumerating attributes (leaving out class):";
      stringArray0[4] = "\u001E";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-not-relational-atts";
      FindWithCapabilities.main(stringArray0);
      System.setCurrentTimeMillis(2552L);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex("");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      boolean boolean0 = ClassCache.VERBOSE;
      singleIndex0.getRevision();
      String[] stringArray1 = new String[9];
      stringArray1[0] = "8034";
      // Undeclared exception!
      try { 
        singleIndex0.setValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Vector<String> vector0 = findWithCapabilities0.find();
      FileSystemHandling.createFolder(evoSuiteFile0);
      vector0.add("");
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\nData (internal values):\n");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Tt]!H|";
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities0;
      stringArray0[1] = "-unary-atts";
      stringArray0[2] = "8EWZ-9.F;6";
      stringArray0[3] = "not-numeric-atts";
      stringArray0[4] = "test_set";
      stringArray0[5] = "\tSuperclass to look for in the packages.\n";
      stringArray0[6] = "!LH6+Bzw# ";
      stringArray0[7] = "s.w";
      findWithCapabilities1.disableNot(capabilities_Capability0);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Filename = "20y\"4WZhFy/";
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      assertEquals("20y\"4WZhFy/", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[1];
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Vector<String> vector0 = findWithCapabilities0.find();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      vector0.add("");
      findWithCapabilities0.m_Superclass = "8034";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      TestInstances.listToArray("");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities2.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities.main((String[]) null);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      ArrayList<OptionHandlerJavadoc> arrayList0 = new ArrayList<OptionHandlerJavadoc>();
      Vector<OptionHandlerJavadoc> vector1 = new Vector<OptionHandlerJavadoc>(arrayList0);
      vector0.removeAll(vector1);
      findWithCapabilities1.getRevision();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability1);
      try { 
        findWithCapabilities1.setOptions((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D{:p6";
      stringArray0[1] = "'z";
      stringArray0[2] = "syZ&9wwn%5:f|s(\"o+";
      stringArray0[3] = "N'1J";
      stringArray0[4] = "-string-atts";
      stringArray0[5] = "kWdK=)UO2W2g9TJR";
      stringArray0[6] = "-M<+ecrvH|j0TR";
      stringArray0[7] = "Jd";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "m";
      stringArray0[1] = "-string-class";
      stringArray0[2] = "Can't find class called: ";
      stringArray0[3] = "<!-- technical-bibtex-start -->";
      stringArray0[4] = "-binary-class";
      stringArray0[5] = "The alternating decision tree learning algorithm";
      stringArray0[6] = "/";
      stringArray0[7] = "5aPz:c}.Bfg";
      stringArray0[8] = "4S}tRm>B&mwnxBWS JX";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "NOMINAL_CLASS";
      stringArray0[1] = "-string-class";
      stringArray0[2] = "Cannot handle unknown attribute type '";
      stringArray0[4] = "(XD3<kq->;K*hNr1,2";
      stringArray0[5] = "";
      stringArray0[6] = "\tMust handle unray classes.";
      stringArray0[7] = "(;x^";
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector0 = new Vector<String>();
      FindWithCapabilities.main(stringArray1);
      vector0.add("(XD3<kq->;K*hNr1,2");
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = GlobalInfoJavadoc.GLOBALINFO_ENDTAG;
      findWithCapabilities1.m_GenericPropertiesCreator = false;
      Vector<String> vector0 = findWithCapabilities1.find();
      findWithCapabilities1.m_Superclass = "<!-- globalinfo-end -->";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-missing-class-values";
      FindWithCapabilities.main(stringArray0);
      vector0.add("-missing-class-values");
      findWithCapabilities0.find();
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      findWithCapabilities1.setClassIndex("8034");
      Vector<String> vector1 = findWithCapabilities0.find();
      String[] stringArray0 = Locale.getISOCountries();
      vector1.removeAllElements();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities2.enable(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      vector0.iterator();
      findWithCapabilities2.getOptions();
      findWithCapabilities1.getMatches();
      FindWithCapabilities.main(stringArray0);
      boolean boolean0 = findWithCapabilities1.m_GenericPropertiesCreator;
      findWithCapabilities0.find();
      String string0 = findWithCapabilities1.m_Superclass;
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      findWithCapabilities1.setClassIndex("8034");
      findWithCapabilities1.m_Superclass = "8034";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Vector<String> vector1 = findWithCapabilities0.m_Packages;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      String[] stringArray1 = new String[7];
      stringArray1[0] = "8034";
      stringArray1[1] = "8034";
      stringArray1[2] = "8034";
      stringArray1[3] = "8034";
      stringArray1[4] = "8034";
      stringArray1[5] = "8034";
      stringArray1[6] = "8034";
      FindWithCapabilities.main(stringArray1);
      vector0.iterator();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.getMisses();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      findWithCapabilities1.setClassIndex("8034");
      findWithCapabilities1.m_Superclass = "8034";
      vector0.removeAllElements();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability0);
      vector0.iterator();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector1 = new Vector<String>();
      vector0.addElement("not-numeric-atts");
      findWithCapabilities0.setFilename("]");
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      TestInstances.forCapabilities(capabilities0);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities1.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities1.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "BaA)k";
      stringArray0[1] = "-missing-att-values";
      stringArray0[2] = "3Yf+j";
      stringArray0[3] = "QfA";
      stringArray0[4] = "weka.core.SingleIndex";
      stringArray0[5] = "weka.core.SingleIndex";
      stringArray0[6] = "=";
      stringArray0[7] = "nEy3SWRHKllu|D";
      stringArray0[8] = "\tThe number of nominal attributes (default 2).";
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getData();
      try { 
        Capabilities.forInstances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[1];
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities1.getRevision();
      String string0 = Capabilities.PROPERTIES_FILE;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities1.m_Packages;
      HashSet<CheckOptionHandler> hashSet0 = new HashSet<CheckOptionHandler>();
      vector0.removeAll(hashSet0);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getOptions();
      Vector<String> vector1 = findWithCapabilities1.getMatches();
      vector1.add("-istll-packae");
      Vector<String> vector2 = new Vector<String>();
      vector1.addElement("*(dn$A1g?WB {^Bk!u{");
      vector0.add("weka/core/Capabilities.props");
      Vector<String> vector3 = new Vector<String>();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Vector<String> vector1 = findWithCapabilities0.m_Packages;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[4] = "";
      stringArray1[5] = "";
      FindWithCapabilities.main(stringArray1);
      vector0.iterator();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getMisses();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities1.getRevision();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.m_Misses;
      vector0.add("]. {roW|R");
      vector0.iterator();
      findWithCapabilities1.find();
      String[] stringArray0 = TestInstances.listToArray("+/?v<s_m|VRTz/*");
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities2.setFilename("\tMust handle date attributes.");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities2.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\tThe name of the data set.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      capabilities0.toString();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.m_Misses = vector0;
      Random.setNextRandom(6);
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
      
      findWithCapabilities0.getOptions();
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      assertNotSame(capabilities1, capabilities0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[1];
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "8034";
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.setFilename("\tThe Capabilities handler to base the handling on.\n\tThe other parameters can be used to override the ones\n\tdetermined from the handler. Additional parameters for\n\thandler can be passed on after the '--'.\n\tEither '-W' or '-t' can be used.");
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      findWithCapabilities1.setClassIndex("8034");
      findWithCapabilities1.m_Superclass = "8034";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability0);
      Vector<String> vector1 = findWithCapabilities1.m_Packages;
      vector0.iterator();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      String[] stringArray0 = Locale.getISOLanguages();
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector2 = new Vector<String>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      vector1.listIterator();
      FileSystemHandling.createFolder(evoSuiteFile0);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.setHandler(findWithCapabilities2);
      String[] stringArray1 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray1);
      boolean boolean0 = findWithCapabilities0.m_GenericPropertiesCreator;
      Vector<String> vector3 = findWithCapabilities2.find();
      vector3.add("-eV&{0YE");
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities3.m_NotCapabilities;
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities6.isEnabled(capabilities_Capability0);
      findWithCapabilities5.find();
      vector2.add("-eV&{0YE");
      findWithCapabilities3.getFilename();
      Vector<String> vector4 = new Vector<String>();
      String string0 = TestInstances.DEFAULT_SEPARATORS;
      try { 
        findWithCapabilities6.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getNotCapabilities();
      Vector<String> vector0 = new Vector<String>();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String string0 = TechnicalInformationHandlerJavadoc.PLAINTEXT_STARTTAG;
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      findWithCapabilities1.setClassIndex("<!-- technical-plaintext-start -->");
      findWithCapabilities1.m_Superclass = "<!-- technical-plaintext-start -->";
      Vector<String> vector1 = findWithCapabilities0.find();
      String[] stringArray0 = Locale.getISOCountries();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector2 = findWithCapabilities1.m_Packages;
      String[] stringArray1 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray1);
      // Undeclared exception!
      try { 
        vector1.addAll((-2054586458), (Collection<? extends String>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -2054586458
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Misses = vector0;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      Vector<String> vector1 = findWithCapabilities1.m_Matches;
      findWithCapabilities1.m_Superclass = "8034";
      vector1.removeAllElements();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability0);
      vector0.iterator();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector2 = new Vector<String>();
      vector0.addElement("Expected end of range string, found: ");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Expected end of range string, found: ");
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ",}mp_ZxV3[2U^jVEQ";
      stringArray0[1] = "-binary-atts";
      stringArray0[2] = ".class";
      stringArray0[3] = "binary-class";
      stringArray0[4] = "]F%CidCuaz6qmE";
      stringArray0[5] = "\n  remaining: ";
      stringArray0[6] = ". 0_@:[U`aCSBsJ}lp";
      stringArray0[7] = "NQykw.y";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      findWithCapabilities1.setClassIndex("8034");
      findWithCapabilities1.m_Superclass = "8034";
      findWithCapabilities0.find();
      Locale.getISOCountries();
      Vector<String> vector1 = findWithCapabilities0.m_Packages;
      Vector<String> vector2 = new Vector<String>();
      vector0.addElement("P`h%=^@\":2");
      vector1.add("Ji?&Z{~6;&6E}M?|m");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities2.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.setHandler(findWithCapabilities1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      vector1.removeAll(vector0);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities4.disableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities2.handles(capabilities_Capability1);
      // Undeclared exception!
      try { 
        findWithCapabilities5.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex((String) null);
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      Vector<String> vector1 = new Vector<String>();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability1);
      FindWithCapabilities.main(stringArray1);
      vector1.iterator();
      findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NO_CLASS;
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-binary-class";
      stringArray0[1] = "missing-class-values";
      stringArray0[2] = "NtmiQ.<I<I1>";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      findWithCapabilities1.setClassIndex("8034");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      vector0.iterator();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      Vector<String> vector1 = new Vector<String>();
      vector1.addElement("");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities2.getOptions();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      boolean boolean0 = findWithCapabilities3.m_GenericPropertiesCreator;
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities1.isEnabled(capabilities_Capability2);
      findWithCapabilities0.find();
      vector0.add("(m+H@Y#Z*");
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities2.getFilename();
      // Undeclared exception!
      try { 
        findWithCapabilities4.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.m_ClassIndex = null;
      findWithCapabilities0.m_Filename = "gc?R4o7&NX2V";
      findWithCapabilities0.getClassIndex();
      findWithCapabilities0.getClassIndex();
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getClassIndex();
      try { 
        Capabilities.forInstances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getRevision();
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      findWithCapabilities1.m_Filename = "6Lpv#u9G";
      vector0.add("6Lpv#u9G");
      findWithCapabilities1.m_Superclass = "6Lpv#u9G";
      findWithCapabilities1.setClassIndex("8034");
      findWithCapabilities1.m_Superclass = "8034";
      vector0.removeAllElements();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      vector0.addElement("6Lpv#u9G");
      assertEquals("[6Lpv#u9G]", vector0.toString());
      
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities2.isEnabledNot(capabilities_Capability1);
      findWithCapabilities1.setHandler(findWithCapabilities2);
      String[] stringArray1 = findWithCapabilities1.getOptions();
      findWithCapabilities2.getOptions();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      Vector<String> vector1 = findWithCapabilities1.getMatches();
      FindWithCapabilities.main(stringArray1);
      boolean boolean0 = ClassCache.VERBOSE;
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setHandler(findWithCapabilities1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      testInstances0.setClassIndex(305);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.handles(capabilities_Capability2);
      findWithCapabilities2.isEnabledNot(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities1.getCapabilities();
      findWithCapabilities2.setNotCapabilities(capabilities0);
      Vector<String> vector2 = findWithCapabilities1.find();
      assertFalse(vector2.equals((Object)vector1));
  }
}
