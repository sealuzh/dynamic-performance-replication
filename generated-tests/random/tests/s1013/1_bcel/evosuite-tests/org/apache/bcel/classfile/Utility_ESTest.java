/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 11:51:45 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.convertString("<unknown object>");
      Utility.replace("Z~s7.TAADlhsk_a", "_cHNUT7MIO;", (String) null);
      Utility.typeOfSignature("Z~s7.TAADlhsk_a");
      Utility.clearBit((byte)4, (byte)4);
      try { 
        Utility.methodSignatureArgumentTypes("W;u4Y@", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W;u4Y@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)28;
      byte byte0 = (byte) (-57);
      byteArray0[2] = (byte) (-57);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte) (-27);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 91, (int) (byte)112, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\n");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)1;
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString((byte) (-85));
      constantArray0[0] = (Constant) constantString0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(178, (-905));
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      Constant constant0 = constantArray0[1].copy();
      constantArray0[2] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)53, (int) (byte)41, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.classOrInterface(1937);
      String string0 = "LRF;V";
      boolean boolean0 = false;
      Utility.fillup("LRF;V", 653, false, 'T');
      Utility.getSignature("interface");
      String string1 = "LByte;V";
      Utility.typeOfSignature("LByte;V");
      Utility.methodSignatureReturnType
      try { 
        Utility.typeOfSignature("float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte)111;
      byteArray0[7] = (byte) (-66);
      byteArray0[8] = (byte) (-63);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-116), 95, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    f2l
         // 1:    <illegal opcode>
         // 2:    fload_3
         // 3:    d2l
         // 4:    <illegal opcode>
         // 5:    lload_0
         // 6:    ddiv
         // 7:    arraylength
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "9u+";
      try { 
        Utility.typeOfSignature("9u+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9u+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)61;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 131, (int) (byte)61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "C");
      Utility.typeOfSignature("Deprecated");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Deprecated", "Deprecated", "Deprecated");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Deprecated
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.classOrInterface(266);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.classOrInterface(56);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("class", "iload_1", "iload_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.setBit(82, 74);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)77;
      byteArray0[8] = (byte)45;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)77, (int) (byte)78);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte) (-8);
      byteArray0[7] = (byte) (-27);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 91, (int) (byte)112, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte) (-31);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-128), 158);
      assertEquals("0:    nop\n1:    lshr\n2:    land\n3:    ior\n4:    <illegal opcode>\n5:    fconst_1\n6:    ior\n7:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-55);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantInteger constantInteger0 = new ConstantInteger(1252);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantInteger0.accept(emptyVisitor0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-55), (int) (byte) (-55), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Utility.fillup(";KPfSv`P|Wob&(", (-2854), false, '{');
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "monitorexit";
      objectArray0[3] = (Object) ";KPfSv`P|Wob&(";
      objectArray0[4] = (Object) "monitorexit";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "monitorexit", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      String string0 = Utility.compactClassName("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte)11;
      byteArray0[8] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)91, (byte)18);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2118, 2166);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      constantArray0[3] = (Constant) constantInteger0;
      ConstantInteger constantInteger1 = new ConstantInteger((byte)11);
      constantArray0[4] = (Constant) constantInteger1;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-57));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[5] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "!M\"8tKr";
      try { 
        Utility.typeOfSignature("!M\"8tKr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M\"8tKr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-112);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-13);
      byteArray0[7] = (byte) (-24);
      byteArray0[8] = (byte) (-54);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-112), (int) (byte) (-40), true);
      assertEquals("0:    dup_x1\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    aload_0\n4:    d2f\n5:    iconst_1\n6:    <illegal opcode>\n7:    <illegal opcode>\n8:    breakpoint\n", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.methodTypeToSignature("^}v&N", (String[]) null);
      Utility.classOrInterface((-1631));
      Utility.getSignature("'oBgS=9KMrSDE");
      Utility.isSet(162, 162);
      String[] stringArray0 = Utility.methodSignatureArgumentTypes("()L^}v&N;", false);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte)72;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-666), (-12), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      try { 
        Utility.typeOfSignature("84i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 84i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte) (-97);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-97), 187, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ishr
         // 1:    if_icmplt\t\t#18496
         // 4:    l2f
         // 5:    l2i
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)30;
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-86);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-86);
      byteArray1[1] = (byte)42;
      byteArray1[2] = (byte)42;
      byteArray1[3] = (byte)30;
      Utility.equals(byteArray0, byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      int int0 = 1518;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)42, 1518);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "/H";
      try { 
        Utility.typeOfSignature("/H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /H
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("/po{$Ujp+", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantLong constantLong0 = new ConstantLong((-598L));
      constantArray0[0] = (Constant) constantLong0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(5125, 5125);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(20, 73);
      constantArray0[2] = (Constant) constantNameAndType1;
      ConstantNameAndType constantNameAndType2 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[3] = (Constant) constantNameAndType2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertArrayEquals(new byte[] {(byte)47, (byte)112, (byte)111, (byte)123, (byte)20, (byte)106, (byte)112, (byte)43}, byteArray0);
      assertEquals("laload", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte) (-102);
      Utility.equals(byteArray0, byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)4, 249, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?aXMX2");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-85);
      byte byte0 = (byte)10;
      byteArray0[2] = (byte)10;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-530), 2668);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    iconst_4
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "'#";
      try { 
        Utility.typeOfSignature("'#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)61;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 125, (int) (byte)61);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "n&t%;~B\\>";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "n&t%;~B>");
      Utility.isJavaIdentifierPart('c');
      Utility.typeOfSignature("T5AI%.^V/?x#%X");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.readByte();
      try { 
        byteSequence0.readDouble();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)62;
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(213, 56);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)62, 32767, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.accessToString(110);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)43;
      byte byte0 = (byte)50;
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)62;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "private protected static synchronized volatile");
      byteArray0[6] = (byte)16;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16384, 828);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-72);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte)0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      constantArray0[0] = (Constant) constantString0;
      byteSequence0.close();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      Utility.codeToString(byteSequence0, constantPool0);
      try { 
        Utility.methodSignatureArgumentTypes("fadd", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fadd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fstore\t\t%25", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-80);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)20;
      byteArray0[7] = (byte)107;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)20, (int) (byte) (-80));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.fillup(", high = ", (-2150), false, '8');
      Utility.isJavaIdentifierPart('8');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)99;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-1026));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    d2i
         // 1:    dadd
         // 2:    nop
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)103;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)103, (int) (byte)103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "(mka&Mh~_I^pg";
      try { 
        Utility.typeOfMethodSignature("(mka&Mh~_I^pg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (mka&Mh~_I^pg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-61);
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)56;
      objectArray0[1] = (Object) (byte) (-61);
      objectArray0[2] = (Object) (byte) (-67);
      objectArray0[3] = (Object) (byte)56;
      Utility.printArray(objectArray0, false, false);
      try { 
        Utility.typeOfSignature("56, -61, -67, 56");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 56, -61, -67, 56
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "TZ";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TZ");
      Utility.convertString("l2d");
      Utility.format(125, 125, false, '`');
      String string1 = "C3mDw;tV^ep{iUG,\"";
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("C3mDw;tV^ep{iUG,\"", false);
      Utility.toHexString(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(class_index = ");
      ConstantPool constantPool0 = null;
      int int0 = 2446;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 125, 2446);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utility.classOrInterface(133);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte) (-66);
      byteArray0[7] = (byte)6;
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(41, 919);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)70, (byte) (-53));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("class");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-53), (int) (byte)6, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 459. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false, false);
      Utility.searchOpcode("java.lang.Object@7bfc5747");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte) (-107);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("NlfS");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(4987, 36);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantMethodref constantMethodref1 = new ConstantMethodref(byteSequence0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-49));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[3] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)69;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)20;
      byte byte1 = (byte)71;
      byteArray0[3] = (byte)71;
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("45 f0 14 47");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 45 f0 14 47
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte)53;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1153), (int) (byte) (-60), true);
      assertEquals("0:    breakpoint\n1:    aaload\n2:    dstore_2\n3:    wide\t(wide)\n4:    saload\n", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('M');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      Utility.convertString("9]cy*W~#O+");
      Utility.convertString("udZEx<hJ|v &");
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-3);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance(")");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantDouble constantDouble0 = new ConstantDouble(1.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-43), 203);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 54660. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      int int0 = Utility.setBit((-321), 2136);
      int int1 = Utility.clearBit((-321), (-3034));
      assertTrue(int1 == int0);
      
      String string0 = Utility.format(27, 236, false, '[');
      assertEquals("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[27", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)85;
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)11;
      objectArray0[1] = (Object) (byte)12;
      objectArray0[2] = (Object) "[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[27";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[3] = (Object) (byte)11;
      objectArray0[4] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[5] = (Object) (byte)11;
      String string2 = Utility.printArray(objectArray0, true);
      assertEquals("{11, 12, [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[27, 11, $l$8b$I$A$A$A$A$A$A$A, 11}", string2);
      
      byte byte0 = Utility.typeOfSignature("[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[27");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 247;
      boolean boolean0 = false;
      Utility.accessToString(247, false);
      Utility.typeOfSignature("C5O$V)5 fI");
      String string0 = " arg";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("MP7 X*sv", " arg", "org.apache.bcel.classfile.RuntimeInvisibleParameterAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MP7 X*sv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte) (-45);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("wide\t(wide)", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utility.clearBit(1527, 1527);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)90;
      Constant[] constantArray0 = new Constant[7];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)88);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1527, 1527);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantMethodref constantMethodref1 = new ConstantMethodref(78, (byte)90);
      constantArray0[2] = (Constant) constantMethodref1;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      constantArray0[3] = (Constant) constantMethodHandle0;
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle((byte)90, 78);
      constantArray0[4] = (Constant) constantMethodHandle1;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(75, (byte)103);
      constantArray0[5] = (Constant) constantInvokeDynamic0;
      ConstantMethodHandle constantMethodHandle2 = new ConstantMethodHandle(byteSequence0);
      constantArray0[6] = (Constant) constantMethodHandle2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 871, 6, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CONSTANT_MethodHandle");
      boolean boolean0 = false;
      Utility.compactClassName("%\"r2f?jqF-", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)123;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8H`o");
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)90;
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("%\"r2f?jqF-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %\"r2f?jqF-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "goto";
      stringArray0[1] = "goto";
      stringArray0[2] = "goto";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[3] = "%\"r2f?jqF-";
      stringArray0[4] = "goto";
      stringArray0[5] = "goto";
      stringArray0[6] = "goto";
      stringArray0[7] = "goto";
      stringArray0[8] = "goto";
      Utility.methodTypeToSignature("goto", stringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.setBit(178, 185);
      try { 
        Utility.typeOfSignature("X(}p=16}bQ/ zJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X(}p=16}bQ/ zJ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "1~kZ";
      try { 
        Utility.typeOfSignature("1~kZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1~kZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.compactClassName("X6*lRXw_}?Nt-");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-4);
      byteArray0[6] = (byte) (-127);
      byteArray0[7] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)89, 193);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 3828;
      Utility.setBit(8, 3828);
      String string0 = ":";
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Utility.compactClassName("2h|_/[`qc&)7iV", "2h|_/[`qc&)7iV", false);
      Utility.decode("2h|_.[`qc&)7iV", false);
      Utility.fillup("2h|_.[`qc&)7iV", 21, true, 'B');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Illegally nested brackets:");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Utility.compactClassName("2h|_.[`qc&)7iV", "E|X7>m.$V&S", true);
      try { 
        Utility.typeOfSignature("E|X7>m.$V&S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E|X7>m.$V&S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "PlRhcjUCr=62aA%/";
      try { 
        Utility.typeOfSignature("PlRhcjUCr=62aA%/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PlRhcjUCr=62aA%/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Utility.format(72, 2332, false, '\"');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)100;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iload_3", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "$j6}/QG>j";
      Utility.decode("$j6}/QG>j", false);
      Utility.searchOpcode("$j6}/QG>j");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "$j6}/QG>j");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // $j6}/QG>j
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-50);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("dstore\t\t%16", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)0);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1);
      Utility.format((byte)5, (-3355), false, '[');
      String[] stringArray0 = new String[9];
      stringArray0[0] = "5";
      stringArray0[1] = "dconst_0";
      stringArray0[2] = "void";
      stringArray0[3] = "dconst_0";
      stringArray0[4] = "M<{HFl$sR]b>3:";
      stringArray0[5] = "void";
      stringArray0[6] = "void";
      stringArray0[7] = "dconst_0";
      stringArray0[8] = "5";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.classOrInterface((byte) (-3));
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1157), (int) (byte)124, true);
      Utility.classOrInterface((-2278));
      // Undeclared exception!
      try { 
        Utility.signatureToString("interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Utility.clearBit((-88), 1091);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)58;
      Utility.equals(byteArray0, byteArray0);
      Utility.classOrInterface(162);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) (byte)95;
      objectArray0[1] = (Object) (byte)39;
      Utility.printArray(objectArray0, true, true);
      Utility.getSignature("{\"95\", \"39\"}");
      Constant[] constantArray0 = new Constant[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(dataInputStream0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 93, 836);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      try { 
        Utility.typeOfSignature("0:    <ill");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    <ill
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "Warning: Padding byte != 0 in ";
      try { 
        Utility.typeOfSignature("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning: Padding byte != 0 in 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Utility.typeOfSignature("L8h6{QJbR];V");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("9gQ~]T8N>", true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      mockPrintWriter0.write((int) (byte)14);
      Object[] objectArray0 = new Object[2];
      mockPrintWriter0.print('E');
      Object object0 = new Object();
      mockPrintWriter0.print(false);
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "L8h6{QJbR];V";
      PrintWriter printWriter0 = mockPrintWriter0.format("L8h6{QJbR];V", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Utility.printArray((PrintWriter) mockPrintWriter1, objectArray0);
      Utility.isSet((byte)14, (byte)14);
      Utility.compactClassName("9gQ~]T8N>");
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("9gQ~]T8N>", "org.apache.bcel.classfile.ConstantMethodType", "... (truncated)", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9gQ~]T8N>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.printArray((Object[]) null, true, false);
      Utility.accessToString(175);
      Utility.replace("java.lang.0:    <illegal opcode>\n1:    ishr\n2:    <illegal opcode>\n", "goto_w", "OWKnKc!$T009Mec$@");
      Utility.format(175, 175, true, 'i');
      Utility.classOrInterface(175);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iload\t\t%151", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "Np";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Np");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Np'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.signatureToString("Fp.d9?GP0eDX\"lJU&T", true);
      try { 
        Utility.typeOfSignature("float");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "[Ys#I8a?.c;";
      // Undeclared exception!
      try { 
        Utility.signatureToString("[Ys#I8a?.c;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ys#I8a?.c;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.compactClassName("float");
      String string0 = Utility.compactClassName("<'HIdv&N8q0%P*1Nw!");
      assertEquals("<'HIdv&N8q0%P*1Nw!", string0);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string1 = Utility.printArray(objectArray0, false);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte) (-14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("f2d", string2);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, true, true);
      Utility.printArray(objectArray0, true);
      Utility.format(170, 170, false, '~');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-77);
      byteArray0[7] = (byte) (-68);
      byteArray0[8] = (byte) (-76);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 892, 180, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-96);
      byteArray0[8] = (byte) (-59);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[5];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(48, 962);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)28, 39);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[3] = (Constant) constantMethodHandle1;
      ConstantString constantString0 = new ConstantString(1449);
      constantArray0[4] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3508, 45, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Utility.isSet(46, 128);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-15);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 46, (int) (byte) (-11), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      String string0 = "dXqSZj";
      String[] stringArray0 = new String[9];
      stringArray0[0] = "dXqSZj";
      stringArray0[1] = "dXqSZj";
      stringArray0[2] = "dXqSZj";
      stringArray0[3] = "dXqSZj";
      stringArray0[4] = "dXqSZj";
      stringArray0[5] = "dXqSZj";
      stringArray0[6] = "dXqSZj";
      stringArray0[7] = "m(j;Q";
      stringArray0[8] = "(?may";
      Utility.methodTypeToSignature("dXqSZj", stringArray0);
      try { 
        Utility.typeOfSignature("(LdXqSZj;LdXqSZj;LdXqSZj;LdXqSZj;LdXqSZj;LdXqSZj;LdXqSZj;Lm(j;Q;L(?may;)LdXqSZj;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (LdXqSZj;LdXqSZj;LdXqSZj;LdXqSZj;LdXqSZj;LdXqSZj;LdXqSZj;Lm(j;Q;L(?may;)LdXqSZj;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)75;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1885, 168, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Utility$JavaWriter";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte)43;
      byteArray0[8] = (byte)50;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2576, (int) (byte) (-56));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)21;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte byte0 = (byte) (-71);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte) (-84);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-226), (int) (byte) (-36), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Utility.format(740, 89, true, '(');
      Utility.setBit(88, 740);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte)88;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte) (-12);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)88, (-326));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "getfield";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getfield");
      String string1 = "long";
      Utility.compactClassName("long");
      Utility.getSignature("long");
      Utility.format((-2367), 102, false, '}');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "long";
      objectArray0[1] = (Object) "}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}-2367";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "getfield";
      Utility.printArray(objectArray0, false);
      Utility.searchOpcode("long, }}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}-2367, null, getfield");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)43;
      Constant[] constantArray0 = new Constant[1];
      String string2 = "\t(wide)";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("\t(wide)");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[0] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 66, (-2967));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.isSet((-19), 59);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-71);
      byteArray0[5] = (byte)8;
      byte byte0 = (byte) (-35);
      byteArray0[6] = (byte) (-35);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), 912);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byte byte0 = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)82;
      byte byte1 = (byte)6;
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte) (-103);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2680), 85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dup_x2
         // 1:    lstore_0
         // 2:    lreturn
         // 3:    lstore_1
         // 4:    d2l
         // 5:    iload_0
         // 6:    dastore
         // 7:    iconst_3
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-3);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 30, 34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.searchOpcode("+2`('6B");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true);
      try { 
        Utility.typeOfSignature("+2`('6B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2`('6B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Utility$JavaWriter";
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Utility$JavaWriter", false);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 157, 157);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-122);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1133, (int) (byte)10, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "Invalid signature: ";
      Utility.decode("Invalid signature: ", false);
      String string1 = "3@cAJa9IU;~0GD)";
      try { 
        Utility.typeOfSignature("3@cAJa9IU;~0GD)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3@cAJa9IU;~0GD)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0rx/Z*qBGMS:");
      String string0 = "G9k";
      try { 
        Utility.typeOfSignature("G9k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G9k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-97);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f");
      byteArray0[1] = (byte) (-42);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-568), 186);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "KF6";
      try { 
        Utility.typeOfSignature("KF6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KF6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)92, (int) (byte) (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 934;
      Utility.setBit(934, 934);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, true);
      Utility.convertString("{\"java.lang.Object@4dd8ad18\", \"java.lang.Object@4b18db89\", \"java.lang.Object@2c50d239\", \"java.lang.Object@6230c3b5\", \"java.lang.Object@6a080286\"}");
      Utility.replace("U/]4", "1aQzXBw|", "ctXIXJrf|(6A&xvc");
      try { 
        Utility.typeOfSignature("U/]4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U/]4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("#k;`9bROM9}qgO].1Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #k;`9bROM9}qgO].1Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "@b1@g.Ay0";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@b1@g.Ay0";
      stringArray0[1] = "@b1@g.Ay0";
      Utility.methodTypeToSignature("@b1@g.Ay0", stringArray0);
      try { 
        Utility.typeOfSignature("@b1@g.Ay0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @b1@g.Ay0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)81;
      byteArray0[0] = (byte)81;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)81, (int) (byte)81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte byte0 = (byte) (-20);
      byteArray0[0] = (byte) (-20);
      byte byte1 = (byte)122;
      byteArray0[1] = (byte)122;
      byte byte2 = (byte) (-37);
      byteArray0[2] = (byte) (-37);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-37), 80);
      Utility.compactClassName("0:    <illegal opcode>\n1:    ishr\n2:    <illegal opcode>\n", true);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = Utility.getSignature("goto_w");
      assertEquals("Lgoto_w;", string0);
      
      int int0 = Utility.setBit(210, 34);
      assertEquals(214, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte) (-114);
      byteArray0[7] = (byte) (-88);
      byteArray0[8] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_3", string1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = Utility.decode("/1$)=`iDu+gH%5,4l,", false);
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";x1??sfn");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-18));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("ifnull");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(23, (byte) (-118));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("bastore", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("java.lang.h.F#c!6}.");
      Object[] objectArray0 = new Object[7];
      mockPrintStream0.flush();
      objectArray0[0] = (Object) mockPrintStream0;
      objectArray0[1] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      mockPrintStream0.print((Object) "java.lang.h.F#c!6}.");
      mockPrintStream0.println(634.8371);
      mockPrintStream0.println("istore");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.lang.h.F#c!6}.");
      objectArray0[3] = (Object) "java.lang.h.F#c!6}.";
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) mockPrintStream0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      String string0 = Utility.compactClassName("java.lang.h.F#c!6}.");
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "Unreachable default case reached!";
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)75;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 1885, 168, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utility.getSignature("fcmpl");
      Utility.compactClassName("2j}~1y");
      int int0 = 172;
      boolean boolean0 = false;
      Utility.accessToString(172, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)10, 32, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.compactClassName("jsr_w");
      Utility.convertString("jsr_w");
      String string0 = ">\t";
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-&FoANo4a-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -&FoANo4a-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Utility.compactClassName("hzg^`R", "hzg^`R", false);
      Utility.compactClassName("hzg^`R", false);
      Utility.decode("hzg^`R", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)6;
      byteArray0[0] = (byte)38;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-19);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)6, (int) (byte) (-63), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = true;
      Utility.fillup("putstatic", 88, true, '_');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte) (-52);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 82, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)30;
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)42;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-86);
      byteArray1[1] = (byte)42;
      byteArray1[2] = (byte)42;
      byteArray1[3] = (byte)30;
      Utility.equals(byteArray0, byteArray1);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      int int0 = 1518;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)42, 1518);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, false);
      Utility.printArray(objectArray0, false);
      boolean boolean0 = true;
      Utility.printArray(objectArray0, false, true);
      try { 
        Utility.typeOfSignature("\"java.lang.Object@11b55954\", \"java.lang.Object@3ac01d40\", \"java.lang.Object@34d6127f\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"java.lang.Object@11b55954\", \"java.lang.Object@3ac01d40\", \"java.lang.Object@34d6127f\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Utility.setBit(0, 144);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      Utility.encode(byteArray0, false);
      Utility.convertString("$3f");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 144, (int) (byte)63);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0, true);
      Utility.getSignature("\n     Method Arguments:");
      try { 
        Utility.methodSignatureArgumentTypes("(ctwM Yr)EQ1sB;%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ctwM Yr)EQ1sB;%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "*YlQ&(`'g";
      try { 
        Utility.typeOfSignature("*YlQ&(`'g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YlQ&(`'g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = Utility.convertString("\n     Method Arguments:");
      assertEquals("\\n     Method Arguments:", string0);
      
      String string1 = Utility.classOrInterface(0);
      assertEquals("class", string1);
      
      String string2 = Utility.format((-3165), 121, false, 'E');
      assertEquals("EEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE-3165", string2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Utility.setBit(256, 3720);
      Utility.compactClassName("return");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)80;
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte) (-39);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1656, (int) (byte) (-17));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<N$*fNzxWZ$A");
      Utility.decode("F:{IGQX:oI4G:XeTS", false);
      Utility.typeOfSignature("F:{IGQX:oI4G:XeTS");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "F");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("F", "F", "F&h", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-43);
      byteArray0[7] = (byte)5;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-46), (int) (byte) (-80), true);
      assertEquals("0:    dstore_1\n1:    areturn\n2:    l2d\n3:    <illegal opcode>\n4:    goto\t\t#2521\n7:    iconst_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = (byte)83;
      byteArray0[0] = (byte)83;
      byte byte1 = (byte) (-5);
      byteArray0[1] = (byte) (-5);
      byte byte2 = (byte)103;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-13);
      Utility.encode(byteArray0, false);
      Utility.signatureToString("S$fbgQ$f3");
      Utility.decode("S$fbgQ$f3", false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("short", "S$fbgQ$f3");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // S$fbgQ$f3
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = Utility.fillup(", high = ", (-2150), false, '8');
      assertEquals(", high = ", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('8');
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)25;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("d2i", string1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Utility.methodSignatureReturnType("J!g#u3");
      try { 
        Utility.methodSignatureArgumentTypes("'OuY,}NL3]tC", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'OuY,}NL3]tC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte) (-91);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.replace("/L *Z:_f", "newarray", "/L *Z:_f");
      try { 
        Utility.methodSignatureReturnType("WKL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WKL'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "-wvdE},D _2z,dP[$";
      boolean boolean0 = false;
      Utility.decode("-wvdE},D _2z,dP[$", false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "-wvdE},D _2z,dP[$";
      objectArray0[1] = (Object) "-wvdE},D _2z,dP[$";
      objectArray0[2] = (Object) "-wvdE},D _2z,dP[$";
      objectArray0[3] = (Object) "-wvdE},D _2z,dP[$";
      Utility.printArray(objectArray0);
      char char0 = '3';
      Utility.isJavaIdentifierPart('3');
      String string1 = "{SSY";
      try { 
        Utility.methodSignatureReturnType("{SSY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{SSY'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)107;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 74, 11, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = ")Y@.OA<F|{VP:?LI\"";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType(")Y@.OA<F|{VP:?LI\"", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y@.OA<F|{VP:?LI\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Utility.typeOfSignature("J^AGl?!,");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "long";
      objectArray0[1] = (Object) "J^AGl?!,";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "J^AGl?!,";
      objectArray0[4] = (Object) null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte)11;
      Utility.equals(byteArray0, byteArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "long";
      stringArray0[1] = "J^AGl?!,";
      Utility.methodTypeToSignature("J^AGl?!,", stringArray0);
      Utility.compactClassName("(JLJ^AGl?!,;)LJ^AGl?!,;", false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1476, (int) (byte)11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "Q2-/?La!]s";
      try { 
        Utility.methodSignatureReturnType("Q2-/?La!]s", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q2-/?La!]s'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "void");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte) (-81);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2274), (-2155), false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      Utility.printArray(objectArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("null", "3[pP |8Rvd/SIt", "3[pP |8Rvd/SIt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Utility.methodSignatureReturnType("ZKN-o.bRpc,o", false);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("[,w.&;SMSfM", "boolean");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // boolean
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)93;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "q#gbi7<{#.PlZCJ=)T$");
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte) (-54);
      byteArray0[7] = (byte) (-9);
      byteArray0[8] = (byte)89;
      boolean boolean0 = false;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2784), (int) (byte) (-43), false);
      try { 
        Utility.methodSignatureArgumentTypes("0:    fstore_0\n1:    fstore_2\n2:    dup_x1\n3:    dup2_x1\n4:    <illegal opcode>\n5:    dload_1\n6:    breakpoint\n7:    <illegal opcode>\n8:    dup\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    fstore_0
         // 1:    fstore_2
         // 2:    dup_x1
         // 3:    dup2_x1
         // 4:    <illegal opcode>
         // 5:    dload_1
         // 6:    breakpoint
         // 7:    <illegal opcode>
         // 8:    dup
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Utility.isJavaIdentifierPart('j');
      String string0 = "if_icmpge";
      Utility.searchOpcode("if_icmpge");
      Utility.compactClassName("$<!nE!JLGkF7[]|PoL-");
      try { 
        Utility.typeOfSignature("$<!nE!JLGkF7[]|PoL-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $<!nE!JLGkF7[]|PoL-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Utility.isJavaIdentifierPart('6');
      String string0 = Utility.fillup("P#e%Pt:*uxSJ{V`bFx", 2572, true, '6');
      Utility.compactClassName(string0);
      Utility.searchOpcode("eUDsJ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.isJavaIdentifierPart('{');
      Utility.decode(string0, false);
      try { 
        Utility.methodSignatureReturnType("P#e%Pt:*uxSJ{V`bFx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P#e%Pt:*uxSJ{V`bFx'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Utility.compactClassName("hzg^`R", "hzg^`R", false);
      Utility.compactClassName("hzg^`R", false);
      Utility.decode("hzg^`R", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-19);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)6, (int) (byte) (-63), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.convertString("'~n&5-[s)|<y?Q1?{");
      Utility.accessToString(59, false);
      Utility.classOrInterface(59);
      Utility.setBit(59, 486);
      Utility.searchOpcode("class");
      try { 
        Utility.methodSignatureReturnType("dcmpl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `dcmpl'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "Exceptions: ";
      try { 
        Utility.methodSignatureReturnType("Exceptions: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Exceptions: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)41;
      Utility.equals(byteArray0, byteArray0);
      Utility.getSignature("putstatic");
      try { 
        Utility.typeOfSignature("Q86d3bZt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q86d3bZt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      String string0 = "Invalid signature: `";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Invalid signature: `");
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)94;
      byteArray0[5] = (byte) (-53);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)94, 1581);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.format(47, 75, true, 'f');
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte) (-93);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-17), 40, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-9);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[0] = (Constant) constantMethodref1;
      ConstantLong constantLong0 = new ConstantLong(1553L);
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("ddiv", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Utility.accessToString(784);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte) (-33);
      byteArray0[8] = (byte)70;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)70, 784, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "J^AGl?!,";
      Utility.typeOfSignature("J^AGl?!,");
      File file0 = null;
      File file1 = MockFile.createTempFile("J^AGl?!,", "long", (File) null);
      String string1 = ", low = ";
      MockFile mockFile0 = new MockFile(file1, ", low = ");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "J^AGl?!,");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // J^AGl?!,
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-66);
      byteArray0[5] = (byte)13;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)13, 1405, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[LLZ:5-C!-A;V";
      stringArray0[1] = "[LLZ:5-C!-A;V";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[LLZ:5-C!-A;V", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [LLZ:5-C!-A;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Utility.fillup("T<g459ti0Q", 66, false, 'Y');
      Object[] objectArray0 = new Object[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[0] = (Object) "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYT<g459ti0Q";
      objectArray0[1] = (Object) "T<g459ti0Q";
      objectArray0[2] = (Object) "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYT<g459ti0Q";
      objectArray0[3] = (Object) "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYT<g459ti0Q";
      objectArray0[4] = (Object) "T<g459ti0Q";
      objectArray0[5] = (Object) "T<g459ti0Q";
      objectArray0[6] = (Object) "T<g459ti0Q";
      Utility.printArray(objectArray0);
      Utility.getSignature("T<g459ti0Q");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)83, (int) (byte)123, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = Utility.convertString("4!1{mfv[_TTc3cY=1");
      assertEquals("4!1{mfv[_TTc3cY=1", string0);
      
      Utility.compactClassName("4!1{mfv[_TTc3cY=1", false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "4!1{mfv[_TTc3cY=1";
      objectArray0[1] = (Object) "4!1{mfv[_TTc3cY=1";
      objectArray0[2] = (Object) "4!1{mfv[_TTc3cY=1";
      objectArray0[3] = (Object) "4!1{mfv[_TTc3cY=1";
      objectArray0[4] = (Object) "4!1{mfv[_TTc3cY=1";
      objectArray0[5] = (Object) "4!1{mfv[_TTc3cY=1";
      objectArray0[6] = (Object) "4!1{mfv[_TTc3cY=1";
      Object object0 = new Object();
      objectArray0[7] = object0;
      objectArray0[8] = (Object) "4!1{mfv[_TTc3cY=1";
      String string1 = Utility.printArray(objectArray0, false);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte) (-10);
      byteArray0[8] = (byte)85;
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-4618), (int) (byte) (-10), true);
      assertEquals("0:    astore_3\n1:    lxor\n2:    iconst_3\n3:    dup_x2\n4:    <illegal opcode>\n5:    dcmpl\n6:    monitorexit\n7:    <illegal opcode>\n8:    castore\n", string2);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "LZ:5-C!-A[]R");
      boolean boolean0 = true;
      Utility.compactClassName("LZ:5-C!-A[]R", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\n";
      stringArray0[1] = "LZ:5-C!-A[]R";
      stringArray0[2] = "LZ:5-C!-A[]R";
      stringArray0[3] = "LZ:5-C!-A[]R";
      stringArray0[4] = "LZ:5-C!-A[]R";
      stringArray0[5] = "LZ:5-C!-A[]R";
      stringArray0[6] = "LZ:5-C!-A[]R";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("#n{oDy5h[", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Utility.setBit(1589, 1589);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)52;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 82, (-1142435747), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)13;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "invokevirtual");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("dup_x1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dup_x1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string0 = "V";
      Utility.typeOfSignature("V");
      String string1 = "6>Z%_jQ";
      // Undeclared exception!
      try { 
        Utility.signatureToString("6>Z%_jQ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `6>Z%_jQ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      File file0 = MockFile.createTempFile("double", "double");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(3L, file0.length());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantClass constantClass0 = new ConstantClass(1702);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)48);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-3292), (byte)115);
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantString constantString0 = new ConstantString(byteSequence0);
      constantArray0[3] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("faload", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      try { 
        Utility.typeOfSignature("?DV4W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?DV4W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = false;
      Utility.fillup("if_icmpge", 82, false, 'n');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)16;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.getSignature("j};/[5ZH<9I^@.H[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[5ZH<9I^@.H[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";}?d0yCx>]y@hXh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;}?d0yCx>]y@hXh
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-64);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\b");
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-32);
      byteArray0[7] = (byte) (-43);
      byteArray0[8] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readInt();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      try { 
        Utility.typeOfSignature("AxjvGu6u|@So$m,7$=k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AxjvGu6u|@So$m,7$=k
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-102);
      byteArray0[8] = (byte) (-106);
      Constant[] constantArray0 = new Constant[4];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-102), (byte) (-106));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("arraylength");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-102));
      constantArray0[2] = (Constant) constantDouble0;
      ConstantUtf8 constantUtf8_2 = ConstantUtf8.getInstance("Invalid method signature: ");
      constantArray0[3] = (Constant) constantUtf8_2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 189, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lsub
         // 1:    fload_0
         // 2:    jsr\t\t#142
         // 5:    <illegal opcode>
         // 6:    nop
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Utility.compactClassName("N`[lYk^fo", true);
      Utility.clearBit(2237, 72);
      Utility.fillup("N`[lYk^fo", (-701), true, '');
      try { 
        Utility.typeOfSignature("N`[lYk^fo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N`[lYk^fo
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("The suffix must not be null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: The suffix must not be null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("LS^UF#rxy_.dBz<}", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LS^UF#rxy_.dBz<}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = false;
      Utility.format(165, 165, false, ' ');
      String string0 = "MBZp%Ng}IcC";
      try { 
        Utility.methodSignatureReturnType("MBZp%Ng}IcC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MBZp%Ng}IcC'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Utility.format((-973), (-747), false, ' ');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-43);
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((-1L));
      constantArray0[0] = (Constant) constantLong0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      ConstantLong constantLong1 = new ConstantLong((-973));
      constantArray0[2] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 45, (int) (byte)85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", offset delta=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , offset delta=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "R3U'Jza^p}w@gIE";
      try { 
        Utility.methodSignatureReturnType("R3U'Jza^p}w@gIE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R3U'Jza^p}w@gIE'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Utility.convertString("Ofk2o4`5xd/");
      Utility.getSignature("{t!`Km7h(J:7C7%ND");
      Utility.classOrInterface(47);
      try { 
        Utility.methodSignatureReturnType("Ofk2o4`5xd/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ofk2o4`5xd/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Utility.classOrInterface(2087);
      boolean boolean0 = true;
      Utility.fillup("Double", 556, true, '1');
      Utility.compactClassName("Double");
      Utility.accessToString(556);
      Utility.compactClassName("Double", "Zjg!]Qs`", true);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "protected static synchronized interface";
      objectArray0[1] = (Object) "Double
      objectArray0[2] = (Object) "Double";
      objectArray0[3] = (Object) "Zjg!]Qs`";
      objectArray0[4] = (Object) "Double
      objectArray0[5] = (Object) "class";
      objectArray0[6] = (Object) "class";
      objectArray0[7] = (Object) "class";
      boolean boolean1 = false;
      Utility.printArray(objectArray0, true, false);
      Utility.searchOpcode("invokeinterface");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Double", "\t(wide)", "Double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Utility.isJavaIdentifierPart('{');
      Utility.isJavaIdentifierPart('{');
      String string0 = ".jar";
      try { 
        Utility.typeOfSignature(".jar");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .jar
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.setBit((-1339), (-1339));
      Utility.format((-1339), (-1339), false, 't');
      try { 
        Utility.typeOfSignature("6&W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6&W
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "L_0=_Xo~X#*";
      // Undeclared exception!
      try { 
        Utility.signatureToString("L_0=_Xo~X#*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L_0=_Xo~X#*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-26);
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)106;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)106, (int) (byte) (-26), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")n\"WKiJw[a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )n\"WKiJw[a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = "vOV6*.gL/fCV{_";
      MockFile mockFile0 = new MockFile("vOV6*.gL/fCV{_");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockFile0.setWritable(true, true);
      PrintStream printStream0 = mockPrintStream1.append('c');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockPrintStream1;
      objectArray0[1] = (Object) mockPrintStream1;
      objectArray0[2] = (Object) "vOV6*.gL/fCV{_";
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockPrintStream1.print((Object) printStream0);
      objectArray0[3] = (Object) mockPrintStream1;
      Utility.printArray(printStream0, objectArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vOV6*.gL/fCV{_");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)63;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)1, (int) (byte)1, true);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Utility.format(122, 122, false, 'H');
      // Undeclared exception!
      try { 
        Utility.signatureToString("HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH122", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH122'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.searchOpcode("\t(wide)");
      Utility.isSet((-756), (short) (-1));
      Utility.getSignature("\t(wide)");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "\t(wide)";
      Object object0 = new Object();
      objectArray0[2] = object0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      Utility.getSignature("\t(wide)");
      try { 
        Utility.typeOfMethodSignature("ev");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ev
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte) (-32);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)71;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-32);
      byteArray1[3] = (byte)71;
      byteArray1[4] = (byte)71;
      byteArray1[5] = (byte)18;
      byteArray1[6] = (byte)71;
      byteArray1[7] = (byte)0;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "impdep1");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ifle");
      try { 
        Utility.typeOfSignature("H<<n[z3EqWxKI6EXeH}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H<<n[z3EqWxKI6EXeH}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = "BZ%";
      Utility.typeOfSignature("BZ%");
      Utility.isJavaIdentifierPart('*');
      Utility.methodSignatureReturnType("BZ%");
      try { 
        Utility.typeOfSignature("byte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = 1656;
      Utility.setBit(1656, 1656);
      Utility.signatureToString("CygR?7]", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("G3wH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G3wH'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Utility.fillup("X$>IRP$,/>;S", 75, true, 'u');
      boolean boolean0 = false;
      Utility.compactClassName("X$>IRP$,/>;Suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", "X$>IRP$,/>;Suuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", false);
      Utility.compactClassName("2?5VWI2UC", false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.isJavaIdentifierPart('_');
      try { 
        Utility.methodSignatureReturnType("2?5VWI2UC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `2?5VWI2UC'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.decode("$a_G%C[", true);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"a\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Utility.accessToString(159, true);
      Utility.fillup("public private protected static final transient", 2451, false, 'b');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-21);
      byteArray0[5] = (byte)55;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("istore\t\t%57", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)90;
      Utility.encode(byteArray0, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.classOrInterface(1268);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" (", "class", "dload_2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)126;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 23, (int) (byte)126);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.ConstantDouble");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.format(77, 77, true, '.');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, true);
      try { 
        Utility.typeOfSignature("77...........................................................................");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 77...........................................................................
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)123;
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)8;
      byte byte1 = (byte)108;
      byteArray0[3] = (byte)108;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)8, (int) (byte)123, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.getSignature("long");
      String string0 = "5J9L+RG";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J");
      // Undeclared exception!
      try { 
        Utility.signatureToString("5J9L+RG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `5J9L+RG'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int int0 = (-1346);
      Utility.setBit((-1346), 45);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Utility.convertString("MBZp%Ng}IcC");
      try { 
        Utility.typeOfSignature("MBZp%Ng}IcC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MBZp%Ng}IcC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = "DaNq.GpE";
      Utility.signatureToString("DaNq.GpE");
      int int0 = (-1104);
      Utility.isSet((-1104), 1023);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      objectArray0[2] = (Object) "DaNq.GpE";
      objectArray0[3] = (Object) "double";
      objectArray0[4] = (Object) "double";
      objectArray0[5] = (Object) "DaNq.GpE";
      Utility.printArray(objectArray0, true);
      MockFile mockFile0 = new MockFile("pJ~lw");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "double");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // double
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Utility.accessToString((-1268));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)52;
      Utility.toHexString(byteArray0);
      Utility.accessToString((-283), true);
      Utility.getSignature("tableswitch");
      Utility.decode("public protected volatile transient abstract strictfp synthetic annotation enum", false);
      Utility.classOrInterface(2727);
      try { 
        Utility.typeOfMethodSignature("Ltableswitch;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ltableswitch;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Utility.fillup("java.lang.()LAVD;", 171, false, '!');
      Utility.setBit(171, 171);
      MockPrintStream mockPrintStream0 = new MockPrintStream("/%rZa");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!java.lang.()LAVD;";
      objectArray0[1] = (Object) "java.lang.()LAVD;";
      objectArray0[2] = (Object) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!java.lang.()LAVD;";
      objectArray0[3] = (Object) "/%rZa";
      objectArray0[4] = (Object) "/%rZa";
      objectArray0[5] = (Object) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!java.lang.()LAVD;";
      objectArray0[6] = (Object) "java.lang.()LAVD;";
      objectArray0[7] = (Object) "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!java.lang.()LAVD;";
      PrintStream printStream0 = mockPrintStream0.format("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!java.lang.()LAVD;", objectArray0);
      mockPrintStream0.checkError();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0, false);
      mockPrintWriter0.print((long) 171);
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-84);
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte)41;
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(197, 171);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)41, 256);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("AVD", stringArray0);
      Utility.compactClassName("()LAVD;");
      boolean boolean0 = false;
      Utility.format(1683, 1683, false, 'O');
      try { 
        Utility.methodSignatureReturnType("KT4lmD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KT4lmD'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8xR}V{m 7T=t: S9");
      Utility.isSet(175, 175);
      Utility.compactClassName("anewarray");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte) (-124);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-2214), 3072);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ldiv
         // 1:    dup2_x2
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&c@");
      try { 
        Utility.typeOfSignature("&c@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &c@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)45;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.clearBit(97, 5);
      boolean boolean0 = false;
      Utility.compactClassName("double", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("double");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `double'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$JavaWriter", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-94);
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.searchOpcode("#4^/>%zTplim^+P6");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)34;
      String string0 = Utility.toHexString(byteArray0);
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, true);
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "Q$o";
      objectArray0[1] = (Object) "Q$o";
      objectArray0[2] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[3] = (Object) (byte)81;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "51 22";
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) fileSystemHandling0;
      objectArray0[8] = (Object) "#4^/>%zTplim^+P6";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Utility.isSet(76, 76);
      String string0 = "X$r/).[hr";
      // Undeclared exception!
      try { 
        Utility.signatureToString("X$r/).[hr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `X$r/).[hr'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Utility.accessToString(89, false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "public static final volatile";
      Utility.printArray(objectArray0, false);
      Utility.typeOfSignature("System");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("System", false);
      Utility.compactClassName("getstatic", "System", false);
      Utility.encode(byteArray0, true);
      Utility.isJavaIdentifierPart('`');
      try { 
        Utility.typeOfMethodSignature("instanceof");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: instanceof
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("org.apache.bcel.classfile.RuntimeInvisibleParameterAnnotations");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)69, (-347));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      ConstantUtf8.getInstance("if_icmple");
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-35), 67, false);
      assertEquals("0:    istore_1\n1:    dstore_2\n2:    fstore_3\n3:    <illegal opcode>\n4:    swap\n5:    aload_3\n6:    fstore_2\n", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 96, 93, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Utility.isJavaIdentifierPart('2');
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0);
      try { 
        Utility.methodSignatureReturnType("{java.lang.Object@176106a1, java.lang.Object@36283597, java.lang.Object@154db306, java.lang.Object@5851fa2d, java.lang.Object@479abb88, java.lang.Object@30e9ba61, java.lang.Object@4844faf9, java.lang.Object@1f93f14e, java.lang.Object@d475fcf}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{java.lang.Object@176106a1, java.lang.Object@36283597, java.lang.Object@154db306, java.lang.Object@5851fa2d, java.lang.Object@479abb88, java.lang.Object@30e9ba61, java.lang.Object@4844faf9, java.lang.Object@1f93f14e, java.lang.Object@d475fcf}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)1;
      Utility.toHexString(byteArray0);
      File file0 = MockFile.createTempFile("Illegal type: ", "Visiting non-standard PMGClass object");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.println((int) (byte)1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Visiting non-standard PMGClass object");
      mockPrintStream0.write(92);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "23 01");
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      mockPrintStream1.println('%');
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintStream) mockPrintStream1, objectArray0);
      Utility.getSignature("23 01");
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-65);
      Constant[] constantArray0 = new Constant[4];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((-47), 98);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantString constantString0 = new ConstantString((byte)42);
      constantArray0[1] = (Constant) constantString0;
      ConstantString constantString1 = new ConstantString(231);
      constantArray0[2] = (Constant) constantString1;
      Constant constant0 = constantString1.copy();
      constantArray0[3] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 224, (int) (byte)34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "if_icmplt";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "if_icmplt");
      Utility.compactClassName("y", false);
      String string1 = "Invalid constant pool reference: ";
      Utility.convertString("Invalid constant pool reference: ");
      Utility.typeOfSignature("Invalid constant pool reference: ");
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("y", "y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"y\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.getSignature("aVF7u|)eOAyq#Y");
      Utility.accessToString((-1671));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "aVF7u|)eOAyq#Y";
      stringArray0[1] = "aVF7u|)eOAyq#Y";
      stringArray0[2] = " }9<_,";
      Utility.methodTypeToSignature("org.apache.commons.io.filefilter.OrFileFilter", stringArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("public static final synchronized volatile native strictfp synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `public static final synchronized volatile native strictfp synthetic annotation enum'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      byte byte0 = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)8;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)3;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), (int) (byte) (-74), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Uh#MzhQ**", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Uh#MzhQ**'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-95), (int) (byte) (-95));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Utility.replace("R4W(Wr(Jc`;8-!+bgk", "q+%P", "R4W(Wr(Jc`;8-!+bgk");
      Utility.printArray((Object[]) null, false, false);
      Utility.printArray((Object[]) null, false);
      Utility.searchOpcode("Fz<6[PVJ^o");
      Utility.classOrInterface((-2468));
      String string0 = ")@i([1c5Ke+>Z!DPiVq";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.compactClassName(")@i([1c5Ke+>Z!DPiVq", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-86);
      byte[] byteArray1 = new byte[0];
      Utility.equals(byteArray0, byteArray1);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dadd", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString(4153, true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "public static final synthetic";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[1] = "public static final synthetic";
      stringArray0[2] = "public static final synthetic";
      stringArray0[3] = "public static final synthetic";
      Utility.methodTypeToSignature("public static final synthetic", stringArray0);
      try { 
        Utility.decode("java.lang.", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = "Or";
      try { 
        Utility.typeOfSignature("Or");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Or
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = Utility.classOrInterface(394);
      assertEquals("class", string0);
      
      String string1 = Utility.methodSignatureReturnType("V");
      assertEquals("void", string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "class";
      String string2 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"class\"", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.fillup("<init>", (-2028), true, '~');
      Utility.methodTypeToSignature("azLV^#;g~LcHfbX:,h", (String[]) null);
      MockFile mockFile0 = new MockFile("<init>");
      MockFile mockFile1 = new MockFile(mockFile0, "<init>");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "azLV^#;g~LcHfbX:,h";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "azLV^#;g~LcHfbX:,h";
      objectArray0[3] = (Object) "<init>";
      Object object1 = new Object();
      objectArray0[4] = object1;
      Object object2 = new Object();
      objectArray0[5] = object2;
      objectArray0[6] = (Object) "<init>";
      objectArray0[7] = (Object) "()LazLV^#;g~LcHfbX:,h;";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-47);
      Utility.toHexString(byteArray0);
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]!JQ");
      Object[] objectArray0 = new Object[3];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      Utility.printArray(objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("]!JQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]!JQ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      char char0 = 'z';
      Utility.isJavaIdentifierPart('z');
      String string0 = "int";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("int", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `int'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = "IL(Z^:^2\\qfB";
      Utility.compactClassName("IL(Z^:^2qfB", "IL(Z^:^2qfB", true);
      Utility.methodSignatureReturnType("IL(Z^:^2qfB");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.signatureToString("V?R#)=2");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "V?R#)=2");
      byte byte0 = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)118;
      byteArray0[6] = (byte) (-97);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[1] = object3;
      Object object4 = new Object();
      objectArray0[5] = object4;
      Object object5 = new Object();
      objectArray0[6] = object5;
      Object object6 = new Object();
      objectArray0[7] = object6;
      Object object7 = new Object();
      Utility.printArray(objectArray0, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("java.lang.Object@69851749, java.lang.Object@73d42e38, java.lang.Object@7c58e995, null, null, java.lang.Object@400ee3bb, java.lang.Object@1f08bac, java.lang.Object@5387d044, null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.Object@69851749, java.lang.Object@73d42e38, java.lang.Object@7c58e995, null, null, java.lang.Object@400ee3bb, java.lang.Object@1f08bac, java.lang.Object@5387d044, null'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = Utility.convertString("MBZp%Ng}IcC");
      assertEquals("MBZp%Ng}IcC", string0);
      
      byte byte0 = Utility.typeOfSignature("Bsl2ZN/v+9GPP;[?(");
      assertEquals((byte)8, byte0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "MBZp%Ng}IcC";
      String string1 = Utility.methodTypeToSignature("MBZp%Ng}IcC", stringArray0);
      assertEquals("(LMBZp%Ng}IcC;)LMBZp%Ng}IcC;", string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$I$I$I", string2);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString(56, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("char", "char", "static final");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: char
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Utility.getSignature("y*2?cNx,xH");
      int int0 = 551;
      Utility.accessToString(551);
      String string0 = "<Unknown>";
      try { 
        Utility.typeOfSignature("<Unknown>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <Unknown>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = Utility.classOrInterface(1590);
      assertEquals("interface", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(;m%H!RWf}vWCW#Wd");
      Utility.compactClassName("", "", true);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      
      boolean boolean0 = Utility.isSet(2506, (-777));
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertFalse(boolean1 == boolean0);
      
      String string1 = Utility.replace("ma&}iyWp+[nE(C.", "java.lang.Object@5df4bf40, java.lang.Object@7d7af892, java.lang.Object@1ab602e0, java.lang.Object@707b4a4a, java.lang.Object@80df5ba, java.lang.Object@22992241, java.lang.Object@81285f0, java.lang.Object@2291b7a2, java.lang.Object@4556266f", "\\");
      assertEquals("ma&}iyWp+[nE(C.", string1);
      
      String string2 = Utility.getSignature("");
      assertEquals("L;", string2);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = (-2095);
      int int1 = 16;
      Utility.isSet((-2095), 16);
      int int2 = 4294;
      Utility.fillup("byte", 4294, true, '.');
      // Undeclared exception!
      try { 
        Utility.getSignature("Fz<6[PVJ^o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[PVJ^o
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      
      String string1 = Utility.format(106, (-3171), true, 'e');
      assertEquals("106", string1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Utility.compactClassName("null", false);
      Utility.replace("null", "null", "/#lTQgOI");
      // Undeclared exception!
      try { 
        Utility.signatureToString("/#lTQgOI", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `/#lTQgOI'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      Object object4 = new Object();
      objectArray0[5] = object4;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("{null, null, null, \"java.lang.Object@5d07969c\", \"java.lang.Object@3f2fbf35\", \"java.lang.Object@6bbc5a84\"}", "{null, null, null, \"java.lang.Object@5d07969c\", \"java.lang.Object@3f2fbf35\", \"java.lang.Object@6bbc5a84\"}", "_", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {null, null, null, \"java.lang.Object@5d07969c\", \"java.lang.Object@3f2fbf35\", \"java.lang.Object@6bbc5a84\"}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = "}";
      Utility.convertString("}");
      Utility.isJavaIdentifierPart('D');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "}";
      objectArray0[1] = (Object) "}";
      Utility.printArray(objectArray0, true);
      int int0 = (-386);
      Utility.fillup("w*U", (-386), true, 'D');
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.clearBit(213, 213);
      Utility.compactClassName("\\");
      Utility.convertString("\\");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)6;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Utility.fillup("Invalid type: ", 8, false, 'i');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 57897. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-75);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Utility.typeOfSignature("getfield");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: getfield
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = "j_lUMWh";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j_lUMWh");
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, true, true);
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      MockFile mockFile0 = new MockFile("byte");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "{\"java.lang.Object@9ca949c\", \"java.lang.Object@28c8f274\", \"java.lang.Object@6b26bca2\"}");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // {\"java.lang.Object@9ca949c\", \"java.lang.Object@28c8f274\", \"java.lang.Object@6b26bca2\"}
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, true, false);
      try { 
        Utility.methodSignatureArgumentTypes("6|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte) (-96);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)9;
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("ldiv", "B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"B\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, true);
      String string0 = "class";
      Utility.compactClassName("class");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte) (-16);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)10, (int) (byte)55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Utility$1";
      byte[] byteArray0 = Utility.decode("org.apache.bcel.classfile.Utility$1", false);
      Utility.convertString("org.apache.bcel.classfile.Utility$1");
      PipedInputStream pipedInputStream0 = new PipedInputStream(2412);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      mockPrintStream0.append('d');
      // Undeclared exception!
      try { 
        pipedInputStream0.read(byteArray0, (-43), 2412);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)74;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-78);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "eUOf@Rn~$");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      short short0 = Utility.searchOpcode("CONSTANT_Methodref");
      assertEquals((short) (-1), short0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "CONSTANT_Methodref";
      stringArray0[1] = "PMGClass(";
      stringArray0[2] = "eUOf@Rn~$";
      stringArray0[3] = "PMGClass(";
      Utility.methodTypeToSignature("PMGClass(", stringArray0);
      int int0 = Utility.setBit((-1528), (byte)1);
      assertEquals((-1526), int0);
      
      String string0 = Utility.methodSignatureToString("(LCONSTANT_Methodref;LPMGClass(;LeUOf@Rn~$;LPMGClass(;)LPMGClass(;", "PMGClass(", "PMGClass(", false);
      assertEquals("PMGClass( PMGClass( PMGClass((CONSTANT_Methodref arg1, PMGClass( arg2, eUOf@Rn~$ arg3, PMGClass( arg4)", string0);
      
      Utility.methodTypeToSignature("z6,{HSA-nBBv>2^9C", stringArray0);
      String string1 = Utility.methodTypeToSignature("CONSTANT_Methodref", stringArray0);
      assertEquals("(LCONSTANT_Methodref;LPMGClass(;LeUOf@Rn~$;LPMGClass(;)LCONSTANT_Methodref;", string1);
      
      String string2 = Utility.encode(byteArray0, false);
      assertEquals("$bd$B$beJD$b2", string2);
      
      Utility.encode(byteArray0, true);
      String string3 = Utility.printArray((Object[]) stringArray0, true, false);
      assertEquals("{CONSTANT_Methodref, PMGClass(, eUOf@Rn~$, PMGClass(}", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "e^35^073w2D&9Qh!1";
      try { 
        Utility.typeOfMethodSignature("e^35^073w2D&9Qh!1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: e^35^073w2D&9Qh!1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
