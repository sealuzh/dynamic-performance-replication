/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 11:18:54 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.engine.SessionRemote;
import org.h2.jdbc.JdbcSQLException;
import org.h2.tools.SimpleResultSet;
import org.h2.value.ValueLobDb;
import org.hsqldb.rowio.RowInputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("update", defaultDBTable0, (-3), "update");
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("update", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ic9gM|j$:6H%3X+drx.");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("create table ic9gM|j$:6H%3X+drx. (\n)", charArrayWriter0.toString());
      assertEquals(36, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.isProcedureCall("select into");
      boolean boolean0 = SQLUtil.isQuery("select into");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "select into";
      stringArray0[1] = "select into";
      stringArray0[2] = "select into";
      stringArray0[3] = "select into";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "select into";
      stringArray1[1] = "select into";
      stringArray1[2] = "alter index";
      stringArray1[3] = "alter index";
      stringArray1[4] = "select into";
      String string0 = SQLUtil.leftJoin("select into", stringArray0, "select into", "alter index", stringArray1);
      assertEquals("left join select into as alter index on select into.select into = alter index.select into and select into.select into = alter index.select into and select into.select into = alter index.alter index and select into.select into = alter index.alter index", string0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("'28OzF]qSckCn31U");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "W}ez,n[v!l`a%;m1DDH";
      SQLUtil.normalize("W}ez,n[v!l`a%;m1DDH", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider((-1518));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("inserts");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = 97;
      DBDataType dBDataType0 = DBDataType.getInstance(97, "");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      DBConstraint dBConstraint0 = null;
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName(dBCatalog0);
      SQLUtil.isProcedureCall("catalog null");
      String string0 = "6bk/o(-u(T0e) 9";
      SQLUtil.removeComments("6bk/o(-u(T0e) 9");
      String string1 = "0[-4[8";
      boolean boolean0 = false;
      SQLUtil.normalize("0[-4[8", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("6bk/o(-u(T0e) 9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.typeAndName((DBObject) null);
      String string0 = SQLUtil.normalize("(S", true);
      assertEquals("(S", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "(S";
      stringArray0[1] = null;
      stringArray0[2] = ":Y_0f)Sz#1dEw3H";
      stringArray0[3] = "drop materialized view";
      stringArray0[4] = ":Y_0f)Sz#1dEw3H";
      stringArray0[5] = null;
      stringArray0[6] = "(S";
      stringArray0[7] = "(S";
      String string1 = SQLUtil.leftJoin(":Y_0f)Sz#1dEw3H", stringArray0, "%:*MyUO-a,", ":Y_0f)Sz#1dEw3H", stringArray0);
      assertEquals("left join %:*MyUO-a, as :Y_0f)Sz#1dEw3H on :Y_0f)Sz#1dEw3H.(S = :Y_0f)Sz#1dEw3H.(S and :Y_0f)Sz#1dEw3H.null = :Y_0f)Sz#1dEw3H.null and :Y_0f)Sz#1dEw3H.:Y_0f)Sz#1dEw3H = :Y_0f)Sz#1dEw3H.:Y_0f)Sz#1dEw3H and :Y_0f)Sz#1dEw3H.drop materialized view = :Y_0f)Sz#1dEw3H.drop materialized view and :Y_0f)Sz#1dEw3H.:Y_0f)Sz#1dEw3H = :Y_0f)Sz#1dEw3H.:Y_0f)Sz#1dEw3H and :Y_0f)Sz#1dEw3H.null = :Y_0f)Sz#1dEw3H.null and :Y_0f)Sz#1dEw3H.(S = :Y_0f)Sz#1dEw3H.(S and :Y_0f)Sz#1dEw3H.(S = :Y_0f)Sz#1dEw3H.(S", string1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[0] = "eILK5@";
      stringArray0[1] = "eILK5@";
      stringArray0[2] = "eILK5@";
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("alter table:o^`$er+lrxibyvjvv", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      defaultDBTable0.setName("\u0001\u01D7");
      stringArray0[3] = "eILK5@";
      stringArray0[4] = "eILK5@";
      stringArray0[5] = "eILK5@";
      stringArray0[6] = "eILK5@";
      stringArray0[7] = "eILK5@";
      stringArray0[8] = "eILK5@";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "eILK5@", false, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("eILK5@");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("update", true, "update", "SYSCS_IMPORT_TABLE");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT update CHECK SYSCS_IMPORT_TABLE", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = true;
      SQLUtil.normalize("]M2Hc[td{`{Y~t|C/6\"", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("]M2Hc[td{`{Y~t|C/6\"");
      int int0 = 3;
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("execute", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "fq89Z[uzR&sY-{n}$R9";
      stringArray0[1] = "\u0001\u00AF";
      stringArray0[2] = "\u0001\u00AF";
      stringArray0[3] = "\u0001\u00AF";
      stringArray0[4] = "\u0001\u00AF";
      String string0 = "select:o^`$er+lrxibyvjvv";
      SQLUtil.leftJoin("\u0001\u00AF", stringArray0, "select:o^`$er+lrxibyvjvv", "COMMENT", stringArray0);
      SQLUtil.isDML("left join select:o^`$er+lrxibyvjvv as COMMENT on \u0001\u00AF.fq89Z[uzR&sY-{n}$R9 = COMMENT.fq89Z[uzR&sY-{n}$R9 and \u0001\u00AF.\u0001\u00AF = COMMENT.\u0001\u00AF and \u0001\u00AF.\u0001\u00AF = COMMENT.\u0001\u00AF and \u0001\u00AF.\u0001\u00AF = COMMENT.\u0001\u00AF and \u0001\u00AF.\u0001\u00AF = COMMENT.\u0001\u00AF");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("execcw;(w2k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: execcw;(w2k
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "TH+vGT";
      stringArray0[1] = "TH+vGT";
      stringArray0[2] = "TH+vGT";
      stringArray0[3] = "TH+vGT";
      stringArray0[4] = "TH+vGT";
      stringArray0[5] = "TH+vGT";
      stringArray0[6] = "TH+vGT";
      stringArray0[7] = "TH+vGT";
      String string0 = "*dXjPAh]#m]S";
      SQLUtil.leftJoin("TH+vGT", stringArray0, ")", "*dXjPAh]#m]S", stringArray0);
      boolean boolean0 = true;
      SQLUtil.normalize("left join ) as *dXjPAh]#m]S on TH+vGT.TH+vGT = *dXjPAh]#m]S.TH+vGT and TH+vGT.TH+vGT = *dXjPAh]#m]S.TH+vGT and TH+vGT.TH+vGT = *dXjPAh]#m]S.TH+vGT and TH+vGT.TH+vGT = *dXjPAh]#m]S.TH+vGT and TH+vGT.TH+vGT = *dXjPAh]#m]S.TH+vGT and TH+vGT.TH+vGT = *dXjPAh]#m]S.TH+vGT and TH+vGT.TH+vGT = *dXjPAh]#m]S.TH+vGT and TH+vGT.TH+vGT = *dXjPAh]#m]S.TH+vGT", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*dXjPAh]#m]S");
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '*dXjPAh]#m]S' has no foreign key with the columns (TH+vGT, TH+vGT, TH+vGT, TH+vGT, TH+vGT, TH+vGT, TH+vGT, TH+vGT)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("truncate");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String string0 = ".cS4#PM-&)i^:";
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = ".cS4#PM-&)i^:";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ".cS4#PM-&)i^:", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      dBUniqueConstraint0.equals("truncate");
      dBUniqueIndex0.setName("truncate");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" DEFAULT ");
      mockPrintWriter0.println('4');
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char char0 = 'I';
      Character character0 = new Character('I');
      SQLUtil.renderValue(character0);
      SQLUtil.parseColumnTypeAndSize("'I'");
      String string0 = "ALTER TABLE ";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ALTER TABLE ");
      int int0 = (-949);
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider((-949));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Parameter Index");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "select intocreate materi";
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("DML MOD", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      stringArray0[1] = "Parameter Index";
      stringArray0[2] = "";
      stringArray0[3] = "Parameter Index";
      stringArray0[4] = "Parameter Index";
      stringArray0[5] = "Parameter Index";
      stringArray0[6] = "Parameter Index";
      String string0 = SQLUtil.join("Parameter Index", "Parameter Index", stringArray0, "5", "", stringArray0);
      assertEquals("Parameter Index join 5 as  on Parameter Index.select intocreate materi = .select intocreate materi and Parameter Index.Parameter Index = .Parameter Index and Parameter Index. = . and Parameter Index.Parameter Index = .Parameter Index and Parameter Index.Parameter Index = .Parameter Index and Parameter Index.Parameter Index = .Parameter Index and Parameter Index.Parameter Index = .Parameter Index", string0);
      
      boolean boolean0 = SQLUtil.isDDL("drop table");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-27);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string1 = SQLUtil.renderColumnListWithTableName("Parameter Index", stringArray0);
      assertEquals("Parameter Index.select intocreate materi, Parameter Index.Parameter Index, Parameter Index., Parameter Index.Parameter Index, Parameter Index.Parameter Index, Parameter Index.Parameter Index, Parameter Index.Parameter Index", string1);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      DBSchema dBSchema0 = new DBSchema("Parameter Index join 5 as  on Parameter Index.select intocreate materi = .select intocreate materi and Parameter Index.Parameter Index = .Parameter Index and Parameter Index. = . and Parameter Index.Parameter Index = .Parameter Index and Parameter Index.Parameter Index = .Parameter Index and Parameter Index.Parameter Index = .Parameter Index and Parameter Index.Parameter Index = .Parameter Index");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop table");
      dBSchema0.isIdentical(defaultDBTable0);
      DBPackage dBPackage0 = new DBPackage("materialized", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("Parameter Index.select intocreate materi, Parameter Index.Parameter Index, Parameter Index., Parameter Index.Parameter Index, Parameter Index.Parameter Index, Parameter Index.Parameter Index, Parameter Index.Parameter Index", dBPackage0);
      String string2 = SQLUtil.typeAndName(dBProcedure0);
      assertEquals("procedure Parameter Index.select intocreate materi, Parameter Index.Parameter Index, Parameter Index., Parameter Index.Parameter Index, Parameter Index.Parameter Index, Parameter Index.Parameter Index, Parameter Index.Parameter Index", string2);
      assertNotNull(string2);
      
      SQLUtil.isProcedureCall("procedure Parameter Index.select intocreate materi, Parameter Index.Parameter Index, Parameter Index., Parameter Index.Parameter Index, Parameter Index.Parameter Index, Parameter Index.Parameter Index, Parameter Index.Parameter Index");
      boolean boolean1 = SQLUtil.isProcedureCall("Tb<$HF%&H9Kp");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "%~gZV2zU";
      stringArray0[1] = "alter session";
      stringArray0[2] = "isNullOp";
      stringArray0[3] = "isNullOp";
      stringArray0[4] = "isNullOp";
      stringArray0[5] = "isNullOp";
      SQLUtil.innerJoin("isNullOp", stringArray0, " and ", "isNullOp", stringArray0);
      SQLUtil.mutatesDataOrStructure("alter session");
      SQLUtil.leftJoin("callselect intocreate materialized view", stringArray0, "Ut6sMK)BrW", "isNullOp", stringArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "create unique index");
      SQLUtil.join("create unique index", "left join Ut6sMK)BrW as isNullOp on callselect intocreate materialized view.%~gZV2zU = isNullOp.%~gZV2zU and callselect intocreate materialized view.alter session = isNullOp.alter session and callselect intocreate materialized view.isNullOp = isNullOp.isNullOp and callselect intocreate materialized view.isNullOp = isNullOp.isNullOp and callselect intocreate materialized view.isNullOp = isNullOp.isNullOp and callselect intocreate materialized view.isNullOp = isNullOp.isNullOp", stringArray0, (String) null, "left join Ut6sMK)BrW as isNullOp on callselect intocreate materialized view.%~gZV2zU = isNullOp.%~gZV2zU and callselect intocreate materialized view.alter session = isNullOp.alter session and callselect intocreate materialized view.isNullOp = isNullOp.isNullOp and callselect intocreate materialized view.isNullOp = isNullOp.isNullOp and callselect intocreate materialized view.isNullOp = isNullOp.isNullOp and callselect intocreate materialized view.isNullOp = isNullOp.isNullOp", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("create unique index", stringBuilder0);
      SQLUtil.addOptionalCondition("isNullOp", stringBuilder1);
      assertEquals("create unique index or isNullOp", stringBuilder1.toString());
      
      String string0 = SQLUtil.join("isNullOp", "select ", stringArray0, "%~gZV2zU", "?BApgT", stringArray0);
      assertEquals("isNullOp join %~gZV2zU as ?BApgT on select .%~gZV2zU = ?BApgT.%~gZV2zU and select .alter session = ?BApgT.alter session and select .isNullOp = ?BApgT.isNullOp and select .isNullOp = ?BApgT.isNullOp and select .isNullOp = ?BApgT.isNullOp and select .isNullOp = ?BApgT.isNullOp", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("select intocreate materialized view");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "select intocreate materialized view";
      stringArray0[1] = "select intocreate materialized view";
      stringArray0[2] = "table null";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      stringArray0[3] = " NOT NULL";
      stringArray0[4] = "table null";
      stringArray0[5] = "Y";
      stringArray0[6] = "bC7#u;4pCfCN@";
      stringArray0[7] = " NOT NULL";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " NOT NULL", true, stringArray0);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "truncategg'0-";
      stringArray0[1] = "truncategg'0-";
      stringArray0[2] = "truncategg'0-";
      stringArray0[3] = "truncategg'0-";
      stringArray0[4] = "truncategg'0-";
      stringArray0[5] = "truncategg'0-";
      stringArray0[6] = "XCXA0.S";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("truncategg'0-", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setDoc("n(n/{t!*;v");
      dBForeignKeyConstraint0.setOwner(defaultDBTable0);
      dBForeignKeyConstraint0.equals("XCXA0.S");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.ownerDotComponent(defaultDBTable0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("null", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "z{4.=gK$_F%/";
      stringArray0[1] = "z{4.=gK$_F%/";
      stringArray0[2] = "z{4.=gK$_F%/";
      stringArray0[3] = "z{4.=gK$_F%/";
      stringArray0[4] = "z{4.=gK$_F%/";
      String string0 = SQLUtil.innerJoin("z{4.=gK$_F%/", stringArray0, "create materialized viewm", "z{4.=gK$_F%/", stringArray0);
      assertEquals("create materialized viewm as z{4.=gK$_F%/ on z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
      
      String[] stringArray1 = new String[2];
      stringArray1[0] = "create materialized viewm as z{4.=gK$_F%/ on z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/";
      stringArray1[1] = "drop tablem";
      String string1 = SQLUtil.join(" NULL", "drop tablem", stringArray1, " NULL", "drop tablem", stringArray0);
      assertEquals(" NULL join  NULL as drop tablem on drop tablem.create materialized viewm as z{4.=gK$_F%/ on z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ = drop tablem.z{4.=gK$_F%/ and drop tablem.drop tablem = drop tablem.z{4.=gK$_F%/", string1);
      
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      DBDataType dBDataType0 = DBDataType.getInstance((-1840700267), "z{4.=gK$_F%/");
      Integer integer0 = new Integer((-1032));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("eU`W", (DBTable) null, dBDataType0, integer0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Integer integer1 = new Integer((-1032));
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(" NULL join  NULL as drop tablem on drop tablem.create materialized viewm as z{4.=gK$_F%/ on z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ = drop tablem.z{4.=gK$_F%/ and drop tablem.drop tablem = drop tablem.z{4.=gK$_F%/", (DBTable) null, dBDataType0, integer1);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("create materialized viewm as z{4.=gK$_F%/ on z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/", (DBTable) null, dBDataType0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      Integer integer2 = new Integer(41);
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("mY~7VioC@np\"4&G W", (DBTable) null, dBDataType0, integer2);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      Integer integer3 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn("z{4.=gK$_F%/", (DBTable) null, dBDataType0, integer3);
      dBColumnArray0[4] = (DBColumn) defaultDBColumn4;
      DefaultDBColumn defaultDBColumn5 = new DefaultDBColumn("z", (DBTable) null, dBDataType0, integer1);
      dBColumnArray0[5] = (DBColumn) defaultDBColumn5;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("eU`W,  NULL join  NULL as drop tablem on drop tablem.create materialized viewm as z{4.=gK$_F%/ on z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ = drop tablem.z{4.=gK$_F%/ and drop tablem.drop tablem = drop tablem.z{4.=gK$_F%/, create materialized viewm as z{4.=gK$_F%/ on z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/ and z{4.=gK$_F%/.z{4.=gK$_F%/ = z{4.=gK$_F%/.z{4.=gK$_F%/, mY~7VioC@np\"4&G W, z{4.=gK$_F%/, z", string2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "update";
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      DBSchema dBSchema0 = new DBSchema("update", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      defaultDBTable0.setName((String) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "update";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      dBSchema0.toString();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      String string1 = null;
      // Undeclared exception!
      try { 
        DBDataType.getInstance("update");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.removeComments("truncatenot");
      SQLUtil.renderValue("truncatenot");
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "'$G{oQaU~8";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop indexm");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "truncatenot";
      stringArray0[1] = "'truncatenot'";
      stringArray0[2] = "}i6(bl5%NtT";
      stringArray0[3] = "truncatenot";
      stringArray0[4] = "'truncatenot'";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " REFERENCES ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("truncatenot", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append(2272L);
      // Undeclared exception!
      try { 
        stringBuilder2.deleteCharAt((-999));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -999
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("create materialized view");
      DBPackage dBPackage0 = new DBPackage("lP)-KupUj'3X^4-", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("alter materialized view=true", dBPackage0);
      CompositeDBObject<?> compositeDBObject0 = dBProcedure0.getOwner();
      String string0 = SQLUtil.ownerDotComponent(compositeDBObject0);
      assertEquals("create materialized view.lP)-KupUj'3X^4-", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "6XE#'w+";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6XE#'w+";
      stringArray0[1] = "6XE#'w+";
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("SIGN", 189);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil.join("6XE#'w+", "6XE#'w+", stringArray0, "6XE#'w+", " NULL", stringArray0);
      TableContainer tableContainer0 = new TableContainer("Q0EmD|");
      tableContainer0.getTable("Q0EmD|");
      SQLUtil.typeAndName((DBObject) null);
      SQLUtil.isDML("6XE#'w+");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("6XE#'w+", (DBTable) null, (-1846251562), "6XE#'w+");
      // Undeclared exception!
      try { 
        defaultDBColumn0.getForeignKeyConstraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBColumn", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.substituteMarkers("&o_6", "&o_6", "&o_6");
      SQLUtil.isQuery("create unique index");
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName(dBCatalog0);
      DBTable dBTable0 = null;
      String string0 = ",";
      // Undeclared exception!
      try { 
        DBDataType.getInstance(",");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)126;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T b.*Vc");
      DBDataType dBDataType0 = DBDataType.getInstance(5, "T b.*Vc");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("T b.*Vc", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("&o_6");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "vbZVQ}2-@l";
      SQLUtil.isDML("vbZVQ}2-@l");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "drop table");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "vbZVQ}2-@l";
      stringArray0[1] = "vbZVQ}2-@l";
      stringArray0[2] = "vbZVQ}2-@l";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("vbZVQ}2-@l", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("into", 97);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      char[] charArray0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      // Undeclared exception!
      try { 
        stringBuilder0.append((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize(" or ");
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "drop indexjndy8uuq?76+sa.n.";
      stringArray0[4] = " or ";
      stringArray0[5] = null;
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, " or ", stringArray0[0], stringArray0);
      assertEquals(" or  as null on null.null = null.null and null.null = null.null and null.null = null.null and null.drop indexjndy8uuq?76+sa.n. = null.drop indexjndy8uuq?76+sa.n. and null. or  = null. or  and null.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "3/*X@|";
      // Undeclared exception!
      SQLUtil.isDML("3/*X@|");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DBConstraint dBConstraint0 = null;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "EoCok");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("EoCok", stringBuilder0);
      int int0 = 965;
      String string0 = "k_";
      boolean boolean0 = false;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("k_", false, "EoCok", "k_");
      // Undeclared exception!
      try { 
        stringBuilder1.insert(965, (Object) dBCheckConstraint0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 965
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("&JzF)E");
      dBCatalog0.equals("&JzF)E");
      DBSchema dBSchema0 = new DBSchema("&JzF)E");
      dBCatalog0.addSchema(dBSchema0);
      SQLUtil.ownerDotComponent(dBCatalog0);
      TableContainer tableContainer0 = new TableContainer("&JzF)E", dBCatalog0);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) tableContainer0);
      tableContainer0.getSequences(false, (List<DBSequence>) genericDescriptorList0);
      tableContainer0.getTable("&JzF)E");
      tableContainer0.getTable("&JzF)E");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "ZPq3*I:dFAAKb*p8";
      SQLUtil.normalize("ZPq3*I:dFAAKb*p8", false);
      System.setCurrentTimeMillis(0L);
      String string1 = "2Rx2_[jr";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        DBDataType.getInstance("B%N^\"mg.<sh");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "truncatenopasswords";
      stringArray0[1] = "0$I{;qc7W\\ti(A@)j`";
      stringArray0[2] = "t&#|  JF+";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(truncatenopasswords, 0$I{;qc7W\\ti(A@)j`, t&#|  JF+)", string0);
      
      String string1 = SQLUtil.normalize("+=e<Os%a/$JfJ", true);
      assertEquals("+  = e < Os % a / $ JfJ", string1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.isDML("Unknown constraint type: ");
      SQLUtil.renderValue("Unknown constraint type: ");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Unknown constraint type: ";
      stringArray0[1] = "'Unknown constraint type: '";
      stringArray0[2] = "Unknown constraint type: ";
      stringArray0[3] = "Unknown constraint type: ";
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" Dnc9%");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("'Unknown constraint type: '", defaultDBTable0, 941, " Dnc9%");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("n{v3iJV_a");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "Unknown constraint type: ");
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil.normalize("h2.optimizeDistinct", false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "h2.optimizeDistinct";
      stringArray0[1] = "h2.optimizeDistinct";
      stringArray0[2] = "h2.optimizeDistinct";
      stringArray0[3] = "h2.optimizeDistinct";
      stringArray0[4] = "h2.optimizeDistinct";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.innerJoin("h2.optimizeDistinct", stringArray0, "`H", "1!R??", stringArray0);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      try { 
        simpleResultSet0.getCharacterStream("u-j");
        fail("Expecting exception: JdbcSQLException");
      
      } catch(JdbcSQLException e) {
         //
         // Feature not supported: null [50100-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "create table\")&w";
      SQLUtil.mutatesDataOrStructure("create table\")&w");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = "create materialized view";
      SQLUtil.isDML("create materialized view");
      String string2 = "columnCount<0";
      SQLUtil.isQuery("columnCount<0");
      String string3 = null;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)9;
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)102;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte)9;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      String string0 = " or ";
      SQLUtil.mutatesStructure(" or ");
      DBSchema dBSchema0 = new DBSchema(" or ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" or ", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((int) (byte)78, "t.b5HD]%UP8H:i");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("- ", defaultDBTable0, dBDataType0, (Integer) null, (Integer) null);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DBConstraint dBConstraint0 = null;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "- ");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("T.B5HD]%UP8H:I", defaultDBTable0, dBDataType0, integer0, integer1);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-89593844), (Object) defaultDBColumn1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -89593844
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "CLOB";
      stringArray0[1] = "CLOB";
      stringArray0[2] = "";
      stringArray0[3] = "80000010-00d0-fd77-3ed8-000a0a0b1900";
      stringArray0[4] = "CLOB";
      stringArray0[5] = "CLOB";
      stringArray0[6] = "CLOB";
      stringArray0[7] = "CLOB";
      String string0 = SQLUtil.renderColumnListWithTableName("CLOB", stringArray0);
      assertEquals("CLOB.CLOB, CLOB.CLOB, CLOB., CLOB.80000010-00d0-fd77-3ed8-000a0a0b1900, CLOB.CLOB, CLOB.CLOB, CLOB.CLOB, CLOB.CLOB", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(49, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SQLUtil.mutatesStructure("[q;k.");
      String string0 = "HZ+-HHU6k)*`)9M=Ufp";
      SQLUtil.parseColumnTypeAndSize("HZ+-HHU6k)*`)9M=Ufp");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "HZ+-HHU6k)*`)9M=Ufp";
      stringArray0[1] = "HZ+-HHU6k)*`)9M=Ufp";
      stringArray0[2] = "HZ+-HHU6k)*`)9M=Ufp";
      stringArray0[3] = "[q;k.";
      stringArray0[4] = "[q;k.";
      stringArray0[5] = "HZ+-HHU6k)*`)9M=Ufp";
      stringArray0[6] = "[q;k.";
      stringArray0[7] = "[q;k.";
      stringArray0[8] = "##UnWindowingColumn";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string1 = "j`' JK;";
      SQLUtil.innerJoin("[q;k.", stringArray0, "HZ+-HHU6k)*`)9M=Ufp", "j`' JK;", stringArray0);
      SQLUtil.removeComments("HZ+-HHU6k)*`)9M=Ufp");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "M";
      stringArray0[1] = "M";
      stringArray0[2] = "M";
      stringArray0[3] = "create materialized view";
      stringArray0[4] = "M";
      String string0 = "executenopasswords";
      String string1 = "<D";
      SQLUtil.innerJoin("M", stringArray0, "executenopasswords", "<D", stringArray0);
      SQLUtil.normalize("M", true);
      TableContainer tableContainer0 = new TableContainer("<D");
      String string2 = "J}";
      tableContainer0.getTable("J}");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      try {
        dBForeignKeyConstraint0 = new DBForeignKeyConstraint("M", true, (DBTable) null, stringArray0, (DBTable) null, stringArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // refereeTable is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("drop tablebool_and", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "constraint", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "constraint");
      StringBuffer stringBuffer0 = new StringBuffer("8A>mvPgKW");
      char[] charArray0 = new char[2];
      charArray0[0] = 'M';
      charArray0[1] = ')';
      stringBuffer0.append(charArray0);
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      StringBuilder stringBuilder2 = stringBuilder1.replace(2, 2, "renamebool_and");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder2);
      SQLUtil.addRequiredCondition("T;]Oks25E/|rt]m", stringBuilder0);
      assertEquals("corenamebool_andnstraint8A>mvPgKWM)CONSTRAINT constraint  and T;]Oks25E/|rt]m", stringBuilder0.toString());
      
      String string0 = SQLUtil.join("FIELD_TYPE", "FIELD_TYPE", stringArray0, "renamebool_and", "FIELD_TYPE", stringArray0);
      assertEquals("FIELD_TYPE join renamebool_and as FIELD_TYPE on ", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("prepareCall(", 401);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray1 = new String[7];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "dr{f(Mfstu%6Dc7";
      stringArray1[3] = "y$k>hbxq/";
      stringArray1[4] = "";
      stringArray1[5] = "";
      stringArray1[6] = "()";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", true, stringArray1);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", true, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      // Undeclared exception!
      try { 
        DBDataType.getInstance("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)107;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("CHECK ", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      byteArray0[0] = (byte)107;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      SQLUtil.parseColumnTypeAndSize("~M4.2o0%3#l4");
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Gjt_mc8", true, "~M4.2o0%3#l4", "Gjt_mc8");
      dBCheckConstraint0.toString();
      dBCheckConstraint0.setName("~M4.2o0%3#l4");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      SQLUtil.isProcedureCall("~M4.2o0%3#l4");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "R";
      stringArray0[1] = "R";
      stringArray0[2] = "R";
      stringArray0[3] = "R";
      stringArray0[4] = "R";
      stringArray0[5] = "R";
      stringArray0[6] = "R";
      stringArray0[7] = "R";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "R", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("R", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String string0 = SQLUtil.renderQuery(dBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE R = 'R' AND R = 'R' AND R = 'R' AND R = 'R' AND R = 'R' AND R = 'R' AND R = 'R' AND R = 'R'", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("exec", (DBTable) null, 472, "exec");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("exec EXEC NULL", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("executeindexname");
      SQLUtil.substituteMarkers("V", "7xY'Wm/ K5BU#[E", boolean0);
      String string0 = "insert into ";
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("callindexname", dBSchema0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("call");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "j?`l[9n[G7>t#@X";
      stringArray0[1] = "'";
      stringArray0[2] = "j?`l[9n[G7>t#@X";
      stringArray0[3] = "j?`l[9n[G7>t#@X";
      stringArray0[4] = "j?`l[9n[G7>t#@X";
      stringArray0[5] = "j?`l[9n[G7>t#@X";
      stringArray0[6] = "j?`l[9n[G7>t#@X";
      stringArray0[7] = "j?`l[9n[G7>t#@X";
      stringArray0[8] = "j?`l[9n[G7>t#@X";
      String string0 = "org.databene.jdbacl.model.DBRow";
      SQLUtil.join("j?`l[9n[G7>t#@X", "j?`l[9n[G7>t#@X", stringArray0, "j?`l[9n[G7>t#@X", "org.databene.jdbacl.model.DBRow", stringArray0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("j?`l[9n[G7>t#@X");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("L}>h~1[PwCcwI/C", "'", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("j?`l[9n[G7>t#@X", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'j?`l[9n[G7>t#@X'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "INDEXNAME";
      SQLUtil.isProcedureCall("INDEXNAME");
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("INDEXNAME", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "org.apache.derby.impl.sql.execute.IndexColumnOrder";
      stringArray0[2] = "";
      stringArray0[3] = "truncate";
      stringArray0[4] = "insert";
      stringArray0[5] = "hD1\"s0Uh-'%%`oo;&C";
      stringArray0[6] = "DATE";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "DATE";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("");
      RowInputBinary rowInputBinary0 = new RowInputBinary();
      SessionRemote sessionRemote0 = new SessionRemote();
      ValueLobDb valueLobDb0 = ValueLobDb.createTempBlob(rowInputBinary0, 0L, sessionRemote0);
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = null;
      SQLUtil.renderColumnNames((String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("()", (String[]) null, "()", "@>k,V>[Q 0C\"0!sn", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("\u0001\u00FD");
      String string0 = "trtk[Zo'~BS&@ ";
      boolean boolean0 = false;
      SQLUtil.normalize("trtk[Zo'~BS&@ ", false);
      SQLUtil.substituteMarkers("trtk [ Zo '~BS&@ '", "deletenopasswords", "trtk[Zo'~BS&@ ");
      System.setCurrentTimeMillis(0L);
      TableContainer tableContainer0 = new TableContainer("drop materialized viewnopasswords");
      tableContainer0.getTable("token 123");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "trtk [ Zo '~BS&@ '";
      stringArray0[1] = "deletenopasswords";
      stringArray0[2] = "deletenopasswords";
      stringArray0[3] = "trtk[Zo'~BS&@ ";
      stringArray0[4] = null;
      stringArray0[5] = "trtk [ Zo '~BS&@ '";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      try {
        dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, (DBTable) null, stringArray0, (DBTable) null, stringArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // refereeTable is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLUtil.isQuery("~m4.");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "~m4.";
      stringArray0[1] = "~m4.";
      stringArray0[2] = "EfoVish=,I/f-~B";
      stringArray0[3] = "EfoVish=,I/f-~B";
      stringArray0[4] = "~m4.";
      stringArray0[5] = "EfoVish=,I/f-~B";
      stringArray0[6] = "EfoVish=,I/f-~B";
      SQLUtil.join("EfoVish=,I/f-~B", "~m4.", stringArray0, "EfoVish=,I/f-~B", "%)vnEO", stringArray0);
      SQLUtil.mutatesDataOrStructure("BOOL_AND");
      String string0 = "inde";
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = ":O^`$Er+LRXIbyVjvV";
      SQLUtil.mutatesDataOrStructure(":O^`$Er+LRXIbyVjvV");
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":O^`$Er+LRXIbyVjvV";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(":O^`$Er+LRXIbyVjvV");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      SQLUtil sQLUtil0 = new SQLUtil();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(444, 1384);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 444
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "H";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("H");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("H");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SQLUtil.isDML("insert");
      SQLUtil.isDDL("/1AJ");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "insert";
      stringArray0[1] = "/1AJ";
      stringArray0[2] = "insert";
      stringArray0[3] = "insert";
      stringArray0[4] = "/1AJ";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("jD*HeYet");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "/1AJ");
      defaultDBTable0.getUniqueConstraints(true);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\u0001\u0173", defaultDBTable0, 1095, "insert = 'insert' AND /1AJ = '/1AJ' AND insert = 'insert' AND insert = 'insert' AND /1AJ = '/1AJ'");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "constraint";
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "constraint", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "constraint");
      StringBuffer stringBuffer0 = new StringBuffer();
      char[] charArray0 = new char[2];
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      charArray0[0] = 'M';
      // Undeclared exception!
      try { 
        stringBuilder0.appendCodePoint((-293));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", false, dBUniqueConstraint0);
      dBUniqueIndex0.setDoc("execalter index=true join #xk as =true on");
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "create tablealter index=true join #xk as =true on", true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("create table=true");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"create tablealter index=true join #xk as =true on\" PRIMARY KEY (, , , , , , , , )", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("%}0T");
      assertNull(boolean0);
      
      String string1 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT  ", string1);
      
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string2 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec1);
      assertEquals("CONSTRAINT  UNIQUE (, , , , , , , , )", string2);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 3249, "K{Uy");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String string3 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("K{UY", string3);
  }
}
