/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 01:30:55 GMT 2018
 */

package okhttp3.internal.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.URI;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import okhttp3.Challenge;
import okhttp3.CookieJar;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.internal.http.HttpHeaders;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpHeaders_ESTest extends HttpHeaders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Response response0 = mock(Response.class, new ViolatedAssumptionAnswer());
      doReturn((Headers) null).when(response0).headers();
      // Undeclared exception!
      try { 
        HttpHeaders.contentLength(response0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      HttpHeaders.skipUntil("", 0, "");
      Headers headers0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders((Headers) null, (Headers) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds("encodedUsername == null", 47);
      assertEquals(47, int0);
      
      int int1 = HttpHeaders.skipUntil("encodedUsername == null", 288, "encodedUsername == null");
      assertEquals(288, int1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("vary", "2lyvq?gfb7g%ucep");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertNotSame(headers0, headers1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds("S}?QsSm(", 5499);
      assertEquals(5499, int0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@/?#";
      stringArray0[1] = ",C";
      stringArray0[2] = "data == null";
      stringArray0[3] = "Qv#V2aP[ T$2d\"";
      stringArray0[4] = "X";
      stringArray0[5] = " +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)";
      stringArray0[6] = ",pOmZx8qZ$_#NMAN";
      stringArray0[7] = "II";
      Headers headers0 = Headers.of(stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = ",C";
      stringArray1[1] = "data == null";
      stringArray1[2] = "@/?#";
      stringArray1[3] = "@/?#";
      stringArray1[4] = " +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)";
      stringArray1[5] = "data == null";
      headers0.names();
      stringArray1[6] = ",C";
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers.of((Map<String, String>) hashMap0);
      stringArray1[7] = ",j[1GEnzKFH+$";
      Headers.of(stringArray1);
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HttpHeaders.parseSeconds("P':w9/&=Kq", (-1758));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertNotSame(headers0, headers1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HttpHeaders.skipWhitespace("n@8", 200);
      HttpHeaders.parseSeconds((String) null, 200);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "n@8";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "n@8";
      // Undeclared exception!
      try { 
        Headers.of(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Headers cannot be null
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Headers headers0 = Headers.of(stringArray0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      headers0.values("Transfer-Encoding");
      Headers headers1 = Headers.of((Map<String, String>) hashMap0);
      headers1.toMultimap();
      Headers.of(stringArray0);
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
      
      Headers headers2 = Headers.of((Map<String, String>) hashMap0);
      headers1.newBuilder();
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers1, "+@*Dw");
      List<Challenge> list1 = HttpHeaders.parseChallenges(headers2, "pT(H:@ ugy-Xwh)vW");
      assertNotSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.varyHeaders(headers0, headers0);
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.varyHeaders(headers0, headers0);
      int int0 = HttpHeaders.skipWhitespace("Vary", 3);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.hasVaryAll((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertFalse(boolean0);
      
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "");
      int int0 = HttpHeaders.skipWhitespace("hv", 2147483645);
      headers0.getDate("@gI_q@rtzJP");
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HttpHeaders.receiveHeaders(cookieJar0, (HttpUrl) null, headers0);
      List<Challenge> list1 = HttpHeaders.parseChallenges(headers0, "hv");
      assertNotSame(list1, list0);
      
      int int1 = HttpHeaders.skipUntil("size == 0", 2147483645, "x");
      assertTrue(int1 == int0);
      assertEquals(2147483645, int1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HttpHeaders.skipUntil("5,n{KT=COvN_C+0+i]6", 1, "5,n{KT=COvN_C+0+i]6");
      HttpHeaders.skipWhitespace("5,n{KT=COvN_C+0+i]6", 1);
      // Undeclared exception!
      try { 
        HttpHeaders.hasBody((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = HttpHeaders.skipUntil("S}?QsSm(", 0, "S}?QsSm(");
      assertEquals(0, int0);
      
      int int1 = HttpHeaders.skipUntil("Tyt_w/X^XiyD!@R*2", 0, "x");
      assertEquals(18, int1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("public", "c .5i~oj");
      hashMap1.put("c .5i~oj", "%2e%2e");
      Headers headers0 = Headers.of((Map<String, String>) hashMap1);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "public");
      assertEquals(0, list0.size());
      
      hashMap1.put("*", (String) null);
      int int0 = HttpHeaders.parseSeconds("Vary", 2);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Content-Length", "Content-Length");
      hashMap0.put("Content-Length", "Content-Length");
      hashMap0.put("[\u0000-\u001F-\u009Fp{javaWhitespace}]", "[\u0000-\u001F-\u009Fp{javaWhitespace}]");
      // Undeclared exception!
      try { 
        Headers.of((Map<String, String>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected header: [\u0000-\u001F-\u009Fp{javaWhitespace}]: [\u0000-\u001F-\u009Fp{javaWhitespace}]
         //
         verifyException("okhttp3.Headers", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Response response0 = null;
      Request request0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.varyMatches((Response) null, (Headers) null, (Request) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("bytSriRg =(ull", "bytSriRg =(ull");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "bytSriRg =(ull");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = HttpHeaders.skipWhitespace("s @+B1$", 1);
      assertEquals(2, int0);
      
      int int1 = HttpHeaders.parseSeconds("s @+B1$", (-2975));
      assertEquals((-2975), int1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = HttpHeaders.parseSeconds("3", 68);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "vary";
      HttpHeaders.skipUntil("vary", 704, "vary");
      HttpHeaders.parseSeconds("*bwFD_Wfs", (-1444060192));
      HttpHeaders.skipWhitespace("*bwFD_Wfs", 704);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "vary";
      stringArray0[1] = "*bwFD_Wfs";
      stringArray0[2] = "*bwFD_Wfs";
      stringArray0[3] = "vary";
      stringArray0[4] = "*bwFD_Wfs";
      stringArray0[5] = "vary";
      stringArray0[6] = "vary";
      stringArray0[7] = "*bwFD_Wfs";
      Headers headers0 = Headers.of(stringArray0);
      headers0.getDate("*bwFD_Wfs");
      headers0.newBuilder();
      headers0.toMultimap();
      headers0.names();
      headers0.names();
      HttpHeaders.varyFields(headers0);
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HttpUrl httpUrl0 = null;
      Response response0 = null;
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("; realme~t=ntf-8", "; realme~t=ntf-8");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "; realme~t=ntf-8");
      assertEquals(0, list0.size());
  }
}
