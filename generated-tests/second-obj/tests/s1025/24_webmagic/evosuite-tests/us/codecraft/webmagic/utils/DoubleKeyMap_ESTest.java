/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:40:44 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Object, Map<Object, Object>> hashMap0 = new HashMap<Object, Map<Object, Object>>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.put("XO(NW<deb`", hashMap1);
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(hashMap0);
      doubleKeyMap0.get((Object) hashMap0, (Object) hashMap0);
      Integer integer0 = new Integer(1585);
      assertEquals(1585, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(hashMap0, class0);
      Object object0 = new Object();
      String string0 = doubleKeyMap0.remove(object0, (Object) "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(1585);
      HashMap<Integer, Map<String, String>> hashMap0 = new HashMap<Integer, Map<String, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, String> doubleKeyMap0 = new DoubleKeyMap<Integer, String, String>(hashMap0, class0);
      Map<String, String> map0 = doubleKeyMap0.remove(integer0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Map<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Map<Integer, Integer>>();
      Map<Integer, Map<Map<Integer, Integer>, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Map<Integer, Integer>, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Map<Integer, Integer>, Object>(map0);
      Integer integer0 = new Integer(1994);
      Map<Map<Integer, Integer>, Object> map1 = null;
      // Undeclared exception!
      try { 
        doubleKeyMap1.put(integer0, (Map<Map<Integer, Integer>, Object>) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      Object object0 = new Object();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      String string0 = "";
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      hashMap0.put("", hashMap1);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>(hashMap0, class0);
      HashMap<Map<Integer, Integer>, Map<Integer, Map<Integer, Integer>>> hashMap2 = new HashMap<Map<Integer, Integer>, Map<Integer, Map<Integer, Integer>>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap2 = new DoubleKeyMap<Object, String, Object>();
      HashMap<Integer, Integer> hashMap3 = new HashMap<Integer, Integer>();
      String string1 = "wrong proto type map ";
      doubleKeyMap2.put((Object) integer0, "wrong proto type map ", (Object) doubleKeyMap1);
      doubleKeyMap2.newMap();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap3 = new DoubleKeyMap<String, Integer, Object>();
      Integer integer2 = new Integer(0);
      doubleKeyMap2.get((Object) integer2, "");
      Class<Map> class1 = Map.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap4 = null;
      try {
        doubleKeyMap4 = new DoubleKeyMap<Object, Integer, Object>(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      Object object0 = new Object();
      Integer integer0 = new Integer(780);
      doubleKeyMap0.remove((Object) integer0);
      Integer integer1 = new Integer(0);
      Integer integer2 = new Integer(0);
      doubleKeyMap0.put(object0, (Object) integer1, integer2);
      Integer integer3 = new Integer(1);
      doubleKeyMap0.remove(object0, (Object) integer3);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = null;
      try {
        doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      Integer integer1 = new Integer(0);
      DoubleKeyMap<Map<Integer, Integer>, String, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Integer>, String, String>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      doubleKeyMap0.newMap();
      hashMap0.put(integer1, integer1);
      doubleKeyMap0.get((Map<Integer, Integer>) hashMap0, "o.7>S3rdLV}<l]O,R7");
      HashMap<Object, Map<String, Map<Integer, Integer>>> hashMap1 = new HashMap<Object, Map<String, Map<Integer, Integer>>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>();
      doubleKeyMap1.newMap();
      DoubleKeyMap<Integer, Object, String> doubleKeyMap2 = new DoubleKeyMap<Integer, Object, String>();
      Integer integer2 = new Integer(0);
      doubleKeyMap2.put(integer2, (Object) null, "o.7>S3rdLV}<l]O,R7");
      int int0 = 0;
      Integer integer3 = new Integer(1);
      Integer integer4 = new Integer(1348);
      Integer integer5 = new Integer(0);
      doubleKeyMap2.remove(integer0, (Object) null);
      HashMap<Object, String> hashMap2 = null;
      try {
        hashMap2 = new HashMap<Object, String>(0, (-221.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -221.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DoubleKeyMap<String, Object, Map<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, Object, Map<Integer, Integer>>();
      Integer integer0 = new Integer(1);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      doubleKeyMap0.put("C+WS2O", (Object) integer0, (Map<Integer, Integer>) hashMap0);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      HashMap<Integer, Integer> hashMap2 = new HashMap<Integer, Integer>();
      Integer integer1 = new Integer(1639);
      Integer integer2 = new Integer(0);
      doubleKeyMap0.remove("us.codecraft.webmagic.utils.MultiKeyMapBase", (Object) "us.codecraft.webmagic.utils.MultiKeyMapBase");
      hashMap2.put(integer1, integer2);
      doubleKeyMap0.put("C+WS2O", (Object) "C+WS2O", (Map<Integer, Integer>) hashMap2);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<Integer, Integer>, Integer> doubleKeyMap1 = null;
      try {
        doubleKeyMap1 = new DoubleKeyMap<Object, Map<Integer, Integer>, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
