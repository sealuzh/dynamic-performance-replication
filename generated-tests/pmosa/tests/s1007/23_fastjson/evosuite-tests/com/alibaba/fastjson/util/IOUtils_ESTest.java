/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 10:39:39 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.util.IOUtils;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayReader;
import java.io.Closeable;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.net.URI;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CodingErrorAction;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IOUtils_ESTest extends IOUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = ObjectStreamConstants.baseWireHandle;
      int int1 = IOUtils.decodeUTF8(iOUtils0.specicalFlags_doubleQuotes, (-2188), (-2188), iOUtils0.DIGITS);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)48;
      byteArray0[8] = (byte)0;
      char[] charArray0 = new char[3];
      charArray0[0] = '<';
      charArray0[1] = '*';
      charArray0[2] = 'm';
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)63, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'm'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte) (-26);
      char[] charArray0 = new char[2];
      IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)6, charArray0);
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[2] = (byte) (-16);
      char[] charArray0 = new char[2];
      IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)27, charArray0);
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[2] = (byte) (-16);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)27, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, iOUtils0.specicalFlags_doubleQuotes);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(iOUtils0.specicalFlags_doubleQuotes, 85, 1129, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils iOUtils0 = new IOUtils();
      CharArrayReader charArrayReader0 = new CharArrayReader(iOUtils0.DIGITS);
      String string0 = IOUtils.readAll(charArrayReader0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(sequenceInputStream0);
      IOUtils.readAll(inputStreamReader0);
      int int0 = IOUtils.stringSize(0);
      assertEquals(1, int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '$';
      charArray0[1] = 'n';
      charArray0[2] = '[';
      charArray0[3] = '';
      charArray0[4] = '&';
      charArray0[5] = 'Y';
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte) (-25);
      int int1 = IOUtils.encodeUTF8(charArray0, 0, 0, byteArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      int int0 = IOUtils.stringSize((-1932735282));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8((char[]) null, 5, 5, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = '#';
      charArray0[2] = '6';
      charArray0[3] = '`';
      // Undeclared exception!
      try { 
        IOUtils.getChars((-1L), (-123008), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -123009
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IOUtils.getStringProperty("P(W");
      IOUtils.loadPropertiesFromFile();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.getChars(7L, (-416), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -417
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("`4NJFt0:w", 0, 2);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IOUtils.stringSize(1L);
      IOUtils.firstIdentifier('r');
      IOUtils iOUtils0 = new IOUtils();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      ByteBuffer byteBuffer0 = iOUtils0.UTF8.encode("X");
      CharBuffer charBuffer0 = iOUtils0.UTF8.decode(byteBuffer0);
      uTF8Decoder0.reset();
      iOUtils0.UTF8.encode(charBuffer0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        byteBuffer0.putFloat(0, 314.345F);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      int int0 = IOUtils.stringSize(1L);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IOUtils.isValidJsonpQueryParam("`4NJFt0:w");
      IOUtils iOUtils0 = new IOUtils();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils.loadPropertiesFromFile();
      IOUtils.stringSize(0L);
      IOUtils.isValidJsonpQueryParam("com.alibaba.fastjson.JSONException");
      char char0 = 'g';
      IOUtils.isIdent('g');
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.reset();
      Charset charset0 = uTF8Decoder0.charset();
      charset0.encode("com.alibaba.fastjson.JSONException");
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 100;
      IOUtils.stringSize(100);
      IOUtils.loadPropertiesFromFile();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = 0;
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 0, 118);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("");
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)15;
      byteArray0[8] = (byte) (-65);
      IOUtils.encodeUTF8((char[]) null, (-167), (-1726), byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.getChars(3816L, 2728, (char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = (-2477);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("", (-2477), (-2477));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IOUtils.firstIdentifier('p');
      char char0 = '<';
      IOUtils.isIdent('<');
      // Undeclared exception!
      try { 
        IOUtils.readAll((Reader) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // read string from reader error
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char char0 = '3';
      IOUtils.firstIdentifier('3');
      IOUtils.getStringProperty("[M@keJH ZAh0v\"(0");
      IOUtils.loadPropertiesFromFile();
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      iOUtils0.UTF8.encode("[M@keJH ZAh0v\"(0");
      // Undeclared exception!
      try { 
        uTF8Decoder0.onMalformedInput((CodingErrorAction) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null action
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = '[';
      charArray0[2] = '{';
      charArray0[3] = '6';
      charArray0[4] = 'U';
      charArray0[5] = '0';
      charArray0[6] = 'W';
      charArray0[7] = 'L';
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 7, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IOUtils.getStringProperty("fastjson.properties");
      IOUtils iOUtils0 = new IOUtils();
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(iOUtils0.CA, 74, (-2364));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2291
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IOUtils.firstIdentifier('E');
      IOUtils.decodeBase64("Oz9-O");
      IOUtils.loadPropertiesFromFile();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IOUtils.stringSize(2508);
      IOUtils.decodeBase64("read string from reader error");
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("read string from reader error", (-6059), 191);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      // Undeclared exception!
      try { 
        IOUtils.getChars((-3427), (-3427), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3428
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)48;
      char[] charArray0 = new char[1];
      charArray0[0] = 'Z';
      int int0 = IOUtils.decodeUTF8(byteArray0, 4, (byte)0, charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("\"wLB<84%");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-13)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IOUtils.close((Closeable) null);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.getChars(0, 0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      IOUtils.decodeBase64("'");
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, 41, 41);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 41
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IOUtils.getStringProperty("UTF-8");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.reset();
      Charset charset0 = IOUtils.UTF8;
      ByteBuffer byteBuffer0 = charset0.encode("UTF-8");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
      assertFalse(byteBuffer0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils.isValidJsonpQueryParam("*s5^P /A!v2HZ");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      CodingErrorAction codingErrorAction0 = CodingErrorAction.IGNORE;
      CharsetDecoder charsetDecoder0 = uTF8Decoder0.onMalformedInput(codingErrorAction0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      IOUtils.decode(charsetDecoder0, byteBuffer0, charBuffer0);
      assertFalse(charBuffer0.hasRemaining());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IOUtils.loadPropertiesFromFile();
      IOUtils.isValidJsonpQueryParam((String) null);
      IOUtils iOUtils0 = new IOUtils();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      char[] charArray0 = new char[7];
      IOUtils.getChars((byte)7, (int) (byte)7, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '7'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64("`4NJFt0:w", 0, 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 5;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      IOUtils.stringSize(5);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char char0 = ' ';
      IOUtils.firstIdentifier(' ');
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      IOUtils.getChars((long) 1, 1, charArray0);
      char char1 = '[';
      IOUtils.firstIdentifier('[');
      // Undeclared exception!
      try { 
        IOUtils.getStringProperty("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '[';
      IOUtils.getChars((long) 2, 2, charArray0);
      assertArrayEquals(new char[] {'\u0000', '2'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(iOUtils0.CA, (byte)38, 167, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      IOUtils.close(pipedInputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      IOUtils.decodeBase64(iOUtils0.DIGITS, 5, 5);
      IOUtils.getChars(386, 5, iOUtils0.DIGITS);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[7];
      IOUtils.getChars((int) (byte)7, (int) (byte)7, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '7'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("'b{Y_bet&HM$SF+%Nsp", 2, 2);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      IOUtils.getStringProperty("fastjson.properties");
      int int0 = IOUtils.stringSize(378L);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("qhl*(+a4dn!WX", 0, 2);
      assertArrayEquals(new byte[] {(byte) (-86)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2e, `njp\"VLs;");
      IOUtils iOUtils0 = new IOUtils();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      IOUtils.getStringProperty("fastjson.properties");
      int int1 = IOUtils.encodeUTF8(iOUtils0.ASCII_CHARS, 1, 1, iOUtils0.specicalFlags_singleQuotes);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64("SiB()J(jAhmcZ`", 5, 5);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-8), (byte) (-64)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IOUtils.stringSize((-656L));
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = 'X';
      charArray0[2] = '6';
      charArray0[3] = ']';
      charArray0[4] = 'K';
      charArray0[5] = '}';
      charArray0[6] = 'F';
      charArray0[7] = 'A';
      // Undeclared exception!
      try { 
        IOUtils.getChars((byte) (-64), 1, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[1] = 'f';
      charArray0[2] = '!';
      charArray0[3] = 'C';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[4] = 'p';
      charArray0[5] = 'e';
      charArray0[6] = ':';
      charArray0[7] = '&';
      IOUtils.getChars((-444L), 5, charArray0);
      String string0 = IOUtils.getStringProperty("fastjson.compatibleWithJavaBean");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IOUtils.firstIdentifier('\u008C');
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[7];
      charArray0[0] = 'O';
      charArray0[1] = 'n';
      charArray0[2] = 'u';
      charArray0[3] = '\u008C';
      charArray0[4] = 'O';
      charArray0[5] = '\u008C';
      charArray0[6] = 'O';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)3;
      // Undeclared exception!
      try { 
        IOUtils.encodeUTF8(charArray0, 5, 13, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\u00B6';
      charArray0[1] = '\u00B6';
      charArray0[3] = '\u00B6';
      charArray0[5] = '\u00B6';
      byte[] byteArray0 = new byte[9];
      int int0 = IOUtils.encodeUTF8(charArray0, 5, 1, byteArray0);
      assertEquals(2, int0);
      assertArrayEquals(new byte[] {(byte) (-62), (byte) (-74), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      int int1 = IOUtils.stringSize(2);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      IOUtils.loadPropertiesFromFile();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 2, 2);
      assertArrayEquals(new byte[] {(byte) (-45)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = IOUtils.decodeBase64(";");
      IOUtils iOUtils0 = new IOUtils();
      byte[] byteArray1 = IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 30, 30);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = IOUtils.stringSize(2147483647L);
      assertEquals(10, int0);
      
      byte[] byteArray0 = IOUtils.decodeBase64("\"2*m=-");
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-7)}, byteArray0);
      
      boolean boolean0 = IOUtils.isIdent('0');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOUtils.isIdent('\u0103');
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, (-2), 103);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = IOUtils.firstIdentifier('\u0106');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-26);
      char[] charArray0 = new char[3];
      charArray0[1] = '\u001C';
      int int0 = IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)6, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\b', '\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte)6;
      char[] charArray0 = new char[3];
      IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)6, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, (int) (byte)8, (int) (byte)6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      IOUtils iOUtils0 = new IOUtils();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byte[] byteArray0 = IOUtils.decodeBase64(iOUtils0.ASCII_CHARS, 2, 73);
      int int1 = IOUtils.decodeUTF8(byteArray0, 2, 10, iOUtils0.CA);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      IOUtils.stringSize(1L);
      char[] charArray0 = new char[7];
      charArray0[1] = '\u00DA';
      charArray0[2] = '\u00DA';
      charArray0[3] = '\u00DA';
      charArray0[5] = '\u00DA';
      charArray0[0] = '\u00DA';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      IOUtils.encodeUTF8(charArray0, 1, 1, byteArray0);
      // Undeclared exception!
      try { 
        IOUtils.decodeUTF8(byteArray0, (byte)0, 1254, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[2] = (byte) (-32);
      char[] charArray0 = new char[2];
      IOUtils.decodeUTF8(byteArray0, (byte)0, (byte)6, charArray0);
      // Undeclared exception!
      try { 
        IOUtils.decodeBase64(charArray0, (int) (byte) (-32), (int) (byte) (-32));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -65
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }
}
