/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 12:30:54 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)84;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("\u2026]", charset0);
      byteString0.startsWith(byteString0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1037);
      // Undeclared exception!
      try { 
        byteString0.substring((-273));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("Failed to close timed out socket ", charset0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-32);
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=dce0]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.asByteBuffer();
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)56, (int) (byte)56);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(1)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)56;
      byteArray0[0] = (byte)56;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)56);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha256();
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 37, 102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=37 byteCount=102
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)99;
      byteArray0[1] = (byte)121;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-123);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      ByteString byteString1 = byteString0.sha512();
      assertEquals(64, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        ByteString.decodeHex(";#J7]u#5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: ;
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("not acquired");
      ByteString byteString1 = byteString0.toAsciiLowercase();
      // Undeclared exception!
      try { 
        byteString1.substring(636);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("resizeBuffer() only pemitted for read/write buffers");
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("resizeBuffer() only pemitted for read/write buffers");
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("\u2026]", charset0);
      byteString0.startsWith(byteString0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1050);
      try { 
        ByteString.read(pipedInputStream0, 1050);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8(".rc&Q~M8-");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)117;
      byteArray0[6] = (byte)51;
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertEquals(9, byteString0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-7);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte) (-56);
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, (byte)13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int1 = ObjectStreamConstants.baseWireHandle;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte) (-123);
      byteArray0[7] = (byte) (-123);
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-123);
      boolean boolean0 = byteString0.startsWith(byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteString byteString1 = byteString0.substring(6);
      ByteBuffer byteBuffer0 = byteString1.asByteBuffer();
      assertEquals(26, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)44;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      ByteString byteString0 = ByteString.of(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.toString();
      byteString0.substring((int) (byte)0, (int) (byte)0);
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString.of(byteBuffer0);
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("J5~X$f<Q", (-2331));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      assertNotNull(byteString0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      HashingSink.sha256(buffer0);
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
      
      Inflater inflater0 = new Inflater();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1952;
      // Undeclared exception!
      try { 
        ByteString.encodeString(" text=", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)93;
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)22;
      byteArray1[1] = (byte)116;
      int int0 = byteString0.lastIndexOf(byteArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      byteString0.equals(hashingSource0);
      byteString0.lastIndexOf(byteString0, 106);
      String string0 = byteString0.base64Url();
      String string1 = byteString0.base64();
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      byteString0.EMPTY.utf8();
      byteString0.sha1();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("Z");
      ByteString byteString2 = ByteString.of(byteBuffer0);
      assertNotSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)11;
      byteArray0[3] = (byte)81;
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      Object object0 = new Object();
      byteString0.lastIndexOf(byteString0);
      byteString0.toAsciiUppercase();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null, "lcwtaDP<[M9R@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = ByteString.encodeUtf8("resizeBuffer() only pemitted for read/write buffers");
      ByteString.decodeBase64("");
      String string0 = byteString0.toString();
      assertEquals("[text=resizeBuffer() only pemitted for read/write buffers]", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = byteString0.rangeEquals(42, byteArray0, (-2828), (-936));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64Url();
      byteString0.equals("AA==");
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 4, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=4 byteCount=4
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLong(3L);
      HashingSink hashingSink0 = HashingSink.sha512(bufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      int int0 = byteString0.indexOf(byteString1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString();
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString1 = hashingSource0.hash();
      int int0 = ObjectStreamConstants.baseWireHandle;
      byteString1.write(buffer0);
      boolean boolean0 = byteString0.startsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      HashingSource.md5(hashingSource0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.base64();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)31;
      int int0 = byteString0.indexOf(byteArray0, (-1068));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte) (-56);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toAsciiUppercase();
      int int0 = ObjectStreamConstants.baseWireHandle;
      byteString0.lastIndexOf(byteArray0);
      ByteString byteString1 = ByteString.decodeBase64("tV6");
      assertNull(byteString1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Object object0 = new Object();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      Buffer buffer1 = new Buffer();
      Object object1 = new Object();
      int int0 = ObjectStreamConstants.baseWireHandle;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer2 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Charset.defaultCharset();
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Object object0 = new Object();
      Buffer buffer2 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer2);
      ByteString byteString0 = hashingSource0.hash();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      ByteString byteString2 = hashingSource0.hash();
      assertTrue(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      Object object0 = new Object();
      byteString1.equals(byteString0);
      HashingSource.md5(buffer0);
      int int0 = ByteString.codePointIndexToCharIndex("", (-2331));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      ByteString byteString1 = byteString0.md5();
      boolean boolean0 = byteString0.rangeEquals((-1277), byteString1, (-1277), (-1277));
      assertFalse(boolean0);
      
      byteString1.equals(byteString0);
      byteString0.internalArray();
      assertFalse(byteString0.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 81, 81);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("\r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: \r
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("SHA-1", 7);
      assertEquals(5, int0);
      
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString();
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString1 = hashingSource0.hash();
      int int1 = byteString0.indexOf(byteString1, 7);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "resizeBuffer() o~ly pemitted for read/write buffers");
      ByteString byteString0 = ByteString.decodeBase64("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Charset.defaultCharset();
      ByteString byteString1 = byteString0.sha512();
      Buffer buffer0 = new Buffer();
      ByteBuffer byteBuffer0 = byteString1.asByteBuffer();
      ByteString byteString2 = ByteString.of(byteBuffer0);
      ByteString byteString3 = ByteString.of(byteBuffer0);
      Object object0 = new Object();
      String string0 = byteString1.utf8;
      assertNotNull(string0);
      
      ByteString byteString4 = byteString2.toAsciiUppercase();
      Object object1 = new Object();
      byteString4.equals(object1);
      String string1 = byteString3.toString();
      assertTrue(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString4));
      assertEquals("[size=0]", string1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString5 = ByteString.encodeUtf8("");
      String string2 = byteString5.base64();
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.rangeEquals(30, byteArray0, (int) (byte) (-73), 36);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("resizeBuffer() only pemitted for read/write buffers");
      Charset charset0 = Charset.defaultCharset();
      String string0 = byteString0.toString();
      assertEquals("[text=resizeBuffer() only pemitted for read/write buffers]", string0);
      
      byteString0.string(charset0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString1 = byteString0.sha512();
      Buffer buffer0 = new Buffer();
      Object object0 = new Object();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString2 = realBufferedSource0.readByteString();
      HashingSink.sha256(buffer0);
      byteString1.toAsciiLowercase();
      assertFalse(byteString0.equals((Object)byteString2));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      ByteString byteString1 = byteString0.md5();
      byteString1.base64Url();
      byteString0.EMPTY.hashCode();
      byteString0.rangeEquals((-1277), byteString1, (-1277), (-1277));
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("1EO^bNP4A", false);
      try { 
        byteString0.write(mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Error in writing to file
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString.encodeUtf8("socket == null");
      // Undeclared exception!
      try { 
        ByteString.decodeHex("socket == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: s
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte) (-103);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      Buffer buffer0 = new Buffer();
      Object object0 = new Object();
      Object object1 = new Object();
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString1 = ByteString.of(byteBuffer0);
      byteString0.endsWith(byteString1);
      byteString1.compareTo(byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readByteString(65280L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[1] = (byte)80;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.hex();
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)49;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.toString();
      ByteString byteString1 = byteString0.substring((int) (byte)0, (int) (byte)0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteString0.EMPTY.base64();
      byteString1.indexOf(byteArray0, (int) (byte)0);
      byteString1.substring((int) (byte)0, (int) (byte)0);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 11, 469);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=5 offset=11 byteCount=469
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)101;
      ByteString byteString0 = new ByteString(byteArray0);
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort((byte)50);
      HashingSink hashingSink0 = HashingSink.md5(bufferedSink0);
      ByteString byteString1 = hashingSink0.hash();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Charset.defaultCharset();
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      byteString0.EMPTY.utf8();
      ByteString byteString1 = byteString0.sha1();
      // Undeclared exception!
      try { 
        byteString1.hmacSha256(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)55;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ByteString.decodeBase64("2(PGp+$9H");
      byteString0.write(byteArrayOutputStream0);
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      assertEquals(3, byteBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      Object object0 = new Object();
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("SHA-256");
      byte[] byteArray0 = new byte[4];
      ByteString byteString1 = ByteString.decodeBase64("");
      ByteString byteString2 = new ByteString(byteArray0);
      byteString1.indexOf(byteArray0);
      byteString0.toByteArray();
      byteString2.hashCode();
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString3 = ByteString.of(byteBuffer0);
      int int0 = byteString3.compareTo(byteString1);
      assertEquals("java.nio.HeapByteBufferR[pos=7 lim=7 cap=7]", byteBuffer0.toString());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("resizeBuffer() only pemitted for read/write buffers");
      ByteString.decodeBase64("");
      Charset.defaultCharset();
      byteString0.toString();
      byteString0.sha512();
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      byteString0.asByteBuffer();
      ByteBuffer byteBuffer0 = null;
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("DK[>`4N://;;{2V$3", charset0);
      byte[] byteArray0 = new byte[13];
      Buffer buffer0 = new Buffer();
      Object object0 = new Object();
      Object object1 = new Object();
      byteString0.equals(object1);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.mark((-2279));
      // Undeclared exception!
      try { 
        ByteString.read(pipedInputStream0, (-2279));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2279
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      Object object0 = new Object();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = new Buffer();
      ByteString.decodeBase64("ZZR%wkc8Ez");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object object1 = new Object();
      int int0 = ObjectStreamConstants.baseWireHandle;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer3 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString0.base64();
      byteString0.endsWith(byteArray0);
      ByteString.encodeUtf8("ZZR%wkc8Ez");
      // Undeclared exception!
      try { 
        ByteString.decodeHex("#7hzlr`3}g:}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: #
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)98;
      byteArray0[7] = (byte)102;
      byteArray0[8] = (byte)50;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.md5();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("SHA-256");
      byteString0.toByteArray();
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString1 = ByteString.of(byteBuffer0);
      int int0 = byteString1.compareTo(byteString0);
      assertEquals(7, byteBuffer0.position());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("SHA-256");
      byte[] byteArray0 = new byte[4];
      ByteString byteString1 = ByteString.decodeBase64("");
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-65);
      byteString1.sha512();
      byteString1.hmacSha256(byteString0);
      ByteString.of(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        ByteString.read(byteArrayInputStream0, 1229);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte)56;
      byteArray0[8] = (byte)94;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 229, 45);
      try { 
        ByteString.read(byteArrayInputStream0, (byte)48);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.emit();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)58;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "data == null");
      HashingSink hashingSink0 = HashingSink.sha256(bufferedSink0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.startsWith(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      HashingSink.sha256(hashingSink0);
      String string0 = byteString0.utf8;
      byteString0.equals(hashingSink0);
      byteString0.base64();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("data == null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: t
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("SHA-256");
      String string0 = "";
      byte byte0 = (byte) (-19);
      Buffer buffer0 = new Buffer();
      Object object0 = new Object();
      Object object1 = new Object();
      byteString0.equals(object1);
      HashingSource.md5(buffer0);
      byteString0.lastIndexOf(byteString0);
      ByteString.codePointIndexToCharIndex("SHA-256", 0);
      Pipe pipe0 = new Pipe(2405L);
      // Undeclared exception!
      try { 
        ByteString.codePointIndexToCharIndex((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("DK[>`4N://;;{2V$3", charset0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("DK[>`4N://;;{2V$3");
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)13;
      byteArray0[0] = (byte)13;
      ByteString byteString1 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString.of(byteBuffer0);
      byteString1.toString();
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        ByteString.decodeHex("DK[>`4N://;;{2V$3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: K
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      Object object0 = new Object();
      byteString1.equals(byteString0);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString2 = hashingSource0.hash();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString1.endsWith(byteArray0);
      byteString2.toString();
      ByteString byteString3 = ByteString.encodeUtf8("\r");
      ByteString byteString4 = ByteString.decodeHex("");
      byteString4.base64();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.readByteString();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.mark(168);
      ByteString.read(pipedInputStream0, (byte)0);
      byteString3.utf8();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = ByteString.encodeUtf8("resizeBuffer() only pemitted for read/write buffers");
      Charset charset0 = Charset.defaultCharset();
      ByteString.of(byteArray0);
      byteString0.toString();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString1 = byteString0.sha512();
      Buffer buffer0 = new Buffer();
      Object object0 = new Object();
      Buffer buffer1 = new Buffer();
      ByteBuffer byteBuffer0 = byteString1.asByteBuffer();
      ByteString.of(byteBuffer0);
      ByteString.encodeString("vTh+2c;5\"}dQY8C", charset0);
      byteString0.EMPTY.toAsciiUppercase();
      String string0 = null;
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Expected leading [0-9a-fA-F] character but was %#x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: x
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)47;
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      ByteString.of(byteArray0);
      byteString0.toString();
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        Charset.forName("[hex=4c0a2f00]");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // [hex=4c0a2f00]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Object object0 = new Object();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      Buffer buffer1 = new Buffer();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = ByteString.encodeUtf8("resizeBuffer() only pemitted for read/write buffers");
      ByteString.decodeBase64("");
      byteString0.toString();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteString0.sha512();
      Buffer buffer0 = new Buffer();
      Object object0 = new Object();
      ByteString byteString1 = buffer0.readByteString();
      byteString0.asByteBuffer();
      byteString0.indexOf(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      HashingSink.sha256(buffer0);
      boolean boolean0 = realBufferedSource0.closed;
      byteString1.toString();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("4s8T4e0o5#KI3GCM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: s
         //
         verifyException("okio.ByteString", e);
      }
  }
}
