/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 10:46:08 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(23);
      classWriter0.index = (-2488);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "~nV", "l~.-7.PIew{*m", "", "j'W:~Jln");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-8));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, Integer.MAX_VALUE, "hw,Rm7ZV1@t!E", "@.", "@.", "@.");
      ByteVector byteVector0 = new ByteVector();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@.";
      classWriter0.visit((byte)49, 1, "hw,Rm7ZV1@t!E", "hw,Rm7ZV1@t!E", "hw,Rm7ZV1@t!E", stringArray0);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(23);
      classWriter0.index = (-2488);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 65535, "~nV", "l~.-7.PIew{*m", "", "j'W:~Jln");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(23);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "j'W:~Jln", "j'W:~Jln", "j'W:~Jln", "j'W:~Jln");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(23);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "hw,Rm7ZV1@t!E", "", "aVYOd-e6:]1l", "");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(44);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1503, "wsL$+u1(%|PGe`!)", "", "Synthetic", "Synthetic");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 2, "+VE%", "+VE%", (String) null, classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3100), "hw,Rm7ZV1@t!E", "hw,Rm7ZV1@t!E", "hw,Rm7ZV1@t!E", "");
      Attribute attribute0 = new Attribute("hw,Rm7ZV1@t!E");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector();
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(606);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 606, "wheel.asm.FieldWriter", "org.apache.commons.io.filefilter.FileFileFilter", "wheel.asm.FieldWriter", (Object) null);
      fieldWriter0.visitAnnotation("java/lang/String", false);
      ByteVector byteVector0 = new ByteVector(28);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(605);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1503, "", "", "Synthetic", "Synthetic");
      fieldWriter0.visitAnnotation("", true);
      ByteVector byteVector0 = new ByteVector(0);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(10);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-833), "ConstantValue", "", ",dPkF*qN],}", "ConstantValue");
      ByteVector byteVector0 = new ByteVector();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.io.filefilter.NotFileFilter";
      stringArray0[1] = "}i'GGc4NH]AE(";
      stringArray0[2] = "org.apache.commons.io.filefilter.NotFileFilter";
      classWriter0.visit((-833), 10, "", "Deprecated", "org.apache.commons.io.filefilter.NotFileFilter", stringArray0);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(23);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, Integer.MAX_VALUE, "", "}i'GGc4NH]AE(", (String) null, "");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(606);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 606, "wheel.asm.FieldWriter", "org.apache.commons.io.filefilter.FileFileFilter", "wheel.asm.FieldWriter", (Object) null);
      fieldWriter0.visitAnnotation("java/lang/String", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(23);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "j'W:~Jln", "j'W:~Jln", "j'W:~Jln", "j'W:~Jln");
      fieldWriter0.visitAnnotation("boolean", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(10);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-833), "ConstantValue", "", ",dPkF*qN],}", "ConstantValue");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.apache.commons.io.filefilter.NotFileFilter";
      stringArray0[1] = "}i'GGc4NH]AE(";
      stringArray0[2] = "org.apache.commons.io.filefilter.NotFileFilter";
      classWriter0.visit((-833), 10, "", "Deprecated", "org.apache.commons.io.filefilter.NotFileFilter", stringArray0);
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(23);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, Integer.MAX_VALUE, "", "}i'GGc4NH]AE(", (String) null, "");
      int int0 = fieldWriter0.getSize();
      assertEquals(28, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(23);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "hw,Rm7ZV1@t!E", "hw,Rm7ZV1@t!E", "hw,Rm7ZV1@t!E", "hw,Rm7ZV1@t!E");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, Integer.MAX_VALUE, "", "}i'GGc4NH]AE(", (String) null, "");
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(606);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 606, "wheel.asm.FieldWriter", "org.apache.commons.io.filefilter.FileFileFilter", "wheel.asm.FieldWriter", (Object) null);
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(23);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "hw,jRm7ZV1@t!E", "Bhw,Rm7ZV1@t!E", "}@L~8Z!>", (Object) null);
      Attribute attribute0 = new Attribute("Bhw,Rm7ZV1@t!E");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }
}
