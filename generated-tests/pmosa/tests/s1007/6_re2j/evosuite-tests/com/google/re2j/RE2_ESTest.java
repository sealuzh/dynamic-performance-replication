/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 11:01:40 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.MachineInput;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)94;
      rE2_0.findUTF8(byteArray0);
      List<String> list0 = rE2_0.findAll("", (byte)94);
      assertNotNull(list0);
      
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      String string0 = rE2_0.replaceAll("com.google.re2j.RE2", ".+*?()|[]{}^$");
      assertEquals(".+*?()|[]{}^$c.+*?()|[]{}^$o.+*?()|[]{}^$m.+*?()|[]{}^$..+*?()|[]{}^$g.+*?()|[]{}^$o.+*?()|[]{}^$o.+*?()|[]{}^$g.+*?()|[]{}^$l.+*?()|[]{}^$e.+*?()|[]{}^$..+*?()|[]{}^$r.+*?()|[]{}^$e.+*?()|[]{}^$2.+*?()|[]{}^$j.+*?()|[]{}^$..+*?()|[]{}^$R.+*?()|[]{}^$E.+*?()|[]{}^$2.+*?()|[]{}^$", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[8];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (byte)0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      List<String[]> list0 = rE2_0.findAllSubmatch("", (-1017));
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.findAll("", 1473);
      String string0 = rE2_0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.findAllSubmatchIndex("", 8);
      rE2_0.findAll("", 6515);
      Machine machine0 = new Machine(rE2_0);
      rE2_0.put(machine0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 2946);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("b-%q/K%ii");
      Machine machine0 = rE2_0.get();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)78;
      rE2_0.prefixUTF8 = byteArray0;
      rE2_0.prefixComplete = true;
      rE2_0.replaceFirst("b-%q/K%ii", "b-%q/K%ii");
      rE2_0.toString();
      rE2_0.findSubmatchIndex("{zjo#NFCMU");
      rE2_0.findIndex("1v)yJH^RARV");
      rE2_0.put(machine0);
      assertEquals("b-%q/K%ii", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("Blc2SK");
      rE2_0.longest = false;
      int[] intArray0 = rE2_0.findIndex("Blc2SK");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 6}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      List<int[]> list0 = rE2_0.findAllIndex("", 2946);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = new RE2("e\"yiwtRHoqXfg");
      RE2.quoteMeta("?+/)e@?");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)16;
      rE2_0.findAllSubmatchIndex("e\"yiwtRHoqXfg", (byte) (-114));
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-30);
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      RE2 rE2_1 = RE2.compilePOSIX("e\"yiwtRHoqXfg");
      rE2_1.findAllIndex("UTF-8", (byte) (-30));
      rE2_0.findSubmatch("e\"yiwtRHoqXfg");
      rE2_1.prefixRune = 3303;
      rE2_1.find("");
      rE2_0.findAllSubmatchIndex("k %3a[_MVf*6uH", 4);
      rE2_1.findSubmatch(".+*?()|[]{}^$");
      rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      rE2_1.get();
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("~:#u");
      byte[] byteArray0 = new byte[1];
      rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      String string0 = RE2.quoteMeta("s");
      assertEquals("s", string0);
      
      String string1 = rE2_0.replaceFirst("", "v05");
      assertEquals("v05", string1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.findSubmatch("");
      String string0 = RE2.quoteMeta("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("0o");
      rE2_0.numberOfCapturingGroups();
      String string0 = rE2_0.find("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)0;
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte) (-40));
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      int[] intArray0 = rE2_0.findIndex("32zz@E(2^f;;");
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 49);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("~:#u");
      rE2_0.match("~:#u", (byte)0, (byte)0, 328, (int[]) null, 328);
      rE2_0.findAllSubmatch("~:#u", (byte)0);
      rE2_0.reset();
      assertEquals("~:#u", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "CAPTURE";
      RE2 rE2_0 = new RE2("CAPTURE");
      byte[] byteArray0 = new byte[3];
      rE2_0.findAllSubmatchIndex("CAPTURE", (-1559));
      byteArray0[0] = (byte) (-16);
      byte[] byteArray1 = new byte[0];
      rE2_0.findUTF8SubmatchIndex(byteArray1);
      RE2.quoteMeta("");
      byteArray0[1] = (byte) (-69);
      byte byte0 = (byte)0;
      rE2_0.find("");
      // Undeclared exception!
      try { 
        rE2_0.match("CAPTURE", (byte) (-69), 2360, 224, (int[]) null, 192);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("|e");
      rE2_0.find("|e");
      int[] intArray0 = new int[7];
      intArray0[0] = (-1584);
      intArray0[1] = (-1584);
      intArray0[2] = (-1118);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      rE2_0.match("", 0, (-1584), (-1118), intArray0, 0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte)5;
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, (-1584));
      Machine machine0 = rE2_0.get();
      MachineInput machineInput0 = null;
      int int0 = (-758);
      // Undeclared exception!
      try { 
        machine0.match((MachineInput) null, (-1584), (byte)5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("^x00-x{10FFFF}", 1779, false);
      rE2_0.findIndex("?;$qb!.7]4r6egX`H");
      boolean boolean0 = RE2.match("},;Zu|T,y", "},;Zu|T,y");
      assertTrue(boolean0);
      
      rE2_0.findAllIndex("can't happen", 0);
      String string0 = RE2.quoteMeta("u2Y`uV|4{Hm`5A");
      assertEquals("u2Y`uV\\|4\\{Hm`5A", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte)0;
      rE2_0.matchUTF8(byteArray0);
      String string0 = rE2_0.replaceFirst("+EaA=1UJ)-#RAWb", "com.google.re2j.RE2");
      assertEquals("com.google.re2j.RE2+EaA=1UJ)-#RAWb", string0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("^x00-x{10FFFF}", (-1497));
      assertNotNull(list0);
      assertEquals(15, list0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX(" -> ");
      rE2_0.longest = true;
      rE2_0.findAllSubmatch(" -> ", 1342);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)0;
      rE2_0.findUTF8Submatch(byteArray0);
      rE2_0.findAll(" -> ", 0);
      rE2_0.reset();
      rE2_0.numberOfCapturingGroups();
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte)0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("M6t#^_C/z6JQXw <L");
      RE2.match("M6t#^_C/z6JQXw <L", "M6t#^_C/z6JQXw <L");
      rE2_0.findAllSubmatchIndex("M6t#^_C/z6JQXw <L", 128);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte) (-49);
      byteArray0[7] = (byte) (-26);
      byteArray0[8] = (byte)122;
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 0);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = new RE2("B");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte) (-37);
      rE2_0.findUTF8Index(byteArray0);
      rE2_0.numberOfCapturingGroups();
      RE2.quoteMeta("");
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte)16);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = new RE2(">!O2R? t8");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)0;
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (byte) (-89));
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 5);
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 35, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)111;
      rE2_0.findAll("", 217);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte) (-39);
      rE2_0.findUTF8Index(byteArray0);
      byteArray0[7] = (byte)1;
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)0);
      assertNull(list0);
      
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      rE2_0.get();
      rE2_0.find("ODmgaK&DcY[YS");
      rE2_0.find("");
      RE2 rE2_1 = RE2.compilePOSIX("");
      int[] intArray1 = rE2_1.findUTF8SubmatchIndex(byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertNotNull(intArray1);
      
      String string0 = rE2_0.replaceAll("ODmgaK&DcY[YS", "");
      assertEquals("ODmgaK&DcY[YS", string0);
      
      List<int[]> list1 = rE2_1.findAllIndex("", 7);
      assertNotNull(list1);
      assertEquals(1, list1.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[0];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (-99));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      rE2_0.replaceFirst("", "");
      RE2.match("", "");
      rE2_0.get();
      rE2_0.prefix = "";
      rE2_0.findSubmatchIndex("");
      rE2_0.get();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)0;
      rE2_0.findUTF8Submatch(byteArray0);
      byte[] byteArray1 = new byte[0];
      rE2_0.findAllUTF8Submatch(byteArray1, (-686));
      // Undeclared exception!
      try { 
        rE2_0.findAll((String) null, 9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = new RE2(">!O2R? t8");
      byte[] byteArray0 = new byte[7];
      rE2_0.findAllSubmatchIndex("9oP8U+4R", (-17));
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      RE2 rE2_1 = RE2.compilePOSIX(">!O2R? t8");
      rE2_0.findAllIndex("UTF-8", 11736);
      rE2_0.findSubmatch(">!O2R? t8");
      rE2_0.find("");
      rE2_1.replaceAll("", "9oP8U+4R");
      rE2_0.findAllSubmatchIndex("[:punct:]", 1796);
      rE2_0.findSubmatch("[:punct:]");
      rE2_1.findAllUTF8Submatch(byteArray0, (byte)16);
      rE2_0.get();
      List<byte[]> list0 = rE2_1.findAllUTF8(byteArray0, (-1492));
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = new RE2(">!O2R? t8");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)64;
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 32, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-43);
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (byte) (-128));
      assertNotNull(list0);
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      rE2_0.replaceFirst("", "");
      RE2.match("", "");
      rE2_0.get();
      rE2_0.prefix = "";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      rE2_0.findAllUTF8Submatch(byteArray0, 0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      rE2_0.findAllUTF8(byteArray0, (-156));
      int[] intArray0 = new int[8];
      intArray0[0] = 2286;
      intArray0[1] = 0;
      intArray0[2] = 6624;
      intArray0[3] = 0;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = 977;
      intArray0[6] = (int) (byte)0;
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        rE2_0.match("", 0, 3020, 977, intArray0, (byte)0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      rE2_0.replaceFirst("", "");
      RE2.match("", "");
      rE2_0.get();
      rE2_0.prefix = "";
      int[] intArray0 = rE2_0.findSubmatchIndex("");
      rE2_0.get();
      byte[] byteArray0 = new byte[3];
      rE2_0.findUTF8Submatch(byteArray0);
      boolean boolean0 = rE2_0.match("", (byte)0, (byte)0, (byte) (-100), intArray0, (byte)0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      RE2 rE2_1 = RE2.compile("");
      String string0 = rE2_1.replaceFirst("", "CR\"~o0[Okf]");
      assertEquals("CR\"~o0[Okf]", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      int[] intArray0 = new int[7];
      intArray0[0] = 3077;
      intArray0[1] = 0;
      intArray0[2] = 3077;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        rE2_0.match("", 0, 0, 3077, intArray0, 3077);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      RE2 rE2_1 = RE2.compile("");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      rE2_1.findUTF8Submatch(byteArray0);
      boolean boolean0 = rE2_1.match("", (byte)0, (byte)0, 2131, (int[]) null, 8249);
      assertTrue(boolean0);
      
      String string0 = rE2_1.replaceFirst("LEFT_PAREN", "LHtG~,AY U,@");
      assertEquals("LHtG~,AY U,@LEFT_PAREN", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("WRJ|");
      String string0 = rE2_0.replaceAll("WRJ|", "q<?a)?'W");
      assertEquals("q<?a)?'W|q<?a)?'W", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RE2 rE2_0 = new RE2("i$A(eUk*]o`7uT)|");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte) (-71);
      byteArray0[8] = (byte) (-6);
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)90);
      assertEquals(4, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RE2 rE2_0 = new RE2("i$A(eUk*]o`7uT)|");
      String string0 = RE2.quoteMeta("OWM(:");
      assertEquals("OWM\\(:", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-69);
      rE2_0.get();
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)6;
      rE2_0.findUTF8Submatch(byteArray0);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte) (-71);
      byteArray0[8] = (byte)16;
      rE2_0.findAllUTF8Submatch(byteArray0, (byte)90);
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (-4134));
      assertEquals(5, list0.size());
      assertNotNull(list0);
      
      List<String[]> list1 = rE2_0.findAllSubmatch("i$A(eUk*]o`7uT)|", 1618);
      assertEquals(17, list1.size());
      assertNotNull(list1);
  }
}
