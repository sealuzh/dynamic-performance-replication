/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 04:29:37 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<Map<Object, Integer>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, Integer, Integer>();
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = doubleKeyMap0.remove((Map<Object, Integer>) hashMap0, (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object object0 = new Object();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>();
      Map<Object, Map<String, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>(map0);
      Map<String, Integer> map1 = doubleKeyMap1.remove(object0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, HashMap<String, Object>, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Object>, HashMap<String, String>>(class0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, String> hashMap1 = doubleKeyMap0.put("P", hashMap0, (HashMap<String, String>) null);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<String, String>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, String>, Object>();
      Object object0 = new Object();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      Object object1 = doubleKeyMap0.put(object0, hashMap0, (Object) hashMap1);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<String, HashMap<Integer, String>, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Integer, String>, HashMap<Object, Object>>();
      Map<Integer, Map<HashMap<Integer, String>, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, HashMap<Integer, String>, Integer> doubleKeyMap1 = new DoubleKeyMap<Integer, HashMap<Integer, String>, Integer>(map0);
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>(2592, 1.0F);
      DoubleKeyMap<String, Object, Integer> doubleKeyMap2 = new DoubleKeyMap<String, Object, Integer>(hashMap0);
      Integer integer0 = doubleKeyMap2.get((String) null, (Object) doubleKeyMap1);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Map<Integer, String>, Map<String, Object>> hashMap0 = new HashMap<Map<Integer, String>, Map<String, Object>>();
      DoubleKeyMap<Map<Integer, String>, String, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, String, Object>(hashMap0);
      Map<String, Object> map0 = doubleKeyMap0.get((Map<Integer, String>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Map<Integer, Map<String, String>>> hashMap0 = new HashMap<HashMap<Object, Object>, Map<Integer, Map<String, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Object>, Integer, Map<String, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Integer, Map<String, String>>(hashMap0, class0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      HashMap<Integer, Map<String, String>> hashMap2 = new HashMap<Integer, Map<String, String>>();
      Integer integer0 = new Integer(0);
      hashMap0.put(hashMap1, hashMap2);
      doubleKeyMap0.remove(hashMap1, integer0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>(class0);
      Map<Integer, Map<String, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, String, String> doubleKeyMap1 = new DoubleKeyMap<Integer, String, String>(map0, class0);
      Integer integer0 = new Integer((-1));
      doubleKeyMap1.put(integer0, "4/wx_sw0?Z>~", "4/wx_sw0?Z>~");
      String string0 = doubleKeyMap1.put(integer0, "F0i&=;", "F0i&=;");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Map<String, Object>> hashMap0 = new HashMap<Object, Map<String, Object>>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap0.put((Object) null, hashMap1);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(hashMap0, class0);
      Object object0 = doubleKeyMap0.get((Object) null, "wrong proto type map ");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, HashMap<Object, String>, HashMap<Map<Object, Integer>, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, String>, HashMap<Map<Object, Integer>, Object>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<Integer, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Integer, Integer>, Object>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Object object0 = doubleKeyMap0.remove((Integer) null, hashMap0);
      assertNull(object0);
  }
}
