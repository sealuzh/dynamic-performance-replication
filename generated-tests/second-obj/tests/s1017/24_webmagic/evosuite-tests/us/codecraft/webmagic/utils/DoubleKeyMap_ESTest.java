/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:45:23 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(hashMap0);
      doubleKeyMap0.remove((Object) null);
      Map<Integer, Object> map0 = new HashMap<Integer, Object>();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
      Object object0 = doubleKeyMap0.get((Object) null, (String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>();
      doubleKeyMap0.put("%Jc==OYe'`(P", "%Jc==OYe'`(P", (Object) "7O`=");
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>();
      Integer integer0 = new Integer(609);
      HashMap<Integer, Map<Object, String>> hashMap0 = new HashMap<Integer, Map<Object, String>>();
      DoubleKeyMap<Integer, Object, String> doubleKeyMap2 = new DoubleKeyMap<Integer, Object, String>(hashMap0);
      Map<String, Map<String, String>> map0 = doubleKeyMap2.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, String> doubleKeyMap3 = new DoubleKeyMap<String, String, String>(map0, class0);
      Map<Object, Object> map1 = doubleKeyMap3.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put(integer0, map1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(class0);
      doubleKeyMap0.newMap();
      doubleKeyMap0.put("wrong proto type map ", "wrong proto type map ", (Object) null);
      Object object0 = new Object();
      doubleKeyMap0.put("wrong proto type map ", "wrong proto type map ", object0);
      HashMap<String, Map<Object, String>> hashMap0 = new HashMap<String, Map<Object, String>>();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, Object>();
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap2 = new DoubleKeyMap<Integer, Integer, Object>();
      doubleKeyMap2.newMap();
      Integer integer0 = new Integer((-2268));
      Integer integer1 = new Integer((-2268));
      Integer integer2 = new Integer((-1457));
      Integer integer3 = new Integer((-2268));
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap3 = new DoubleKeyMap<Integer, Integer, Object>(class0);
      Integer integer4 = new Integer((-1565));
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap4 = new DoubleKeyMap<Integer, Integer, String>();
      Integer integer5 = new Integer((-1457));
      assertFalse(integer5.equals((Object)integer4));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(class0);
      doubleKeyMap0.newMap();
      Object object0 = new Object();
      doubleKeyMap0.put("wrong proto type map ", "wrong proto type map ", object0);
      Object object1 = new Object();
      doubleKeyMap0.remove("wrong proto type map ", "");
      Object object2 = new Object();
      Object object3 = new Object();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>();
      Integer integer0 = new Integer(606);
      doubleKeyMap1.put((Object) doubleKeyMap0, integer0, "");
      DoubleKeyMap<Integer, String, Object> doubleKeyMap2 = new DoubleKeyMap<Integer, String, Object>();
      Map<Object, Map<String, Object>> map0 = doubleKeyMap2.newMap();
      DoubleKeyMap<Object, String, Object> doubleKeyMap3 = new DoubleKeyMap<Object, String, Object>(map0, class0);
      doubleKeyMap2.remove(integer0, "");
      HashMap<Integer, Map<Map<Object, String>, String>> hashMap0 = new HashMap<Integer, Map<Map<Object, String>, String>>();
      DoubleKeyMap<Integer, Map<Object, String>, String> doubleKeyMap4 = new DoubleKeyMap<Integer, Map<Object, String>, String>(hashMap0);
      DoubleKeyMap<String, Object, Object> doubleKeyMap5 = new DoubleKeyMap<String, Object, Object>();
      Map<Object, String> map1 = doubleKeyMap5.newMap();
      doubleKeyMap4.put(integer0, map1, "6");
      doubleKeyMap4.get(integer0, (Map<Object, String>) null);
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap6 = new DoubleKeyMap<Integer, Object, Integer>();
      doubleKeyMap6.newMap();
      HashMap<Integer, Map<Integer, String>> hashMap1 = new HashMap<Integer, Map<Integer, String>>();
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap7 = new DoubleKeyMap<Integer, Integer, String>(hashMap1, class0);
      Map<Integer, String> map2 = doubleKeyMap7.get(integer0);
      assertNull(map2);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(class0);
      doubleKeyMap0.newMap();
      Object object0 = new Object();
      doubleKeyMap0.put("wrong proto type map ", "wrong proto type map ", object0);
      Object object1 = new Object();
      doubleKeyMap0.remove("wrong proto type map ", "wrong proto type map ");
      Object object2 = new Object();
      Object object3 = new Object();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>();
      Object object4 = new Object();
      doubleKeyMap0.remove("wrong proto type map ", "wrong proto type map ");
      Object object5 = new Object();
      Object object6 = new Object();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap2 = new DoubleKeyMap<Object, Integer, String>();
      Integer integer0 = new Integer(1725);
      Integer integer1 = new Integer(1662);
      Integer integer2 = new Integer(1725);
      doubleKeyMap2.put(object2, integer2, "PuC,]XUbQq_");
      DoubleKeyMap<Integer, String, Object> doubleKeyMap3 = new DoubleKeyMap<Integer, String, Object>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap4 = new DoubleKeyMap<Integer, String, Object>();
      doubleKeyMap4.newMap();
      Object object7 = new Object();
      Object object8 = new Object();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object9 = new Object();
      Class<Map> class1 = Map.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap5 = null;
      try {
        doubleKeyMap5 = new DoubleKeyMap<String, Object, String>(class1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
