/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 10:35:40 GMT 2019
 */

package org.la4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.AdvancedMatrixPredicate;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesAddition;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1603;
      double[] doubleArray0 = new double[0];
      DenseMatrix.from1DArray(1603, 1603, doubleArray0);
      double[][] doubleArray1 = new double[3][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      double[] doubleArray2 = new double[0];
      doubleArray1[2] = doubleArray2;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray1);
      columnMajorSparseMatrix0.toColumnMajorSparseMatrix();
      Matrix matrix0 = columnMajorSparseMatrix0.multiply(907.356080972369);
      int int1 = 0;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) columnMajorSparseMatrix0, 0, 1603, (-1925), 0, 13, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative destination position: -1925, 0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(996);
      Matrix matrix0 = sparseVector0.toDiagonalMatrix();
      sparseVector0.sum();
      // Undeclared exception!
      matrix0.insertColumn(10, sparseVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1152;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1152, 1260, doubleArray0);
      int int0 = 534;
      double[] doubleArray1 = new double[0];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray1);
      // Undeclared exception!
      try { 
        denseMatrix0.insertRow(534, sparseVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      matrix0.euclideanNorm();
      Matrix matrix1 = null;
      // Undeclared exception!
      try { 
        matrix0.insert((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 163;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(163);
      denseMatrix0.setColumn(2, (-4426.557355076302));
      // Undeclared exception!
      denseMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      matrix0.setAll(9.790933418344619E-14);
      denseVector0.max();
      int int0 = (-98);
      Integer integer0 = new Integer((-98));
      linkedList0.add(integer0);
      Matrix.unit(904, 9);
      int int1 = (-350);
      Integer integer1 = new Integer((-1275));
      linkedList0.offerFirst(integer1);
      int int2 = 121;
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList1.offerLast(matrix0);
      SparseMatrix sparseMatrix0 = SparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      sparseMatrix0.toBinary();
      linkedList1.removeLastOccurrence(sparseMatrix0);
      linkedList0.containsAll(linkedList1);
      int int3 = 8;
      // Undeclared exception!
      try { 
        linkedList0.add(2508, integer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2508, Size: 2
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 13;
      DenseVector denseVector0 = DenseVector.constant(13, 9.09494701772928E-11);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      int int1 = 1131;
      Matrix matrix1 = Matrix.constant(1131, 13, (-1408.0));
      // Undeclared exception!
      try { 
        matrix1.insert(matrix0, 4, 13, 5, 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot add 5 rows and 13 cols at 4, 13 in a 1131x13 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(5, 8);
      sparseMatrix0.equals((Object) null);
      String string0 = sparseMatrix0.mkString((String) null, (String) null);
      sparseMatrix0.iterator();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      String string1 = sparseMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      DenseVector denseVector0 = DenseVector.constant(37, (-904.083391));
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, denseVector0);
      matrix0.sliceBottomRight(37, (-34));
      // Undeclared exception!
      try { 
        matrix0.removeRow((-34));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..36
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 37;
      Matrix matrix0 = Matrix.identity(37);
      Matrix matrix1 = matrix0.removeLastRow();
      int int1 = 2710;
      int int2 = 4;
      int int3 = 37;
      // Undeclared exception!
      try { 
        matrix1.insert(matrix0, 2710, (-1610612735), 4, 2710, 37, 2710);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 4, 2710
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 3;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(3);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      rowMajorSparseMatrix0.foldColumns(vectorAccumulator0);
      rowMajorSparseMatrix0.iteratorOfColumn(8);
      int int1 = (-1431655764);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      MockRandom mockRandom0 = new MockRandom(8);
      rowMajorSparseMatrix0.toDenseMatrix();
      DenseVector denseVector0 = DenseVector.random(12, mockRandom0);
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.insertRow((-1431655764), vector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..2
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 9.09494701772928E-11;
      doubleArray1[1] = 5.503840364735054E-14;
      doubleArray1[2] = (-239.59140877831);
      doubleArray1[3] = (-891.3);
      doubleArray1[4] = (-1536.26);
      doubleArray0[0] = doubleArray1;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      matrix0.swapColumns((-1615), (-1615));
      assertEquals(5, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1912.19217;
      doubleArray1[1] = 9.790933418344619E-14;
      doubleArray1[2] = 3188.29786528;
      doubleArray0[0] = doubleArray1;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      int int0 = 2;
      Vector vector0 = Vector.zero(2);
      // Undeclared exception!
      try { 
        rowMajorSparseMatrix0.setColumn(2, vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 2. Should be: 1.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(20, 20, 20);
      columnMajorSparseMatrix0.rank();
      columnMajorSparseMatrix0.product();
      int int0 = (-1015);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.transformColumn((-1015), (VectorFunction) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1015
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-2075.5071440004);
      doubleArray0[4] = (-1382.21285948649);
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      String string0 = matrix0.toString();
      assertEquals("-1.000 0.000  0.000     0.000     0.000\n 0.000 1.000  0.000     0.000     0.000\n 0.000 0.000 -1.000     0.000     0.000\n 0.000 0.000  0.000 -2075.507     0.000\n 0.000 0.000  0.000     0.000 -1382.213\n", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 2391.92646;
      doubleArray2[1] = (-3520.99459875);
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1.0;
      doubleArray2[4] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 476.15053;
      doubleArray3[1] = (-3520.99459875);
      doubleArray3[2] = 1.0;
      doubleArray3[3] = (-3520.99459875);
      doubleArray3[4] = (-3520.99459875);
      doubleArray3[5] = 0.0;
      doubleArray3[6] = (-3520.99459875);
      doubleArray3[7] = 2391.92646;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 2391.92646;
      doubleArray4[2] = 1.0;
      doubleArray4[3] = 2391.92646;
      doubleArray4[4] = (-3520.99459875);
      doubleArray4[5] = 2391.92646;
      doubleArray4[6] = (-3520.99459875);
      doubleArray4[7] = 1.0;
      doubleArray4[8] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 1.0;
      doubleArray5[1] = (-3520.99459875);
      doubleArray5[2] = 2391.92646;
      doubleArray5[3] = 1.0;
      doubleArray5[4] = 0.0;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 2391.92646;
      doubleArray5[7] = 1719.450861;
      doubleArray5[8] = 0.0;
      doubleArray0[4] = doubleArray5;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      SparseMatrix sparseMatrix0 = SparseMatrix.diagonal(1989, 2391.92646);
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.insert((Matrix) sparseMatrix0, 1989, 1989, 172, 172, 172, 1989);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination position out of bounds: 172, 172
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.zero(2262, 2262);
      // Undeclared exception!
      try { 
        denseMatrix0.power((-1073741823));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The exponent should be positive: -1073741823.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(2511, 2511, 2511);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = columnMajorSparseMatrix0.transformColumn(1412, vectorFunction0);
      matrix0.toColumnMajorSparseMatrix();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      columnMajorSparseMatrix0.fold(matrixAccumulator0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      RoundingMode roundingMode0 = RoundingMode.DOWN;
      decimalFormat0.setRoundingMode(roundingMode0);
      sparseMatrix0.toMatrixMarket((NumberFormat) decimalFormat0);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = sparseMatrix0.non(matrixPredicate0);
      assertFalse(boolean0);
      
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.setSeed(0);
      Matrix matrix0 = Matrix.random(0, 0, mockRandom0);
      assertEquals(0, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("%%MatrixMarket");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 9;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(9);
      CCSMatrix cCSMatrix0 = (CCSMatrix)rowMajorSparseMatrix0.rotate();
      ((Matrix)cCSMatrix0).ensureDimensionsAreCorrect(9, 9);
      CRSMatrix cRSMatrix0 = (CRSMatrix)rowMajorSparseMatrix0.insert((Matrix) cCSMatrix0, 9, 8);
      cCSMatrix0.hashCode();
      rowMajorSparseMatrix0.setAll(8);
      // Undeclared exception!
      try { 
        cRSMatrix0.non((AdvancedMatrixPredicate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1954;
      DenseVector denseVector0 = DenseVector.unit(1954);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      matrix0.infinityNorm();
      int int1 = 1;
      // Undeclared exception!
      try { 
        matrix0.swapColumns(1954, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1954
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      DenseMatrix denseMatrix0 = DenseMatrix.random(4403, 1, mockRandom0);
      denseMatrix0.toMatrixMarket();
      int int0 = 6;
      DenseMatrix.identity(4403);
      // Undeclared exception!
      try { 
        denseMatrix0.determinant();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can not compute determinant of non-square matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(9, 1.0);
      DenseVector denseVector0 = DenseVector.zero(9);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        denseMatrix0.insert(matrix0, 9, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Out of bounds: Cannot get 9 rows and 2 cols at 0, 0 from a 9x1 matrix.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 54;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(54, 54, 54);
      int[] intArray0 = new int[4];
      intArray0[0] = 54;
      intArray0[1] = 54;
      intArray0[2] = 54;
      intArray0[3] = 54;
      // Undeclared exception!
      try { 
        denseMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(2358);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(2422, 2422, (-346.0));
      Locale locale0 = Locale.ENGLISH;
      NumberFormat.getInstance(locale0);
      columnMajorSparseMatrix0.blankOfRows(553);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>(linkedList0);
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList1);
      // Undeclared exception!
      try { 
        denseMatrix0.insertColumn((-2147480198), sparseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..2421
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 9;
      DenseMatrix denseMatrix0 = DenseMatrix.constant(9, 9, 1.0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(9, 9);
      ooPlaceMatricesMultiplication0.partiallyApply(columnMajorSparseMatrix0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, denseMatrix0);
      Matrix matrix1 = matrix0.subtract(1.0);
      Matrix matrix2 = matrix1.removeFirstColumn();
      matrix1.toColumnMajorSparseMatrix();
      int int1 = 198;
      matrix2.equals((Matrix) denseMatrix0, (double) 9);
      matrix2.blankOfColumns(198);
      MatrixVectorOperation<ColumnMajorSparseMatrix> matrixVectorOperation0 = (MatrixVectorOperation<ColumnMajorSparseMatrix>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Vector.fromCSV("nKp");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 9;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(9, 9, 9);
      int int1 = 336;
      // Undeclared exception!
      try { 
        columnMajorSparseMatrix0.removeColumn(336);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..8
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(1, 1, doubleArray0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.apply(denseMatrix0, denseMatrix0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      Matrix matrix1 = columnMajorSparseMatrix0.rotate();
      matrix1.insert((Matrix) denseMatrix0, 1, 1, 1, 1);
      columnMajorSparseMatrix0.euclideanNorm();
      Matrix matrix2 = matrix1.add((Matrix) columnMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        matrix2.multiply((Matrix) denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of rows in the left-hand matrix should be equal to the number of columns in the right-hand matrix: 2 does not equal to 1.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      int int0 = 2497;
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(2497, 0.0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        denseMatrix0.updateRow(2497, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-722.1049);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-722.1049);
      doubleArray2[1] = (-722.1049);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-722.1049);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (-722.1049);
      doubleArray4[1] = (-722.1049);
      doubleArray4[2] = (-722.1049);
      doubleArray4[3] = (-722.1049);
      doubleArray4[4] = (-722.1049);
      doubleArray4[5] = (-722.1049);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (-722.1049);
      doubleArray5[1] = (-722.1049);
      doubleArray5[2] = (-722.1049);
      doubleArray5[3] = (-722.1049);
      doubleArray5[4] = (-722.1049);
      doubleArray5[5] = (-722.1049);
      doubleArray5[6] = (-722.1049);
      doubleArray5[7] = (-722.1049);
      doubleArray5[8] = (-722.1049);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = (-722.1049);
      doubleArray6[1] = (-722.1049);
      doubleArray6[2] = (-722.1049);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      double double0 = denseMatrix0.minInRow(2);
      assertEquals((-722.1049), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 397.726376294;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      DenseMatrix denseMatrix0 = DenseMatrix.block(matrix0, matrix0, matrix0, matrix0);
      // Undeclared exception!
      try { 
        denseMatrix0.insertRow(845, denseVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[][] doubleArray0 = new double[5][6];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 559.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-1256.9187634);
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-1256.9187634);
      doubleArray4[2] = 1.0;
      doubleArray4[3] = 1.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = (-1256.9187634);
      doubleArray5[2] = (-1256.9187634);
      doubleArray5[3] = 0.0;
      Matrix matrix0 = Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        matrix0.setColumn(37, 2.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 8;
      MockRandom mockRandom0 = new MockRandom(1L);
      Matrix matrix0 = Matrix.randomSymmetric(8, mockRandom0);
      Matrix.identity(8);
      matrix0.removeLastColumn();
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 8;
      doubleArray1[1] = (double) 8;
      doubleArray1[2] = (double) 1L;
      doubleArray1[3] = (double) 8;
      doubleArray1[4] = (double) 8;
      doubleArray1[5] = (double) 1L;
      doubleArray1[6] = (double) 1L;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 8;
      doubleArray2[1] = (double) 8;
      doubleArray0[1] = doubleArray2;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      int int0 = 169;
      DenseVector denseVector0 = DenseVector.zero(169);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Collection<Integer> collection0 = hashMap0.values();
      SparseVector sparseVector0 = SparseVector.fromCollection(collection0);
      ooPlaceOuterProduct0.partiallyApply(sparseVector0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector1 = SparseVector.fromCollection(linkedList0);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      sparseVector1.toCSV(numberFormat0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector0, sparseVector1);
      // Undeclared exception!
      try { 
        matrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(32, 1.0);
      DenseVector denseVector0 = DenseVector.zero(32);
      Matrix matrix0 = denseVector0.toColumnMatrix();
      Matrix matrix1 = Matrix.constant(32, 2, 32);
      double double0 = matrix1.norm();
      assertEquals(256.0, double0, 0.01);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      String string0 = matrix0.toCSV((NumberFormat) decimalFormat0);
      assertEquals(1, matrix0.columns());
      assertEquals("0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n", string0);
      
      int int0 = matrix1.rank();
      assertEquals(1, int0);
      
      double double1 = denseMatrix0.euclideanNorm();
      assertEquals(5.656854249492381, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.identity(2357);
      DenseMatrix denseMatrix0 = DenseMatrix.constant(2422, 2422, (-346.0));
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) columnMajorSparseMatrix0, denseMatrix0);
      Locale locale0 = Locale.ENGLISH;
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      // Undeclared exception!
      matrix0.mkString(numberFormat0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix matrix0 = Matrix.randomSymmetric(32, mockRandom0);
      int int0 = (-4378);
      // Undeclared exception!
      try { 
        matrix0.slice(14, 1, (-4378), 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong slice range: [14..-4378][1..32].
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 3;
      int int1 = 7;
      Matrix matrix0 = Matrix.zero(3, 7);
      int int2 = 10;
      long long0 = (-488L);
      MockRandom mockRandom0 = new MockRandom((-488L));
      long long1 = 0L;
      mockRandom0.ints(0L);
      double double0 = 1.0;
      matrix0.subtract((double) (-488L));
      // Undeclared exception!
      try { 
        mockRandom0.doubles((double) 7, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 17);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      sparseVector0.toDenseVector();
      matrix0.subtract((-4563.255244916146));
      Matrix matrix1 = Matrix.constant(17, 2975, (-2843.6));
      assertEquals(2975, matrix1.columns());
      assertEquals(17, matrix1.rows());
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)Matrix.diagonal(17, 7.0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(17, cRSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Matrix matrix0 = Matrix.fromCSV(" ");
      SparseMatrix sparseMatrix0 = matrix0.toSparseMatrix();
      assertEquals(0, sparseMatrix0.columns());
      assertEquals(1, sparseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-52.0);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 9.09494701772928E-11;
      doubleArray1[3] = 1.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 9.09494701772928E-11;
      doubleArray2[1] = 9.09494701772928E-11;
      doubleArray2[2] = 9.09494701772928E-11;
      doubleArray2[3] = 9.09494701772928E-11;
      doubleArray2[4] = 1.0;
      doubleArray0[1] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1146);
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple((SparseMatrix) rowMajorSparseMatrix0, denseMatrix0);
      Matrix matrix1 = matrix0.sliceBottomRight(48, 1146);
      assertEquals(0, matrix1.columns());
      assertEquals(1098, matrix1.rows());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 375;
      int int1 = Integer.MAX_VALUE;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 375;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = (double) 375;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (double) Integer.MAX_VALUE;
      doubleArray0[7] = (double) 375;
      // Undeclared exception!
      try { 
        DenseMatrix.from1DArray(375, Integer.MAX_VALUE, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-2939.045331274);
      doubleArray1[1] = (-129.30518725);
      doubleArray1[2] = 1745.846268702771;
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 1745.846268702771;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1745.846268702771;
      doubleArray2[4] = (-129.30518725);
      doubleArray2[5] = (-2939.045331274);
      doubleArray0[1] = doubleArray2;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      DenseMatrix.diagonal(16, 1.0);
      double double0 = denseMatrix0.max();
      assertEquals(1745.846268702771, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 1392;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1392);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.GAUSSIAN;
      denseMatrix0.withSolver(linearAlgebra_SolverFactory0);
      int int1 = 557;
      // Undeclared exception!
      try { 
        Vector.fromMap((Map<Integer, ? extends Number>) null, 557);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SparseVector sparseVector0 = SparseVector.zero(2069);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      // Undeclared exception!
      try { 
        matrix0.setRow(3283, (Vector) sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 2069. Should be: 1.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1142.0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = 2267.77501349944;
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from1DArray(1, 1, doubleArray0);
      Matrix matrix0 = columnMajorSparseMatrix0.rotate();
      // Undeclared exception!
      try { 
        matrix0.maxInColumn(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Matrix matrix0 = Matrix.constant(2934, 2934, 2934);
      assertEquals(2934, matrix0.rows());
      assertEquals(2934, matrix0.columns());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Matrix matrix0 = Matrix.zero(4819, 4819);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(4819, 4819);
      Matrix matrix1 = rowMajorSparseMatrix0.rotate();
      Matrix.zero(4819, 4819);
      Matrix matrix2 = matrix0.subtract(matrix1);
      assertEquals(4819, matrix2.columns());
      assertEquals(4819, matrix2.rows());
      assertEquals(4819, matrix0.columns());
      assertEquals(4819, matrix0.rows());
      
      rowMajorSparseMatrix0.copyOfShape(4819, 4819);
      Matrix matrix3 = rowMajorSparseMatrix0.blankOfColumns(2);
      assertEquals(2, matrix3.columns());
      assertEquals(4819, matrix3.rows());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 593;
      double double0 = 3923.3104;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.diagonal(593, 3923.3104);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '594' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.fromCSV("Unknown symmetry type: ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(3, 3, 3);
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = rowMajorSparseMatrix0.columnMajorIterator();
      assertNotNull(columnMajorMatrixIterator0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Matrix.randomSymmetric((-633), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 602.42456;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 4854.85837324031;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 602.42456;
      doubleArray0[1] = doubleArray2;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      RowMajorSparseMatrix rowMajorSparseMatrix1 = matrix0.toRowMajorSparseMatrix();
      assertEquals(2, rowMajorSparseMatrix1.rows());
      assertEquals(4, rowMajorSparseMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[][] doubleArray0 = new double[0][3];
      Matrix.from2DArray(doubleArray0);
      int int0 = 2;
      MockRandom mockRandom0 = new MockRandom(0L);
      // Undeclared exception!
      try { 
        mockRandom0.doubles(1454.8329156, (double) 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bound must be greater than origin
         //
         verifyException("java.util.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2755.1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 2755.1;
      doubleArray2[1] = 2755.1;
      doubleArray2[2] = 2755.1;
      doubleArray2[3] = 2755.1;
      doubleArray2[4] = 2228.93;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 2228.93;
      doubleArray3[2] = 2228.93;
      doubleArray3[3] = 2755.1;
      doubleArray3[4] = 2755.1;
      doubleArray3[5] = 2755.1;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 2228.93;
      doubleArray4[1] = 2755.1;
      doubleArray4[2] = 2755.1;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 2228.93;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 2755.1;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 2228.93;
      doubleArray5[3] = 2228.93;
      doubleArray5[4] = 2228.93;
      doubleArray5[5] = 0.0;
      doubleArray5[6] = 2755.1;
      doubleArray5[7] = 2228.93;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = 0.0;
      doubleArray0[5] = doubleArray6;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, (SparseMatrix) rowMajorSparseMatrix0);
      // Undeclared exception!
      try { 
        Matrix.block(matrix0, matrix0, matrix0, rowMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Matrix.random(2115, 0, mockRandom0);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 2115;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 2115;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 2115;
      DenseMatrix denseMatrix0 = DenseMatrix.from1DArray(2115, 2115, doubleArray0);
      // Undeclared exception!
      try { 
        ooPlaceMatrixHadamardProduct0.apply(denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      int int0 = 790;
      ColumnMajorSparseMatrix.identity(790);
      DenseMatrix denseMatrix0 = DenseMatrix.diagonal(790, 0.0);
      // Undeclared exception!
      denseMatrix0.euclideanNorm();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(562, 37, 6025);
      DenseMatrix denseMatrix0 = DenseMatrix.fromCSV("   ");
      ooPlaceMatricesSubtraction0.applySimple((SparseMatrix) rowMajorSparseMatrix0, denseMatrix0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      OoPlaceMatricesAddition ooPlaceMatricesAddition0 = new OoPlaceMatricesAddition();
      int int0 = 2;
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = 1642.8830161516437;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = 1642.8830161516437;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 1642.8830161516437;
      doubleArray2[4] = 1642.8830161516437;
      doubleArray2[5] = (double) 2;
      doubleArray2[6] = 1642.8830161516437;
      doubleArray2[7] = (double) 2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        SparseMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      // Undeclared exception!
      try { 
        ooPlaceMatricesSubtraction0.apply((DenseMatrix) null, (DenseMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrix.unit((-212), (-212));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 7;
      Matrix matrix0 = Matrix.identity(7);
      matrix0.removeLastRow();
      int int1 = (-2265);
      // Undeclared exception!
      try { 
        DenseMatrix.fromMatrixMarket("rdJk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 8;
      Matrix matrix0 = Matrix.diagonal(8, 8);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.CHOLESKY;
      matrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      matrix0.toCSV();
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      // Undeclared exception!
      try { 
        SparseVector.fromMatrixMarket("8.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 8.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 8.000, 0.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 8.000, 0.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 8.000, 0.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 8.000, 0.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 8.000, 0.000\n0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 8.000\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Matrix matrix0 = Matrix.diagonal(1030, 1030);
      // Undeclared exception!
      try { 
        matrix0.minInColumn((-1506));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1506' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DenseMatrix.diagonal(0, 0);
  }
}
