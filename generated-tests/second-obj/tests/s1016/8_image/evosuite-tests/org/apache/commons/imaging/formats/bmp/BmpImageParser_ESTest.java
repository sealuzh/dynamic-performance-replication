/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:33:27 GMT 2018
 */

package org.apache.commons.imaging.formats.bmp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.List;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import java.util.function.BiFunction;
import javax.swing.DebugGraphics;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultEditorKit;
import org.apache.commons.imaging.ImageFormats;
import org.apache.commons.imaging.common.bytesource.ByteSource;
import org.apache.commons.imaging.common.bytesource.ByteSourceArray;
import org.apache.commons.imaging.common.bytesource.ByteSourceFile;
import org.apache.commons.imaging.common.bytesource.ByteSourceInputStream;
import org.apache.commons.imaging.formats.bmp.BmpImageParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BmpImageParser_ESTest extends BmpImageParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>(21);
      // Undeclared exception!
      try { 
        bmpImageParser0.getImageSize((ByteSource) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[6];
      try { 
        bmpImageParser0.getImageSize(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put(">RTwC'73*", byteArray0);
      try { 
        bmpImageParser0.getImageSize((ByteSource) null, (Map<String, Object>) hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: >RTwC'73*
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[23];
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      try { 
        bmpImageParser0.getBufferedImage((ByteSource) byteSourceArray0, (Map<String, Object>) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported BMP file
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[23];
      try { 
        bmpImageParser0.getFormatCompliance(byteArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid/unsupported BMP file
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[1];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      try { 
        bmpImageParser0.getBufferedImage(byteArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      String string0 = bmpImageParser0.getName();
      assertEquals("Bmp-Custom", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      String string0 = bmpImageParser0.getDefaultExtension();
      assertEquals(".bmp", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = bmpImageParser0.getXmpXml((ByteSource) null, hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray((byte[]) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      // Undeclared exception!
      try { 
        bmpImageParser0.getImageInfo((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      JPopupMenu jPopupMenu0 = new JPopupMenu("");
      BiFunction<Object, Object, List> biFunction0 = (BiFunction<Object, Object, List>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashtable0.merge("", jPopupMenu0, biFunction0);
      try { 
        bmpImageParser0.getBufferedImage((InputStream) null, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: 
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      MockFile mockFile0 = new MockFile("p~@m3^$e+0xAen");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      bmpImageParser0.getBufferedImage((File) mockFile0, (Map<String, Object>) hashMap0);
      PrintStream printStream0 = DebugGraphics.logStream();
      // Undeclared exception!
      try { 
        bmpImageParser0.writeImage((BufferedImage) null, printStream0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      // Undeclared exception!
      try { 
        bmpImageParser0.writeImage((BufferedImage) null, (OutputStream) null, (Map<String, Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.palette.PaletteFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[1];
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      hashMap0.put("VERBOSE", mockMinguoDate0);
      try { 
        bmpImageParser0.getBufferedImage(byteArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "BUFFERED_IMAGE_FACTORY");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "sLL&*s)MuF");
      MockFile mockFile0 = new MockFile("BUFFERED_IMAGE_FACTORY", "BUFFERED_IMAGE_FACTORY");
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Object object0 = Image.UndefinedProperty;
      hashtable0.put("sLL&*s)MuF", object0);
      try { 
        bmpImageParser0.getImageInfo((ByteSource) byteSourceFile0, (Map<String, Object>) hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: sLL&*s)MuF
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)109;
      hashMap0.put("VERBOSE", "VERBOSE");
      byteArray0[5] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      ByteSourceArray byteSourceArray0 = new ByteSourceArray("", byteArray0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      try { 
        bmpImageParser0.getImageSize((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream0 = new MockPrintStream("|#[%yl3CZPdLs0&G _h");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      hashMap0.put("|#[%yl3CZPdLs0&G _h", "|#[%yl3CZPdLs0&G _h");
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      try { 
        bmpImageParser0.writeImage((BufferedImage) null, mockPrintStream0, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: |#[%yl3CZPdLs0&G _h
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      MockFile mockFile0 = new MockFile("width");
      MockFile mockFile1 = new MockFile(mockFile0, "width");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile1);
      try { 
        bmpImageParser0.dumpImageFile((PrintWriter) mockPrintWriter0, (ByteSource) byteSourceFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      String string0 = DefaultEditorKit.defaultKeyTypedAction;
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      ImageFormats imageFormats0 = ImageFormats.PSD;
      hashMap1.put("PIXEL_DENSITY", imageFormats0);
      BmpImageParser bmpImageParser1 = new BmpImageParser();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/8_image");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "default-typed");
      String string1 = "Incomplete subimage parameters, missing";
      FileSystemHandling.createFolder(evoSuiteFile0);
      hashMap1.put("Incomplete subimage parameters, missing", "PIXEL_DENSITY");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ColorTable: ", false);
      // Undeclared exception!
      try { 
        bmpImageParser0.writeImage((BufferedImage) null, mockFileOutputStream0, hashMap1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.imaging.ImageFormats cannot be cast to org.apache.commons.imaging.PixelDensity
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)66;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("VERBOSE", "VERBOSE");
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)103;
      byteArray1[1] = (byte) (-1);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)66;
      byteArray2[1] = (byte)103;
      byteArray2[2] = (byte) (-1);
      byteArray2[3] = (byte)66;
      byteArray2[4] = (byte) (-1);
      byteArray2[5] = (byte) (-1);
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray2);
      try { 
        bmpImageParser0.getImageInfo((ByteSource) byteSourceArray0, (Map<String, Object>) hashMap0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)99;
      Map<String, Object> map0 = null;
      bmpImageParser0.getAcceptedTypes();
      BmpImageParser bmpImageParser1 = new BmpImageParser();
      BmpImageParser bmpImageParser2 = new BmpImageParser();
      bmpImageParser2.getICCProfileBytes(byteArray0, (Map<String, Object>) null);
      try { 
        bmpImageParser0.getBufferedImage(byteArray0, (Map<String, Object>) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)34;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)50;
      byteArray0[6] = (byte)109;
      ByteSourceArray byteSourceArray0 = new ByteSourceArray(byteArray0);
      byteSourceArray0.getDescription();
      Hashtable<String, ImageFormats> hashtable0 = new Hashtable<String, ImageFormats>();
      ImageFormats imageFormats0 = ImageFormats.JBIG2;
      hashtable0.put("BUFFERED_IMAGE_FACTORY", imageFormats0);
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>(hashtable0);
      bmpImageParser0.getMetadata((ByteSource) byteSourceArray0, (Map<String, Object>) hashtable1);
      System.setCurrentTimeMillis(2806L);
      try { 
        bmpImageParser0.getBufferedImage((ByteSource) byteSourceArray0, (Map<String, Object>) hashtable1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid BMP File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BmpImageParser bmpImageParser0 = new BmpImageParser();
      MockFile mockFile0 = new MockFile("wWridh");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("wWridh");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      mockPrintWriter0.checkError();
      mockFile0.toURI();
      defaultTableModel0.fireTableCellUpdated(551, 551);
      mockPrintWriter0.println((Object) defaultTableModel0);
      mockPrintWriter0.println(0.5073083701911348);
      ByteSourceFile byteSourceFile0 = new ByteSourceFile(mockFile0);
      mockPrintWriter0.println((Object) "wWridh");
      mockPrintWriter0.println(0.5073083701911348);
      mockFile0.toURL();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "wWridh");
      mockFile0.toURL();
      mockPrintWriter0.println((double) 551);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFileOutputStream0, true);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      mockPrintWriter1.println(1592.0599551459727);
      mockFile0.toURL();
      mockPrintWriter0.println(1592.0599551459727);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "wWridh");
      ByteSourceFile byteSourceFile1 = new ByteSourceFile(mockFile0);
      bmpImageParser0.getAcceptedExtensions();
      try { 
        bmpImageParser0.dumpImageFile((PrintWriter) mockPrintWriter2, (ByteSource) byteSourceFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // BMP: Unknown Compression: 1701080909
         //
         verifyException("org.apache.commons.imaging.formats.bmp.BmpImageParser", e);
      }
  }
}
