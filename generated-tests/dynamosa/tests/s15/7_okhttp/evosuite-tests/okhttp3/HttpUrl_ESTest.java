/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 02:19:34 GMT 2019
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownHostException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import okhttp3.HttpUrl;
import okio.Buffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpUrl_ESTest extends HttpUrl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl httpUrl1 = httpUrl0.resolve("vD2xqo^;nK['2SU\u0001");
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/vD2xqo%5E;nK['2SU%01", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http:%2f%2f%2ftmp%2ffoo.bar");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:%2f%2f%2ftmp%2ffoo.bar
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.setEncodedQueryParameter("%7c,", "59_Kc7'@:dBJ53%p");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: %
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpUrl.percentDecode((Buffer) null, ".%2e", 0, (-23), false);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("[]", 65533, (-2158), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      try { 
        HttpUrl.getChecked("ffff0000");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for ffff0000
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      try { 
        HttpUrl.getChecked("ZKZk*");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for ZKZk*
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl httpUrl1 = httpUrl0.resolve("ANkT;A7");
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/ANkT;A7", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        HttpUrl.getChecked("zZ{/!3%22");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for zZ{/!3%22
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl httpUrl1 = httpUrl0.resolve("aWZ?@2y]F)5=rZ9vC");
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/aWZ?@2y]F)5=rZ9vC", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("F4");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder(" \"':;<=>@[]^`{}|/?#");
      httpUrl_Builder0.addEncodedPathSegment("%2e%2e");
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("V");
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("\\");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder1);
      HttpUrl httpUrl2 = httpUrl1.resolve("8wi4^f-MW\"R7W] ~T");
      assertNotNull(httpUrl2);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl2.port());
      assertEquals("http://foo.bar/V/%5C", httpUrl1.toString());
      assertEquals("http://foo.bar/V/8wi4%5Ef-MW%22R7W]%20~T", httpUrl2.toString());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("Invalid host: ");
      assertEquals("foo.bar", httpUrl0.host());
      assertNotNull(httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("ftp://");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.port(65535);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 0
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.parse((HttpUrl) null, "Kd]JD]j[r&g;l*a");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/foo.bar");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("http:/foo.bar");
      int int0 = httpUrl_Builder0.effectivePort();
      assertEquals(80, int0);
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("V");
      httpUrl_Builder0.encodedUsername("V");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      String string0 = httpUrl1.username();
      assertEquals(80, httpUrl1.port());
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals("V", string0);
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("V");
      httpUrl_Builder0.port(44);
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      URL uRL0 = httpUrl1.url();
      assertEquals("http://foo.bar:44/V", uRL0.toString());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("j");
      assertNotNull(httpUrl_Builder0);
      
      httpUrl_Builder0.setQueryParameter("K?Bq/a6<z8n>R)", "http::");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      String string0 = httpUrl1.query();
      assertEquals("http://foo.bar/j?K?Bq/a6%3Cz8n%3ER)=http::", httpUrl1.toString());
      assertEquals(80, httpUrl1.port());
      assertEquals("K?Bq/a6<z8n>R)=http::", string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder(" \"':;<=>@[]^`{}|/?#");
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("%2e");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder1);
      String string0 = httpUrl1.password();
      assertEquals(".", string0);
      assertEquals("%2e", httpUrl1.encodedPassword());
      assertEquals("foo.bar", httpUrl1.host());
      assertEquals(2, httpUrl1.pathSize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", httpUrl1.encodedFragment());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("https:/foo.bar");
      assertEquals(443, httpUrl0.port());
      assertEquals("https://foo.bar/", httpUrl0.toString());
      assertNotNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      boolean boolean0 = httpUrl0.isHttps();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      URI uRI0 = MockURI.URI("https:/www.somefakebutwellformedurl.org/fooexample", "https:/www.somefakebutwellformedurl.org/fooexample", (String) null);
      URL uRL0 = MockURI.toURL(uRI0);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertEquals(443, httpUrl0.port());
      assertEquals("https://www.somefakebutwellformedurl.org/fooexample:https:/www.somefakebutwellformedurl.org/fooexample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder(" \"':;<=>@[]^`{}|/?#&!$(),~");
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      httpUrl1.fragment();
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/%22':;%3C=%3E@[]%5E%60%7B%7D%7C/?#&!$(),~", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder(" \"':;<=>@[]^`{}|/?#");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      httpUrl1.fragment();
      assertEquals("http://foo.bar/%22':;%3C=%3E@[]%5E%60%7B%7D%7C/?#", httpUrl1.toString());
      assertEquals(80, httpUrl1.port());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl httpUrl1 = httpUrl0.resolve("@/?#");
      String string0 = httpUrl1.encodedQuery();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/@/?#", httpUrl1.toString());
      assertEquals("#", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('0');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("Cannot buffer entire body for content length: ", 36, 45, "encodedPassword == null", false, false, false, false);
      assertEquals("t%20%6C%65%6Egth:", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("");
      assertTrue(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.queryParameterValues((String) null);
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterValues("");
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/foo.bar");
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.queryParameter("");
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded((String) null, 1023, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("+8D", (-1577), (-1577));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentEncoded("", (-1757), 1046);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode(buffer0, "", 12, 13, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.percentDecode(buffer0, "delegate == null", 0, 0, false);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("(Hi<7=&z_qt:It>", false);
      assertEquals("(Hi<7=&z_qt:It>", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = HttpUrl.percentDecode("EgB>Gm]pab", 0, 0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode("", (-451), (-451), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("Dcp-'s");
      // Undeclared exception!
      try { 
        HttpUrl.pathSegmentsToString((StringBuilder) null, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.queryParameterValues(" \"<>^`{}|/?#");
      HttpUrl.pathSegmentsToString((StringBuilder) null, list0);
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("");
      httpUrl_Builder0.setPathSegment(0, "xz");
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("foo.bar", httpUrl0.host());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("FYrS`}W.<$");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      HttpUrl.namesAndValuesToQueryString(stringBuilder0, list0);
      assertFalse(list0.contains("FYrS`}W.<$"));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      try { 
        HttpUrl.getChecked("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for 
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("INVALID_HOST", "INVALID_HOST", 0, "INVALID_HOST", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        HttpUrl.get(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL(".%2e", "|", 2677, "UQ*;(GYwWR(N/[Q?", uRLStreamHandler0);
      // Undeclared exception!
      try { 
        HttpUrl.get(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      URI uRI0 = MockURI.URI("https", "https", "tTWys,");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertEquals(443, httpUrl0.port());
      assertNotNull(httpUrl0);
      assertEquals("tTWys,", httpUrl0.fragment());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("https://https/#tTWys,", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      URI uRI0 = MockURI.URI("?..", "?..", "zxr95Cjk/}");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      httpUrl0.equals((Object) null);
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      Object object0 = new Object();
      boolean boolean0 = httpUrl0.equals(object0);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertFalse(boolean0);
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = HttpUrl.defaultPort("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('(');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('9');
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = HttpUrl.decodeHexDigit('a');
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "@/?#", 55296, 80, (String) null, false, true, true, false);
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "password == null", 84, 0, "okio.HashingSource", true, true, true, true);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "", (-83190808), (-1620274263), "okio.HashingSource", false, true, false, true);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpUrl.canonicalize((Buffer) null, "http:///tmp/foo.bar", (-2364), (-2364), "/cM|", true, false, true, true);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HttpUrl.canonicalize(buffer0, "okio.Segment", 0, 4, "", true, false, false, true);
      assertFalse(buffer0.exhausted());
      assertEquals(4L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("V", "V", false, true, true, true);
      assertEquals("%56", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("[]", "", true, false, true, false);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("%22", (String) null, true, true, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = HttpUrl.canonicalize("", "PKhLmC`cF[/#0nL2", false, false, false, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = HttpUrl.canonicalize(") disagree", 0, 0, (String) null, false, false, true, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("", 121, 55296, "", false, true, true, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.resolve((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.queryStringToNamesAndValues((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl httpUrl1 = httpUrl0.resolve("?");
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterValue(77);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 155, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      HttpUrl httpUrl1 = httpUrl0.resolve("@/?#");
      // Undeclared exception!
      try { 
        httpUrl1.queryParameter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentEncoded((String) null, 46, 65);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode(buffer0, "%I2.", 3, 1668, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((Buffer) null, (String) null, (-1936235369), (-1), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.percentDecode((String) null, 2005, 2005, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "F4");
      // Undeclared exception!
      try { 
        HttpUrl.pathSegmentsToString(stringBuilder0, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.newBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString((StringBuilder) null, (List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/foo.bar");
      List<String> list0 = httpUrl0.pathSegments();
      // Undeclared exception!
      try { 
        HttpUrl.namesAndValuesToQueryString((StringBuilder) null, list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.getChecked((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.get((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.get((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.defaultPort((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize(buffer0, "https:", 756, 16711680, "https:", false, false, false, false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize(buffer0, (String) null, (-1712), 62, "file:/", false, false, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((String) null, (String) null, false, false, true, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize("...", (-1016), (-1016), "...", false, false, false, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpUrl.canonicalize((String) null, 7, 3, "a+vs3v(,]J0LC", true, true, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl httpUrl0 = null;
      try {
        httpUrl0 = new HttpUrl(httpUrl_Builder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("^`{|}");
      assertEquals("http://foo.bar/%5E%60%7B%7C%7D", httpUrl1.toString());
      assertEquals(80, httpUrl1.port());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("c./Ve|^4bU'R");
      httpUrl_Builder0.fragment("@/?#");
      String string0 = httpUrl_Builder0.toString();
      assertEquals("http://foo.bar/c./Ve%7C%5E4bU'R#@/?#", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("mW?k,SD[TOQNBcwTIz");
      assertNotNull(httpUrl_Builder0);
      
      String string0 = httpUrl_Builder0.toString();
      assertEquals("http://foo.bar/mW?k,SD[TOQNBcwTIz", string0);
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("B-nvS");
      assertNotNull(httpUrl_Builder0);
      
      httpUrl_Builder0.port(6);
      String string0 = httpUrl_Builder0.toString();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar:6/B-nvS", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.password(" \"<>^`{}|/?#");
      // Undeclared exception!
      try { 
        httpUrl_Builder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("B-nvS");
      assertNotNull(httpUrl_Builder0);
      
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("@/?#");
      httpUrl_Builder1.encodedUsername = "@/?#";
      String string0 = httpUrl_Builder1.toString();
      assertEquals("http://@/?#@foo.bar/B-nvS", string0);
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedQuery((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      String string0 = httpUrl0.encodedFragment();
      assertNull(string0);
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("V");
      assertNotNull(httpUrl_Builder0);
      
      httpUrl_Builder0.fragment("V");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      String string0 = httpUrl1.encodedFragment();
      assertNotNull(string0);
      assertEquals("V", string0);
      assertEquals("http://foo.bar/V#V", httpUrl1.toString());
      assertEquals("V", httpUrl1.fragment());
      assertEquals(80, httpUrl1.port());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      String string0 = httpUrl0.encodedQuery();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("?");
      String string0 = httpUrl1.encodedQuery();
      assertEquals("http://foo.bar/?", httpUrl1.toString());
      assertEquals("", string0);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      List<String> list0 = httpUrl0.encodedPathSegments();
      assertEquals(1, list0.size());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = HttpUrl.defaultPort("https");
      assertEquals(443, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = HttpUrl.defaultPort("http");
      assertEquals(80, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/foo9bar");
      httpUrl0.encodedPassword();
      assertEquals("http://foo9bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("V");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPassword("8Z");
      HttpUrl httpUrl1 = httpUrl_Builder1.build();
      String string0 = httpUrl1.encodedPassword();
      assertEquals(1, httpUrl1.pathSize());
      assertEquals("8Z", string0);
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      String string0 = httpUrl0.encodedUsername();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", string0);
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:///tmp/foo.bar");
      String string0 = httpUrl0.toString();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://tmp/foo.bar", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("[M(\"+A:q%D&,w;-");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("t", "eb6z(5:Q.7F+W");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegments("\n");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("\u2026w]");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.username("\u2026]");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("L:0LAZM.b");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedFragment("[M(\"+A:q%D~v,w;-");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = HttpUrl.percentEncoded("\u2026w]", 0, 2005);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("$]YcYJ#|X_$%I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: $]YcYJ#|X_$%I
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("V");
      httpUrl_Builder0.setEncodedQueryParameter("jwq3pr", "q+g%|%u&<~HGztr");
      HttpUrl httpUrl1 = httpUrl_Builder0.build();
      assertEquals("http://foo.bar/V?jwq3pr=q+g%|%u%26%3C~HGztr", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("eb6.(5:Q.7F+W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: eb6.(5:Q.7F+W
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("eb6z(5:Q.7F+W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: eb6z(5:Q.7F+W
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::-B'UgrOn87)MoD\"]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: ::-B'UgrOn87)MoD\"]
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("::");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("0:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: 0:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[M(\"+A:q%D&,w;-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [M(\"+A:q%D&,w;-
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host("[:9-B'UgrOn87)MoD\"]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected host: [:9-B'UgrOn87)MoD\"]
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      try { 
        HttpUrl.getChecked("https:/foo.b[r");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: https:/foo.b[r
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("hDm+Pw`ui~qxPs.");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      try { 
        HttpUrl.getChecked("N9R-=");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: MISSING_SCHEME for N9R-=
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("nwA");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("~2U?XPVF7)1Qitq");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/foo9bar");
      httpUrl0.newBuilder("\"/..");
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo9bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedPathSegment("v");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedPathSegment(".%2e");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl httpUrl1 = httpUrl0.resolve("%2e.");
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertNotNull(httpUrl1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl httpUrl1 = httpUrl0.resolve("%2e");
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertNotNull(httpUrl1);
      assertEquals(1, httpUrl1.pathSize());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/foo9bar");
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder(".");
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo9bar/", httpUrl0.toString());
      assertNotNull(httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl httpUrl1 = httpUrl0.resolve("");
      assertEquals("http://foo.bar/", httpUrl1.toString());
      assertNotNull(httpUrl1);
      assertEquals(80, httpUrl1.port());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/kfoo9ba");
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("http:/kfoo9ba");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.password("http:/kfoo9ba");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder1);
      URL uRL0 = httpUrl1.url();
      HttpUrl httpUrl2 = HttpUrl.get(uRL0);
      assertEquals("http:/kfoo9ba", httpUrl2.password());
      assertEquals("http://:http%3A%2Fkfoo9ba@kfoo9ba/kfoo9ba", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      URI uRI0 = MockURI.URI("https:/foo.bar", "https:/foo.bar", (String) null, (-764), (String) null, "Expected leading [0-9] or '-' character but was %#x", "lO1vC$*l2dMR.i[)b");
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertEquals("lO1vC$*l2dMR.i[)b", httpUrl0.fragment());
      assertEquals(443, httpUrl0.port());
      assertNotNull(httpUrl0);
      assertEquals("https://foo.bar/?Expected%20leading%20[0-9]%20or%20%27-%27%20character%20but%20was%20%25%23x#%7FlO1vC$*l2d%7FMR.i[)b", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("https:foo9bar");
      assertEquals(1, httpUrl1.pathSize());
      assertNotNull(httpUrl1);
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(443, httpUrl1.port());
      assertEquals("https://foo9bar/", httpUrl1.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.build();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment("%._T8p");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder2, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.query("%._T8p");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.reencodeForUri();
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedFragment((String) null);
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.fragment((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.encodedQuery("e");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removeAllEncodedQueryParameters("base64 == null");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.removeAllEncodedQueryParameters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("t", "t");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.removeAllQueryParameters("t");
      assertSame(httpUrl_Builder0, httpUrl_Builder2);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setQueryParameter((String) null, "http:///tmp/foo.bar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("hctp", (String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addEncodedQueryParameter("t", "t");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedQueryParameter("t", "t");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removeAllQueryParameters("t");
      assertSame(httpUrl_Builder1, httpUrl_Builder3);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedQueryParameter((String) null, "http:///tmp/foo.bar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedName == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      httpUrl_Builder0.addEncodedQueryParameter("t", "t");
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addQueryParameter("t", "t");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addQueryParameter((String) null, "NoCiO2qo");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // name == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.query((String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath("htstp:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected encodedPath: htstp:
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPath == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.encodedPath("/\r");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.removePathSegment(0);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegment("delegate == null");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.addEncodedPathSegment("delegate == null");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.removePathSegment(0);
      assertSame(httpUrl_Builder3, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setEncodedPathSegment(2015, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setEncodedPathSegment(0, " I:cC)dUFy");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(66, "..");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: ..
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(18, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected path segment: .
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.setPathSegment(0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addEncodedPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegments == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.addPathSegments("'%1Y}<[.o8~39!(Y(/e");
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.addPathSegment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // pathSegment == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port(1114111);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: 1114111
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.port((-3240));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected port: -3240
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.host((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // host == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedPassword((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedPassword == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.password((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // password == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.encodedUsername((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // encodedUsername == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.username((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // username == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.scheme("https");
      assertSame(httpUrl_Builder1, httpUrl_Builder0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme(")%j~sD)8EQ%%c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unexpected scheme: )%j~sD)8EQ%%c
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      // Undeclared exception!
      try { 
        httpUrl_Builder0.scheme((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // scheme == null
         //
         verifyException("okhttp3.HttpUrl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl httpUrl1 = httpUrl0.resolve("%7F'@v[NXN94x+O1%22@sY%2F");
      assertNotNull(httpUrl1);
      
      boolean boolean0 = httpUrl0.equals(httpUrl1);
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("http://foo.bar/%7F'@v[NXN94x+O1%22@sY%2F", httpUrl1.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/foo.bar");
      boolean boolean0 = httpUrl0.equals(httpUrl0);
      assertTrue(boolean0);
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http::::#..C");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: INVALID_PORT for http::::#..C
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      try { 
        HttpUrl.getChecked("htstp:");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Invalid URL: UNSUPPORTED_SCHEME for htstp:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      try { 
        HttpUrl.getChecked("http:");
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Invalid host: http:
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("Pz{T");
      assertNull(httpUrl0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("V");
      httpUrl_Builder0.port(1625);
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      URI uRI1 = httpUrl1.uri();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar:1625/V", httpUrl1.toString());
      assertEquals("http://foo.bar:1625/V", uRI1.toString());
      assertEquals(1, httpUrl1.pathSize());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("htDp:/foo9bar");
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertNull(httpUrl1);
      assertEquals(1, httpUrl0.pathSize());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl httpUrl1 = httpUrl0.resolve("@/?#");
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterValue((-467));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      // Undeclared exception!
      try { 
        httpUrl0.queryParameterName(2677);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.HttpUrl", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl httpUrl1 = httpUrl0.resolve(" \"':;<=>@[]^`{}|/?#");
      // Undeclared exception!
      try { 
        httpUrl1.queryParameterName((-1619065492));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1056836312, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("?");
      assertNotNull(httpUrl1);
      
      List<String> list0 = httpUrl1.queryParameterValues("?");
      assertEquals(0, list0.size());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/?", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.queryParameterNames();
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("@/?#");
      httpUrl1.queryParameterNames();
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/@/?#", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.host("Http");
      HttpUrl.Builder httpUrl_Builder2 = httpUrl_Builder1.query("Http");
      HttpUrl.Builder httpUrl_Builder3 = httpUrl_Builder2.scheme("Http");
      HttpUrl httpUrl0 = new HttpUrl(httpUrl_Builder3);
      String string0 = httpUrl0.queryParameter("Http");
      assertEquals(1, httpUrl0.pathSize());
      assertNull(string0);
      assertEquals(80, httpUrl0.port());
      assertEquals("http://http/?Http", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("?");
      assertNotNull(httpUrl1);
      
      httpUrl1.queryParameter("?");
      assertEquals(1, httpUrl1.querySize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/?", httpUrl1.toString());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("?");
      int int0 = httpUrl1.querySize();
      assertEquals("http://foo.bar/?", httpUrl1.toString());
      assertEquals(1, int0);
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("http:/foo9bar");
      httpUrl0.querySize();
      assertEquals("http://foo9bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.query();
      assertEquals(80, httpUrl0.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("@/?#");
      String string0 = httpUrl1.query();
      assertEquals("http://foo.bar/@/?#", httpUrl1.toString());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(1, httpUrl1.querySize());
      assertEquals(80, httpUrl1.port());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("KTb&$ cPY#'5Kyt=");
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("v0~&5D4ZaWj;d8Ty");
      List<String> list0 = HttpUrl.queryStringToNamesAndValues("v0~&5D4ZaWj;d8Ty");
      HttpUrl.namesAndValuesToQueryString(stringBuilder0, list0);
      assertEquals("v0~&5D4ZaWj;d8Tyv0~&5D4ZaWj;d8Ty", stringBuilder0.toString());
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      HttpUrl httpUrl1 = httpUrl0.resolve("@/?#");
      httpUrl1.newBuilder();
      assertEquals(80, httpUrl1.port());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals("http://foo.bar/@/?#", httpUrl1.toString());
      assertEquals("", httpUrl1.encodedFragment());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/kfoo9ba");
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("http:/kfoo9ba");
      httpUrl_Builder0.encodedPassword("]");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      httpUrl1.redact();
      assertEquals("http://kfoo9ba/", httpUrl0.toString());
      assertEquals("%5D", httpUrl1.encodedPassword());
      assertEquals("http://:%5D@kfoo9ba/kfoo9ba", httpUrl1.toString());
      assertEquals("]", httpUrl1.password());
      assertEquals(1, httpUrl1.pathSize());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/foo.<7@bar");
      String string0 = httpUrl0.encodedUsername();
      assertEquals("foo.<7", httpUrl0.username());
      assertEquals(443, httpUrl0.port());
      assertEquals("foo.%3C7", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl httpUrl1 = httpUrl0.resolve("#Bdx]~}!hOe.i,=EH");
      assertEquals("http://foo.bar/#Bdx]~}!hOe.i,=EH", httpUrl1.toString());
      assertNotNull(httpUrl1);
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/foo.bar");
      int int0 = httpUrl0.port();
      assertEquals(443, int0);
      assertEquals("https://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      httpUrl0.host();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals(80, httpUrl0.port());
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.username();
      assertEquals(80, httpUrl0.port());
      assertEquals("", string0);
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/foo.bar");
      int int0 = httpUrl0.pathSize();
      assertEquals(443, httpUrl0.port());
      assertEquals(1, int0);
      assertEquals("https://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      httpUrl0.hashCode();
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("http://foo.bar/", httpUrl0.toString());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:/kXfoo9ba");
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.password();
      assertEquals("http://kxfoo9ba/", httpUrl0.toString());
      assertEquals(1, httpUrl0.pathSize());
      assertEquals("", string0);
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpUrl httpUrl0 = HttpUrl.get(uRL0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.scheme();
      assertEquals("http://www.somefakebutwellformedurl.org/fooExample", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
      assertEquals("http", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.parse("http:///tmp/foo.bar");
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.encodedPath();
      assertEquals("http://tmp/foo.bar", httpUrl0.toString());
      assertEquals("/foo.bar", string0);
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      HttpUrl httpUrl0 = HttpUrl.getChecked("https:/foo.bar");
      boolean boolean0 = httpUrl0.isHttps();
      assertEquals("https://foo.bar/", httpUrl0.toString());
      assertTrue(boolean0);
      assertEquals(443, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      String string0 = httpUrl0.fragment();
      assertEquals(1, httpUrl0.pathSize());
      assertNull(string0);
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      URI uRI1 = httpUrl0.uri();
      assertEquals("http://foo.bar/", uRI1.toString());
      assertEquals("http://foo.bar/", httpUrl0.toString());
      assertEquals(80, httpUrl0.port());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      HttpUrl.Builder httpUrl_Builder0 = new HttpUrl.Builder();
      HttpUrl.Builder httpUrl_Builder1 = httpUrl_Builder0.setQueryParameter("!<b6=5q7owR", (String) null);
      assertSame(httpUrl_Builder0, httpUrl_Builder1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      HttpUrl httpUrl0 = HttpUrl.get(uRI0);
      assertNotNull(httpUrl0);
      
      HttpUrl.Builder httpUrl_Builder0 = httpUrl0.newBuilder("V");
      assertNotNull(httpUrl_Builder0);
      
      httpUrl_Builder0.setEncodedQueryParameter("V", "V");
      HttpUrl httpUrl1 = new HttpUrl(httpUrl_Builder0);
      URL uRL0 = httpUrl1.url();
      HttpUrl httpUrl2 = HttpUrl.get(uRL0);
      assertEquals("http://foo.bar/V?V=V", httpUrl2.toString());
      assertEquals(80, httpUrl2.port());
      assertEquals(1, httpUrl2.querySize());
  }
}
