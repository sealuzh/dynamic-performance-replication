/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:51:44 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.nio.charset.Charset;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealBufferedSource_ESTest extends RealBufferedSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Pipe pipe0 = new Pipe(3L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      realBufferedSource0.timeout();
      HashingSource.sha1(realBufferedSource0);
      realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        realBufferedSource0.read((byte[]) null, (-1921), Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = false;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-18);
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSource0.rangeEquals((-1L), byteString0);
      // Undeclared exception!
      try { 
        realBufferedSource0.read(byteArray0, (-2146728554), (-1610612735));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=5 offset=-2146728554 byteCount=-1610612735
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      pipe0.sinkClosed = true;
      pipe0.sourceClosed = false;
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      realBufferedSource0.indexOfElement(byteString0, (long) (byte)0);
      realBufferedSource0.readUtf8Line();
      realBufferedSource0.readByteString();
      boolean boolean0 = pipe0.sourceClosed;
      // Undeclared exception!
      try { 
        realBufferedSource0.request((-1919L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1919
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      byte[] byteArray0 = new byte[1];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readByteString(4L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-89);
      byteArray0[2] = (byte)75;
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSource0.rangeEquals((long) (byte)75, byteString0);
      byteArray0[3] = (byte)75;
      // Undeclared exception!
      try { 
        realBufferedSource0.read(byteArray0, (int) (byte)75, (-1840700268));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=5 offset=75 byteCount=-1840700268
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte) (-94), (long) (byte) (-94));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-94 toIndex=9223372036854775807
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      GzipSource gzipSource0 = new GzipSource(buffer0);
      gzipSource0.timeout();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      pipe0.sinkClosed = true;
      pipe0.sourceClosed = false;
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      hashingSink0.hash();
      byte byte0 = (byte) (-55);
      realBufferedSource0.close();
      Charset.defaultCharset();
      Inflater inflater0 = new Inflater();
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)102, (long) (byte)102);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Pipe pipe0 = new Pipe(2L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.read(buffer0, 38L);
      Buffer buffer1 = pipe0.buffer;
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readUtf8(2L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=2
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-47);
      byteArray0[7] = (byte) (-30);
      byteArray0[8] = (byte) (-119);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Pipe pipe0 = new Pipe((byte)2);
      Buffer buffer1 = pipe0.buffer;
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully(buffer1, (long) (byte) (-30));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -30
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      try { 
        realBufferedSource0.readByteArray(60L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.md5(buffer0);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSource0.readString((long) (byte)0, charset0);
      byte byte0 = ObjectStreamConstants.TC_OBJECT;
      String string0 = realBufferedSource0.readString(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Pipe pipe0 = new Pipe(9223372036854775807L);
      pipe0.sourceClosed = false;
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.close();
      realBufferedSource0.inputStream();
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Pipe pipe0 = new Pipe(2L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8();
      realBufferedSource0.readByteArray();
      try { 
        realBufferedSource0.readUtf8LineStrict(2L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = 1000000000000000L;
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource.md5(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8LineStrict((long) (byte) (-64));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -64
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Pipe pipe0 = new Pipe(999999999999988L);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink.md5(buffer0);
      buffer0.writeLong(999999999999988L);
      try { 
        realBufferedSource0.readUtf8LineStrict(999999999999988L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=8 content=00038d7ea4c67ff4\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = true;
      pipe0.sourceClosed = false;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      Charset.defaultCharset();
      byte byte0 = ObjectStreamConstants.TC_OBJECT;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.skip((byte)0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      pipe0.sinkClosed = true;
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      hashingSink0.hash();
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString.encodeUtf8("");
      boolean boolean0 = realBufferedSource0.rangeEquals(1000000000000000L, byteString0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte) (-50);
      int int0 = realBufferedSource0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      pipe0.sinkClosed = true;
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      hashingSink0.hash();
      byte[] byteArray0 = new byte[7];
      Buffer buffer1 = realBufferedSource0.buffer.writeLong(1000000000000000L);
      byte byte0 = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSource0);
      // Undeclared exception!
      try { 
        hashingSource0.read(buffer1, 4L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.read(realBufferedSink0.buffer, (-1500L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1500
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      realBufferedSource0.close();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      // Undeclared exception!
      try { 
        realBufferedSource1.readUtf8LineStrict();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Pipe pipe0 = new Pipe(1089L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      pipe0.sourceClosed = false;
      ByteString byteString0 = realBufferedSource0.readByteString();
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      Pipe pipe1 = new Pipe(1074L);
      boolean boolean0 = pipe1.sourceClosed;
      realBufferedSource0.buffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[3] = byteString0;
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)0, 1074L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=1074 toIndex=-1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink.md5(buffer0);
      buffer0.writeLong(1384L);
      pipe0.sinkClosed = false;
      realBufferedSource0.toString();
      try { 
        realBufferedSource0.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=0000000000000568\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      pipe0.sinkClosed = true;
      pipe0.sinkClosed = true;
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha1();
      ByteString.encodeUtf8("6y;szSF4>Z");
      boolean boolean0 = realBufferedSource0.rangeEquals((long) (byte)75, byteString0);
      boolean boolean1 = realBufferedSource0.rangeEquals(1000000000000000L, byteString0, (int) (byte)75, (int) (byte)75);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "sGCbEv\"U-Invc[^a");
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readUtf8(3L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sinkClosed = false;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink.md5(buffer0);
      Buffer buffer1 = buffer0.writeLong(1384L);
      realBufferedSource0.read(buffer1, 1000000000000000L);
      try { 
        realBufferedSource0.readByteString(1384L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(buffer0);
      pipe0.sinkClosed = true;
      byte[] byteArray0 = new byte[0];
      try { 
        realBufferedSource0.readByteString((long) (byte)75);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Buffer buffer1 = new Buffer();
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer2 = realBufferedSource0.buffer();
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      Buffer buffer3 = buffer0.writeHexadecimalUnsignedLong(3L);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(1L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertNotNull(buffer3);
      
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      long long0 = realBufferedSource0.readAll(buffer1);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertEquals(1L, long0);
      
      boolean boolean0 = realBufferedSource0.rangeEquals(3L, byteString0, (-5339), (-5339));
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(3, byteString0.size());
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean1 = realBufferedSource0.exhausted();
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer1);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSink0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString byteString1 = hashingSink0.hash();
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString1.size());
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      
      boolean boolean0 = realBufferedSource0.rangeEquals(1000000000000000L, byteString1);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString1.size());
      assertNotSame(byteString1, byteString0);
      assertFalse(boolean0);
      
      ByteString byteString2 = buffer0.snapshot();
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString2.size());
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotNull(byteString2);
      
      Buffer buffer1 = realBufferedSource0.buffer.writeLong(649L);
      assertFalse(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource1);
      
      String string0 = realBufferedSource1.readUtf8Line();
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0002\uFFFD", string0);
      assertNotNull(string0);
      
      try { 
        buffer0.readFully(realBufferedSource1.buffer, 1000000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertNotSame(buffer0, buffer1);
      assertNotNull(byteString0);
      
      String string0 = byteString0.base64();
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertNotSame(buffer0, buffer1);
      assertEquals("2jmj7l5rSw0yVb/vlWAYkK/YBwk=", string0);
      assertNotNull(string0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotNull(bufferedSink0);
      
      Buffer buffer2 = realBufferedSink0.buffer.writeUtf8CodePoint(39);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(21L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      hashingSource0.close();
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(21L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(realBufferedSource1);
      
      Segment segment0 = buffer2.writableSegment(51);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(21L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(segment0);
      
      long long0 = realBufferedSource1.indexOfElement(byteString0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals(0L, long0);
      
      BufferedSink bufferedSink1 = realBufferedSink0.writeInt(39);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(realBufferedSink0, bufferedSink1);
      assertSame(bufferedSink1, bufferedSink0);
      assertSame(bufferedSink1, realBufferedSink0);
      assertNotNull(bufferedSink1);
      
      try { 
        realBufferedSource0.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      pipe0.sinkClosed = true;
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSink0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(528);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      byte byte0 = realBufferedSource0.readByte();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertEquals((byte) (-56), byte0);
      
      try { 
        realBufferedSource0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      pipe0.sinkClosed = true;
      pipe0.sourceClosed = false;
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSink0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      pipe0.sourceClosed = false;
      Buffer buffer1 = realBufferedSource0.buffer.writeUtf8CodePoint(3495);
      assertFalse(buffer1.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      byte byte0 = realBufferedSource0.readByte();
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer1);
      assertEquals((byte) (-32), byte0);
      
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      assertEquals((short) (-21267), short0);
      
      boolean boolean0 = realBufferedSource0.exhausted();
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer1);
      assertFalse(boolean0);
      
      long long0 = realBufferedSource0.indexOf(byteString0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertNotSame(buffer0, buffer1);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      pipe0.sinkClosed = true;
      pipe0.sourceClosed = false;
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSink0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      realBufferedSource0.close();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource1);
      
      String string0 = realBufferedSource1.readString((long) (byte)0, charset0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte byte0 = ObjectStreamConstants.TC_OBJECT;
      assertEquals((byte)115, byte0);
      
      realBufferedSource1.close();
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Pipe pipe0 = new Pipe(3L);
      assertNotNull(pipe0);
      
      Buffer buffer1 = new Buffer();
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer2 = realBufferedSource0.buffer();
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      Buffer buffer3 = buffer0.writeHexadecimalUnsignedLong(3L);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(1L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertNotNull(buffer3);
      
      long long0 = realBufferedSource0.readAll(buffer1);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertEquals(1L, long0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(realBufferedSource1);
      
      boolean boolean0 = realBufferedSource1.exhausted();
      assertTrue(buffer1.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.equals((Object)buffer2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer0);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      try { 
        realBufferedSource0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Pipe pipe0 = new Pipe(3L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer buffer2 = realBufferedSource0.buffer.writeHexadecimalUnsignedLong(11L);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-126);
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-73), (byte) (-126)}, byteArray0);
      
      long long0 = realBufferedSource0.readAll(buffer0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertEquals(1L, long0);
      
      boolean boolean0 = realBufferedSource0.rangeEquals(796L, byteString0, 2216, (int) (byte) (-126));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3, byteString0.size());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-126), (byte) (-73), (byte) (-126)}, byteArray0);
      
      boolean boolean1 = realBufferedSource0.exhausted();
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(boolean1 == boolean0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertFalse(boolean1);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource1);
      
      try { 
        realBufferedSource1.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Pipe pipe0 = new Pipe(1895L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = buffer0.writeShort((-2143748892));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      try { 
        realBufferedSource0.skip(10000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000015L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(4, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = pipe0.sourceClosed;
      assertFalse(boolean0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSink0);
      
      Timeout timeout0 = hashingSink0.timeout();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(timeout0);
      
      int int0 = buffer0.read(byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Buffer buffer1 = realBufferedSource0.buffer.writeUtf8CodePoint((byte)0);
      assertFalse(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(3, options0.size());
      assertNotNull(options0);
      
      int int1 = ObjectStreamConstants.baseWireHandle;
      assertFalse(int1 == int0);
      assertEquals(8257536, int1);
      
      int int2 = realBufferedSource0.select(options0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(3, options0.size());
      assertNotSame(buffer0, buffer1);
      assertEquals((-1), int2);
      
      try { 
        realBufferedSource0.readShortLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      pipe0.sinkClosed = true;
      pipe0.sourceClosed = false;
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSink0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      realBufferedSource0.close();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSource0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.rangeEquals(9999998L, byteString0, (int) (byte)0, (-3809));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Pipe pipe0 = new Pipe(1092L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)94;
      byteArray0[1] = (byte)94;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte)0, (byte)94}, byteArray0);
      
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertSame(buffer0, buffer1);
      assertNotNull(hashingSink0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      assertSame(buffer0, buffer1);
      assertNotNull(byteString0);
      
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      assertSame(buffer0, buffer1);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)94}, byteArray0);
      
      hashingSink0.close();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertSame(buffer0, buffer1);
      
      int int1 = ObjectStreamConstants.baseWireHandle;
      assertFalse(int1 == int0);
      assertEquals(8257536, int1);
      
      long long0 = realBufferedSource0.indexOf(byteString0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertSame(buffer0, buffer1);
      assertEquals((-1L), long0);
      
      long long1 = realBufferedSource0.indexOfElement(byteString0);
      assertFalse(long1 == long0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertSame(buffer0, buffer1);
      assertEquals(1L, long1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray1 = realBufferedSource0.readByteArray();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)94}, byteArray1);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(hashingSink0);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink1);
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertNotNull(inputStream0);
      
      // Undeclared exception!
      try { 
        realBufferedSink0.flush();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSink", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer1 = realBufferedSource0.buffer;
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Pipe pipe0 = new Pipe(999999999999989L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      pipe0.sinkClosed = true;
      pipe0.sourceClosed = false;
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSink0);
      
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      realBufferedSource0.close();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource1);
      
      String string0 = realBufferedSource1.readString((long) (byte)0, charset0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.exhausted();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Pipe pipe0 = new Pipe(3L);
      assertNotNull(pipe0);
      
      Buffer buffer1 = pipe0.buffer;
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      Buffer buffer2 = realBufferedSource0.buffer();
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      Buffer buffer3 = buffer0.writeHexadecimalUnsignedLong(3L);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertNotNull(buffer3);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-126);
      ByteString byteString0 = realBufferedSource0.readByteString((long) (byte)0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString0.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotNull(byteString0);
      
      long long0 = realBufferedSource0.readAll(buffer1);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer3));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(buffer1, buffer3);
      assertNotSame(buffer1, buffer2);
      assertNotSame(buffer1, buffer0);
      assertEquals(1L, long0);
      
      String string0 = byteString0.toString();
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertEquals("[size=0]", string0);
      assertNotNull(string0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-126);
      byteArray1[1] = (byte)0;
      int int0 = realBufferedSource0.read(byteArray0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(byteArray0, byteArray1);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-126), (byte)0}, byteArray0);
      
      long long1 = realBufferedSource0.indexOf((byte)0, 1320L);
      assertFalse(long1 == long0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertEquals((-1L), long1);
      
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(3, options0.size());
      assertNotNull(options0);
      
      int int1 = realBufferedSource0.select(options0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(int1 == int0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(3, options0.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertEquals(0, int1);
      
      boolean boolean0 = realBufferedSource0.exhausted();
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertTrue(boolean0);
      
      byte[] byteArray2 = realBufferedSource0.readByteArray();
      assertTrue(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer3);
      assertNotSame(byteArray2, byteArray1);
      assertNotSame(byteArray2, byteArray0);
      assertNotNull(byteArray2);
      assertArrayEquals(new byte[] {}, byteArray2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSink0);
      
      Timeout timeout0 = hashingSink0.timeout();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(timeout0);
      
      int int0 = realBufferedSource0.buffer.read(byteArray0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Buffer buffer1 = realBufferedSource0.buffer.writeUtf8CodePoint(1318);
      assertFalse(buffer1.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      assertEquals(0, options0.size());
      assertNotNull(options0);
      
      int int1 = ObjectStreamConstants.baseWireHandle;
      assertFalse(int1 == int0);
      assertEquals(8257536, int1);
      
      int int2 = realBufferedSource0.select(options0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, options0.size());
      assertNotSame(buffer0, buffer1);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.require((-553L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -553
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Pipe pipe0 = new Pipe(3L);
      assertNotNull(pipe0);
      
      Buffer buffer1 = new Buffer();
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      pipe0.sinkClosed = true;
      Buffer buffer2 = realBufferedSource0.buffer;
      assertTrue(buffer2.equals((Object)buffer0));
      assertTrue(buffer2.equals((Object)buffer1));
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      Buffer buffer3 = buffer0.writeHexadecimalUnsignedLong(3L);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(1L, buffer3.size());
      assertFalse(buffer3.exhausted());
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer3, buffer1);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer2);
      assertNotNull(buffer3);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-126);
      ByteString byteString0 = realBufferedSource0.readByteString((long) (byte)0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotNull(byteString0);
      
      String string0 = byteString0.toString();
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertEquals("[size=0]", string0);
      assertNotNull(string0);
      
      int int0 = realBufferedSource0.read(byteArray0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertEquals(1, int0);
      assertArrayEquals(new byte[] {(byte)51, (byte) (-126), (byte)0}, byteArray0);
      
      long long0 = realBufferedSource0.indexOf((byte) (-126), 4161L);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertEquals((-1L), long0);
      
      boolean boolean0 = realBufferedSource0.exhausted();
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-11);
      byteArray0[2] = (byte)88;
      int int0 = realBufferedSource0.buffer.read(byteArray0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte) (-11), (byte)0, (byte)88, (byte)0}, byteArray0);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(3490);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(3L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      byte byte0 = realBufferedSource0.readByte();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertEquals((byte) (-32), byte0);
      
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(4, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte) (-11), (byte)0, (byte)88, (byte)0}, byteArray0);
      
      int int1 = byteString0.lastIndexOf(byteArray0, (int) (byte) (-11));
      assertTrue(int1 == int0);
      assertEquals(4, byteString0.size());
      assertEquals((-1), int1);
      assertArrayEquals(new byte[] {(byte) (-11), (byte)0, (byte)88, (byte)0}, byteArray0);
      
      try { 
        realBufferedSource0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer buffer2 = realBufferedSink0.buffer.writeUtf8CodePoint(57);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      List<Integer> list0 = realBufferedSink0.buffer.segmentSizes();
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotNull(list0);
      
      boolean boolean0 = pipe0.sourceClosed;
      assertFalse(boolean0);
      
      realBufferedSink0.flush();
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort(493);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotNull(bufferedSink0);
      
      BufferedSink bufferedSink1 = realBufferedSink0.writeInt(57);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(realBufferedSink0, bufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink1, bufferedSink0);
      assertSame(bufferedSink1, realBufferedSink0);
      assertNotNull(bufferedSink1);
      
      long long0 = realBufferedSource0.readHexadecimalUnsignedLong();
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertEquals(9L, long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      Charset charset1 = Charset.defaultCharset();
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.toString());
      assertEquals("US-ASCII", charset1.name());
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.displayName());
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      
      String string0 = realBufferedSource0.readString(charset1);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.toString());
      assertEquals("US-ASCII", charset1.name());
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.displayName());
      assertSame(charset1, charset0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer buffer2 = realBufferedSource0.buffer.writeUtf8CodePoint((-66));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink1);
      
      String string1 = realBufferedSink1.toString();
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertEquals("buffer([size=0])", string1);
      assertNotNull(string1);
      
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertNotNull(realBufferedSink2);
      
      HashingSink hashingSink0 = HashingSink.sha512(realBufferedSink2);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(realBufferedSink2, realBufferedSink0);
      assertNotSame(realBufferedSink2, realBufferedSink1);
      assertNotNull(hashingSink0);
      
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(realBufferedSink0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink3);
      
      String string2 = realBufferedSink2.toString();
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(realBufferedSink2, realBufferedSink0);
      assertNotSame(realBufferedSink2, realBufferedSink3);
      assertNotSame(realBufferedSink2, realBufferedSink1);
      assertEquals("buffer([hex=be])", string2);
      assertNotNull(string2);
      
      Timeout timeout0 = hashingSink0.timeout();
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotSame(realBufferedSink2, realBufferedSink0);
      assertNotSame(realBufferedSink2, realBufferedSink3);
      assertNotSame(realBufferedSink2, realBufferedSink1);
      assertNotNull(timeout0);
      
      RealBufferedSink realBufferedSink4 = new RealBufferedSink(realBufferedSink1);
      assertFalse(realBufferedSink4.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink4.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink4.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink4.equals((Object)realBufferedSink3));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink3));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink4);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xbe
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      Pipe pipe0 = new Pipe(1000000000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      pipe0.sinkClosed = true;
      pipe0.sourceClosed = true;
      byte[] byteArray0 = new byte[7];
      Buffer buffer1 = buffer0.writeLong(658L);
      assertFalse(buffer0.exhausted());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(8L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)2;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(7, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)2}, byteArray0);
      
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(3, options0.size());
      assertNotNull(options0);
      
      Options options1 = Options.of(byteStringArray0);
      assertTrue(options1.equals((Object)options0));
      assertEquals(3, options1.size());
      assertNotSame(options1, options0);
      assertNotNull(options1);
      
      Options options2 = Options.of(byteStringArray0);
      assertTrue(options2.equals((Object)options0));
      assertTrue(options2.equals((Object)options1));
      assertEquals(3, options2.size());
      assertNotSame(options2, options1);
      assertNotSame(options2, options0);
      assertNotNull(options2);
      
      int int0 = options2.lastIndexOf((Object) null);
      assertTrue(options2.equals((Object)options0));
      assertTrue(options2.equals((Object)options1));
      assertEquals(3, options2.size());
      assertNotSame(options2, options1);
      assertNotSame(options2, options0);
      assertEquals((-1), int0);
      
      int int1 = realBufferedSource0.select(options0);
      assertFalse(int1 == int0);
      assertTrue(options0.equals((Object)options2));
      assertTrue(options0.equals((Object)options1));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(3, options0.size());
      assertSame(buffer0, buffer1);
      assertNotSame(options0, options1);
      assertNotSame(options0, options2);
      assertEquals(0, int1);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      String string0 = realBufferedSource0.readString(charset0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertSame(buffer0, buffer1);
      assertEquals("\uFFFD", string0);
      assertNotNull(string0);
      
      int int2 = (-1187);
      // Undeclared exception!
      try { 
        realBufferedSource0.read(byteArray0, (-1), (-1187));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=-1 byteCount=-1187
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Pipe pipe0 = new Pipe(850L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      pipe0.sinkClosed = true;
      int int0 = 114;
      Buffer buffer1 = buffer0.writeShort(114);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      pipe0.sinkClosed = false;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      byte byte0 = realBufferedSource0.readByte();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertEquals((byte)0, byte0);
      
      long long0 = realBufferedSource0.indexOf((byte)2);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertEquals((-1L), long0);
      
      try { 
        realBufferedSource0.skip(850L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Pipe pipe0 = new Pipe(850L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      pipe0.sinkClosed = true;
      int int0 = 114;
      Buffer buffer1 = buffer0.writeShort(114);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer0.writeShort(2);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(4L, buffer2.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      pipe0.sinkClosed = false;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      byte byte0 = realBufferedSource0.readByte();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertEquals((byte)0, byte0);
      
      long long0 = realBufferedSource0.indexOf((byte)2);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertSame(buffer0, buffer1);
      assertSame(buffer0, buffer2);
      assertEquals(2L, long0);
      
      try { 
        realBufferedSource0.skip(850L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertNotSame(buffer0, buffer1);
      assertNotNull(byteString0);
      
      String string0 = byteString0.base64();
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertNotSame(buffer0, buffer1);
      assertEquals("2jmj7l5rSw0yVb/vlWAYkK/YBwk=", string0);
      assertNotNull(string0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString0.size());
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotNull(bufferedSink0);
      
      HashingSource hashingSource1 = HashingSource.md5(buffer0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotNull(hashingSource1);
      
      Buffer buffer2 = realBufferedSink0.buffer.writeUtf8CodePoint(57);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(21L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      hashingSource0.close();
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(21L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertNotNull(realBufferedSource1);
      
      realBufferedSink0.flush();
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(21L, buffer0.size());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      
      BufferedSink bufferedSink1 = realBufferedSink0.writeInt(2145520683);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(21L, buffer0.size());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink1, realBufferedSink0);
      assertSame(bufferedSink1, bufferedSink0);
      assertNotNull(bufferedSink1);
      
      // Undeclared exception!
      try { 
        realBufferedSource1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x7f
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      pipe0.sourceClosed = true;
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString byteString1 = realBufferedSource0.readByteString();
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString1.size());
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      
      int int0 = byteString1.indexOf(byteString0, (-3957));
      assertTrue(byteString0.equals((Object)byteString1));
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertEquals(0, byteString1.size());
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(0, int0);
      
      int int1 = 57;
      int int2 = byteString0.lastIndexOf(byteString1, 57);
      assertTrue(byteString0.equals((Object)byteString1));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertEquals(0, byteString1.size());
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertEquals(0, int2);
      
      Buffer buffer1 = buffer0.writeShort(347);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertNotNull(realBufferedSource1);
      
      byte byte0 = realBufferedSource0.readByte();
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals((byte)1, byte0);
      
      long long0 = realBufferedSource0.indexOf((byte)0);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals((-1L), long0);
      
      realBufferedSource1.closed = true;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      // Undeclared exception!
      try { 
        realBufferedSource1.skip((-4622L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Pipe pipe0 = new Pipe(1092L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(inputStream0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeShortLe((-124));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotNull(bufferedSink0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink1);
      
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer0);
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)bufferedSink0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink2);
      
      Buffer buffer1 = realBufferedSink2.buffer();
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)bufferedSink0));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink2, realBufferedSink0);
      assertNotSame(realBufferedSink2, realBufferedSink1);
      assertNotSame(realBufferedSink2, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer buffer2 = realBufferedSource0.buffer.writeUtf8CodePoint((-1789569705));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer2.exhausted());
      assertEquals(1L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
      
      Buffer buffer3 = pipe0.buffer;
      assertFalse(buffer3.equals((Object)buffer2));
      assertTrue(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(0L, buffer3.size());
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotNull(buffer3);
      
      Buffer buffer4 = buffer3.writeShortLe((-908));
      assertFalse(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(2L, buffer3.size());
      assertFalse(buffer4.exhausted());
      assertEquals(2L, buffer4.size());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer4);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer4, buffer2);
      assertSame(buffer4, buffer3);
      assertNotSame(buffer4, buffer1);
      assertSame(buffer4, buffer0);
      assertNotNull(buffer4);
      
      byte[] byteArray0 = new byte[0];
      int int1 = realBufferedSource0.read(byteArray0);
      assertFalse(int1 == int0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertEquals(0, int1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      long long0 = realBufferedSource0.indexOf((byte)67, 16711680L);
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertEquals((-1L), long0);
      
      boolean boolean0 = realBufferedSource0.exhausted();
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertFalse(boolean0);
      
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSink2.buffer);
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)bufferedSink0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertNotSame(realBufferedSink2, realBufferedSink0);
      assertNotSame(realBufferedSink2, realBufferedSink1);
      assertNotSame(realBufferedSink2, bufferedSink0);
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)bufferedSink0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertNotSame(realBufferedSink2, realBufferedSink0);
      assertNotSame(realBufferedSink2, realBufferedSink1);
      assertNotSame(realBufferedSink2, bufferedSink0);
      assertNotNull(byteString0);
      
      long long1 = realBufferedSource0.indexOfElement(byteString0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(long1 == long0);
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)bufferedSink0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(16, byteString0.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer4);
      assertSame(buffer0, buffer3);
      assertNotSame(realBufferedSink2, realBufferedSink0);
      assertNotSame(realBufferedSink2, realBufferedSink1);
      assertNotSame(realBufferedSink2, bufferedSink0);
      assertEquals((-1L), long1);
      
      try { 
        realBufferedSource0.readFully(realBufferedSink2.buffer, (long) (short)5);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Pipe pipe0 = new Pipe(94L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[2];
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      Buffer buffer1 = buffer0.writeShort((byte)0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      byte byte0 = realBufferedSource0.readByte();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertEquals((byte)0, byte0);
      
      int int1 = realBufferedSource0.readUtf8CodePoint();
      assertFalse(int1 == int0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertEquals(0, int1);
      
      pipe0.sourceClosed = true;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource0.buffer);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink1);
      
      long long0 = realBufferedSource0.indexOf((byte)0, 4473L);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertEquals((-1L), long0);
      
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink2);
      
      Timeout timeout0 = realBufferedSource0.timeout();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertNotNull(timeout0);
      
      Pipe pipe1 = null;
      try {
        pipe1 = new Pipe((-1152921504606846976L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: -1152921504606846976
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Pipe pipe0 = new Pipe(1092L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)94;
      byteArray0[1] = (byte)94;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(2L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte)0, (byte)94}, byteArray0);
      
      long long0 = buffer0.indexOf((byte)127);
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertSame(buffer0, buffer1);
      assertEquals((-1L), long0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertNotNull(realBufferedSink1);
      
      Buffer buffer2 = realBufferedSink0.buffer();
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      Buffer buffer3 = buffer0.writeUtf8CodePoint(62);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer2));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(3L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertEquals(3L, buffer3.size());
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(buffer3, buffer2);
      assertSame(buffer3, buffer0);
      assertSame(buffer3, buffer1);
      assertNotNull(buffer3);
      
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)94}, byteArray0);
      
      boolean boolean0 = realBufferedSource0.rangeEquals(1L, byteString0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(2, byteString0.size());
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)94}, byteArray0);
      
      String string0 = byteString0.base64Url();
      assertEquals(2, byteString0.size());
      assertEquals("AF4=", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)94}, byteArray0);
      
      Buffer buffer4 = buffer2.writeLong((-1L));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer4.equals((Object)buffer0));
      assertFalse(buffer4.equals((Object)buffer1));
      assertFalse(buffer4.equals((Object)buffer3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer3));
      assertFalse(buffer2.equals((Object)buffer1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertFalse(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertEquals(8L, buffer4.size());
      assertFalse(buffer2.exhausted());
      assertEquals(8L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertSame(buffer4, buffer2);
      assertNotSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer3);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer4);
      assertNotSame(buffer2, buffer3);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer4);
      
      try { 
        realBufferedSource0.readUtf8LineStrict(2876L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=3 content=005e3e\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertNotNull(charset0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      Charset charset1 = Charset.defaultCharset();
      assertTrue(charset1.isRegistered());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.displayName());
      assertEquals("US-ASCII", charset1.name());
      assertEquals("US-ASCII", charset1.toString());
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      
      String string0 = realBufferedSource0.readString((long) (byte)0, charset1);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(charset1.isRegistered());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.displayName());
      assertEquals("US-ASCII", charset1.name());
      assertEquals("US-ASCII", charset1.toString());
      assertSame(charset1, charset0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte byte0 = ObjectStreamConstants.TC_OBJECT;
      assertEquals((byte)115, byte0);
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSource0);
      
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotNull(hashingSource1);
      
      ByteString byteString0 = hashingSource1.hash();
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(20, byteString0.size());
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotNull(byteString0);
      
      String string1 = byteString0.base64();
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(20, byteString0.size());
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertEquals("2jmj7l5rSw0yVb/vlWAYkK/YBwk=", string1);
      assertNotNull(string1);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString0);
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(20, byteString0.size());
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotNull(bufferedSink0);
      
      HashingSource hashingSource2 = HashingSource.md5(realBufferedSource0);
      assertFalse(hashingSource2.equals((Object)hashingSource0));
      assertFalse(hashingSource2.equals((Object)hashingSource1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotSame(hashingSource2, hashingSource0);
      assertNotSame(hashingSource2, hashingSource1);
      assertNotNull(hashingSource2);
      
      Buffer buffer1 = realBufferedSource0.buffer.writeUtf8CodePoint(57);
      assertFalse(buffer1.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(1L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      hashingSource0.close();
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource2));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource2);
      assertNotSame(hashingSource0, hashingSource1);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource1);
      
      realBufferedSink0.flush();
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      
      BufferedSink bufferedSink1 = realBufferedSink0.writeInt(953);
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertNotSame(buffer0, buffer1);
      assertSame(bufferedSink1, bufferedSink0);
      assertSame(bufferedSink1, realBufferedSink0);
      assertSame(realBufferedSink0, bufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotNull(bufferedSink1);
      
      long long0 = realBufferedSource0.readHexadecimalUnsignedLong();
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals(9L, long0);
      
      Buffer buffer2 = realBufferedSource0.buffer();
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(20L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer0, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSink0);
      
      Buffer buffer1 = buffer0.writeLong(1000000000000000L);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(8L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(8L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      long long0 = 0L;
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Pipe pipe0 = new Pipe(1092L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(inputStream0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)94;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)94}, byteArray0);
      
      Buffer buffer1 = buffer0.writeShort((byte)94);
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer buffer2 = pipe0.buffer;
      assertFalse(buffer2.exhausted());
      assertEquals(2L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertSame(buffer2, buffer1);
      assertSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer0.size());
      assertNotNull(realBufferedSource1);
      
      byte byte0 = realBufferedSource1.readByte();
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals((byte)0, byte0);
      
      long long0 = realBufferedSource1.indexOf((byte)0, 4473L);
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals((-1L), long0);
      
      Buffer buffer3 = realBufferedSource0.buffer();
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertTrue(buffer3.equals((Object)buffer1));
      assertTrue(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer2));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer3.size());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(buffer3, buffer2);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertNotNull(buffer3);
      
      pipe0.sinkClosed = true;
      long long1 = realBufferedSource1.indexOf(byteString0);
      assertFalse(long1 == long0);
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(1, byteString0.size());
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals(0L, long1);
      assertArrayEquals(new byte[] {(byte)94}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer1);
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer1.equals((Object)buffer3));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(realBufferedSource2);
      
      Buffer buffer4 = new Buffer();
      assertTrue(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer0));
      assertTrue(buffer4.equals((Object)buffer1));
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.size());
      assertNotNull(buffer4);
      
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource2);
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer4));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource0));
      assertTrue(buffer1.equals((Object)buffer4));
      assertTrue(buffer1.equals((Object)buffer3));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertNotNull(realBufferedSource3);
      
      try { 
        realBufferedSource2.readIntLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Pipe pipe0 = new Pipe(1092L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      pipe0.sourceClosed = false;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)94;
      byteArray0[1] = (byte)94;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      long long0 = buffer0.indexOf((byte)127);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), long0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink1);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer buffer2 = buffer0.writeUtf8CodePoint(62);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(1L, buffer0.size());
      assertFalse(buffer0.exhausted());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotNull(list0);
      
      boolean boolean0 = pipe0.sourceClosed;
      assertFalse(boolean0);
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)94}, byteArray0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x3e
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Pipe pipe0 = new Pipe(1092L);
      assertNotNull(pipe0);
      
      Pipe pipe1 = new Pipe(2147483647L);
      assertFalse(pipe1.equals((Object)pipe0));
      assertNotNull(pipe1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      Deflater deflater0 = new Deflater();
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertNotNull(deflater0);
      
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertNotNull(deflaterSink0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(20, byteString0.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(byteString0);
      
      HashingSource hashingSource1 = HashingSource.hmacSha1(buffer1, byteString0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(20, byteString0.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotNull(hashingSource1);
      
      Buffer buffer2 = (Buffer)hashingSource0.delegate();
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(buffer2, buffer0);
      assertSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(20, byteString0.size());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString1 = hashingSource1.hash();
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(20, byteString0.size());
      assertEquals(20, byteString1.size());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(byteString1, byteString0);
      assertNotNull(byteString1);
      
      long long0 = realBufferedSource0.indexOf(byteString1, 2147483647L);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(20, byteString0.size());
      assertEquals(20, byteString1.size());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotSame(byteString1, byteString0);
      assertEquals((-1L), long0);
      
      Timeout timeout0 = hashingSource0.timeout();
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertSame(buffer1, buffer2);
      assertNotSame(hashingSource0, hashingSource1);
      assertNotNull(timeout0);
      
      long long1 = 716L;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, deflater0.getTotalIn());
      assertEquals(0L, deflater0.getBytesRead());
      assertEquals(1, deflater0.getAdler());
      assertEquals(0L, deflater0.getBytesWritten());
      assertEquals(0, deflater0.getTotalOut());
      assertTrue(deflater0.needsInput());
      assertNotNull(realBufferedSource1);
      
      // Undeclared exception!
      try { 
        realBufferedSource1.read((Buffer) null, 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Pipe pipe0 = new Pipe(1000000000000012L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(hashingSource0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      long long0 = buffer0.indexOf((byte)63);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals((-1L), long0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink1);
      
      Buffer buffer1 = buffer0.writeUtf8CodePoint(45);
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(1L, buffer1.size());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertEquals(1L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertSame(buffer0, buffer1);
      assertNotNull(list0);
      
      boolean boolean1 = pipe0.sourceClosed;
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)101;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(6, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte) (-42), (byte)127, (byte)63, (byte)63, (byte)127, (byte)101}, byteArray0);
      
      long long1 = realBufferedSource0.readDecimalLong();
      assertFalse(long1 == long0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertSame(buffer0, buffer1);
      assertEquals(0L, long1);
      
      try { 
        realBufferedSource0.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Pipe pipe0 = new Pipe(3L);
      assertNotNull(pipe0);
      
      Buffer buffer1 = pipe0.buffer;
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Buffer buffer2 = buffer0.writeDecimalLong(60L);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertFalse(buffer2.exhausted());
      assertEquals(2L, buffer2.size());
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-126);
      boolean boolean1 = pipe0.sourceClosed;
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotNull(realBufferedSink0);
      
      String string0 = realBufferedSink0.toString();
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertEquals("buffer([size=0])", string0);
      assertNotNull(string0);
      
      realBufferedSink0.flush();
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      
      HashingSink hashingSink0 = HashingSink.sha512(realBufferedSource0.buffer);
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotNull(hashingSink0);
      
      ByteString byteString0 = hashingSink0.hash();
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(64, byteString0.size());
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotNull(byteString0);
      
      HashingSink hashingSink1 = HashingSink.hmacSha1(buffer1, byteString0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(64, byteString0.size());
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotNull(hashingSink1);
      
      Timeout timeout0 = hashingSink1.timeout();
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(64, byteString0.size());
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotNull(timeout0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(hashingSink1);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(64, byteString0.size());
      assertNotNull(realBufferedSink1);
      
      BufferedSink bufferedSink0 = realBufferedSink1.writeShort((-1789569705));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(bufferedSink0.equals((Object)realBufferedSink0));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(64, byteString0.size());
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertSame(realBufferedSink1, bufferedSink0);
      assertNotSame(bufferedSink0, realBufferedSink0);
      assertSame(bufferedSink0, realBufferedSink1);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotNull(bufferedSink0);
      
      BufferedSink bufferedSink1 = realBufferedSink1.writeInt(104);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(bufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(64, byteString0.size());
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertSame(realBufferedSink1, bufferedSink1);
      assertSame(realBufferedSink1, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(bufferedSink1, realBufferedSink0);
      assertSame(bufferedSink1, realBufferedSink1);
      assertSame(bufferedSink1, bufferedSink0);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(hashingSink1, hashingSink0);
      assertNotNull(bufferedSink1);
      
      ByteString byteString1 = new ByteString((byte[]) null);
      assertNotNull(byteString1);
      
      realBufferedSink1.flush();
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer0.exhausted());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertEquals(64, byteString0.size());
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertSame(realBufferedSink1, bufferedSink1);
      assertSame(realBufferedSink1, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSink1, hashingSink0);
      
      long long0 = realBufferedSource0.readDecimalLong();
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertEquals(60L, long0);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink1.buffer);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertEquals(64, byteString0.size());
      assertNotNull(realBufferedSource1);
      
      long long1 = realBufferedSource1.readAll(buffer1);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(buffer1.equals((Object)buffer0));
      assertFalse(buffer1.equals((Object)buffer2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(long1 == long0);
      assertFalse(hashingSink0.equals((Object)hashingSink1));
      assertFalse(hashingSink1.equals((Object)hashingSink0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(6L, buffer1.size());
      assertEquals(64, byteString0.size());
      assertSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink1, realBufferedSink0);
      assertSame(realBufferedSink1, bufferedSink1);
      assertSame(realBufferedSink1, bufferedSink0);
      assertNotSame(buffer1, buffer0);
      assertNotSame(buffer1, buffer2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertNotSame(hashingSink0, hashingSink1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(hashingSink1, hashingSink0);
      assertEquals(0L, long1);
      
      try { 
        realBufferedSource0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Pipe pipe0 = new Pipe(1092L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSource0.buffer);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink1);
      
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0);
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink2);
      
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(buffer0);
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink3);
      
      Buffer buffer1 = realBufferedSink3.buffer();
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink3.equals((Object)realBufferedSink1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink3, realBufferedSink0);
      assertNotSame(realBufferedSink3, realBufferedSink2);
      assertNotSame(realBufferedSink3, realBufferedSink1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      Buffer buffer2 = realBufferedSource0.buffer.writeUtf8CodePoint((-1789569705));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertEquals(1L, buffer2.size());
      assertFalse(buffer2.exhausted());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
      
      String string0 = realBufferedSink0.toString();
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertEquals("buffer([text=W])", string0);
      assertNotNull(string0);
      
      Buffer buffer3 = realBufferedSource0.buffer();
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertFalse(buffer3.equals((Object)buffer0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(1L, buffer3.size());
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertFalse(buffer3.exhausted());
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer0);
      assertSame(buffer3, buffer2);
      assertNotNull(buffer3);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = pipe0.sourceClosed;
      assertFalse(boolean0);
      
      String string1 = realBufferedSource0.readUtf8Line();
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(string1.equals((Object)string0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertEquals("W", string1);
      assertNotNull(string1);
      
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSource0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      
      hashingSource0.close();
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource1);
      
      realBufferedSink2.flush();
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink2));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink3));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink0));
      assertFalse(realBufferedSink2.equals((Object)realBufferedSink1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotSame(realBufferedSink0, realBufferedSink3);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(realBufferedSink0, realBufferedSink2);
      assertNotSame(realBufferedSink2, realBufferedSink3);
      assertNotSame(realBufferedSink2, realBufferedSink0);
      assertNotSame(realBufferedSink2, realBufferedSink1);
      
      Buffer buffer4 = pipe0.buffer;
      assertTrue(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer1));
      assertEquals(0L, buffer4.size());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertNotSame(buffer4, buffer3);
      assertSame(buffer4, buffer0);
      assertNotSame(buffer4, buffer1);
      assertNotSame(buffer4, buffer2);
      assertNotNull(buffer4);
      
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer4);
      assertTrue(buffer4.equals((Object)buffer3));
      assertTrue(buffer4.equals((Object)buffer2));
      assertTrue(buffer4.equals((Object)buffer1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource1));
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer4.size());
      assertTrue(buffer4.exhausted());
      assertEquals(0L, buffer4.completeSegmentByteCount());
      assertNotNull(realBufferedSource2);
      
      ByteString byteString0 = hashingSource0.hash();
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertTrue(buffer0.equals((Object)buffer3));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource2));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(20, byteString0.size());
      assertSame(buffer0, buffer4);
      assertNotSame(buffer0, buffer3);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource2);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement(byteString0, 8L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Pipe pipe0 = new Pipe(1092L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = buffer0.write(byteArray0);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      assertFalse(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertSame(buffer1, buffer0);
      assertNotNull(buffer1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      long long0 = buffer0.indexOf((byte)127);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertSame(buffer0, buffer1);
      assertEquals((-1L), long0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink1);
      
      Buffer buffer2 = realBufferedSink0.buffer();
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer2.equals((Object)buffer1));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.size());
      assertNotSame(buffer0, buffer2);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(buffer2, buffer1);
      assertNotNull(buffer2);
      
      Buffer buffer3 = realBufferedSource0.buffer;
      assertFalse(buffer3.equals((Object)buffer0));
      assertTrue(buffer3.equals((Object)buffer2));
      assertFalse(buffer3.equals((Object)buffer1));
      assertEquals(0L, buffer3.completeSegmentByteCount());
      assertTrue(buffer3.exhausted());
      assertEquals(0L, buffer3.size());
      assertNotSame(buffer3, buffer0);
      assertNotSame(buffer3, buffer1);
      assertNotSame(buffer3, buffer2);
      assertNotNull(buffer3);
      
      List<Integer> list0 = buffer0.segmentSizes();
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotNull(list0);
      
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertNotNull(byteString0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = realBufferedSource0.rangeEquals(1L, byteString0);
      assertFalse(buffer0.equals((Object)buffer3));
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertEquals(2, byteString0.size());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.writeInt((byte)127);
      assertFalse(bufferedSink0.equals((Object)realBufferedSink1));
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer3));
      assertFalse(realBufferedSink0.equals((Object)realBufferedSink1));
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertNotSame(bufferedSink0, realBufferedSink1);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer3);
      assertSame(buffer0, buffer1);
      assertNotSame(realBufferedSink0, realBufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotNull(bufferedSink0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Pipe pipe0 = new Pipe(1074L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSource0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink0);
      
      InputStream inputStream0 = realBufferedSource0.inputStream();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(inputStream0);
      
      Buffer buffer1 = realBufferedSource0.buffer.readFrom(inputStream0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotNull(bufferedSink0);
      
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSink1.equals((Object)bufferedSink0));
      assertFalse(realBufferedSink1.equals((Object)realBufferedSink0));
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(realBufferedSink1);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((-437L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -437
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Pipe pipe0 = new Pipe(1089L);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      pipe0.sourceClosed = false;
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      realBufferedSource0.close();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
      
      long long0 = 1074L;
      Pipe pipe1 = new Pipe(1074L);
      assertFalse(pipe1.equals((Object)pipe0));
      assertNotNull(pipe1);
      
      boolean boolean0 = pipe1.sourceClosed;
      assertFalse(boolean0);
      
      Buffer buffer1 = realBufferedSource0.buffer();
      assertFalse(pipe0.equals((Object)pipe1));
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertNotSame(pipe0, pipe1);
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      assertEquals(5, options0.size());
      assertNotNull(options0);
      
      ListIterator<ByteString> listIterator0 = options0.listIterator();
      assertEquals(5, options0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      // Undeclared exception!
      try { 
        realBufferedSource0.select(options0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotSame(buffer0, buffer1);
      assertNotSame(buffer1, buffer0);
      assertNotNull(buffer1);
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotSame(buffer0, buffer1);
      assertNotNull(hashingSource0);
      
      ByteString byteString0 = hashingSource0.hash();
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      assertNotSame(buffer0, buffer1);
      assertNotNull(byteString0);
      
      String string0 = byteString0.base64();
      assertTrue(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      assertNotSame(buffer0, buffer1);
      assertEquals("2jmj7l5rSw0yVb/vlWAYkK/YBwk=", string0);
      assertNotNull(string0);
      
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(bufferedSink0, realBufferedSink0);
      assertNotNull(bufferedSink0);
      
      HashingSource hashingSource1 = HashingSource.md5(buffer0);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource1.equals((Object)hashingSource0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource1, hashingSource0);
      assertNotNull(hashingSource1);
      
      Buffer buffer2 = realBufferedSink0.buffer.writeUtf8CodePoint(57);
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(21L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(buffer2);
      
      short short0 = ObjectStreamConstants.STREAM_VERSION;
      assertEquals((short)5, short0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      hashingSource0.close();
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(hashingSource0, hashingSource1);
      
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertFalse(buffer2.exhausted());
      assertEquals(21L, buffer2.size());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotNull(realBufferedSource1);
      
      realBufferedSink0.flush();
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(21L, buffer0.size());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      
      Segment segment0 = buffer2.writableSegment(51);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(21L, buffer0.size());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotNull(segment0);
      
      long long0 = realBufferedSource1.indexOfElement(byteString0);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertFalse(buffer2.equals((Object)buffer0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(21L, buffer0.size());
      assertEquals(20, byteString0.size());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(hashingSource0, hashingSource1);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertEquals((-1L), long0);
      
      BufferedSink bufferedSink1 = realBufferedSink0.writeInt(2145520683);
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(21L, buffer0.size());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(bufferedSink1, bufferedSink0);
      assertSame(bufferedSink1, realBufferedSink0);
      assertSame(realBufferedSink0, bufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotNull(bufferedSink1);
      
      byte byte0 = realBufferedSource0.readByte();
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals((byte) (-38), byte0);
      
      short short1 = realBufferedSource0.readShortLe();
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertFalse(short1 == short0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals((short) (-23751), short1);
      
      int int0 = realBufferedSource0.readUtf8CodePoint();
      assertFalse(buffer0.equals((Object)buffer2));
      assertFalse(buffer0.equals((Object)buffer1));
      assertFalse(realBufferedSource0.equals((Object)realBufferedSource1));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertNotSame(realBufferedSource0, realBufferedSource1);
      assertEquals(65533, int0);
      
      boolean boolean0 = realBufferedSource1.rangeEquals((long) 65533, byteString0);
      assertTrue(buffer0.equals((Object)buffer2));
      assertTrue(buffer0.equals((Object)buffer1));
      assertFalse(hashingSource0.equals((Object)hashingSource1));
      assertTrue(buffer2.equals((Object)buffer0));
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(20, byteString0.size());
      assertEquals(0L, buffer2.size());
      assertTrue(buffer2.exhausted());
      assertEquals(0L, buffer2.completeSegmentByteCount());
      assertNotSame(buffer0, buffer2);
      assertNotSame(buffer0, buffer1);
      assertSame(realBufferedSink0, bufferedSink1);
      assertSame(realBufferedSink0, bufferedSink0);
      assertNotSame(hashingSource0, hashingSource1);
      assertSame(buffer2, buffer1);
      assertNotSame(buffer2, buffer0);
      assertNotSame(realBufferedSource1, realBufferedSource0);
      assertFalse(boolean0);
  }
}
