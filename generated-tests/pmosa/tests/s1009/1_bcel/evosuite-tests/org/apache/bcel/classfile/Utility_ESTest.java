/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 15:52:11 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.io.StringWriter;
import java.net.URI;
import java.util.Enumeration;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.ConstantValue;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.EnclosingMethod;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.SourceFile;
import org.apache.bcel.classfile.StackMap;
import org.apache.bcel.classfile.Synthetic;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.isJavaIdentifierPart('S');
      try { 
        Utility.methodSignatureReturnType("xq", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `xq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("ChX*On*8TEZ");
      assertEquals("char", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('y');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = Utility.accessToString(250, true);
      assertEquals("private static final volatile transient", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.accessToString(4);
      String string1 = Utility.compactClassName("protected");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Utility.accessToString(34, true);
      try { 
        Utility.methodSignatureReturnType("ifnonnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ifnonnull'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = (-707);
      Utility.classOrInterface((-707));
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("class", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Utility.replace("impdep2", "\r", "\r");
      try { 
        Utility.methodSignatureArgumentTypes("<clinit>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <clinit>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfMethodSignature("@-ML{Cch]jf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @-ML{Cch]jf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.decode("", false);
      try { 
        Utility.methodSignatureArgumentTypes("ifnonnull", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnonnull
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Utility.decode("", false);
      String string0 = Utility.convertString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "null";
      boolean boolean0 = true;
      Utility.compactClassName("null", "null", true);
      int int0 = 1470;
      Utility.setBit(924, 1470);
      Utility.convertString("");
      try { 
        Utility.methodSignatureArgumentTypes("null", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: null
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = Utility.compactClassName("7c~T|o+^%3i2V", "7c~T|o+^%3i2V", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)93;
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.format((byte)0, 1792, false, 'd');
      Utility.classOrInterface((byte) (-24));
      Utility.isJavaIdentifierPart('d');
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 93
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("20", string0);
      
      boolean boolean0 = Utility.isSet((byte)32, (byte)32);
      assertFalse(boolean0);
      
      String string1 = Utility.getSignature("20");
      assertEquals("L20;", string1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Float");
      assertEquals((byte)6, byte0);
      
      String string0 = Utility.format((-1365), (-1365), true, 'F');
      assertEquals("-1365", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[1gt[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [1gt[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.fillup("Zdd", 675, false, 'T');
      Utility.getSignature("ey");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ey";
      stringArray0[1] = "ey";
      Utility.methodTypeToSignaturedd", stringArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, false, false);
      Utility.convertString("");
      Utility.setBit((-173), 0);
      MockFile mockFile0 = new MockFile("", "");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 1;
      Utility.isSet(649, 1);
      Utility.clearBit(649, 0);
      String string0 = "&FN*";
      Utility.searchOpcode("&FN*");
      Utility.compactClassName("fload_3", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      int int1 = 1710;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        constantPool0.dump(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("nop", string0);
      
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-221), (-221));
      assertFalse(boolean0);
      
      String string0 = Utility.replace("Q[{.Y:/rv,K9BlX", "iDvIGM[gMx=mawk(", "anewarray");
      assertEquals("Q[{.Y:/rv,K9BlX", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = Utility.replace(";=^_'[IK/-P!", ";=^_'[IK/-P!", ";=^_'[IK/-P!");
      assertEquals(";=^_'[IK/-P!", string0);
      
      int int0 = Utility.clearBit((-38949169), (-38949169));
      assertEquals((-38981937), int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = 2942;
      Utility.clearBit(2942, 1867);
      Utility.isSet(894, 1867);
      Utility.searchOpcode("");
      Utility.replace("1tL=H-", "1tL=H-", "");
      String string0 = "_;ytp[8-WNJ1NZSN";
      // Undeclared exception!
      try { 
        Utility.getSignature("_;ytp[8-WNJ1NZSN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[8-WNJ1NZSN
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "j[,7)_23T!3_h";
      // Undeclared exception!
      try { 
        Utility.getSignature("j[,7)_23T!3_h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[,7)_23T!3_h
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-87);
      byteArray0[0] = (byte) (-87);
      Utility.equals(byteArray0, byteArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString(";d^M!YeiI&qC!~[o|hs", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `;d^M!YeiI&qC!~[o|hs'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Exception while looking for class ");
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("Exception while looking for class ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Exception while looking for class 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",,jwK9]5}uG4gYI(");
      mockPrintWriter0.close();
      PrintWriter printWriter0 = mockPrintWriter0.append('3');
      Object[] objectArray0 = new Object[3];
      mockPrintWriter0.checkError();
      mockPrintWriter0.print((double) 140);
      mockPrintWriter0.print(140);
      mockPrintWriter0.println(true);
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) ",,jwK9]5}uG4gYI(";
      mockPrintWriter0.print('h');
      objectArray0[2] = (Object) ",,jwK9]5}uG4gYI(";
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      Utility.compactClassName("NI5_+wBK0K[1U8fq", false);
      Utility.compactClassName("NI5_+wBK0K[1U8fq");
      Utility.fillup("", (-601), true, '>');
      Utility.accessToString((-601));
      Utility.compactClassName(",,jwK9]5}uG4gYI(", true);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) printWriter0;
      objectArray1[1] = (Object) "public private protected synchronized transient native abstract strictfp synthetic annotation enum";
      Object object0 = new Object();
      objectArray1[2] = object0;
      objectArray1[3] = (Object) "NI5_+wBK0K[1U8fq";
      objectArray1[4] = (Object) "NI5_+wBK0K[1U8fq";
      objectArray1[5] = (Object) "NI5_+wBK0K[1U8fq";
      objectArray1[6] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray1);
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.convertString("BiJ3'uh1m");
      try { 
        Utility.methodSignatureArgumentTypes("ldiv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ldiv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(";=^_'[IK/-P!", ";=^_'[IK/-P!", ";=^_'[IK/-P!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;=^_'[IK/-P!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object4;
      objectArray0[1] = object1;
      objectArray0[2] = object0;
      objectArray0[3] = object1;
      objectArray0[4] = object1;
      objectArray0[5] = object6;
      objectArray0[6] = object0;
      Utility.printArray(objectArray0, true, true);
      Utility.compactClassName("{\"java.lang.Object@ff79cfb\", \"java.lang.Object@30d3c53e\", \"java.lang.Object@4102ecf7\", \"java.lang.Object@30d3c53e\", \"java.lang.Object@30d3c53e\", \"java.lang.Object@7b054228\", \"java.lang.Object@4102ecf7\"}", true);
      try { 
        Utility.typeOfSignature("object");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: object
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = objectArray0[1];
      Object object2 = new Object();
      objectArray0[4] = object2;
      Object object3 = new Object();
      objectArray0[5] = object3;
      Object object4 = new Object();
      objectArray0[6] = object4;
      Object object5 = new Object();
      objectArray0[7] = object5;
      Object object6 = new Object();
      objectArray0[8] = object6;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, true);
      Utility.compactClassName("", true);
      try { 
        Utility.typeOfSignature(">8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = Utility.fillup("\t\t<", 52, false, 'T');
      assertEquals("TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\t\t<", string0);
      
      String string1 = Utility.getSignature("Only element values of type array can be built with this ctor - type specified: ");
      assertEquals("LOnly;", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "invokestatic";
      stringArray0[1] = "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\t\t<";
      stringArray0[2] = "\t\t<";
      stringArray0[3] = "LOnly;";
      stringArray0[4] = "Only element values of type array can be built with this ctor - type specified: ";
      stringArray0[5] = "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\t\t<";
      String string2 = Utility.methodTypeToSignature("Only element values of type array can be built with this ctor - type specified: ", stringArray0);
      assertEquals("(Linvokestatic;LTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT;L<;LLOnly;;LOnly;LTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT;)LOnly;", string2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = object1;
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      objectArray0[3] = object7;
      objectArray0[4] = object5;
      objectArray0[5] = object3;
      Object object8 = new Object();
      objectArray0[6] = object8;
      objectArray0[7] = object3;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
      
      Utility.compactClassName("{\"java.lang.Object@24426bbe\", \"java.lang.Object@83eb825\", \"java.lang.Object@83eb825\", \"java.lang.Object@4bd415d1\", \"java.lang.Object@749c57cc\", \"java.lang.Object@43b4dd7a\", \"java.lang.Object@3e36bab9\", \"java.lang.Object@43b4dd7a\"}", false);
      byte byte0 = Utility.typeOfSignature("B33KV*ad]KduQRU");
      assertEquals((byte)8, byte0);
      
      String string1 = Utility.fillup("float", (byte)8, false, '\\');
      assertEquals("\\\\\\float", string1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "|~f6_0hN#3(U.";
      stringArray0[1] = "|~f6_0hN#3(U.";
      stringArray0[2] = "|~f6_0hN#3(U.";
      stringArray0[3] = "|~f6_0hN#3(U.";
      stringArray0[4] = "|~f6_0hN#3(U.";
      stringArray0[5] = "|~f6_0hN#3(U.";
      stringArray0[6] = "|~f6_0hN#3(U.";
      stringArray0[7] = "idiv";
      Utility.methodTypeToSignature("|~f6_0hN#3(U.", stringArray0);
      Utility.setBit(2856, (-303));
      Utility.compactClassName("@@Dw)A]}", true);
      Utility.isSet(133928, 4);
      MockFile mockFile0 = new MockFile("idiv", "astore_3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append(':');
      Utility.printArray((PrintStream) mockPrintStream0, (Object[]) stringArray0);
      assertEquals(120L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Dm9Ya}9 eH\"l`(7");
      assertEquals((byte)7, byte0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte) (-32);
      byte byte0 = (byte) (-99);
      byteArray0[6] = (byte) (-99);
      Utility.equals(byteArray0, byteArray0);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("$l$8b$I$A$A$A$A$A$A$A", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$l$8b$I$A$A$A$A$A$A$A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Utility.replace("", "dadd", "dadd");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "dadd";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "dadd";
      stringArray0[5] = "dadd";
      stringArray0[6] = "dadd";
      Utility.methodTypeToSignature("", stringArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("idiv", false);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[0] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 112, (-2041448181));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("PMGClass(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PMGClass('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)71;
      Utility.encode(byteArray0, false);
      Utility.compactClassName("1G", false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "impdep2";
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) "";
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("PMGClass(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PMGClass('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Utility.toHexString(byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1), (-1));
      String string0 = Utility.convertString("TYf0cVxA<&T?U8");
      assertEquals("TYf0cVxA<&T?U8", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Exception while looking for class ");
      try { 
        Utility.methodSignatureReturnType("Exception while looking for class ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Exception while looking for class '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = Utility.convertString("bc`B>'0u");
      assertEquals("bc`B>\\'0u", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "float");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-47);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature(", catch_type = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , catch_type = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";Q");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-116);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature("!'ZHn9{VI8Oy_S(A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'ZHn9{VI8Oy_S(A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LLOnly;;V");
      String string0 = Utility.methodSignatureReturnType("LLOnly;;V");
      assertEquals("LOnly", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.signatureToString("LOnly;V", true);
      byte[] byteArray0 = new byte[0];
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("MG3lass(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MG3lass('
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-69), (int) (byte) (-69));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "[";
      try { 
        Utility.methodSignatureReturnType("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "[";
      try { 
        Utility.methodSignatureReturnType("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "[zoQl>";
      Utility.typeOfSignature("[zoQl>");
      byte[] byteArray0 = new byte[0];
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      try { 
        dataInputStream0.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      try { 
        Utility.typeOfSignature(";Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)107;
      Utility.encode(byteArray0, false);
      Utility.signatureToString("V");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)18, (int) (byte)107);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "=ai";
      try { 
        Utility.typeOfSignature("=ai");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =ai
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      try { 
        Utility.typeOfSignature("PMGClass(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: PMGClass(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Utility.methodSignatureReturnType("ChX*On*8TEZ");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Total of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Total of 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      try { 
        Utility.typeOfSignature("M<4,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M<4,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1872, (int) (byte)74);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte) (-80);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("08 ff 28 49 07 b0 48 b0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 08 ff 28 49 07 b0 48 b0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.classOrInterface(114);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte) (-15);
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      byte[] byteArray1 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-117), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-78);
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = Utility.decode("$A$b2$A$A$A$A$A$A$A", false);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) byteArray1;
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) "$A$b2$A$A$A$A$A$A$A";
      objectArray0[3] = (Object) byteArray1;
      Utility.printArray(objectArray0, false);
      try { 
        Utility.typeOfSignature("$A$b2$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $A$b2$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = Utility.encode(byteArray0, false);
      String string1 = Utility.compactClassName("$A", false);
      assertTrue(string1.equals((Object)string0));
      
      byte[] byteArray1 = Utility.decode("$A", false);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "java.lang.C$j5%L'$FX;k>HKhR";
      try { 
        Utility.decode("java.lang.C$j5%L'$FX;k>HKhR", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("DR4H");
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6SGk`l$4N");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6SGk`l$4N
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "class");
      try { 
        Utility.methodSignatureReturnType("QcZqdQ7&tl4u.*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QcZqdQ7&tl4u.*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      try { 
        Utility.typeOfSignature("!#L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-24);
      byteArray0[5] = (byte)59;
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-18);
      byteArray0[6] = (byte)41;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$b94$e8$Ay$ee$v", string0);
      
      byte byte0 = Utility.typeOfSignature("Signature: ");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)74;
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("RqrZ$t", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RqrZ$t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)53;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("5", string0);
      
      byte byte0 = Utility.typeOfSignature("Could not create the directory ");
      assertEquals((byte)5, byte0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".sG/O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .sG/O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Float");
      assertEquals("float", string0);
      
      String string1 = Utility.methodTypeToSignature("ifnonnull", (String[]) null);
      assertEquals("()Lifnonnull;", string1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte)62;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      byte byte0 = Utility.typeOfSignature("INSENSITIVE");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)55;
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("20]_^+Lv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 20]_^+Lv
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)59;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("(c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Jd7t2oTN$VG=6");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      Utility.typeOfSignature("The filter must not be null");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = (Object) "The filter must not be null";
      objectArray0[3] = (Object) "$l$8b$I$A$A$A$A$A$A$A";
      objectArray0[4] = (Object) "The filter must not be null";
      objectArray0[5] = (Object) "The filter must not be null";
      Utility.printArray(objectArray0);
      try { 
        Utility.methodSignatureReturnType("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$l$8b$I$A$A$A$A$A$A$A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("LPP`vO\"9<vp@Pko@K>");
      assertEquals((byte)14, byte0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "LPP`vO\"9<vp@Pko@K>";
      stringArray0[1] = "java.lang.^|*'";
      stringArray0[2] = "LPP`vO\"9<vp@Pko@K>";
      stringArray0[3] = "LPP`vO\"9<vp@Pko@K>";
      stringArray0[4] = "LPP`vO\"9<vp@Pko@K>";
      stringArray0[5] = "LPP`vO\"9<vp@Pko@K>";
      stringArray0[6] = "LPP`vO\"9<vp@Pko@K>";
      String string0 = Utility.methodTypeToSignature("LPP`vO\"9<vp@Pko@K>", stringArray0);
      assertEquals("(LLPP`vO\"9<vp@Pko@K>;Ljava/lang/^|*';LLPP`vO\"9<vp@Pko@K>;LLPP`vO\"9<vp@Pko@K>;LLPP`vO\"9<vp@Pko@K>;LLPP`vO\"9<vp@Pko@K>;LLPP`vO\"9<vp@Pko@K>;)LLPP`vO\"9<vp@Pko@K>;", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utility.methodSignatureReturnType("Float");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)52;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 171, 171);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Z%X2NYsx/aAjO", true);
      assertEquals("boolean", string0);
      
      boolean boolean0 = Utility.isSet((-4202), (-4202));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      try { 
        Utility.typeOfSignature("?7:{pp\"a");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?7:{pp\"a
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(Lak.m,.", "(Lak.m,.", "(Lak.m,.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lak.m,.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        Utility.typeOfSignature("O>t,wy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O>t,wy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "<illegal opcode>";
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("B<nNB");
      assertEquals("byte", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte) (-119);
      Utility.encode(byteArray0, true);
      Utility.typeOfSignature("ZPO} 6h-JiT[\"}");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[8];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-119), (byte)67);
      constantArray0[0] = (Constant) constantFieldref0;
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantDouble constantDouble0 = new ConstantDouble(dataInputStream0);
      constantArray0[1] = (Constant) constantDouble0;
      int int0 = 63;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      try { 
        Utility.typeOfSignature("807{89hAB3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 807{89hAB3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-96);
      byteArray0[6] = (byte) (-40);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("ACC_SUPER flag\t\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ACC_SUPER flag\t\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      try { 
        Utility.typeOfSignature(")\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        Utility.typeOfSignature("W5X2NYsx/aAjO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W5X2NYsx/aAjO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("JavaClass.debug");
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9oa$)2-'$c=k4l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9oa$)2-'$c=k4l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "Xa]";
      try { 
        Utility.typeOfSignature("Xa]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xa]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Invalid signature: ");
      assertEquals("int", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Invalid signature: ";
      stringArray0[1] = "int";
      stringArray0[2] = "int";
      stringArray0[3] = "Invalid signature: ";
      String string1 = Utility.methodTypeToSignature("int", stringArray0);
      assertEquals("(LInvalid;IILInvalid;)I", string1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte) (-81);
      byteArray0[8] = (byte)0;
      String string2 = Utility.toHexString(byteArray0);
      assertEquals("37 30 52 ef 32 42 45 af 00", string2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Constants.ILLEGAL_TYPE;
      try { 
        Utility.typeOfSignature("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("WwIt~u7VQy.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `WwIt~u7VQy.'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-PVYrdFFTK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -PVYrdFFTK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.methodSignatureReturnType("Invalid signature: ");
      try { 
        Utility.typeOfSignature("K*)aS=yI,u;E|EDAC4.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K*)aS=yI,u;E|EDAC4.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)1;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)1, (-1));
      assertEquals("2:    aconst_null\n", string0);
      
      String string1 = Utility.convertString("laload");
      assertEquals("laload", string1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("freturn", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-119);
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("+n#Qt[[{]Nd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: n#Qt[[{]Nd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "@cM";
      try { 
        Utility.typeOfSignature("@cM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @cM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte byte0 = Constants.ATTR_STACK_MAP;
      try { 
        Utility.typeOfSignature("NewObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NewObject
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-215));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[2] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)27, (int) (byte)71, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)38);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)125;
      byteArray1[1] = (byte) (-93);
      byteArray1[2] = (byte) (-35);
      byteArray1[3] = (byte)125;
      byteArray1[4] = (byte)125;
      byteArray1[5] = (byte) (-123);
      byteArray1[6] = (byte) (-93);
      byteArray1[7] = (byte)125;
      // Undeclared exception!
      Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-123), 4, false);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)17, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-123);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte)125;
      byteArray0[7] = (byte)8;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.methodSignatureReturnType("OkS|f-D`:gh7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `OkS|f-D`:gh7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.methodSignatureReturnType("U<1os:6PlX]s", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U<1os:6PlX]s'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Utility.getSignature("Float");
      try { 
        Utility.methodSignatureReturnType("))[~", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte) (-119);
      String string0 = "G^sg:_D$ne%//1";
      try { 
        Utility.methodSignatureReturnType("G^sg:_D$ne%//1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G^sg:_D$ne%//1'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-85);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte) (-85);
      byteArray0[7] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantFloat0;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[3] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)12, 64, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (int) (byte) (-85));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = Utility.convertString(";= _'[IK/-P!");
      assertEquals(";= _\\'[IK/-P!", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-93);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dload_0", string1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ConstantString constantString0 = new ConstantString(69);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantString0;
      constantArray0[5] = (Constant) constantString0;
      constantArray0[6] = (Constant) constantString0;
      constantArray0[7] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-78), (-875), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 45746. Constant pool size is: 8
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "(L!a.m,.";
      try { 
        Utility.typeOfMethodSignature("(L!a.m,.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (L!a.m,.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(1687);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-120);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-866), 1687, false);
      assertEquals("0:    i2f\n1:    iconst_0\n2:    astore_0\n3:    nop\n4:    impdep2\n5:    l2i\n", string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte) (-116);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 7, 76, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("istore\t\t%0", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "4Oy3lK\\|.GwF]No[";
      try { 
        Utility.typeOfSignature("4Oy3lK|.GwF]No[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4Oy3lK|.GwF]No[
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Utility.compactClassName("checkcast");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)40;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)40, 57);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";Q");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte) (-74);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-74), (int) (byte) (-74));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    f2l
         // 1:    f2l
         // 2:    f2l
         // 3:    f2l
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)82;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), 34, false);
      assertEquals("0:    fload_2\n1:    dastore\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantClass1;
      constantArray0[1] = (Constant) constantClass1;
      constantArray0[2] = (Constant) constantFloat0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 166, (int) (byte)7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      int int0 = 57;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)40;
      constantPool0.setConstantPool(constantArray0);
      byteArray0[8] = (byte)22;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)22, (int) (byte)22);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)107;
      Utility.encode(byteArray0, true);
      Constant[] constantArray0 = new Constant[2];
      ConstantLong constantLong0 = new ConstantLong((byte)54);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantLong constantLong2 = new ConstantLong((-730L));
      constantArray0[1] = (Constant) constantLong2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte) (-34);
      byteArray1[2] = (byte)107;
      byteArray1[3] = (byte)54;
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantLong0.accept(emptyVisitor0);
      byteArray1[4] = (byte) (-97);
      byteArray1[5] = (byte) (-114);
      byteArray1[6] = (byte)107;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)107, 44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-215));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)70;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)21;
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte)27;
      byteArray1[3] = (byte) (-66);
      byteArray1[4] = (byte) (-33);
      byteArray1[5] = (byte) (-67);
      byteArray1[6] = (byte)70;
      byteArray1[7] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iload\t\t%32", string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WwIt~u7VQy.");
      try { 
        Utility.typeOfSignature("+*3i.]m2M: 0w4f ~i");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3i.]m2M: 0w4f ~i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-82);
      byte byte0 = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)45;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)45, (int) (byte) (-120));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";Q");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte) (-74);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";Q";
      stringArray0[1] = "bLoQ;,w[^";
      stringArray0[2] = "getstatic";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-116);
      byteArray1[1] = (byte) (-116);
      byteArray1[2] = (byte)31;
      byteArray1[3] = (byte) (-116);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 48, 48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)90);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 53, (-509), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte) (-120);
      byteArray0[6] = (byte)30;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-120), 934, false);
      assertEquals("0:    l2i\n1:    l2i\n2:    l2i\n3:    l2i\n4:    l2i\n5:    l2i\n6:    lload_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantString1.toString();
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-86);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.typeOfSignature("G:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";Q");
      byte[] byteArray0 = new byte[5];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-67);
      byteArray1[1] = (byte)32;
      byteArray1[3] = (byte)32;
      byteArray1[4] = (byte) (-67);
      byteArray1[5] = (byte) (-67);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null);
      assertEquals("arraylength", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[23];
      byteArray1[0] = (byte)23;
      byteArray1[1] = (byte)23;
      byte byte0 = (byte) (-75);
      byteArray1[2] = (byte) (-75);
      byteArray1[3] = (byte)23;
      byteArray1[20] = (byte)23;
      byteArray1[5] = (byte)23;
      byteArray1[6] = (byte)23;
      byteArray1[7] = (byte) (-66);
      byteArray1[8] = (byte)23;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (-461), (int) (byte)23, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_OBJECT;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.compactClassName("drem", "nOS'PC!pID'WZc", true);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)66;
      String string0 = "!'ZHn\\9{VI8Oy_S(A";
      try { 
        Utility.typeOfSignature("1EClx'9&gag@hJQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1EClx'9&gag@hJQ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte) (-82);
      int int0 = 216;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 209, 216);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      try { 
        Utility.typeOfSignature("UgOM7=}`q=ihO;4]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UgOM7=}`q=ihO;4]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Utility.methodSignatureReturnType("Z%X2NYsx/aAjO");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-7);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("if_acmpne");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)120, (int) (byte)120, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte)30;
      byteArray0[4] = (byte) (-72);
      byteArray0[7] = (byte)83;
      byteArray0[8] = (byte) (-72);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 87, (-1482));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)60;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("istore_1", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte byte0 = (byte) (-85);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)65;
      String string0 = "if_acmpne";
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("if_acmpne");
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-105), (-1849), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)12);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)1, (int) (byte)12, false);
      try { 
        Utility.methodSignatureArgumentTypes("1:    dup2\n2:    fconst_1\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1:    dup2
         // 2:    fconst_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-66);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-66), (int) (byte)32);
      assertEquals("0:    nop\n1:    lload_2\n2:    lload_2\n3:    lload_2\n4:    istore_1\n5:    arraylength\n6:    iload_1\n", string0);
      
      String string1 = Utility.convertString("0:    nop\n1:    lload_2\n2:    lload_2\n3:    lload_2\n4:    istore_1\n5:    arraylength\n6:    iload_1\n");
      assertEquals("0:    nop\\n1:    lload_2\\n2:    lload_2\\n3:    lload_2\\n4:    istore_1\\n5:    arraylength\\n6:    iload_1\\n", string1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)56);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)91, 79, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-215));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)59;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)59, (int) (byte)27);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(">\t");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1534, 3611);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = Utility.isJavaIdentifierPart('l');
      assertTrue(boolean0);
      
      byte[] byteArray0 = Utility.decode("y+C:N!A?5'/0a", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("lshl", string0);
      
      short short0 = Utility.searchOpcode(">\t");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte) (-92);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(3349);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-565), (int) (byte) (-91), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fstore\t\t%165
         // 2:    irem
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("aaload", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string1 = Utility.compactClassName("goto_w\t\t#0", "LkJ", false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "? extends ");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "? extends ";
      stringArray0[1] = "getstatic";
      stringArray0[2] = "bLoQ;,w[^";
      stringArray0[3] = "? extends ";
      stringArray0[4] = "getstatic";
      try { 
        Utility.typeOfSignature("QM;I");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QM;I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte) (-32);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-46);
      byteArray1[1] = (byte)70;
      byteArray1[2] = (byte)60;
      byteArray1[3] = (byte) (-46);
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte)95;
      byteArray1[6] = (byte)62;
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (-1072), (int) (byte) (-46));
      assertEquals("0:    <illegal opcode>\n1:    fstore_3\n2:    istore_1\n3:    <illegal opcode>\n4:    impdep2\n5:    swap\n6:    istore_3\n", string0);
      
      String string1 = Utility.convertString("#e34o");
      assertEquals("#e34o", string1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";Q");
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-125);
      byteArray0[4] = (byte) (-74);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Constants.CONSTRUCTOR_NAME;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-125), (int) (byte) (-125));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    lxor
         // 2:    lxor
         // 3:    nop
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-87);
      byteArray0[5] = (byte)109;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifgt\t\t#-22781", string0);
      
      String string1 = Utility.compactClassName("xoZ:w_AeJ~&V", "HA$^", true);
      assertEquals("xoZ:w_AeJ~&V", string1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(95);
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantString0;
      constantArray0[1] = (Constant) constantString0;
      ConstantFloat constantFloat0 = new ConstantFloat((-750.0F));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      byteArray0[6] = (byte) (-106);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte) (-47);
      byteArray0[6] = (byte) (-106);
      byteArray0[7] = (byte) (-106);
      byteArray0[8] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)17, (int) (byte) (-106));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)127;
      byteArray0[8] = (byte)57;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte)60;
      byteArray1[3] = (byte)60;
      byteArray1[4] = (byte)60;
      byteArray1[5] = (byte)127;
      byteArray1[6] = (byte)60;
      byteArray1[7] = (byte)57;
      byteArray1[8] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)71);
      constantArray0[0] = (Constant) constantMethodType0;
      Constant constant0 = constantMethodType0.copy();
      constantArray0[1] = constant0;
      ConstantString constantString0 = new ConstantString((-2137));
      constantArray0[2] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("land", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)95;
      byteArray0[2] = (byte) (-83);
      byteArray0[4] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-91), 161);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-2144), (-937), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-26);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)127;
      byteArray0[8] = (byte)57;
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1079), (int) (byte)14, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dload_3
         // 1:    istore_1
         // 2:    fconst_2
         // 3:    dconst_0
         // 4:    dstore_0
         // 5:    <illegal opcode>
         // 6:    dup2_x1
         // 7:    land
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-90);
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-2363), 23, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfSignature("aload_1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: aload_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte) (-6);
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((-2884L));
      constantArray0[0] = (Constant) constantLong0;
      ConstantLong constantLong1 = new ConstantLong(1158L);
      constantArray0[1] = (Constant) constantLong1;
      ConstantFloat constantFloat0 = new ConstantFloat((-2363));
      constantArray0[2] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantLong1.clone();
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 43, (int) (byte) (-6), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-125);
      byteArray0[6] = (byte)62;
      byteArray0[7] = (byte) (-125);
      byteArray0[8] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-36), (-2809));
      assertEquals("0:    lxor\n1:    lconst_1\n2:    <illegal opcode>\n3:    idiv\n4:    lxor\n5:    nop\n6:    istore_3\n7:    lxor\n8:    <illegal opcode>\n", string0);
      
      String string1 = Utility.convertString("A@K%Rve,[xqw9r");
      assertEquals("A@K%Rve,[xqw9r", string1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";Q");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-66);
      byteArray0[2] = (byte) (-103);
      byteArray0[1] = (byte) (-66);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-66);
      byteArray1[1] = (byte) (-66);
      byteArray1[2] = (byte) (-103);
      byteArray1[3] = (byte) (-103);
      byteArray1[4] = (byte) (-66);
      String string0 = Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-66), (int) (byte) (-66), true);
      assertEquals("0:    arraylength\n1:    arraylength\n2:    ifeq\t\t#-26176\n", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-10);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifle\t\t#23746", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(">\t");
      constantArray0[0] = (Constant) constantUtf8_0;
      try { 
        Utility.methodSignatureReturnType("Y WBp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y WBp'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-1));
      assertEquals("0:    bipush\t\t16\n2:    nop\n", string0);
      
      String string1 = Utility.convertString("0:    bipush\t\t16\n2:    nop\n");
      assertEquals("0:    bipush\t\t16\\n2:    nop\\n", string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "0:    bipush\t\t16\n2:    nop\n";
      stringArray0[1] = "0:    bipush\t\t16\n2:    nop\n";
      stringArray0[2] = "0:    bipush\t\t16\n2:    nop\n";
      String string2 = Utility.methodTypeToSignature("0:    bipush\t\t16\n2:    nop\n", stringArray0);
      assertEquals("(L0:;L0:;L0:;)L0:;", string2);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "QM;I";
      try { 
        Utility.typeOfSignature("RH?EinY?~^E^4%m/t+<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RH?EinY?~^E^4%m/t+<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)108;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte) (-125);
      byteArray0[8] = (byte) (-36);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-36), (-2818));
      Utility.convertString("0:    nop\n1:    lconst_1\n2:    <illegal opcode>\n3:    idiv\n4:    nop\n5:    nop\n6:    caload\n7:    lxor\n8:    <illegal opcode>\n");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "A@K%Rve,[xqw9r";
      objectArray0[1] = (Object) byteSequence0;
      objectArray0[2] = (Object) "A@K%Rve,[xqw9r";
      objectArray0[3] = (Object) "A@K%Rve,[xqw9r";
      objectArray0[4] = (Object) "0:    nop\n1:    lconst_1\n2:    <illegal opcode>\n3:    idiv\n4:    nop\n5:    nop\n6:    caload\n7:    lxor\n8:    <illegal opcode>\n";
      objectArray0[5] = (Object) "0:    nop\n1:    lconst_1\n2:    <illegal opcode>\n3:    idiv\n4:    nop\n5:    nop\n6:    caload\n7:    lxor\n8:    <illegal opcode>\n";
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[0] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-76);
      byteArray1[1] = (byte) (-72);
      byteArray1[2] = (byte)12;
      byteArray1[3] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (-412), 45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Z%X2NYsx/aAjO");
      assertEquals("boolean", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)82;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-19);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)40;
      byteArray1[3] = (byte) (-1);
      byteArray1[4] = (byte)40;
      byteArray1[5] = (byte)104;
      String string1 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-1), (int) (byte) (-1), true);
      assertEquals("0:    <illegal opcode>\n1:    impdep2\n2:    dload_2\n3:    impdep2\n4:    dload_2\n5:    imul\n", string1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 161, 187);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Utility.methodSignatureReturnType("Z%X2NYsx/aAjO");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-7);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("if_acmpne");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)120, (int) (byte)120, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-215));
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantString0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte)111;
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 7, 48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "QBBp";
      stringArray0[1] = "getstatic";
      stringArray0[2] = "bLoQ;,w[^";
      stringArray0[4] = "getstatic";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)49;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)124;
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte) (-72);
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("NBX*^3?", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NBX*^3?'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)94;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-91), 1778);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    <illegal opcode>
         // 1:    pop
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 164, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte byte0 = (byte)102;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)102;
      byteArray0[2] = (byte) (-83);
      byteArray0[4] = (byte)112;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)94;
      byteArray1[1] = (byte)90;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 201, 201);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-90);
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 83, (-1403), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-60);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 2853);
      assertEquals("0:    wide\t(wide)\n1:    nop\n2:    nop\n3:    lconst_1\n4:    lconst_1\n5:    fload_2\n6:    idiv\n7:    lconst_1\n8:    idiv\n", string0);
      
      String string1 = Utility.convertString("0:    wide\t(wide)\n1:    nop\n2:    nop\n3:    lconst_1\n4:    lconst_1\n5:    fload_2\n6:    idiv\n7:    lconst_1\n8:    idiv\n");
      assertEquals("0:    wide\t(wide)\\n1:    nop\\n2:    nop\\n3:    lconst_1\\n4:    lconst_1\\n5:    fload_2\\n6:    idiv\\n7:    lconst_1\\n8:    idiv\\n", string1);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)23;
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)23;
      byteArray1[1] = (byte)23;
      byteArray1[2] = (byte)97;
      byteArray1[3] = (byte)23;
      byteArray1[4] = (byte) (-60);
      byteArray1[5] = (byte)20;
      int int0 = 2489;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)23, 2489);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)96;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)96);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4, (int) (byte) (-123), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)2;
      byteArray1[1] = (byte)2;
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-88);
      byteArray1[4] = (byte) (-52);
      byteArray1[5] = (byte) (-1);
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-52), (int) (byte)106);
      assertEquals("0:    iconst_m1\n1:    iconst_m1\n2:    impdep2\n3:    jsr\t\t#-13054\n", string0);
      
      String string1 = Utility.convertString("A@K%Rve,[xqw9r");
      assertEquals("A@K%Rve,[xqw9r", string1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(">\t");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1534, 1534);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte) (-47);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte)97;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)32, 1785);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "QBBp");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "QBBp";
      stringArray0[1] = "getstatic";
      stringArray0[2] = "bLoQ;,w[^";
      stringArray0[4] = "getstatic";
      Utility.replace("QBBp", "float", "double");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)122, (int) (byte)122);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)85;
      byte byte0 = (byte)78;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      byte[] byteArray1 = new byte[0];
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool1, (int) (byte)85, (-3883));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Utility.replace("(Lak.m,.", "(Lak.m,.", "(Lak.m,.");
      try { 
        Utility.methodSignatureArgumentTypes("(Lak.m,.", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lak.m,.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)43;
      Utility.encode(byteArray0, true);
      try { 
        Utility.methodSignatureArgumentTypes("(Lak.m,.", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lak.m,.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte) (-94);
      byteArray0[8] = (byte) (-55);
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(byteSequence0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[0] = (Constant) constantLong1;
      ConstantClass constantClass0 = new ConstantClass((byte)84);
      constantArray0[1] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2489, (-1873));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-78);
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      try { 
        Utility.methodSignatureReturnType(")H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "#8*%t7~$%j06VqOpH";
      boolean boolean0 = false;
      Utility.decode("#8*%t7~$%j06VqOpH", false);
      String string1 = "Mmss})m";
      // Undeclared exception!
      try { 
        Utility.signatureToString("Mmss})m", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Mmss})m'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantFloat0;
      constantArray0[1] = (Constant) constantFloat0;
      constantArray0[2] = (Constant) constantFloat0;
      constantArray0[3] = (Constant) constantFloat0;
      constantArray0[4] = (Constant) constantFloat0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(16, (byte) (-26));
      constantArray0[5] = (Constant) constantFieldref0;
      constantArray0[6] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-26);
      constantFloat0.toString();
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte) (-26);
      byteArray0[8] = (byte) (-26);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-26), (int) (byte) (-26), false);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    <illegal opcode>\n3:    <illegal opcode>\n4:    <illegal opcode>\n5:    i2d\n6:    <illegal opcode>\n7:    <illegal opcode>\n8:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-89);
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-89), 117);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = Utility.isJavaIdentifierPart('e');
      assertTrue(boolean0);
      
      byte[] byteArray1 = Utility.decode("CA!%:GKK{#+Ds*h0noh", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-89), 89);
      assertEquals("0:    fstore_0\n1:    lstore_2\n2:    lload_3\n3:    fload_3\n4:    astore\t\t%71\n6:    astore_0\n7:    astore_0\n8:    lshr\n9:    fload_1\n10:   aload_1\n11:   fstore_1\n12:   drem\n13:   aload_0\n14:   imul\n15:   faload\n16:   fdiv\n17:   ddiv\n18:   imul\n", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("PMGClass");
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      constantPool0.constantToString(constantArray0[5]);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2519), 179, false);
      assertEquals("0:    invokestatic\tPMGClass\n3:    nop\n4:    nop\n5:    nop\n", string0);
      
      String string1 = Utility.replace("SDwE'", "lreturn", "0:    invokestatic\tPMGClass\n3:    nop\n4:    nop\n5:    nop\n");
      assertEquals("SDwE'", string1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Utility.methodSignatureReturnType("Z%X2NYsx/aAjO");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-7);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("if_acmpne");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)120, (int) (byte)120, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-112);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 216, (int) (byte) (-112));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)88;
      byteArray0[4] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)53);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("pop2", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.methodSignatureReturnType("Invalid signature: ");
      ConstantString constantString0 = new ConstantString((-930));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-108);
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte) (-121);
      byte byte0 = (byte)57;
      byteArray0[6] = (byte)57;
      byteArray0[7] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)15, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Xl?vngf~=B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Xl?vngf~=B'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("X");
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[3] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      constantArray0[8] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-23);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)6, (int) (byte) (-63), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 29889. Constant pool size is: 9
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(448);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)99;
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 32767, 60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, (int) (byte)78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "QBBp");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte) (-36);
      byteArray0[6] = (byte)83;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)104;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-107), (int) (byte) (-36));
      assertEquals("0:    aastore\n1:    dastore\n2:    lneg\n3:    fcmpl\n4:    lload_2\n5:    <illegal opcode>\n6:    aastore\n7:    dup_x2\n8:    imul\n", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((byte)16);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantLong0.toString();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-121);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-68), 156);
      assertEquals("0:    lstore_0\n1:    imul\n2:    bipush\t\t-121\n", string0);
      
      String string1 = Utility.classOrInterface((byte)16);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-128);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), (-2053));
      assertEquals("0:    ior\n", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte) (-57);
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-62);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 187, 79);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "QBBp");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte)117;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfSignature("H*hZ`L`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H*hZ`L`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.methodSignatureReturnType("Synthetic attribute with length > 0");
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)90;
      byteArray1[1] = (byte)10;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(57, (byte)10);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantDouble constantDouble0 = null;
      try {
        constantDouble0 = new ConstantDouble(byteSequence1);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)71;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 169, (int) (byte)87, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)33;
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 60, 1900);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      Utility.compactClassName("");
      String string0 = "KU7xjB";
      try { 
        Utility.methodSignatureReturnType("KU7xjB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KU7xjB'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[11];
      byteArray0[4] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)0);
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence1);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[1] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-96), (int) (byte) (-96));
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    if_icmpne\t\t#4\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fload_0", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)110;
      Utility.encode(byteArray0, false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)110, (int) (byte)72, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.methodSignatureReturnType("Invalid signature: ");
      ConstantString constantString0 = new ConstantString((-930));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-108);
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte) (-121);
      byte byte0 = (byte)78;
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)15, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)36;
      Object object0 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) byteArray0;
      objectArray0[2] = object0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) byteArray0;
      Utility.printArray(objectArray0, true);
      try { 
        Utility.typeOfSignature("5/qv2t[*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5/qv2t[*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = Utility.convertString("\"|Gw4+J?NJ?Qmw");
      assertEquals("\\\"|Gw4+J?NJ?Qmw", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 18, (int) (byte) (-104));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)80;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1562), (int) (byte)80, true);
      assertEquals("0:    dconst_0\n1:    istore_1\n2:    lastore\n", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)6;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 8, (int) (byte)6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[11];
      byteArray0[4] = (byte) (-80);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1174), (int) (byte) (-80));
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    areturn\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n", string0);
      
      String string1 = Utility.classOrInterface((-1174));
      assertEquals("interface", string1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8(">\t");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(1534, 3611);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.isJavaIdentifierPart('l');
      byte[] byteArray0 = Utility.decode("y+C:N!A?5'/0a", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-52);
      Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-52), 179);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 191, 179);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble((byte)120);
      constantArray0[0] = (Constant) constantDouble0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)120;
      byteArray0[0] = (byte)120;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)120;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)122;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 65, 65);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)2;
      byteArray0[3] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byteSequence0.mark((byte)0);
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("%j|mu-ry{FxT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %j|mu-ry{FxT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)109, (int) (byte)109);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)125;
      byteArray1[1] = (byte)85;
      byteArray1[2] = (byte)85;
      byteArray1[3] = (byte)85;
      byteArray1[4] = (byte)85;
      byteArray1[5] = (byte)46;
      byteArray1[6] = (byte)85;
      byteArray1[7] = (byte)85;
      Utility.codeToString(byteArray1, (ConstantPool) null, (-2304), (int) (byte)85);
      MockFile mockFile0 = new MockFile("0:    lushr\n1:    castore\n2:    castore\n3:    castore\n4:    castore\n5:    iaload\n6:    castore\n7:    castore\n");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) byteArray1;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)27;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)11, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-10);
      byteArray1[1] = (byte) (-62);
      byteArray1[2] = (byte)51;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      byteSequence1.readUnsignedShort();
      byteSequence1.close();
      Utility.codeToString(byteSequence1, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("Vux3Qm/HKO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Vux3Qm/HKO
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte) (-44);
      byteArray0[7] = (byte) (-29);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 81, (int) (byte)31);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-48);
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte)61;
      byteArray0[8] = (byte)79;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)61, (int) (byte)102);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-42);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fadd", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      String string0 = Utility.printArray(objectArray0, false);
      String string1 = Utility.compactClassName("java.lang.Object@325cc641, java.lang.Object@122a5051, java.lang.Object@408b47fc");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("X");
      Constant[] constantArray0 = new Constant[28];
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[1] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      constantArray0[7] = (Constant) constantUtf8_0;
      constantArray0[4] = (Constant) constantUtf8_0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-102);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 17, (int) (byte) (-102));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((byte)16);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-63);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)113, (-214));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((byte)125);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte)125;
      byteArray0[6] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)125, 3640);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 62, (int) (byte)114);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 36, 2523);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)18;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPool constantPool2 = constantPool1.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 3042, 1369);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 4608. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte) (-44);
      byteArray0[7] = (byte) (-87);
      byteArray0[8] = (byte) (-81);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byteSequence0.readUnsignedShort();
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.getSignature("fload_1");
      assertEquals("Lfload_1;", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)124;
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-673), (-673));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)124, 1098);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(3, 1098);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[2] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(name_index = ");
      Utility.codeToString(byteArray0, constantPool0, (-2071), (int) (byte)124);
      try { 
        Utility.methodSignatureArgumentTypes("The", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: The
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)24, 3629);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)113;
      byteArray0[7] = (byte)36;
      byteArray0[8] = (byte) (-110);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)113, 1231);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((byte)19);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)19;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte)19;
      byteArray0[8] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)19, (-2321));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 19. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-41);
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)101;
      byteArray0[8] = (byte)13;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 171, 207);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-109), (int) (byte) (-109));
      byte[] byteArray1 = Utility.decode("0:    i2s\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)30, (int) (byte)81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)49;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)49, 84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)92;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)92, 198);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-25);
      byteArray0[7] = (byte)68;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-94), 184);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-114);
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.getSignature("<illegal type>");
      // Undeclared exception!
      try { 
        Utility.signatureToString("L<illegal;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<illegal;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)71;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-117);
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte)83;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)83, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2926, 3032);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-78);
      try { 
        Utility.typeOfSignature("&l*dlU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &l*dlU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 9, (-136));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[28];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-111);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte) (-76);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 155, (int) (byte)127);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-113);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1095056676), (int) (byte) (-113));
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      try { 
        Utility.methodSignatureReturnType("{}", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `{}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)36;
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 168, (int) (byte) (-69));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-87);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), (int) (byte) (-78));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    ret\t\t%178
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-93);
      byteArray1[1] = (byte)110;
      byteArray1[2] = (byte) (-73);
      byteArray1[3] = (byte) (-35);
      byteArray1[5] = (byte)126;
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (-347), (-2620));
      assertEquals("0:    if_icmpgt\t\t#28343\n3:    <illegal opcode>\n4:    nop\n5:    iand\n", string0);
      
      String string1 = Utility.convertString("0:    if_icmpgt\t\t#28343\n3:    <illegal opcode>\n4:    nop\n5:    iand\n");
      assertEquals("0:    if_icmpgt\t\t#28343\\n3:    <illegal opcode>\\n4:    nop\\n5:    iand\\n", string1);
  }
}
