/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 04:46:00 GMT 2019
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Random;
import java.util.Set;
import java.util.function.Consumer;
import java.util.stream.DoubleStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.decomposition.MatrixDecompositor;
import org.la4j.iterator.ColumnMajorMatrixIterator;
import org.la4j.iterator.RowMajorMatrixIterator;
import org.la4j.iterator.VectorIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixAccumulator;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.MatrixOperation;
import org.la4j.operation.ooplace.OoPlaceInnerProduct;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByItsTransposeMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixByVectorMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1875.860008853072);
      doubleArray1[1] = 242.1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 242.1;
      doubleArray2[1] = 242.1;
      doubleArray2[2] = (-1875.860008853072);
      doubleArray2[3] = 1502.2190084;
      doubleArray2[4] = 242.1;
      doubleArray2[5] = (-1875.860008853072);
      doubleArray2[6] = 6.0;
      doubleArray2[7] = 242.1;
      doubleArray2[8] = (-1875.860008853072);
      doubleArray0[1] = doubleArray2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(242.1, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals((-1875.860008853072), cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.min();
      assertEquals((-1875.860008853072), double0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(242.1, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals((-1875.860008853072), cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(10, (-3537.677119161899));
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(10, cRSMatrix0.cardinality());
      assertEquals((-3537.677119161899), cRSMatrix0.min(), 0.01);
      assertEquals(10, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(10, cRSMatrix0.columns());
      assertEquals(0.1, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      assertEquals(0.09, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals((-3537.677119161899), cRSMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(10, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(10, cRSMatrix0.columns());
      
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      boolean boolean0 = cRSMatrix0.non(matrixPredicate0);
      assertTrue(boolean0);
      assertEquals(0.09, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals((-3537.677119161899), cRSMatrix0.min(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertEquals(10, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(10, cRSMatrix0.columns());
      
      int int0 = 2140;
      MatrixFunction matrixFunction1 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(10, 2140, matrixFunction1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 2667;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2667);
      assertEquals(2667, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2667, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(2667, cRSMatrix0.cardinality());
      assertEquals(3.749531308586427E-4, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      // Undeclared exception!
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 3757;
      double double0 = (-1.0);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3757, (-1.0));
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals((-1.0), cRSMatrix0.min(), 0.01);
      assertEquals(3757, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3757, cRSMatrix0.columns());
      assertEquals(3757, cRSMatrix0.rows());
      assertEquals(2.6616981634282674E-4, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.transformRow(5, vectorFunction0);
      double[] doubleArray0 = new double[2];
      cRSMatrix0.rowMajorIterator();
      // Undeclared exception!
      cRSMatrix0.multiply((-52.0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 4220;
      doubleArray0[2] = (double) 8;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) 8;
      doubleArray0[5] = 2361.5016387275;
      doubleArray0[6] = (double) 4220;
      doubleArray0[7] = 0.3;
      doubleArray0[8] = (double) 8;
      int[] intArray0 = new int[5];
      intArray0[0] = 8;
      intArray0[1] = 4220;
      intArray0[2] = 4220;
      intArray0[3] = 8;
      intArray0[4] = 8;
      CRSMatrix cRSMatrix0 = new CRSMatrix(4220, 4220, 8, doubleArray0, intArray0, intArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new double[] {8.0, 4220.0, 8.0, 8.0, 8.0, 2361.5016387275, 4220.0, 0.3, 8.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {8, 4220, 4220, 8, 8}, intArray0);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(4220, cRSMatrix0.columns());
      assertEquals(4220.0, cRSMatrix0.max(), 0.01);
      assertEquals(4220, cRSMatrix0.rows());
      assertEquals(8, cRSMatrix0.cardinality());
      assertEquals(4.492262078569664E-7, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape(8, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 383;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(383);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(383, cRSMatrix0.rows());
      assertEquals(383, cRSMatrix0.columns());
      assertEquals(0.0026109660574412533, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(383, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.maxInRow(1);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(383, cRSMatrix0.rows());
      assertEquals(383, cRSMatrix0.columns());
      assertEquals(0.0026109660574412533, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(383, cRSMatrix0.cardinality());
      
      int int1 = 4;
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(4, (-1268.9685076));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(4, cRSMatrix1.cardinality());
      assertEquals((-1268.9685076), cRSMatrix1.min(), 0.01);
      assertEquals(0.25, cRSMatrix1.density(), 0.01);
      assertEquals(4, cRSMatrix1.rows());
      assertEquals(4, cRSMatrix1.columns());
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      int int2 = 32;
      // Undeclared exception!
      try { 
        cRSMatrix1.isZeroAt(8, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1);
      assertEquals(1, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.LU;
      MatrixMatrixOperation<Object> matrixMatrixOperation0 = (MatrixMatrixOperation<Object>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.toColumnVector();
      assertEquals(1, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(1, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertEquals(2, cRSMatrix1.rows());
      assertEquals(2, cRSMatrix1.columns());
      assertEquals(4, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      assertNotNull(ooPlaceVectorByMatrixMultiplication0);
      
      int int1 = 2;
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Integer integer0 = Integer.getInteger("", 1);
      assertEquals(1, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      OoPlaceInnerProduct ooPlaceInnerProduct0 = new OoPlaceInnerProduct();
      assertNotNull(ooPlaceInnerProduct0);
      
      // Undeclared exception!
      try { 
        SparseVector.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1601.0;
      doubleArray1[1] = (-1379.0);
      doubleArray1[2] = (-2023.782821);
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray1[4] = (-966.0);
      doubleArray1[5] = 1.0;
      doubleArray1[6] = Double.NEGATIVE_INFINITY;
      doubleArray1[7] = (-3792.9555);
      doubleArray1[8] = 2.0;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(9, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NEGATIVE_INFINITY, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(Double.POSITIVE_INFINITY, cRSMatrix0.max(), 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray2 = cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      assertEquals(1, doubleArray0.length);
      assertEquals(9, doubleArray2.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertEquals(9, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(Double.NEGATIVE_INFINITY, cRSMatrix0.min(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(Double.POSITIVE_INFINITY, cRSMatrix0.max(), 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(9, cRSMatrix0.cardinality());
      assertNotNull(doubleArray2);
      assertNotSame(doubleArray2, doubleArray1);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      int int0 = 1470;
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1470);
      assertEquals(1470, denseMatrix0.rows());
      assertEquals(1470, denseMatrix0.columns());
      assertNotNull(denseMatrix0);
      
      int int1 = 2648;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2648, 1470, 2648);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1470, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2648, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)ooPlaceMatricesMultiplication0.apply(denseMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
      assertEquals(1470, denseMatrix0.rows());
      assertEquals(1470, denseMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1470, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2648, cRSMatrix0.rows());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1470, cCSMatrix0.rows());
      assertEquals(1470, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertNotNull(cCSMatrix0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(cCSMatrix0, cRSMatrix0, denseMatrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-4233.841921);
      doubleArray1[1] = (-3718.654948338);
      doubleArray1[2] = 383.127083;
      doubleArray1[3] = 1348.70757655;
      doubleArray1[4] = (-731.01182469345);
      doubleArray1[5] = (-1722.23);
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1348.70757655, cRSMatrix0.max(), 0.01);
      assertEquals(6, cRSMatrix0.columns());
      assertEquals((-4233.841921), cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      String string0 = cRSMatrix0.toMatrixMarket();
      assertEquals("%%MatrixMarket matrix coordinate real general row-major\n1 6 6\n1 1 -4233.842\n1 2 -3718.655\n1 3 383.127\n1 4 1348.708\n1 5 -731.012\n1 6 -1722.230\n", string0);
      assertEquals(1, doubleArray0.length);
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(1348.70757655, cRSMatrix0.max(), 0.01);
      assertEquals(6, cRSMatrix0.columns());
      assertEquals((-4233.841921), cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '7' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 37;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(37, 37, 37);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(37, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(37, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.transformRow(3, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-4233.841921);
      doubleArray1[1] = (-3718.654948338);
      doubleArray1[2] = 383.127083;
      doubleArray1[3] = 1348.70757655;
      doubleArray1[4] = (-731.01182469345);
      doubleArray1[5] = (-1722.23);
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals(1348.70757655, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals((-4233.841921), cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(6, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.removeLastRow();
      assertEquals(1, doubleArray0.length);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals(1348.70757655, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals((-4233.841921), cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(6, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(6, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.rows());
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      String string0 = cRSMatrix1.toMatrixMarket();
      assertEquals("%%MatrixMarket matrix coordinate real general row-major\n0 6 0\n", string0);
      assertEquals(1, doubleArray0.length);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals(1348.70757655, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals((-4233.841921), cRSMatrix0.min(), 0.01);
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(6, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertEquals(0, cRSMatrix1.cardinality());
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(6, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.rows());
      assertNotNull(string0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix0, cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = 1.0;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      double double1 = mockRandom0.nextDouble();
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.random(48, 48, 1.0, (Random) mockRandom0);
      assertEquals(2304, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.9, cRSMatrix0.max(), 0.01);
      assertEquals(48, cRSMatrix0.rows());
      assertEquals(48, cRSMatrix0.columns());
      assertNotNull(cRSMatrix0);
      
      int int0 = 160;
      // Undeclared exception!
      try { 
        cRSMatrix0.getOrElse(48, 160, 48);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '48' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 7;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(7, 7);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(7, cRSMatrix0.rows());
      assertEquals(7, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.rowMajorIterator();
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(7, cRSMatrix0.rows());
      assertEquals(7, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertNotNull(rowMajorMatrixIterator0);
      
      OoPlaceMatrixByItsTransposeMultiplication ooPlaceMatrixByItsTransposeMultiplication0 = new OoPlaceMatrixByItsTransposeMultiplication();
      assertNotNull(ooPlaceMatrixByItsTransposeMultiplication0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)ooPlaceMatrixByItsTransposeMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(7, cRSMatrix0.rows());
      assertEquals(7, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(7, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(7, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      int int1 = (-1903);
      ColumnMajorMatrixIterator columnMajorMatrixIterator0 = cRSMatrix1.columnMajorIterator();
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(7, cRSMatrix0.rows());
      assertEquals(7, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(7, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(7, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertNotNull(columnMajorMatrixIterator0);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)ooPlaceMatrixByItsTransposeMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0);
      assertTrue(cRSMatrix0.equals((Object)cRSMatrix1));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix2.equals((Object)cRSMatrix1));
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(7, cRSMatrix0.rows());
      assertEquals(7, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix2.max(), 0.01);
      assertEquals(0, cRSMatrix2.cardinality());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(7, cRSMatrix2.rows());
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(7, cRSMatrix2.columns());
      assertEquals(0.0, cRSMatrix2.density(), 0.01);
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix0);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.insert((Matrix) cRSMatrix1, 7, 7, (-1903), 7, (-1903), (-3720));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot have negative rows or columns: -1903x-3720
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1576);
      assertEquals(1576, cRSMatrix0.rows());
      assertEquals(6.345177664974619E-4, cRSMatrix0.density(), 0.01);
      assertEquals(1576, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1576, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(1576, 16);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(1576, cRSMatrix0.rows());
      assertEquals(6.345177664974619E-4, cRSMatrix0.density(), 0.01);
      assertEquals(1576, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1576, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(1576, cRSMatrix1.rows());
      assertEquals(6.345177664974619E-4, cRSMatrix1.density(), 0.01);
      assertEquals(16, cRSMatrix1.columns());
      assertEquals(16, cRSMatrix1.cardinality());
      assertEquals(1.0, cRSMatrix1.max(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom(1492L);
      assertNotNull(mockRandom0);
      
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(1, mockRandom0);
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertNotNull(denseMatrix0);
      
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      assertNotNull(ooPlaceMatricesMultiplication0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.diagonal(0, 0);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertNotNull(columnMajorSparseMatrix0);
      
      CCSMatrix cCSMatrix0 = (CCSMatrix)ooPlaceMatricesMultiplication0.apply(denseMatrix0, columnMajorSparseMatrix0);
      assertFalse(cCSMatrix0.equals((Object)columnMajorSparseMatrix0));
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertNotNull(cCSMatrix0);
      assertNotSame(columnMajorSparseMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix0, columnMajorSparseMatrix0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(641, (-1401.8933705606));
      assertEquals(641, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(641, cRSMatrix0.cardinality());
      assertEquals((-1401.8933705606), cRSMatrix0.min(), 0.01);
      assertEquals(641, cRSMatrix0.columns());
      assertEquals(0.0015600624024961, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[6];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 641;
      intArray1[1] = 641;
      intArray1[2] = 641;
      intArray1[3] = (-2090);
      intArray1[4] = 641;
      intArray1[5] = 641;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 371.76;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 371.76;
      doubleArray2[1] = 371.76;
      doubleArray2[2] = 371.76;
      doubleArray2[3] = 371.76;
      doubleArray2[4] = 371.76;
      doubleArray2[5] = (-52.0);
      doubleArray2[6] = 371.76;
      doubleArray2[7] = (-2361.5016387275);
      doubleArray2[8] = 371.76;
      doubleArray0[1] = doubleArray1;
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = (-2361.5016387275);
      doubleArray0[2] = doubleArray3;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals((-2361.5016387275), cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(371.76, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      Matrix matrix0 = cRSMatrix0.add(371.76);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, cRSMatrix0.rows());
      assertEquals((-2361.5016387275), cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(371.76, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(3, cRSMatrix0.cardinality());
      assertEquals(1, matrix0.columns());
      assertEquals(3, matrix0.rows());
      assertNotNull(matrix0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, matrix0, cRSMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, Double.NEGATIVE_INFINITY, (Random) mockRandom0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = (-3792.9555);
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = Double.NEGATIVE_INFINITY;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = Double.NEGATIVE_INFINITY;
      doubleArray2[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (-3792.9555);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = Double.NEGATIVE_INFINITY;
      doubleArray4[1] = Double.NEGATIVE_INFINITY;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (-3792.9555);
      doubleArray4[4] = (-3792.9555);
      doubleArray4[5] = (double) 0;
      doubleArray4[6] = Double.NEGATIVE_INFINITY;
      doubleArray4[7] = (double) 0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      
      doubleArray5[0] = Double.NEGATIVE_INFINITY;
      doubleArray5[1] = Double.NEGATIVE_INFINITY;
      doubleArray5[2] = Double.NEGATIVE_INFINITY;
      doubleArray5[3] = (-3792.9555);
      doubleArray5[4] = (-3792.9555);
      doubleArray5[5] = Double.NEGATIVE_INFINITY;
      doubleArray5[6] = (double) 0;
      doubleArray5[7] = (-2073.6492653294895);
      doubleArray5[8] = (-3792.9555);
      doubleArray0[4] = doubleArray5;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertNotNull(cRSMatrix0);
      
      cRSMatrix0.setAll(0.0);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      DoubleStream doubleStream0 = mockRandom0.doubles((long) 1991);
      assertNotNull(doubleStream0);
      
      // Undeclared exception!
      Matrix.randomSymmetric(1991, mockRandom0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 3130;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 3130, 2132);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertEquals(3130, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      int int1 = 6;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(6);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertEquals(6, rowMajorSparseMatrix0.cardinality());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(6, rowMajorSparseMatrix0.rows());
      assertEquals(0.16666666666666666, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals(6, rowMajorSparseMatrix0.columns());
      assertEquals(1.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, rowMajorSparseMatrix0.min(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      
      // Undeclared exception!
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(956);
      assertEquals(0.0010460251046025104, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(956, cRSMatrix0.rows());
      assertEquals(956, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(956, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric(956, 1.0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 6;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(6, 6);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(6, cRSMatrix0.columns());
      assertEquals(6.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals(0.16666666666666666, cRSMatrix0.density(), 0.01);
      assertEquals(6, cRSMatrix0.rows());
      assertNotNull(cRSMatrix0);
      
      OoPlaceMatrixByVectorMultiplication ooPlaceMatrixByVectorMultiplication0 = new OoPlaceMatrixByVectorMultiplication();
      assertNotNull(ooPlaceMatrixByVectorMultiplication0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 6;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {8.0, 8.0, 6.0, 6.0}, doubleArray0, 0.01);
      assertEquals(4, sparseVector0.cardinality());
      assertEquals(4, sparseVector0.length());
      assertEquals(1.0, sparseVector0.density(), 0.01);
      assertNotNull(sparseVector0);
      
      CompressedVector compressedVector0 = (CompressedVector)ooPlaceMatrixByVectorMultiplication0.apply((RowMajorSparseMatrix) cRSMatrix0, sparseVector0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {8.0, 8.0, 6.0, 6.0}, doubleArray0, 0.01);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(6, cRSMatrix0.columns());
      assertEquals(6.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(6, cRSMatrix0.cardinality());
      assertEquals(0.16666666666666666, cRSMatrix0.density(), 0.01);
      assertEquals(6, cRSMatrix0.rows());
      assertEquals(4, sparseVector0.cardinality());
      assertEquals(4, sparseVector0.length());
      assertEquals(1.0, sparseVector0.density(), 0.01);
      assertEquals(0.6666666666666666, compressedVector0.density(), 0.01);
      assertEquals(6, compressedVector0.length());
      assertEquals(4, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      assertNotSame(sparseVector0, compressedVector0);
      assertNotSame(compressedVector0, sparseVector0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.setRow(8, (Vector) compressedVector0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.5, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      assertNotNull(cRSMatrix0);
      
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = cRSMatrix0.foldNonZeroInRows(vectorAccumulator0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.5, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      assertNotNull(doubleArray0);
      
      double double0 = cRSMatrix0.max();
      assertEquals(1.0, double0, 0.01);
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.5, cRSMatrix0.density(), 0.01);
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(2, cRSMatrix0.cardinality());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)17;
      byte byte0 = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-20);
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte)49;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[][] doubleArray0 = new double[4][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2345.79769575;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      
      doubleArray2[0] = 1737.7681;
      doubleArray2[1] = 2345.79769575;
      doubleArray2[2] = 2345.79769575;
      doubleArray2[3] = 2345.79769575;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      
      doubleArray3[0] = 2345.79769575;
      doubleArray3[1] = 1737.7681;
      doubleArray3[2] = 1737.7681;
      doubleArray3[3] = 1737.7681;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      
      doubleArray4[0] = 1737.7681;
      doubleArray4[1] = 1737.7681;
      doubleArray4[2] = 1737.7681;
      doubleArray4[3] = 1737.7681;
      doubleArray4[4] = 1737.7681;
      doubleArray4[5] = 1737.7681;
      doubleArray4[6] = 1737.7681;
      doubleArray4[7] = 2345.79769575;
      doubleArray0[3] = doubleArray4;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertEquals(2345.79769575, cRSMatrix0.max(), 0.01);
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(4, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.max();
      assertEquals(2345.79769575, double0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals(2345.79769575, cRSMatrix0.max(), 0.01);
      assertEquals(4, cRSMatrix0.cardinality());
      assertEquals(1, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(4, cRSMatrix0.rows());
      assertTrue(cRSMatrix0.isRowMajor());
      
      int int0 = (-912);
      // Undeclared exception!
      try { 
        cRSMatrix0.insertRow((-912), (Vector) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..3
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 2764;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2764, 2764);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2764, cRSMatrix0.rows());
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(2764, cRSMatrix0.columns());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        cRSMatrix0.foldNonZeroInRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.SparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 1585;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1585;
      doubleArray0[1] = (double) 1585;
      doubleArray0[4] = (double) 1585;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(1585, 1585, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertNotNull(sparseVector0);
      
      SparseVector sparseVector1 = sparseVector0.toSparseVector();
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector1.length());
      assertEquals(0, sparseVector1.cardinality());
      assertEquals(Double.NaN, sparseVector1.density(), 0.01);
      assertNotNull(sparseVector1);
      assertSame(sparseVector0, sparseVector1);
      assertSame(sparseVector1, sparseVector0);
      
      CRSMatrix cRSMatrix0 = (CRSMatrix)sparseVector0.toRowMatrix();
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      assertSame(sparseVector0, sparseVector1);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0, sparseVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, cRSMatrix0.columns());
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(1, cRSMatrix0.rows());
      assertEquals(Double.NaN, cRSMatrix0.density(), 0.01);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(Double.NaN, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(2, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertNotNull(cRSMatrix1);
      assertSame(sparseVector0, sparseVector1);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      int int0 = 3196;
      // Undeclared exception!
      try { 
        cRSMatrix1.set((-3703), 3196, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-3703' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 2228;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2228);
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(2228, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2228, cRSMatrix0.rows());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(2228, cRSMatrix0.columns());
      assertEquals(4.488330341113106E-4, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      MatrixOperation<Object> matrixOperation0 = (MatrixOperation<Object>) mock(MatrixOperation.class, new ViolatedAssumptionAnswer());
      int int1 = 2;
      // Undeclared exception!
      try { 
        cRSMatrix0.updateRow(2, (VectorFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1753);
      assertEquals(1753, cRSMatrix0.cardinality());
      assertEquals(1753, cRSMatrix0.columns());
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1753, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(5.704506560182544E-4, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      cRSMatrix0.removeLastColumn();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1355;
      doubleArray0[1] = (-3792.9555);
      doubleArray0[2] = (double) 1355;
      doubleArray0[3] = (double) 1355;
      doubleArray0[4] = (double) 1355;
      doubleArray0[5] = (double) 1355;
      doubleArray0[6] = (double) 1355;
      doubleArray0[7] = (double) 1355;
      int[] intArray0 = new int[0];
      CRSMatrix cRSMatrix0 = new CRSMatrix(1355, 1355, 1355, doubleArray0, intArray0, intArray0);
      assertEquals(8, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new double[] {1355.0, (-3792.9555), 1355.0, 1355.0, 1355.0, 1355.0, 1355.0, 1355.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1355, cRSMatrix0.cardinality());
      assertEquals(1355, cRSMatrix0.rows());
      assertEquals(1355, cRSMatrix0.columns());
      assertEquals(7.380073800738007E-4, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.min();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1679, 16);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(16, cRSMatrix0.columns());
      assertEquals(1679, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      double double0 = cRSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(16, cRSMatrix0.columns());
      assertEquals(1679, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[][] doubleArray0 = new double[1][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1786.0908588182);
      doubleArray1[1] = 947.52055503;
      doubleArray1[2] = (-370.0);
      doubleArray1[3] = (-1392.7261113);
      doubleArray1[4] = 2361.06069216607;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(2361.06069216607, cRSMatrix0.max(), 0.01);
      assertEquals(5, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals((-1786.0908588182), cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)cRSMatrix0.getColumn((-1));
      assertEquals(1, doubleArray0.length);
      assertEquals(2361.06069216607, cRSMatrix0.max(), 0.01);
      assertEquals(5, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(5, cRSMatrix0.columns());
      assertEquals(1, cRSMatrix0.rows());
      assertEquals((-1786.0908588182), cRSMatrix0.min(), 0.01);
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)32;
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte) (-101);
      byte byte1 = (byte)13;
      byteArray0[2] = (byte)13;
      byte byte2 = (byte) (-122);
      byteArray0[3] = (byte) (-122);
      byte byte3 = (byte)121;
      byteArray0[4] = (byte)121;
      byte byte4 = (byte) (-62);
      byteArray0[5] = (byte) (-62);
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1741);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1741, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(5.743825387708214E-4, cRSMatrix0.density(), 0.01);
      assertEquals(1741, cRSMatrix0.columns());
      assertEquals(1741, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(cRSMatrix0);
      
      VectorIterator vectorIterator0 = cRSMatrix0.nonZeroIteratorOfColumn(2393);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1741, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(5.743825387708214E-4, cRSMatrix0.density(), 0.01);
      assertEquals(1741, cRSMatrix0.columns());
      assertEquals(1741, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertNotNull(vectorIterator0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(951, vectorProcedure0);
      assertEquals(1.0, cRSMatrix0.max(), 0.01);
      assertEquals(1741, cRSMatrix0.rows());
      assertEquals(5.743825387708214E-4, cRSMatrix0.density(), 0.01);
      assertEquals(1741, cRSMatrix0.columns());
      assertEquals(1741, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (-1723.6);
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = (-1111);
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 2;
      CRSMatrix cRSMatrix0 = new CRSMatrix(2, 2, 2, doubleArray0, intArray0, intArray0);
      assertEquals(9, doubleArray0.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, (-1723.6)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {2, 2, (-1111), 2, 2, 2}, intArray0);
      assertEquals(2.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.5, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(2, cRSMatrix0.cardinality());
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      double[][] doubleArray1 = new double[5][7];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.from2DArray(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertFalse(rowMajorSparseMatrix0.equals((Object)cRSMatrix0));
      assertEquals(2.0, rowMajorSparseMatrix0.max(), 0.01);
      assertEquals(45, rowMajorSparseMatrix0.cardinality());
      assertEquals(5, rowMajorSparseMatrix0.rows());
      assertEquals(9, rowMajorSparseMatrix0.columns());
      assertTrue(rowMajorSparseMatrix0.isRowMajor());
      assertEquals(1.0, rowMajorSparseMatrix0.density(), 0.01);
      assertEquals((-1723.6), rowMajorSparseMatrix0.min(), 0.01);
      assertNotNull(rowMajorSparseMatrix0);
      assertNotSame(rowMajorSparseMatrix0, cRSMatrix0);
      
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.each(matrixProcedure0);
      assertEquals(9, doubleArray0.length);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new double[] {2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, (-1723.6)}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {2, 2, (-1111), 2, 2, 2}, intArray0);
      assertFalse(cRSMatrix0.equals((Object)rowMajorSparseMatrix0));
      assertEquals(2.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.5, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(2, cRSMatrix0.rows());
      assertEquals(2, cRSMatrix0.cardinality());
      assertEquals(2, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotSame(cRSMatrix0, rowMajorSparseMatrix0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)13;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(6519, 6519);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(6519, cRSMatrix0.rows());
      assertEquals(6519, cRSMatrix0.columns());
      assertEquals(6519.0, cRSMatrix0.max(), 0.01);
      assertEquals(6519, cRSMatrix0.cardinality());
      assertEquals(1.5339776039269826E-4, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 6519;
      intArray0[1] = 6519;
      intArray0[2] = 6519;
      intArray0[3] = 6519;
      intArray0[4] = 6519;
      intArray0[5] = 6519;
      intArray0[6] = 6519;
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 6519;
      intArray1[1] = 6519;
      intArray1[2] = 6519;
      intArray1[3] = 6519;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '6519' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 561);
      assertEquals(561, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      cRSMatrix0.setAll(23.7458114355);
      assertEquals(561, cRSMatrix0.columns());
      assertEquals(2244, cRSMatrix0.cardinality());
      assertEquals(23.7458114355, cRSMatrix0.max(), 0.01);
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.diagonal(561, 4);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(4.0, cRSMatrix1.max(), 0.01);
      assertEquals(561, cRSMatrix1.rows());
      assertEquals(561, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(0.0017825311942959, cRSMatrix1.density(), 0.01);
      assertEquals(561, cRSMatrix1.columns());
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      CRSMatrix cRSMatrix2 = (CRSMatrix)cRSMatrix0.copyOfShape(4, 561);
      assertFalse(cRSMatrix0.equals((Object)cRSMatrix1));
      assertFalse(cRSMatrix2.equals((Object)cRSMatrix1));
      assertEquals(561, cRSMatrix0.columns());
      assertEquals(2244, cRSMatrix0.cardinality());
      assertEquals(23.7458114355, cRSMatrix0.max(), 0.01);
      assertEquals(4, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(1.0, cRSMatrix0.density(), 0.01);
      assertEquals(1.0, cRSMatrix2.density(), 0.01);
      assertEquals(561, cRSMatrix2.columns());
      assertEquals(2244, cRSMatrix2.cardinality());
      assertEquals(23.7458114355, cRSMatrix2.max(), 0.01);
      assertTrue(cRSMatrix2.isRowMajor());
      assertEquals(0.0, cRSMatrix2.min(), 0.01);
      assertEquals(4, cRSMatrix2.rows());
      assertNotNull(cRSMatrix2);
      assertNotSame(cRSMatrix0, cRSMatrix1);
      assertNotSame(cRSMatrix0, cRSMatrix2);
      assertNotSame(cRSMatrix2, cRSMatrix1);
      assertNotSame(cRSMatrix2, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 1958;
      int int1 = 999;
      CRSMatrix cRSMatrix0 = new CRSMatrix(1958, 999);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(999, cRSMatrix0.columns());
      assertEquals(1958, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(cRSMatrix0);
      
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.QR;
      MatrixDecompositor matrixDecompositor0 = cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(999, cRSMatrix0.columns());
      assertEquals(1958, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertNotNull(matrixDecompositor0);
      
      int int2 = 982;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double double0 = cRSMatrix0.foldNonZeroInColumn(982, vectorAccumulator0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0, cRSMatrix0.cardinality());
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertEquals(999, cRSMatrix0.columns());
      assertEquals(1958, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(999, 1958, 2);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(1958, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(999, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      Matrix matrix0 = cRSMatrix1.subtract((double) 1958);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(1958, cRSMatrix1.columns());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertEquals(999, cRSMatrix1.rows());
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertEquals(1958, matrix0.columns());
      assertEquals(999, matrix0.rows());
      assertNotNull(matrix0);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix0.foldRows((VectorAccumulator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Vectors$24", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(3005, 3005);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(3005, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3005, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(cRSMatrix0);
      
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      MatrixDecompositor matrixDecompositor0 = cRSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(3005, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3005, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(matrixDecompositor0);
      
      boolean boolean0 = cRSMatrix0.nonZeroAt(2096, 3005);
      assertFalse(boolean0);
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(3005, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3005, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.nonZeroRowMajorIterator();
      assertEquals(0, cRSMatrix0.cardinality());
      assertEquals(3005, cRSMatrix0.rows());
      assertEquals(0.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.0, cRSMatrix0.density(), 0.01);
      assertTrue(cRSMatrix0.isRowMajor());
      assertEquals(3005, cRSMatrix0.columns());
      assertEquals(0.0, cRSMatrix0.min(), 0.01);
      assertNotNull(rowMajorMatrixIterator0);
      
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(3005, 1920);
      assertFalse(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
      assertTrue(cRSMatrix1.isRowMajor());
      assertEquals(0.0, cRSMatrix1.max(), 0.01);
      assertEquals(3005, cRSMatrix1.rows());
      assertEquals(0, cRSMatrix1.cardinality());
      assertEquals(1920, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
      assertNotNull(cRSMatrix1);
      assertNotSame(cRSMatrix1, cRSMatrix0);
      
      // Undeclared exception!
      try { 
        cRSMatrix1.copyOfShape((-2193), (-2193));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2193x-2193
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(130, 130);
      // Undeclared exception!
      cRSMatrix0.shuffle();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(4, 4);
      cRSMatrix0.rank();
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 4;
      doubleArray2[1] = 2.0;
      doubleArray2[2] = 689.073107;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 4;
      doubleArray3[2] = 2.0;
      doubleArray3[3] = (double) 4;
      doubleArray3[4] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 689.073107;
      doubleArray4[1] = 689.073107;
      doubleArray4[2] = 2.0;
      doubleArray4[3] = 2.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = (double) 0;
      doubleArray5[1] = (double) 0;
      doubleArray5[2] = (double) 4;
      doubleArray5[3] = (double) 4;
      doubleArray5[4] = (double) 0;
      doubleArray5[5] = 2.0;
      doubleArray5[6] = 689.073107;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = 2.0;
      doubleArray6[1] = (double) 0;
      doubleArray6[2] = 2.0;
      doubleArray6[3] = (double) 4;
      doubleArray6[4] = 689.073107;
      doubleArray6[5] = 2.0;
      doubleArray6[6] = 2.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = (double) 0;
      doubleArray7[1] = (double) 0;
      doubleArray7[2] = (double) 4;
      doubleArray7[3] = 2.0;
      doubleArray0[6] = doubleArray7;
      CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.nonZeroIteratorOfRow(4);
      RowMajorMatrixIterator rowMajorMatrixIterator0 = cRSMatrix0.rowMajorIterator();
      assertNotNull(rowMajorMatrixIterator0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(9);
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric((SparseMatrix) cRSMatrix0, (SparseMatrix) cRSMatrix0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, matrix0, matrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte) (-78);
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(3140, 3140, 3140);
      cRSMatrix0.iteratorOfNonZeroRows();
      SparseVector sparseVector0 = SparseVector.zero(3140);
      Matrix matrix0 = sparseVector0.toColumnMatrix();
      matrix0.toColumnVector();
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, matrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(2);
      // Undeclared exception!
      try { 
        CRSMatrix.random(2, 270, (double) 270, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double double0 = (-966.0);
      cRSMatrix0.setAll((-966.0));
      int int0 = 2147072106;
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape((-2005), 2147072106);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2005x2147072106
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = (-325);
      int int1 = 940;
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-325), 940, (-325));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -325x940
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(4563);
      cRSMatrix0.toSparseMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 2764;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2764, 2764);
      // Undeclared exception!
      cRSMatrix0.rank();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = 3.0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (-370.3);
      doubleArray0[7] = (double) 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(1, 1, doubleArray0);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(1, 1);
      assertEquals(1.0, cRSMatrix1.density(), 0.01);
      assertTrue(cRSMatrix1.equals((Object)cRSMatrix0));
      assertEquals(0.0, cRSMatrix1.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(9);
      double[][] doubleArray0 = new double[9][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 9;
      doubleArray1[1] = (double) 9;
      doubleArray1[2] = (double) 9;
      doubleArray1[3] = (double) 9;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 9;
      doubleArray2[1] = (double) 9;
      doubleArray2[2] = (double) 9;
      doubleArray2[3] = (double) 9;
      doubleArray2[4] = (double) 9;
      doubleArray2[5] = (double) 9;
      doubleArray2[6] = (double) 9;
      doubleArray2[7] = (-159.0);
      doubleArray2[8] = (double) 9;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-159.0);
      doubleArray3[1] = (-159.0);
      doubleArray0[2] = doubleArray1;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) 9;
      doubleArray4[1] = (-159.0);
      doubleArray4[2] = (-159.0);
      doubleArray4[3] = (double) 9;
      doubleArray4[4] = (-159.0);
      doubleArray4[5] = (-159.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (double) 9;
      doubleArray5[1] = (-159.0);
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (-159.0);
      doubleArray6[1] = (double) 9;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (-1.0);
      doubleArray6[4] = (double) 9;
      doubleArray6[5] = (-159.0);
      doubleArray6[6] = (-159.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = (-159.0);
      doubleArray7[1] = (double) 9;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = (-159.0);
      doubleArray7[4] = Double.NEGATIVE_INFINITY;
      doubleArray7[5] = 2221.71636;
      doubleArray7[6] = (-159.0);
      doubleArray7[7] = 0.0;
      doubleArray0[6] = doubleArray7;
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals((-159.0), cRSMatrix1.min(), 0.01);
      assertEquals(0.6111111111111112, cRSMatrix1.density(), 0.01);
      
      double double0 = cRSMatrix0.euclideanNorm();
      assertEquals(3.0, double0, 0.01);
      
      byte[] byteArray0 = cRSMatrix0.toBinary();
      assertEquals(161, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[][] doubleArray0 = new double[6][4];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-2140.9);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-4233.841921);
      doubleArray2[1] = (-2140.9);
      doubleArray2[2] = 2221.71636;
      doubleArray2[3] = (-2140.9);
      doubleArray2[4] = (-579.2853369);
      doubleArray2[5] = (-2140.9);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 2080.231165133743;
      doubleArray3[1] = (-2140.9);
      doubleArray3[2] = (-1177.59397);
      doubleArray3[3] = (-4233.841921);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (-2140.9);
      doubleArray4[1] = (-1177.59397);
      doubleArray4[2] = (-4233.841921);
      doubleArray4[3] = 522.9492210556;
      doubleArray4[4] = (-2140.9);
      doubleArray4[5] = (-1177.59397);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (-4233.841921);
      doubleArray5[1] = 522.9492210556;
      doubleArray5[2] = 2221.71636;
      doubleArray5[3] = (-579.2853369);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = (-234.044);
      doubleArray6[1] = (-579.2853369);
      doubleArray6[2] = (-4233.841921);
      doubleArray0[5] = doubleArray6;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow(1228);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1228
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 1601;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1601);
      cRSMatrix0.toRowVector();
      cRSMatrix0.getColumn(1601);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1601;
      doubleArray0[1] = (double) 1601;
      doubleArray0[2] = (double) 1601;
      doubleArray0[3] = (double) 1601;
      doubleArray0[4] = (double) 1601;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(1601, 1601, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CRSMatrix.identity(9);
      double[][] doubleArray0 = new double[7][8];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 9;
      doubleArray1[1] = (double) 9;
      doubleArray1[2] = (double) 9;
      doubleArray1[3] = (double) 9;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 9;
      doubleArray2[1] = (double) 9;
      doubleArray2[2] = (double) 9;
      doubleArray2[3] = (double) 9;
      doubleArray2[4] = (double) 9;
      doubleArray2[5] = (double) 9;
      doubleArray2[6] = (double) 9;
      doubleArray2[7] = (-159.0);
      doubleArray2[8] = (double) 9;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-159.0);
      doubleArray3[1] = (-159.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) 9;
      doubleArray4[1] = (-159.0);
      doubleArray4[2] = (-159.0);
      doubleArray4[3] = (double) 9;
      doubleArray4[4] = (-159.0);
      doubleArray4[5] = (-159.0);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (double) 9;
      doubleArray5[1] = (-159.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = (-159.0);
      doubleArray6[1] = (double) 9;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (-1.0);
      doubleArray6[4] = (double) 9;
      doubleArray6[5] = (-159.0);
      doubleArray6[6] = (-159.0);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = (-159.0);
      doubleArray7[1] = (double) 9;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = (-159.0);
      doubleArray7[4] = Double.NEGATIVE_INFINITY;
      doubleArray7[5] = 2221.71636;
      doubleArray7[6] = (-159.0);
      doubleArray7[7] = 0.0;
      doubleArray0[6] = doubleArray7;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) 1536;
      doubleArray0[3] = (double) 1536;
      doubleArray0[4] = (double) 1536;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1536;
      int[] intArray0 = new int[7];
      intArray0[0] = 1536;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = 1536;
      intArray0[4] = Integer.MAX_VALUE;
      intArray0[5] = 0;
      intArray0[6] = 0;
      CRSMatrix cRSMatrix0 = null;
      try {
        cRSMatrix0 = new CRSMatrix(Integer.MAX_VALUE, 0, 1536, doubleArray0, intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: use 'Integer.MAX_VALUE - 1' instead.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double[][] doubleArray0 = new double[5][6];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-626.1724);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1492.2612576;
      doubleArray1[4] = 2221.71636;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 568.72;
      doubleArray1[8] = 1423.89781882;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (-1542.266399);
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-626.1724);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = 2221.71636;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = (-1443.7653243558384);
      doubleArray5[5] = 1423.89781882;
      doubleArray5[6] = 1492.2612576;
      doubleArray0[4] = doubleArray5;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(564, 0);
      Locale locale0 = new Locale("Y&# ce", "Sides of blocks are incompatible!", "Sides of blocks are incompatible!");
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      cRSMatrix0.mkString(numberFormat0, "Sides of blocks are incompatible!", "");
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.is(matrixPredicate0);
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(3841);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3841
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(2, (-159), (double) (-159), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-1007));
      // Undeclared exception!
      try { 
        CRSMatrix.random((-1007), (-1007), (double) (-1007), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 1606;
      int int1 = 1;
      MockRandom mockRandom0 = new MockRandom(1606);
      mockRandom0.nextInt(1606);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1606, 1, (double) 1, (Random) mockRandom0);
      mockRandom0.nextLong();
      MatrixAccumulator matrixAccumulator0 = mock(MatrixAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixAccumulator0).accumulate();
      cRSMatrix0.infinityNorm();
      cRSMatrix0.foldNonZero(matrixAccumulator0);
      mockRandom0.ints();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1617;
      doubleArray0[1] = (double) 10;
      doubleArray0[2] = 0.9;
      doubleArray0[3] = (double) 32;
      doubleArray0[4] = (double) 1617;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 0;
      Matrix.from1DArray(10, 1617, doubleArray0);
      cRSMatrix0.toString();
      cRSMatrix0.minInRow(32);
      // Undeclared exception!
      cRSMatrix0.divide(1.0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(2860);
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      CRSMatrix cRSMatrix1 = CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix1.setColumn(2860, (-2580.6976));
      cRSMatrix0.max();
      // Undeclared exception!
      try { 
        cRSMatrix1.nonZeroAt(2860, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(matrixPredicate0).test(anyInt() , anyInt());
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = locale0.stripExtensions();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.pollFirst();
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      Locale.lookupTag(linkedList0, set0);
      locale0.getDisplayCountry(locale1);
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale1);
      int int0 = 16;
      Locale.setDefault(locale0);
      numberFormat0.setMaximumFractionDigits(16);
      cRSMatrix0.toMatrixMarket(numberFormat0);
      cRSMatrix0.is(matrixPredicate0);
      SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix0.toBinary();
      cRSMatrix0.rowMajorIterator();
      // Undeclared exception!
      try { 
        cRSMatrix0.maxInRow(668);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 668
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(32, 32);
      cRSMatrix0.rowMajorIterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.forEach(consumer0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      MatrixProcedure matrixProcedure1 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure1);
      assertEquals(32.0, cRSMatrix0.max(), 0.01);
      assertEquals(0.03125, cRSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = (-781);
      int int1 = 2732;
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-781), 2732);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -781x2732
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      int int0 = 2524;
      // Undeclared exception!
      try { 
        cRSMatrix0.iteratorOfRow(2524);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2524
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      cRSMatrix0.toMatrixMarket(numberFormat0);
      MatrixFactory<CRSMatrix> matrixFactory0 = (MatrixFactory<CRSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cRSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.RowMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("k(p4B4wHKM");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 294.1391495474;
      doubleArray1[2] = 1702.1046104228353;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1702.1046104228353;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 294.1391495474;
      doubleArray3[1] = 294.1391495474;
      doubleArray3[2] = 1702.1046104228353;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 294.1391495474;
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }
}
