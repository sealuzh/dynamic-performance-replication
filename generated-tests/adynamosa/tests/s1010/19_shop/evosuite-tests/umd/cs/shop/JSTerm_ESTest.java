/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 22 13:48:13 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("H");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.removeAllElements();
      jSTerm1.toString();
      jSTerm1.addElement("[]");
      jSTerm0.addElement(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm0.removeAllElements();
      jSTerm1.addElement(jSTerm0);
      jSTerm1.isFunction();
      SystemInUtil.addInputLine("[lh9yx]");
      jSTerm1.equals(jSTerm2);
      SystemInUtil.addInputLine("kw");
      JSTerm jSTerm3 = new JSTerm();
      StringReader stringReader0 = new StringReader("xuC<3m$1=&n)3jt");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm4 = jSTerm1.parseList(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm6 = new JSTerm(streamTokenizer1);
      jSTerm4.print();
      UnaryOperator.identity();
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("LnCl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm0.isEval());
      
      jSTerm0.makeEval(true);
      jSTerm0.isEval();
      jSTerm0.call();
      assertTrue(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("0_(*)");
      StringReader stringReader0 = new StringReader("0_(*)");
      SystemInUtil.addInputLine("0_(*)");
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("? ");
      jSTerm0.add((Object) streamTokenizer0);
      jSTerm0.toStr();
      jSTerm0.print();
      SystemInUtil.addInputLine("Q$-c|6A");
      jSTerm0.isFunction();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      jSSubstitution0.standarizerSubs();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis((-403L));
      jSTerm1.call();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      StringReader stringReader0 = new StringReader("0J(<b-");
      SystemInUtil.addInputLine("0J(<b-");
      char[] charArray0 = new char[2];
      charArray0[1] = 'I';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) streamTokenizer0);
      jSTerm0.toStr();
      jSTerm0.print();
      StringReader stringReader1 = new StringReader("? ");
      stringReader1.read(charArray0);
      JSJshopVars.percent = (-1109);
      stringReader1.markSupported();
      SystemInUtil.addInputLine("ww");
      SystemInUtil.addInputLine("%%%");
      SystemInUtil.addInputLine("[]");
      StringReader stringReader2 = new StringReader("[]");
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.toStr();
      jSTerm0.matches(jSTerm1);
      System.setCurrentTimeMillis(2033L);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      StringReader stringReader0 = new StringReader("0_(<*-");
      SystemInUtil.addInputLine("0_(<*-");
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) streamTokenizer0);
      jSTerm0.toStr();
      jSTerm0.print();
      SystemInUtil.addInputLine("#xqU/iiw[)u40hE`DF");
      StringReader stringReader1 = new StringReader("? ");
      stringReader1.markSupported();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("=");
      StringReader stringReader0 = new StringReader("9YX");
      char[] charArray0 = new char[1];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.resetSyntax();
      jSTerm0.isFunction();
      jSTerm0.addElement("9YX");
      SystemInUtil.addInputLine((String) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      stringReader0.skip((-1L));
      jSTerm1.removeAllElements();
      jSTerm0.toString();
      jSTerm1.addElement("[9YX]");
      SystemInUtil.addInputLine("list");
      jSTerm0.isFunction();
      jSTerm0.equals(jSTerm1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.matches(jSTerm0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.call();
      jSTerm3.matches(jSTerm2, jSSubstitution1);
      boolean boolean0 = jSTerm2.equals(jSTerm0);
      assertEquals("[9YX]", jSTerm0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("= ");
      StringReader stringReader0 = new StringReader("9YX");
      char[] charArray0 = new char[1];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.resetSyntax();
      jSTerm0.isFunction();
      jSTerm0.addElement("9YX");
      SystemInUtil.addInputLine((String) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      stringReader0.skip((-1L));
      jSTerm1.removeAllElements();
      jSTerm0.toString();
      jSTerm1.addElement("[9YX]");
      jSTerm0.isFunction();
      jSTerm0.equals(jSTerm1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm1.cloneT();
      jSTerm0.matches(jSTerm1);
      jSTerm0.call();
      assertEquals("[9YX]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_}(By\"#-");
      char[] charArray0 = new char[2];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.astherisk = 2;
      SystemInUtil.addInputLine("1UN");
      jSTerm0.addElement("_}(By\"#-");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.equals(jSTerm1);
      jSTerm0.removeAllElements();
      jSTerm1.makeEval(true);
      jSTerm0.isGround();
      streamTokenizer1.resetSyntax();
      Integer integer0 = new Integer((-4));
      streamTokenizer0.wordChars((-4), (-4));
      stringReader0.read(charArray0);
      jSTerm0.iterator();
      StringReader stringReader1 = new StringReader("s<IRH.M1~");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm3.stream();
      jSTerm3.matches(jSTerm2, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_}(By\"#-");
      char[] charArray0 = new char[2];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.astherisk = 2;
      jSTerm0.addElement("_}(By\"#-");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.equals(jSTerm1);
      jSTerm0.removeAllElements();
      jSTerm1.makeEval(true);
      jSTerm0.isGround();
      streamTokenizer1.resetSyntax();
      Integer integer0 = new Integer((-4));
      streamTokenizer0.wordChars((-4), (-4));
      stringReader0.read(charArray0);
      jSTerm0.iterator();
      StringReader stringReader1 = new StringReader("s<IRH.M1~");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.print();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm2.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_}(By\"#-");
      char[] charArray0 = new char[2];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.astherisk = 2;
      jSTerm0.addElement("_}(By\"#-");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.equals(jSTerm1);
      jSTerm0.removeAllElements();
      jSTerm1.makeEval(true);
      jSTerm0.isGround();
      streamTokenizer1.resetSyntax();
      Integer integer0 = new Integer((-4));
      streamTokenizer0.wordChars((-4), (-4));
      stringReader0.read(charArray0);
      jSTerm0.iterator();
      StringReader stringReader1 = new StringReader("s<IRH.M1~");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.matches(jSTerm2, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_}(By\"#-");
      char[] charArray0 = new char[2];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.pushBack();
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.astherisk = 2;
      jSTerm0.addElement("_}(By\"#-");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.equals(jSTerm1);
      jSTerm0.removeAllElements();
      jSTerm1.makeEval(true);
      jSTerm0.isGround();
      streamTokenizer1.resetSyntax();
      Integer integer0 = new Integer((-4));
      streamTokenizer0.wordChars((-4), (-4));
      jSTerm0.matches(jSTerm1);
      jSTerm1.cloneT();
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_}(*#-");
      char[] charArray0 = new char[2];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.ttype = 835;
      streamTokenizer0.resetSyntax();
      Integer integer0 = new Integer(835);
      streamTokenizer0.resetSyntax();
      SystemInUtil.addInputLine("\"iP~jYyI9");
      streamTokenizer0.nval = (double) 2;
      streamTokenizer0.wordChars(2100, 2);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "9.0";
      StringReader stringReader0 = new StringReader("9.0");
      char[] charArray0 = new char[1];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.resetSyntax();
      jSTerm0.isFunction();
      jSTerm0.addElement("9.0");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.removeAllElements();
      jSTerm1.addElement((Object) null);
      jSTerm0.isFunction();
      jSTerm0.equals(jSTerm1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("9&.ZL9");
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSJshopVars.plus = (-1007);
      jSTerm0.addElement(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      JSJshopVars.leftBrac = (-1007);
      jSTerm2.isVariable();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1162).when(comparator0).compare(any() , any());
      jSTerm3.sort(comparator0);
      jSTerm1.equals(jSTerm2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSEvaluate.numericValue(jSTerm3);
      jSTerm0.equals(jSTerm2);
      jSTerm3.applySubstitutionPF(jSSubstitution0);
      jSTerm3.isFunction();
      jSTerm3.isGround();
      JSTerm jSTerm4 = jSTerm2.call();
      jSTerm0.matches(jSTerm3, jSSubstitution0);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm4.makeConstant();
      jSTerm3.print();
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("9&.ZL9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm6 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm7 = new JSTerm();
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("9&.ZL9");
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.addElement(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm0.firstElement();
      jSSubstitution0.add((Object) "9&.ZL9");
      jSTerm1.removeAllElements();
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.trimToSize();
      jSTerm1.equals(jSTerm2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.clone();
      jSSubstitution0.add((Object) jSSubstitution2);
      jSTerm0.equals(jSTerm2);
      jSTerm3.applySubstitutionPF(jSSubstitution0);
      jSTerm3.isGround();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.parallelStream();
      jSTerm0.matches(jSTerm3, jSSubstitution1);
      jSTerm4.removeAllElements();
      jSTerm3.firstElement();
      Integer integer0 = new Integer(4253);
      jSTerm3.addElement(integer0);
      jSTerm0.isFunction();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm5.equals(jSTerm4);
      StringReader stringReader0 = new StringReader("9&.ZL9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.matches(jSTerm4);
      // Undeclared exception!
      try { 
        jSTerm3.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("9&.ZL9");
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSJshopVars.plus = (-1007);
      jSTerm0.addElement(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      JSJshopVars.leftBrac = (-1007);
      jSTerm1.removeAllElements();
      jSTerm0.equals(jSTerm3);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1162).when(comparator0).compare(any() , any());
      jSTerm3.sort(comparator0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.equals(jSTerm2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution2);
      JSEvaluate.numericValue(jSTerm3);
      jSTerm0.equals(jSTerm2);
      jSTerm3.applySubstitutionPF(jSSubstitution0);
      jSTerm3.isFunction();
      jSTerm3.isGround();
      jSTerm2.call();
      jSTerm0.matches(jSTerm3, jSSubstitution1);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm3.print();
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("9&.ZL9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      jSTerm3.matches(jSTerm1, jSSubstitution1);
      JSTerm jSTerm6 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm7 = new JSTerm(streamTokenizer1);
      assertFalse(jSTerm7.equals((Object)jSTerm6));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("9.0");
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isGround();
      streamTokenizer0.resetSyntax();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("9&.ZL9");
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSJshopVars.plus = (-1007);
      jSTerm0.addElement(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      JSJshopVars.leftBrac = 37;
      jSTerm1.removeAllElements();
      jSTerm0.equals(jSTerm3);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      JSEvaluate.numericValue(jSTerm3);
      jSTerm0.equals(jSTerm2);
      jSTerm3.isFunction();
      jSTerm3.isGround();
      jSTerm2.call();
      System.setCurrentTimeMillis(1L);
      StringReader stringReader0 = new StringReader("not");
      stringReader0.skip((-1L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm3.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Line ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm0.isEval());
      
      jSTerm0.makeEval(true);
      boolean boolean0 = jSTerm0.isEval();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%D9:v~Q");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("qLFvqG,4%M");
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSJshopVars.plus = (-1007);
      jSTerm0.addElement(jSTerm1);
      JSJshopVars.percent = (-1007);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm2.isFunction();
      jSTerm1.equals(jSTerm0);
      JSJshopVars.leftBrac = (-1007);
      jSTerm0.equals(jSTerm3);
      jSTerm2.parallelStream();
      jSTerm1.isGround();
      jSTerm1.equals(jSTerm2);
      jSTerm0.isGround();
      jSTerm2.call();
      StringReader stringReader0 = new StringReader("F]hw-itX~c<p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("qLFvqG,4%M");
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.addElement(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm2.isFunction();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm1.equals(jSTerm4);
      jSTerm4.parallelStream();
      jSTerm0.isGround();
      jSTerm0.isGround();
      jSTerm3.equals(jSTerm2);
      jSTerm4.isGround();
      jSTerm3.call();
      StringReader stringReader0 = new StringReader("]hw-itX'c<p");
      StringReader stringReader1 = new StringReader("]hw-itX'c<p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("qLFvqTG,4%M");
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.addElement(jSTerm1);
      jSTerm2.print();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm2.isFunction();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm1.equals(jSTerm4);
      jSTerm4.parallelStream();
      jSTerm0.isGround();
      jSTerm0.isEval();
      JSTerm jSTerm5 = jSTerm2.call();
      jSTerm1.clonePF();
      JSTerm jSTerm6 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm5.matches(jSTerm4, jSSubstitution0);
      JSTerm jSTerm7 = new JSTerm();
      jSTerm1.toStr();
      StringReader stringReader0 = new StringReader("qLFvqTG,4%M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader(",@W;\"d$fz97");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm3.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm4.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("qLFvqTG,4%M");
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.addElement(jSTerm1);
      jSTerm2.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.removeElement(unaryOperator0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.matches(jSTerm2, jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm4.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("qLFvqTG,4%M");
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.addElement(jSTerm1);
      jSTerm2.print();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm0.toStr();
      String string0 = "u0J@~4-l";
      StringReader stringReader0 = new StringReader("expecting");
      stringReader0.mark(173);
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm3.matches(jSTerm2, jSSubstitution0);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm1.call();
      StringReader stringReader1 = new StringReader("u0J@~4-l");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm6 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm7 = null;
      try {
        jSTerm7 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "qLFvqTG,4%M";
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("qLFvqTG,4%M");
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.addElement(jSTerm1);
      jSTerm2.print();
      jSTerm0.cloneT();
      jSTerm2.isFunction();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.equals(jSTerm3);
      jSTerm0.parallelStream();
      jSTerm0.isGround();
      jSTerm3.equals(jSTerm2);
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm3.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ?b?a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[4];
      streamTokenizer0.parseNumbers();
      stringReader0.read(charArray0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(5, stringBuffer0.length());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.sort((Comparator) null);
      streamTokenizer0.ordinaryChars((-1), 2747);
      stringReader0.reset();
      StringReader stringReader1 = new StringReader(" ?b?a");
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm1.call();
      assertTrue(jSTerm2.isVariable());
      
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer1);
      jSTerm3.print();
      UnaryOperator.identity();
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.equals(jSTerm3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm4 = jSSubstitution0.instance(jSTerm0);
      JSTerm jSTerm5 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm5.isFunction());
      assertFalse(jSTerm0.isFunction());
      assertNotSame(jSTerm1, jSTerm4);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~J)q=");
      stringReader0.read();
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) stringReader0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.matches(jSTerm1, jSSubstitution3);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = jSTerm0.call();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm(streamTokenizer1);
      jSTerm3.matches(jSTerm5, jSSubstitution3);
      JSTerm jSTerm6 = null;
      try {
        jSTerm6 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~J)q=");
      stringReader0.read();
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      streamTokenizer0.whitespaceChars(126, 1230);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0);
      assertTrue(jSSubstitution2.fail());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals("[nil]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ?b?a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[4];
      charArray0[1] = 'y';
      streamTokenizer0.parseNumbers();
      charArray0[3] = 'y';
      stringReader0.read(charArray0);
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.sort((Comparator) null);
      streamTokenizer0.ordinaryChars((-4075), (-4075));
      StringReader stringReader1 = new StringReader(" ?b?a");
      stringReader1.reset();
      stringReader0.ready();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm1.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(`vnY^uFVDd`uEc");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("qLFvqTG,4%M");
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.print();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm5 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm0.iterator();
      jSTerm2.equals(jSTerm4);
      jSTerm4.isEval();
      String string0 = "9Pt%9hz)J`+J";
      StringReader stringReader0 = new StringReader("9Pt%9hz)J`+J");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm6 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm7 = new JSTerm();
      jSTerm7.equals(jSTerm5);
      JSTerm jSTerm8 = new JSTerm();
      jSTerm3.applySubstitutionT(jSSubstitution1);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cal ");
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("cal ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      stringReader1.ready();
      streamTokenizer0.parseNumbers();
      jSTerm0.size();
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.ordinaryChars(1448, 1448);
      stringReader1.ready();
      UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      jSTerm2.iterator();
      jSTerm2.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ?b?a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = 'y';
      charArray0[2] = 'h';
      charArray0[3] = 'G';
      stringReader0.read(charArray0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(5, stringBuffer0.length());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.ordinaryChars(1405, 1405);
      stringReader0.ready();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.iterator();
      assertTrue(jSTerm2.isVariable());
      
      JSTerm jSTerm3 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm3);
      assertFalse(boolean0);
      
      boolean boolean1 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isEval());
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e~p)).}");
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.semicolon = (-3);
      jSTerm0.isGround();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.isEval();
      jSTerm2.parseList(streamTokenizer0);
      assertEquals(41, streamTokenizer0.ttype);
      
      jSTerm0.equals(jSTerm2);
      JSTerm jSTerm3 = jSTerm2.parseList(streamTokenizer0);
      assertFalse(jSTerm3.isFunction());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("qLFvqTG,4%M");
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("(qLFvqTG,4%M )", stringBuffer0.toString());
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm0.isVariable();
      JSTerm jSTerm3 = new JSTerm();
      boolean boolean0 = jSTerm0.isGround();
      boolean boolean1 = jSTerm0.equals(jSTerm2);
      assertNotSame(jSTerm2, jSTerm1);
      assertTrue(boolean1 == boolean0);
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm1.isFunction());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_}(B`");
      char[] charArray0 = new char[2];
      charArray0[0] = 'Q';
      charArray0[1] = '&';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("( ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(14);
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(14);
      jSTerm0.isEval();
      JSJshopVars.apostrophe = 40;
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ?b?a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("?%%% ", stringBuffer0.toString());
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      stringReader0.ready();
      jSTerm0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.iterator();
      jSTerm1.equals(jSTerm0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution1));
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isVariable());
      assertNotSame(jSTerm3, jSTerm1);
      assertFalse(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ?b?a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(5, stringBuffer0.length());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm1);
      jSSubstitution0.ensureCapacity(96);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      boolean boolean0 = jSTerm2.isGround();
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.matches(jSTerm2, jSSubstitution3);
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSSubstitution3.equals((Object)jSSubstitution0));
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ?b?a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) streamTokenizer0);
      JSJshopVars.leftBrac = (-1);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isVariable();
      System.setCurrentTimeMillis((-1));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call ");
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("call ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      stringReader1.ready();
      jSTerm0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.iterator();
      jSTerm0.equals(jSTerm1);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSSubstitution1.fail());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ?b?a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(5, stringBuffer0.length());
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply(" ?b?a");
      jSTerm0.replaceAll(unaryOperator0);
      assertFalse(jSTerm0.isConstant());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertFalse(jSSubstitution1.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ?b?a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("?%%% ", stringBuffer0.toString());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm1);
      jSSubstitution0.ensureCapacity((-1));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
      
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      assertEquals("[?%%%0]", jSTerm3.toString());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isVariable());
      
      JSTerm jSTerm4 = jSTerm0.cloneT();
      assertFalse(jSTerm0.isFunction());
      assertNotSame(jSTerm4, jSTerm1);
      assertFalse(jSTerm4.isFunction());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.addElement("");
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.lessT = 1457;
      JSTerm jSTerm2 = jSTerm0.call();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm2);
      predicate0.and(predicate0);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm3.matches(jSTerm0);
      jSSubstitution0.ensureCapacity((-4));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) jSTerm0);
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution3 = jSTerm4.matches(jSTerm2, jSSubstitution0);
      assertTrue(jSTerm2.isFunction());
      assertNotSame(jSSubstitution0, jSSubstitution3);
      assertTrue(jSSubstitution0.fail());
      assertTrue(jSSubstitution3.fail());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call ");
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("call ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      stringReader1.ready();
      jSTerm0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.iterator();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ?b?a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(5, stringBuffer0.length());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm1);
      jSSubstitution0.ensureCapacity((-1));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) streamTokenizer0);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSSubstitution3.fail());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("6a,!ZA}u<B$#|>SR-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.addElement("maqx");
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution1);
      assertFalse(jSSubstitution2.fail());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.addElement("");
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.print();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      JSTerm jSTerm2 = jSTerm0.call();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      assertTrue(jSTerm3.isFunction());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm3.isEval());
      assertTrue(jSSubstitution1.fail());
      assertNotSame(jSTerm3, jSTerm2);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(68);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("");
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("maqx");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution1);
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("6@p6D )8R-l0");
      jSTerm0.add((Object) "6@p6D )8R-l0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Object object0 = jSTerm0.clone();
      jSTerm0.addElement(object0);
      jSTerm0.print();
      jSTerm0.cloneT();
      assertEquals("[6@p6D )8R-l0, [6@p6D )8R-l0]]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.ensureCapacity((-327));
      jSTerm0.addElement(jSSubstitution0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(5, stringBuffer0.length());
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%~J)q.=");
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm();
      stringReader0.skip(1546L);
      jSTerm0.setSize(37);
      JSJshopVars.VarCounter = 37;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("n");
      jSTerm0.add((Object) "n");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.addElement("n");
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.addElement("");
      jSTerm0.print();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertTrue(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      jSSubstitution0.removeIf(predicate0);
      jSTerm0.addElement(jSSubstitution0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(5, stringBuffer0.length());
      
      StringReader stringReader0 = new StringReader("Error flag1 : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h{w=uB~>)^k}[W8+IT");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.isEval());
      
      JSTerm jSTerm2 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm2);
      assertFalse(boolean0);
      
      JSTerm jSTerm3 = jSTerm2.parseList(streamTokenizer0);
      assertFalse(jSTerm3.isVariable());
      assertEquals("[nil]", jSTerm3.toString());
      assertFalse(jSTerm3.isFunction());
      assertTrue(jSTerm3.isConstant());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.print();
      assertEquals("[[]]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%~J)q.=");
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(37);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("J;'k^6W!m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertFalse(boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%~J)q.=");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      jSTerm0.addElement(jSSubstitution0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(5, stringBuffer0.length());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertTrue(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%~J)q.=");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"?b=;3?a");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(stringReader0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(32, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"?b=;3?a");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      assertEquals("[?%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSTerm0.isConstant());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ?b?a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"?b=;3?a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h{w=uB~>)^k}[W8+IT");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.standarizerPredicateForm();
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm1.isEmpty());
      
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean0);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".oK3wyae4sm&b$=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      assertEquals((-2), streamTokenizer0.ttype);
      
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      jSTerm1.call();
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("kt`");
      StringReader stringReader1 = new StringReader("kt`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[%%%]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".oK3wye4sm&b$=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertTrue(jSTerm1.isVariable());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_}(B`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("B%zq,s):Hzm+h%9z");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isEval());
      assertEquals("B%zq,s ", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      jSTerm1.makeEval(true);
      assertTrue(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@(eJl+f#s[0D");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm1.isConstant();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".oK3wbae4sm&b$=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".oK3wyae4sm&b$=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.call();
      assertEquals((-2), streamTokenizer0.ttype);
      assertTrue(jSTerm0.isVariable());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.equalT = 41;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.interrogation = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("5aaC");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isVariable());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("RQ:9T]");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) streamTokenizer0;
      objectArray0[1] = (Object) streamTokenizer0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) stringReader0;
      objectArray0[4] = (Object) "RQ:9T]";
      objectArray0[5] = (Object) "RQ:9T]";
      jSTerm0.toArray(objectArray0);
      jSTerm0.makeEval(false);
      jSTerm0.isGround();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = (-523);
      JSJshopVars.coma = (-523);
      jSTerm0.isFunction();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.greaterT = 0;
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      jSTerm0.isFunction();
      StringReader stringReader0 = new StringReader("_~)=_c<y");
      stringReader0.skip(0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("call ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.quoteChar(1601);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n)4oPl{>8gR:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.flagLevel = 40;
      JSJshopVars.greaterT = 40;
      JSJshopVars.rightBrac = 0;
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      StringReader stringReader0 = new StringReader("s@2H%>I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        stringReader0.read((char[]) null, 40, (-32));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = 0;
      streamTokenizer0.ttype = 0;
      streamTokenizer0.wordChars(0, 0);
      streamTokenizer0.whitespaceChars(0, 0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("VE#,Yl3}~`y`gth");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isEval();
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.interrogation = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      jSTerm0.isVariable();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = ") ";
      JSJshopVars.flagLevel = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addAll(0, (Collection) jSSubstitution0);
      StringReader stringReader0 = new StringReader(") ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      stringReader0.close();
      streamTokenizer0.parseNumbers();
      jSTerm1.isGround();
      jSTerm0.makeVariable();
      jSTerm0.makeFunction();
      jSTerm1.isEval();
      jSTerm0.matches(jSTerm1);
      jSTerm1.isConstant();
      jSTerm1.makeEval(false);
      assertEquals(32, streamTokenizer0.ttype);
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.firstElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 60;
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSSubstitution> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      predicate0.or(predicate1);
      predicate1.test(predicate0);
      Predicate<JSSubstitution> predicate2 = predicate0.and(predicate1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      predicate2.test(jSSubstitution0);
      Predicate.isEqual((Object) predicate1);
      jSTerm0.add((Object) predicate2);
      predicate0.or(predicate2);
      Predicate<JSSubstitution> predicate3 = predicate0.negate();
      predicate3.or(predicate0);
      JSJshopVars.flagLevel = 0;
      jSTerm0.removeIf(predicate3);
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.equalT = 41;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.makeConstant();
      assertTrue(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      JSJshopVars.coma = 0;
      jSTerm0.isVariable();
      jSTerm0.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.remove(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
