/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:34:05 GMT 2018
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParser;
import com.pmdesigns.jvc.tools.JVCParserConstants;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.ParseException;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParser_ESTest extends JVCParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JVCParser jVCParser0 = null;
      try {
        jVCParser0 = new JVCParser("com.pmdesigns.jvc.tools.TokenMgrError", linkedHashSet0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JVCParser.main(stringArray0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      JVCParser jVCParser0 = new JVCParser(jVCParserTokenManager0);
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JVCParser.main(stringArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(115);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      JVCParser jVCParser0 = new JVCParser(sequenceInputStream0);
      jVCParser0.enable_tracing();
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        JVCParser.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "N_EXP2";
      JVCParser.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = JVCParserConstants.END_CACHE_BLOCK;
      StringReader stringReader0 = new StringReader("\"[[==\"");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "q O3)k";
      stringArray0[2] = "-QalyJHD1gr6Ez%";
      JVCParser.main(stringArray0);
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      jVCParser0.ReInit((JVCParserTokenManager) null);
      // Undeclared exception!
      try { 
        jVCParser0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JVCParser jVCParser0 = new JVCParser(pipedReader0);
      jVCParser0.disable_tracing();
      assertEquals(100, jVCParser0.debugColumn);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = JVCParserConstants.START_CODE_TAG;
      PipedReader pipedReader0 = new PipedReader();
      JVCParser jVCParser0 = new JVCParser(pipedReader0);
      jVCParser0.parse();
      jVCParser0.getToken((byte)8);
      jVCParser0.generateParseException();
      jVCParser0.getNextToken();
      jVCParser0.parse();
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      charArray0[1] = '&';
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = JVCParserConstants.ESCAPED_CHAR;
      int int1 = JVCParserConstants.START_CODE_TAG;
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JVCParser jVCParser0 = new JVCParser(byteArrayInputStream0);
      Locale locale0 = Locale.FRENCH;
      jVCParser0.getNextToken();
      jVCParser0.parse();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        pipedOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = JVCParserConstants.END_TAG;
      int int1 = JVCParserConstants.START_CODE_TAG;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1250);
      JVCParser jVCParser0 = new JVCParser(pipedInputStream0);
      jVCParser0.ReInit((InputStream) pipedInputStream0);
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.mark(1250);
      jVCParser0.getToken(2978);
      StringReader stringReader0 = new StringReader("{\n");
      jVCParser0.ReInit((Reader) stringReader0);
      jVCParser0.parse();
      Token token0 = jVCParser0.token.specialToken;
      jVCParser0.parse();
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("_sb.append(\"{\n\");\n");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JVCParser jVCParser0 = new JVCParser(pipedReader0);
      jVCParser0.getToken(9);
      jVCParser0.getToken(9);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = JVCParserConstants.END_CACHE_BLOCK;
      StringReader stringReader0 = new StringReader("\"[[==\"");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "q O3)k";
      stringArray0[2] = "-WQalyJHD1gr6Ez%";
      JVCParser.main(stringArray0);
      JVCParser jVCParser0 = new JVCParser(stringReader0);
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unbalanced tag at end of null
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      JVCParser jVCParser0 = new JVCParser(bufferedInputStream0, (String) null);
      jVCParser0.getNextToken();
      int int0 = jVCParser0.debugColumn;
      jVCParser0.parse();
      jVCParser0.ReInit((InputStream) pipedInputStream0);
      jVCParser0.enable_tracing();
      StringReader stringReader0 = new StringReader("\"[[==\"");
      jVCParser0.ReInit((Reader) stringReader0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      stringReader0.read(charArray0);
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unbalanced tag at end of null
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      int int0 = JVCParserConstants.DEFAULT;
      JVCParser jVCParser0 = new JVCParser(bufferedInputStream0, (String) null);
      jVCParser0.getNextToken();
      int int1 = JVCParserConstants.WS;
      jVCParser0.ReInit((InputStream) bufferedInputStream0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("\"[[~}\"");
      stringReader0.skip(0);
      jVCParser0.ReInit((Reader) stringReader0);
      Locale locale0 = Locale.FRANCE;
      jVCParser0.getNextToken();
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unbalanced tag at end of null
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/13_javaviewcontrol/N_EXP2");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "}RaAm@DG");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[3] = (byte) (-74);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte) (-74);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "N_EXP2";
      stringArray0[1] = "}RaAm@DG";
      JVCParser.main(stringArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 562, 92, (byte)0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      PipedReader pipedReader0 = new PipedReader(100);
      simpleCharStream0.ReInit((Reader) pipedReader0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(100);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 100. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JVCParser jVCParser0 = new JVCParser(sequenceInputStream0, (String) null);
      jVCParser0.parse();
      sequenceInputStream0.available();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jVCParser0.getToken(615);
      jVCParser0.parse();
      ParseException parseException0 = jVCParser0.generateParseException();
      int int0 = jVCParser0.debugColumn;
      jVCParser0.parse();
      sequenceInputStream0.close();
      jVCParser0.ReInit((InputStream) sequenceInputStream0);
      sequenceInputStream0.mark(615);
      boolean boolean0 = SimpleCharStream.staticFlag;
      jVCParser0.enable_tracing();
      StringReader stringReader0 = new StringReader("\"[[=");
      jVCParser0.ReInit((Reader) stringReader0);
      jVCParser0.ReInit((Reader) stringReader0);
      JVCParser.main(parseException0.tokenImage);
      Token.newToken((-1523), (String) null);
      JVCParser.main(parseException0.tokenImage);
      try { 
        jVCParser0.parse();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unbalanced tag at end of null
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JVCParser jVCParser0 = new JVCParser(sequenceInputStream0, (String) null);
      jVCParser0.parse();
      sequenceInputStream0.available();
      boolean boolean0 = SimpleCharStream.staticFlag;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jVCParser0.getToken(615);
      jVCParser0.parse();
      ParseException parseException0 = jVCParser0.generateParseException();
      int int0 = jVCParser0.debugColumn;
      jVCParser0.parse();
      jVCParser0.ReInit((InputStream) sequenceInputStream0);
      sequenceInputStream0.mark(615);
      boolean boolean1 = SimpleCharStream.staticFlag;
      Token.newToken(615, "");
      jVCParser0.enable_tracing();
      StringReader stringReader0 = new StringReader("\"[[==\"");
      sequenceInputStream0.markSupported();
      jVCParser0.ReInit((Reader) stringReader0);
      JVCParser.main(parseException0.tokenImage);
      JVCParser jVCParser1 = new JVCParser(jVCParser0.token_source);
      jVCParser1.getToken(128);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader1 = new StringReader("\"[[==\"");
      jVCParser0.parse();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      jVCParser0.ReInit((Reader) stringReader1);
      jVCParser1.parse();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JVCParser jVCParser0 = new JVCParser(sequenceInputStream0, (String) null);
      jVCParser0.parse();
      sequenceInputStream0.available();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jVCParser0.getToken(100);
      jVCParser0.parse();
      int int0 = jVCParser0.debugColumn;
      jVCParser0.parse();
      sequenceInputStream0.close();
      jVCParser0.ReInit((InputStream) sequenceInputStream0);
      sequenceInputStream0.mark(100);
      boolean boolean0 = SimpleCharStream.staticFlag;
      jVCParser0.enable_tracing();
      StringReader stringReader0 = new StringReader("\"[[=");
      jVCParser0.ReInit((Reader) stringReader0);
      jVCParser0.ReInit((Reader) stringReader0);
      JVCParser jVCParser1 = new JVCParser(jVCParser0.token_source);
      jVCParser1.getToken(128);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      jVCParser0.ReInit((Reader) stringReader0);
      jVCParser1.parse();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/13_javaviewcontrol/N_EXP2");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "}RaAm@DG");
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = SimpleCharStream.staticFlag;
      byteArray0[3] = (byte) (-65);
      byteArray0[2] = (byte)66;
      byteArray0[2] = (byte)66;
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      String[] stringArray0 = new String[18];
      stringArray0[0] = "N_EXP2";
      stringArray0[1] = "}RaAm@DG";
      JVCParser.main(stringArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      StringReader stringReader0 = new StringReader(", column ");
      stringReader0.skip((byte)66);
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      JVCParser jVCParser0 = new JVCParser("N_EXP2", set0, true);
      jVCParser0.ReInit((Reader) stringReader0);
      Locale locale1 = Locale.FRANCE;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}RaAm@DG");
      jVCParser0.getNextToken();
      jVCParser0.parse();
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)66);
      // Undeclared exception!
      try { 
        jVCParser0.ReInit((InputStream) pipedInputStream0, "9jA67_X3]su);VM5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.UnsupportedEncodingException: 9jA67_X3]su);VM5
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParser", e);
      }
  }
}
