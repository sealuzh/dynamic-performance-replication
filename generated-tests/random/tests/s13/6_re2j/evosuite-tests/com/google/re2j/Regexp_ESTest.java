/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 21:23:20 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Regexp_ESTest extends Regexp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = (-325);
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      regexp0.min = (-305);
      String string0 = regexp0.toString();
      assertEquals("[^\\x00-\\x{10FFFF}]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.name = "";
      regexp1.flags = (-2196);
      Object object0 = new Object();
      regexp1.equals(object0);
      regexp0.subs = null;
      regexp1.equals(regexp0);
      regexp0.maxCap();
      regexp1.min = 0;
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("Cc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.Cc
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      regexp0.flags = 6;
      regexp0.subs = null;
      regexp1.min = 42;
      regexp1.op = regexp_Op0;
      regexp0.equals(regexp1);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[3];
      intArray0[0] = 36;
      intArray0[1] = 2;
      intArray0[2] = (-525);
      regexp0.runes = intArray0;
      regexp0.equals("=QK^Jodp:9G6v");
      String string0 = regexp0.toString();
      assertEquals("[invalid char class]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.runes = null;
      regexp1.reinit();
      Regexp regexp2 = new Regexp(regexp1);
      regexp2.cap = 6153;
      regexp2.cap = 6153;
      regexp1.equals(regexp2);
      regexp1.runes = null;
      regexp0.runes = null;
      String string0 = "";
      regexp2.name = "";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("LU$|#Z\" X  nr2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.LU$|#Z\" X  nr2
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.flags = 4;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.equals(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_LINE;
      regexp1.equals(regexp_Op0);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexp0.op = regexp_Op1;
      regexp1.cap = 2290;
      Object object0 = new Object();
      regexp1.equals(object0);
      Regexp.Op.values();
      Regexp.Op.values();
      regexp1.maxCap();
      boolean boolean0 = regexp_Op0.isPseudo();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      regexp0.op = regexp_Op1;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp1;
      regexpArray0[0].cap = 425;
      regexp1.cap = 203;
      regexpArray0[0].cap = (-2284);
      regexp1.subs = regexpArray0;
      regexp1.reinit();
      regexp1.maxCap();
      regexp0.maxCap();
      String string0 = regexp1.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp0.name = null;
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-1843);
      intArray0[1] = 952;
      intArray0[2] = 5;
      intArray0[3] = (-913);
      intArray0[4] = 4299;
      regexp0.runes = intArray0;
      regexp1.reinit();
      regexp0.equals(regexp1);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-806);
      intArray0[1] = 368;
      intArray0[2] = (-4944);
      intArray0[3] = (-1583);
      intArray0[4] = 422;
      regexp0.name = "O9`BIZks><t";
      intArray0[5] = 835;
      intArray0[6] = (-4003);
      regexp0.runes = intArray0;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.equals(regexp_Op0);
      int[] intArray0 = new int[4];
      intArray0[0] = 44;
      intArray0[1] = 44;
      regexp0.min = (-2481);
      intArray0[2] = 44;
      intArray0[3] = 44;
      regexp0.runes = intArray0;
      regexp0.max = 44;
      regexp0.cap = (-328);
      regexp0.equals(regexp_Op0);
      regexp0.runes = intArray0;
      regexp0.flags = 44;
      regexp0.toString();
      regexp0.equals(regexp_Op0);
      regexp_Op0.isPseudo();
      regexp0.toString();
      String string0 = regexp0.toString();
      assertEquals(",,,,", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op.values();
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "*A)n`hRqSj(9f";
      regexp0.toString();
      Regexp regexp1 = new Regexp(regexp_Op0);
      boolean boolean0 = regexp0.equals(regexp1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[5];
      intArray0[0] = 17;
      intArray0[1] = 2486;
      intArray0[2] = 3258;
      intArray0[3] = 2730;
      intArray0[4] = (-2065);
      regexp1.runes = intArray0;
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = (-3862);
      regexp0.max = 7;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.min = 7;
      regexp1.toString();
      regexp0.min = (-655);
      regexp1.equals(regexp0);
      regexp1.name = "PLUS";
      regexp1.equals(regexp0);
      regexp1.equals(regexp0);
      Regexp.Op.values();
      regexp1.equals("PLUS");
      regexp0.maxCap();
      regexp0.toString();
      Regexp.Op.valueOf("PLUS");
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      boolean boolean0 = regexp_Op0.isPseudo();
      assertFalse(boolean0);
      
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op1);
      Regexp[] regexpArray0 = new Regexp[5];
      Regexp.Op regexp_Op2 = Regexp.Op.NO_MATCH;
      Regexp regexp1 = new Regexp(regexp_Op2);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp regexp2 = new Regexp(regexp0);
      boolean boolean1 = regexp0.equals(regexp2);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.name = "Lycian";
      regexp1.max = (-1467);
      regexp1.maxCap();
      String string0 = "CHAR_CLASS";
      regexp1.name = "";
      Regexp.Op.valueOf("CHAR_CLASS");
      regexp0.maxCap();
      regexp0.maxCap();
      Regexp regexp2 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp3 = new Regexp(regexp_Op1);
      regexpArray0[0] = regexp3;
      regexp2.subs = regexpArray0;
      regexp2.name = "";
      regexp2.min = 0;
      // Undeclared exception!
      try { 
        regexp1.equals(regexp2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.maxCap();
      regexp0.cap = 0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.flags = 2685;
      regexp1.flags = 2685;
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexp0.reinit();
      regexpArray0[1] = regexp0;
      regexp0.subs = regexpArray0;
      regexp1.name = "IDS_Binary_Operator";
      // Undeclared exception!
      try { 
        regexp0.equals(regexp0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      regexp0.maxCap();
      Regexp.Op.values();
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.equals(regexp1);
      regexp1.toString();
      regexp0.equals("\b");
      regexp0.equals("\b");
      regexp0.flags = 0;
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("Meetei_Mayek");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.Meetei_Mayek
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.toString();
      regexp1.max = 8;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexp1.equals(regexp2);
      regexp0.max = 1252;
      regexp1.subs = null;
      regexp2.equals(regexp0);
      regexp1.op = regexp_Op0;
      regexp2.maxCap();
      Regexp.Op.values();
      int[] intArray0 = new int[0];
      regexp0.runes = intArray0;
      String string0 = "";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.cap = (-743);
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
      
      regexp1.equals(regexp0);
      boolean boolean0 = regexp_Op0.isPseudo();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      regexp0.toString();
      regexp0.maxCap();
      Regexp.Op.values();
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.equals(regexp1);
      regexp0.toString();
      Regexp.Op.values();
      regexp0.equals("B");
      regexp0.equals("B");
      regexp0.flags = 0;
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("Meetei_Mayek");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.Meetei_Mayek
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      regexp1.max = (-2768);
      int[] intArray0 = new int[2];
      intArray0[0] = (-2768);
      intArray0[1] = 18;
      regexp0.runes = intArray0;
      regexp0.min = 2368;
      regexp0.name = "";
      regexp1.maxCap();
      regexp0.equals(regexp_Op0);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = null;
      regexp0.name = null;
      Regexp[] regexpArray0 = new Regexp[0];
      regexp0.subs = regexpArray0;
      regexp0.flags = (-2875);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 825;
      regexp0.maxCap();
      Regexp.Op.values();
      regexp0.cap = 825;
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[1] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.equals(regexp_Op0);
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexp2.cap = 0;
      regexp0.equals(regexp2);
      regexp0.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 3539;
      int[] intArray0 = new int[4];
      intArray0[0] = 3539;
      intArray0[1] = 3539;
      regexp0.cap = (-2143);
      intArray0[2] = 3539;
      intArray0[3] = 3539;
      regexp0.min = 3539;
      regexp0.runes = intArray0;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.max = 3539;
      regexp0.toString();
      assertTrue(regexp0.equals((Object)regexp1));
      
      regexp0.name = "(?i:\u0DD3\u0DD3\u0DD3\u0DD3)";
      regexp1.flags = 489;
      regexp1.cap = 11;
      regexp1.toString();
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
      
      regexp_Op0.isPseudo();
      Regexp.Op.values();
      regexp0.maxCap();
      boolean boolean0 = regexp_Op0.isPseudo();
      boolean boolean1 = regexp0.equals(regexp_Op0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.LEFT_PAREN;
      regexp0.name = "LITERAL";
      regexp0.name = "LITERAL";
      regexp0.equals(regexp_Op1);
      regexp0.op = regexp_Op1;
      regexp0.toString();
      regexp0.maxCap();
      Regexp.Op.values();
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.flags = 0;
      regexp1.toString();
      regexp0.equals(regexp1);
      Regexp.Op.valueOf("LITERAL");
      regexp0.maxCap();
      Regexp.Op.valueOf("LITERAL");
      regexp0.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("!o49Ah!0eIYT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.!o49Ah!0eIYT
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[9];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[2] = regexp1;
      Regexp.Op regexp_Op1 = Regexp.Op.NO_MATCH;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexpArray0[3] = regexp2;
      regexpArray0[4] = regexp0;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp0;
      regexpArray0[4].min = 2;
      regexpArray0[7] = regexp0;
      regexpArray0[8] = regexp0;
      regexp0.subs = regexpArray0;
      Regexp[] regexpArray1 = new Regexp[0];
      regexp0.subs = regexpArray1;
      regexp0.toString();
      Regexp.Op regexp_Op2 = Regexp.Op.CONCAT;
      Regexp regexp3 = new Regexp(regexp_Op2);
      regexp3.op = regexp_Op0;
      // Undeclared exception!
      try { 
        regexp1.equals(regexp3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.cap = 10;
      String string0 = "";
      regexp0.name = "";
      regexp0.cap = (-2742);
      regexp0.equals(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.VERTICAL_BAR;
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op1);
      regexp0.op = regexp_Op0;
      regexp0.min = (-2227);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.min = (-2227);
      Regexp.Op regexp_Op2 = Regexp.Op.ANY_CHAR_NOT_NL;
      regexp0.op = regexp_Op2;
      regexp_Op0.isPseudo();
      regexp1.min = 65339;
      regexp1.name = "";
      regexp0.equals(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp0.subs = regexpArray0;
      regexp1.cap = 8126;
      regexp1.equals(regexp_Op0);
      boolean boolean0 = regexp_Op1.isPseudo();
      regexp0.toString();
      boolean boolean1 = regexp_Op0.isPseudo();
      assertFalse(boolean1 == boolean0);
      
      regexp1.maxCap();
      Regexp.Op.values();
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
      
      boolean boolean2 = regexp1.equals(regexp_Op0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      Regexp.Op.values();
      Regexp.Op regexp_Op1 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp1 = new Regexp(regexp_Op1);
      boolean boolean0 = regexp0.equals(regexp1);
      assertFalse(regexp1.equals((Object)regexp0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "";
      regexp0.reinit();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "iyCpVJ-'n9=";
      regexp0.min = 448;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.reinit();
      regexp0.equals("iyCpVJ-'n9=");
      regexp1.cap = 448;
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR;
      regexp0.op = regexp_Op1;
      regexp1.reinit();
      regexp0.name = "iyCpVJ-'n9=";
      regexp1.min = 8499;
      regexp1.toString();
      regexp1.toString();
      regexp0.maxCap();
      regexp1.toString();
      regexp1.maxCap();
      regexp0.op.isPseudo();
      regexp0.toString();
      Regexp.Op.values();
      regexp1.equals(regexp_Op0);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(?P<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?P<
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      regexp1.name = "Join_Control";
      regexp1.cap = 2255;
      regexp1.runes = intArray0;
      regexp1.runes = intArray0;
      regexp1.equals(regexp_Op0);
      Regexp.Op.values();
      regexp0.toString();
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      regexp1.toString();
      regexp1.flags = 5;
      regexp_Op0.isPseudo();
      Regexp.Op.values();
      regexp1.toString();
      Regexp.Op.values();
      Regexp.Op.values();
      Regexp.Op[] regexp_OpArray1 = Regexp.Op.values();
      assertFalse(regexp_OpArray1.equals((Object)regexp_OpArray0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 1;
      Regexp.Op regexp_Op1 = Regexp.Op.ALTERNATE;
      regexp0.op = regexp_Op1;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[7];
      intArray0[0] = 8;
      regexp0.equals("");
      intArray0[1] = 8;
      intArray0[2] = 8;
      intArray0[3] = 8;
      intArray0[4] = 8;
      intArray0[5] = 8;
      intArray0[6] = 8;
      regexp0.runes = intArray0;
      regexp0.flags = 8;
      regexp0.name = "Pc";
      regexp0.flags = 8;
      regexp0.maxCap();
      regexp0.toString();
      regexp_Op0.isPseudo();
      regexp0.toString();
      Regexp.Op.values();
      regexp0.maxCap();
      regexp0.maxCap();
      regexp0.maxCap();
      Regexp.Op.values();
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      Regexp.Op[] regexp_OpArray1 = Regexp.Op.values();
      assertFalse(regexp_OpArray1.equals((Object)regexp_OpArray0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.max = (-2052);
      regexp0.cap = 15;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      regexp1.op = regexp_Op1;
      regexp1.cap = (-2052);
      regexp1.maxCap();
      regexp1.min = 15;
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.equals(regexp0);
      regexp1.name = "";
      regexp1.flags = 1071;
      regexp1.toString();
      int[] intArray0 = new int[6];
      intArray0[0] = 1071;
      intArray0[1] = 11;
      intArray0[2] = 1071;
      intArray0[3] = 1071;
      intArray0[4] = 1071;
      regexp0.cap = 1071;
      intArray0[5] = 1766;
      regexp0.runes = intArray0;
      regexp1.toString();
      Regexp.Op.values();
      regexp0.op = regexp_Op0;
      regexp1.equals("A");
      regexp1.equals("");
      regexp_Op0.isPseudo();
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.A
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      regexp0.op = regexp_Op1;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.toString();
      regexp0.op.isPseudo();
      regexp1.maxCap();
      regexp0.op = regexp_Op0;
      regexp0.reinit();
      Regexp.Op.values();
      regexp0.equals((Object) null);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.z
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.flags = 17;
      regexp0.flags = 17;
      regexp1.flags = 1112;
      regexp1.cap = 4344;
      regexp0.flags = 0;
      Regexp regexp2 = new Regexp(regexp1);
      regexp2.flags = 0;
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      regexp0.max = 0;
      regexp2.runes = intArray0;
      regexp2.max = 0;
      regexp0.min = 17;
      // Undeclared exception!
      try { 
        regexp2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      regexp_Op0.isPseudo();
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op1);
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.cap = 66;
      regexp1.toString();
      regexp1.max = 196606;
      regexp0.op = regexp_Op0;
      Regexp regexp2 = new Regexp(regexp0);
      regexp1.equals(regexp2);
      regexp0.toString();
      regexp0.reinit();
      Regexp.Op regexp_Op1 = Regexp.Op.VERTICAL_BAR;
      regexp2.op = regexp_Op1;
      regexp_Op0.isPseudo();
      regexp2.maxCap();
      regexp0.name = null;
      Regexp.Op.values();
      Regexp.Op.values();
      regexp2.toString();
      regexp2.equals("Gothic");
      assertFalse(regexp2.equals((Object)regexp1));
      
      boolean boolean0 = regexp_Op1.isPseudo();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.min = 5;
      regexp0.reinit();
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 284;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.toString();
      regexp1.toString();
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexp1.equals(regexp2);
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.CAPTURE;
      regexp0.op = regexp_Op1;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      regexp_Op0.isPseudo();
      Regexp.Op.values();
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.maxCap();
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.subs = null;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.toString();
      regexp1.equals(regexp0);
      int[] intArray0 = new int[8];
      intArray0[0] = 11;
      intArray0[1] = 1593;
      intArray0[2] = 131;
      intArray0[3] = (-338);
      intArray0[4] = (-2230);
      intArray0[5] = 1586;
      intArray0[6] = 1603;
      intArray0[7] = 11500;
      regexp1.runes = intArray0;
      boolean boolean0 = regexp0.equals("z");
      assertFalse(boolean0);
      
      regexp1.equals(regexp0);
      int int0 = regexp1.maxCap();
      assertEquals(0, int0);
      assertTrue(regexp1.equals((Object)regexp0));
  }
}
