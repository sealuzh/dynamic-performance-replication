/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:42:59 GMT 2018
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParserTokenManager_ESTest extends JVCParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      JVCParserTokenManager jVCParserTokenManager0 = null;
      try {
        jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null, (-484));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -484. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.ReInit((SimpleCharStream) null, (-879));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -879. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(4095);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4095. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 1);
      jVCParserTokenManager0.setDebugStream((PrintStream) null);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[0] = 'X';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      int int0 = 4;
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.jjFillToken();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("X", "X");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // X
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '|';
      charArray0[5] = 'g';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.jjmatchedKind = (-1);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.jjFillToken();
      jVCParserTokenManager0.SwitchTo(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\f");
      jVCParserTokenManager0.jjFillToken();
      jVCParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo((-978));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -978. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[3] = 'V';
      charArray0[0] = 'V';
      charArray0[0] = 'X';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.skip(460L);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader1);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1);
      jVCParserTokenManager0.SwitchTo(4);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.jjFillToken();
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream);
      mockPrintStream0.format("", (Object[]) jVCParserTokenManager0.jjstrLiteralImages);
      jVCParserTokenManager0.ReInit(simpleCharStream1);
      assertEquals(1, simpleCharStream1.getColumn());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = SimpleCharStream.staticFlag;
      char[] charArray0 = new char[5];
      charArray0[2] = 'Y';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      charArrayReader0.mark(0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 0);
      jVCParserTokenManager0.jjmatchedKind = 0;
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("IN_EXPR");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[6] = '6';
      charArray0[3] = '\u0000';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 2);
      jVCParserTokenManager0.jjmatchedKind = (-1);
      jVCParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 16. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[3] = 'X';
      charArray0[5] = 'X';
      charArray0[5] = 'u';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.SwitchTo(0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.jjFillToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.jjFillToken();
      jVCParserTokenManager0.SwitchTo(2);
      MockPrintStream mockPrintStream0 = new MockPrintStream("\u0000");
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.setDebugStream(mockPrintStream0);
      jVCParserTokenManager0.ReInit(simpleCharStream0, 5);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(16, token0.kind);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token1.toString());
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = 18;
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(18);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 18. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = SimpleCharStream.staticFlag;
      assertFalse(boolean0);
      
      char[] charArray0 = new char[5];
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      charArray0[3] = '_';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '_', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '_', '\u0000'}, charArray0);
      
      charArrayReader0.mark(0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '_', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '_', '\u0000'}, charArray0);
      
      jVCParserTokenManager0.jjmatchedKind = (-744);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("\u0000", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '_', '\u0000'}, charArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("\u0000", token1.toString());
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '_', '\u0000'}, charArray0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '_', '\u0000'}, charArray0);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.endColumn);
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token2.toString());
      assertNotNull(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '_', '\u0000'}, charArray0);
      
      Token token3 = jVCParserTokenManager0.jjFillToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token3.endColumn);
      assertEquals(3, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(16, token3.kind);
      assertEquals(1, token3.beginLine);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token3.toString());
      assertNotNull(token3);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '_', '\u0000'}, charArray0);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertNotNull(string0);
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '_', '\u0000'}, charArray0);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 3);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '_', '\u0000'}, charArray0);
      
      Token token4 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token4.kind);
      assertEquals(1, token4.beginLine);
      assertEquals(4, token4.beginColumn);
      assertEquals(4, token4.endColumn);
      assertEquals(1, token4.endLine);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertEquals("_", token4.toString());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertNotNull(token4);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '_', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '\u0088';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@HTQ<K$s]!FXG");
      assertFalse(boolean0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jVCParserTokenManager0.SwitchTo(0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("\u0000", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("\u0088", token1.toString());
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'u';
      charArray0[0] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jVCParserTokenManager0.SwitchTo(1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(3, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = SimpleCharStream.staticFlag;
      assertFalse(boolean0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(4, token1.beginColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals("\u0000", token1.toString());
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("\u0000");
      assertNotNull(mockPrintStream0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(4633);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4633. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jVCParserTokenManager0.SwitchTo(4);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(3, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals("\u0000", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)75;
      token0.endLine = (int) (byte)4;
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals("\u0000", token0.toString());
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, (-3072));
      assertEquals((-3072), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)4, (byte)4, (byte)4, (byte)75, (byte)0}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals((-3072), byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)4, (byte)4, (byte)4, (byte)75, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        pushbackInputStream0.read(byteArray0, 4, 3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = '\u0089';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0089', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'\u0000', '\u0089', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0089', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/13_javaviewcontrol");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'\u0000', '\u0089', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jVCParserTokenManager0.SwitchTo(0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'\u0000', '\u0089', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("\u0000", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'\u0000', '\u0089', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("\u0000", token1.toString());
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'\u0000', '\u0089', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = charArrayReader0.markSupported();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'\u0000', '\u0089', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'\u0000', '\u0089', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertNotNull(simpleCharStream1);
      assertArrayEquals(new char[] {'\u0000', '\u0089', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'\u0000', '\u0089', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(charArrayReader1);
      assertEquals((-1), simpleCharStream2.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream2.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream2.getBeginColumn());
      assertEquals(0, simpleCharStream2.getBeginLine());
      assertNotNull(simpleCharStream2);
      assertArrayEquals(new char[] {'\u0000', '\u0089', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      simpleCharStream1.adjustBeginLineColumn(7, 33);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream2));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(8, simpleCharStream1.getBeginLine());
      assertEquals(33, simpleCharStream1.getBeginColumn());
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream1, simpleCharStream2);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0089', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jVCParserTokenManager0.SwitchTo(1);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream2));
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(simpleCharStream0, simpleCharStream2);
      assertArrayEquals(new char[] {'\u0000', '\u0089', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, token2.endColumn);
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream2));
      assertEquals("\u0089", token2.toString());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(simpleCharStream0, simpleCharStream2);
      assertArrayEquals(new char[] {'\u0000', '\u0089', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token3 = jVCParserTokenManager0.jjFillToken();
      assertEquals(1, token3.endLine);
      assertEquals(2, token3.endColumn);
      assertEquals(2, token3.beginColumn);
      assertEquals(16, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream2));
      assertEquals("\u0089", token3.toString());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertNotNull(token3);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(simpleCharStream0, simpleCharStream2);
      assertArrayEquals(new char[] {'\u0000', '\u0089', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream2));
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0089', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      PrintStream printStream0 = mockPrintStream0.format("/X'B<k", (Object[]) jVCParserTokenManager0.jjstrLiteralImages);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream2));
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertNotNull(printStream0);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(simpleCharStream0, simpleCharStream2);
      assertSame(printStream0, mockPrintStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0089', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jVCParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream2));
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(simpleCharStream0, simpleCharStream2);
      assertArrayEquals(new char[] {'\u0000', '\u0089', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(30);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 30. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = '\u0088';
      charArray0[4] = '\u0088';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0088', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0088', '\u0000'}, charArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0088', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertNotNull(simpleCharStream1);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0088', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0088', '\u0000'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token0.toString());
      assertNotNull(token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0088', '\u0000'}, charArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("\u0088", token1.toString());
      assertNotNull(token1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0088', '\u0000'}, charArray0);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.endColumn);
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.beginColumn);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("\u0000", token2.toString());
      assertNotNull(token2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0088', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1, 3);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertNotNull(jVCParserTokenManager1);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0088', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream1, 2);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertNotNull(jVCParserTokenManager2);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0088', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager3 = new JVCParserTokenManager(simpleCharStream1, 3);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager3.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager3.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager3.equals((Object)jVCParserTokenManager2));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertNotNull(jVCParserTokenManager3);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0088', '\u0000'}, charArray0);
      
      Token token3 = jVCParserTokenManager2.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.endColumn);
      assertEquals(16, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.beginColumn);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager3));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertEquals("\u0000", token3.toString());
      assertNotNull(token3);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager3);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0088', '\u0000'}, charArray0);
      
      Token token4 = jVCParserTokenManager0.jjFillToken();
      assertEquals(3, token4.beginColumn);
      assertEquals(1, token4.endLine);
      assertEquals(16, token4.kind);
      assertEquals(1, token4.beginLine);
      assertEquals(3, token4.endColumn);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager3));
      assertEquals("\u0000", token4.toString());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertNotNull(token4);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager2);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager3);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0088', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Token token5 = jVCParserTokenManager1.getNextToken();
      assertEquals(2, token5.endColumn);
      assertEquals(16, token5.kind);
      assertEquals(1, token5.beginLine);
      assertEquals(1, token5.endLine);
      assertEquals(2, token5.beginColumn);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token3));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager3));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals("\u0088", token5.toString());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(2, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertNotNull(token5);
      assertNotSame(token5, token2);
      assertNotSame(token5, token1);
      assertNotSame(token5, token4);
      assertNotSame(token5, token0);
      assertNotSame(token5, token3);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager3);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0088', '\u0000'}, charArray0);
      
      Token token6 = jVCParserTokenManager3.getNextToken();
      assertEquals(3, token6.endColumn);
      assertEquals(16, token6.kind);
      assertEquals(1, token6.beginLine);
      assertEquals(3, token6.beginColumn);
      assertEquals(1, token6.endLine);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream1.bufpos);
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token3));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(jVCParserTokenManager3.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager3.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager3.equals((Object)jVCParserTokenManager2));
      assertEquals("\u0000", token6.toString());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(3, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(3, simpleCharStream1.getBeginColumn());
      assertEquals(3, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertNotNull(token6);
      assertNotSame(token6, token2);
      assertNotSame(token6, token1);
      assertNotSame(token6, token4);
      assertNotSame(token6, token0);
      assertNotSame(token6, token5);
      assertNotSame(token6, token3);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(jVCParserTokenManager3, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager3, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager3, jVCParserTokenManager2);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0088', '\u0000'}, charArray0);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(";M$ut1NC2{f~5");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(3, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals("\u0000", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      MockFile mockFile0 = new MockFile("\u0000");
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertEquals("\u0000", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals("\u0000", mockFile0.toString());
      assertNotNull(mockFile0);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[5] = 'w';
      charArray0[3] = 'w';
      boolean boolean0 = SimpleCharStream.staticFlag;
      assertFalse(boolean0);
      
      charArray0[6] = 'w';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'w', '\u0000', 'w', 'w'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'w', '\u0000', 'w', 'w'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'w', '\u0000', 'w', 'w'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("\u0000", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'w', '\u0000', 'w', 'w'}, charArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'w', '\u0000', 'w', 'w'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertNotNull(jVCParserTokenManager1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'w', '\u0000', 'w', 'w'}, charArray0);
      
      jVCParserTokenManager0.setDebugStream(jVCParserTokenManager1.debugStream);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'w', '\u0000', 'w', 'w'}, charArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("\u0000", token1.toString());
      assertNotNull(token1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'w', '\u0000', 'w', 'w'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, 2);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertNotNull(jVCParserTokenManager2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'w', '\u0000', 'w', 'w'}, charArray0);
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(3, token2.endColumn);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals("\u0000", token2.toString());
      assertNotNull(token2);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'w', '\u0000', 'w', 'w'}, charArray0);
      
      jVCParserTokenManager2.curLexState = 982;
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      
      boolean boolean1 = simpleCharStream0.prevCharIsCR;
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'w', '\u0000', 'w', 'w'}, charArray0);
      
      Token token3 = jVCParserTokenManager2.getNextToken();
      assertEquals(1, token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(4, token3.beginColumn);
      assertEquals(4, token3.endColumn);
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertEquals("", token3.toString());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertNotNull(token3);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'w', '\u0000', 'w', 'w'}, charArray0);
      
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = '\u0088';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertNotNull(simpleCharStream1);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jVCParserTokenManager0.SwitchTo(4);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("\u0000", token0.toString());
      assertNotNull(token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = jVCParserTokenManager0.jjFillToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.beginColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("\u0000", token1.toString());
      assertNotNull(token1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string0 = simpleCharStream1.GetImage();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertNotNull(string0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token2.endColumn);
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("\u0088", token2.toString());
      assertNotNull(token2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token3 = jVCParserTokenManager0.jjFillToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(2, token3.beginColumn);
      assertEquals(2, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("\u0088", token3.toString());
      assertNotNull(token3);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = SimpleCharStream.staticFlag;
      assertFalse(boolean0);
      
      Token token4 = jVCParserTokenManager0.jjFillToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token4.kind);
      assertEquals(1, token4.beginLine);
      assertEquals(1, token4.endLine);
      assertEquals(2, token4.endColumn);
      assertEquals(2, token4.beginColumn);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("\u0088", token4.toString());
      assertNotNull(token4);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertNotNull(jVCParserTokenManager1);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token5 = jVCParserTokenManager1.getNextToken();
      assertEquals(1, token5.endLine);
      assertEquals(16, token5.kind);
      assertEquals(1, token5.beginLine);
      assertEquals(1, token5.endColumn);
      assertEquals(1, token5.beginColumn);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals("\u0000", token5.toString());
      assertEquals(1, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertNotNull(token5);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token5, token1);
      assertNotSame(token5, token3);
      assertNotSame(token5, token4);
      assertNotSame(token5, token0);
      assertNotSame(token5, token2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream1, 2);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(1, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(1, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertNotNull(jVCParserTokenManager2);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token6 = jVCParserTokenManager2.getNextToken();
      assertEquals(1, token6.endLine);
      assertEquals(2, token6.endColumn);
      assertEquals(16, token6.kind);
      assertEquals(1, token6.beginLine);
      assertEquals(2, token6.beginColumn);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token5));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals("\u0088", token6.toString());
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(2, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertNotNull(token6);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertNotSame(token6, token3);
      assertNotSame(token6, token0);
      assertNotSame(token6, token2);
      assertNotSame(token6, token1);
      assertNotSame(token6, token4);
      assertNotSame(token6, token5);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token7 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token7.kind);
      assertEquals(1, token7.beginLine);
      assertEquals(3, token7.beginColumn);
      assertEquals(1, token7.endLine);
      assertEquals(3, token7.endColumn);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(token7.equals((Object)token1));
      assertFalse(token7.equals((Object)token2));
      assertFalse(token7.equals((Object)token3));
      assertFalse(token7.equals((Object)token5));
      assertFalse(token7.equals((Object)token0));
      assertFalse(token7.equals((Object)token4));
      assertFalse(token7.equals((Object)token6));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("\u0000", token7.toString());
      assertNotNull(token7);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(token7, token1);
      assertNotSame(token7, token2);
      assertNotSame(token7, token3);
      assertNotSame(token7, token5);
      assertNotSame(token7, token0);
      assertNotSame(token7, token4);
      assertNotSame(token7, token6);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager2);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      jVCParserTokenManager1.ReInit(simpleCharStream1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream1.bufpos);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(2, simpleCharStream1.getColumn());
      assertEquals(1, simpleCharStream1.getBeginLine());
      assertEquals(2, simpleCharStream1.getBeginColumn());
      assertEquals(1, simpleCharStream1.getEndLine());
      assertEquals(2, simpleCharStream1.getEndColumn());
      assertEquals(1, simpleCharStream1.getLine());
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0088', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager2.SwitchTo(16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 16. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[5] = 'w';
      charArray0[3] = '\\';
      boolean boolean0 = SimpleCharStream.staticFlag;
      assertFalse(boolean0);
      
      charArray0[6] = 'w';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', 'w', 'w'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', 'w', 'w'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', 'w', 'w'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("\u0000", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', 'w', 'w'}, charArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertNotNull(mockPrintStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', 'w', 'w'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertNotNull(jVCParserTokenManager1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', 'w', 'w'}, charArray0);
      
      jVCParserTokenManager0.setDebugStream(jVCParserTokenManager1.debugStream);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', 'w', 'w'}, charArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token1.endColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("\u0000", token1.toString());
      assertNotNull(token1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', 'w', 'w'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, 2);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertNotNull(jVCParserTokenManager2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', 'w', 'w'}, charArray0);
      
      Token token2 = jVCParserTokenManager1.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.endColumn);
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.beginColumn);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals("\u0000", token2.toString());
      assertNotNull(token2);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', 'w', 'w'}, charArray0);
      
      boolean boolean1 = simpleCharStream0.prevCharIsCR;
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', 'w', 'w'}, charArray0);
      
      Token token3 = jVCParserTokenManager2.getNextToken();
      assertEquals(16, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(6, token3.endColumn);
      assertEquals(6, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertEquals("w", token3.toString());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(6, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertNotNull(token3);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager2, jVCParserTokenManager1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', 'w', 'w'}, charArray0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(16);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Token token4 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token4.kind);
      assertEquals(1, token4.beginLine);
      assertEquals(7, token4.endColumn);
      assertEquals(7, token4.beginColumn);
      assertEquals(1, token4.endLine);
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager2));
      assertEquals("w", token4.toString());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertNotNull(token4);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', 'w', 'w'}, charArray0);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager2.SwitchTo(14);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 14. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[3] = '\\';
      boolean boolean0 = SimpleCharStream.staticFlag;
      assertFalse(boolean0);
      
      charArray0[6] = '^';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', '\u0000', '^'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', '\u0000', '^'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', '\u0000', '^'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', '\u0000', '^'}, charArray0);
      
      jVCParserTokenManager0.SwitchTo(1);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', '\u0000', '^'}, charArray0);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(16, token1.kind);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("\u0000", token1.toString());
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', '\u0000', '^'}, charArray0);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token2.endColumn);
      assertEquals(16, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token2.toString());
      assertNotNull(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', '\u0000', '^'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', '\u0000', '^'}, charArray0);
      
      jVCParserTokenManager0.SwitchTo(3);
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', '\u0000', '^'}, charArray0);
      
      Token token3 = jVCParserTokenManager0.getNextToken();
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(6, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(6, token3.beginColumn);
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(6, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals("\u0000", token3.toString());
      assertNotNull(token3);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', '\u0000', '^'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager2 = new JVCParserTokenManager(simpleCharStream0, 1);
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager2.equals((Object)jVCParserTokenManager0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(6, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertNotNull(jVCParserTokenManager2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', '\u0000', '^'}, charArray0);
      
      Token token4 = jVCParserTokenManager0.getNextToken();
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token4.kind);
      assertEquals(1, token4.beginLine);
      assertEquals(7, token4.endColumn);
      assertEquals(1, token4.endLine);
      assertEquals(7, token4.beginColumn);
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertEquals("^", token4.toString());
      assertNotNull(token4);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', '\u0000', '^'}, charArray0);
      
      boolean boolean1 = simpleCharStream0.prevCharIsCR;
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', '\u0000', '^'}, charArray0);
      
      Token token5 = jVCParserTokenManager1.getNextToken();
      assertEquals(7, token5.endColumn);
      assertEquals(7, token5.beginColumn);
      assertEquals(1, token5.endLine);
      assertEquals(0, token5.kind);
      assertEquals(1, token5.beginLine);
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token2));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager2));
      assertEquals("", token5.toString());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(7, simpleCharStream0.getBeginColumn());
      assertNotNull(token5);
      assertNotSame(token5, token4);
      assertNotSame(token5, token1);
      assertNotSame(token5, token0);
      assertNotSame(token5, token3);
      assertNotSame(token5, token2);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\\', '\u0000', '\u0000', '^'}, charArray0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(329);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "^");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(jVCParserTokenManager0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jVCParserTokenManager0.SwitchTo(0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(3, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals("\u0000", token0.toString());
      assertNotNull(token0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      MockFile mockFile0 = new MockFile("<ESCAPED_CHAR>");
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("<ESCAPED_CHAR>", mockFile0.getName());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("<ESCAPED_CHAR>", mockFile0.toString());
      assertFalse(mockFile0.isDirectory());
      assertNotNull(mockFile0);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
}
