/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 16:41:37 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.DefaultFocusTraversalPolicy;
import java.awt.Dimension;
import java.awt.FocusTraversalPolicy;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseWheelListener;
import java.beans.EventSetDescriptor;
import java.beans.IntrospectionException;
import java.beans.beancontext.BeanContextServicesSupport;
import java.io.IOException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Vector;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JMenuItem;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.border.SoftBevelBorder;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuDragMouseEvent;
import javax.swing.plaf.basic.BasicDesktopIconUI;
import javax.swing.plaf.multi.MultiPanelUI;
import javax.swing.plaf.synth.SynthListUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.Capabilities;
import weka.core.FindWithCapabilities;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instances;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.Discretize;
import weka.filters.supervised.instance.SpreadSubsample;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.SysErrLog;
import weka.gui.WekaTaskMonitor;
import weka.gui.beans.Appender;
import weka.gui.beans.Associator;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Classifier;
import weka.gui.beans.ClassifierPerformanceEvaluator;
import weka.gui.beans.ClustererPerformanceEvaluator;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.GraphViewer;
import weka.gui.beans.IncrementalClassifierEvaluator;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceListener;
import weka.gui.beans.Loader;
import weka.gui.beans.MetaBean;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.SerializedModelSaver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetMaker;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetMaker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.addKeyListener((KeyListener) null);
      MetaBean metaBean0 = new MetaBean();
      metaBean0.getSize((Dimension) null);
      filter0.connectionNotification("lexy,4?D|5t+9C]", metaBean0);
      // Undeclared exception!
      try { 
        filter0.performRequest("lexy,4?D|5t+9C]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lexy,4?D|5t+9C] not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.performRequest("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      Filter filter0 = new Filter();
      filter0.stop();
      filter0.enumerateRequests();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.disconnectionNotification("", "");
      TextViewer textViewer0 = new TextViewer();
      String string0 = "tUBOLM;Cn8^";
      textViewer0.firePropertyChange("tUBOLM;Cn8^", 405L, 2586L);
      filter0.getComponentListeners();
      filter0.addTrainingSetListener(textViewer0);
      filter0.useDefaultVisual();
      Add add0 = new Add();
      filter0.setFilter(add0);
      filter0.addTestSetListener(textViewer0);
      filter0.getVisual();
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      ArffLoader arffLoader0 = new ArffLoader();
      try { 
        arffLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getFocusTraversalPolicy();
      filter0.disconnectionNotification("trainingSet", (Object) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionAllowed("@|HzJKM6C9S3~]&");
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      filter0.setFilter(spreadSubsample0);
      assertEquals("SpreadSubsample", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      Classifier classifier0 = new Classifier();
      classifier0.getAlignmentY();
      classifier0.m_oldText = "trainingSet";
      classifier0.getToolTipText();
      filter0.removeTestSetListener(classifier0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.invalidate();
      filter0.connectionAllowed("Stop");
      Associator associator0 = new Associator();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      associator0.removeMouseWheelListener((MouseWheelListener) null);
      filter0.removeDataSourceListener(associator0);
      filter0.getCustomName();
      filter0.addTrainingSetListener(associator0);
      BeanVisual beanVisual0 = filter0.getVisual();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      InputMap inputMap0 = filter0.getInputMap();
      // Undeclared exception!
      try { 
        beanVisual0.setInputMap((-1181), inputMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition must be one of JComponent.WHEN_IN_FOCUSED_WINDOW, JComponent.WHEN_FOCUSED or JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      BeanVisual beanVisual0 = classifierPerformanceEvaluator0.getVisual();
      ActionMap actionMap0 = new ActionMap();
      actionMap0.getParent();
      beanVisual0.setActionMap(actionMap0);
      beanVisual0.getMouseWheelListeners();
      filter0.setVisual(beanVisual0);
      filter0.m_visual = beanVisual0;
      beanVisual0.getMaximumSize();
      Classifier classifier0 = new Classifier();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(classifier0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.Classifier : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getCursor();
      filter0.setFocusTraversalPolicy((FocusTraversalPolicy) null);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      filter0.globalInfo();
      MultiPanelUI multiPanelUI0 = new MultiPanelUI();
      filter0.setUI(multiPanelUI0);
      FlowByExpression.ExpressionClause.ExpressionType flowByExpression_ExpressionClause_ExpressionType0 = FlowByExpression.ExpressionClause.ExpressionType.ISMISSING;
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(flowByExpression_ExpressionClause_ExpressionType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.FlowByExpression$ExpressionClause$ExpressionType$7 : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      KeyListener keyListener0 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      KeyListener keyListener1 = mock(KeyListener.class, new ViolatedAssumptionAnswer());
      KeyListener keyListener2 = AWTEventMulticaster.add(keyListener0, keyListener1);
      AWTEventMulticaster.remove(keyListener2, keyListener2);
      filter0.addKeyListener((KeyListener) null);
      filter0.setInheritsPopupMenu(false);
      filter0.getCustomName();
      Classifier classifier0 = new Classifier();
      filter0.removeInstanceListener(classifier0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(flowByExpression0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.FlowByExpression : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.useDefaultVisual();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      filter0.removeTrainingSetListener(attributeSummarizer0);
      boolean boolean0 = filter0.isBusy();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getGraphicsConfiguration();
      Filter filter1 = new Filter();
      filter0.addDataSourceListener(filter1);
      filter0.isBusy();
      filter0.isBusy();
      Class<Method> class0 = Method.class;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "D;J&):UkF^FnIGiQ)rt";
      stringArray0[1] = "D;J&):UkF^FnIGiQ)rt";
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter1.acceptInstance(instanceEvent0);
      stringArray0[2] = "D;J&):UkF^FnIGiQ)rt";
      stringArray0[3] = "D;J&):UkF^FnIGiQ)rt";
      stringArray0[4] = "D;J&):UkF^FnIGiQ)rt";
      EventSetDescriptor eventSetDescriptor0 = null;
      try {
        eventSetDescriptor0 = new EventSetDescriptor(class0, "D;J&):UkF^FnIGiQ)rt", class0, stringArray0, "D;J&):UkF^FnIGiQ)rt", "D;J&):UkF^FnIGiQ)rt");
        fail("Expecting exception: IntrospectionException");
      
      } catch(Throwable e) {
         //
         // Method not found: D;J&):UkF^FnIGiQ)rt on class java.lang.reflect.Method
         //
         verifyException("java.beans.EventSetDescriptor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.remove((MouseListener) defaultCaret0, (MouseListener) defaultCaret0);
      MouseListener mouseListener0 = AWTEventMulticaster.add((MouseListener) null, (MouseListener) defaultCaret0);
      filter0.addMouseListener(mouseListener0);
      filter0.getWrappedAlgorithm();
      filter0.getClientProperty(defaultCaret0);
      TextViewer textViewer0 = new TextViewer();
      filter0.addTrainingSetListener(textViewer0);
      filter0.enumerateRequests();
      BasicDesktopIconUI basicDesktopIconUI0 = new BasicDesktopIconUI();
      // Undeclared exception!
      try { 
        basicDesktopIconUI0.getMinimumSize(textViewer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.basic.BasicDesktopIconUI", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      filter0.removeTrainingSetListener(attributeSummarizer0);
      filter0.enumerateRequests();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      MenuElement[] menuElementArray0 = new MenuElement[2];
      DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction0 = new DefaultEditorKit.InsertTabAction();
      JMenuItem jMenuItem0 = new JMenuItem(defaultEditorKit_InsertTabAction0);
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem();
      menuElementArray0[1] = (MenuElement) jRadioButtonMenuItem0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      SynthListUI synthListUI0 = new SynthListUI();
      defaultEditorKit_InsertTabAction0.addPropertyChangeListener(synthListUI0);
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(filter0, (-518), 19L, 0, 13, 1600, 2000, false, menuElementArray0, menuSelectionManager0);
      filter0.getToolTipText((MouseEvent) null);
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.removeDataSourceListener(crossValidationFoldMaker0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      boolean boolean0 = filter0.connectionAllowed("7 Ku`d7h:");
      assertTrue(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Filter filter0 = new Filter();
      Classifier classifier0 = new Classifier();
      Appender appender0 = new Appender();
      Instances instances0 = appender0.m_completeHeader;
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(classifier0, (Instances) null, (-907), (-907), (-907), 222);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Instances instances0 = predictionAppender0.m_format;
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      filter0.connectionNotification("t2nygSet", clustererPerformanceEvaluator0);
      filter0.stop();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      Color color0 = Color.PINK;
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(0, color0, color0, color0, color0);
      softBevelBorder0.getShadowInnerColor((Component) trainingSetMaker0);
      filter0.setBorder(softBevelBorder0);
      Logger logger0 = trainingSetMaker0.m_logger;
      filter0.setLog((Logger) null);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Vector) null, (Vector) null);
      filter0.connectionNotification("6V*|p6&da", defaultTableModel0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Received ");
      InstanceEvent instanceEvent0 = new InstanceEvent(softBevelBorder0, (Instances) null);
      filter0.acceptInstance(instanceEvent0);
      // Undeclared exception!
      try { 
        filter0.performRequest("<CRITERE name=\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // <CRITERE name=\" not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.addKeyListener((KeyListener) null);
      MetaBean metaBean0 = new MetaBean();
      Discretize discretize0 = new Discretize();
      filter0.setWrappedAlgorithm(discretize0);
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.removeDataSourceListener(crossValidationFoldMaker0);
      assertEquals("Discretize", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0);
      filter0.notifyInstanceListeners(instanceEvent0);
      boolean boolean0 = filter0.eventGeneratable("/I&Adv");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      MetaBean metaBean0 = new MetaBean();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      metaBean0.setFocusTraversalPolicy(defaultFocusTraversalPolicy0);
      metaBean0.getSize((Dimension) null);
      boolean boolean0 = filter0.eventGeneratable("trainingSet");
      assertFalse(boolean0);
      
      filter0.useDefaultVisual();
      Sorter sorter0 = new Sorter();
      BeanContextServicesSupport beanContextServicesSupport0 = new BeanContextServicesSupport();
      Locale locale0 = Locale.ROOT;
      filter0.removeTrainingSetListener(sorter0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.addAncestorListener((AncestorListener) null);
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      filter0.removeTrainingSetListener(attributeSummarizer0);
      filter0.stop();
      filter0.setCustomName((String) null);
      assertFalse(filter0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getCursor();
      filter0.setFocusTraversalKeysEnabled(true);
      filter0.isBusy();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      Logger logger0 = classValuePicker0.m_logger;
      filter0.setLog((Logger) null);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      Sorter sorter0 = new Sorter();
      filter0.removeDataSourceListener(sorter0);
      Random.setNextRandom((-2405));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      Random.setNextRandom((-1522));
      Saver saver0 = new Saver();
      BeanVisual beanVisual0 = saver0.getVisual();
      filter0.setVisual(beanVisual0);
      TestSetEvent testSetEvent0 = new TestSetEvent(beanVisual0, (Instances) null, (-1522), 1);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("ArffSaver", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      MetaBean metaBean0 = new MetaBean();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("<!-- globalinfo-end -->", arrayList0, 0);
      DataSetEvent dataSetEvent0 = new DataSetEvent(globalInfoJavadoc0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      Sorter sorter0 = new Sorter();
      filter0.removeDataSourceListener(sorter0);
      Random.setNextRandom((-747));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("trainingSet", "trainingSet");
      filter0.connectionNotification("can't process streamed instances; can't continue", "trainingSet");
      // Undeclared exception!
      try { 
        filter0.eventGeneratable((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      MetaBean metaBean0 = new MetaBean();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      filter0.connectionNotification("trainingSet", "trainingSet");
      filter0.connectionNotification("", "trainingSet");
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      BeanVisual beanVisual0 = serializedModelSaver0.getVisual();
      filter0.setVisual(beanVisual0);
      assertEquals("SerializedModelSaver", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      MetaBean metaBean0 = new MetaBean();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      GlobalInfoJavadoc globalInfoJavadoc0 = new GlobalInfoJavadoc();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("<!-- globalinfo-end -->", arrayList0, 0);
      DataSetEvent dataSetEvent0 = new DataSetEvent(globalInfoJavadoc0, instances0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestSetEvent testSetEvent0 = new TestSetEvent(findWithCapabilities0, instances0, 350, 1402);
      filter0.acceptTestSet(testSetEvent0);
      Filter filter1 = new Filter();
      boolean boolean0 = filter1.isBusy();
      assertEquals("AllFilter", filter1.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Filter filter0 = new Filter();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      filter0.connectionNotification("trainingSet", mockMinguoDate0);
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      filter0.connectionNotification("trainingSet", incrementalClassifierEvaluator0);
      filter0.addInstanceListener((InstanceListener) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getFocusListeners();
      filter0.stop();
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      filter0.getWrappedAlgorithm();
      ClassAssigner classAssigner0 = new ClassAssigner();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      filter0.addInstanceListener(classAssigner0);
      filter0.getInputVerifier();
      IncrementalClassifierEvaluator incrementalClassifierEvaluator0 = new IncrementalClassifierEvaluator();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Instances instances0 = substringLabeler0.m_outputStructure;
      DataSetEvent dataSetEvent0 = new DataSetEvent(incrementalClassifierEvaluator0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      Random.setNextRandom(17);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      instanceEvent0.setStatus(17);
      filter0.getWrappedAlgorithm();
      filter0.notifyInstanceListeners(instanceEvent0);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(incrementalClassifierEvaluator0, (Instances) null, 2, 17);
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Filter filter0 = new Filter();
      JComponent.getDefaultLocale();
      boolean boolean0 = filter0.eventGeneratable("configuration");
      assertTrue(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Filter filter0 = new Filter();
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      filter0.connectionNotification("t2nygSet", clustererPerformanceEvaluator0);
      Locale locale0 = Locale.JAPAN;
      boolean boolean0 = filter0.eventGeneratable("t2nygSet");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Filter filter0 = new Filter();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      filter0.connectionNotification("h7CqVz#30\"J#?XUC[[", "h7CqVz#30\"J#?XUC[[");
      JComponent.getDefaultLocale();
      boolean boolean0 = filter0.eventGeneratable("h7CqVz#30\"J#?XUC[[");
      assertTrue(boolean0);
      
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.addDataSourceListener(trainTestSplitMaker0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      filter0.connectionNotification("trainingSet", "trainingSet");
      Associator associator0 = new Associator();
      associator0.getStructure("trainingSet");
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Filter filter0 = new Filter();
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      Associator associator0 = new Associator();
      filter0.connectionNotification("t2nygSet", associator0);
      boolean boolean0 = filter0.eventGeneratable("t2nygSet");
      assertTrue(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Filter filter0 = new Filter();
      SysErrLog sysErrLog0 = new SysErrLog();
      sysErrLog0.logMessage("FL20i-1}#X?5nf.y");
      filter0.setLog(sysErrLog0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Filter filter0 = new Filter();
      SysErrLog sysErrLog0 = new SysErrLog();
      filter0.setLog(sysErrLog0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.acceptTrainingSet((TrainingSetEvent) null);
      TestSetMaker testSetMaker0 = new TestSetMaker();
      BeanVisual beanVisual0 = testSetMaker0.getVisual();
      filter0.setVisual(beanVisual0);
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("TestSetMaker", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.eventGeneratable("Save as...");
      assertFalse(boolean0);
      
      filter0.connectionNotification("instance", "instance");
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("dataSet", "dataSet");
      filter0.connectionNotification("ca8't process streamed instances; can'tucontinue", "dataSet");
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Filter filter0 = new Filter();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      filter0.connectionNotification("dataSet", serializedModelSaver0);
      GraphViewer graphViewer0 = new GraphViewer();
      filter0.connectionNotification("qWmp:qb{['", graphViewer0);
      MetaBean metaBean0 = new MetaBean();
      filter0.connectionNotification("testSet", "dataSet");
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      ClassAssigner classAssigner0 = new ClassAssigner();
      classAssigner0.getTransferHandler();
      filter0.addTestSetListener(classAssigner0);
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, instances0);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "again");
      InstanceEvent instanceEvent0 = predictionAppender0.m_instanceEvent;
      // Undeclared exception!
      try { 
        filter0.acceptInstance((InstanceEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DataSetEvent dataSetEvent0 = new DataSetEvent(instances0, instances0);
      DataSetEvent dataSetEvent1 = new DataSetEvent(textDirectoryLoader0, instances0);
      filter0.acceptDataSet(dataSetEvent1);
      assertEquals("MultiFilter", filter0.getCustomName());
  }
}
