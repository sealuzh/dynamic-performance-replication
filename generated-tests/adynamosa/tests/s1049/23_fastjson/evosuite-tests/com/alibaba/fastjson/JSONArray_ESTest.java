/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 25 09:18:35 GMT 2019
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.Writer;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.containsAll(jSONArray0);
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedList0);
      jSONArray0.isEmpty();
      SerializeConfig serializeConfig0 = new SerializeConfig(3089);
      LinkedList<Annotation> linkedList1 = new LinkedList<Annotation>();
      SerializerFeature serializerFeature0 = SerializerFeature.IgnoreNonFieldGetter;
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, serializerFeature0);
      jSONArray2.isEmpty();
      SerializeConfig serializeConfig1 = new SerializeConfig(3063);
      jSONArray1.getJSONObject(3050);
      Class<JSONScanner> class0 = JSONScanner.class;
      Class<JSONObject> class1 = JSONObject.class;
      FieldInfo.getFieldType(class1, class0, class0);
      jSONArray1.setComponentType(class0);
      Integer integer0 = new Integer((-1316));
      LinkedList<String> linkedList2 = new LinkedList<String>();
      jSONArray1.containsAll(jSONArray0);
      Integer integer1 = new Integer(2354);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      LinkedList<BufferedInputStream> linkedList3 = new LinkedList<BufferedInputStream>();
      jSONArray2.getTimestamp(3067);
      jSONArray1.getComponentType();
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46", 989);
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      int int0 = 3928;
      JSONScanner jSONScanner1 = new JSONScanner("1.2.46");
      JSONArray jSONArray2 = jSONArray0.fluentSet(397, jSONScanner1);
      jSONArray1.fluentRemoveAll(linkedList0);
      JSONArray jSONArray3 = new JSONArray(397);
      jSONArray3.isEmpty();
      SerializeConfig serializeConfig0 = new SerializeConfig(989);
      jSONArray2.getJSONObject(397);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Integer integer0 = new Integer(2101);
      jSONArray1.fluentAdd((Object) null);
      JSONArray jSONArray4 = new JSONArray(188);
      jSONArray4.containsAll(jSONArray0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      // Undeclared exception!
      try { 
        jSONArray3.getShortValue(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONScanner jSONScanner0 = new JSONScanner("1.2.46", 989);
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3928, bufferedInputStream0);
      jSONArray0.isEmpty();
      jSONArray2.removeAll(linkedList0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Class<SerializerFeature> class0 = SerializerFeature.class;
      jSONArray2.getObject(3089, class0);
      Integer integer0 = new Integer(0);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray3 = jSONArray2.fluentAdd(3089, (Object) uTF8Decoder0);
      jSONArray0.getComponentType();
      jSONArray3.getJSONArray(1);
      jSONArray0.clone();
      assertEquals(3930, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = " - ";
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      int int0 = 69;
      List<Object> list0 = jSONArray0.subList(0, 0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = JSON.DEFAULT_PARSER_FEATURE;
      // Undeclared exception!
      try { 
        jSONArray0.subList((-1527), 3055);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1527
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, linkedList0);
      jSONArray0.isEmpty();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSON.toJSON((Object) linkedList0);
      jSONArray1.removeAll(linkedList0);
      Class<ByteArrayOutputStream> class0 = ByteArrayOutputStream.class;
      JSON.parseArray((String) null, class0);
      LinkedHashSet<InputStream> linkedHashSet0 = new LinkedHashSet<InputStream>();
      jSONArray1.retainAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(0, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Annotation> linkedList0 = new LinkedList<Annotation>();
      jSONArray0.fluentSet(0, linkedList0);
      jSONArray0.isEmpty();
      SerializeConfig serializeConfig0 = new SerializeConfig(3089);
      // Undeclared exception!
      try { 
        jSONArray0.getDate(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "s=");
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[3];
      JSONObject jSONObject0 = new JSONObject(989, false);
      JSONObject jSONObject1 = jSONObject0.fluentRemove((Object) null);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = (JSONArray)JSON.toJSON((Object) jSONArray1);
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-1);
      JSON.parse(byteArray0, featureArray0);
      JSONObject jSONObject2 = jSONObject1.fluentPut("s=", (Object) null);
      Collection<Object> collection0 = jSONObject2.values();
      jSONArray0.containsAll(collection0);
      Integer integer0 = new Integer(989);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 3089;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hicbGysY9iatQJ<J");
      integerArray0[1] = (Integer) 3089;
      jSONObject2.getBoolean("");
      integerArray0[2] = (Integer) 3089;
      integerArray0[3] = (Integer) 989;
      integerArray0[4] = (Integer) 989;
      Class<Annotation> class0 = Annotation.class;
      jSONArray0.toJavaList(class0);
      jSONArray2.toArray(integerArray0);
      Class<Field> class1 = Field.class;
      jSONArray1.toJavaList(class1);
      jSONArray1.lastIndexOf("");
      jSONArray0.retainAll(collection0);
      // Undeclared exception!
      try { 
        jSONArray1.set((-1943), collection0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      Collection<String> collection0 = null;
      Class<Locale.LanguageRange> class0 = Locale.LanguageRange.class;
      List<Locale.LanguageRange> list0 = jSONArray0.toJavaList(class0);
      List<String> list1 = Locale.filterTags(list0, (Collection<String>) null);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list1);
      // Undeclared exception!
      try { 
        jSONArray1.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3089, (Object) null);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray0.equals(jSONArray1);
      jSONArray1.getDate(989);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      JSONArray jSONArray2 = jSONArray0.fluentSet(3089, uTF8Decoder0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Integer> class0 = Integer.class;
      JSON.defaultLocale = jSONArray2.defaultLocale;
      FieldInfo.getFieldType(class0, class0, parameterizedTypeImpl0);
      jSONArray0.getObject(1028, (Type) parameterizedTypeImpl0);
      MockDate mockDate0 = new MockDate(1019, 3089, 1032, 1021, 3089, 49);
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray1);
      jSONArray0.addAll((Collection<?>) jSONArray1);
      JSONArray jSONArray4 = jSONArray2.fluentAddAll(638, (Collection<?>) jSONArray1);
      jSONArray3.getShort(1021);
      jSONArray2.toArray();
      jSONArray1.indexOf(parameterizedTypeImpl0);
      // Undeclared exception!
      jSONArray4.removeAll(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(1063, (Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Object> class0 = Object.class;
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      FieldInfo.getFieldType(class0, class0, parameterizedTypeImpl0);
      jSONArray0.getObject(1063, (Type) class0);
      Integer integer0 = new Integer((-3387));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONArray0.containsAll(linkedList0);
      SerializeConfig serializeConfig0 = new SerializeConfig(989);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("com.alibaba.fastjson.JSONArray");
      jSONArray0.addAll(0, (Collection<?>) linkedHashSet0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      serializeConfig0.propertyNamingStrategy = propertyNamingStrategy0;
      int int0 = 1;
      // Undeclared exception!
      try { 
        jSONArray0.getByte(3701);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3701, Size: 1065
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.add(0, (Object) unaryOperator0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<JSONArray> class0 = JSONArray.class;
      Type type0 = FieldInfo.getFieldType(class0, parameterizedTypeImpl0, class0);
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, type0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      jSONArray0.setRelatedArray(fileSystemHandling0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(3043);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3043, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      Collection<Object> collection0 = jSONObject0.values();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, UTF8Decoder> function0 = (Function<Object, UTF8Decoder>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ?>) function0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(collection0);
      jSONArray1.replaceAll(unaryOperator0);
      Integer integer0 = new Integer(663);
      jSONObject0.getBoolean("");
      // Undeclared exception!
      try { 
        jSONArray0.toArray((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.add(0, (Object) unaryOperator0);
      jSONArray0.isEmpty();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Class<Integer> class0 = Integer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      jSONArray0.getObject(0, (Type) null);
      int int0 = 49;
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : java.util.function.UnaryOperator$$Lambda$49/2111917887@52b38eaa
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3089, (Object) null);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray0.isEmpty();
      jSONArray1.getDate(989);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Integer> class0 = Integer.class;
      FieldInfo.getFieldType(class0, class0, parameterizedTypeImpl0);
      jSONArray0.getObject(1028, (Type) parameterizedTypeImpl0);
      MockDate mockDate0 = new MockDate();
      jSONArray1.getTimestamp(3089);
      jSONArray0.fluentRetainAll(jSONArray1);
      JSONArray jSONArray2 = jSONArray0.fluentAdd(49, (Object) null);
      jSONArray0.addAll((Collection<?>) jSONArray2);
      jSONArray2.isEmpty();
      jSONArray1.fluentRemove((Object) null);
      jSONArray0.getDouble(224);
      jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray2.getRelatedArray();
      jSONArray2.toArray();
      boolean boolean0 = jSONArray1.getBooleanValue(989);
      assertEquals(12362, jSONArray1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3089, (Object) null);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray0.equals(jSONArray1);
      MockDate mockDate0 = new MockDate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      JSONArray jSONArray2 = jSONArray0.fluentSet(3089, uTF8Decoder0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<Integer> class0 = Integer.class;
      FieldInfo.getFieldType(class0, class0, parameterizedTypeImpl0);
      jSONArray0.getObject(1028, (Type) parameterizedTypeImpl0);
      MockDate mockDate1 = new MockDate(1019, 3089, 1032, 1021, 3089, 49);
      jSONArray2.fluentRetainAll(jSONArray1);
      jSONArray1.addAll((Collection<?>) jSONArray0);
      jSONArray0.equals(parameterizedTypeImpl0);
      Class<ByteArrayInputStream> class1 = ByteArrayInputStream.class;
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.CustomMapDeserializer;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowUnQuotedFieldNames;
      featureArray0[1] = feature1;
      // Undeclared exception!
      try { 
        JSON.parseObject("<.B&^jmV", class1, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 1, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.isEmpty();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.add(0, (Object) unaryOperator0);
      jSONArray0.isEmpty();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      JSONObject jSONObject0 = jSONArray0.getJSONObject(0);
      jSONObject0.clear();
      int int0 = 1067;
      MockDate mockDate0 = new MockDate(1075, 3089, (-383), 1084, 1403, 944);
      int int1 = 55;
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.util.function.UnaryOperator$$Lambda$49/2111917887@52b38eaa
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.add(0, (Object) unaryOperator0);
      jSONArray0.isEmpty();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray0.listIterator(0);
      Class<JSONObject> class0 = JSONObject.class;
      // Undeclared exception!
      try { 
        jSONArray0.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.add(0, (Object) unaryOperator0);
      jSONArray0.isEmpty();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2186);
      jSONArray0.set(2186, byteArrayOutputStream0);
      jSONArray0.getShort(426);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.util.function.UnaryOperator$$Lambda$49/2111917887@52b38eaa
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<BufferedInputStream> class0 = BufferedInputStream.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(jSONType0).builder();
      Class<?> class1 = JavaBeanInfo.getBuilderClass(jSONType0);
      jSONArray0.componentType = (Type) class1;
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      jSONArray0.add(0, (Object) unaryOperator0);
      jSONArray0.remove((Object) "@type");
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.util.function.UnaryOperator$$Lambda$49/2111917887@52b38eaa
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Function<Object, ByteArrayInputStream> function0 = (Function<Object, ByteArrayInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.add(0, (Object) unaryOperator0);
      Stream<Object> stream0 = jSONArray0.stream();
      jSONArray0.set(0, stream0);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.util.stream.ReferencePipeline$Head@63212175
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONArray0.add(0, (Object) unaryOperator0);
      jSONArray0.isEmpty();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray0.getJSONObject(0);
      Integer integer0 = new Integer(989);
      jSONArray0.containsAll(linkedList1);
      jSONArray0.fluentRemove(0);
      jSONArray0.remove((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(2158);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2158, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.add(0, (Object) unaryOperator0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray0.getJSONObject(0);
      Integer integer0 = new Integer(1514);
      jSONArray0.containsAll(linkedList0);
      JSONArray jSONArray1 = jSONArray0.fluentRemove(0);
      assertEquals(0, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      assertTrue(jSONArray0.isEmpty());
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.add(0, (Object) unaryOperator0);
      jSONArray0.isEmpty();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", '6 s");
      jSONArray0.getJSONObject(0);
      Integer integer0 = new Integer(1514);
      boolean boolean0 = jSONArray0.containsAll(linkedList0);
      assertFalse(jSONArray0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.values();
      Class<JSONObject> class0 = JSONObject.class;
      JSON.parseArray("", class0);
      // Undeclared exception!
      try { 
        jSONArray0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3089, (Object) null);
      jSONArray0.getShortValue(989);
      Integer integer0 = new Integer(3089);
      jSONArray0.getByte((short)0);
      jSONArray0.getBigInteger((short)0);
      jSONArray0.getFloatValue(951);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      // Undeclared exception!
      try { 
        jSONArray0.subList(951, (short)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(951) > toIndex(0)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      jSONArray0.add(0, (Object) unaryOperator0);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.util.function.UnaryOperator$$Lambda$49/2111917887@52b38eaa
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      jSONArray0.add(0, (Object) unaryOperator0);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : java.util.function.UnaryOperator$$Lambda$49/2111917887@52b38eaa
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      jSONArray0.contains(byteArrayInputStream0);
      Integer integer1 = new Integer(947);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.contains(jSONArray0);
      jSONArray0.getComponentType();
      jSONArray1.iterator();
      jSONArray1.setComponentType((Type) null);
      assertEquals(0, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray0.set(3089, uTF8Decoder0);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.getObject(989, (Type) parameterizedTypeImpl0);
      Integer integer0 = new Integer(989);
      jSONArray0.getFloatValue(989);
      jSONArray0.isEmpty();
      jSONArray0.getByteValue(989);
      boolean boolean0 = jSONArray0.contains(parameterizedTypeImpl0);
      assertEquals(3090, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      int int0 = 912;
      jSONArray1.set(912, jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getLong(912);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[10];
      jSONArray0.set(1089, (Object) null);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[1] = serializerFeature0;
      Class<Object> class0 = Object.class;
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      FieldInfo.getFieldType(class0, class0, parameterizedTypeImpl0);
      jSONArray0.getObject(1089, (Type) class0);
      int int0 = 2615;
      int int1 = 1067;
      MockDate mockDate0 = new MockDate((-2328), 2615, (-2133), 603, 989, 1067);
      jSONArray0.getSqlDate(55);
      jSONArray0.clone();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-2328));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      Function.identity();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      jSONArray0.add(0, (Object) unaryOperator0);
      jSONArray0.isEmpty();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      jSONArray0.addAll(0, (Collection<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONObject cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      jSONArray0.set(1089, uTF8Decoder0);
      Class<Object> class0 = Object.class;
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      FieldInfo.getFieldType(class0, class0, parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        jSONArray0.getObject(1089, (Type) parameterizedTypeImpl0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(1089, (Object) null);
      jSONArray0.getLong(1089);
      jSONArray0.indexOf((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(3108);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3108, Size: 1090
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[10];
      jSONArray0.set(1089, (Object) null);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteClassName;
      serializerFeatureArray0[1] = serializerFeature0;
      Class<Object> class0 = Object.class;
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      FieldInfo.getFieldType(class0, class0, parameterizedTypeImpl0);
      jSONArray0.getObject(1089, (Type) class0);
      MockDate mockDate0 = new MockDate((-2328), 2615, (-2133), 603, 1, 1067);
      JSONArray jSONArray1 = jSONArray0.fluentRemove(1089);
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      jSONArray1.getTimestamp(989);
      jSONArray1.addAll((Collection<?>) jSONArray1);
      assertEquals(4356, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(1108, (Object) null);
      jSONArray0.getShortValue(989);
      Integer integer0 = new Integer(3089);
      int int0 = (-2462);
      InputStream inputStream0 = null;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-2462), bufferedInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(985, (Object) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 986
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3476, "@type");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      Class<String> class0 = String.class;
      JSON.toJavaObject((JSON) jSONArray0, class0);
      int int0 = JSON.DEFAULT_GENERATE_FEATURE;
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(1083, (Collection<?>) linkedList0);
      byte[] byteArray0 = new byte[0];
      int int1 = jSONArray1.lastIndexOf((Object) null);
      assertEquals(3477, jSONArray0.size());
      assertEquals(3475, int1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3476, "@type");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      jSONArray0.getIntValue(1083);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(3476);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"@type\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      jSONArray0.add(0, (Object) unaryOperator0);
      jSONArray0.isEmpty();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        jSONArray0.getByte(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : java.util.function.UnaryOperator$$Lambda$49/2111917887@52b38eaa
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      jSONArray0.add(0, (Object) unaryOperator0);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : java.util.function.UnaryOperator$$Lambda$49/2111917887@52b38eaa
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3476, "@type");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      Class<String> class0 = String.class;
      JSON.toJavaObject((JSON) jSONArray0, class0);
      int int0 = jSONArray0.getIntValue(1083);
      assertEquals(3477, jSONArray0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3476, "@type");
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      Class<String> class0 = String.class;
      JSON.toJavaObject((JSON) jSONArray0, class0);
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(3476);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : @type
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1089;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      jSONArray0.set(1089, (Object) null);
      jSONArray0.getLong(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[1] = serializerFeature0;
      jSONArray0.getString(0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((-2290));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2290
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "s=";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "s=");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(989, false);
      jSONObject0.fluentRemove((Object) null);
      JSON.toJSON((Object) jSONArray0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) jSONArray0);
      jSONArray1.set(3089, "s=");
      // Undeclared exception!
      try { 
        jSONArray0.getByte(3089);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"s=\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      jSONArray0.set(1089, (Object) null);
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[1] = serializerFeature0;
      Class<Object> class0 = Object.class;
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>(989);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      jSONArray1.getByte(1089);
      jSONArray0.get(989);
      Class<Object> class1 = Object.class;
      Type type0 = FieldInfo.getFieldType(class1, class0, class1);
      jSONArray1.getObject(989, type0);
      MockDate mockDate0 = new MockDate(989, (-4114), 58, 2399, 1057, 3089);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAdd((-1107), (Object) jSONArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1107, Size: 1090
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(1083, (Object) null);
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      Class<String> class0 = String.class;
      JSON.toJavaObject((JSON) jSONArray0, class0);
      long long0 = jSONArray0.getLongValue(1083);
      assertEquals(1084, jSONArray0.size());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "s=");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(989, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)51;
      int int0 = 20;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)51, 20);
      jSONArray0.set(989, byteArrayInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("q6&T");
      Charset.defaultCharset();
      jSONArray0.getLong((byte)51);
      jSONArray0.getComponentType();
      ParserConfig parserConfig0 = ParserConfig.global;
      Object object0 = JSON.toJSON((Object) jSONObject0, parserConfig0);
      jSONArray0.equals(object0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(1089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1089, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1089;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        jSONArray0.get((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1089;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      jSONArray0.set(1089, (Object) null);
      jSONArray0.getLong(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[2] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.QuoteFieldNames;
      // Undeclared exception!
      try { 
        jSONArray0.getByte(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1090
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ull");
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(1089, (Object) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream("ull");
      Charset.defaultCharset();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "N{(G";
      stringArray0[1] = "@type";
      stringArray0[2] = "@type";
      stringArray0[3] = "ull";
      stringArray0[4] = "1.2.46";
      jSONArray0.getLong(1089);
      jSONArray0.getComponentType();
      jSONArray0.equals((Object) null);
      jSONArray0.getFloat(124);
      assertEquals(1090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(1089, (Object) null);
      jSONArray0.getDate(36);
      jSONArray0.getComponentType();
      jSONArray0.equals((Object) null);
      jSONArray0.getFloat(1089);
      assertEquals(1090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      jSONArray0.set(1089, (Object) null);
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[1] = serializerFeature0;
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = new JSONArray(50900);
      jSONArray0.getJSONObject(746);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      JSONArray jSONArray3 = new JSONArray();
      jSONArray3.fluentRetainAll(jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(50900);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 50900, Size: 1090
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      jSONArray0.set(1089, (Object) null);
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[1] = serializerFeature0;
      Class<Object> class0 = Object.class;
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      FieldInfo.getFieldType(class0, class0, parameterizedTypeImpl0);
      jSONArray0.getObject(1089, (Type) class0);
      MockDate mockDate0 = new MockDate((-2328), 2615, (-2133), 603, 1, 1067);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(3089, (Object) mockDate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1090
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1089;
      jSONArray0.set(1089, (Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getLong((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1089;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      jSONArray0.set(1089, (Object) null);
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[3] = serializerFeature1;
      // Undeclared exception!
      try { 
        jSONArray0.getByte(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1090
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.add((Object) "ull");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      jSONArray0.set(1089, (Object) null);
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[2] = serializerFeature1;
      jSONArray0.getByte(1);
      MockDate mockDate0 = new MockDate(1088, (-927), 1088, 1057, 1089, 1057);
      jSONArray0.getTimestamp(102);
      Class<JSONArray> class0 = JSONArray.class;
      jSONArray0.getObject(1047, class0);
      // Undeclared exception!
      try { 
        jSONArray0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "null,");
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.contains("null,");
      // Undeclared exception!
      try { 
        jSONArray0.getLong(992);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 992, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      jSONArray0.set(0, unaryOperator0);
      int int0 = 0;
      int int1 = 1;
      // Undeclared exception!
      try { 
        jSONArray0.getByte(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) linkedHashSet0);
      Integer integer0 = new Integer(4653);
      Integer integer1 = new Integer(3968);
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      integerArray0[1] = (Integer) 989;
      integerArray0[2] = (Integer) 3089;
      jSONArray1.toArray(integerArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      Byte byte0 = new Byte((byte) (-51));
      assertEquals((byte) (-51), (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1089;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      jSONArray0.set(1089, (Object) null);
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[2] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.QuoteFieldNames;
      // Undeclared exception!
      try { 
        jSONArray0.getByte(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1090
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.add((Object) jSONArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-51);
      JSONArray jSONArray2 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(true);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      int int0 = 21;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3089, 21);
      jSONObject0.fluentRemove(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAdd(3089, (Object) dataInputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ull");
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1089;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[8];
      jSONArray0.set(1089, (Object) null);
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[2] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.QuoteFieldNames;
      // Undeclared exception!
      try { 
        jSONArray0.getByte(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1090
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.add((Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.set((byte) (-51), jSONArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`@e:~xp2`1BE");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e]R<rmU");
      Class<Integer> class0 = Integer.class;
      JSON.parseArray("", class0);
      // Undeclared exception!
      try { 
        jSONArray0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "null,");
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1089;
      jSONArray0.set(1089, "@type");
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      SerializerFeature serializerFeature1 = SerializerFeature.PrettyFormat;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(1089);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      jSONArray0.add(0, (Object) unaryOperator0);
      jSONArray0.isEmpty();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.getString(0);
      SerializeConfig serializeConfig0 = new SerializeConfig(989, false);
      jSONArray0.fluentRemoveAll(linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ja\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "null,");
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1089;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      jSONArray0.set(1089, (Object) null);
      SerializerFeature serializerFeature0 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[1] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[2] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.QuoteFieldNames;
      jSONArray0.getByte(1089);
      serializerFeatureArray0[3] = serializerFeature2;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "null,", serializerFeatureArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "@type");
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      Class<JSONArray> class0 = JSONArray.class;
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      Integer[] integerArray0 = new Integer[7];
      integerArray0[0] = (Integer) 3089;
      integerArray0[1] = (Integer) 3089;
      integerArray0[2] = (Integer) 3089;
      integerArray0[3] = (Integer) 989;
      integerArray0[4] = (Integer) 989;
      integerArray0[5] = (Integer) 989;
      integerArray0[6] = (Integer) 989;
      jSONArray2.toArray(integerArray0);
      Integer[] integerArray1 = new Integer[5];
      integerArray1[0] = (Integer) 989;
      integerArray1[1] = (Integer) 989;
      integerArray1[2] = (Integer) 989;
      integerArray1[3] = (Integer) 3089;
      integerArray1[4] = (Integer) 989;
      jSONArray2.toArray(integerArray1);
      Class<Field> class1 = Field.class;
      Class<Field> class2 = Field.class;
      jSONArray2.toJavaList(class2);
      JSONObject jSONObject0 = new JSONObject(true);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", treeMap0);
      FieldInfo fieldInfo0 = new FieldInfo("", class1, class2, class1, (Field) null, (int) integerArray1[1], 90, 403);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      Class<Annotation> class3 = Annotation.class;
      beanContext0.getAnnation(class3);
      beanContext0.getField();
      jSONArray0.lastIndexOf((Object) null);
      jSONArray2.retainAll(jSONArray1);
      jSONArray2.setComponentType(class2);
      assertSame(jSONArray2, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "null,");
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1089;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      jSONArray0.set(1089, (Object) null);
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCheckSpecialChar;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.QuoteFieldNames;
      serializerFeatureArray0[3] = serializerFeature3;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) "null,", serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // write javaBean error, fastjson version 1.2.46, class java.lang.String, create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.JavaBeanSerializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.add((Object) jSONArray0);
      jSONArray1.toArray();
      Class<Field> class0 = Field.class;
      JSON.parseObject((String) null, class0);
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : [{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "s=");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(989, false);
      jSONObject0.fluentRemove((Object) null);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = (JSONArray)JSON.toJSON((Object) jSONArray1);
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-1);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray2.replaceAll(unaryOperator0);
      Integer integer0 = new Integer(989);
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = jSONArray0.toArray(integerArray0);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "s=");
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[3];
      JSONObject jSONObject0 = new JSONObject(989, false);
      JSONObject jSONObject1 = jSONObject0.fluentRemove((Object) null);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = (JSONArray)JSON.toJSON((Object) jSONArray1);
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-1);
      JSON.parse(byteArray0, featureArray0);
      JSONObject jSONObject2 = jSONObject1.fluentPut("s=", (Object) null);
      Collection<Object> collection0 = jSONObject2.values();
      boolean boolean0 = jSONArray0.containsAll(collection0);
      assertFalse(boolean0);
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray2.replaceAll(unaryOperator0);
      Integer integer0 = new Integer(989);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 3089;
      integerArray0[1] = (Integer) 3089;
      jSONObject2.getBoolean("");
      integerArray0[2] = (Integer) 3089;
      integerArray0[3] = (Integer) 989;
      integerArray0[4] = (Integer) 989;
      jSONArray2.toArray(integerArray0);
      Class<Field> class0 = Field.class;
      jSONArray1.toJavaList(class0);
      jSONArray1.lastIndexOf("");
      boolean boolean1 = jSONArray0.retainAll(collection0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "s=");
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[3];
      JSONObject jSONObject0 = new JSONObject(989, false);
      JSONObject jSONObject1 = jSONObject0.fluentRemove((Object) null);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = (JSONArray)JSON.toJSON((Object) jSONArray1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-1);
      JSON.parse(byteArray0, featureArray0);
      JSONObject jSONObject2 = jSONObject1.fluentPut("s=", (Object) null);
      Collection<Object> collection0 = jSONObject2.values();
      jSONArray0.containsAll(collection0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray2.replaceAll(unaryOperator0);
      Integer integer0 = new Integer(989);
      Integer[] integerArray0 = new Integer[5];
      integerArray0[0] = (Integer) 3089;
      integerArray0[1] = (Integer) 3089;
      jSONObject2.getBoolean("");
      integerArray0[2] = (Integer) 3089;
      integerArray0[3] = (Integer) 989;
      integerArray0[4] = (Integer) 989;
      jSONArray2.toArray(integerArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), (byte)46);
      jSONArray1.setRelatedArray((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.subList(951, (byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(951) > toIndex(-1)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 928;
      JSONArray jSONArray0 = new JSONArray(928);
      int int1 = (-1);
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-294), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(73);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        jSONArray0.toArray((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.parse("", (-201));
      Class<InputStream> class0 = InputStream.class;
      List<InputStream> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super JSONArray, ?>) function0);
      Function<Object, Field> function1 = (Function<Object, Field>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends Field>) function1);
      jSONArray1.replaceAll(unaryOperator0);
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.OrderedField;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowComment;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.AllowComment;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.CustomMapDeserializer;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AllowArbitraryCommas;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.DisableSpecialKeyDetect;
      featureArray0[5] = feature5;
      // Undeclared exception!
      try { 
        jSONArray1.add((-1067), (Object) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1067, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      jSONArray0.add(0, (Object) unaryOperator0);
      jSONArray0.isEmpty();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.getString(0);
      JSONArray jSONArray1 = new JSONArray(2489);
      jSONArray0.fluentRemoveAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getDate(99999999);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99999999, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@type";
      stringArray0[1] = "@type";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-2335));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1108;
      LinkedList<ByteArrayInputStream> linkedList0 = new LinkedList<ByteArrayInputStream>();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) linkedList0);
      jSONArray0.iterator();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)116;
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-51);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      linkedList0.offerLast(byteArrayInputStream0);
      JSONArray jSONArray3 = jSONArray2.fluentClear();
      linkedList0.removeAll(jSONArray3);
      // Undeclared exception!
      try { 
        jSONArray3.subList(933, 3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3089
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      jSONArray0.isEmpty();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SerializeWriter serializeWriter0 = new SerializeWriter();
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      jSONArray0.fluentAdd(0, (Object) null);
      jSONArray0.equals((Object) null);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      JSON.writeJSONString((Writer) serializeWriter0, (Object) null, serializerFeatureArray0);
      jSONArray0.removeAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-115);
      byteArray0[3] = (byte) (-1);
      byteArray0[2] = (byte) (-52);
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-31);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-93);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((byte) (-115));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xlnll,");
      JSONArray jSONArray0 = new JSONArray();
      SerializeWriter serializeWriter0 = new SerializeWriter();
      SerializerFeature serializerFeature0 = SerializerFeature.SortField;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      jSONArray0.lastIndexOf((Object) null);
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature0;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      serializerFeatureArray0[7] = serializerFeature0;
      serializerFeatureArray0[8] = serializerFeature0;
      JSON.writeJSONString((Writer) serializeWriter0, (Object) null, serializerFeatureArray0);
      ConcurrentHashMap.KeySetView<JSONObject, Boolean> concurrentHashMap_KeySetView0 = ConcurrentHashMap.newKeySet();
      jSONArray0.removeAll(concurrentHashMap_KeySetView0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-137));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "null,");
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList(69, 69);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 69
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(985, jSONArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      uTF8Decoder0.charset();
      // Undeclared exception!
      try { 
        jSONArray1.get(1081);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1081, Size: 986
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      jSONArray0.add(0, (Object) unaryOperator0);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.util.function.UnaryOperator$$Lambda$49/2111917887@52b38eaa
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) unaryOperator0);
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(jSONArray1);
      jSONArray1.fluentRemove((Object) jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp((byte)18);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 18, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(926);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 926, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.add(0, (Object) unaryOperator0);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[3];
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@type";
      stringArray0[1] = "@type";
      stringArray0[2] = "@type";
      stringArray0[3] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.util.function.UnaryOperator$$Lambda$49/2111917887@52b38eaa
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1);
      Class<ByteArrayInputStream> class0 = ByteArrayInputStream.class;
      LinkedList<ByteArrayInputStream> linkedList0 = new LinkedList<ByteArrayInputStream>();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) class0);
      JSONArray jSONArray2 = jSONArray1.fluentSet(989, linkedList0);
      jSONArray2.getJSONArray(1);
      // Undeclared exception!
      try { 
        jSONArray1.getFloat(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = new ParserConfig();
      JSONArray jSONArray1 = (JSONArray)JSON.toJSON((Object) jSONArray0, parserConfig0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(963, jSONArray1);
      jSONArray0.getBoolean(37);
      jSONArray1.getBooleanValue(30);
      // Undeclared exception!
      try { 
        jSONArray2.getDate(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 964
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(985, (Object) null);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray2.getDoubleValue(637);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", treeMap0);
      jSONArray1.fluentRemove((Object) null);
      assertEquals(985, jSONArray1.size());
      
      boolean boolean0 = jSONArray0.removeAll(jSONArray2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      JSONArray jSONArray3 = new JSONArray(929);
      JSONArray jSONArray4 = jSONArray0.fluentAdd((Object) jSONArray1);
      jSONArray4.fluentAddAll((Collection<?>) jSONArray2);
      jSONArray3.setRelatedArray(jSONArray2);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "s=");
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.SortFeidFastMatch;
      featureArray0[0] = feature0;
      JSONObject jSONObject0 = new JSONObject(989, false);
      JSONObject jSONObject1 = jSONObject0.fluentRemove((Object) null);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSON.toJSON((Object) jSONArray1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-1);
      JSON.parse(byteArray0, featureArray0);
      JSONObject jSONObject2 = jSONObject1.fluentPut("krCiBK|x3;V?iI", (Object) null);
      Collection<Object> collection0 = jSONObject2.values();
      jSONArray0.containsAll(collection0);
      jSONArray0.add((Object) null);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((int) 46, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-103));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-1664), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray(1253);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-88);
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1253, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp((byte) (-88));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.add((Object) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : [{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "");
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getDouble(929);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 929, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      jSONArray0.addAll((Collection<?>) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(937);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 937, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(923);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 923, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-1296);
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-1296));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParserConfig parserConfig0 = new ParserConfig();
      Object object0 = JSON.toJSON((Object) jSONArray0, parserConfig0);
      jSONArray0.fluentSet(963, object0);
      jSONArray0.getBoolean(37);
      assertEquals(964, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "s=");
      JSONArray jSONArray0 = new JSONArray();
      Feature[] featureArray0 = new Feature[3];
      Feature feature0 = Feature.SortFeidFastMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowSingleQuotes;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableFieldSmartMatch;
      featureArray0[2] = feature2;
      JSON.parseObject("", featureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(115);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 115, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue((-1664));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertNotNull(iterator0);
      
      int int0 = jSONArray0.lastIndexOf(iterator0);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<InputStream> class0 = InputStream.class;
      List<InputStream> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAdd((Object) byteArrayInputStream0);
      jSONArray2.fluentRemove((Object) "@type");
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache((String) null, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray(31);
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      JSONObject jSONObject0 = new JSONObject(860);
      Collection<Object> collection0 = jSONObject0.values();
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll(989, collection0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 3745;
      JSONArray jSONArray0 = new JSONArray(3745);
      JSON.toJSONString((Object) jSONArray0);
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(178);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 178, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      JSONObject jSONObject0 = new JSONObject(true);
      JSONObject jSONObject1 = jSONObject0.fluentPut("b)@z^%}9Q{`'\"", jSONArray0);
      Collection<Object> collection0 = jSONObject1.values();
      boolean boolean0 = jSONArray0.containsAll(collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray(951);
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean(3534);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3534, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-381);
      // Undeclared exception!
      try { 
        jSONArray0.getString((-381));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONScanner jSONScanner0 = new JSONScanner("[.=]6ZimI^]{");
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      charArray0[1] = '6';
      charArray0[2] = '$';
      Class<String> class0 = String.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.addAll((-1318), (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1318, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-2759));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      boolean boolean0 = jSONArray0.remove((Object) iterator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.addAll(327, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 327, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      jSONArray0.retainAll(linkedHashSet0);
      Iterator<Object> iterator0 = jSONArray0.iterator();
      jSONArray0.fluentSet((-1), iterator0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      Integer integer0 = new Integer(3089);
      jSONArray0.equals(integer0);
      // Undeclared exception!
      try { 
        jSONArray0.getDate(594);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 594, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(961);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 961, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      double double0 = new Integer(3089);
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>();
      boolean boolean0 = jSONArray0.removeAll(linkedHashSet0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.fluentRemove((Object) parameterizedTypeImpl0);
      Object object0 = JSON.parse("1.2.46", 0);
      jSONArray0.listIterator();
      int int0 = jSONArray0.lastIndexOf(object0);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1), (Type) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.iterator();
      jSONArray0.getRelatedArray();
      jSONArray0.clear();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator((-127));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -127
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      Collection<String> collection0 = null;
      jSONArray0.spliterator();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentSet(1023, integer0);
      boolean boolean0 = jSONArray0.containsAll(jSONArray1);
      assertEquals(1024, jSONArray0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yd~RU$:zF]fPy?");
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, "@type");
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray1.fluentAdd(0, (Object) jSONArray2);
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      ParserConfig.getFieldFromCache("@type", treeMap0);
      // Undeclared exception!
      try { 
        jSONArray3.fluentAdd((-47), (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -47, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JSONArray jSONArray1 = jSONArray0.fluentSet(7, mockFileInputStream0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove(7);
      // Undeclared exception!
      try { 
        jSONArray2.fluentAdd((-1), (Object) mockFileInputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 7
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue((-1898));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = 0;
      String string0 = "kotlin.ranges.ClosedFloatRange";
      Class<Field> class0 = Field.class;
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig.global = parserConfig0;
      // Undeclared exception!
      try { 
        jSONArray0.getByte(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      int int1 = 973;
      jSONArray0.contains((Object) null);
      Class<String> class0 = String.class;
      jSONArray0.toJavaList(class0);
      jSONArray0.hashCode();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(77);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 77, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      float float0 = new Integer(989);
      // Undeclared exception!
      try { 
        jSONArray0.remove((-889));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.getRelatedArray();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<JSONObject> linkedHashSet0 = new LinkedHashSet<JSONObject>();
      jSONArray0.fluentAddAll((Collection<?>) linkedHashSet0);
      jSONArray0.retainAll(linkedHashSet0);
      float float0 = new Integer(3089);
      assertEquals(3089, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toArray();
      Integer integer0 = new Integer(3089);
      int int0 = jSONArray0.indexOf(integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((-3284));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@type");
      jSONArray0.size();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(157);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 157, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<InputStream> class0 = InputStream.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-3994), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 308;
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(308);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 308
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSONArray0.getString(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<ByteArrayInputStream> linkedList0 = new LinkedList<ByteArrayInputStream>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove((-2478));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Type type0 = jSONArray0.componentType;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.fluentRemove((Object) parameterizedTypeImpl0);
      // Undeclared exception!
      try { 
        JSON.parse("1.2.46", 989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-2543));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(13);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "L(=aQ%;4}G");
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      JSONArray jSONArray3 = new JSONArray(989);
      JSONArray jSONArray4 = jSONArray2.fluentAdd((Object) jSONArray3);
      JSONArray jSONArray5 = jSONArray4.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray5.setRelatedArray((Object) null);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L(=aQ%;4}G");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONArray0.toJavaList((Class<String>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(2147483645);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483645, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(385, (Type) parameterizedTypeImpl0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 385, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L3");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getBigDecimal(9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(3089);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(1745);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1745, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-2115));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-441));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      UnaryOperator.identity();
      JSONArray jSONArray0 = new JSONArray(545);
      Type type0 = jSONArray0.getComponentType();
      assertNull(type0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.add((Object) linkedList0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONArray jSONArray1 = jSONArray0.getJSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      jSONArray0.add(0, (Object) unaryOperator0);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.util.function.UnaryOperator$$Lambda$49/2111917887@52b38eaa
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "lR>_\\+a5X-h4eFZ";
      Type type0 = null;
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.AutoCloseSource;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableASM;
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-214);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-214));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd(0, (Object) null);
      JSONArray jSONArray2 = jSONArray0.fluentAdd(0, (Object) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getDoubleValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      int int0 = 195;
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(195);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 195, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      jSONArray0.add(0, (Object) unaryOperator0);
      jSONArray0.add((Object) unaryOperator0);
      jSONArray0.remove(0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.util.function.UnaryOperator$$Lambda$49/2111917887@52b38eaa
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      jSONArray0.clone();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      jSONArray0.add((Object) unaryOperator0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((-344));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = jSONArray0.toJavaList(class0);
      jSONArray0.fluentRetainAll(list0);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-887));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      Class<Integer> class1 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class1);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(list0);
      Class<Integer> class2 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray1.getObject(0, class2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger((-936));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      jSONArray0.add(0, (Object) unaryOperator0);
      jSONArray0.add((Object) unaryOperator0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONObject cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      int int1 = 973;
      Class<String> class0 = String.class;
      jSONArray0.toJavaList(class0);
      jSONArray0.hashCode();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(77);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 77, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      jSONArray0.add(0, (Object) unaryOperator0);
      jSONArray0.add((Object) unaryOperator0);
      jSONArray0.remove(0);
      jSONArray0.remove((Object) unaryOperator0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<String> class0 = String.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 973;
      Class<String> class0 = String.class;
      Class<Integer> class1 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(973, class1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 973, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      jSONArray0.add(0, (Object) unaryOperator0);
      jSONArray0.add((Object) unaryOperator0);
      List<String> list0 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      jSONArray0.add(0, (Object) unaryOperator0);
      jSONArray0.add((Object) unaryOperator0);
      jSONArray0.remove(0);
      Class<String> class0 = String.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(2650);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2650, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.add(0, (Object) unaryOperator0);
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[3];
      Class<Integer> class0 = Integer.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@type";
      stringArray0[1] = "@type";
      stringArray0[2] = "@type";
      stringArray0[3] = "@type";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      serializeFilterArray0[0] = (SerializeFilter) simplePropertyPreFilter0;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      serializeFilterArray0[1] = (SerializeFilter) pascalNameFilter0;
      Class<Integer> class1 = Integer.class;
      SimplePropertyPreFilter simplePropertyPreFilter1 = new SimplePropertyPreFilter(class1, stringArray0);
      serializeFilterArray0[2] = (SerializeFilter) simplePropertyPreFilter1;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.toJSONString((Object) jSONArray0, serializeFilterArray0, serializerFeatureArray0);
      jSONArray0.add((Object) unaryOperator0);
      jSONArray0.remove(0);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      jSONArray0.add((Object) unaryOperator0);
      jSONArray0.remove(0);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      JSON.DEFFAULT_DATE_FORMAT = "@type";
      jSONArray0.add(0, (Object) unaryOperator0);
      jSONArray0.add((Object) unaryOperator0);
      jSONArray0.remove(0);
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONString();
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = ')';
      charArray0[2] = '?';
      charArray0[3] = '&';
      charArray0[4] = 'a';
      charArray0[5] = '';
      charArray0[6] = 'L';
      charArray0[7] = 'X';
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, (-352));
      jSONArray0.fluentClear();
      jSONArray0.toArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      int int0 = 14;
      // Undeclared exception!
      try { 
        jSONArray0.getString(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 973;
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(61);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray2.fluentRemove((Object) jSONArray1);
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.SortFeidFastMatch;
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      Feature feature1 = Feature.DisableFieldSmartMatch;
      featureArray0[2] = feature1;
      Feature feature2 = Feature.InternFieldNames;
      featureArray0[3] = feature2;
      // Undeclared exception!
      try { 
        jSONArray2.getFloatValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1378;
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      jSONArray1.fluentRetainAll(jSONArray0);
      ParserConfig parserConfig0 = ParserConfig.global;
      JSON.parse("", parserConfig0, 11);
      jSONArray0.fluentRemove((Object) null);
      Feature feature0 = Feature.DisableFieldSmartMatch;
      Feature feature1 = Feature.InternFieldNames;
      Feature feature2 = Feature.UseObjectArray;
      Feature[] featureArray0 = new Feature[3];
      featureArray0[0] = feature1;
      featureArray0[1] = feature2;
      featureArray0[2] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("javax.persistence.OneToMany", featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : javax.persistence.OneToMany
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getJSONArray("");
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(61);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) linkedList0);
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentRemove((Object) jSONArray1);
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.SortFeidFastMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.SupportArrayToBean;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.DisableFieldSmartMatch;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.InternFieldNames;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.UseObjectArray;
      featureArray0[4] = feature4;
      Feature feature5 = Feature.DisableFieldSmartMatch;
      featureArray0[5] = feature5;
      JSON.parseObject((String) null, featureArray0);
      // Undeclared exception!
      try { 
        jSONArray3.add(940, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 940, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray(0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSONArray0.getDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(478);
      int int0 = (-261);
      int int1 = 6;
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedHashSet<JSONArray> linkedHashSet0 = new LinkedHashSet<JSONArray>(6);
      LinkedHashSet<JSONArray> linkedHashSet1 = new LinkedHashSet<JSONArray>(linkedHashSet0);
      linkedHashSet0.add(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((-261), (Collection<?>) linkedHashSet1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -261, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(1265, (Collection<?>) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1265, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getDate(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(75);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(57);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(57, (Object) "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 57, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONString();
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = ')';
      charArray0[2] = '?';
      charArray0[3] = '&';
      charArray0[4] = 'a';
      charArray0[5] = '';
      charArray0[6] = 'L';
      charArray0[7] = 'X';
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(charArray0, 0, parserConfig0, (-352));
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      int int0 = 1092;
      JSONArray jSONArray0 = new JSONArray(1092);
      int int1 = 161;
      // Undeclared exception!
      try { 
        jSONArray0.remove(161);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 161, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(1378);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1378, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(14, jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.getJSONArray(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 15
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(841);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 841, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.getJSONArray("");
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentClear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(175);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 175, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-564);
      Type type0 = null;
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.SupportAutoType;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.OrderedField;
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(3089, false);
      jSONObject0.getInteger("@type");
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAdd(2831, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2831, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      int int0 = (-507);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((-507));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -507
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@type";
      jSONArray0.toArray(stringArray0);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("6,M", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but int, pos 1, json : 6,M
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = "%=b~c\"4w\\C:d3fINH";
      // Undeclared exception!
      try { 
        JSON.parseArray("%=b~c\"4wC:d3fINH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
