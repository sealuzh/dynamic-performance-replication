/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:13:47 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff.write;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.nio.ByteOrder;
import java.util.HashMap;
import java.util.Hashtable;
import javax.swing.DebugGraphics;
import javax.swing.JSplitPane;
import javax.swing.text.DefaultCaret;
import org.apache.commons.imaging.PixelDensity;
import org.apache.commons.imaging.common.BinaryOutputStream;
import org.apache.commons.imaging.common.ImageBuilder;
import org.apache.commons.imaging.formats.tiff.constants.TiffDirectoryType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeByte;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfoByte;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfoSLong;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossless;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossy;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputDirectory;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputField;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputSummary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffImageWriterBase_ESTest extends TiffImageWriterBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No directories.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      tiffOutputSet0.addExifDirectory();
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing root directory.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      tiffOutputSet0.addGPSDirectory();
      ByteOrder.nativeOrder();
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing root directory.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(byteOrder0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(dataOutputStream0, byteOrder0);
      // Undeclared exception!
      try { 
        tiffImageWriterLossy0.writeImageFileHeader(binaryOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)78;
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(byteArray0);
      TiffImageWriterLossless tiffImageWriterLossless1 = new TiffImageWriterLossless(byteArray0);
      OutputStream outputStream0 = null;
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.addRootDirectory();
      Hashtable<Integer, TiffOutputDirectory> hashtable0 = new Hashtable<Integer, TiffOutputDirectory>();
      TiffOutputSummary tiffOutputSummary0 = new TiffOutputSummary(tiffOutputSet0.byteOrder, tiffOutputDirectory0, hashtable0);
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.TIFF_DIRECTORY_IFD1;
      tiffOutputDirectory0.getItemDescription();
      TagInfoByte tagInfoByte0 = new TagInfoByte("CB", (byte)0, (FieldType) null, tiffDirectoryType0);
      tiffOutputDirectory0.add(tagInfoByte0, (byte)78);
      tagInfoByte0.toString();
      tiffOutputSummary0.rootDirectory.setOffset((-1064L));
      tiffOutputSummary0.rootDirectory.add(tagInfoByte0, (byte)0);
      tiffOutputSet0.getOutputItems(tiffOutputSummary0);
      tiffOutputSet0.toString("CB");
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(tiffOutputSet0.byteOrder);
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Tag (0 (0x0: CB): ) appears twice in directory.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)6;
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addRootDirectory();
      Hashtable<Integer, TiffOutputDirectory> hashtable0 = new Hashtable<Integer, TiffOutputDirectory>();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(tiffOutputSet0.byteOrder);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ImageBuilder imageBuilder0 = new ImageBuilder(128, (byte)6, false);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      // Undeclared exception!
      tiffImageWriterLossy0.writeImage(bufferedImage0, pipedOutputStream0, hashtable1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)37;
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addRootDirectory();
      Hashtable<Integer, TiffOutputDirectory> hashtable0 = new Hashtable<Integer, TiffOutputDirectory>();
      tiffOutputSet0.toString("51AUM%E?N`Bh#q98h");
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(tiffOutputSet0.byteOrder);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ImageBuilder imageBuilder0 = new ImageBuilder(128, (byte)37, false);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      // Undeclared exception!
      tiffImageWriterLossy0.writeImage(bufferedImage0, pipedOutputStream0, hashtable1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      ImageBuilder imageBuilder0 = new ImageBuilder(12, 12, false);
      BufferedImage bufferedImage0 = new BufferedImage(12, 12, 12);
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy();
      PrintStream printStream0 = DebugGraphics.logStream();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Short short0 = new Short((short)20167);
      hashMap0.put("COMPRESSION", short0);
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, printStream0, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid compression parameter (Only CCITT 1D/Group 3/Group 4, LZW, Packbits and uncompressed supported).
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ImageBuilder imageBuilder0 = new ImageBuilder(3, 3, true);
      imageBuilder0.getBufferedImage();
      tiffOutputSet0.getOrCreateRootDirectory();
      tiffOutputSet0.getExifDirectory();
      PrintStream printStream0 = DebugGraphics.logStream();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(byteOrder0);
      hashMap0.put("COMPRESSION", byteOrder0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Float float0 = new Float((double) 3);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      Short short0 = new Short((short)278);
      short short1 = (short) (-23548);
      Short.toUnsignedInt((short) (-23548));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T6_OPTIONS");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(printStream0, tiffOutputSet0.byteOrder);
      tiffImageWriterLossy0.writeImageFileHeader(binaryOutputStream0, (short)6);
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, printStream0, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid compression parameter, must be numeric: BIG_ENDIAN
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Hashtable<Integer, TiffOutputDirectory> hashtable0 = new Hashtable<Integer, TiffOutputDirectory>();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy();
      ImageBuilder imageBuilder0 = new ImageBuilder(3, 3, false);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet(byteOrder0);
      tiffOutputSet0.addRootDirectory();
      tiffOutputSet0.getRootDirectory();
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      PrintStream printStream0 = DebugGraphics.logStream();
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(printStream0);
      TiffImageWriterLossy tiffImageWriterLossy2 = new TiffImageWriterLossy();
      ByteOrder.nativeOrder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      TiffImageWriterLossy tiffImageWriterLossy3 = new TiffImageWriterLossy(tiffOutputSet0.byteOrder);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      hashMap0.put("COMPRESSION", mockHijrahDate0);
      hashMap0.put("RYGsSr6&h-j3LrxYUU", "RYGsSr6&h-j3LrxYUU");
      hashMap0.put("COMPRESSION", (Object) null);
      MockFile mockFile0 = new MockFile(" is less than 800( minimum");
      String string0 = JSplitPane.LEFT;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, printStream0, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: RYGsSr6&h-j3LrxYUU
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ImageBuilder imageBuilder0 = new ImageBuilder(3, 3, false);
      PrintStream printStream0 = DebugGraphics.logStream();
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(printStream0);
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy(byteOrder0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Float float0 = new Float((double) 3);
      hashMap0.put("COMPRESSION", float0);
      MockFile mockFile0 = new MockFile("COMPRESSION", "COMPRESSION");
      MockPrintStream mockPrintStream0 = new MockPrintStream("COMPRESSION");
      imageBuilder0.getBufferedImage();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      imageBuilder0.getBufferedImage();
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless((byte[]) null);
      // Undeclared exception!
      try { 
        tiffImageWriterLossless0.writeImage(bufferedImage0, binaryOutputStream0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hashtable<Integer, TiffOutputDirectory> hashtable0 = new Hashtable<Integer, TiffOutputDirectory>();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ImageBuilder imageBuilder0 = new ImageBuilder(3, 3, true);
      imageBuilder0.getBufferedImage();
      PrintStream printStream0 = DebugGraphics.logStream();
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(printStream0);
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy(byteOrder0);
      Float float0 = new Float((double) 3);
      hashMap0.put("COMPRESSION", float0);
      MockFile mockFile0 = new MockFile("COMPRESSION", "COMPRESSION");
      MockPrintStream mockPrintStream0 = new MockPrintStream("COMPRESSION");
      imageBuilder0.getBufferedImage();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      imageBuilder0.getBufferedImage();
      PixelDensity pixelDensity0 = PixelDensity.createFromPixelsPerMetre(3, (-2474.7));
      hashMap0.put("EXIF", pixelDensity0);
      bufferedImage0.releaseWritableTile((-382), (-1631));
      mockPrintStream0.println((double) (-382));
      // Undeclared exception!
      try { 
        tiffImageWriterLossy1.writeImage(bufferedImage0, binaryOutputStream0, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.imaging.PixelDensity cannot be cast to org.apache.commons.imaging.formats.tiff.write.TiffOutputSet
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addRootDirectory();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ImageBuilder imageBuilder0 = new ImageBuilder(12, 12, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      tiffOutputSet0.addInteroperabilityDirectory();
      tiffOutputSet0.setGPSInDegrees((-4), (-4));
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy();
      TiffImageWriterLossy tiffImageWriterLossy2 = new TiffImageWriterLossy(tiffOutputSet0.byteOrder);
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy1.validateDirectories(tiffOutputSet0);
      PrintStream printStream0 = DebugGraphics.logStream();
      tiffImageWriterLossy0.write(printStream0, tiffOutputSet0);
      ByteOrder.nativeOrder();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      tiffImageWriterLossy1.writeImage(bufferedImage0, printStream0, hashMap0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TiffImageWriterLossy tiffImageWriterLossy3 = new TiffImageWriterLossy(byteOrder0);
      ByteOrder.nativeOrder();
      hashMap0.put("FORMAT", tiffOutputSet0);
      hashMap0.put((String) null, tiffOutputSummary0);
      MockFile mockFile0 = new MockFile("bw25c4#T_");
      String string0 = JSplitPane.LEFT;
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      imageBuilder0.getBufferedImage();
      TiffImageWriterLossy tiffImageWriterLossy4 = new TiffImageWriterLossy();
      try { 
        tiffImageWriterLossy4.writeImage(bufferedImage0, mockPrintStream0, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: null
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.getInteroperabilityDirectory();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ImageBuilder imageBuilder0 = new ImageBuilder(12, 12, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      tiffOutputSet0.addInteroperabilityDirectory();
      tiffOutputSet0.setGPSInDegrees((-4), (-4));
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy();
      tiffImageWriterLossy1.validateDirectories(tiffOutputSet0);
      PrintStream printStream0 = DebugGraphics.logStream();
      tiffImageWriterLossy0.write(printStream0, tiffOutputSet0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteOrder.nativeOrder();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      tiffImageWriterLossy1.writeImage(bufferedImage0, printStream0, hashMap0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder2 = ByteOrder.BIG_ENDIAN;
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.EXIF_DIRECTORY_GPS;
      TagInfoSLong tagInfoSLong0 = new TagInfoSLong("XMP_XML", (-4), tiffDirectoryType0);
      FieldTypeByte fieldTypeByte0 = FieldType.BYTE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      TiffOutputField tiffOutputField0 = new TiffOutputField((short)20167, tagInfoSLong0, fieldTypeByte0, (-2000), byteArray0);
      hashMap0.put("XMP_XML", tiffOutputField0);
      Short short0 = new Short((short)20167);
      hashMap0.put("COMPRESSION", short0);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("4.p]W]proDq 7", "XMP_XML");
      tiffImageWriterLossy0.write(printStream0, tiffOutputSet0);
      TiffImageWriterLossy tiffImageWriterLossy2 = new TiffImageWriterLossy(byteOrder0);
      // Undeclared exception!
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, printStream0, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.imaging.formats.tiff.write.TiffOutputField cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ImageBuilder imageBuilder0 = new ImageBuilder(3, 3, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      PrintStream printStream0 = DebugGraphics.logStream();
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(printStream0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("PARAM_KEY_LZW_COMPRESSION_BLOCK_SIZE", bufferedImage0);
      ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[0];
      binaryOutputStream0.write(byteArray0, 3, 3);
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      Float float0 = new Float((double) 3);
      hashMap0.put("COMPRESSION", float0);
      MockFile mockFile0 = new MockFile("COMPRESSION");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/8_image");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "PARAM_KEY_LZW_COMPRESSION_BLOCK_SIZE");
      MockPrintStream mockPrintStream0 = new MockPrintStream("COMPRESSION");
      tiffImageWriterLossy0.writeImageFileHeader(binaryOutputStream0);
      int int0 = DefaultCaret.NEVER_UPDATE;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "PARAM_KEY_LZW_COMPRESSION_BLOCK_SIZE");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "<y3YZi)skeG'4");
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, binaryOutputStream0, hashMap0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid compression block-size parameter: 3.0
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }
}
