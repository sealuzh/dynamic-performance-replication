/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 10:49:55 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, (-393), (-393));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-70);
      ByteString byteString0 = ByteString.of(byteArray0, (int) (byte)0, 0);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = ByteString.of(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-34);
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-110);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      ByteString byteString1 = options0.get((byte)0);
      byteString0.indexOf(byteString1, 1);
      ByteString byteString2 = byteString0.sha256();
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-110);
      byteArray1[1] = (byte) (-110);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteString2.lastIndexOf(byteArray1, (int) (byte)0);
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      try { 
        realBufferedSource0.readByteString();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("\r", 2004);
      assertEquals(1, int0);
      
      ByteString byteString0 = ByteString.encodeUtf8("\r");
      String string0 = byteString0.base64Url();
      assertEquals("DQ==", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)25;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString0.hashCode();
      assertNotSame(byteString0, byteString1);
      assertFalse(byteString0.equals((Object)byteString1));
      assertArrayEquals(new byte[] {(byte) (-41), (byte)79, (byte)25}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)48;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertArrayEquals(new byte[] {(byte) (-32), (byte)56, (byte)105, (byte)48}, byteArray0);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)29;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e]", string0);
      
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)114;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=144f08bc3b0072]", string0);
      
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.indexOf((byte)113, (long) (byte)113);
      ByteString byteString1 = hashingSink0.hash();
      byteString0.endsWith(byteString1);
      byteString1.EMPTY.sha256();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)41;
      try { 
        buffer1.write((Source) buffer0, (long) (byte)41);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        ByteString.read(sequenceInputStream0, 13);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)50;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)50, 4266);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      try { 
        ByteString.read(bufferedInputStream0, 2);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)112;
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.sha256();
      byteString1.EMPTY.startsWith(byteString0);
      // Undeclared exception!
      try { 
        byteString1.EMPTY.indexOf((byte[]) null, 49);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("L6nX;");
      byteString0.md5();
      byteString0.toAsciiUppercase();
      byteString0.EMPTY.asByteBuffer();
      ByteString byteString1 = ByteString.encodeUtf8("|3{");
      byteString0.indexOf(byteString1);
      ByteString byteString2 = byteString0.toAsciiLowercase();
      byteString1.hmacSha256(byteString2);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)20;
      ByteString byteString3 = ByteString.decodeBase64("uy'l\"GJ04.j&iQdSKm");
      assertNull(byteString3);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("L6nX;");
      byteString0.md5();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString0.EMPTY.asByteBuffer();
      ByteString byteString2 = ByteString.encodeUtf8("|3{");
      int int0 = byteString0.indexOf(byteString2);
      assertEquals((-1), int0);
      
      ByteString byteString3 = byteString0.toAsciiLowercase();
      ByteString byteString4 = byteString2.hmacSha256(byteString3);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-28);
      String string0 = byteString1.base64();
      assertEquals("TDZOWDs=", string0);
      
      byteString4.md5();
      assertNotSame(byteString3, byteString0);
      
      int int1 = byteString2.indexOf(byteArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("L6nX;");
      byteString0.md5();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString0.EMPTY.asByteBuffer();
      ByteString byteString2 = ByteString.encodeUtf8("|3{");
      byteString0.indexOf(byteString2);
      ByteString byteString3 = byteString0.toAsciiLowercase();
      ByteString byteString4 = byteString2.hmacSha256(byteString3);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)18;
      byteString4.hmacSha256(byteString1);
      byteString4.asByteBuffer();
      // Undeclared exception!
      try { 
        byteString1.getByte((byte)18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(inflaterSource0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      byteString0.lastIndexOf(byteString1, 98);
      HashingSource.hmacSha1(inflaterSource0, byteString1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      try { 
        realBufferedSource0.readByteString();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteString byteString0 = ByteString.of(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring(1252);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("L6nX;");
      byteString0.md5();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)89;
      byteString1.EMPTY.indexOf(byteArray0, (int) (byte)89);
      byteString0.EMPTY.asByteBuffer();
      ByteString byteString2 = ByteString.encodeUtf8("|3{");
      byteString0.indexOf(byteString2);
      ByteString byteString3 = byteString0.toAsciiLowercase();
      ByteString byteString4 = byteString2.hmacSha256(byteString3);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-28);
      byteArray1[2] = (byte)18;
      byteArray1[3] = (byte)20;
      byteArray1[4] = (byte) (-71);
      byteArray1[5] = (byte) (-119);
      byteString2.indexOf(byteArray1, (-1));
      byteString4.indexOf(byteString3, (-3072));
      // Undeclared exception!
      try { 
        byteString2.substring((int) (byte)20, 110);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(3)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("L6nX;");
      byteString0.md5();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)89;
      byteString1.EMPTY.indexOf(byteArray0, (int) (byte)89);
      byteString0.EMPTY.asByteBuffer();
      ByteString byteString2 = ByteString.encodeUtf8("|3{");
      byteString0.indexOf(byteString2);
      ByteString byteString3 = byteString0.toAsciiLowercase();
      ByteString byteString4 = byteString2.hmacSha256(byteString3);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-28);
      byteArray1[2] = (byte)18;
      byteArray1[3] = (byte)20;
      byteArray1[4] = (byte) (-71);
      byteArray1[5] = (byte) (-119);
      byteString2.indexOf(byteArray1, (-1));
      byteString4.startsWith(byteArray1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString0, byteString1);
      assertFalse(byteString0.equals((Object)byteString1));
      
      int int0 = ByteString.codePointIndexToCharIndex("|3{", (byte) (-71));
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-90);
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.toString();
      Charset charset0 = Charset.defaultCharset();
      String string0 = byteString0.string(charset0);
      assertEquals("\u0000\uFFFD\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertFalse(boolean0);
      
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSource0);
      ByteString byteString1 = hashingSource0.hash();
      int int0 = byteString0.indexOf(byteString1);
      assertEquals((-1), int0);
      
      boolean boolean1 = byteString0.rangeEquals((-1), byteArray0, 980, 18);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("o6@uX");
      byteString0.md5();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString0.EMPTY.asByteBuffer();
      ByteString byteString2 = ByteString.encodeUtf8("|3{");
      int int0 = ObjectStreamConstants.baseWireHandle;
      ByteString byteString3 = byteString0.toAsciiLowercase();
      ByteString byteString4 = byteString2.hmacSha256(byteString3);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-28);
      String string0 = byteString1.base64();
      assertEquals("TzZAVVg=", string0);
      
      byteString4.md5();
      assertNotSame(byteString3, byteString0);
      assertFalse(byteString3.equals((Object)byteString0));
      
      int int1 = byteString2.indexOf(byteArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeHex("");
      byteString0.EMPTY.hashCode();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertEquals(0, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-38);
      byte byte0 = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.hashCode();
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte) (-38));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-45);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeIntLe(1789);
      HashingSink hashingSink1 = HashingSink.sha1(bufferedSink0);
      hashingSink1.hash();
      ByteString byteString1 = hashingSink1.hash();
      byteString0.endsWith(byteString1);
      BufferedSink bufferedSink1 = realBufferedSink0.buffer.write((Source) buffer0, (long) (byte)0);
      assertFalse(bufferedSink1.equals((Object)buffer0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString(0L);
      ByteString.encodeUtf8("\n");
      realBufferedSource0.buffer.write((Source) buffer0, 0L);
      int int0 = ByteString.codePointIndexToCharIndex("\n", 935);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      ByteString.encodeUtf8("\n");
      realBufferedSource0.buffer.write((Source) buffer0, 0L);
      Charset charset0 = Charset.defaultCharset();
      String string0 = byteString0.string(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-97);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      byteString0.toAsciiUppercase();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      Object object0 = new Object();
      byteString1.equals(object0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-97);
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      ByteString byteString1 = byteString0.toAsciiLowercase();
      int int1 = byteString1.EMPTY.indexOf(byteArray0);
      assertEquals((-1), int1);
      
      ByteString byteString2 = byteString0.hmacSha256(byteString1);
      String string0 = byteString2.base64();
      assertEquals("hBkde35DC31i/E5PswkUUHbMrLZQd/KhcR5tDaIcrWQ=", string0);
      
      byteString0.md5();
      int int2 = byteString0.indexOf(byteArray0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-97);
      byteArray0[0] = (byte) (-97);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        byteString1.substring(65);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Object object0 = new Object();
      Object object1 = new Object();
      byteString0.equals(object1);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Unexpected code point: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: Unexpected code point: 
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("\r", 1992);
      ByteString byteString0 = new ByteString((byte[]) null);
      Object object0 = new Object();
      byteString0.equals((Object) null);
      // Undeclared exception!
      try { 
        byteString0.sha1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.security.MessageDigest", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      ByteString byteString2 = byteString0.toAsciiLowercase();
      ByteString byteString3 = new ByteString(byteArray0);
      byteString3.base64();
      byteString1.hmacSha1(byteString2);
      assertSame(byteString2, byteString0);
      assertTrue(byteString2.equals((Object)byteString3));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Unexpectd code point: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: U
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Object object0 = new Object();
      Object object1 = new Object();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      hashingSource0.hash();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("HmacSHA256");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: H
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource.hmacSha256(buffer0, byteString0);
      ByteString byteString1 = ByteString.decodeBase64("");
      assertNotNull(byteString1);
      
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)26;
      byteArray1[1] = (byte)111;
      byteArray1[2] = (byte) (-8);
      byteArray1[3] = (byte)100;
      byteArray1[4] = (byte) (-128);
      byteArray1[5] = (byte)15;
      byteArray1[6] = (byte)93;
      byteArray1[7] = (byte) (-82);
      byteArray1[8] = (byte)73;
      int int0 = byteString0.lastIndexOf(byteArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.toString();
      // Undeclared exception!
      try { 
        byteString0.getByte(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      String string0 = byteString0.utf8();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("vXMP\":tKJ#'=FxY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: v
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("7-u4,v%fYg.Cds`qHx{", charset0);
      byteString0.base64Url();
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex(".inputStream()");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: .
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.utf8();
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.equals(byteString0);
      // Undeclared exception!
      try { 
        byteString0.getByte((byte)44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer_UnsafeCursor0.readWrite = true;
      realBufferedSource0.indexOf((byte)9, 0L);
      ByteString byteString1 = byteString0.EMPTY.sha1();
      int int0 = byteString1.EMPTY.indexOf(byteString0, (-1));
      assertEquals(0, int0);
      
      ByteString byteString2 = byteString0.toAsciiLowercase();
      ByteString byteString3 = byteString2.hmacSha256(byteString1);
      Object object0 = new Object();
      Object object1 = new Object();
      byteString1.equals(object1);
      byteString0.sha1();
      String string0 = byteString3.hex();
      assertEquals("00040a40c84c4040e04c220f0060600eef040efae0082260282c8a0a0f40c04c", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      ByteString byteString0 = ByteString.of(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=ae]", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.utf8();
      ByteString byteString1 = new ByteString(byteArray0);
      Object object0 = new Object();
      byteString0.equals(object0);
      ByteString byteString2 = byteString1.sha1();
      boolean boolean0 = byteString1.equals(byteString2);
      assertFalse(boolean0);
      assertTrue(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      byteString0.base64();
      byteString0.EMPTY.sha512();
      BufferedSink bufferedSink0 = realBufferedSink0.writeLong(100000000L);
      HashingSink hashingSink0 = HashingSink.md5(bufferedSink0);
      ByteString byteString1 = hashingSink0.hash();
      byteString0.asByteBuffer();
      byteString1.toString();
      Object object0 = new Object();
      byteString1.equals(bufferedSink0);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.get(862);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 862
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte byte0 = (byte)50;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, (byte)50);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      try { 
        ByteString.read(byteArrayInputStream0, 77);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.compareTo(byteString1);
      // Undeclared exception!
      try { 
        byteString1.hmacSha1(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.utf8 = "";
      byteString0.EMPTY.utf8();
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.toAsciiLowercase();
      byteString1.endsWith(byteArray0);
      ByteString byteString2 = ByteString.decodeHex("");
      assertEquals(0, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)50);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      ByteString byteString0 = ByteString.read(bufferedInputStream0, 2);
      byteString0.EMPTY.asByteBuffer();
      ByteString byteString1 = ByteString.decodeBase64("");
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.base64();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-46);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.utf8 = "";
      Buffer buffer0 = new Buffer();
      ByteString byteString1 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString1);
      GzipSink gzipSink0 = new GzipSink(hashingSink0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(gzipSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      int int0 = buffer_UnsafeCursor0.start;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString2 = realBufferedSource0.readByteString();
      int int1 = byteString2.compareTo(byteString0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)81, 15L);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = byteString0.sha1();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSource0);
      ByteString byteString2 = hashingSource0.hash();
      ByteString byteString3 = byteString2.toAsciiLowercase();
      byteString2.hmacSha256(byteString1);
      ByteString byteString4 = byteString1.substring(1);
      ByteString[] byteStringArray0 = new ByteString[9];
      byte[] byteArray0 = null;
      ByteString byteString5 = new ByteString((byte[]) null);
      byteStringArray0[0] = byteString5;
      byteStringArray0[1] = byteString3;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString1;
      byteStringArray0[4] = byteString2;
      byteStringArray0[5] = byteString4;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString1;
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((-2526L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2526
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = byteString0.substring(0);
      String string0 = byteString0.toString();
      assertEquals("[size=0]", string0);
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)16;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer1, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      int int0 = byteString1.lastIndexOf(byteString0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = ByteString.of(byteArray0);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor1.buffer);
      Buffer buffer1 = realBufferedSink0.buffer;
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer1, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      boolean boolean0 = byteString0.rangeEquals((-2444), byteString1, (-1), (-1));
      assertFalse(boolean0);
      
      Buffer buffer2 = buffer_UnsafeCursor1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor1.buffer);
      ByteString byteString2 = realBufferedSource0.readByteString();
      int int0 = buffer_UnsafeCursor1.start;
      ByteString byteString3 = realBufferedSource0.readByteString();
      int int1 = byteString0.compareTo(byteString3);
      assertTrue(byteString3.equals((Object)byteString2));
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-16);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.utf8();
      ByteString byteString1 = new ByteString(byteArray0);
      Object object0 = new Object();
      boolean boolean0 = byteString1.equals(byteString0);
      ByteString byteString2 = byteString1.sha1();
      boolean boolean1 = byteString2.startsWith(byteArray0);
      assertFalse(boolean1 == boolean0);
      
      int int0 = ByteString.codePointIndexToCharIndex(".inputStream()", 28);
      assertEquals(14, int0);
      
      ByteString byteString3 = byteString0.hmacSha512(byteString1);
      assertFalse(byteString3.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-16);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.utf8();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("{z;]YNF#BQT");
      byteString0.write(mockFileOutputStream0);
      ByteString byteString1 = new ByteString(byteArray0);
      Object object0 = new Object();
      boolean boolean0 = byteString1.equals(byteString0);
      assertTrue(boolean0);
      
      ByteString byteString2 = byteString1.sha1();
      assertFalse(byteString2.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.toString();
      MockPrintStream mockPrintStream0 = new MockPrintStream(" text=");
      byteString0.write(mockPrintStream0);
      assertEquals(64, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.compareTo(byteString1);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      hashingSink0.hash();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)117;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[text=u]", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[text=,,]", string0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      Object object0 = new Object();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      int int1 = byteString0.lastIndexOf(byteArray0, (int) (byte)44);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)24;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString3 = hashingSource0.hash();
      byteString3.compareTo(byteString0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((-2625L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2625
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      String string0 = byteString0.toString();
      assertEquals("[hex=e8a4ee4a0ee8caca8eae8aaaaeeaaaa0ae8aeeaaaca0eaaea48ee88ea4eee8eee0aaae4eaaaa88ca88a4eaa8a00eee88e4c84ecae0ee0eaeea4a480e8880ae4e]", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)43;
      ByteString byteString1 = new ByteString(byteArray0);
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-14);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = byteString0.sha1();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSource0);
      ByteString byteString2 = hashingSource0.hash();
      ByteString byteString3 = byteString2.toAsciiLowercase();
      ByteBuffer byteBuffer0 = byteString2.asByteBuffer();
      ByteString byteString4 = ByteString.of(byteBuffer0);
      byteString4.EMPTY.utf8 = null;
      ByteString byteString5 = byteString3.substring(0);
      byteString5.EMPTY.equals(byteString0);
      HashingSink.sha512(buffer0);
      byteString3.equals(byteString1);
      byteString1.toString();
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      ByteString byteString0 = hashingSource1.hash();
      ByteString byteString1 = byteString0.substring(0);
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      byteBuffer0.compact();
      charset0.decode(byteBuffer0);
      HashingSink hashingSink1 = HashingSink.sha512(buffer0);
      ByteString byteString2 = hashingSink1.hash();
      byteString2.toString();
      byteString2.equals("");
      HashingSink.sha512(hashingSink0);
      HashingSink.sha512(hashingSink0);
      HashingSink hashingSink2 = HashingSink.hmacSha256(hashingSink1, byteString2);
      ByteString byteString3 = hashingSink2.hash();
      String string0 = byteString2.toString();
      assertEquals("[hex=e8a4ee4a0ee8caca8eae8aaaaeeaaaa0ae8aeeaaaca0eaaea48ee88ea4eee8eee0aaae4eaaaa88ca88a4eaa8a00eee88e4c84ecae0ee0eaeea4a480e8880ae4e]", string0);
      
      Object object0 = new Object();
      byteString0.equals(object0);
      ByteString byteString4 = byteString3.substring(0, 0);
      assertEquals(0, byteString4.size());
      
      ByteString byteString5 = hashingSink0.hash();
      hashingSource1.toString();
      byteString5.equals(hashingSink2);
      byteString0.write(buffer0);
      assertSame(byteString0, byteString1);
  }
}
