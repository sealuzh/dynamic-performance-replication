/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:53:10 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(class0);
      String string0 = "IB{h";
      doubleKeyMap0.remove("IB{h");
      String string1 = "{MO_u/\\y}\\Kt";
      doubleKeyMap0.remove("{MO_u/y}Kt");
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      DoubleKeyMap<String, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<String, Object, Integer>(hashMap0, class0);
      HashMap<Integer, Map<Object, Integer>> hashMap1 = new HashMap<Integer, Map<Object, Integer>>();
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap2 = new DoubleKeyMap<Integer, Object, Integer>(hashMap1, class0);
      Integer integer0 = new Integer((-279));
      Integer integer1 = new Integer((-279));
      hashMap1.put(integer1, (Map<Object, Integer>) null);
      hashMap1.put(integer1, (Map<Object, Integer>) null);
      doubleKeyMap2.get(integer0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put("{MO_u/y}Kt", (Map<Object, Integer>) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>();
      doubleKeyMap0.remove("@Ek{");
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put("@Ek{", integer0, (Object) null);
      doubleKeyMap0.remove("@Ek{", integer0);
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>(hashMap0);
      Integer integer1 = new Integer(0);
      Object object0 = doubleKeyMap1.get((Object) integer0, integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>();
      doubleKeyMap0.remove("@Ek{");
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put("@Ek{", integer0, (Object) null);
      Integer integer1 = new Integer(0);
      Object object0 = new Object();
      doubleKeyMap0.put("@Ek{", (Integer) null, (Object) null);
      Integer integer2 = new Integer(5443);
      HashMap<Object, String> hashMap0 = null;
      try {
        hashMap0 = new HashMap<Object, String>(5443, 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>();
      doubleKeyMap0.remove("");
      Integer integer0 = new Integer(0);
      int int0 = (-1);
      Integer integer1 = new Integer((-1));
      String string0 = "+)S!qs";
      doubleKeyMap0.put("4[", integer1, (Object) "+)S!qs");
      Integer integer2 = new Integer((-5968));
      Integer integer3 = new Integer(0);
      doubleKeyMap0.remove("4[", integer3);
      doubleKeyMap0.put("", integer2, (Object) null);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = null;
      try {
        doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(class0);
      Map<Object, Map<String, Integer>> map0 = doubleKeyMap0.newMap();
      Class<HashMap> class1 = HashMap.class;
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>(map0, class1);
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap2 = new DoubleKeyMap<Integer, Integer, String>(class0);
      Map<String, Map<String, String>> map1 = doubleKeyMap2.newMap();
      DoubleKeyMap<String, String, String> doubleKeyMap3 = new DoubleKeyMap<String, String, String>(map1);
      doubleKeyMap3.remove("", "");
      doubleKeyMap3.get("k.8DNDvT>", "k.8DNDvT>");
      DoubleKeyMap<String, Object, Object> doubleKeyMap4 = new DoubleKeyMap<String, Object, Object>();
      Map<Object, String> map2 = doubleKeyMap4.newMap();
      doubleKeyMap1.remove((Object) map2);
      doubleKeyMap4.get("");
      DoubleKeyMap<Object, Object, String> doubleKeyMap5 = new DoubleKeyMap<Object, Object, String>(class0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Integer integer0 = new Integer(1172);
      DoubleKeyMap<String, String, String> doubleKeyMap6 = new DoubleKeyMap<String, String, String>(class1);
      doubleKeyMap6.remove("q d5AhK", (String) null);
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap7 = new DoubleKeyMap<Integer, Integer, String>();
      Integer integer1 = new Integer(1172);
      doubleKeyMap7.put(integer0, integer1, (String) null);
      doubleKeyMap6.remove((String) null, "iWW /Ke}");
      HashMap<Object, Map<Object, Object>> hashMap1 = new HashMap<Object, Map<Object, Object>>();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap8 = new DoubleKeyMap<Object, Object, Object>();
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      Map<Object, String> map3 = doubleKeyMap4.newMap();
      doubleKeyMap8.put((Object) hashMap2, (Object) map3, (Object) map2);
      HashMap<Object, String> hashMap3 = new HashMap<Object, String>();
      doubleKeyMap8.get((Object) map2, (Object) hashMap3);
      HashMap<String, Map<Integer, Object>> hashMap4 = new HashMap<String, Map<Integer, Object>>();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap9 = new DoubleKeyMap<String, Integer, Object>(hashMap4);
      Map<Integer, Object> map4 = doubleKeyMap9.remove("");
      assertNull(map4);
  }
}
