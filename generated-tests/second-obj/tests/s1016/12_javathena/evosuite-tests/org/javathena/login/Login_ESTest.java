/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:03:33 GMT 2018
 */

package org.javathena.login;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Proxy;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Calendar;
import javolution.util.FastMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.javathena.core.data.Auth_data;
import org.javathena.core.data.IParse;
import org.javathena.core.data.Socket_data;
import org.javathena.core.utiles.ACO;
import org.javathena.data.IDBManagementLogin;
import org.javathena.login.Login;
import org.javathena.login.UserManagement;
import org.javathena.login.parse.FromAdmin;
import org.javathena.login.parse.FromChar;
import org.javathena.login.parse.FromClient;
import org.javathena.utiles.ConfigurationManagement;
import org.javathena.utiles.sql.MySQLConfig;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Login_ESTest extends Login_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.run();
      assertEquals(0, login0.getAuth_max());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Login.mmo_auth_initTXT();
      Login login1 = new Login();
      login0.do_initTXT();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = Calendar.TUESDAY;
      Login login2 = new Login();
      // Undeclared exception!
      try { 
        login2.parse_console("quit");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FromChar fromChar0 = new FromChar();
      Socket_data socket_data0 = new Socket_data((Socket) null, fromChar0);
      // Undeclared exception!
      try { 
        Login.version(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Login login0 = new Login();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      // Undeclared exception!
      try { 
        login_Timer_interval_check_auth_sync0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Login.login_log("NO");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Login login0 = new Login();
      int int0 = Login.mmo_auth_initTXT();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Login login0 = new Login();
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("(MI}@aX");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Login login0 = new Login();
      // Undeclared exception!
      try { 
        Login.codingKeyAdministration((Socket_data) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Login login0 = new Login();
      MockSocket mockSocket0 = new MockSocket();
      FromClient fromClient0 = new FromClient();
      Socket_data socket_data0 = new Socket_data(mockSocket0, fromClient0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "conf/subnet_athena.conf");
      Login.setPASSWORDENC(2048);
      MockInetAddress.getLocalHost();
      Login.mmo_auth_syncXML();
      MockThread.reset();
      login0.getAuth_num();
      System.setCurrentTimeMillis(2000000);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Login.showTab(byteArray0);
      FromClient fromClient0 = new FromClient();
      Socket_data socket_data0 = new Socket_data((Socket) null);
      // Undeclared exception!
      try { 
        Login.codingKey(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Login.display_title();
      Login.getPASSWORDENC();
      Login login0 = new Login();
      MockSocket mockSocket0 = new MockSocket();
      Socket_data socket_data0 = new Socket_data(mockSocket0);
      // Undeclared exception!
      try { 
        login0.parse_admin((-486), socket_data0, (Login) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Login login0 = new Login();
      int int0 = login0.getAuth_max();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Login login0 = new Login();
      InetAddress inetAddress0 = MockInetAddress.getByName("conf/subnet_athena.conf");
      login0.check_ip(inetAddress0);
      login0.setAuth_max((-714));
      int int0 = login0.check_ipmask(776, (String) null);
      assertEquals((-714), login0.getAuth_max());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.close();
      // Undeclared exception!
      try { 
        Login.do_initSQL();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Login login0 = new Login();
      int[] intArray0 = login0.getServer_fd();
      assertEquals(0, login0.getAuth_max());
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Login login0 = new Login();
      Login.mmo_auth_syncXML();
      login0.do_initTXT();
      int int0 = Calendar.TUESDAY;
      login0.parse_console("loginlog");
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Login login0 = new Login();
      login0.getLog_fp();
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Login login0 = new Login();
      ConfigurationManagement.setAuth_before_save_file(30);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-60);
      login0.getAuth_num();
      Login.mmo_auth_initTXT();
      login0.server_fd = null;
      login0.do_initTXT();
      login0.parse_console("ON");
      login0.yesNoOnOffToBoolean("ON");
      MockInetAddress.getLocalHost();
      try { 
        MockInetAddress.getByAddress(byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [0, -60]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Login login0 = new Login();
      ACO aCO0 = ACO.STRSIZE;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.do_initTXT();
      ConfigurationManagement.setAccess_deny((String) null);
      Login.setPASSWORDENC(100000000);
      Socket_data socket_data0 = new Socket_data((Socket) null);
      byte[] byteArray0 = Login.getMd5Data(socket_data0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Login login0 = new Login();
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      MySQLConfig.setLogin_server_db("conf/subnet_athena.conf");
      UserManagement.setAccountIdCount(2);
      ConfigurationManagement.setAccess_denynum(50);
      MySQLConfig.setLogin_server_db("80yhj\"1Z9/,");
      login0.do_initTXT();
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("conf/subnet_athena.conf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Login.getPASSWORDENC();
      FromClient fromClient0 = new FromClient();
      Socket_data socket_data0 = new Socket_data((Socket) null, fromClient0);
      Login.logUnknownPackets(socket_data0);
      assertNull(socket_data0.getType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Login login0 = new Login();
      login0.yesNoOnOffToBoolean("YES");
      Login.setPASSWORDENC(3600000);
      Login.display_title();
      // Undeclared exception!
      try { 
        login0.do_init();
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      Login login0 = new Login();
      login0.getOut();
      login0.setOut((PrintWriter) null);
      assertEquals(0, login0.getAuth_max());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/12_javathena/save/account.xml");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "KRS");
      Login login0 = new Login();
      int int0 = Calendar.MONDAY;
      String string0 = "rTd";
      ConfigurationManagement.setSubnetmaski((int[]) null);
      // Undeclared exception!
      try { 
        Login.mmo_auth_initXML();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         //  : Content is not allowed in prolog.
         //
         verifyException("com.thoughtworks.xstream.io.xml.DomDriver", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Login login0 = new Login();
      Login.setPASSWORDENC((-2004483903));
      ConfigurationManagement.setAccess_denynum(2);
      login0.do_initTXT();
      assertEquals((-2004483903), login0.getPASSWORDENC());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Login login0 = new Login();
      MySQLConfig.setLogin_server_port((-5));
      ConfigurationManagement.setAccess_allow("conf/subnet_athena.conf");
      Login.mmo_auth_syncXML();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      login_Timer_interval_check_auth_sync0.cancel();
      login_Timer_interval_check_auth_sync0.run();
      Login login1 = new Login();
      MockFile mockFile0 = new MockFile("conf/subnet_athena.conf");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      login1.setOut(mockPrintWriter0);
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      login1.check_ip(inetAddress0);
      Login login2 = new Login();
      // Undeclared exception!
      try { 
        login1.do_initXML();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         //  : Content is not allowed in prolog.
         //
         verifyException("com.thoughtworks.xstream.io.xml.DomDriver", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Login login0 = new Login();
      MySQLConfig.setLogin_server_db("conf/subnet_athena.conf");
      MySQLConfig.setLogin_server_ip("LN");
      login0.save_config_in_log();
      Login.mmo_auth_syncTXT();
      // Undeclared exception!
      try { 
        Login.mmo_auth_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Login.getPASSWORDENC();
      Login.display_title();
      Login.login_log("7");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Login login0 = new Login();
      Login.ConnectionListener login_ConnectionListener0 = login0.new ConnectionListener();
      login_ConnectionListener0.close();
      ConfigurationManagement.setAccess_denynum(2000000);
      login_ConnectionListener0.run();
      Login.mmo_auth_syncTXT();
      login_ConnectionListener0.run();
      System.setCurrentTimeMillis(30);
      login0.check_auth_sync();
      IDBManagementLogin iDBManagementLogin0 = Login.getDbManagemtType();
      assertNull(iDBManagementLogin0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initXML();
      ACO aCO0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_order(aCO0);
      ConfigurationManagement.setAccess_denynum(10);
      login0.parse_console("help");
      MockInetAddress.getLocalHost();
      // Undeclared exception!
      try { 
        login0.yesNoOnOffToBoolean("conf/subnet_athena.conf");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // anw doit etre egale a yes/no/on/off
         //
         verifyException("org.javathena.login.Login", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Login login0 = new Login();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)26;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      int int0 = Calendar.ALL_STYLES;
      Login login1 = new Login();
      UserManagement.setAccountIdCount(2);
      Login login2 = new Login();
      login2.do_initTXT();
      Login login3 = new Login();
      MockSocket mockSocket0 = new MockSocket();
      // Undeclared exception!
      try { 
        login0.parse_console("exit");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initTXT();
      FromAdmin fromAdmin0 = new FromAdmin();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Auth_data auth_data0 = mock(Auth_data.class, new ViolatedAssumptionAnswer());
      MySQLConfig.setLogin_server_ip(",^H~^k");
      ConfigurationManagement.setAccess_denynum(1);
      Login.login_log(";");
      login0.do_initTXT();
      FileSystemHandling.shouldAllThrowIOExceptions();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, 10, inetAddress0, 100000000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:100000000
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initTXT();
      login0.parse_console("loginlog");
      FastMap<Integer, Auth_data> fastMap0 = new FastMap<Integer, Auth_data>();
      Integer integer0 = new Integer((-1730));
      Auth_data auth_data0 = mock(Auth_data.class, new ViolatedAssumptionAnswer());
      doReturn(2000000, 10).when(auth_data0).getAccount_id();
      doReturn((String) null).when(auth_data0).getUserid();
      fastMap0.put(integer0, auth_data0);
      UserManagement.setAuth_dats(fastMap0);
      Login.display_title();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Login login0 = new Login();
      ACO aCO0 = ACO.MUTUAL_FAILTURE;
      ConfigurationManagement.setAccess_order(aCO0);
      login0.do_initTXT();
      ConfigurationManagement.setAccess_allownum(50);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-69);
      Login.showTab(byteArray0);
      login0.do_initTXT();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IParse iParse0 = null;
      Login.mmo_auth_syncXML();
      InetAddress inetAddress0 = MockInetAddress.getByName("conf/subnet_athena.conf");
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, (byte) (-69), inetAddress0, 1464);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-69
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initTXT();
      FromAdmin fromAdmin0 = new FromAdmin();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Auth_data auth_data0 = mock(Auth_data.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/12_javathena/save/account.txt");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MySQLConfig.setLogin_server_ip(",^H~^k");
      Integer integer0 = new Integer((-1079441474));
      ConfigurationManagement.setAccess_denynum(50);
      ConfigurationManagement.setAccess_denynum(1);
      MySQLConfig.setLogin_server_db(",^H~^k");
      Login.setPASSWORDENC((-1079441474));
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Socket_data socket_data0 = new Socket_data((Socket) null);
      Login.getMd5Data(socket_data0);
      // Undeclared exception!
      try { 
        Login.codingKey(socket_data0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.javathena.core.data.Socket_data", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initTXT();
      FromAdmin fromAdmin0 = new FromAdmin();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/12_javathena/log/login.log");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync0 = login0.new Timer_interval_check_auth_sync();
      Login.Timer_interval_check_auth_sync login_Timer_interval_check_auth_sync1 = login0.new Timer_interval_check_auth_sync();
      login_Timer_interval_check_auth_sync0.run();
      UserManagement.addUserTXT("lognlo", "DRAGON", "conf/subnet_athena.conf", '6');
      MySQLConfig.setLogin_server_db("conf/subnet_athena.conf");
      Login login1 = new Login();
      // Undeclared exception!
      try { 
        login1.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Login login0 = new Login();
      ACO aCO0 = ACO.ALLOW_DENY;
      ConfigurationManagement.setAccess_order(aCO0);
      ConfigurationManagement.setAccess_denynum(30);
      ConfigurationManagement.setAuth_before_save_file(2);
      MySQLConfig.setLogin_server_db((String) null);
      ConfigurationManagement.setAccess_denynum(50);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "conf/subnet_athena.conf");
      Login.mmo_auth_syncTXT();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "- with the accounts file name: '%s'.");
      Login.mmo_auth_syncTXT();
      MySQLConfig.setLogin_server_ip((String) null);
      ConfigurationManagement.setAccess_deny("}");
      MySQLConfig.setLogin_server_db("5v..z");
      login0.save_config_in_log();
      Login login1 = new Login();
      login1.do_initXML();
      Login login2 = new Login();
      login2.save_config_in_log();
      UserManagement.setAccountIdCount(10);
      Random.setNextRandom(1220703125);
      Login.mmo_auth_syncXML();
      // Undeclared exception!
      try { 
        login1.do_initTXT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Login login0 = new Login();
      login0.do_initTXT();
      Login login1 = new Login();
      login1.parse_console("lgn");
      MockSocket mockSocket0 = new MockSocket();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        login1.parse_console("end");
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
