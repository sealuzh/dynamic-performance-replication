/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:28:07 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.FileDescriptor;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackReader;
import java.io.StreamTokenizer;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.Page;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.store.raw.RawStore;
import org.databene.commons.bean.TypedPropertyMutator;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.jdbc.FBBlob;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.value.ValueDecimal;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil.isQuery("create ");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("create ");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("select");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("select");
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Os i-n8&=;w}k_'";
      String string0 = SQLUtil.innerJoin("Os i-n8&=;w}k_'", stringArray0, "Os i-n8&=;w}k_'", "rowInserted", stringArray0);
      assertEquals("Os i-n8&=;w}k_' as rowInserted on Os i-n8&=;w}k_'.Os i-n8&=;w}k_' = rowInserted.Os i-n8&=;w}k_'", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.removeComments("");
      DBSchema dBSchema0 = new DBSchema("UQ's6maX%-QNr4`");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" remove", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = FBBlob.SEGMENTED;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "select";
      stringArray0[1] = "select";
      stringArray0[2] = "select";
      stringArray0[3] = "select";
      String string0 = SQLUtil.renderColumnListWithTableName("select", stringArray0);
      assertEquals("select.select, select.select, select.select, select.select", string0);
      
      String string1 = SQLUtil.renderValue("select");
      assertEquals("'select'", string1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      PushbackReader pushbackReader0 = new PushbackReader(mockFileReader0, 2579);
      BufferedReader bufferedReader0 = new BufferedReader(pushbackReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(bufferedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      MockThaiBuddhistDate.now();
      pushbackReader0.unread(2579);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "- 0";
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6;NbkZDi8InAY");
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("binary");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'binary' not found in table '6;NbkZDi8InAY'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil.removeComments("}yD)=R8vp)M89mltx5|");
      String[] stringArray0 = new String[3];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin(stringArray0[2], stringArray0, "}yD)=R8vp)M89mltx5|", "q", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      SQLUtil.substituteMarkers("K", "K", integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("B)H%F W@2U(v&uD,");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("B)H%F W@2U(v&uD,", defaultDBTable0, 1929, "aeEZx+Ti+|jkiw~E;$");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("AEEZX+TI+|JKIW~E;$", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog("()", (Database) null);
      String string1 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("B)H%F W@2U(v&uD,");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("B)H%F W@2U(v&uD,", defaultDBTable0, 1922, "aeEZx+Ti+|jkiw~E;$");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "B)H%F W@2U(v&uD,";
      stringArray0[1] = "B)H%F W@2U(v&uD,";
      stringArray0[2] = "B)H%F W@2U(v&uD,";
      String string0 = SQLUtil.leftJoin("aeEZx+Ti+|jkiw~E;$", stringArray0, "aeEZx+Ti+|jkiw~E;$", "_QL", stringArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Jq2", true, "lIatJ't&3CYv8", "Jq2");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      TypedPropertyMutator typedPropertyMutator0 = new TypedPropertyMutator(class0, "UPDATE \"", false);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(1504, (Object) typedPropertyMutator0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1504
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DBSchema dBSchema0 = new DBSchema("-!f");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-!f", dBSchema0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1790491704), "-!f");
      defaultDBTable1.getColumns();
      defaultDBTable1.getUniqueConstraints(false);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("-!f", defaultDBTable0, dBDataType0, integer0);
      defaultDBTable1.addColumn(defaultDBColumn0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("-!f -!F(3) NULL", string0);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "-!f -!F(3) NULL", true, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint1, nameSpec0);
      assertEquals("PRIMARY KEY (, , , , , )", string1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      Integer.getInteger("K", integer0);
      SQLUtil.substituteMarkers("K", "K", integer0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.isQuery("8=Rx");
      SQLUtil.isDDL("");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      stringBuilder2.append(false);
      SQLUtil.addOptionalCondition("\"agT~j!zCYK!E6u~", stringBuilder1);
      assertEquals("ELBICUDORPER_FIfalse or \"agT~j!zCYK!E6u~", stringBuilder1.toString());
      assertEquals("ELBICUDORPER_FIfalse or \"agT~j!zCYK!E6u~", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLUtil.normalize("/[7.kv", false);
      TableContainer tableContainer0 = new TableContainer("/[7.kv");
      tableContainer0.getSchema();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/[7.kv";
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil.normalize("/7.kv", true);
      String string0 = FBConnectionProperties.USE_STANDARD_UDF_PROPERTY;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        DBDataType.getInstance("wphF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "#KAeh-*";
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("#KAeh-*");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.isDML("c*.IjUp? ?BxY&a");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("c*.IjUp? ?BxY&a");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("c*.IjUp? ?BxY&a", defaultDBTable0, 1604, "c*.IjUp? ?BxY&a");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("c*.IjUp? ?BxY&a");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "               ", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(stringArray0[0], true, dBPrimaryKeyConstraint0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1782, "n7|-:");
      Integer integer0 = new Integer(1782);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable1, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("N7|-:(1782)", string0);
      
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT \"               \" ", string1);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string2 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, )", string2);
      
      boolean boolean0 = SQLUtil.isQuery("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.isProcedureCall("80000039-00d0-fd77-3ed8-000a0a0b1900");
      SQLUtil.isQuery("G~vMR[lOe^Z7n~");
      SQLUtil.removeComments("drop table");
      SQLUtil.normalize(")nx[\"++v<cZ", false);
      char[] charArray0 = new char[8];
      charArray0[1] = 'H';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TableContainer tableContainer0 = new TableContainer("SYSCS_GET_XPLAIN_MODE");
      tableContainer0.getSchema();
      SQLUtil.typeAndName((DBObject) null);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("table null", defaultDBTable0, 33, "drop materialized viewexeclast");
      Integer integer0 = new Integer((-2041));
      DBDataType dBDataType0 = DBDataType.getInstance((-1952257859), "execute");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("create materialized viewselect", defaultDBTable0, dBDataType0);
      defaultDBColumn1.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.isQuery("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.removeComments("V$)OO/G]S:n");
      SQLUtil.normalize(".WQ>-&,u:($HJ$I", true);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) ".WQ > - &, u : ($ HJ $ I");
      Boolean.valueOf("V$)OO/G]S:n");
      String[] stringArray0 = new String[0];
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("-!f");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-!f", dBSchema0);
      SQLUtil.normalize("-!f", false);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      String string0 = TypeId.TINYINT_NAME;
      Integer.getInteger("TINYINT", (-1984686886));
      // Undeclared exception!
      try { 
        linkedList0.subList((-860), (-1984686886));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -860
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DBSchema dBSchema0 = new DBSchema("-!f");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-!f", dBSchema0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1790491704), "-!f");
      defaultDBTable1.getColumns();
      defaultDBTable1.getUniqueConstraints(false);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("-!f", defaultDBTable0, dBDataType0, integer0);
      defaultDBTable1.addColumn(defaultDBColumn0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("-!f -!F(3) NULL", string0);
      
      boolean boolean0 = SQLUtil.isDDL("9&n6Q!n1{][z+");
      assertFalse(boolean0);
      
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "o%Kj84", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , , , )", string1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("-!f");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-!f", dBSchema0);
      DBCatalog dBCatalog0 = new DBCatalog();
      Integer integer0 = RawTransaction.COMMIT;
      MockFile mockFile0 = new MockFile("-!f", "-!f");
      MockFile mockFile1 = new MockFile("-!f", "inner");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      dBCatalog0.toString();
      DBCatalog dBCatalog1 = new DBCatalog("l,Xt");
      DBSchema dBSchema1 = new DBSchema("update", dBCatalog1);
      dBSchema0.setDoc("inner");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "update");
      String string0 = TypeId.BINARY_NAME;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "l,Xt";
      stringArray0[1] = "update";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      dBPrimaryKeyConstraint0.equals("update");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (l,Xt, update)", string1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("~r\":mcY", defaultDBTable0, (-2061584299), "drop materalized vieweeclast");
      Integer integer0 = RawTransaction.COMMIT;
      defaultDBColumn0.setFractionDigits(integer0);
      MockFile mockFile0 = new MockFile("drop materalized vieweeclast", "~r\":mcY");
      MockFile mockFile1 = new MockFile("drop materalized vieweeclast");
      MockFile mockFile2 = new MockFile("O>C+s$0\"", "O>C+s$0\"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile2);
      DBCatalog dBCatalog0 = new DBCatalog("?`!1*i^xpsddxP");
      DBSchema dBSchema0 = new DBSchema("alter materialized viewselect", dBCatalog0);
      dBSchema0.setDoc("drop materalized vieweeclast");
      SQLUtil.ownerDotComponent(dBSchema0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("?`!1*i^xpsddxP.alter materialized viewselect");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[6];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "8sD8aca-W");
      DBSchema dBSchema0 = new DBSchema("2-!");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("2-!", dBSchema0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable1.getColumns();
      StringBuilder stringBuilder0 = new StringBuilder(4025);
      StringBuilder stringBuilder1 = stringBuilder0.append("left");
      ChronoUnit chronoUnit0 = ChronoUnit.MILLENNIA;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "left", false, stringArray0);
      chronoUnit0.getDuration();
      stringBuilder0.append((Object) chronoUnit0);
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder2);
      SQLUtil.isQuery("r");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("leftMillennialeftMillenniaCONSTRAINT left CONSTRAINT left ", stringBuilder0.toString());
      
      String string0 = SQLUtil.renderColumnListWithTableName("8sD8aca-W", stringArray0);
      assertEquals("8sD8aca-W.null, 8sD8aca-W.null, 8sD8aca-W.null, 8sD8aca-W.null, 8sD8aca-W.null, 8sD8aca-W.null", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ZERO;
      SQLUtil.substituteMarkers("COMMENT_TABLE", "$#N3dv96\"^nPl9", valueDecimal0);
      DBCatalog dBCatalog0 = new DBCatalog("COMMENT_TABLE");
      DBSchema dBSchema0 = new DBSchema("S~>YXvJ^LK87O{", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop index", dBSchema0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFile mockFile0 = new MockFile("COMMENT_TABLE", "S~>YXvJ^LK87O{");
      MockFile mockFile1 = new MockFile(mockFile0, "COMMENT_TABLE");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.isQuery("drop index");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("drop index");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DBSchema dBSchema0 = new DBSchema("-!f");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-!f", dBSchema0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      StringBuilder stringBuilder0 = new StringBuilder(4025);
      stringBuilder0.reverse();
      boolean boolean0 = true;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "-!f", true, stringArray0);
      SQLUtil.addRequiredCondition("-!f", stringBuilder0);
      SQLUtil.normalize("-!f", true);
      String string0 = "select intotrun";
      String string1 = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = (DBPrimaryKeyConstraint)defaultDBTable0.getUniqueConstraint("-!f");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("select intotrun", (String) null, dBPrimaryKeyConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create unique indexdrop indexexecute", defaultDBTable0, 33, "create unique indexdrop indexexecute");
      Integer integer0 = new Integer((-340096360));
      String string1 = FBConnectionProperties.DEFAULT_ISOLATION_PROPERTY;
      boolean boolean0 = SQLUtil.isDDL("create unique indexdrop indexexecute");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      String string0 = TypeId.BINARY_NAME;
      Integer.max((-1790491704), (-780));
      SQLUtil.mutatesDataOrStructure("alter materialized view");
      DBDataType.getInstance(1987, "BINARY");
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer1 = RawTransaction.ABORT;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.isQuery("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.removeComments("V?h$)OK/G]S:n");
      SQLUtil.normalize("V?h$)OK/G]S:n", false);
      String[] stringArray0 = new String[0];
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ZERO;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("oqVf[<qNS");
      assertFalse(boolean0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      VersionNumber.valueOf("oqVf[<qNS");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("oqVf[<qNS");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "oqVf[<qNS";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      dBUniqueConstraint0.setTable(defaultDBTable0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1782, "n7|-:");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      dBUniqueConstraint0.setName(stringArray0[3]);
      dBDataType0.isNumber();
      Integer.min(526, 526);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(stringArray0[3], defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("N7|-:(2)", string0);
      
      String string1 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string1);
      
      String string2 = SQLUtil.join("n7|-:", "vi$Z4^Am+:<V&05'^_7", stringArray0, stringArray0[3], "N7|-:(2)", stringArray0);
      assertEquals("n7|-: join null as N7|-:(2) on vi$Z4^Am+:<V&05'^_7.oqVf[<qNS = N7|-:(2).oqVf[<qNS and vi$Z4^Am+:<V&05'^_7.null = N7|-:(2).null and vi$Z4^Am+:<V&05'^_7.null = N7|-:(2).null and vi$Z4^Am+:<V&05'^_7.null = N7|-:(2).null", string2);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      SQLUtil.mutatesDataOrStructure("alter materialized view");
      String string0 = FBConnectionProperties.USE_STANDARD_UDF_PROPERTY;
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      DBSchema dBSchema0 = new DBSchema("8$k&[)N&m5e6oE");
      dBSchema0.toString();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT p.proname,p.oid  FROM pg_catalog.pg_proc p, pg_catalog.pg_namespace n  WHERE p.pronamespace=n.oid AND n.nspname='pg_catalog' AND (", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "8$k&[)N&m5e6oE", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint((String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'SELECT p.proname,p.oid  FROM pg_catalog.pg_proc p, pg_catalog.pg_namespace n  WHERE p.pronamespace=n.oid AND n.nspname='pg_catalog' AND (' has no foreign key with the columns ()
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "\u0001\u014A";
      String[] stringArray0 = new String[25];
      stringArray0[0] = "\u0001\u014A";
      stringArray0[2] = "\u0001\u014A";
      stringArray0[3] = "\u0001\u014A";
      stringArray0[4] = "\u0001\u014A";
      MockFile mockFile0 = new MockFile("\u0001\u014A", "\u0001\u014A");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "\u0001\u014A");
      DBDataType dBDataType0 = DBDataType.getInstance((-2358), "D/m9#y{XkS=9Cz,p4");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBSchema dBSchema0 = new DBSchema("rename");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\u0001\u014A", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\u0001\u014A", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.isDDL(")");
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint(")");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockThaiBuddhistDate.now();
      ChronoUnit chronoUnit0 = ChronoUnit.ERAS;
      SQLUtil.mutatesDataOrStructure("deleteselect");
      String[] stringArray0 = new String[15];
      stringArray0[2] = "deleteselect";
      stringArray0[4] = "deleteselect";
      stringArray0[8] = "deleteselect";
      ValueDecimal valueDecimal0 = (ValueDecimal)ValueDecimal.ZERO;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[6];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",*Re9 fOb(T");
      Integer.divideUnsigned(457, 10);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("90(js/\"PXk?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: 90(js/\"PXk?
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLUtil.isQuery("~r':mcY");
      SQLUtil.normalize("~r':mcY", false);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        linkedList0.subList(509, 509);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 509
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLUtil.normalize("/7.kv", false);
      TableContainer tableContainer0 = new TableContainer("/7.kv");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.ABORT;
      Integer.getInteger("t0R", 1310);
      Integer.min((-2654), (-2654));
      tableContainer0.getTables(false);
      tableContainer0.toString();
      DBSequence dBSequence0 = new DBSequence("/ 7.kv", "Or^`B4ix", "create tableselect");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.isProcedureCall("exec");
      SQLUtil.parseColumnTypeAndSize("into");
      Random.setNextRandom((-1790491704));
      StringBuilder stringBuilder0 = new StringBuilder(1310);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("/7.kv", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("into", stringBuilder1);
      StringBuilder stringBuilder3 = SQLUtil.addOptionalCondition((String) null, stringBuilder2);
      assertEquals("/7.kv and into or null", stringBuilder2.toString());
      assertEquals("/7.kv and into or null", stringBuilder3.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Integer integer0 = new Integer((-2041));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "call");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("call", false);
      assertEquals("call", string0);
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable1.getIndex("drop materialized viewexeclast");
      SQLUtil.removeComments("tree corrupted");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("call");
      assertNull(boolean0);
      
      String string1 = "(_O\\uN";
      SQLUtil.isDDL(string1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "call";
      stringArray0[1] = "drop materialized viewexeclast";
      String string2 = SQLUtil.leftJoin("jOrv[\"[+8E[iP)>", stringArray0, "tree corrupted", "OR ", stringArray0);
      assertEquals("left join tree corrupted as OR  on jOrv[\"[+8E[iP)>.call = OR .call and jOrv[\"[+8E[iP)>.drop materialized viewexeclast = OR .drop materialized viewexeclast", string2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.substituteMarkers("insert", "COMMENT_TABLE", "COMMENT_TABLE");
      DBCatalog dBCatalog0 = new DBCatalog("drop index");
      DBSchema dBSchema0 = new DBSchema("alter session", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter session", dBSchema0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFile mockFile0 = new MockFile(",j");
      MockFile mockFile1 = new MockFile(mockFile0, "insert");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      boolean boolean0 = FBBlob.SEGMENTED;
      SQLUtil.isDDL("drop index");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "insert");
      assertEquals("insert", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLUtil.normalize("/7.kv", false);
      String string0 = FBConnectionProperties.USE_STANDARD_UDF_PROPERTY;
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      DBSchema dBSchema0 = new DBSchema("alter materialized view");
      dBSchema0.toString();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\"#0hfU-", dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\"#0hfU-";
      stringArray0[1] = "\"#0hfU-";
      stringArray0[2] = "\"#0hfU-";
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, "org.firebirdsql.gds.impl.wire.XdrInputStream", (String[]) null, "p7,!vkvgYGZ", "select into", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[9];
      DBSchema dBSchema0 = new DBSchema("2-!f");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("2-!f", dBSchema0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      List<DBColumn> list0 = new ColumnDescriptorList();
      StringBuilder stringBuilder0 = new StringBuilder(4025);
      stringBuilder0.append("left");
      ChronoUnit chronoUnit0 = ChronoUnit.MILLENNIA;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "left", true, stringArray0);
      stringBuilder0.append((Object) chronoUnit0);
      SQLUtil.normalize("left", true);
      MockFile mockFile0 = new MockFile("EYx");
      MockFile mockFile1 = new MockFile(mockFile0, "PRIMARY KEY ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.isQuery(":G@Z76Aa~");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("select(-power(0, -1))");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-power(0\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DBSchema dBSchema0 = new DBSchema("2-!f");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("2-!f", dBSchema0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable1.getColumns();
      StringBuilder stringBuilder0 = new StringBuilder(4025);
      stringBuilder0.append("left");
      ChronoUnit chronoUnit0 = ChronoUnit.MILLENNIA;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "left", true, stringArray0);
      stringBuilder0.append((Object) chronoUnit0);
      SQLUtil.addRequiredCondition("2-!f", stringBuilder0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("^3&I  ZPe$0&d", true, defaultDBTable1, stringArray0, defaultDBTable1, stringArray0);
      MockFile mockFile0 = new MockFile("left");
      DBDataType dBDataType0 = DBDataType.getInstance(4025, "G,C]P kDZ^~l9?.Z");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("into", defaultDBTable1, dBDataType0);
      defaultDBColumn0.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = new DBForeignKeyConstraint("I@", false, defaultDBTable0, stringArray0, defaultDBTable1, stringArray0);
      SQLUtil.removeComments("^3&I  ZPe$0&d");
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      assertEquals("table", defaultDBTable2.getObjectType());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = Page.DIAG_SLOTTABLE_SIZE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("~r':mcY", defaultDBTable0, (-2061584299), "drop materalized vieweeclast");
      defaultDBColumn0.equals("~r':mcY");
      defaultDBColumn0.getForeignKeyConstraint();
      Integer integer0 = RawTransaction.COMMIT;
      defaultDBColumn0.setFractionDigits(integer0);
      MockFile mockFile0 = new MockFile("O>C+s$0\"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      DBCatalog dBCatalog0 = new DBCatalog("?`!1*i^xpsddxP");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "O>C+s$0\"");
      String string1 = FBConnectionProperties.USE_STANDARD_UDF_PROPERTY;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        DBDataType.getInstance("drop materalized vieweeclast");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil.isQuery("n# `");
      SQLUtil.normalize("^g{_?{=:#[R*$d", false);
      String[] stringArray0 = new String[7];
      String string0 = TypeId.TINYINT_NAME;
      String string1 = TypeId.TIMESTAMP_NAME;
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      assertTrue(genericDescriptorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLUtil.isQuery("renameexec--");
      SQLUtil.isQuery("C1`N:wRqog&tp4");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.normalize("renameexec--", false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C1`N:wRqog&tp4");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        DBDataType.getInstance("C1`N:wRqog&tp4");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLUtil.isQuery("");
      SQLUtil.isQuery("");
      String string0 = "V?h$)OK/G]S:n";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select:g@z76aa~", (DBSchema) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable1.getColumns();
      int int0 = 45;
      StringBuilder stringBuilder0 = new StringBuilder(45);
      StringBuilder stringBuilder1 = stringBuilder0.append("select:g@z76aa~");
      ChronoUnit chronoUnit0 = ChronoUnit.MILLENNIA;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "select:g@z76aa~";
      stringArray0[1] = "left";
      stringArray0[3] = "delete#kaeh-*";
      stringArray0[4] = "select:g@z76aa~";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      chronoUnit0.getDuration();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) mockMinguoDate0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(stringArray0[2], true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      stringBuilder2.append(45);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      // Undeclared exception!
      try { 
        SQLUtil.isQuery(stringArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table null", string0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("~r':mcY", defaultDBTable0, (-2061584299), "drop materalized vieweeclast");
      Integer.getInteger("drop materalized vieweeclast");
      MockFile mockFile0 = new MockFile("drop materalized vieweeclast", "~r':mcY");
      MockFile mockFile1 = new MockFile("drop materalized vieweeclast");
      MockFile mockFile2 = new MockFile("O>C+s$0\"", "O>C+s$0\"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.firebirdsql.jdbc.FBMissingParameterException");
      DBCatalog dBCatalog0 = new DBCatalog("table null");
      DBSchema dBSchema0 = new DBSchema("alter materialized viewselect", dBCatalog0);
      defaultDBTable0.setName("ptMQI");
      dBSchema0.setDoc("drop materalized vieweeclast");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "table null";
      objectArray0[1] = (Object) defaultDBColumn0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "table null";
      stringArray0[2] = "create tablez*dw,(4hqoyk";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      dBUniqueConstraint0.equals("org.firebirdsql.jdbc.FBMissingParameterException");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, table null, create tablez*dw,(4hqoyk)", string1);
      
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("~r':mcY, ~r':mcY, ~r':mcY, ~r':mcY", string2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table null", string0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("~r\":mcY", defaultDBTable0, 33, "drop materialized viewexeclast");
      Integer integer0 = new Integer((-2041));
      String string1 = FBConnectionProperties.DEFAULT_ISOLATION_PROPERTY;
      boolean boolean0 = SQLUtil.isDDL("~r\":mcY");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "drop materialized viewexeclast";
      stringArray0[1] = "drop materialized viewexeclast";
      stringArray0[2] = "drop materialized viewexeclast";
      stringArray0[4] = "defaultIsolation";
      stringArray0[6] = "table null";
      stringArray0[7] = "defaultIsolation";
      stringArray0[8] = "table null";
      String string2 = SQLUtil.renderColumnListWithTableName("drop materialized viewexeclast", stringArray0);
      assertEquals("drop materialized viewexeclast.drop materialized viewexeclast, drop materialized viewexeclast.drop materialized viewexeclast, drop materialized viewexeclast.drop materialized viewexeclast, drop materialized viewexeclast.null, drop materialized viewexeclast.defaultIsolation, drop materialized viewexeclast.null, drop materialized viewexeclast.table null, drop materialized viewexeclast.defaultIsolation, drop materialized viewexeclast.table null", string2);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("drop materialized viewexeclast", false, (String) null, "defaultIsolation");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string3 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"drop materialized viewexeclast\" CHECK defaultIsolation", string3);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLUtil.substituteMarkers("insert", "COMMENT_TABLE", "COMMENT_TABLE");
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)126;
      DBCatalog dBCatalog0 = new DBCatalog("insert");
      DBSchema dBSchema0 = new DBSchema("COMMENT_TABLE");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance((int) (byte)126, "COMMENT_TABLE");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("COMMENT_TABLE", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("alter materialized viewselect", defaultDBTable0, (-630143696), "alter materialized viewselect");
      Integer integer1 = RawTransaction.COMMIT;
      defaultDBColumn0.setFractionDigits(integer1);
      SQLUtil.isQuery("org.h2.util.Utils.convertStringToBytes(\"");
      SQLUtil.parseColumnTypeAndSize("COMMENT_TABLE COMMENT_TABLE(3) NULL");
      SQLUtil.ownerDotComponent(dBSchema0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("COMMENT_TABLE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("-!f");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-!f", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1790491704), "-!f");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      defaultDBTable0.getUniqueConstraints(false);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("-!f", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("-!f -!F(3) NULL", string0);
      
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("alter materialized viewselect", defaultDBTable0, (-1790491704), "alter indexselect");
      Integer integer1 = RawTransaction.COMMIT;
      NameSpec nameSpec0 = NameSpec.NEVER;
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "-!f");
      SQLUtil.removeComments("-!f");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("alter indexselect", true, defaultDBTable0, "ck%D");
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK ck%D", string1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DBSchema dBSchema0 = new DBSchema("-!f");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-!f", dBSchema0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1790491704), "-!f");
      defaultDBTable1.getColumns();
      defaultDBTable1.getUniqueConstraints(false);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("-!f", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setNullable(false);
      defaultDBTable1.addColumn(defaultDBColumn0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("-!f -!F(3) NOT NULL", string0);
      
      boolean boolean0 = SQLUtil.isDDL("9&n6Q!n1{][z+");
      assertFalse(boolean0);
      
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "o%Kj84", false, stringArray0);
      dBUniqueConstraint0.equals(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , , , )", string1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("-!f");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-!f", dBSchema0);
      DBDataType.getInstance((-1790491704), "-!f");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.remainderUnsigned(39, (-1790491704));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-!f";
      stringArray0[1] = "-!f";
      stringArray0[2] = "-!f";
      stringArray0[3] = "-!f";
      stringArray0[4] = "-!f";
      stringArray0[5] = "-!f";
      stringArray0[6] = "-!f";
      stringArray0[7] = "-!f";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("-!f", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.removeForeignKeyConstraint(dBForeignKeyConstraint0);
      Integer.min(39, 39);
      Integer.getInteger("exec", integer1);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "exec";
      stringArray1[1] = "exec";
      stringArray1[2] = "Or^`B4ix";
      stringArray1[2] = "exec";
      stringArray1[4] = "Or^`B4ix";
      defaultDBTable0.getUniqueConstraint(stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("exec", "-!f");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      SQLUtil.typeAndName((DBObject) null);
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      dBSchema0.setName("");
      defaultDBTable2.getPrimaryKeyConstraint();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("Or^`B4ix");
      DBTrigger dBTrigger0 = new DBTrigger("S/\"M6ZV^6$(", dBSchema0);
      String string1 = SQLUtil.typeAndName(dBSchema0);
      assertEquals("schema ", string1);
      
      String string2 = SQLUtil.renderColumnNames(stringArray1);
      assertEquals("(exec, exec, exec, , Or^`B4ix)", string2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      Boolean.valueOf("qj[?P+yr*>j|]hUv+Dw");
      DBDataType dBDataType0 = DBDataType.getInstance("NCLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("-M~zTf?7l/?}A6", defaultDBTable0, dBDataType0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      DBCatalog dBCatalog0 = new DBCatalog("qj[?P+yr*>j|]hUv+Dw");
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      SQLUtil.parseColumnTypeAndSize("qj[?P+yr*>j|]hUv+Dw");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append("NCLOB");
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String[] stringArray0 = new String[25];
      stringArray0[0] = "\u0001\u014A";
      stringArray0[2] = "\u0001\u014A";
      stringArray0[3] = "\u0001\u014A";
      stringArray0[4] = "\u0001\u014A";
      stringArray0[5] = "\u0001\u014A";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[6] = "\u0001\u014A";
      stringArray0[7] = "\u0001\u014A";
      stringArray0[8] = "\u0001\u014A";
      SQLUtil.renderColumnListWithTableName("\u0001\u014A", stringArray0);
      SQLUtil.isProcedureCall("\u0001\u014A");
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.isDDL("\u0001\u014A");
      SQLUtil.parseColumnTypeAndSize("%");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "%", true, stringArray0);
      defaultDBTable0.isIdentical(dBUniqueConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\u0001\u014A.\u0001\u014A, \u0001\u014A.null, \u0001\u014A.\u0001\u014A, \u0001\u014A.\u0001\u014A, \u0001\u014A.\u0001\u014A, \u0001\u014A.\u0001\u014A, \u0001\u014A.\u0001\u014A, \u0001\u014A.\u0001\u014A, \u0001\u014A.\u0001\u014A, \u0001\u014A.null, \u0001\u014A.null, \u0001\u014A.null, \u0001\u014A.null, \u0001\u014A.null, \u0001\u014A.null, \u0001\u014A.null, \u0001\u014A.null, \u0001\u014A.null, \u0001\u014A.null, \u0001\u014A.null, \u0001\u014A.null, \u0001\u014A.null, \u0001\u014A.null, \u0001\u014A.null, \u0001\u014A.null");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      String string0 = "drop materalized vieweeclast";
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("~r':mcY", defaultDBTable0, (-2061584299), "drop materalized vieweeclast");
      Integer integer0 = RawTransaction.COMMIT;
      defaultDBColumn0.setFractionDigits(integer0);
      MockFile mockFile0 = new MockFile("drop materalized vieweeclast");
      Integer.getInteger("~r':mcY", (-2061584299));
      DBSchema dBSchema0 = new DBSchema("drop materalized vieweeclast");
      DBPackage dBPackage0 = new DBPackage("table null", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("table null", dBPackage0);
      Character character0 = new Character('!');
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("~r':mcY", defaultDBTable0, (-2061584299), "drop materalized vieweeclast");
      Integer integer0 = RawTransaction.COMMIT;
      defaultDBColumn0.setFractionDigits(integer0);
      MockFile mockFile0 = new MockFile("drop materalized vieweeclast");
      MockFile mockFile1 = new MockFile("O>C+s$0\"", "O>C+s$0\"");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      String string0 = "}}_IZ";
      String string1 = "SELECT * FROM ";
      SQLUtil.mutatesDataOrStructure("select into");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("T&|Tbj");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DBDataType dBDataType0 = DBDataType.getInstance("NCLOB");
      defaultDBTable0.getUniqueConstraints(true);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = new Integer(2143);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SCHEMA", defaultDBTable0, dBDataType0, integer1);
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(">T`c", defaultDBTable0, dBDataType0, integer0, integer2);
      SQLUtil.renderColumn(defaultDBColumn1);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("/*", defaultDBTable0, 2143, "9ou`;`DnzCmQH");
      Integer integer3 = RawTransaction.COMMIT;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) ">T`c");
      String string0 = RawStore.TEST_REENCRYPT_CRASH_AFTER_COMMT;
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("-M~zTf?7l/?}A6", false, defaultDBTable0, "select~r':g~y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }
}
