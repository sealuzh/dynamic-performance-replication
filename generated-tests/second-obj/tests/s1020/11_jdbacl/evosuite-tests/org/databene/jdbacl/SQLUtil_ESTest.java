/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:54:50 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.LineNumberReader;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.sql.JDBCType;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.LinkedTransferQueue;
import org.apache.derby.iapi.sql.compile.CompilerContext;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.PermDescriptor;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.data.DataFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.FromBaseTable;
import org.apache.derby.impl.store.raw.log.LogToFile;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.constraint.Constraint;
import org.h2.table.Table;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rename");
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("create materialized viewe!t1_1", stringArray0, (String) null, (String) null, stringArray0);
      assertEquals("null as null on ", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("rename", string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("ceJ");
      assertNull(boolean0);
      
      String string0 = SQLUtil.renderValue("ceJ");
      assertEquals("'ceJ'", string0);
      
      String string1 = SQLUtil.removeComments("ceJ");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "22001");
      boolean boolean0 = SQLUtil.isQuery("'");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.substituteMarkers("- ", "'", (Object) null);
      assertEquals("- ", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.normalize(" ADD ", false);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      SQLUtil.addOptionalCondition("", stringBuilder1);
      assertEquals("false or ", stringBuilder1.toString());
      assertEquals("false or ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = SQLUtil.normalize("nSmOC-ihd?o&RiZkT#`", true);
      assertEquals("nSmOC - ihd ? o & RiZkT # `", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FromBaseTable fromBaseTable0 = new FromBaseTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELECTIVITY", (DBTable) null, 65555, "PKTABLE_CAT");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("PKTABLE_CAT", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.mutatesStructure("delee");
      Boolean.logicalXor(false, true);
      TableContainer tableContainer0 = new TableContainer("delee");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execute", defaultDBTable0, (-6), "delee");
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = SQLUtil.normalize("!", true);
      assertEquals("!", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "!", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ! ", stringBuilder0.toString());
      
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("create unique indexnull");
      SQLUtil.parseColumnTypeAndSize("create unique indexnull");
      DBSchema dBSchema0 = new DBSchema("create unique indexnull");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique indexnull", dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create unique indexnull";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create unique indexnull", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.leftJoin("Dq%>x-A`AVA\"4/eMA;m", stringArray0, "", "create unique indexnull", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLUtil.mutatesStructure("delete");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("delete");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("delete", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      DBSchema dBSchema0 = new DBSchema("delete");
      dBSchema0.getTables();
      defaultDBTable0.setSchema(dBSchema0);
      SQLUtil.substituteMarkers("delete", "delete", dBForeignKeyConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("25S02");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("3b:NjAj2x", "3b:NjAj2x", versionNumber0);
      defaultDatabase0.getCatalog("2Z$SKYUoZ");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("create unique index");
      Boolean boolean1 = SQLUtil.mutatesStructure("create unique index");
      assertFalse(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("2r>RTm` k");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "2r>RTm` k";
      stringArray0[1] = "2r>RTm` k";
      stringArray0[2] = "2r>RTm` k";
      stringArray0[3] = "drop indexr # ` * '?<aj.'";
      stringArray0[4] = "2r>RTm` k";
      stringArray0[5] = "2r>RTm` k";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil.mutatesStructure("b|V.Y^R");
      String string0 = SQLUtil.removeComments(" Z= ");
      assertEquals(" Z= ", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("create unique indexnull");
      SQLUtil.parseColumnTypeAndSize("create unique indexnull");
      DBSchema dBSchema0 = new DBSchema("create unique indexnull");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique indexnull", dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create unique indexnull";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create unique indexnull", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("PRIMARY KEY ", "create unique indexnull");
      MockFile mockFile1 = new MockFile(mockFile0, " as ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      Locale locale0 = Locale.GERMAN;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "PRIMARY KEY ", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec1, printWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = SQLUtil.normalize("y]m</;w;)l", false);
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "y]m</;w;)l", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("-@|f&");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("?W'ADq('gK5^]ZR\"c", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append(false);
      StringBuilder stringBuilder3 = stringBuilder2.append((Object) stringBuilder0);
      SQLUtil.addRequiredCondition("update", stringBuilder3);
      assertEquals("-@|f& or ?W'ADq('gK5^]ZR\"cfalse-@|f& or ?W'ADq('gK5^]ZR\"cfalse and update", stringBuilder3.toString());
      
      String string0 = SQLUtil.normalize(" NOT", false);
      assertEquals("NOT", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLUtil.mutatesStructure("delete");
      Boolean.logicalXor(true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TableContainer tableContainer0 = new TableContainer("delete");
      tableContainer0.getTable("delete");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execute", (DBTable) null, (-6), "delete");
      Integer integer0 = RawTransaction.ABORT;
      defaultDBColumn0.setSize(integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("delete");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      SQLUtil.typeAndName(dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = Constraint.CHECK;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("execleft join select * from create unique indexnull where null = null as m.+w[g,.g09 on select * from create unique indexnull where null = null.null = m.+w[g,.g09.null");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil.normalize("!", true);
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "!", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance(35, "rename");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("!", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      LinkedTransferQueue<DBCheckConstraint> linkedTransferQueue0 = new LinkedTransferQueue<DBCheckConstraint>();
      Boolean boolean0 = new Boolean("y7m;w;)W");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "y7m;w;)W";
      stringArray0[1] = "y7m;w;)W";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("y7m;w;)W");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "y7m;w;)W", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      String string1 = SQLUtil.removeComments("}a]L.}zjJ$h`o");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("timestampUsesLocalTimezone", 380);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "call8.ne");
      int int0 = 0;
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("q28fhT", stringBuilder0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      StringBuilder stringBuilder3 = stringBuilder2.append((float) 0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call8.ne");
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder4 = stringBuilder3.insert(0, (Object) null);
      StringBuilder stringBuilder5 = stringBuilder4.delete(0, 0);
      SQLUtil.addOptionalCondition("call8.ne", stringBuilder5);
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("create unique indexnull");
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" join ", dBSchema0);
      MockFile mockFile0 = new MockFile("m.+W[G,G09");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      LinkedTransferQueue<DBCheckConstraint> linkedTransferQueue0 = new LinkedTransferQueue<DBCheckConstraint>();
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(dBSchema0);
      assertEquals("schema null", string0);
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("schema null", dBSchema0);
      boolean boolean0 = SQLUtil.isProcedureCall("Z");
      assertFalse(boolean0);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "create unique indexnull";
      stringArray0[2] = null;
      stringArray0[3] = "derby.storage.streamFileBufferSize";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable1, stringArray0, defaultDBTable1, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (create unique indexnull, , , derby.storage.streamFileBufferSize) REFERENCES schema null(create unique indexnull, , , derby.storage.streamFileBufferSize)", string1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("delete");
      Boolean.logicalXor(true, false);
      Boolean.logicalAnd(true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      SQLUtil.substituteMarkers("end", "end", boolean0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "end";
      stringArray0[1] = "end";
      stringArray0[3] = "delete";
      stringArray0[4] = "false";
      SQLUtil.renderColumnListWithTableName("end", stringArray0);
      SQLUtil.leftJoin("ifMl.", stringArray0, "", "drop table", stringArray0);
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("T8q\"el/'flM>^/*A_~L");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("create unique indexnull");
      DBSchema dBSchema0 = new DBSchema("create unique indexnull");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique indexnull", dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create unique indexnull";
      MockFile mockFile0 = new MockFile("PRIMARY KEY ", "create unique indexnull");
      MockFile mockFile1 = new MockFile("create unique indexnull");
      String string0 = SQLUtil.innerJoin("\u0002\uFFFF\u0001\u0002\u0001\uFFFF\u0001\u0004\u0001\u0007\u0001\u0001\u0001\u0005\u0001\u0003\u0001\u0006\u0001\b", stringArray0, "\u0002\uFFFF\u0001\u0002\u0001\uFFFF\u0001\u0004\u0001\u0007\u0001\u0001\u0001\u0005\u0001\u0003\u0001\u0006\u0001\b", "\u0002\uFFFF\u0001\u0002\u0001\uFFFF\u0001\u0004\u0001\u0007\u0001\u0001\u0001\u0005\u0001\u0003\u0001\u0006\u0001\b", stringArray0);
      assertEquals("\u0002\uFFFF\u0001\u0002\u0001\uFFFF\u0001\u0004\u0001\u0007\u0001\u0001\u0001\u0005\u0001\u0003\u0001\u0006\u0001\b as \u0002\uFFFF\u0001\u0002\u0001\uFFFF\u0001\u0004\u0001\u0007\u0001\u0001\u0001\u0005\u0001\u0003\u0001\u0006\u0001\b on \u0002\uFFFF\u0001\u0002\u0001\uFFFF\u0001\u0004\u0001\u0007\u0001\u0001\u0001\u0005\u0001\u0003\u0001\u0006\u0001\b.create unique indexnull = \u0002\uFFFF\u0001\u0002\u0001\uFFFF\u0001\u0004\u0001\u0007\u0001\u0001\u0001\u0005\u0001\u0003\u0001\u0006\u0001\b.create unique indexnull", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("create unique indexnull.create unique indexnull", string1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLUtil.isDDL("XSAI3.S");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter session");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "XSAI3.S";
      stringArray0[1] = "alter session";
      stringArray0[2] = "|%4]CYh9";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("\u0001\u0218", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XSAI3.S");
      PrintWriter printWriter0 = mockPrintWriter0.append('L');
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      assertEquals("foreign key constraint", dBForeignKeyConstraint0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("create unique indexnull");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique indexnull", dBSchema0);
      dBSchema0.removeTable(defaultDBTable0);
      String[] stringArray0 = new String[4];
      MockFile mockFile0 = new MockFile("m.+W[G,.G09");
      Locale locale0 = Locale.JAPAN;
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.mutatesDataOrStructure("SELECT * FROM create unique indexnull WHERE null = null AND null = null AND null = null AND null = null");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("delete");
      Boolean.logicalXor(true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TableContainer tableContainer0 = new TableContainer("insert");
      tableContainer0.getTable("delete");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.COMMIT;
      // Undeclared exception!
      try { 
        DBDataType.getInstance("bOhcute");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = SQLUtil.normalize(" ADD ", false);
      assertEquals("ADD", string0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      stringBuilder0.append(false);
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.leftJoin("Page it its own child: ", stringArray0, (String) null, "Hk,AyoG/(98*^a{@)", stringArray0);
      assertEquals("left join null as Hk,AyoG/(98*^a{@) on ", string1);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" * ", (DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Hk,AyoG/(98*^a{@)", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter materialized view", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("ADD", false, dBTable0, "inner");
      String string2 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK inner", string2);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("XE`XL!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil.normalize("y7m;w;)W", true);
      StringBuilder stringBuilder0 = new StringBuilder();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("y7m;w;)W");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = PermDescriptor.UDT_TYPE;
      String string1 = SQLUtil.normalize("ADD", true);
      assertEquals("ADD", string1);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "ADD");
      stringBuilder0.append(false);
      DBCatalog dBCatalog0 = new DBCatalog("wQ1BjuUQ^");
      String string2 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog wQ1BjuUQ^", string2);
      
      TableContainer tableContainer0 = new TableContainer("", dBCatalog0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("wQ1BjuUQ^", (DBSchema) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "wQ1BjuUQ^";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string3 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = SQLUtil.normalize("getHoldability()", false);
      assertEquals("getHoldability ()", string0);
      
      Character character0 = Character.valueOf('F');
      SQLUtil.substituteMarkers("alter index", "create materialized view", character0);
      Boolean boolean0 = SQLUtil.mutatesStructure("create materialized view");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "getHoldability ()";
      stringArray0[1] = "@MH`{IsdmU}CbF[<`";
      stringArray0[2] = "@MH`{IsdmU}CbF[<`";
      stringArray0[3] = null;
      stringArray0[4] = "create materialized view";
      stringArray0[5] = ")";
      stringArray0[6] = "getHoldability()";
      stringArray0[7] = "getHoldability()";
      stringArray0[8] = ")";
      String string1 = SQLUtil.innerJoin("getHoldability()", stringArray0, "hB}yFNn", "l4~Ih|LWYNqF*yMd b", stringArray0);
      assertEquals("hB}yFNn as l4~Ih|LWYNqF*yMd b on getHoldability().getHoldability () = l4~Ih|LWYNqF*yMd b.getHoldability () and getHoldability().@MH`{IsdmU}CbF[<` = l4~Ih|LWYNqF*yMd b.@MH`{IsdmU}CbF[<` and getHoldability().@MH`{IsdmU}CbF[<` = l4~Ih|LWYNqF*yMd b.@MH`{IsdmU}CbF[<` and getHoldability().null = l4~Ih|LWYNqF*yMd b.null and getHoldability().create materialized view = l4~Ih|LWYNqF*yMd b.create materialized view and getHoldability().) = l4~Ih|LWYNqF*yMd b.) and getHoldability().getHoldability() = l4~Ih|LWYNqF*yMd b.getHoldability() and getHoldability().getHoldability() = l4~Ih|LWYNqF*yMd b.getHoldability() and getHoldability().) = l4~Ih|LWYNqF*yMd b.)", string1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.normalize("gce~H,ldability()", true);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "gce~H,ldability()");
      stringBuilder0.append(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TableContainer tableContainer0 = new TableContainer("Page it its own child: ");
      tableContainer0.getTable("unkn");
      DBUniqueConstraint dBUniqueConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("create unique indexnull");
      DBSchema dBSchema0 = new DBSchema("create unique indexnull");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique indexnull", dBSchema0);
      String[] stringArray0 = new String[1];
      MockFile mockFile0 = new MockFile("m.+W[G,.G09", "m.+W[G,.G09");
      SQLUtil.isDML("create unique indexnull");
      SQLUtil.removeComments("(");
      StringBuilder stringBuilder0 = new StringBuilder("RANDOM");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("calldelete", true, "create unique indexnull", "calldelete");
      SQLUtil.renderValue(mockFile0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("(", defaultDBTable0, 83, "(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.normalize("getHoldability()", true);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "getHoldability ()");
      stringBuilder0.append(true);
      DBCatalog dBCatalog0 = new DBCatalog("insert");
      SQLUtil.typeAndName(dBCatalog0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "getHoldability ()";
      stringArray0[1] = "getHoldability ()";
      stringArray0[2] = "executeadd";
      SQLUtil.leftJoin(">a`.[\"", stringArray0, "getHoldability ()", "catalog insert", stringArray0);
      SQLUtil.mutatesDataOrStructure("alter materialized view");
      SQLUtil.isDML("catalog insert");
      dBCatalog0.getTable("getHoldability ()", false);
      DBDataType dBDataType0 = DBDataType.getInstance((-465648368), "alter index");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("catalog insert", (DBTable) null, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("getHoldability ()trueALTER INDEX(1,1)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      SQLUtil.normalize("nSmOC-ihd?o-&RiZkT#`", false);
      String string0 = LogToFile.DBG_FLAG;
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      BasicUUID basicUUID0 = new BasicUUID();
      String[] stringArray0 = new String[1];
      basicUUID0.toString();
      stringArray0[0] = "nSmOC-ihd?o-&RiZkT#`";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.leftJoin("40XL1", stringArray0, (String) null, "v", stringArray0);
      SQLUtil.mutatesDataOrStructure("nSmOC - ihd ? o - & RiZkT # `");
      basicUUID0.toANSIidentifier();
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DBDataType dBDataType0 = DBDataType.getInstance(1156, "]`C7jw+a+");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("buffersnumb", defaultDBTable0, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      DefaultDBColumn defaultDBColumn1 = null;
      try {
        defaultDBColumn1 = new DefaultDBColumn("nSmOC - ihd ? o - & RiZkT # `", defaultDBTable0, 1156, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil.normalize("gce~H,ldability()", false);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "gce~H,ldability()");
      stringBuilder0.append(false);
      String string0 = "Page it its own child: ";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TableContainer tableContainer0 = new TableContainer("Page it its own child: ");
      tableContainer0.getTable("unkn");
      int int0 = 1820;
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("XhlN+tIq7U@T3mTm`y~", (DBTable) null, 1820, "gce ~ H, ldability ()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = "drop table";
      stringArray0[0] = "drop table";
      stringArray0[1] = "create uniq";
      stringArray0[2] = "d:G9`[&*7Xz3Wf0$:dQ";
      stringArray0[3] = "SELECT * FROM ";
      stringArray0[4] = "^s";
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      int int0 = 524;
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("drop table", defaultDBTable0, 524, "(drop table, create uniq, d:G9`[&*7Xz3Wf0$:dQ, SELECT * FROM , ^s, )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"drop table\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "@gTg.IdM&IJbg,jb`";
      SQLUtil.normalize("@gTg.IdM&IJbg,jb`", true);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "@gTg.IdM&IJbg,jb`");
      SQLUtil.mutatesStructure("FOREIGN KEY ");
      String string1 = "execy7m;w;)w";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execy7m;w;)w");
      DBUniqueIndex dBUniqueIndex0 = null;
      try {
        dBUniqueIndex0 = new DBUniqueIndex("@ gTg.IdM & IJbg, jb `", true, (DBUniqueConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.normalize("IOUtils.", true);
      DBCatalog dBCatalog1 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("IOUtils.");
      SQLUtil.typeAndName(dBCatalog0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "i~*K t`nA9#";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        dBCatalog1.getTable("IOUtils.", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'IOUtils.'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("create unique indexnull");
      DBSchema dBSchema0 = new DBSchema("create unique indexnull");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique indexnull", dBSchema0);
      String[] stringArray0 = new String[1];
      MockFile mockFile0 = new MockFile("create unique indexnull");
      MockFile mockFile1 = new MockFile("create unique indexnull");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale locale0 = Locale.forLanguageTag("create unique indexnull");
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      locale1.getDisplayVariant(locale0);
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "create unique indexnull", objectArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      DBTable dBTable0 = dBSchema0.getTable("create unique indexnull");
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM create unique indexnull WHERE null = null", string0);
      
      String string1 = SQLUtil.leftJoin("SELECT * FROM create unique indexnull WHERE null = null", stringArray0, "SELECT * FROM create unique indexnull WHERE null = null", "create unique indexnull", stringArray0);
      assertEquals("left join SELECT * FROM create unique indexnull WHERE null = null as create unique indexnull on SELECT * FROM create unique indexnull WHERE null = null.null = create unique indexnull.null", string1);
      
      Boolean boolean0 = new Boolean("left join SELECT * FROM create unique indexnull WHERE null = null as create unique indexnull on SELECT * FROM create unique indexnull WHERE null = null.null = create unique indexnull.null");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELECT * FROM create unique indexnull WHERE null = null", defaultDBTable0, 665, "SELECT * FROM create unique indexnull WHERE null = null");
      DBDataType dBDataType0 = DBDataType.getInstance(1000000, "55C;}}yA]$gsk~7~2");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.toUnsignedString(1000000);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("create unique indexnull", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.removeComments("create unique indexnull");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("create unique indexnull", string2);
      
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, "EUr[Q5:Ca", true, stringArray0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      String string3 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec1);
      assertEquals("UNIQUE ()", string3);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.normalize("r#`*'?<AJ.", true);
      String string1 = SQLUtil.normalize("r # ` * '?<AJ.'", true);
      assertTrue(string1.equals((Object)string0));
      assertEquals("r # ` * '?<AJ.'", string1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("[>!y`\"YY9(_x9Qj");
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      TableContainer tableContainer0 = new TableContainer("create table", (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.addTable(defaultDBTable0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("where", (DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "where", true, (String[]) null);
      SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT where ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLUtil.mutatesStructure("delete");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("delete", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      DBSchema dBSchema0 = new DBSchema("delete");
      defaultDBTable0.setSchema(dBSchema0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("CONSTRAINT delete FOREIGN KEY () REFERENCES null()");
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(lineNumberReader0);
      SQLUtil.renderNumber(streamTokenizer1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      String string0 = Table.TABLE_LINK;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLUtil.normalize("qHoEKD;uG32yN)i ", true);
      SQLUtil.parseColumnTypeAndSize("insert");
      SQLUtil.isDML("insert");
      System.setCurrentTimeMillis(0L);
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(432, "v:|+G;A#&>");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("qHoEKD;uG32yN)i ", defaultDBTable0, dBDataType0, integer0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("org.apache.derby.iapi.sql.execute.NoPutResultSet", defaultDBTable0, dBDataType0, integer1);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      JDBCType jDBCType0 = JDBCType.REF;
      Integer integer2 = jDBCType0.getVendorTypeNumber();
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("3%E-3L", defaultDBTable0, dBDataType0, integer2);
      Integer.max((-1618280579), 6);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      SQLUtil.renderColumnNames(dBColumnArray0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("insert");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = SQLUtil.normalize("y]m</;w;)l", true);
      assertEquals("y ] m < / ; w ;) l", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("y ] m < / ; w ;) l");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "y]m</;w;)l", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("y]m</;w;)l");
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLUtil.normalize("yV]m</;w;)l", false);
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("yV ] m < / ; w ;) l");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      SQLUtil.typeAndName(dBCatalog0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil.isProcedureCall("execleft join select * from create unique indexnull where null = null as m.+w[g,.g09 on select * from create unique indexnull where null = null.null = m.+w[g,.g09.null");
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "execleft join select * from create unique indexnull where null = null as m.+w[g,.g09 on select * from create unique indexnull where null = null.null = m.+w[g,.g09.null";
      stringArray0[1] = "left";
      stringArray0[2] = "yV ] m < / ; w ;) l";
      stringArray0[3] = "execleft join select * from create unique indexnull where null = null as m.+w[g,.g09 on select * from create unique indexnull where null = null.null = m.+w[g,.g09.null";
      stringArray0[4] = "left";
      stringArray0[5] = "catalog null";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "left", true, stringArray0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "catalog null");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable2.getUniqueConstraint("left");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("updatedba");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("updatedba", dBSchema0);
      MockFile mockFile0 = new MockFile("updatedba");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("updatedba");
      String string0 = CompilerContext.CONTEXT_ID;
      String string1 = FBConnectionProperties.BUFFERS_NUMBER_PROPERTY;
      Boolean boolean0 = new Boolean("CompilerContext");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/11_jdbacl");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "buffersNumber");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CompilerContext", defaultDBTable0, 663, "CompilerContext");
      TableContainer tableContainer0 = new TableContainer("buffersNumber");
      tableContainer0.getTables(false);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      defaultDBTable0.setOwner(tableContainer0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("buffersNumber", dBSchema0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("CompilerContext");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis((byte)125);
      SQLUtil.removeComments("updatedba");
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      assertEquals("table", defaultDBTable2.getObjectType());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("create unique indexnull");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique indexnull", dBSchema0);
      String[] stringArray0 = new String[4];
      MockFile mockFile0 = new MockFile("m.+W[G,.G09", "m.+W[G,.G09");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Locale.forLanguageTag("m.+W[G,.G09");
      String string0 = SchemaDescriptor.SA_USER_NAME;
      dBSchema0.getTables();
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.leftJoin("SELECT * FROM create unique indexnull WHERE null = null AND null = null AND null = null AND null = null", stringArray0, "SELECT * FROM create unique indexnull WHERE null = null AND null = null AND null = null AND null = null", "m.+W[G,.G09", stringArray0);
      Boolean boolean0 = Boolean.FALSE;
      TableContainer tableContainer0 = new TableContainer("left join SELECT * FROM create unique indexnull WHERE null = null AND null = null AND null = null AND null = null as m.+W[G,.G09 on SELECT * FROM create unique indexnull WHERE null = null AND null = null AND null = null AND null = null.null = m.+W[G,.G09.null and SELECT * FROM create unique indexnull WHERE null = null AND null = null AND null = null AND null = null.null = m.+W[G,.G09.null and SELECT * FROM create unique indexnull WHERE null = null AND null = null AND null = null AND null = null.null = m.+W[G,.G09.null and SELECT * FROM create unique indexnull WHERE null = null AND null = null AND null = null AND null = null.null = m.+W[G,.G09.null", defaultDBTable0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("SELECT * FROM create unique indexnull WHERE null = null AND null = null AND null = null AND null = null", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = TypeId.INTEGER_NAME;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("caocji VXkm!x");
      defaultDBTable0.getForeignKeyConstraints();
      DefaultDBTable defaultDBTable2 = new DefaultDBTable("left join SELECT * FROM create unique indexnull WHERE null = null AND null = null AND null = null AND null = null as m.+W[G,.G09 on SELECT * FROM create unique indexnull WHERE null = null AND null = null AND null = null AND null = null.null = m.+W[G,.G09.null and SELECT * FROM create unique indexnull WHERE null = null AND null = null AND null = null AND null = null.null = m.+W[G,.G09.null and SELECT * FROM create unique indexnull WHERE null = null AND null = null AND null = null AND null = null.null = m.+W[G,.G09.null and SELECT * FROM create unique indexnull WHERE null = null AND null = null AND null = null AND null = null.null = m.+W[G,.G09.null");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("SELECT * FROM create unique indexnull WHERE null = null AND null = null AND null = null AND null = null");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.normalize("create table", false);
      SQLUtil.leftJoin((String) null, stringArray0, "DataFileCache.close(", "create unique indexnull", stringArray0);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.renderColumnListWithTableName("DataFileCache.close(", stringArray0);
      System.setCurrentTimeMillis(662);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = SQLUtil.normalize(";pFG('3JkKf`$:", false);
      assertEquals("; pFG ('3JkKf`$:'", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("; pFG ('3JkKf`$:'");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      SQLUtil.typeAndName(dBCatalog0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil sQLUtil0 = new SQLUtil();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(";pFG('3JkKf`$:");
      defaultDBTable1.getColumns();
      mockPrintWriter0.append('v');
      String string1 = DataFactory.TEMP_SEGMENT_NAME;
      Boolean boolean0 = SQLUtil.mutatesStructure("]F4l8k'~2J b");
      assertFalse(boolean0);
      
      String string2 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("null", string2);
      
      String string3 = SQLUtil.typeAndName(defaultDBTable1);
      assertEquals("table null", string3);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLUtil.normalize("exec*/", false);
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec */");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      SQLUtil.typeAndName(dBCatalog0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil.isProcedureCall("execleft join select * from create unique indexnull where null = null as m.+w[g,.g09 on select * from create unique indexnull where null = null.null = m.+w[g,.g09.null");
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "left";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "hVDE5(oCF>b!", false, stringArray0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "left");
      SQLUtil.addRequiredCondition("nw(", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-704), 'y');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SQLUtil.removeComments("[>!y`\"YY9(_x9Qj");
      StringBuilder stringBuilder0 = new StringBuilder();
      TableContainer tableContainer0 = new TableContainer("[>!y`\"YY9(_x9Qj", (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[>!y`\"YY9(_x9Qj", (DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "[>!y`\"YY9(_x9Qj", true, (String[]) null);
      stringBuilder0.append("[>!y`\"YY9(_x9Qj");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      Integer.toUnsignedString(1);
      Integer.compareUnsigned(480, 1);
      DBDataType.getInstance((-1795101645), "1");
      SQLUtil.normalize("3N5Xq\"xm", true);
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      SQLUtil.removeComments("[>!y`\"YY9(_x9Qj");
      StringBuilder stringBuilder0 = new StringBuilder();
      TableContainer tableContainer0 = new TableContainer("alter tableselect * from create unique indexnull where null = null and null = null and null = null and null = null", (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.getSchema();
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[>!y`\"YY9(_x9Qj", (DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      StringBuilder stringBuilder1 = stringBuilder0.append("c\reate tabe");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      Integer.toUnsignedString(1);
      Integer.compareUnsigned(1, 335544599);
      DBDataType.getInstance(480, "[>!y`\"YY9(_x9Qj");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("where");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }
}
