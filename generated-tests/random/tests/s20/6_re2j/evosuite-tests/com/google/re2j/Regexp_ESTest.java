/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 04:44:26 GMT 2019
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Regexp_ESTest extends Regexp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1190);
      intArray0[1] = 15;
      intArray0[2] = 2508;
      regexp0.name = "";
      intArray0[3] = (-2539);
      intArray0[4] = 9719;
      regexp0.runes = intArray0;
      intArray0[5] = (-2069);
      intArray0[6] = 45;
      intArray0[7] = 25;
      regexp0.runes = intArray0;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "Ll";
      regexp0.max = 6823;
      regexp0.flags = 6823;
      regexp0.min = 1761;
      regexp0.name = "zHftnjE:x>\"O#Sd";
      regexp0.equals(regexp_Op0);
      regexp0.equals("zHftnjE:x>\"O#Sd");
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = 8527;
      regexp0.reinit();
      regexp0.flags = 8527;
      regexp0.toString();
      regexp0.equals("(?-m:$)");
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(?-m:$)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?-m:$)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int int0 = 1506;
      regexp1.min = 1506;
      int[] intArray0 = new int[1];
      intArray0[0] = 1506;
      regexp0.runes = intArray0;
      regexp1.equals(regexp0);
      regexp0.maxCap();
      Regexp regexp2 = new Regexp(regexp0);
      regexp2.name = "W]TdNoS.W5>*@?5hXYI";
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = 1506;
      int int1 = 5;
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexpArray0[0].op = regexp_Op0;
      regexp1.reinit();
      regexp1.subs = regexpArray0;
      regexp1.max = 4646;
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      assertTrue(regexp1.equals((Object)regexp0));
      
      regexp0.flags = 4020;
      regexp1.min = 1;
      regexp1.equals(regexp0);
      Regexp.Op.values();
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp_Op0.isPseudo();
      Regexp.Op.valueOf("CONCAT");
      int int0 = regexp1.maxCap();
      assertFalse(regexp1.equals((Object)regexp0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.CHAR_CLASS;
      Regexp[] regexpArray0 = new Regexp[2];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp1;
      regexp1.subs = regexpArray0;
      regexpArray0[1].max = (-898);
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp1.equals(regexp2);
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp.Op.valueOf("CHAR_CLASS");
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      String string0 = "QUEST";
      Regexp.Op regexp_Op1 = Regexp.Op.valueOf("QUEST");
      Regexp regexp0 = new Regexp(regexp_Op1);
      regexp0.min = (-7);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.cap = (-7);
      Regexp.Op.valueOf("QUEST");
      regexp1.flags = 18;
      Regexp.Op regexp_Op2 = Regexp.Op.CAPTURE;
      regexp1.op = regexp_Op2;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp1;
      regexp0.subs = regexpArray0;
      regexp1.maxCap();
      Regexp.Op.valueOf("QUEST");
      regexp_Op1.isPseudo();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.subs = null;
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.flags = (-347);
      Regexp.Op regexp_Op1 = Regexp.Op.END_LINE;
      regexp0.equals(regexp1);
      regexp1.subs = null;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp1.equals(regexp2);
      regexp1.op = regexp_Op0;
      regexp0.maxCap();
      regexp_Op1.isPseudo();
      Object object0 = new Object();
      regexp1.equals(object0);
      Object object1 = new Object();
      regexp0.equals(object1);
      Regexp.Op.values();
      regexp1.maxCap();
      Regexp.Op regexp_Op2 = Regexp.Op.valueOf("ALTERNATE");
      assertNotSame(regexp_Op2, regexp_Op0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.cap = 577;
      regexp0.op = regexp_Op0;
      regexp1.flags = (-694);
      Regexp regexp2 = new Regexp(regexp0);
      regexp2.op = regexp_Op0;
      regexp1.equals(regexp2);
      regexp1.maxCap();
      regexp0.equals(regexp1);
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-3245);
      intArray0[1] = 32;
      intArray0[2] = 45;
      intArray0[3] = (-97);
      intArray0[4] = (-1534);
      intArray0[5] = (-654);
      intArray0[6] = 17;
      intArray0[7] = 11;
      regexp0.runes = intArray0;
      regexp0.equals(regexp_Op0);
      String string0 = regexp0.toString();
      assertEquals("\\xfffff353 -\\xffffff9f\\xfffffa02\\xfffffd72\\x11\\x0b", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.max = 3020;
      regexp0.min = 2530;
      regexp0.flags = 43;
      regexp0.runes = null;
      regexp0.flags = 3142;
      regexp0.maxCap();
      regexp_Op0.isPseudo();
      regexp0.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("R*{FIW+9>r~jpy7)\"W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.R*{FIW+9>r~jpy7)\"W
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.STAR;
      Regexp[] regexpArray0 = new Regexp[5];
      regexpArray0[0] = regexp1;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[1] = regexp2;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp.Op regexp_Op2 = Regexp.Op.END_LINE;
      Regexp regexp3 = new Regexp(regexp_Op2);
      regexpArray0[4] = regexp3;
      regexp1.subs = regexpArray0;
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.valueOf("PLUS");
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.maxCap();
      Regexp regexp1 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        regexp0.equals(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int[] intArray0 = new int[3];
      regexp0.min = 64435;
      intArray0[0] = 64435;
      intArray0[1] = 120071;
      intArray0[2] = (-1341);
      regexp1.runes = intArray0;
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.name = "qZ";
      boolean boolean0 = regexp1.equals(regexp0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = 2426;
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[1];
      Regexp regexp2 = new Regexp(regexp0);
      regexpArray0[0] = regexp2;
      regexp1.subs = regexpArray0;
      regexp1.name = "Noncharacter_Code_Point";
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 2967;
      regexp0.equals(regexp_Op0);
      regexp0.equals(regexp_Op0);
      regexp0.toString();
      regexp0.equals("z");
      regexp0.max = 10;
      Regexp.Op.values();
      regexp0.name = "ALTERNATE";
      Regexp.Op.values();
      regexp0.toString();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      boolean boolean0 = regexp0.equals(regexp_Op0);
      assertFalse(boolean0);
      
      regexp0.toString();
      regexp0.toString();
      Regexp.Op.values();
      Regexp.Op.values();
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean1 = regexp0.equals(regexp1);
      boolean boolean2 = regexp_Op0.isPseudo();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      String string0 = "ANY_CHAR_NOT_NL";
      regexp0.max = 15;
      regexp1.name = "ANY_CHAR_NOT_NL";
      regexp1.min = (-1024);
      regexp1.cap = (-1024);
      regexp1.maxCap();
      Regexp.Op.values();
      Regexp[] regexpArray0 = new Regexp[2];
      regexp0.reinit();
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexp1.reinit();
      regexp0.subs = regexpArray0;
      regexpArray0[0].flags = 0;
      regexp1.reinit();
      regexp0.min = (-694);
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexp0.subs = regexpArray0;
      regexp0.cap = 20;
      regexp0.cap = 20;
      int int0 = 2542;
      regexp0.cap = 20;
      regexp0.cap = 2542;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.max = 1076;
      regexp1.maxCap();
      regexp1.reinit();
      Regexp.Op.values();
      regexp1.name = "3Rm}&\r]";
      regexp1.maxCap();
      regexp_Op0.isPseudo();
      regexp0.equals(regexp1);
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("3Rm}&\r]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.3Rm}&\r]
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Object object0 = new Object();
      regexp1.max = 561;
      regexp0.max = 561;
      regexp1.reinit();
      regexp1.cap = 3;
      boolean boolean0 = regexp1.equals(object0);
      regexp1.toString();
      regexp1.toString();
      regexp0.toString();
      boolean boolean1 = regexp0.equals(regexp1);
      assertFalse(boolean1 == boolean0);
      
      regexp0.toString();
      assertTrue(regexp0.equals((Object)regexp1));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.min = (-1169);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      regexp1.max = 3;
      regexp1.equals(regexp0);
      String string0 = "[^\\x00-\\x{10FFFF}]";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("[^x00-x{10FFFF}]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.[^x00-x{10FFFF}]
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = 5984;
      regexp0.min = 5984;
      regexp0.name = "X";
      int int1 = 6;
      regexp0.cap = 6;
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp0.max = 6;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.name = "o9iGFIU9*0LT";
      int[] intArray0 = new int[6];
      intArray0[0] = 94;
      intArray0[1] = 2472;
      intArray0[2] = (-551);
      intArray0[3] = 12;
      intArray0[4] = 3878;
      intArray0[5] = 16;
      regexp1.runes = intArray0;
      regexp1.min = 10;
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "";
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1925);
      intArray0[1] = (-694);
      regexp0.runes = intArray0;
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      regexp0.min = 481;
      String string0 = regexp0.toString();
      assertEquals("[\\xfffff87b-\\xfffffd4a]", string0);
      
      regexp0.cap = 19;
      regexp0.reinit();
      boolean boolean0 = regexp_Op0.isPseudo();
      boolean boolean1 = regexp0.equals(regexp_Op0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      regexp0.min = 123;
      Object object0 = new Object();
      regexp0.equals(object0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.equals(regexp1);
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.min = (-75);
      regexp0.flags = 14;
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp0.equals(regexp1);
      regexp_Op0.isPseudo();
      Regexp regexp2 = new Regexp(regexp0);
      regexp0.equals(regexp2);
      regexp0.reinit();
      Regexp.Op regexp_Op2 = Regexp.Op.WORD_BOUNDARY;
      regexp2.op = regexp_Op2;
      regexp2.min = (-1649);
      regexp0.maxCap();
      regexp2.toString();
      Regexp.Op.values();
      String string0 = "U190G#Q7gyDDKS\"]_";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("U190G#Q7gyDDKS\"]_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.U190G#Q7gyDDKS\"]_
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = (-552);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.cap = (-552);
      int[] intArray0 = new int[0];
      regexp1.runes = intArray0;
      regexp0.cap = (-552);
      regexp1.toString();
      regexp0.maxCap();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("JngZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.JngZ
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.toString();
      int[] intArray0 = new int[9];
      intArray0[0] = 12;
      intArray0[1] = 2326;
      intArray0[2] = 1114111;
      intArray0[3] = 3;
      intArray0[4] = 2825;
      intArray0[5] = 9;
      intArray0[6] = (-128);
      intArray0[7] = 7;
      intArray0[8] = 65505;
      regexp0.runes = intArray0;
      String string0 = regexp1.toString();
      assertEquals("[^\\x00-\\x{10FFFF}]", string0);
      
      boolean boolean0 = regexp1.equals(regexp0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = 19;
      regexp0.flags = 504;
      String string0 = "~pP|&7q";
      regexp0.name = "~pP|&7q";
      regexp0.maxCap();
      Regexp.Op.values();
      regexp0.maxCap();
      regexp0.maxCap();
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.WORD_BOUNDARY;
      regexp1.op = regexp_Op1;
      regexp1.toString();
      Regexp.Op regexp_Op2 = Regexp.Op.BEGIN_TEXT;
      Regexp.Op regexp_Op3 = Regexp.Op.EMPTY_MATCH;
      regexp1.op = regexp_Op3;
      regexp1.runes = null;
      regexp1.cap = 17;
      regexp1.toString();
      regexp0.equals("\b");
      regexp1.max = 93;
      Regexp regexp2 = new Regexp(regexp_Op2);
      Regexp.Op regexp_Op4 = Regexp.Op.CONCAT;
      regexp2.op = regexp_Op4;
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("(?:)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.(?:)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp0 = new Regexp(regexp_Op0);
      String string0 = regexp0.toString();
      assertEquals("(?:)", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp.Op.valueOf("BEGIN_LINE");
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      Regexp.Op.values();
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.REPEAT;
      regexp0.op = regexp_Op1;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.min = 1506;
      regexp1.equals(regexp0);
      regexp0.maxCap();
      Regexp regexp2 = new Regexp(regexp0);
      regexp2.name = "W]TdNoS.W5>*@?5hXYI";
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 1506;
      intArray0[2] = 5;
      intArray0[3] = 0;
      intArray0[4] = 18;
      intArray0[5] = 1506;
      intArray0[6] = 0;
      intArray0[7] = (-240);
      regexp1.runes = intArray0;
      boolean boolean0 = regexp0.equals(regexp2);
      assertTrue(boolean0);
      
      int int0 = regexp1.maxCap();
      assertFalse(regexp1.equals((Object)regexp0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp1 = new Regexp(regexp_Op1);
      regexp0.equals(regexp1);
      Regexp regexp2 = new Regexp(regexp0);
      Regexp regexp3 = new Regexp(regexp2);
      regexp2.equals(regexp3);
      Regexp.Op regexp_Op2 = Regexp.Op.valueOf("CHAR_CLASS");
      Regexp.Op regexp_Op3 = Regexp.Op.NO_MATCH;
      regexp0.op = regexp_Op3;
      regexp3.min = (-4321);
      regexp0.reinit();
      regexp0.flags = (-4321);
      regexp3.toString();
      regexp3.toString();
      regexp3.toString();
      regexp3.toString();
      Regexp.Op.valueOf("CHAR_CLASS");
      regexp_Op2.isPseudo();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("P`J{a%d7'q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.P`J{a%d7'q
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-1925);
      intArray0[1] = (-694);
      regexp0.runes = intArray0;
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      regexp0.min = 481;
      regexp0.toString();
      regexp0.cap = 19;
      regexp0.reinit();
      boolean boolean0 = regexp_Op0.isPseudo();
      boolean boolean1 = regexp0.equals(regexp_Op0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = (-395);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.toString();
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp1;
      regexpArray0[4] = regexp1;
      regexpArray0[5] = regexp1;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[6] = regexp2;
      regexp1.subs = regexpArray0;
      regexp0.min = (-395);
      regexp1.reinit();
      regexp0.reinit();
      regexp0.name = "pOoN9n";
      Object object0 = new Object();
      regexp1.equals(object0);
      regexp_Op0.isPseudo();
      Regexp.Op.values();
      regexp1.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.z
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.maxCap();
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp0.equals(regexp1);
      regexp0.op = regexp_Op1;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Object object0 = new Object();
      regexp0.equals(object0);
      regexp0.cap = 63;
      regexp0.cap = 1403;
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.reinit();
      regexp1.equals(regexp0);
      regexp1.toString();
      regexp1.reinit();
      regexp1.equals(regexp0);
      regexp1.cap = 63;
      Regexp.Op.values();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.A
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "";
      regexp0.reinit();
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.toString();
      regexp1.equals("");
      regexp1.reinit();
      regexp1.flags = (-1922);
      regexp1.max = 15;
      regexp1.toString();
      regexp1.flags = (-1922);
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      Regexp.Op.values();
      regexp_Op0.isPseudo();
      regexp1.maxCap();
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      regexp0.flags = 4;
      Regexp.Op.values();
      regexp1.equals("B");
      regexp1.equals("B");
      regexp0.equals("");
      regexp0.equals(regexp1);
      regexp0.maxCap();
      regexp1.maxCap();
      Regexp.Op[] regexp_OpArray0 = Regexp.Op.values();
      assertEquals(21, regexp_OpArray0.length);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.BEGIN_LINE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      boolean boolean0 = regexp1.equals(regexp0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[3];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[1].min = 10;
      regexpArray0[1].min = 10;
      regexp0.subs = regexpArray0;
      regexp0.toString();
      boolean boolean0 = regexp_Op0.isPseudo();
      regexp0.toString();
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR;
      Regexp regexp1 = new Regexp(regexp_Op1);
      boolean boolean1 = regexp1.equals("(?s:.)");
      assertFalse(boolean1);
      
      boolean boolean2 = regexp0.equals(regexp1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.LEFT_PAREN;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "Samaritan";
      regexp0.min = 1022;
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_LINE;
      regexp0.op = regexp_Op1;
      regexp0.toString();
      regexp0.toString();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.^
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.END_LINE;
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.toString();
      int int0 = 1312;
      regexp0.min = 1312;
      regexp0.flags = 1312;
      regexp0.op = regexp_Op0;
      regexp0.toString();
      int[] intArray0 = new int[7];
      intArray0[0] = 1312;
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("m!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.m!
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Regexp regexp0 = null;
      Regexp regexp1 = null;
      try {
        regexp1 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.PLUS;
      regexp1.min = (-401);
      regexp1.op = regexp_Op1;
      regexp1.reinit();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-401);
      intArray0[3] = 0;
      intArray0[4] = (-401);
      intArray0[5] = 0;
      intArray0[6] = 0;
      regexp0.runes = intArray0;
      String string0 = "\\u(IGM=c";
      regexp1.equals(string0);
      Object object0 = new Object();
      regexp1.equals(object0);
      regexp0.reinit();
      assertNotSame(regexp0, regexp1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      int int0 = (-250);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Object object0 = new Object();
      regexp0.equals(object0);
      Regexp[] regexpArray0 = new Regexp[1];
      regexp0.cap = (-3593);
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Regexp regexp0 = null;
      try {
        regexp0 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.LITERAL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.max = (-959);
      Regexp.Op regexp_Op1 = Regexp.Op.LEFT_PAREN;
      regexp0.op = regexp_Op1;
      regexp0.cap = (-959);
      regexp0.name = "Canadian_Aboriginal";
      Object object0 = new Object();
      regexp0.name = "Canadian_Aboriginal";
      regexp0.cap = (-959);
      regexp0.equals(object0);
      regexp0.max = 3216;
      regexp0.min = (-1788);
      regexp0.maxCap();
      regexp0.name = "Canadian_Aboriginal";
      regexp0.toString();
      regexp0.maxCap();
      Regexp.Op.values();
      regexp0.toString();
      regexp0.equals(regexp_Op0);
      regexp0.equals("Canadian_Aboriginal");
      regexp0.maxCap();
      regexp0.subs = null;
      regexp0.equals(regexp_Op1);
      regexp0.maxCap();
      regexp0.equals((Object) null);
      boolean boolean0 = regexp_Op1.isPseudo();
      int int0 = regexp0.maxCap();
      assertEquals(0, int0);
      
      boolean boolean1 = regexp0.equals(regexp_Op1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_WORD_BOUNDARY;
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("Pi");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.Pi
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[0];
      regexp0.subs = regexpArray0;
      regexp1.op = regexp_Op0;
      regexp1.flags = 45;
      Regexp regexp2 = new Regexp(regexp0);
      regexp1.max = 20;
      Object object0 = new Object();
      regexp2.equals(object0);
      regexp2.toString();
      regexp0.equals(regexp2);
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.NO_MATCH;
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      regexp_Op0.isPseudo();
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.name = "AiZV/Ro.FkD";
      regexp0.equals(regexp_Op0);
      regexp0.reinit();
      regexp0.equals(regexp_Op0);
      regexp0.reinit();
      regexp0.toString();
      regexp_Op0.isPseudo();
      regexp0.name = "RUMHH*UvmTWCHNHp";
      regexp0.toString();
      Regexp.Op.values();
      Regexp.Op.values();
      String string0 = "v^YyZx ,\"-_/^3Ox,[";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("v^YyZx ,\"-_/^3Ox,[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.v^YyZx ,\"-_/^3Ox,[
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.QUEST;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int[] intArray0 = new int[3];
      intArray0[0] = 7;
      intArray0[1] = (-872);
      intArray0[2] = 3;
      regexp0.runes = intArray0;
      // Undeclared exception!
      try { 
        regexp0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      // Undeclared exception!
      try { 
        regexp1.equals(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Regexp.Op.values();
      Regexp.Op regexp_Op0 = Regexp.Op.CHAR_CLASS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = (-2368);
      regexp0.max = 15;
      regexp0.max = 15;
      int[] intArray0 = new int[1];
      intArray0[0] = (-17);
      regexp0.runes = intArray0;
      String string0 = "YMoy";
      regexp0.name = "YMoy";
      regexp0.flags = 15;
      regexp0.toString();
      regexp_Op0.isPseudo();
      // Undeclared exception!
      try { 
        Regexp.Op.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.google.re2j.Regexp.Op.
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
