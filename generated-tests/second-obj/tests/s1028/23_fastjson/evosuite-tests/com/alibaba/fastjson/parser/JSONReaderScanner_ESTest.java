/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:27:53 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.CharArrayReader;
import java.io.FileDescriptor;
import java.io.PipedReader;
import java.math.BigDecimal;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONReaderScanner_ESTest extends JSONReaderScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("g&9?z]yjh:");
      jSONReaderScanner0.sub_chars(0, 0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("IgnoreNonFieldGetter");
      byte[] byteArray0 = jSONReaderScanner0.bytesValue();
      assertEquals('I', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("g&9?z]yh:");
      jSONReaderScanner0.sub_chars(0, 0);
      assertEquals('', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal stat, textLength is zero");
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      charArray0[1] = 'D';
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("g{W");
      char[] charArray0 = new char[1];
      jSONReaderScanner0.copyTo(0, 0, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals('g', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 388, 61);
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(0, charArray0, 388, 61);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.skip(1186L);
      charArrayReader0.markSupported();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*ruam~n5sQXV*o");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      String string0 = jSONReaderScanner0.subString(126, 126);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 123);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 0);
      jSONReaderScanner0.scanDate('S');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis((-475L));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("TODO", (-1468));
      jSONReaderScanner0.close();
      assertEquals('T', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("g&9?z]yh:");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      char[] charArray1 = new char[1];
      charArray1[0] = '!';
      jSONReaderScanner0.copyTo(1, 1, charArray1);
      assertEquals('', jSONReaderScanner0.getCurrent());
      assertArrayEquals(new char[] {'g'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("s'{5<J>uh", 5555);
      jSONReaderScanner0.subString(5555, 5555);
      assertEquals('s', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = '7';
      charArray0[2] = '\u0000';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 435);
      jSONReaderScanner0.next();
      jSONReaderScanner0.features = 5546;
      jSONReaderScanner0.np = 2188;
      boolean boolean0 = jSONReaderScanner0.hasSpecial;
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.numberString();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileDescriptor fileDescriptor1 = new FileDescriptor();
      assertFalse(fileDescriptor1.valid());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 435);
      boolean boolean0 = jSONReaderScanner0.isEOF();
      assertFalse(boolean0);
      
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.indexOf('i', 66);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.markSupported();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.charArrayCompare(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars((-984), (-984));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -984
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.stringVal();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("g&9?z]yh:");
      jSONReaderScanner0.sub_chars(5539, 5539);
      assertEquals('', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("9 &-Gs0WwTik", 5588);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString((-902), (-902));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -902
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanNumber();
      SymbolTable symbolTable0 = new SymbolTable(48);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol((-932), 3557, (-932), symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.bytesValue();
      char char0 = jSONReaderScanner0.charAt(3293);
      assertEquals('\u0000', char0);
      
      char char1 = jSONReaderScanner0.next();
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals('\u001A', char1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '2';
      char[] charArray1 = new char[5];
      charArray1[0] = '2';
      charArray1[1] = '2';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 52);
      jSONReaderScanner0.scanFieldFloatArray(charArray1);
      jSONReaderScanner0.nextToken(126);
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(52, 5538, charArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '(';
      charArray0[2] = ']';
      charArray0[3] = '(';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 435);
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.indexOf('\u0000', '(');
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = '(';
      charArray0[2] = '\u0000';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 435);
      jSONReaderScanner0.next();
      jSONReaderScanner0.bp = 435;
      jSONReaderScanner0.setToken(435);
      jSONReaderScanner0.np = 2188;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charArrayCompare(charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      charArray0[1] = '1';
      char[] charArray1 = new char[5];
      charArray1[0] = '1';
      charArray1[1] = '1';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '1');
      jSONReaderScanner0.scanFieldFloatArray(charArray1);
      jSONReaderScanner0.nextToken((int) '1');
      jSONReaderScanner0.close();
      jSONReaderScanner0.charAt('1');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.stringVal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = '(';
      charArray0[2] = '\u0000';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 435);
      jSONReaderScanner0.next();
      jSONReaderScanner0.setToken(435);
      jSONReaderScanner0.np = 2188;
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.charArrayCompare(charArray0);
      Object[] objectArray0 = new Object[6];
      objectArray0[3] = (Object) charArray0;
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[2] = '7';
      charArray0[2] = '\u0000';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 435);
      jSONReaderScanner0.next();
      jSONReaderScanner0.setToken(435);
      jSONReaderScanner0.features = 5546;
      jSONReaderScanner0.np = 2199;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '1';
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)73;
      byteArray0[5] = (byte)0;
      byteArray0[7] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("o");
      jSONReaderScanner0.nextToken((-2313));
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = '\r';
      charArray0[0] = '\r';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '\r');
      byte byte0 = (byte) (-1);
      byte byte1 = (byte)73;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      boolean boolean0 = jSONReaderScanner0.hasSpecial;
      FileSystemHandling.shouldAllThrowIOExceptions();
      char char1 = Locale.UNICODE_LOCALE_EXTENSION;
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.isBlankInput();
      BigDecimal bigDecimal0 = new BigDecimal((int) 'u');
      char char2 = Locale.UNICODE_LOCALE_EXTENSION;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }
}
