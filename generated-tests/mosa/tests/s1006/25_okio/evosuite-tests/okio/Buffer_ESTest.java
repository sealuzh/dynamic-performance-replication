/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:22:48 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[2];
      realBufferedSink0.write(byteArray0);
      realBufferedSink0.buffer.readAndWriteUnsafe();
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Buffer buffer2 = buffer1.readFrom((InputStream) sequenceInputStream0);
      assertSame(buffer1, buffer2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8CodePoint(1214);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("ygs", charset0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer2.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(406L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.read(realBufferedSink0.buffer, (-1815L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1815
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-1860L));
      // Undeclared exception!
      try { 
        buffer1.readByteString((-1860L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=0 byteCount=-1860
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.close();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.timeout();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.inputStream();
      buffer0.writeUtf8("e1+JwQ':G>");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUnsafe();
      buffer0.writeUtf8CodePoint((-1426));
      // Undeclared exception!
      try { 
        buffer0.rangeEquals((long) (-1426), (ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Pipe pipe0 = new Pipe(8L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.rangeEquals(8L, (ByteString) null, 761, 761);
      Buffer buffer1 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.write(buffer1, 8L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null, 3345, (-2961));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      Buffer buffer1 = buffer0.writeLongLe(100L);
      buffer1.toString();
      OutputStream outputStream0 = buffer1.outputStream();
      buffer0.writeTo(outputStream0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Segment segment0 = new Segment();
      realBufferedSource0.buffer.head = segment0;
      Buffer buffer1 = realBufferedSource0.buffer();
      buffer1.rangeEquals(10000L, (ByteString) null, (-55297), (-55297));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("YKq-gsHe{F^n7UM");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(buffer_UnsafeCursor0.buffer, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      try { 
        realBufferedSource0.readByteString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: incorrect header check
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe(846L);
      buffer0.readUtf8Line();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("G'f*PI&", Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 2147483647 > 7
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(65231);
      HashingSource.sha256(buffer0);
      // Undeclared exception!
      try { 
        buffer1.readFrom((InputStream) null, 100000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(18L);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong((-1875));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-819L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x2d
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      buffer0.writeHexadecimalUnsignedLong((-1L));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer0.flush();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("uC)hwX29", charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.write((Source) realBufferedSource0, 16711680L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Object object0 = new Object();
      buffer0.equals(object0);
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("uC)hwX29", charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer1.md5();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-99L));
      Segment segment0 = new Segment();
      SegmentPool.next = segment0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer1.readLong();
      // Undeclared exception!
      try { 
        buffer1.readFully(buffer0, 922337203L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer0.readUtf8();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.toString();
      buffer_UnsafeCursor0.buffer.readUtf8();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((-1));
      buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe((-647L));
      buffer0.readUtf8CodePoint();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(16711676);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: fefffc
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      buffer0.hashCode();
      buffer0.sha512();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clear();
      Buffer buffer1 = buffer0.writeLongLe(65536);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.next();
      buffer0.readByteArray((long) 0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer1.selectPrefix(options0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe((-1860L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.writeAll(buffer0);
      realBufferedSink0.buffer.readUtf8Line();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(48);
      // Undeclared exception!
      try { 
        buffer1.indexOfElement((ByteString) null, (long) 48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.completeSegmentByteCount();
      realBufferedSink0.writeDecimalLong(0L);
      Buffer buffer1 = realBufferedSink0.buffer.writeUtf8CodePoint(48);
      // Undeclared exception!
      try { 
        buffer1.indexOfElement((ByteString) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[2];
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.write(byteArray0);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource.hmacSha256(realBufferedSink1.buffer, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      realBufferedSource0.buffer.readAll(buffer0);
      Buffer buffer1 = realBufferedSink1.buffer;
      realBufferedSink0.buffer.indexOf(byteString0);
      realBufferedSink0.buffer.indexOfElement(byteString0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.completeSegmentByteCount();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readFrom((InputStream) sequenceInputStream0, (-1860L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1860
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)5, (long) (byte)5);
      Object object0 = new Object();
      buffer0.readUnsafe();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      long long0 = 6L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeDecimalLong(1000000000L);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeDecimalLong(100000000000000000L);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8CodePoint(102);
      buffer0.readAll(bufferedSink0);
      realBufferedSink0.buffer.writeDecimalLong(1000000000000000000L);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeUtf8CodePoint(2821);
      realBufferedSink0.buffer.readAll(buffer0);
      realBufferedSink0.buffer.writeDecimalLong(2821);
      FileSystemHandling.shouldAllThrowIOExceptions();
      long long0 = new Integer(2821);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.hashCode();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(846L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=845 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-99L));
      Buffer buffer2 = buffer1.writeShortLe((byte)5);
      // Undeclared exception!
      try { 
        buffer2.indexOf((byte)5, (-99L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=10 fromIndex=-99 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = 846L;
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      buffer0.toString();
      buffer0.writeDecimalLong(10000000000000L);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = buffer0.writeDecimalLong(1095216660480L);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink0.writeByte((-2123));
      buffer1.readIntLe();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(65231);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(65231);
      buffer0.readHexadecimalUnsignedLong();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Pipe pipe0 = new Pipe(3076L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.buffer();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-1L));
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x2d
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      buffer0.hashCode();
      byte[] byteArray0 = new byte[0];
      buffer1.read(byteArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1374L);
      Buffer buffer1 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1374L);
      buffer_UnsafeCursor0.resizeBuffer(65280L);
      buffer1.readUtf8Line(24320L);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeShortLe((-548));
      charset0.aliases();
      buffer1.readShort();
      // Undeclared exception!
      try { 
        buffer1.writeString("7&X$B{xPvy8!$", (-548), (-548), charset0);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -548
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = (-3062);
      int int1 = 1103;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("", (-3062), 1103);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -3062
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(398L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(586L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=586 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.completeSegmentByteCount();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)88;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource.hmacSha256(realBufferedSink0.buffer, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSource0.buffer.readAll(buffer1);
      Buffer buffer2 = buffer0.writeDecimalLong(0L);
      buffer2.indexOfElement(byteString0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.toString();
      buffer0.outputStream();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(8L);
      buffer1.writeHexadecimalUnsignedLong(8L);
      Charset charset0 = Charset.defaultCharset();
      int int0 = 81;
      // Undeclared exception!
      try { 
        buffer0.writeString("tH$_6z", 81, 81, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 81 > 6
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      try { 
        realBufferedSource0.buffer.write((Source) buffer_UnsafeCursor0.buffer, 100000000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-647L));
      Buffer buffer2 = buffer1.clone();
      buffer2.writeIntLe(45);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.segmentSizes();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.hmacSha512(byteString0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.writeDecimalLong(280375465082880L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.readHexadecimalUnsignedLong();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha1();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.write((Source) buffer_UnsafeCursor0.buffer, (-1L));
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("|Ko8", charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer1.indexOf(byteString0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-1L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      buffer1.indexOfElement(byteString0, 2062716720L);
      buffer0.readUtf8Line();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("uC)hwX29", charset0);
      buffer1.readIntLe();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      HashingSink.md5(hashingSink0);
      ByteString byteString0 = hashingSink0.hash();
      buffer1.indexOfElement(byteString0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeUtf8("tn");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.write(buffer0);
      realBufferedSink0.buffer.indexOfElement(byteString0);
      realBufferedSink0.buffer.clone();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(65280L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      realBufferedSource0.readByteString(65280L);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer1 = realBufferedSource0.buffer.writeUtf8CodePoint(10);
      buffer1.readUtf8CodePoint();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(65280L);
      buffer_UnsafeCursor0.resizeBuffer(65280L);
      buffer_UnsafeCursor0.buffer.readUtf8CodePoint();
      buffer0.copyTo(buffer_UnsafeCursor0.buffer, (long) 0, 0L);
      buffer0.exhausted();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.resizeBuffer(6L);
      buffer_UnsafeCursor0.buffer.clone();
      buffer1.readByte();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(65280L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink1.writeShort((-1));
      buffer_UnsafeCursor0.buffer.readAll(realBufferedSink1);
      Buffer buffer1 = realBufferedSink0.buffer;
      buffer0.readLong();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      try { 
        realBufferedSource0.readByteString(65536L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      Buffer buffer1 = new Buffer();
      buffer0.equals(buffer1);
      buffer0.md5();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(65280L);
      buffer_UnsafeCursor0.resizeBuffer(0L);
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8Line(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(6L);
      buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((-1));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink.sha256(buffer0);
      buffer0.close();
      Buffer buffer1 = new Buffer();
      buffer1.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("C&7", 101, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -1 < 101
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readAndWriteUnsafe();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("SHA-512", 6, (-415), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -415 < 6
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(65280L);
      buffer_UnsafeCursor0.next();
      try { 
        buffer0.readUtf8LineStrict((long) 8192);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=8192 content=0000000000000000000000000000000000000000000000000000000000000000\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.hmacSha256(byteString0);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(16711676);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: fefffc
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.completeSegmentByteCount();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      realBufferedSink0.buffer.readFrom((InputStream) sequenceInputStream0, 0L);
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.toString();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-99);
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(65231);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer1.hmacSha512(byteString0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = buffer0.writeDecimalLong(999999976L);
      // Undeclared exception!
      try { 
        buffer1.writableSegment((-3388));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-1L));
      buffer1.readAndWriteUnsafe();
      buffer0.readUtf8CodePoint();
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      // Undeclared exception!
      try { 
        buffer1.indexOf(byteString0, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-99L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer1.readShort();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      buffer0.emit();
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = new ByteString(byteArray0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.outputStream();
      Buffer buffer1 = buffer0.writeLongLe((-2283L));
      buffer1.clone();
      buffer0.sha256();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-1L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.indexOf(byteString0, (long) (byte)0);
      // Undeclared exception!
      try { 
        buffer1.readUtf8((-1624L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=0 byteCount=-1624
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(32L);
      buffer0.require((-2792L));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("e1+JwQ':G>");
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer1.readHexadecimalUnsignedLong();
      // Undeclared exception!
      try { 
        buffer1.readString(14L, charset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=10 offset=0 byteCount=14
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.toString();
      // Undeclared exception!
      try { 
        buffer0.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-2457L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      buffer0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer1.readAll(realBufferedSink0);
      // Undeclared exception!
      try { 
        realBufferedSink0.writeUtf8((String) null, (-1), 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Pipe pipe0 = new Pipe(2852L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.emitCompleteSegments();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      try { 
        buffer_UnsafeCursor0.buffer.require(109521666048L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("|Ko8", charset0);
      buffer1.readIntLe();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      ByteString byteString0 = realBufferedSource0.buffer.md5();
      realBufferedSource0.buffer.rangeEquals((-12L), byteString0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-1L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer2 = new Buffer();
      buffer2.equals(buffer1);
      buffer0.md5();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte byte0 = (byte) (-9);
      buffer0.readAndWriteUnsafe();
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        buffer0.write(byteString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(148875L);
      try { 
        buffer1.readUtf8LineStrict(148875L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=6 content=313438383735\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("uC)hwX29", charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer.writeDecimalLong(16711680L);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Pipe pipe0 = new Pipe(4498L);
      Buffer buffer0 = new Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer0.writeDecimalLong(100000000000L);
      buffer2.hashCode();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe((-1L));
      buffer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, 1831, (-2147450751), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[1];
      realBufferedSink0.write(byteArray0);
      realBufferedSink0.buffer.indexOf((byte)0, (long) (byte)0, 6L);
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      Integer integer0 = new Integer((-1));
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-1860L));
      buffer1.readIntLe();
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      realBufferedSink0.buffer.writeAll(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      realBufferedSink0.write(byteString1);
      realBufferedSink0.buffer.writeUtf8CodePoint((-1860));
      realBufferedSink0.buffer.readUtf8Line();
      Integer integer0 = new Integer((-1860));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(2799);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(2799);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        buffer0.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeUtf8("t 9zsI0W|x3VKW");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.write(realBufferedSink0.buffer);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSink0.buffer.select(options0);
      Buffer buffer1 = buffer0.writeDecimalLong(8);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      buffer1.readHexadecimalUnsignedLong();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = realBufferedSink0.buffer;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer3 = buffer2.writeUtf8CodePoint(65280);
      ByteString[] byteStringArray0 = new ByteString[1];
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSink0.buffer);
      ByteString byteString0 = hashingSource0.hash();
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer3.select(options0);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      buffer0.copyTo((OutputStream) dataOutputStream0);
      buffer1.readUtf8CodePoint();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Pipe pipe0 = new Pipe(1974L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Buffer buffer0 = realBufferedSource0.buffer;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer1 = realBufferedSource0.buffer.writeUtf8CodePoint(468);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.toString();
      buffer1.writeUtf8("buffer([text=\u01D4])");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = (-218L);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(839L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      long long0 = 1449L;
      // Undeclared exception!
      try { 
        buffer0.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-1867L));
      buffer1.readByteArray();
      Buffer buffer2 = new Buffer();
      buffer2.writeDecimalLong(9223372036854775L);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeShortLe(2147430862);
      // Undeclared exception!
      try { 
        buffer1.writableSegment(2147430862);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(2821);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.readHexadecimalUnsignedLong();
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer1, (-1637L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.request(26L);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      realBufferedSink0.writeDecimalLong((-1L));
      realBufferedSink0.buffer.writeUtf8CodePoint((-1));
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.indexOfElement((ByteString) null, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      buffer0.writeUtf8CodePoint(3276);
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffffe0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink1.writeDecimalLong((byte) (-1));
      buffer1.writeUtf8CodePoint((byte) (-1));
      ((RealBufferedSink) bufferedSink0).buffer.readDecimalLong();
      buffer0.writeDecimalLong((-1L));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)112;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      realBufferedSink0.buffer.writeUtf8CodePoint(55296);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x3f
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe(876L);
      byte[] byteArray0 = new byte[3];
      buffer0.writableSegment(248);
      byteArray0[2] = (byte) (-9);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = buffer0.writeDecimalLong(1095216L);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink1.writeByte(4413);
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSink1.buffer);
      buffer1.sha256();
      ByteString byteString0 = hashingSource0.hash();
      buffer1.hmacSha512(byteString0);
      try { 
        realBufferedSink1.buffer.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=3d\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe(876L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-9);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSink0.writeInt(50);
      buffer0.selectPrefix(options0);
      Buffer buffer3 = new Buffer();
      buffer3.write((Source) buffer0, 1L);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("uC)hwX29", charset0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      buffer0.write((Source) realBufferedSource0, 16711680L);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer_UnsafeCursor0.resizeBuffer(6L);
      buffer_UnsafeCursor0.buffer.clone();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer0.rangeEquals(1000000L, byteString0, 9, (-2147268705));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeInt(2062);
      HashingSource hashingSource0 = HashingSource.sha256(((RealBufferedSink) bufferedSink0).buffer);
      ByteString byteString0 = hashingSource0.hash();
      realBufferedSink0.buffer.hmacSha1(byteString0);
      ((RealBufferedSink) bufferedSink0).buffer.indexOf(byteString0, (long) 2062);
      realBufferedSink0.buffer.readIntLe();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = buffer0.readByteArray();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        buffer1.indexOf(byteString0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeDecimalLong(24571L);
      buffer0.writeByte((-702));
      buffer0.writeUtf8CodePoint((-702));
      buffer0.readUtf8CodePoint();
      buffer_UnsafeCursor0.buffer.request((-1L));
      buffer1.readInt();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      Buffer buffer1 = buffer0.writeDecimalLong(2799);
      buffer1.segmentSizes();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[1];
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.write(byteArray0);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource.hmacSha256(realBufferedSink1.buffer, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSink1.writeInt(50);
      buffer1.selectPrefix(options0);
      Buffer buffer2 = realBufferedSink1.buffer;
      realBufferedSink0.writeShortLe(0);
      try { 
        buffer1.write((Source) realBufferedSource0, (long) 50);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)112;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer1 = buffer0.writeDecimalLong(33L);
      realBufferedSink0.buffer.writeAll(buffer0);
      buffer1.md5();
      realBufferedSink0.buffer.readDecimalLong();
      Buffer buffer2 = buffer0.writeDecimalLong(33L);
      buffer2.clone();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      Buffer buffer2 = realBufferedSink0.buffer;
      realBufferedSink0.writeDecimalLong((-1447L));
      realBufferedSink0.buffer.writeUtf8CodePoint(121);
      buffer1.readDecimalLong();
      realBufferedSink0.buffer.writeDecimalLong((-549L));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      Buffer buffer1 = new Buffer();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        buffer1.readFrom((InputStream) byteArrayInputStream0, 18L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.completeSegmentByteCount();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Buffer buffer1 = realBufferedSink0.buffer.writeDecimalLong(10000000000L);
      realBufferedSink0.buffer.segmentSizes();
      buffer0.writeAll(buffer1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-1860L));
      Buffer buffer2 = buffer1.writeUtf8CodePoint(56319);
      Buffer buffer3 = new Buffer();
      buffer2.readUtf8CodePoint();
      buffer1.readIntLe();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeLongLe((-3892L));
      buffer0.readUtf8CodePoint();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-1860L));
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      hashingSource0.hash();
      Buffer buffer2 = buffer0.writeDecimalLong(71776119061217280L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        buffer2.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0xffffffbc
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.writeUtf8CodePoint((-1));
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.emit();
      realBufferedSink0.buffer.writeUtf8CodePoint((-45));
      try { 
        buffer1.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 2: 1 (to read code point prefixed 0xffffffd3)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      Buffer buffer1 = realBufferedSink0.buffer;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer2 = realBufferedSink0.buffer.writeUtf8CodePoint(65280);
      buffer2.copyTo(outputStream0);
      buffer0.writeUtf8CodePoint(65280);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeShort((-2139));
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.emit();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      buffer0.writeUtf8CodePoint(65269);
      Buffer buffer2 = buffer0.copyTo(outputStream0);
      buffer2.writeUtf8CodePoint(2069);
      realBufferedSink0.buffer.readUtf8CodePoint();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Segment segment0 = new Segment();
      realBufferedSink1.buffer.head = segment0;
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.md5();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(65231);
      buffer1.writeUtf8CodePoint(65231);
      buffer0.readUtf8CodePoint();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.seek((-1L));
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      byteString0.write(buffer1);
      ByteString[] byteStringArray0 = new ByteString[13];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      ByteString byteString1 = hashingSource0.hash();
      byteStringArray0[4] = byteString1;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.buffer.select(options0);
      Buffer buffer2 = buffer1.writeDecimalLong(0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      buffer2.readHexadecimalUnsignedLong();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer1 = buffer0.writeInt((byte)55);
      Buffer buffer2 = buffer0.writeDecimalLong(3107L);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)55;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.indexOfElement(byteString0);
      buffer0.indexOf(byteString0);
      // Undeclared exception!
      try { 
        buffer1.readAll(buffer2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeInt(1968526677);
      realBufferedSink0.buffer.clear();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer1 = realBufferedSink1.buffer;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte) (-9);
      byteArray0[7] = (byte)36;
      byteArray0[8] = (byte) (-106);
      realBufferedSink0.write(byteArray0);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource.hmacSha256(buffer1, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink2.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.buffer();
      Buffer buffer2 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer1.readHexadecimalUnsignedLong();
      realBufferedSink0.buffer();
      buffer0.readUtf8Line();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      Buffer buffer1 = buffer0.writeUtf8("YKq-gsHe{F^n7UM");
      Buffer buffer2 = new Buffer();
      buffer1.readLongLe();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong(2821);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeByte(2821);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      Buffer buffer2 = realBufferedSink1.buffer;
      realBufferedSink0.buffer.indexOf(byteString0);
      // Undeclared exception!
      try { 
        buffer1.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-1860L));
      buffer1.readIntLe();
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      hashingSource0.hash();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer2.write((Buffer) null, (-1860L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(920L);
      buffer0.require((-2792L));
      // Undeclared exception!
      try { 
        buffer0.writeString("h#O}x'g|ik7*k0", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-647L));
      MockPrintStream mockPrintStream0 = new MockPrintStream("?4(");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      buffer1.writeTo((OutputStream) objectOutputStream0);
      buffer1.clone();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      MockFile mockFile0 = new MockFile("e,YlEQ`KV2f<^r<&1", "e,YlEQ`KV2f<^r<&1");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-22);
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe((byte)55);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      realBufferedSource0.buffer.indexOfElement(byteString0);
      Buffer buffer0 = realBufferedSource0.buffer.writeDecimalLong((-1L));
      buffer0.readUtf8CodePoint();
      realBufferedSource0.buffer.indexOfElement(byteString0);
      realBufferedSource0.buffer.indexOf(byteString0);
      buffer0.writeHexadecimalUnsignedLong((byte)0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Buffer buffer2 = buffer1.writeUtf8CodePoint((-576));
      // Undeclared exception!
      try { 
        buffer2.writeTo((OutputStream) null, (long) (-576));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-1L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)13;
      buffer0.write(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte)13;
      ByteString byteString0 = new ByteString(byteArray1);
      buffer1.indexOf(byteString0, (long) (byte)13);
      buffer0.readIntLe();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha1();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[2];
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      ((RealBufferedSink) bufferedSink0).buffer.size = 564L;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource.hmacSha256(((RealBufferedSink) bufferedSink0).buffer, byteString0);
      ByteString byteString1 = new ByteString(byteArray0);
      realBufferedSink0.buffer.indexOf(byteString0, 32L);
      realBufferedSink0.buffer.clone();
      // Undeclared exception!
      try { 
        buffer1.read(realBufferedSink0.buffer, (-2684L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2684
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      long long0 = 162L;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(162L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = null;
      // Undeclared exception!
      try { 
        buffer0.read((Buffer) null, 4L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sink == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[1];
      realBufferedSink0.write(byteArray0);
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.next();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-1860L));
      HashingSource.sha256(buffer1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      buffer0.writeInt((-4133));
      buffer0.writeUtf8CodePoint(65536);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[2];
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[8];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0);
      byteStringArray0[6] = byteString0;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(bufferedSink0);
      Buffer buffer1 = realBufferedSink0.buffer.writeUtf8CodePoint((-564));
      ((RealBufferedSink) bufferedSink0).buffer.readUtf8Line();
      Integer integer0 = new Integer(499);
      buffer1.writeUtf8("\u0000\u0000\uFFFD");
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLongLe((-1860L));
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      realBufferedSink0.buffer.writeAll(buffer0);
      hashingSink0.hash();
      Buffer buffer2 = buffer0.writeUtf8CodePoint((-52));
      buffer2.readUtf8Line();
      Integer integer0 = new Integer((-52));
      realBufferedSink0.writeUtf8("\u2026]");
      realBufferedSink0.buffer.writeUtf8("ysK=jG");
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.indexOf((byte)0, (long) 2, (long) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=19 fromIndex=2 toIndex=0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(65280L);
      buffer_UnsafeCursor0.resizeBuffer(5L);
      // Undeclared exception!
      try { 
        buffer0.readUtf8LineStrict((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[1];
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource.hmacSha256(((RealBufferedSink) bufferedSink0).buffer, byteString0);
      realBufferedSink0.buffer.writeShortLe((byte)5);
      ((RealBufferedSink) bufferedSink0).buffer.indexOf((byte)49, 2L);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeDecimalLong(2821);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeShortLe(128);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      realBufferedSink1.writeDecimalLong((-972L));
      realBufferedSink1.buffer.writeUtf8CodePoint((-2561));
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.indexOfElement((ByteString) null, 4L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(65280L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink1.writeShort((-1));
      buffer_UnsafeCursor0.buffer.readAll(realBufferedSink1);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeUtf8CodePoint(2147395350);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 7ffea716
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1374L);
      Buffer buffer1 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.offset = 1374L;
      buffer_UnsafeCursor0.resizeBuffer(1374L);
      buffer_UnsafeCursor0.resizeBuffer(65280L);
      buffer1.readUtf8Line(24320L);
      buffer_UnsafeCursor0.buffer.copyTo(buffer1, 1374L, (long) 1374);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(65280L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer1 = realBufferedSink1.buffer();
      buffer1.writeLongLe(2L);
      // Undeclared exception!
      buffer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(1374L);
      Buffer buffer1 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1374L);
      buffer_UnsafeCursor0.resizeBuffer(65280L);
      buffer_UnsafeCursor0.buffer.segmentSizes();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(65280L);
      buffer0.clone();
  }
}
