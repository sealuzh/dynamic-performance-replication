/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:39:56 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.ByteString;
import okio.HashingSink;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.timedOut();
      asyncTimeout0.enter();
      assertFalse(asyncTimeout0.hasDeadline());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      long long0 = 60L;
      System.setCurrentTimeMillis(60L);
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.enter();
      MockIOException mockIOException0 = new MockIOException((String) null);
      asyncTimeout0.exit((IOException) mockIOException0);
      asyncTimeout0.source((Source) null);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      asyncTimeout0.newTimeoutException(mockIOException0);
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout.head.clearDeadline();
      asyncTimeout0.enter();
      mockIOException0.getLocalizedMessage();
      Timeout timeout0 = AsyncTimeout.head.deadlineNanoTime(1095216660480L);
      asyncTimeout0.enter();
      assertSame(asyncTimeout0, timeout0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AsyncTimeout.source(");
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.throwIfReached();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockIOException mockIOException0 = new MockIOException("Q");
      mockIOException0.fillInStackTrace();
      asyncTimeout0.exit((IOException) mockIOException0);
      asyncTimeout0.exit(true);
      assertFalse(asyncTimeout0.hasDeadline());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout0.enter();
      Pipe pipe0 = new Pipe(1356L);
      Pipe.PipeSink pipe_PipeSink0 = (Pipe.PipeSink)pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeDecimalLong(0L);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      realBufferedSink2.writeLongLe(0L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink2.buffer);
      ByteString byteString0 = realBufferedSource0.readByteString();
      HashingSink.hmacSha1(realBufferedSink0, byteString0);
      Sink sink0 = asyncTimeout1.sink(pipe_PipeSink0);
      assertNotNull(sink0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout0.enter();
      // Undeclared exception!
      try { 
        asyncTimeout0.enter();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Unbalanced enter/exit
         //
         verifyException("okio.AsyncTimeout", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockIOException mockIOException0 = new MockIOException();
      asyncTimeout0.newTimeoutException((IOException) null);
      AsyncTimeout.head = asyncTimeout0;
      asyncTimeout0.clearDeadline();
      asyncTimeout0.enter();
      mockIOException0.getLocalizedMessage();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      long long0 = 0L;
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(0L);
      asyncTimeout0.enter();
      asyncTimeout1.exit();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockThrowable mockThrowable0 = new MockThrowable();
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      mockThrowable1.addSuppressed(mockThrowable0);
      asyncTimeout0.deadlineNanoTime((-1392409281320000L));
      asyncTimeout0.enter();
      MockIOException mockIOException0 = new MockIOException("-|g\";v+) ajiAZh3");
      IOException iOException0 = asyncTimeout0.exit((IOException) mockIOException0);
      asyncTimeout0.newTimeoutException(iOException0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      AsyncTimeout asyncTimeout1 = (AsyncTimeout)asyncTimeout0.deadlineNanoTime(0L);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      asyncTimeout1.timeout(1000000L, timeUnit0);
      asyncTimeout0.enter();
      AsyncTimeout.awaitTimeout();
      asyncTimeout1.timedOut();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      long long0 = 4L;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      asyncTimeout0.deadline(4L, timeUnit1);
      asyncTimeout0.enter();
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      long long0 = 0L;
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      asyncTimeout0.timeout(1000000L, timeUnit0);
      asyncTimeout0.enter();
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.deadlineNanoTime(1757L);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      long long0 = 8192L;
      asyncTimeout0.timeout(8192L, timeUnit0);
      asyncTimeout0.enter();
      AsyncTimeout asyncTimeout1 = AsyncTimeout.awaitTimeout();
      System.setCurrentTimeMillis(long0);
      Pipe pipe0 = new Pipe(long0);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      byte byte0 = (byte)0;
      byte byte1 = (byte)0;
      byte byte2 = (byte)23;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = byte1;
      byteArray0[1] = byte1;
      byteArray0[2] = byte2;
      byteArray0[3] = byte1;
      byteArray0[4] = byte1;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(pipe_PipeSink0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink0.writeShortLe(byte0);
      asyncTimeout0.sink(hashingSink0);
      boolean boolean0 = false;
      asyncTimeout1.exit(boolean0);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }
}
