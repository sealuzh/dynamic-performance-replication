/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 00:15:22 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Integer>(class0);
      Integer integer1 = new Integer(0);
      doubleKeyMap0.put(integer0, integer1, integer1);
      Integer integer2 = doubleKeyMap0.get(integer1, integer0);
      assertEquals(0, (int)integer2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Integer>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Integer>, Integer, Integer>((Map<HashMap<Object, Integer>, Map<Integer, Integer>>) null);
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer((-187));
      doubleKeyMap0.put(hashMap0, integer0, integer0);
      Map<Integer, Integer> map0 = doubleKeyMap0.remove(hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(class0);
      doubleKeyMap0.put("", (Object) class0, (Object) "");
      Map<Object, Object> map0 = doubleKeyMap0.get("");
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      Object object0 = new Object();
      Integer integer0 = doubleKeyMap0.remove(">Dmg6Y", object0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<String, Map<Object, HashMap<Object, String>>>, HashMap<Object, Integer>> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, Map<Object, HashMap<Object, String>>>, HashMap<Object, Integer>>();
      HashMap<String, Map<Object, HashMap<Object, String>>> hashMap0 = new HashMap<String, Map<Object, HashMap<Object, String>>>();
      HashMap<Object, Integer> hashMap1 = doubleKeyMap0.remove((Object) null, hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Map<Integer, Object>> hashMap0 = new HashMap<String, Map<Integer, Object>>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(hashMap0, class0);
      HashMap<Object, Map<Object, String>> hashMap1 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(hashMap1);
      String string0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (Object) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Map<Object, Integer>> hashMap0 = new HashMap<HashMap<Object, Object>, Map<Object, Integer>>();
      DoubleKeyMap<HashMap<Object, Object>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Object, Integer>(hashMap0);
      Map<Object, Integer> map0 = doubleKeyMap0.remove((HashMap<Object, Object>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(class0);
      Object object0 = new Object();
      Map<String, String> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put("", "", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      DoubleKeyMap<Object, Map<Object, HashMap<Object, String>>, Map<Object, HashMap<Object, String>>> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Object, HashMap<Object, String>>, Map<Object, HashMap<Object, String>>>();
      Map<Object, HashMap<Object, String>> map0 = doubleKeyMap1.put((Object) doubleKeyMap0, (Map<Object, HashMap<Object, String>>) null, (Map<Object, HashMap<Object, String>>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, HashMap<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<String, Integer>>(class0);
      Object object0 = new Object();
      HashMap<String, Integer> hashMap0 = doubleKeyMap0.get("x#HQ:m;m*PD>s:", object0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<HashMap<Map<Object, HashMap<Object, String>>, Map<Object, HashMap<Object, String>>>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<Object, HashMap<Object, String>>, Map<Object, HashMap<Object, String>>>, Integer, Object>((Map<HashMap<Map<Object, HashMap<Object, String>>, Map<Object, HashMap<Object, String>>>, Map<Integer, Object>>) null);
      Map<Map<Object, HashMap<Object, String>>, Map<Object, Integer>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, HashMap<Object, String>>, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<Object, HashMap<Object, String>>, Object, Integer>(map0, class0);
      Integer integer0 = new Integer(0);
      Integer integer1 = doubleKeyMap1.get((Map<Object, HashMap<Object, String>>) null, (Object) integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      DoubleKeyMap<Object, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, String, Integer>();
      Integer integer0 = doubleKeyMap1.get((Object) doubleKeyMap0, (String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>();
      Object object0 = new Object();
      Map<Integer, String> map0 = doubleKeyMap0.get(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      HashMap<Map<String, String>, Map<Object, String>> hashMap0 = new HashMap<Map<String, String>, Map<Object, String>>();
      DoubleKeyMap<Map<String, String>, Object, String> doubleKeyMap1 = new DoubleKeyMap<Map<String, String>, Object, String>(hashMap0, (Class<? extends Map>) null);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Map<String, String>) null, (Object) doubleKeyMap0, "XVSir<oRi|BcNzYl>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      HashMap<Map<String, String>, Map<Object, String>> hashMap0 = new HashMap<Map<String, String>, Map<Object, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<String, String>, Object, String> doubleKeyMap1 = new DoubleKeyMap<Map<String, String>, Object, String>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Map<String, String>) null, (Object) doubleKeyMap0, "XVSirkoRi|BcNzYl>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, HashMap<Object, String>>, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<Object, HashMap<Object, String>>, Object, Object>((Map<Map<Object, HashMap<Object, String>>, Map<Object, Object>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Map<Map<Object, HashMap<Object, String>>, String>, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Map<Map<Object, HashMap<Object, String>>, String>, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(class0);
      doubleKeyMap0.put("", (Object) class0, (Object) "");
      Object object0 = doubleKeyMap0.remove("", (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(class0);
      doubleKeyMap0.put("", (Object) class0, (Object) "");
      Object object0 = doubleKeyMap0.put("", (Object) class0, (Object) class0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(class0);
      doubleKeyMap0.put("", (Object) class0, (Object) "");
      Object object0 = doubleKeyMap0.remove("", (Object) class0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(hashMap0);
      Integer integer0 = new Integer((-484));
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) hashMap0, integer0, (Object) integer0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<String, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, String>, Integer>();
      Map<HashMap<String, String>, Integer> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }
}
