/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 17:39:04 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.Field;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-67);
      Utility.equals(byteArray0, byteArray0);
      Utility.accessToString((int) (byte) (-67));
      byte[] byteArray1 = new byte[5];
      byteArray1[1] = (byte) (-67);
      byteArray1[2] = (byte) (-67);
      byteArray1[3] = (byte) (-67);
      byteArray1[4] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 626, 1508, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)63;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)82, (-3373), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readFloat();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fload_1", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Utility.typeOfSignature("J`rQ%pMrNEI*AdM9");
      boolean boolean0 = false;
      Utility.compactClassName("X ", false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)11;
      MockFile mockFile0 = new MockFile("J`rQ%pMrNEI*AdM9");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "X ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"X \" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "k:s~h5Q[[5@";
      // Undeclared exception!
      try { 
        Utility.getSignature("k:s~h5Q[[5@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[[5@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Utility.setBit(24, 24);
      Utility.searchOpcode("!V1''#`Fb^");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte)3;
      Constant[] constantArray0 = new Constant[4];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-73);
      byteArray1[1] = (byte) (-73);
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(91);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(322, (byte)8);
      ConstantInterfaceMethodref constantInterfaceMethodref2 = new ConstantInterfaceMethodref(constantInterfaceMethodref1);
      constantArray0[2] = (Constant) constantInterfaceMethodref2;
      ConstantInterfaceMethodref constantInterfaceMethodref3 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[3] = (Constant) constantInterfaceMethodref3;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3001, 3001, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 8712. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Utility.isSet(68, 63);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)108;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1738394558), 5);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "0:    idiv\n1:    fload_2\n2:    lstore\t\t%14\n4:    dstore_3\n5:    lstore\t\t%108\n", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = Utility.compactClassName("\nException handler(s) = \n", true);
      assertEquals("\nException handler(s) = \n", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte) (-82);
      byteArray0[8] = (byte) (-65);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)121);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1042), (byte) (-125));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[3] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1);
      assertEquals("athrow", string1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.typeOfSignature("Zhun");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "U\"P/J\"X@~zDGF;3";
      try { 
        Utility.typeOfSignature("U\"P/J\"X@~zDGF;3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: U\"P/J\"X@~zDGF;3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Utility.decode(".rn8#\f]9vl]d5{", false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-98);
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte)87;
      byteArray0[7] = (byte) (-58);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)75;
      byteArray0[8] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)2, 1951);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = Utility.convertString("Float");
      assertEquals("Float", string0);
      
      int int0 = Utility.clearBit(17, 70);
      assertEquals(17, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)67;
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-87), (-3025), false);
      assertEquals("0:    ret\t\t%90\n2:    fstore_0\n", string1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte) (-115);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)21, 5, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte) (-64);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2, (int) (byte) (-12));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 3:    iconst_4
         // 4:    iconst_1
         // 5:    aload_2
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)14, 2738);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "G\"y6<gsSF";
      try { 
        Utility.typeOfSignature("G\"y6<gsSF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G\"y6<gsSF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.compactClassName("V", "V", true);
      boolean boolean0 = false;
      Utility.accessToString(1801, false);
      Utility.accessToString(1801);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-75);
      byte byte0 = (byte) (-68);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-80);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-75), 13, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.compactClassName("+Gq3C)T~+G0'\":t;'2");
      int int0 = 244;
      Utility.classOrInterface(244);
      Utility.methodSignatureReturnType("+Gq3C)T~+G0'\":t;'2");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false, "+Gq3C)T~+G0'\":t;'2");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // +Gq3C)T~+G0'\":t;'2
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.clearBit((-1459827349), 9);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Utility.printArray(objectArray0, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-33);
      byteArray0[6] = (byte) (-74);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 20, (int) (byte) (-121), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ivlo{/5");
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      String string1 = Utility.convertString("4k+z");
      assertEquals("4k+z", string1);
      
      short short0 = Utility.searchOpcode("#2C#}: .nZct:a!'GM1");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)107;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-13));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantString constantString0 = new ConstantString((byte)45);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string2 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("l2d", string2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('8');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)126;
      Utility.equals(byteArray0, byteArray0);
      Utility.decode("java.lang.ev5(oId$e0HSD)S%", false);
      Utility.accessToString(46, true);
      Utility.compactClassName("private protected static", "java.lang.ev5(oId$e0HSD)S%", true);
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "private protected static";
      objectArray0[2] = (Object) (byte) (-72);
      objectArray0[3] = (Object) "private protected static";
      objectArray0[4] = (Object) (byte)126;
      objectArray0[5] = (Object) (byte)126;
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "private protected static";
      objectArray0[8] = (Object) "private protected static";
      Utility.printArray(objectArray0, true, true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fmul");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      assertEquals("null", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)90;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("pop", string1);
      
      String string2 = Utility.convertString("/+t@*");
      assertEquals("/+t@*", string2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "java.util.jar.";
      stringArray0[1] = "java.util.jar.";
      stringArray0[2] = "java.util.jar.";
      stringArray0[3] = "java.util.jar.";
      stringArray0[4] = "O75>N>'|,X!YHA>R;";
      stringArray0[5] = "java.util.jar.";
      stringArray0[6] = "java.util.jar.";
      stringArray0[7] = "java.util.jar.";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodTypeToSignature("java.util.jar.", stringArray0);
      String string0 = "ifnull";
      boolean boolean0 = true;
      Utility.compactClassName("ifnull", "java.util.jar.", true);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("@<mzM0'[\"h_Fp4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @<mzM0'[\"h_Fp4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "XBH6zbc\\a*";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("XBH6zbca*", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XBH6zbca*'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      try { 
        Utility.typeOfSignature("+N%VlBtkc<bF 6$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N%VlBtkc<bF 6$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-61);
      int int0 = 47;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 47, (int) (byte) (-61), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P!]k@o>Z@^;4]3J4@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P!]k@o>Z@^;4]3J4@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = Utility.accessToString(65535, false);
      assertEquals("public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)81;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("daload", string1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utility.isSet((-918), (-918));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)94;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)95;
      byteArray0[8] = (byte)19;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)94, (-1137));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Utility.classOrInterface(327);
      Utility.accessToString(198, true);
      try { 
        Utility.methodSignatureReturnType("L*oV]dC<,#;", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L*oV]dC<,#;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "AX]Yr( &N~06)w";
      try { 
        Utility.typeOfSignature("AX]Yr( &N~06)w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AX]Yr( &N~06)w
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Utility.compactClassName("HW_");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte) (-109);
      byteArray0[8] = (byte)10;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)104, (-607));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = Utility.accessToString(56, true);
      assertEquals("static final", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte)109;
      byteArray0[2] = (byte)58;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("static final");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteArray0, constantPool0, 1, (int) (byte)58, true);
      assertEquals("1:    iload_1\n2:    astore\t\t%236\n4:    <illegal opcode>\n5:    dcmpg\n6:    ldiv\n7:    nop\n", string1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)65;
      byteArray0[0] = (byte)65;
      byte byte1 = (byte)17;
      byteArray0[1] = (byte)17;
      byte byte2 = (byte)8;
      byteArray0[2] = (byte)8;
      byte byte3 = (byte) (-59);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte) (-59);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantDouble constantDouble0 = new ConstantDouble((byte)65);
      constantPool0.constantToString((Constant) constantDouble0);
      int int0 = 41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 41, (int) (byte)17);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)43;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)94;
      byteArray1[1] = (byte) (-16);
      byteArray1[2] = (byte)94;
      byteArray1[3] = (byte) (-64);
      byteArray1[4] = (byte) (-16);
      byteArray1[5] = (byte)77;
      byteArray1[6] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[4] = (byte) (-107);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 84, 72);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.getSignature("ifnull");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)59;
      byteArray0[7] = (byte) (-88);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-88), 3434);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    saload
         // 2:    baload
         // 3:    if_acmpeq\t\t#-14781
         // 6:    istore_0
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-105);
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant constant0 = Constant.readConstant(byteSequence0);
      constantArray0[0] = constant0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(297, 3039);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-310), (-310), false);
      assertEquals("0:    iconst_1\n1:    lstore_0\n2:    <illegal opcode>\n3:    lushr\n4:    <illegal opcode>\n5:    dcmpl\n", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "$SM5),PPVyc>Z-^8eUz";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$SM5),PPVyc>Z-^8eUz");
      String string1 = "areturn";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = Utility.decode("areturn", false);
      boolean boolean0 = true;
      Utility.compactClassName("$SM5),PPVyc>Z-^8eUz", "areturn", true);
      int int0 = (-210);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 11, (-210));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jsr_w");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "jsr_w";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "jsr_w";
      objectArray0[3] = (Object) null;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      Utility.getSignature("jsr_w");
      byte[] byteArray0 = Utility.decode("Ljsr_w;", false);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      int int0 = 87;
      int int1 = 5600;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 87, 5600, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.format(109, 109, false, 'A');
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 138, (int) (byte)91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "P{Qma()";
      stringArray0[1] = "P{Qma()";
      stringArray0[2] = "P{Qma()";
      stringArray0[3] = "P{Qma()";
      String string0 = Utility.methodTypeToSignature("P{Qma()", stringArray0);
      assertEquals("(LP{Qma();LP{Qma();LP{Qma();LP{Qma();)LP{Qma();", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)0;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantClass constantClass0 = new ConstantClass((-1969380507));
      constantArray0[0] = (Constant) constantClass0;
      ConstantClass constantClass1 = new ConstantClass((byte)0);
      constantArray0[1] = (Constant) constantClass1;
      ConstantLong constantLong0 = new ConstantLong((byte)0);
      constantArray0[2] = (Constant) constantLong0;
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[3] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("astore\t\t%40", string1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)11;
      byteArray0[7] = (byte)76;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2794, 185);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = true;
      Utility.format(85, 85, true, 'W');
      try { 
        Utility.typeOfSignature("9?*CnCrsik)bC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9?*CnCrsik)bC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utility.compactClassName("f2d", false);
      Utility.classOrInterface((-219));
      String string0 = "<";
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)22;
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-578), (int) (byte) (-63), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utility.classOrInterface(41);
      Utility.convertString("class");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte) (-76);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)82, (-1920));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte) (-40);
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)5;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-40), (int) (byte)12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    swap
         // 1:    iconst_3
         // 2:    nop
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "void";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte) (-110);
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte) (-46);
      byteArray0[7] = (byte)126;
      Constant[] constantArray0 = new Constant[4];
      ConstantFloat constantFloat0 = new ConstantFloat(1262.0F);
      constantArray0[0] = (Constant) constantFloat0;
      Constant constant0 = constantArray0[0].copy();
      constantArray0[1] = constant0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-110));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[2] = (Constant) constantDouble1;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-961), (byte)89);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[3] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-46), 64);
      assertEquals("0:    dup2_x1\n1:    dup\n2:    drem\n3:    <illegal opcode>\n4:    i2c\n5:    <illegal opcode>\n6:    <illegal opcode>\n7:    iand\n", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = (-706);
      boolean boolean0 = true;
      Utility.accessToString((-706), true);
      Utility.searchOpcode("?>...");
      Utility.convertString(")\t");
      String string0 = "7f";
      try { 
        Utility.typeOfSignature("7f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7f
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?n");
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      Utility.accessToString(16384);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)123;
      byteArray1[1] = (byte)15;
      byteArray1[2] = (byte)46;
      byte byte0 = (byte) (-54);
      byteArray1[3] = (byte) (-54);
      byteArray1[4] = (byte) (-49);
      byteArray1[5] = (byte) (-56);
      byteArray1[6] = (byte)9;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)46;
      byteArray2[1] = (byte) (-54);
      byteArray2[2] = (byte) (-54);
      byteArray2[3] = (byte) (-54);
      byteArray2[4] = (byte)123;
      byteArray2[5] = (byte)46;
      Utility.equals(byteArray1, byteArray2);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, (ConstantPool) null, 2470, (int) (byte) (-56), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "t0(@b|";
      stringArray0[1] = "t0(@b|";
      stringArray0[2] = "t0(@b|";
      stringArray0[3] = "t0(@b|";
      stringArray0[4] = "t0(@b|";
      stringArray0[5] = "t0(@b|";
      stringArray0[6] = "t0(@b|";
      stringArray0[7] = "t0(@b|";
      Utility.methodTypeToSignature("t0(@b|", stringArray0);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      Utility.clearBit(734, 734);
      Utility.classOrInterface((-1615621358));
      Utility.methodSignatureArgumentTypes("(Lt0(@b|;Lt0(@b|;Lt0(@b|;Lt0(@b|;Lt0(@b|;Lt0(@b|;Lt0(@b|;Lt0(@b|;)Lt0(@b|;", true);
      try { 
        Utility.typeOfSignature("H _[hmUW++b+M.M'Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H _[hmUW++b+M.M'Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "\"Om@hD!r4ToJ`VtU";
      boolean boolean0 = true;
      Utility.compactClassName("\"Om@hD!r4ToJ`VtU", true);
      try { 
        Utility.typeOfSignature("\"Om@hD!r4ToJ`VtU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"Om@hD!r4ToJ`VtU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, true, false);
      String string0 = Utility.classOrInterface((-1610));
      assertEquals("class", string0);
      
      byte[] byteArray0 = Utility.decode("dTvG4D&~XlA", false);
      String string1 = Utility.replace("dTvG4D&~XlA", "dTvG4D&~XlA", "AFb>0");
      assertEquals("AFb>0", string1);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string2 = Utility.codeToString(byteArray0, constantPool0, (-1610), 41);
      assertEquals("0:    isub\n1:    bastore\n2:    fneg\n3:    dstore_0\n4:    caload\n5:    fstore_1\n6:    dload_0\n7:    iand\n8:    pop2\n9:    idiv\n10:   lstore_2\n", string2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true);
      Utility.searchOpcode("lreturn");
      Utility.compactClassName("java.lang.HW_", "", true);
      Utility.accessToString(3355);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)45;
      byteArray0[7] = (byte) (-45);
      byteArray0[8] = (byte) (-102);
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1379), 2081);
      Constant constant0 = constantMethodref0.copy();
      constantArray0[0] = constant0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantFloat constantFloat0 = new ConstantFloat(1317.5763F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)98, 1580);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[3] = (Constant) constantNameAndType1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-102), 1931);
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)0, (-2416));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fadd
         // 1:    fmul
         // 2:    iconst_m1
         // 3:    aconst_null
         // 4:    <illegal opcode>
         // 5:    aload_3
         // 6:    nop
         // 7:    <illegal opcode>
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Utility.isSet(41, 166);
      try { 
        Utility.typeOfSignature("!lb:\"r`[OjaT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lb:\"r`[OjaT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)99;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-48);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("astore_0", string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 633, 245, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = Utility.replace("The wildcard list must not be null", "ev5(oId$e0HSD)S%", (String) null);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ev5(oId$e0HSD)S%";
      stringArray0[1] = "ev5(oId$e0HSD)S%";
      stringArray0[2] = "ev5(oId$e0HSD)S%";
      stringArray0[3] = "The wildcard list must not be null";
      stringArray0[4] = "ev5(oId$e0HSD)S%";
      stringArray0[5] = "The wildcard list must not be null";
      stringArray0[6] = "The wildcard list must not be null";
      stringArray0[7] = "The wildcard list must not be null";
      stringArray0[8] = "The wildcard list must not be null";
      String string1 = Utility.methodTypeToSignature("The wildcard list must not be null", stringArray0);
      assertEquals("(Lev5(oId$e0HSD)S%;Lev5(oId$e0HSD)S%;Lev5(oId$e0HSD)S%;LThe;Lev5(oId$e0HSD)S%;LThe;LThe;LThe;LThe;)LThe;", string1);
      
      String string2 = Utility.methodSignatureToString("(Lev5(oId$e0HSD)S%;Lev5(oId$e0HSD)S%;Lev5(oId$e0HSD)S%;LThe;Lev5(oId$e0HSD)S%;LThe;LThe;LThe;LThe;)LThe;", "ixor", "The wildcard list must not be null");
      assertEquals("The wildcard list must not be null The ixor(ev5(oId$e0HSD)S% arg1, ev5(oId$e0HSD)S% arg2, ev5(oId$e0HSD)S% arg3, The arg4, ev5(oId$e0HSD)S% arg5, The arg6, The arg7, The arg8, The arg9)", string2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-64);
      byteArray0[0] = (byte) (-64);
      byte byte1 = (byte) (-67);
      byteArray0[1] = (byte) (-67);
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4096, (int) (byte) (-67));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Utility.fillup("freturn", (-2064), true, ',');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-17);
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte) (-110);
      byteArray0[7] = (byte) (-47);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 27, (-1200), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-57);
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)93;
      byte byte1 = (byte)5;
      byteArray0[5] = (byte)5;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)73, 3381);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Utility.replace("6*-O", "6*-O", "r>}' >Cf{{gJ,fx:i?");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)124;
      Constant[] constantArray0 = new Constant[4];
      ConstantString constantString0 = new ConstantString((byte)124);
      constantArray0[0] = (Constant) constantString0;
      int int0 = 1102;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1102, 1102);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantLong constantLong0 = new ConstantLong((-213L));
      constantArray0[2] = (Constant) constantLong0;
      String string0 = "!F8u/~ce&`!f>d$";
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantString0.accept(emptyVisitor0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int1 = (-7214);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)124, (-7214));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('[');
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte) (-12);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger(244);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool1, (-1579), (-599), false);
      ConstantPool constantPool2 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool2, (-977), (-1579), false);
      assertEquals("0:    <illegal opcode>\n1:    saload\n2:    goto_w\t\t#682693274\n7:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Utility.setBit(2, 2);
      try { 
        Utility.typeOfSignature("E~)d9.nl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: E~)d9.nl
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "I|";
      Utility.typeOfSignature("I|");
      Utility.clearBit(45, (byte)10);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-105);
      Constant[] constantArray0 = new Constant[2];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant constant0 = Constant.readConstant(byteSequence0);
      constantArray0[0] = constant0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(297, 3039);
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-310), (-310), false);
      assertEquals("0:    iconst_1\n1:    lstore_0\n2:    <illegal opcode>\n3:    dload_2\n4:    <illegal opcode>\n5:    dcmpl\n", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Rqo}+X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Rqo}+X
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Utility.setBit(923, 4);
      Utility.clearBit(256, 256);
      int int0 = 2670;
      String string0 = Utility.format(4, 2670, false, 'M');
      String string1 = "_r_ UoLT<(^Y('a\"rO|";
      Utility.searchOpcode("_r_ UoLT<(^Y('a\"rO|");
      Utility.replace(string0, "_r_ UoLT<(^Y('a\"rO|", string0);
      String string2 = "1";
      try { 
        Utility.typeOfSignature("1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-83);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 39, (int) (byte)66);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)40;
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-85));
      constantInteger0.clone();
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      constantInteger1.setBytes((byte)10);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      BCELComparator bCELComparator0 = Constant.getComparator();
      Constant.setComparator(bCELComparator0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)40, (int) (byte)10, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.StackMapType");
      int int0 = Utility.clearBit(143, (-322));
      assertEquals(143, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte) (-76);
      byteArray0[8] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)44);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(byteSequence0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("fcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-70);
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte) (-5);
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte) (-84);
      byteArray0[8] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)108, 39, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "7F";
      stringArray0[1] = "7F";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      stringArray0[2] = "7F";
      stringArray0[3] = "7F";
      stringArray0[4] = "7F";
      stringArray0[5] = "7F";
      stringArray0[6] = "7F";
      Utility.methodTypeToSignature("7F", stringArray0);
      Utility.searchOpcode("7F");
      Utility.classOrInterface((short) (-1));
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "7F";
      objectArray0[1] = (Object) "7F";
      objectArray0[2] = (Object) "7F";
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)84;
      Constant[] constantArray0 = new Constant[1];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(11, (byte)84);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 674, (int) (byte)84, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0, true);
      Utility.classOrInterface(102);
      Utility.printArray(objectArray0, true);
      Utility.convertString("class");
      Utility.format(102, 102, true, ')');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("istore\t\t%59", string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.accessToString(60, false);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("protected static final synchronized", stringArray0);
      Utility.getSignature("+<69],}[9X}#e];Zi");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-5);
      Utility.encode(byteArray0, true);
      Utility.methodTypeToSignature("dload_0", stringArray0);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = Utility.replace("ifnull", "tableswitch", "ifnull");
      assertEquals("ifnull", string0);
      
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("lxor", string1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "Y=\\gi?7";
      try { 
        Utility.typeOfSignature("Y=gi?7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y=gi?7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ")W9OY?eb@`";
      stringArray0[1] = ")W9OY?eb@`";
      stringArray0[2] = ")W9OY?eb@`";
      stringArray0[3] = ")W9OY?eb@`";
      Utility.methodTypeToSignature(")W9OY?eb@`", stringArray0);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte) (-90);
      byteArray0[0] = (byte) (-90);
      Utility.encode(byteArray0, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-90), (int) (byte) (-90));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      byteSequence0.readShort();
      String string0 = "wlvW";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("@N3FmvQ:4Do^V-", "areturn", "wlvW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @N3FmvQ:4Do^V-
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)66;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(83, (byte)124);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-86), 2698);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantLong constantLong0 = new ConstantLong((byte)51);
      constantArray0[2] = (Constant) constantLong0;
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      constantArray0[3] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lload_3", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Utility.isJavaIdentifierPart('-');
      try { 
        Utility.typeOfSignature("6LZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6LZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.signatureToString("JR", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "JR";
      objectArray0[1] = (Object) "JR";
      objectArray0[2] = (Object) "JR";
      objectArray0[3] = (Object) "JR";
      objectArray0[4] = (Object) "JR";
      objectArray0[5] = (Object) "long";
      Utility.printArray(objectArray0, true, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.format((-304), (-304), true, 'D');
      Utility.compactClassName("long", "JR", false);
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("j$yc>MWobO^*", stringArray0);
      Utility.replace("An 5zftF\"", "^y7", "ishl");
      Utility.isJavaIdentifierPart('5');
      Utility.printArray((Object[]) stringArray0, false, false);
      Utility.methodTypeToSignature("j$yc>MWobO^*", stringArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-105);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), (int) (byte) (-105), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = Utility.clearBit((-1195), (-1195));
      assertEquals((-2098347), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("if_icmplt\t\t#-31696", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte)115;
      byteArray0[8] = (byte)0;
      Utility.encode(byteArray0, true);
      Utility.convertString("Yj:bJR5>%M0t3");
      try { 
        Utility.methodSignatureReturnType("Yj:bJR5>%M0t3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Yj:bJR5>%M0t3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.accessToString((-1670), false);
      assertEquals("private static final synchronized volatile native strictfp synthetic annotation enum", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-35);
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte) (-32);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantDouble constantDouble0 = new ConstantDouble(2076.1009500903983);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("private static final synchronized volatile native strictfp synthetic annotation enum");
      constantFieldref0.clone();
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(865, 14);
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence1, constantPool0);
      assertEquals("fload_2", string1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)81;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)20, 78);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)97, (int) (byte)65, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "&*&AiPj2Z:S$";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&*&AiPj2Z:S$");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)71;
      byte byte0 = (byte)43;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)81;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "multianewarray");
      Utility.setBit((byte)43, (-1558));
      try { 
        Utility.typeOfSignature("&*&AiPj2Z:S$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &*&AiPj2Z:S$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantString constantString0 = new ConstantString((byte)86);
      constantArray0[0] = (Constant) constantString0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("ifge");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("sastore", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-21);
      ConstantPool constantPool0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      int int0 = 251;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 251, 137);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "h)/$+M/ul9)CdL;";
      boolean boolean0 = true;
      try { 
        Utility.decode("h)/$+M/ul9)CdL;", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      Utility.printArray(objectArray0, false);
      String string0 = "Pp't#YlyimyT";
      Utility.compactClassName("Pp't#YlyimyT");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)95;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)12, (int) (byte) (-54));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte)25;
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-2), (int) (byte) (-2));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dload_3
         // 1:    impdep2
         // 2:    istore_1
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.replace("!m/IS", "org.apache.bcel.classfile.deprecated", "Z'3]YrV;FnTr>)(VGzS");
      assertEquals("!m/IS", string0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ", length = ");
      byte byte0 = Utility.typeOfSignature("From\tTo\tHandler\tType\n");
      assertEquals((byte)6, byte0);
      
      short short0 = Utility.searchOpcode("org.apache.bcel.classfile.deprecated");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)6;
      byteArray0[7] = (byte)6;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string1 = Utility.compactClassName("!m/IS", true);
      assertEquals("!m.IS", string1);
      
      int int0 = Utility.setBit(64, (-236));
      assertEquals(1048640, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "/g";
      try { 
        Utility.typeOfSignature("/g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = Utility.classOrInterface(61);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-128);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-93), 517);
      assertEquals("0:    impdep2\n1:    dstore\t\t%184\n3:    if_icmpgt\t\t#17440\n6:    ior\n", string1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Utility.setBit(206, (-76));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-121);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byteSequence0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) (byte) (-121);
      objectArray0[4] = (Object) byteSequence0;
      String string1 = Utility.printArray(objectArray0, true, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utility.accessToString(18);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-61);
      byteArray0[5] = (byte)5;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-74), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-47);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("caload", string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utility.isSet(196, 1472);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)126;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 83, (-8));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, false);
      Utility.accessToString(164);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)29;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)108, 156);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object0 = new Object();
      objectArray0[0] = object0;
      Utility.printArray(objectArray0, true);
      Utility.classOrInterface(88);
      Utility.typeOfSignature("DdX?B/#|/>C;I)c5_");
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "5nYplqnc9wnJ Wi";
      Utility.compactClassName("5nYplqnc9wnJ Wi", "5nYplqnc9wnJ Wi", false);
      try { 
        Utility.typeOfSignature("5nYplqnc9wnJ Wi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5nYplqnc9wnJ Wi
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "`");
      boolean boolean0 = false;
      Utility.accessToString(4334, false);
      Utility.methodSignatureReturnType("V", true);
      Utility.compactClassName("private protected static synchronized volatile transient synthetic", "`", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)90;
      MockFile mockFile0 = new MockFile("V", "Illegal type: ");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "private protected static synchronized volatile transient synthetic");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"private protected static synchronized volatile transient synthetic\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Utility.accessToString(62, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)58;
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("private protected static final");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1, (int) (byte)58, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 60633. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 202, 85, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Utility.typeOfSignature("Constant pool at index ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      // Undeclared exception!
      try { 
        constantPool0.constantToString((Constant) constantClass1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("_-", stringArray0);
      String string0 = "~h|\\g@2l# v2-HdR6";
      Utility.methodSignatureToString("()L_-;", "_-", "~h|g@2l# v2-HdR6", true);
      Utility.setBit(3554, 3554);
      Utility.accessToString(3554);
      Utility.compactClassName("_-", "()L_-;", false);
      try { 
        Utility.methodSignatureArgumentTypes("9~ 6@s", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9~ 6@s
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = Utility.compactClassName("l,i1\",H21*!~", "l,i1\",H21*!~", false);
      assertEquals("l,i1\",H21*!~", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.fillup("l,i1\",H21*!~", 222, false, ',');
      String string1 = Utility.format(222, 88, false, ',');
      assertEquals(",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,222", string1);
      
      byte byte0 = Utility.typeOfSignature("[+q&A;BDG#wqb=");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Utility.accessToString(18);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-69);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)5;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-74), (int) (byte) (-66));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "j:-@#I2)0f[L");
      String string0 = "org.apache.bcel.classfile.InnerClass";
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.bcel.classfile.InnerClass");
      String string1 = "CQyYvT";
      Locale locale0 = new Locale("org.apache.bcel.classfile.InnerClass", "B", "CQyYvT");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "B";
      objectArray0[1] = (Object) "org.apache.bcel.classfile.InnerClass";
      objectArray0[2] = (Object) "CQyYvT";
      objectArray0[3] = (Object) "org.apache.bcel.classfile.InnerClass";
      objectArray0[4] = (Object) locale0;
      objectArray0[5] = (Object) "B";
      objectArray0[6] = (Object) "org.apache.bcel.classfile.InnerClass";
      PrintStream printStream0 = mockPrintStream0.format(locale0, "B", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      String string2 = "";
      boolean boolean0 = false;
      Utility.decode("", false);
      locale0.toLanguageTag();
      try { 
        Utility.typeOfSignature("K8Z}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K8Z}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-50);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.printArray(objectArray0, true, false);
      try { 
        Utility.methodSignatureReturnType("Ns.[W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ns.[W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "W]";
      // Undeclared exception!
      try { 
        Utility.signatureToString("W]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)90;
      byteArray0[8] = (byte)38;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)76, (int) (byte)5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-39);
      byteArray0[3] = (byte) (-66);
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)5;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)70, 3381);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Utility.searchOpcode("]8'h1p)7");
      String string0 = "Wu\"x5}L*";
      try { 
        Utility.typeOfSignature("Wu\"x5}L*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Wu\"x5}L*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z'/(SvGZJ|\"kF./\"=L");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ifle");
      Utility.signatureToString("Z'/(SvGZJ|\"kF./\"=L", false);
      int int0 = Utility.setBit(512, 512);
      assertEquals(513, int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Q~/o}I(|C YC[}}P4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q~/o}I(|C YC[}}P4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Utility.compactClassName("l,i1\",H21*!~", "l,i1\",H21*!~", false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.fillup("l,i1\",H21*!~", 222, false, ',');
      Utility.format(222, 88, false, ',');
      try { 
        Utility.typeOfSignature(") <*r3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ) <*r3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      try { 
        Utility.typeOfSignature("-A/Cdt(?Xe[BP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -A/Cdt(?Xe[BP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)90;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      Utility.toHexString(byteArray0);
      byte[] byteArray1 = Utility.decode(" methods:\n", false);
      assertArrayEquals(new byte[] {(byte)32, (byte)109, (byte)101, (byte)116, (byte)104, (byte)111, (byte)100, (byte)115, (byte)58, (byte)10}, byteArray1);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) " methods:\n";
      objectArray0[1] = (Object) (byte)25;
      Object object0 = new Object();
      objectArray0[2] = object0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) " methods:\n";
      objectArray0[5] = (Object) (byte) (-40);
      objectArray0[6] = (Object) " methods:\n";
      objectArray0[7] = (Object) (byte) (-40);
      objectArray0[8] = (Object) (byte)90;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("d8 19 1b 40 c0 5a", string1);
      
      String string2 = Utility.convertString(" methods:\n, 25, java.lang.Object@209792b0, java.lang.Object@4fab8a36,  methods:\n, -40,  methods:\n, -40, 90");
      String string3 = Utility.compactClassName(" methods:\n, 25, java.lang.Object@209792b0, java.lang.Object@4fab8a36,  methods:\n, -40,  methods:\n, -40, 90", true);
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "boolean";
      stringArray0[1] = "boolean";
      stringArray0[2] = "invokedynamic";
      stringArray0[3] = "boolean";
      stringArray0[4] = "boolean";
      Utility.methodTypeToSignature("boolean", stringArray0);
      Utility.fillup("w*. S+PtWoJ\f=", 191, true, 'Q');
      Utility.accessToString(195, true);
      Utility.accessToString(58);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)88;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 87, (int) (byte)88, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)0;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2341, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Utility.typeOfSignature("T{(B,Z':z:(f~[OB4V%");
      File file0 = MockFile.createTempFile("T{(B,Z':z:(f~[OB4V%", "T{(B,Z':z:(f~[OB4V%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) mockPrintWriter0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) null;
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      objectArray0[5] = (Object) file0;
      objectArray0[6] = (Object) "T{(B,Z':z:(f~[OB4V%";
      Utility.printArray(printWriter0, objectArray0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)107;
      Constant[] constantArray0 = new Constant[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(95, (byte)107);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(145, 416);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 416, 416);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte) (-20);
      byteArray0[3] = (byte) (-17);
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)25;
      byteArray0[6] = (byte) (-32);
      byteArray0[7] = (byte)43;
      byteArray0[8] = (byte) (-94);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2862, (-692));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte) (-50);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)62;
      byteArray1[1] = (byte)34;
      byteArray1[2] = (byte)37;
      byteArray1[3] = (byte) (-87);
      byteArray1[4] = (byte)62;
      byteArray1[5] = (byte) (-50);
      byteArray1[6] = (byte)103;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "'";
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-17);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("wide");
      constantArray0[0] = (Constant) constantUtf8_0;
      BCELComparator bCELComparator0 = Field.getComparator();
      Constant.setComparator(bCELComparator0);
      String string0 = constantUtf8_0.toString();
      assertEquals("CONSTANT_Utf8[1](\"wide\")", string0);
      
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantMethodType1.copy();
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dstore_0", string1);
      
      String string2 = Utility.accessToString(690, false);
      assertEquals("private final synchronized transient interface", string2);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Utility.convertString("char");
      byte[] byteArray0 = new byte[4];
      String string0 = "dadd";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dadd");
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-78);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 53, (int) (byte)7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = "M7Npu]5}";
      try { 
        Utility.typeOfSignature("M7Npu]5}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M7Npu]5}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)74;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)74, (int) (byte) (-46));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.replace("6*-O", "6*-O", "r>}' >Cf{{gJ,fx:i?");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-100);
      Constant[] constantArray0 = new Constant[4];
      ConstantString constantString0 = new ConstantString((byte) (-100));
      constantArray0[0] = (Constant) constantString0;
      int int0 = 1102;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1102, 1102);
      constantArray0[1] = (Constant) constantMethodref0;
      ConstantLong constantLong0 = new ConstantLong((-213L));
      constantArray0[2] = (Constant) constantLong0;
      String string0 = "!F8u/~ce&`!f>d$";
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("!F8u/~ce&`!f>d$");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[3] = (Constant) constantUtf8_1;
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantString0.accept(emptyVisitor0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      int int1 = (-7214);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-100), (-7214));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "<_\\RMIPnIMmv1";
      Utility.convertString("<_RMIPnIMmv1");
      Utility.replace("eTVGa4=?p]dNdIS~s", "The list of suffixes must not be null", "7)}V");
      // Undeclared exception!
      try { 
        Utility.signatureToString("T", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Utility.replace("FX*AS$J0", "ofPv\"kL2#P_G&X^_P", "ofPv\"kL2#P_G&X^_P");
      int int0 = Utility.setBit(303, 303);
      assertEquals(33071, int0);
      
      String string0 = Utility.accessToString(226, true);
      assertEquals("private volatile transient", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "FX*AS$J0";
      String string1 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"FX*AS$J0\"}", string1);
      assertNotNull(string1);
      
      String string2 = Utility.compactClassName("FX*AS$J0", true);
      assertEquals("FX*AS$J0", string2);
      
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-118);
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      String string3 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("f2l", string3);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Utility.isJavaIdentifierPart('Q');
      Utility.convertString("l[@fEX");
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "l[@fEX";
      objectArray0[2] = (Object) "l[@fEX";
      objectArray0[3] = (Object) "l[@fEX";
      objectArray0[4] = (Object) "l[@fEX";
      objectArray0[5] = (Object) "l[@fEX";
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)72;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 72, (-364), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.compactClassName("? extends ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-350), (-350));
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[0] = (Constant) constantMethodHandle1;
      ConstantString constantString0 = new ConstantString((byte) (-77));
      constantArray0[1] = (Constant) constantString0;
      Constant constant0 = constantArray0[1].copy();
      constantArray0[2] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte)90;
      byteArray0[8] = (byte)38;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)78, (int) (byte)5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("=/Pm>tdmS~ls46P:W,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =/Pm>tdmS~ls46P:W,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = " (";
      Utility.fillup(" (", 39, false, '3');
      try { 
        Utility.typeOfSignature("8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "0ie4MJ6c";
      try { 
        Utility.typeOfSignature("0ie4MJ6c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0ie4MJ6c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Utility.methodSignatureReturnType("C", false);
      Utility.searchOpcode("newarray");
      // Undeclared exception!
      try { 
        Utility.signatureToString("tableswitch");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `tableswitch'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = false;
      Utility.accessToString(2974, false);
      Utility.compactClassName("Invalid signature: ", "Invalid signature: ", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte)7;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)59, (int) (byte) (-51));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.accessToString(666);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-41);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)4, 40, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java.lang.";
      Utility.methodTypeToSignature("java.lang.", stringArray0);
      try { 
        Utility.typeOfSignature("Oj.KpIyw$MW4=}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Oj.KpIyw$MW4=}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Utility.isSet(1341, 1341);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-93);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)48, (int) (byte) (-93));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = "$<jq_g.~b\\ri$.";
      try { 
        Utility.typeOfSignature("$<jq_g.~b\ri$.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $<jq_g.~b\ri$.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Utility.methodSignatureReturnType("D7");
      Utility.clearBit((-819), (-819));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.accessToString((-819), true);
      Utility.getSignature("public protected static volatile transient abstract strictfp synthetic annotation enum");
      Utility.searchOpcode("D7");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      Utility.printArray(objectArray0, true);
      int int0 = 70;
      Utility.classOrInterface(70);
      Utility.isSet((-819), (-9011));
      String string0 = "S_r=OA0W7gf";
      try { 
        Utility.methodSignatureArgumentTypes("S_r=OA0W7gf", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: S_r=OA0W7gf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = 803;
      Utility.clearBit(803, 803);
      String string0 = "(reference_kind = ";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureArgumentTypes("(reference_kind = ", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `reference_kind = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("fstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x1HkQ");
      Utility.convertString("x1HkQ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte) (-111);
      byteArray0[8] = (byte)126;
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)74, (byte)74);
      constantArray0[0] = (Constant) constantMethodref0;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-111), (-398));
      constantArray0[1] = (Constant) constantNameAndType0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(307, 592);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[3] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)31, 2915);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 19001. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte) (-82);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-61), (int) (byte)12, false);
      assertEquals("0:    dup_x1\n1:    fconst_1\n2:    monitorexit\n3:    fload_3\n4:    if_icmpeq\t\t#-21193\n7:    laload\n8:    freturn\n", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = Utility.format((-2035), 91, true, 'L');
      assertEquals("-2035LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("faload", string1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Utility.clearBit(160, 160);
      try { 
        Utility.typeOfSignature("X<&eMN1fDmU0Vv8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X<&eMN1fDmU0Vv8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "L\"_q]$<gi#ZZG#rB(;V";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L\"_q]$<gi#ZZG#rB(;V");
      String string1 = " y$7y|\\";
      // Undeclared exception!
      try { 
        Utility.decode(" y$7y|", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7y\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-60);
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-103);
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(", npairs = ", ", npairs = ", "\t\t#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , npairs = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-35);
      byteArray0[5] = (byte)16;
      Utility.toHexString(byteArray0);
      String string0 = "EwvivnXY0])8[3qQ";
      // Undeclared exception!
      try { 
        Utility.signatureToString("EwvivnXY0])8[3qQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `EwvivnXY0])8[3qQ'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)88;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)45;
      byteArray0[5] = (byte) (-113);
      boolean boolean0 = true;
      Utility.encode(byteArray0, true);
      String string0 = "3m>T[-rh4hR";
      try { 
        Utility.typeOfSignature("3m>T[-rh4hR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3m>T[-rh4hR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\b");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\b");
      Utility.methodTypeToSignature("V>c=^ ", (String[]) null);
      Utility.classOrInterface(48);
      Utility.setBit((-1422), (-1422));
      Utility.isJavaIdentifierPart('o');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-61);
      byteArray0[8] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(byteSequence0);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantMethodref constantMethodref0 = null;
      try {
        constantMethodref0 = new ConstantMethodref(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "(";
      try { 
        Utility.methodSignatureArgumentTypes("(", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.bcel.classfile.Utility$1");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "float");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)105;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1085), (-179));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-3115));
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantClass constantClass0 = new ConstantClass(631);
      constantArray0[2] = (Constant) constantClass0;
      ConstantInteger constantInteger0 = new ConstantInteger((-1085));
      constantArray0[3] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("dup", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.accessToString(603);
      Utility.searchOpcode("public private static final volatile interface");
      try { 
        Utility.typeOfSignature(":qRDa0-Z6:]mz_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :qRDa0-Z6:]mz_
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.signatureToString("K5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-10);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte) (-120);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2), (-1059), true);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    aload_2\n3:    l2i\n", string0);
      
      boolean boolean0 = Utility.isSet((byte)44, 68);
      assertFalse(boolean0);
      
      String string1 = Utility.accessToString((-2), true);
      assertEquals("private protected static final volatile transient native abstract strictfp synthetic annotation enum", string1);
      
      Utility.accessToString((int) (byte)44, false);
      String string2 = Utility.getSignature("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    aload_2\n3:    l2i\n");
      assertEquals("L0:;", string2);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iBF-i");
      int int0 = Utility.clearBit(120, 120);
      assertEquals(120, int0);
      
      String string0 = Utility.compactClassName("sTIs!>ee");
      assertEquals("sTIs!>ee", string0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "sTIs!>ee";
      objectArray0[1] = (Object) "iBF-i";
      objectArray0[2] = (Object) "iBF-i";
      objectArray0[3] = (Object) "sTIs!>ee";
      objectArray0[4] = (Object) "sTIs!>ee";
      objectArray0[5] = (Object) "sTIs!>ee";
      objectArray0[6] = (Object) "iBF-i";
      objectArray0[7] = (Object) "iBF-i";
      Object object0 = new Object();
      objectArray0[8] = object0;
      String string1 = Utility.printArray(objectArray0);
      assertNotNull(string1);
      
      String string2 = Utility.accessToString(120, false);
      assertEquals("static final synchronized volatile", string2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)47;
      byteArray1[1] = (byte) (-122);
      byteArray1[2] = (byte) (-122);
      byteArray1[3] = (byte) (-122);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Utility.printArray(objectArray0, false);
      String string0 = "LTp`*I`";
      // Undeclared exception!
      try { 
        Utility.signatureToString("LTp`*I`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LTp`*I`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("(reference_kind = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (reference_kind = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Utility.methodSignatureReturnType("S(Q0dij+rlc{8l", false);
      Utility.accessToString((-2158));
      Utility.convertString("LO%6@!\"0g");
      // Undeclared exception!
      try { 
        Utility.signatureToString(")\t", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `)\t'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Utility.setBit(433, (-457));
      Utility.methodSignatureReturnType("BgqWf2");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(";Ze>|eu", ";Ze>|eu", ";Ze>|eu", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;Ze>|eu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0);
      Utility.fillup("{java.lang.Object@26d205c, java.lang.Object@5cc7fad9, java.lang.Object@5f2464c9}", 2340, true, 'M');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)33;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)76;
      byteArray0[6] = (byte) (-118);
      byteArray0[7] = (byte) (-128);
      byteArray0[8] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0);
      assertEquals(1, byteSequence0.getIndex());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = "static";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(\"", "(\"", "static");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte) (-91);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)103, (int) (byte)103, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.fillup("{My_4Ok&~+R", 1337, true, 'g');
      String string0 = "U2cj*nIO&mIc$BaBKm2";
      // Undeclared exception!
      try { 
        Utility.signatureToString("U2cj*nIO&mIc$BaBKm2", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `U2cj*nIO&mIc$BaBKm2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Utility.typeOfSignature("SlNVCg");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SlNVCg");
      String string0 = "ifgt";
      String string1 = "float";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "float");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("ifgt", "uQW6>5&7V", "xgg2 I<Ovj;Y-X#[", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifgt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = (-3006);
      Utility.isSet((-3006), (-3006));
      String string0 = "G{";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("G{", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)0;
      Constant[] constantArray0 = new Constant[5];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(3101, (byte) (-81));
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("i2c");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType(172);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-1578), (byte) (-81));
      constantArray0[3] = (Constant) constantInterfaceMethodref0;
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[4] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 482, 242, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("BootstrapMethod(");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = Utility.replace("3f: V<jM", "3f: V<jM", "3f: V<jM");
      assertEquals("3f: V<jM", string0);
      
      Utility.isJavaIdentifierPart('g');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "3f: V<jM";
      stringArray0[1] = "3f: V<jM";
      String string1 = Utility.methodTypeToSignature("3f: V<jM", stringArray0);
      assertEquals("(L3f:;L3f:;)L3f:;", string1);
      
      String string2 = Utility.format(59, (-3391), true, 'g');
      assertEquals("59", string2);
      
      byte byte0 = Utility.typeOfMethodSignature("(L3f:;L3f:;)L3f:;");
      assertEquals((byte)14, byte0);
      
      String string3 = Utility.accessToString((-149));
      assertEquals("public private static synchronized volatile native interface abstract strictfp synthetic annotation enum", string3);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('s');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Utility.format((-2035), 91, true, 'L');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte) (-39);
      byteArray0[7] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals(1, byteSequence0.getIndex());
      assertEquals("lstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Utility.setBit(63, (-3914));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "Z", (Object[]) null);
      Utility.printArray(printWriter0, (Object[]) null);
      Utility.setBit(4458, 4194367);
      Utility.compactClassName("Z", "Z", false);
      try { 
        Utility.methodSignatureReturnType("Q^j=3H8^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q^j=3H8^'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Utility.compactClassName("HW_");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte) (-109);
      byteArray0[8] = (byte)10;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)120, (-607));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "[\"%-k";
      // Undeclared exception!
      try { 
        Utility.signatureToString("[\"%-k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"%-k'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)117;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)62;
      byteArray1[1] = (byte)92;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)62, (int) (byte)92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = ";";
      try { 
        Utility.typeOfSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Utility.typeOfSignature("V");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "V";
      objectArray0[1] = (Object) "V";
      Object object0 = new Object();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "V";
      Utility.printArray(objectArray0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read(byteArray0);
      try { 
        byteSequence0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Utility.accessToString((-1026));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "private protected static final synchronized volatile transient native interface strictfp synthetic annotation enum";
      objectArray0[1] = (Object) "private protected static final synchronized volatile transient native interface strictfp synthetic annotation enum";
      Utility.printArray(objectArray0);
      Utility.compactClassName("private protected static final synchronized volatile transient native interface strictfp synthetic annotation enum", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte) (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1194, (int) (byte)83, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte)110;
      byteArray0[7] = (byte)39;
      byteArray0[8] = (byte)28;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2781, 173, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature("#>'iXm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #>'iXm
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FO");
      int int0 = (-329);
      Utility.clearBit((-329), (-329));
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      Utility.methodSignatureReturnType("FO");
      String string0 = "\t\t";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t\t", "lxor", "", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = "getfield";
      byte[] byteArray0 = Utility.decode("getfield", false);
      Constant[] constantArray0 = new Constant[1];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("<* xwqO4yB~|KS?");
      constantUtf8_0.copy();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "getfield");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      int int0 = 32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 32, 32, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Utility.getSignature("g");
      Utility.replace(")\t", "1 5p", "b");
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte)59;
      byteArray0[8] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantString constantString0 = new ConstantString((byte)87);
      constantArray0[2] = (Constant) constantString0;
      ConstantFloat constantFloat1 = new ConstantFloat((byte)100);
      constantArray0[3] = (Constant) constantFloat1;
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[4] = (Constant) constantInteger1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-120), (byte) (-120));
      constantArray0[5] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = (-970);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      boolean boolean0 = true;
      Utility.accessToString((-970), true);
      String string0 = "P^*,EN*6sr5iMn\\5";
      try { 
        Utility.methodSignatureReturnType("P^*,EN*6sr5iMn\u0005");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P^*,EN*6sr5iMn\u0005'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Utility.classOrInterface((-1710));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)25;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte)33;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, constantPool0, (-1710), 4312, true);
      Utility.setBit((byte)25, (byte)33);
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-107);
      Utility.equals(byteArray0, byteArray0);
      int int0 = 106;
      Utility.isSet(83, 106);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ors8t_'p,;pm", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ors8t_'p,;pm'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "?0mR>H6gxoA]P";
      Utility.searchOpcode("?0mR>H6gxoA]P");
      try { 
        Utility.typeOfSignature("?0mR>H6gxoA]P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?0mR>H6gxoA]P
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte) (-11);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte) (-86);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte) (-20);
      byteArray0[8] = (byte)49;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Muw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Muw'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.getSignature("q4MGxs/u");
      Utility.getSignature("q4MGxs/u");
      Utility.typeOfSignature("Lq4MGxs/u;");
      try { 
        Utility.methodSignatureArgumentTypes("q4MGxs/u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: q4MGxs/u
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "\t\t#";
      Utility.searchOpcode("\t\t#");
      Utility.compactClassName("\t\t#");
      Utility.getSignature("lreturn");
      try { 
        Utility.typeOfSignature(", low = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , low = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-4404), (int) (byte)74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte) (-40);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-40), 3616, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 201. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0, true);
      short short0 = Utility.searchOpcode("lreturn");
      assertEquals((short)173, short0);
      
      Utility.compactClassName("java.lang.HW_", "", true);
      String string0 = Utility.accessToString(3355);
      assertEquals("public private static final native abstract strictfp", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte) (-99);
      byteArray0[7] = (byte) (-45);
      byteArray0[8] = (byte) (-102);
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1379), 2081);
      Constant constant0 = constantMethodref0.copy();
      constantArray0[0] = constant0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantFloat constantFloat0 = new ConstantFloat(1317.5763F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[2] = (Constant) constantFloat1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)98, 1580);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[3] = (Constant) constantNameAndType1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-2262), 1931);
      constantArray0[4] = (Constant) constantMethodHandle0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-99), (-2416));
      assertEquals("0:    fadd\n1:    fmul\n2:    iconst_m1\n3:    aconst_null\n4:    <illegal opcode>\n5:    aload_3\n6:    ifgt\t\t#-11360\n", string1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte) (-112);
      byteArray0[7] = (byte)104;
      byteArray0[8] = (byte)99;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.signatureToString("Invalid signature: ", false);
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      LocalVariableTable localVariableTable0 = new LocalVariableTable((-588), 53, localVariableArray0, (ConstantPool) null);
      try { 
        Utility.methodSignatureToString("Invalid signature: ", "java.lang.", "6a 0f 50 07 6a 99 90 68 63", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Utility.compactClassName("HW_");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte) (-109);
      byteArray0[8] = (byte)10;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)104, (-607));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = Utility.fillup("7#.8[J~9JO@It", 5426, false, '/');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)25;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)11;
      Utility.toHexString(byteArray0);
      Utility.setBit((-405), (-1440307881));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "36 02 d5 19 5a c3 0b";
      stringArray0[1] = "areturn";
      stringArray0[2] = "7#.8[J~9JO@It";
      stringArray0[3] = string0;
      stringArray0[4] = string0;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("36 02 d5 19 5a c3 0b", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[J~9JO@It
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)126;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte) (-37);
      byteArray0[8] = (byte)95;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("n$F$ce$7e$F$c5$e6$db_", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte) (-99);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)2;
      Utility.toHexString(byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Utility.searchOpcode("\r");
      Utility.isJavaIdentifierPart('[');
      try { 
        Utility.typeOfSignature("ifnonnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnonnull
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)90;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[4] = (byte)127;
      Utility.equals(byteArray0, byteArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("TSg;k$yKtMhjhn");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)127;
      objectArray0[1] = (Object) (byte)90;
      objectArray0[2] = (Object) "TSg;k$yKtMhjhn";
      objectArray0[3] = (Object) null;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      assertEquals(4, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('W');
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Utility.convertString(", npairs = ");
      String[] stringArray0 = new String[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[0] = ", npairs = ";
      stringArray0[1] = ", npairs = ";
      stringArray0[2] = "float";
      stringArray0[3] = ", npairs = ";
      stringArray0[4] = null;
      stringArray0[5] = ", npairs = ";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Utility.compactClassName("8PWb2I#d]KTcZLal<", "8PWb2I#d]KTcZLal<", true);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("HA&Lk^6", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `HA&Lk^6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte)1;
      Utility.equals(byteArray0, byteArray0);
      String string0 = "\t(wide)";
      Utility.searchOpcode("\t(wide)");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\t(wide)";
      stringArray0[1] = "\t(wide)";
      stringArray0[2] = "\t(wide)";
      Utility.methodTypeToSignature("\t(wide)", stringArray0);
      try { 
        Utility.methodSignatureReturnType("\t(wide)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('7');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)79;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-280), 83);
      Utility.clearBit((byte)79, (byte)79);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = "[q";
      // Undeclared exception!
      try { 
        Utility.getSignature("[q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Utility.signatureToString("JR", true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "JR";
      objectArray0[1] = (Object) "JR";
      objectArray0[2] = (Object) "JR";
      objectArray0[3] = (Object) "JR";
      objectArray0[4] = (Object) "JR";
      objectArray0[5] = (Object) "JR";
      String string0 = Utility.printArray(objectArray0, true, true);
      assertEquals("{\"JR\", \"JR\", \"JR\", \"JR\", \"JR\", \"JR\"}", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = Utility.format((-304), (-304), true, 'D');
      assertEquals("-304", string1);
      
      String string2 = Utility.compactClassName("long", "JR", false);
      assertEquals("long", string2);
      
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("j$yc>MWobO^*", stringArray0);
      String string3 = Utility.replace("An 5zftF\"", "^y7", "ishl");
      assertEquals("An 5zftF\"", string3);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('5');
      assertTrue(boolean0);
      
      String string4 = Utility.printArray((Object[]) stringArray0, false, false);
      assertEquals("", string4);
      
      String string5 = Utility.methodTypeToSignature("j$yc>MWobO^*", stringArray0);
      assertEquals("()Lj$yc>MWobO^*;", string5);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte) (-105);
      String string6 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-105), (int) (byte) (-105), false);
      assertEquals("0:    <illegal opcode>\n1:    lload_2\n2:    dcmpl\n", string6);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2%ER:iEq4#\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2%ER:iEq4#\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Utility.isSet((-621), (-621));
      String string0 = "dreturn";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("fload_1", "dreturn", "dreturn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fload_1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Utility.searchOpcode("newarray");
      Utility.classOrInterface((-3466));
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      objectArray0[3] = (Object) "newarray";
      objectArray0[4] = (Object) "newarray";
      objectArray0[5] = (Object) "interface";
      Utility.printArray(objectArray0);
      String string0 = ".OgjSOR}";
      Utility.replace("{java.lang.Object@265abc5, java.lang.Object@772414fc, java.lang.Object@3102f1c1, newarray, newarray, interface}", "newarray", ".OgjSOR}");
      String string1 = "\\}~0<<u";
      boolean boolean0 = false;
      Method method0 = new Method();
      Method method1 = new Method(method0);
      // Undeclared exception!
      try { 
        method1.getLocalVariableTable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Method", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.accessToString((-592), false);
      byte[] byteArray0 = Utility.decode("zP7YG bzY5.p@", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isJavaIdentifierPart('D');
      Utility.encode(byteArray0, true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[1] = "\"XDTm*k?(3)K4I3";
      stringArray0[2] = "zP7YG bzY5.p@";
      stringArray0[3] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[4] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[5] = "zP7YG bzY5.p@";
      stringArray0[6] = "$l$8b$I$A$A$A$A$A$A$A";
      stringArray0[7] = "final synchronized transient native abstract strictfp synthetic annotation enum";
      Utility.methodTypeToSignature("8lA@8", stringArray0);
      try { 
        Utility.methodSignatureArgumentTypes("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      boolean boolean0 = false;
      Utility.format(483, 39, false, '$');
      try { 
        Utility.methodSignatureReturnType("RuntimeInvisibleAnnotations", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeInvisibleAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Utility$JavaReader";
      Utility.convertString("org.apache.bcel.classfile.Utility$JavaReader");
      boolean boolean0 = false;
      Utility.accessToString((-2990), false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "org.apache.bcel.classfile.Utility$JavaReader";
      objectArray0[1] = (Object) "org.apache.bcel.classfile.Utility$JavaReader";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "org.apache.bcel.classfile.Utility$JavaReader";
      objectArray0[4] = (Object) "private final volatile abstract synthetic annotation enum";
      Utility.printArray(objectArray0, true, true);
      Utility.convertString("uVr*<<M&]'{s@,");
      try { 
        Utility.methodSignatureArgumentTypes("org.apache.bcel.classfile.Utility$JavaReader", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apache.bcel.classfile.Utility$JavaReader
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = "xh^w.^$";
      String string1 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.replace("xh^w.^$", "xh^w.^$", (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.clearBit(3145, 340);
      String string2 = "lk&u^1QM";
      try { 
        Utility.methodSignatureReturnType("lk&u^1QM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lk&u^1QM'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")");
      Utility.searchOpcode(")");
      Utility.fillup(")", (short) (-1), false, 'o');
      Utility.accessToString((int) (short) (-1));
      Utility.accessToString((int) (short) (-1));
      Utility.format((short) (-1), 199, false, 'o');
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, (short) (-1), false, 'o');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = "iand";
      try { 
        Utility.typeOfSignature("iand");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iand
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)34;
      Constant[] constantArray0 = new Constant[4];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(67, (byte)85);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)81);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((-2211), (-1381));
      constantArray0[2] = (Constant) constantInterfaceMethodref0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)83, 3853);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[3] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)34, (-3389));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Utility.searchOpcode("if_icmpeq");
      boolean boolean0 = true;
      Utility.fillup("if_icmpeq", (short)159, true, 'b');
      // Undeclared exception!
      try { 
        Utility.signatureToString("\"[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"['
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Utility.classOrInterface(327);
      Utility.accessToString(198, true);
      Utility.methodSignatureReturnType("L*CV]dC6,#;", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[7];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      int int0 = 8;
      int int1 = 78;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)97;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("6d 17 d8 61 61", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Object[] objectArray0 = null;
      boolean boolean0 = false;
      Utility.printArray((Object[]) null, false);
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 77;
      Utility.clearBit((-1305), 77);
      String string0 = "f.I:=";
      String string1 = "boolean";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("f.I:=", "f.I:=", "boolean", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: f.I:=
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = ">>T}yO#(o$_.42";
      int int0 = (-2176);
      boolean boolean0 = true;
      char char0 = 'F';
      Utility.fillup(">>T}yO#(o$_.42", (-2176), true, 'F');
      try { 
        Utility.methodSignatureArgumentTypes(">>T}yO#(o$_.42");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >>T}yO#(o$_.42
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = Utility.compactClassName("S ");
      assertEquals("S ", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('K');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte) (-70);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Utility.classOrInterface(1354);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)40;
      Utility.toHexString(byteArray0);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("03 7b 68 28", string1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.isSet(32, 32);
      String string0 = "short";
      try { 
        Utility.typeOfMethodSignature("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      int int0 = (-94);
      Utility.accessToString((-94), true);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("private transient native abstract strictfp synthetic annotation enum", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `private transient native abstract strictfp synthetic annotation enum'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte) (-93);
      byteArray0[8] = (byte) (-116);
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.decode("Omv&#g$P#", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-89);
      Utility.encode(byteArray0, false);
      DataInput dataInput0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      String string0 = Utility.printArray(objectArray0, true, true);
      String string1 = Utility.classOrInterface(0);
      assertEquals("class", string1);
      
      String string2 = Utility.printArray(objectArray0, true, false);
      assertFalse(string2.equals((Object)string0));
      
      Utility.convertString("{\"java.lang.Object@68d505a5\", \"java.lang.Object@29c14704\", \"java.lang.Object@1a6d79ed\", \"java.lang.Object@743b6eec\", \"java.lang.Object@3483a5e3\", \"java.lang.Object@17592d10\", \"java.lang.Object@668a8c07\", \"java.lang.Object@49e9d234\"}");
      int int0 = Utility.setBit(0, 0);
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)16;
      String string3 = Utility.encode(byteArray0, true);
      Utility.compactClassName("lcmp");
      String string4 = Utility.compactClassName("$l$8b$I$A$A$A$A$A$A$A", "g)", false);
      assertTrue(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Utility.isJavaIdentifierPart('9');
      String string0 = "";
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Utility.decode("", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = "^J4T ";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("[qS*Dnv?Igj` P5I", "TEbAU8G|2+ee00>B", "^J4T ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [qS*Dnv?Igj` P5I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = "\t(wide)";
      try { 
        Utility.methodSignatureReturnType("\t(wide)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = ", high = ";
      try { 
        Utility.methodSignatureArgumentTypes(", high = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , high = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      String string0 = Utility.printArray(objectArray0, true, true);
      String string1 = Utility.classOrInterface(0);
      assertEquals("class", string1);
      
      String string2 = Utility.printArray(objectArray0, true, false);
      assertFalse(string2.equals((Object)string0));
      
      Utility.convertString("{\"java.lang.Object@7d504d5c\", \"java.lang.Object@4bb1ea7b\", \"java.lang.Object@626afcdf\", \"java.lang.Object@5f87f6ad\", \"java.lang.Object@20c27aac\", \"java.lang.Object@6464befd\", \"java.lang.Object@515d2aaa\", \"java.lang.Object@318f8cb2\"}");
      int int0 = Utility.setBit(0, 0);
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)16;
      String string3 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string3);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)43;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-2648), (int) (byte)43);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) (byte)43;
      objectArray0[1] = (Object) (byte)80;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) (byte)80;
      objectArray0[4] = (Object) (byte)43;
      objectArray0[5] = (Object) "0:    i2f\n1:    lastore\n2:    aload_1\n";
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-122), 2114);
      String[] stringArray0 = new String[0];
      String string2 = Utility.methodTypeToSignature("'", stringArray0);
      assertEquals("()L';", string2);
      
      Utility.fillup("0:    i2f\n1:    lastore\n2:    aload_1\n", 58, false, 'K');
      String string3 = Utility.replace("0:    i2f\n1:    lastore\n2:    aload_1\n", "N70:$C:/zU,k|FdH", "0:    i2f\n1:    lastore\n2:    aload_1\n");
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 59
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = Utility.compactClassName("S\"jS$`uFK4", "S\"jS$`uFK4", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = "4p~ncPi)3!KWiE";
      try { 
        Utility.typeOfSignature("4p~ncPi)3!KWiE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4p~ncPi)3!KWiE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object object2 = new Object();
      objectArray0[2] = object2;
      Utility.printArray(objectArray0, false, false);
      Utility.compactClassName("java.lang.Object@4f387489, java.lang.Object@468e2021, java.lang.Object@420c5df4");
      Utility.convertString("q{Z1-tmW|0X9z\u0000y%");
      Utility.accessToString(2227, false);
      try { 
        Utility.typeOfMethodSignature("java.lang.Object@4f387489, java.lang.Object@468e2021, java.lang.Object@420c5df4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.Object@4f387489, java.lang.Object@468e2021, java.lang.Object@420c5df4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string1 = Utility.accessToString(537, true);
      assertEquals("public static final", string1);
      
      byte[] byteArray1 = Utility.decode("$l$8b$I$A$A$A$A$A$A$A", false);
      assertArrayEquals(new byte[] {(byte)31, (byte) (-117), (byte)8, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(10, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Utility.printArray(objectArray0, false);
      Utility.format(90, 90, false, 'D');
      try { 
        Utility.methodSignatureReturnType("newarray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `newarray'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = "short";
      boolean boolean0 = false;
      int int0 = 21;
      String string1 = "{gFs?ya,0&N(;=O";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("short", "{gFs?ya,0&N(;=O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"{gFs?ya,0&N(;=O\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte byte0 = (byte)38;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      int int0 = 1224;
      Utility.accessToString(1224);
      Utility.getSignature("");
      Utility.getSignature("*CV]dC6,#");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "L;";
      stringArray0[1] = "L*CV]dC6,#;";
      Utility.methodTypeToSignature("mfUez", stringArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",Dl =\"TT");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("L;", "\t<", "mfUez");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) null;
      Utility.printArray(objectArray0, false);
      String string0 = "Pp't#YlyimyT";
      Utility.compactClassName("Pp't#YlyimyT");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte)112;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)12, (int) (byte) (-54));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
