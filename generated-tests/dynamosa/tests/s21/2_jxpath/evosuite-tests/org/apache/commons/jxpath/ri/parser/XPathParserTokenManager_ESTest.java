/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 08:53:56 GMT 2019
 */

package org.apache.commons.jxpath.ri.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import org.apache.commons.jxpath.ri.parser.SimpleCharStream;
import org.apache.commons.jxpath.ri.parser.Token;
import org.apache.commons.jxpath.ri.parser.XPathParserTokenManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathParserTokenManager_ESTest extends XPathParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("substring");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, simpleCharStream0.bufpos);
      assertEquals(62, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(9, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(9, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(9, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("substring", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lan");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("lan", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lan");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals('l', char0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("an", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("o");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("o", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte) (-9), (byte)50, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.setDebugStream((PrintStream) null);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3723);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, (-4511));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -4511. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit((SimpleCharStream) null, 62);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 62. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals("", token0.toString());
      assertNotNull(token0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0, 0);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, (-1), (-1), 137);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertNotNull(simpleCharStream1);
      
      XPathParserTokenManager xPathParserTokenManager1 = new XPathParserTokenManager(simpleCharStream1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertNotNull(xPathParserTokenManager1);
      
      Token token0 = xPathParserTokenManager1.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.bufpos);
      assertEquals((-1), token0.endLine);
      assertEquals((-1), token0.endColumn);
      assertEquals(84, token0.kind);
      assertEquals((-1), token0.beginLine);
      assertEquals((-1), token0.beginColumn);
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertNotSame(xPathParserTokenManager1, xPathParserTokenManager0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertFalse(xPathParserTokenManager1.equals((Object)xPathParserTokenManager0));
      assertEquals((-1), simpleCharStream1.getBeginColumn());
      assertEquals((-1), simpleCharStream1.getEndColumn());
      assertEquals((-1), simpleCharStream1.getEndLine());
      assertEquals((-1), simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.getLine());
      assertEquals((-1), simpleCharStream1.getColumn());
      assertEquals("[", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream1, 214);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 214. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null);
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.ReInit((SimpleCharStream) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"\f\"");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[7];
      int int0 = stringReader0.read(charArray0);
      assertEquals(3, int0);
      assertArrayEquals(new char[] {'\"', '\f', '\"', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals("", token0.toString());
      assertNotNull(token0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0Gh>v!2xwMzdi3M");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("0", token0.toString());
      assertNotNull(token0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-'Zxks$UHh6");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-548), (-1));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-548), token0.beginLine);
      assertEquals(10, token0.kind);
      assertEquals((-1), token0.beginColumn);
      assertEquals((-548), token0.endLine);
      assertEquals((-1), token0.endColumn);
      assertEquals((-548), simpleCharStream0.getEndLine());
      assertEquals((-1), simpleCharStream0.getColumn());
      assertEquals((-1), simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.getEndColumn());
      assertEquals((-548), simpleCharStream0.getLine());
      assertEquals((-548), simpleCharStream0.getBeginLine());
      assertEquals("-", token0.toString());
      assertNotNull(token0);
      
      xPathParserTokenManager0.ReInit(simpleCharStream0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-548), simpleCharStream0.getEndLine());
      assertEquals((-1), simpleCharStream0.getColumn());
      assertEquals((-1), simpleCharStream0.getBeginColumn());
      assertEquals((-1), simpleCharStream0.getEndColumn());
      assertEquals((-548), simpleCharStream0.getLine());
      assertEquals((-548), simpleCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.jjFillToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager((SimpleCharStream) null);
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.maxNextCharInd = (-2024);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.backup(4966);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-871), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-871), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -870
         //
         verifyException("org.apache.commons.jxpath.ri.parser.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.SwitchTo(0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo(80);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 80. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lang");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(71, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("lang", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("J~PYkl(6#pVo:");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.SwitchTo((-1387));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1387. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9?uuB7;{ceO");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, (byte)0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-128);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-39), (byte) (-128), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-39), (byte) (-128), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte) (-39), (byte) (-128), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\u0640\" (1600), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8ad8L>mj)*f\"V.lOj");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-103);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte) (-103), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte) (-103), (int) (byte)0);
      assertArrayEquals(new byte[] {(byte) (-53), (byte) (-103), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(7, byteArray0.length);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(7, byteArrayInputStream0.available());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -103, column 0.  Encountered: \"\\u02d9\" (729), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-128);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-39), (byte) (-128), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-39), (byte) (-128), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-39), (byte) (-128), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)117, (byte) (-39), (byte) (-128), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("u\u0640", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-67);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-39), (byte) (-67), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-39), (byte) (-67), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte) (-39), (byte) (-67), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte) (-39), (byte) (-67), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("\u067D", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lang");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)34;
      byteArray0[4] = (byte) (-122);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte) (-122), (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte) (-122), (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      simpleCharStream0.ReInit((InputStream) sequenceInputStream0, (int) (byte)34, (int) (byte)34);
      assertArrayEquals(new byte[] {(byte)34, (byte)0, (byte)0, (byte)0, (byte) (-122), (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, byteArray0.length);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(6, byteArrayInputStream0.available());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 34, column 40.  Encountered: <EOF> after : \"\\\"\\ufffd\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-125);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)66, (byte) (-125), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)66, (byte) (-125), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(dataInputStream0, (-4164), (-873), 105);
      assertArrayEquals(new byte[] {(byte)66, (byte) (-125), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)66, (byte) (-125), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)66, (byte) (-125), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-873), token0.endColumn);
      assertEquals((-4164), token0.beginLine);
      assertEquals((-873), token0.beginColumn);
      assertEquals((-4164), token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(5, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-4164), simpleCharStream0.getEndLine());
      assertEquals((-873), simpleCharStream0.getBeginColumn());
      assertEquals((-4164), simpleCharStream0.getLine());
      assertEquals((-4164), simpleCharStream0.getBeginLine());
      assertEquals((-873), simpleCharStream0.getColumn());
      assertEquals((-873), simpleCharStream0.getEndColumn());
      assertEquals("B", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -4164, column -872.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-'ZxksbU=nHhe");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(10, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("-", token0.toString());
      assertNotNull(token0);
      
      stringReader0.reset();
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(14, simpleCharStream0.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(18, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(15, token1.endColumn);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(15, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(15, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("'ZxksbU=nHhe-'", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"1f\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(18, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("\"1f\"", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3.>LB");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("3.", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-117);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)39, (byte) (-117), (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)39, (byte) (-117), (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)39, (byte) (-117), (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: <EOF> after : \"\\'\\ufffd\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("34]B$MW1X`f7q");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      xPathParserTokenManager0.jjround = (-1);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("3", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("namespace::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(10, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(40, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(11, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals("namespace::", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"namespace-uri\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(12, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(54, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(13, token0.endColumn);
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals("namespace-uri", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"substring-after\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(14, simpleCharStream0.bufpos);
      assertEquals(61, token0.kind);
      assertEquals(15, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(15, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(15, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("substring-after", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("namespacfe::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(9, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(10, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(10, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(10, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("namespacfe", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("string-length");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 122, 122);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(12, simpleCharStream0.bufpos);
      assertEquals(134, token0.endColumn);
      assertEquals(122, token0.beginLine);
      assertEquals(122, token0.beginColumn);
      assertEquals(122, token0.endLine);
      assertEquals(63, token0.kind);
      assertEquals(122, simpleCharStream0.getEndLine());
      assertEquals(134, simpleCharStream0.getColumn());
      assertEquals(122, simpleCharStream0.getBeginColumn());
      assertEquals(122, simpleCharStream0.getBeginLine());
      assertEquals(134, simpleCharStream0.getEndColumn());
      assertEquals(122, simpleCharStream0.getLine());
      assertEquals("string-length", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("boolean");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(7, token0.endColumn);
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("boolean", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("comment");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(33, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(7, token0.endColumn);
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("comment", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("normalize-space");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(14, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(64, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(15, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(15, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(15, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("normalize-space", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("position");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, simpleCharStream0.bufpos);
      assertEquals(8, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(49, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("position", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(69, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals("false", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("format-number");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(12, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(77, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(13, token0.endColumn);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals("format-number", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("null");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(70, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(4, token0.endColumn);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals("null", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(68, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("true", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("text");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(32, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("text", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("self::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(35, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(6, token0.endColumn);
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("self::", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"processing-instruction\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(21, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(22, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(34, token0.kind);
      assertEquals(22, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(22, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("processing-instruction", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("number");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(72, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(6, token0.endColumn);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("number", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("not");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(67, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals("not", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("sum");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(3, token0.endColumn);
      assertEquals(73, token0.kind);
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("sum", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("round");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(76, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(5, token0.endColumn);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("round", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("attribute::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(10, simpleCharStream0.bufpos);
      assertEquals(11, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(39, token0.kind);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(11, simpleCharStream0.getColumn());
      assertEquals(11, simpleCharStream0.getEndColumn());
      assertEquals("attribute::", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("susing");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals("susing", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("following-sibling::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(18, simpleCharStream0.bufpos);
      assertEquals(19, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(45, token0.kind);
      assertEquals(19, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(19, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("following-sibling::", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ang");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("ang", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nae");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("nae", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ancestor::");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(9, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(38, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(10, token0.endColumn);
      assertEquals(10, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(10, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("ancestor::", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("laag");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(4, token0.endColumn);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals("laag", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(58, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(59, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(59, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(59, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"id\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(51, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("id", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<=");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(14, token0.kind);
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("<=", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">=");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(16, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(">=", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)47, 124, 124);
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(7, token0.kind);
      assertEquals(47, token0.endLine);
      assertEquals(125, token0.endColumn);
      assertEquals(47, token0.beginLine);
      assertEquals(124, token0.beginColumn);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(47, simpleCharStream0.getBeginLine());
      assertEquals(47, simpleCharStream0.getEndLine());
      assertEquals(125, simpleCharStream0.getEndColumn());
      assertEquals(47, simpleCharStream0.getLine());
      assertEquals(125, simpleCharStream0.getColumn());
      assertEquals(124, simpleCharStream0.getBeginColumn());
      assertEquals("//", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)46, (byte)46, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)46, 46, (byte)46);
      assertArrayEquals(new byte[] {(byte)46, (byte)46, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)46, (byte)46, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)46, (byte)46, (byte)0}, byteArray0);
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(46, token0.beginColumn);
      assertEquals(46, token0.beginLine);
      assertEquals(47, token0.endColumn);
      assertEquals(83, token0.kind);
      assertEquals(46, token0.endLine);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(47, simpleCharStream0.getColumn());
      assertEquals(46, simpleCharStream0.getEndLine());
      assertEquals(47, simpleCharStream0.getEndColumn());
      assertEquals(46, simpleCharStream0.getBeginLine());
      assertEquals(46, simpleCharStream0.getBeginColumn());
      assertEquals(46, simpleCharStream0.getLine());
      assertEquals("..", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("shK-Y");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1542, 28);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(28, token0.beginColumn);
      assertEquals(1542, token0.beginLine);
      assertEquals(1542, token0.endLine);
      assertEquals(32, token0.endColumn);
      assertEquals(1542, simpleCharStream0.getEndLine());
      assertEquals(32, simpleCharStream0.getEndColumn());
      assertEquals(32, simpleCharStream0.getColumn());
      assertEquals(1542, simpleCharStream0.getLine());
      assertEquals(28, simpleCharStream0.getBeginColumn());
      assertEquals(1542, simpleCharStream0.getBeginLine());
      assertEquals("shK-Y", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8ad8L>mj)*f\"V.lOj");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("8", token0.toString());
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals("ad8L", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!=");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (byte)16, (byte)16);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(12, token0.kind);
      assertEquals(16, token0.beginLine);
      assertEquals(16, token0.endLine);
      assertEquals(17, token0.endColumn);
      assertEquals(16, token0.beginColumn);
      assertEquals(16, simpleCharStream0.getBeginLine());
      assertEquals(16, simpleCharStream0.getLine());
      assertEquals(17, simpleCharStream0.getEndColumn());
      assertEquals(17, simpleCharStream0.getColumn());
      assertEquals(16, simpleCharStream0.getBeginColumn());
      assertEquals(16, simpleCharStream0.getEndLine());
      assertEquals("!=", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a/|+");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("a", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ro.b~7[)6pvJ");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals('r', char0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(4, token0.endColumn);
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("o.b", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (byte)46, (byte)46, (byte)46);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 46, column 46.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, 116, 2, (byte)61);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)122, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(116, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(2, token0.beginColumn);
      assertEquals(116, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(116, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(116, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(116, simpleCharStream0.getBeginLine());
      assertEquals("z", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("y", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x]4dm\"^t T$<");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-463), 2048, 112);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(2048, token0.beginColumn);
      assertEquals((-463), token0.beginLine);
      assertEquals((-463), token0.endLine);
      assertEquals(2048, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(2048, simpleCharStream0.getBeginColumn());
      assertEquals(2048, simpleCharStream0.getEndColumn());
      assertEquals((-463), simpleCharStream0.getBeginLine());
      assertEquals((-463), simpleCharStream0.getLine());
      assertEquals(2048, simpleCharStream0.getColumn());
      assertEquals((-463), simpleCharStream0.getEndLine());
      assertEquals("x", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vcWPfs$D,O.[rG");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("vcWPfs", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("r,J;3k+PHD=/");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("r", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q,~6LgdZd%F)s#1Q");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("q", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("following-sibling::");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(102, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(15, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(16, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(16, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(16, simpleCharStream0.getColumn());
      assertEquals("ollowing-sibling", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m{c\"_=V2FjC");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("m", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"{\" (123), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("key");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(52, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("key", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)106;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)106, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)106, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)106, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)106, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("j", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 253, (-1));
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-1), token0.endColumn);
      assertEquals(253, token0.endLine);
      assertEquals((-1), token0.beginColumn);
      assertEquals(253, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals((-1), simpleCharStream0.getEndColumn());
      assertEquals(253, simpleCharStream0.getBeginLine());
      assertEquals(253, simpleCharStream0.getLine());
      assertEquals(253, simpleCharStream0.getEndLine());
      assertEquals((-1), simpleCharStream0.getColumn());
      assertEquals((-1), simpleCharStream0.getBeginColumn());
      assertEquals("h", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("gRYR8[RJh/Tpm[dI=0");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("gRYR8", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ec`Ho-3?'K|y_lP");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("ec", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_)MyD0|X tkH7QP8UZ!");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("_", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U^2BP6&8TQ'an");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("U", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"^\" (94), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]c4lBvs]\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(85, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("]", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z{X1+]DsTTnBdx");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("Z", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y6})h^8");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("Y6", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XR.d)Ch:de-");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(4, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("XR.d", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("WtGke9G%%:6e~~`&");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(7, token0.endColumn);
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals("WtGke9G", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("VbhXD[");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(5, token0.endColumn);
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("VbhXD", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)84, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte) (-101), 46, 19);
      assertArrayEquals(new byte[] {(byte)84, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)84, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)84, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-101), token0.endLine);
      assertEquals((-101), token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(46, token0.beginColumn);
      assertEquals(46, token0.endColumn);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-101), simpleCharStream0.getBeginLine());
      assertEquals((-101), simpleCharStream0.getLine());
      assertEquals(46, simpleCharStream0.getEndColumn());
      assertEquals(46, simpleCharStream0.getColumn());
      assertEquals(46, simpleCharStream0.getBeginColumn());
      assertEquals((-101), simpleCharStream0.getEndLine());
      assertEquals("T", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)81;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)81, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)81, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)81, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)81, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("Q", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PVhY3W#");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("PVhY3W", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("OG\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("OG", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">M");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(15, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(">", token0.toString());
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals("M", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<Literal>");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(13, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("<", token0.toString());
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(7, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(8, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(8, simpleCharStream0.getEndColumn());
      assertEquals("Literal", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("J~PYkl(6#pVo:");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("J", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("INPQC/XeMG1");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(5, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("INPQC", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("H", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":GY(OXZ!_;-3v!+g");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(79, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(":", token0.toString());
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(78, token1.kind);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("GY", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DEFAULT");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      int int0 = stringReader0.read();
      assertEquals(68, int0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("EFAULT", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DEFAULT");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(7, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("DEFAULT", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C.");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("C.", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AF=");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("AF", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S6HDzhuIf@NKP07[q");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(8, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(9, token0.endColumn);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(9, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(9, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("S6HDzhuIf", token0.toString());
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(9, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(86, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(10, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(10, token1.beginColumn);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(10, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(10, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(10, simpleCharStream0.getColumn());
      assertEquals("@", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?GcLi");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"?\" (63), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">=");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(62, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(11, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals("=", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("D;E; OJeg$E7");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(68, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \";\" (59), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N:dC[otpHX(R.h{=");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("N", token0.toString());
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.endColumn);
      assertEquals(79, token1.kind);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(":", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9wR:\"}tNrn[DI-");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("9", token0.toString());
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals("wR", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8d8L>mLj)*f\"V.lOj");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals("8", token0.toString());
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(4, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(78, token1.kind);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals("d8L", token1.toString());
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(5, token2.beginColumn);
      assertEquals(15, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(5, token2.endColumn);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(">", token2.toString());
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)55, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)55, (byte)55);
      assertArrayEquals(new byte[] {(byte)55, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)55, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)55, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(55, token0.endColumn);
      assertEquals(55, token0.endLine);
      assertEquals(55, token0.beginLine);
      assertEquals(20, token0.kind);
      assertEquals(55, token0.beginColumn);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(55, simpleCharStream0.getEndLine());
      assertEquals(55, simpleCharStream0.getBeginLine());
      assertEquals(55, simpleCharStream0.getLine());
      assertEquals(55, simpleCharStream0.getBeginColumn());
      assertEquals(55, simpleCharStream0.getColumn());
      assertEquals(55, simpleCharStream0.getEndColumn());
      assertEquals("7", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6Q4/)wpnM%0<");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("6", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)53, 3561, (byte)53);
      assertArrayEquals(new byte[] {(byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)53, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3561, token0.endColumn);
      assertEquals(3561, token0.beginColumn);
      assertEquals(53, token0.endLine);
      assertEquals(53, token0.beginLine);
      assertEquals(20, token0.kind);
      assertEquals(6, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(53, simpleCharStream0.getBeginLine());
      assertEquals(3561, simpleCharStream0.getBeginColumn());
      assertEquals(53, simpleCharStream0.getLine());
      assertEquals(53, simpleCharStream0.getEndLine());
      assertEquals(3561, simpleCharStream0.getColumn());
      assertEquals(3561, simpleCharStream0.getEndColumn());
      assertEquals("5", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R)4FRiomle\"'");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("R", token0.toString());
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(81, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(")", token1.toString());
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(3, token2.beginColumn);
      assertEquals(3, token2.endColumn);
      assertEquals(20, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("4", token2.toString());
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader("34]B$MW1X`f7q");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals("34", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2\"QaxJ{I");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("2", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1~nM");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(20, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("1", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S 00hKI._mb");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("S", token0.toString());
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(3, token1.beginColumn);
      assertEquals(4, token1.endColumn);
      assertEquals(20, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals("00", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(87, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(",", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">*iu4!");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals('>', char0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(88, token0.kind);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("*", token0.toString());
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, token1.endColumn);
      assertEquals(3, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(78, token1.kind);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("iu4", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(RP+qy");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 253, (-1));
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), token0.beginColumn);
      assertEquals((-1), token0.endColumn);
      assertEquals(253, token0.endLine);
      assertEquals(80, token0.kind);
      assertEquals(253, token0.beginLine);
      assertEquals((-1), simpleCharStream0.getEndColumn());
      assertEquals(253, simpleCharStream0.getBeginLine());
      assertEquals(253, simpleCharStream0.getLine());
      assertEquals(253, simpleCharStream0.getEndLine());
      assertEquals((-1), simpleCharStream0.getColumn());
      assertEquals((-1), simpleCharStream0.getBeginColumn());
      assertEquals("(", token0.toString());
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(253, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(253, token1.beginLine);
      assertEquals(78, token1.kind);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(253, simpleCharStream0.getBeginLine());
      assertEquals(253, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(253, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals("RP", token1.toString());
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(2, token2.beginColumn);
      assertEquals(2, token2.endColumn);
      assertEquals(253, token2.endLine);
      assertEquals(253, token2.beginLine);
      assertEquals(9, token2.kind);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(253, simpleCharStream0.getBeginLine());
      assertEquals(253, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(253, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals("+", token2.toString());
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KwjROwDgIURz&/U");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (byte)47, 159, 159);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(11, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(159, token0.beginColumn);
      assertEquals(170, token0.endColumn);
      assertEquals(47, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(47, token0.endLine);
      assertEquals(47, simpleCharStream0.getEndLine());
      assertEquals(170, simpleCharStream0.getEndColumn());
      assertEquals(159, simpleCharStream0.getBeginColumn());
      assertEquals(47, simpleCharStream0.getLine());
      assertEquals(170, simpleCharStream0.getColumn());
      assertEquals(47, simpleCharStream0.getBeginLine());
      assertEquals("KwjROwDgIURz", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 47, column 171.  Encountered: \"&\" (38), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Fg%]9?4WvUL7`+");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("Fg", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"%\" (37), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$nay|E");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(17, token0.kind);
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("$", token0.toString());
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(2, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals("nay", token1.toString());
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(5, token2.endColumn);
      assertEquals(8, token2.kind);
      assertEquals(5, token2.beginColumn);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getBeginColumn());
      assertEquals("|", token2.toString());
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t#[NF&|");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("t", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UKf5!pCR^?z3.KA{");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (byte)16, (-4670));
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(78, token0.kind);
      assertEquals((-4667), token0.endColumn);
      assertEquals(16, token0.endLine);
      assertEquals(16, token0.beginLine);
      assertEquals((-4670), token0.beginColumn);
      assertEquals((-4667), simpleCharStream0.getColumn());
      assertEquals((-4670), simpleCharStream0.getBeginColumn());
      assertEquals(16, simpleCharStream0.getEndLine());
      assertEquals((-4667), simpleCharStream0.getEndColumn());
      assertEquals(16, simpleCharStream0.getLine());
      assertEquals(16, simpleCharStream0.getBeginLine());
      assertEquals("UKf5", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 16, column -4665.  Encountered: \"p\" (112), after : \"!\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"substring\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(8, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(9, token0.endColumn);
      assertEquals(62, token0.kind);
      assertEquals(9, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(9, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("substring", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"namespkce-uri\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(12, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(13, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(78, token0.kind);
      assertEquals(13, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(13, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("namespkce-uri", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("string");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(6, token0.endColumn);
      assertEquals(56, token0.kind);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals("string", token0.toString());
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.jjFillToken();
      assertEquals(5, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(56, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals("string", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringReader stringReader0 = new StringReader("texlt");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals("texlt", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringReader stringReader0 = new StringReader("string");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(115, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(4, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(5, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(5, simpleCharStream0.getEndColumn());
      assertEquals("tring", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)46;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (byte)46, (byte)46, (byte)46);
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      int int0 = pushbackInputStream0.read();
      assertEquals(0, int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(8, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertArrayEquals(new byte[] {(byte)0, (byte)46, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(46, token0.beginLine);
      assertEquals(46, token0.beginColumn);
      assertEquals(82, token0.kind);
      assertEquals(46, token0.endColumn);
      assertEquals(46, token0.endLine);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(46, simpleCharStream0.getColumn());
      assertEquals(46, simpleCharStream0.getBeginLine());
      assertEquals(46, simpleCharStream0.getEndColumn());
      assertEquals(46, simpleCharStream0.getEndLine());
      assertEquals(46, simpleCharStream0.getBeginColumn());
      assertEquals(46, simpleCharStream0.getLine());
      assertEquals(".", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringReader stringReader0 = new StringReader("namespace|uri");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(8, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(78, token0.kind);
      assertEquals(9, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(9, simpleCharStream0.getColumn());
      assertEquals(9, simpleCharStream0.getEndColumn());
      assertEquals("namespace", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringReader stringReader0 = new StringReader("boolea(n");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(5, simpleCharStream0.bufpos);
      assertEquals(6, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(6, simpleCharStream0.getEndColumn());
      assertEquals(6, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("boolea", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.ReInit(simpleCharStream0, 1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader("commeBt");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(7, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(7, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(7, simpleCharStream0.getEndColumn());
      assertEquals("commeBt", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader("name");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(3, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(4, token0.endColumn);
      assertEquals(55, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals("name", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lan)");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      int int0 = stringReader0.read();
      assertEquals(108, int0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(78, token0.kind);
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals("an", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cu<-");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("cu", token0.toString());
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(13, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.beginColumn);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("<", token1.toString());
      assertNotNull(token1);
      
      Token token2 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(1, token2.beginLine);
      assertEquals(4, token2.beginColumn);
      assertEquals(10, token2.kind);
      assertEquals(4, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("-", token2.toString());
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lan)");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(3, token0.endColumn);
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals("lan", token0.toString());
      assertNotNull(token0);
      
      Token token1 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(3, simpleCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(81, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(4, token1.beginColumn);
      assertEquals(4, token1.endColumn);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(4, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndLine());
      assertEquals(4, simpleCharStream0.getEndColumn());
      assertEquals(4, simpleCharStream0.getBeginColumn());
      assertEquals(1, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getLine());
      assertEquals(")", token1.toString());
      assertNotNull(token1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"namespac-uri\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1829, 34, 1829);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(xPathParserTokenManager0);
      
      Token token0 = xPathParserTokenManager0.getNextToken();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(11, simpleCharStream0.bufpos);
      assertEquals(1829, token0.beginLine);
      assertEquals(34, token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(1829, token0.endLine);
      assertEquals(45, token0.endColumn);
      assertEquals(1829, simpleCharStream0.getEndLine());
      assertEquals(45, simpleCharStream0.getColumn());
      assertEquals(1829, simpleCharStream0.getBeginLine());
      assertEquals(45, simpleCharStream0.getEndColumn());
      assertEquals(1829, simpleCharStream0.getLine());
      assertEquals(34, simpleCharStream0.getBeginColumn());
      assertEquals("namespac-uri", token0.toString());
      assertNotNull(token0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\f\"");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      // Undeclared exception!
      try { 
        xPathParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bo>LB");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = null;
      try {
        xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0, 86);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 86. State unchanged.
         //
         verifyException("org.apache.commons.jxpath.ri.parser.XPathParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lang");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      XPathParserTokenManager xPathParserTokenManager0 = new XPathParserTokenManager(simpleCharStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(xPathParserTokenManager0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(xPathParserTokenManager0.debugStream, false);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(mockPrintStream0);
      
      xPathParserTokenManager0.setDebugStream(mockPrintStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
  }
}
