/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 22:36:59 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<Map<Object, Object>, Map<Object, Map<Object, String>>> hashMap1 = new HashMap<Map<Object, Object>, Map<Object, Map<Object, String>>>();
      HashMap<Object, Map<Object, String>> hashMap2 = new HashMap<Object, Map<Object, String>>();
      hashMap1.put(hashMap0, hashMap2);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, Object>, Object, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Object, Map<Object, String>>(hashMap1, class0);
      HashMap<Object, Object> hashMap3 = new HashMap<Object, Object>();
      doubleKeyMap0.remove((Map<Object, Object>) hashMap0, (Object) hashMap3);
      assertTrue(hashMap1.isEmpty());
      assertEquals(0, hashMap1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>(class0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<String, String, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<Object, Object>>();
      DoubleKeyMap<HashMap<Integer, Integer>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<Integer, Integer>, Object, Object>();
      Map<Object, Object> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put("", "3T%d9;_vqYJ|T", map0);
      Map<String, Map<Object, Object>> map1 = doubleKeyMap0.remove("");
      assertFalse(map1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<String, HashMap<Integer, Integer>, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Integer, Integer>, HashMap<String, Object>>();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      HashMap<String, Object> hashMap1 = doubleKeyMap0.remove((String) null, hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, Map<Object, String>> hashMap0 = new HashMap<Integer, Map<Object, String>>();
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>(hashMap0);
      Map<Integer, Map<String, Integer>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Integer>(map0, class0);
      Map<String, Integer> map1 = doubleKeyMap1.remove((Integer) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      Map<Integer, Map<String, String>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, String, String> doubleKeyMap1 = new DoubleKeyMap<Integer, String, String>(map0);
      Map<String, Map<String, Integer>> map1 = doubleKeyMap1.newMap();
      Integer integer0 = new Integer(0);
      HashMap<Integer, Map<Object, Object>> hashMap0 = new HashMap<Integer, Map<Object, Object>>();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Integer, Object, Object>(hashMap0);
      Object object0 = doubleKeyMap2.put(integer0, (Object) map1, (Object) doubleKeyMap1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DoubleKeyMap<String, String, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, String>>();
      Map<Integer, Map<Integer, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, Integer>(map0);
      Map<Integer, Integer> map1 = doubleKeyMap1.get(integer0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<String, String, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<Object, Object>>();
      DoubleKeyMap<HashMap<Integer, Integer>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<Integer, Integer>, Object, Object>();
      Map<Object, Object> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put("", "3T%d9;_vqYJ|T", map0);
      Map<Object, Object> map1 = doubleKeyMap0.remove("", "");
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<HashMap<String, Object>, Map<String, Integer>> hashMap0 = new HashMap<HashMap<String, Object>, Map<String, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, Object>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, Integer>(hashMap0, class0);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      hashMap0.put((HashMap<String, Object>) null, hashMap1);
      Integer integer0 = new Integer(582);
      Integer integer1 = doubleKeyMap0.put((HashMap<String, Object>) null, "KxAm:~i;1", integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Object, String, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, String, Map<Object, Object>>();
      Map<Object, Object> map0 = doubleKeyMap0.get((Object) "k=}<? Zo]2", "?p!Rl1zl*5?~^IE8Cl");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, String>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Integer, Object>((Map<HashMap<Object, String>, Map<Integer, Object>>) null);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Integer integer0 = new Integer(1);
      doubleKeyMap0.put(hashMap0, integer0, (Object) null);
      Object object0 = doubleKeyMap0.get(hashMap0, integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>();
      DoubleKeyMap<Object, Map<Object, Object>, Map<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Object, Object>, Map<Object, Object>>();
      Map<Object, Object> map0 = doubleKeyMap1.put((Object) doubleKeyMap0, (Map<Object, Object>) null, (Map<Object, Object>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, String>, Map<String, Object>, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, Map<String, Object>, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
