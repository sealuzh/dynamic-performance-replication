/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 21:28:07 GMT 2018
 */

package com.google.gson.stream;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JsonReader_ESTest extends JsonReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[0] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      jsonReader0.peeked = (-1259);
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"AG (X#0&O-");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 5102);
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      jsonReader0.peeked = 5102;
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'e';
      charArray0[1] = 'D';
      charArray0[2] = '@';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JsonReader jsonReader0 = null;
      try {
        jsonReader0 = new JsonReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in == null
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '=';
      charArray0[1] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      charArray0[1] = '\"';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      boolean boolean0 = jsonReader0.isLenient();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("./]\"xldfZKKRb=*Zf8");
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader1 = new StringReader("./]\"xldfZKKRb=*Zf8");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      jsonReader0.setLenient(false);
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("./]\"xldfZKKRb=*Zf8");
      StringReader stringReader1 = new StringReader("./]\"xldfZKKRb=*Zf8");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedReader pipedReader0 = new PipedReader();
      JsonReader jsonReader0 = new JsonReader(pipedReader0);
      jsonReader0.toString();
      try { 
        jsonReader0.peek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6%TiuZ~{[_");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader(",$oK7&G$7M");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*)KCxwLA");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      jsonReader1.close();
      // Undeclared exception!
      try { 
        jsonReader1.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was END_DOCUMENT at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k[wa Hf7oAm");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      jsonReader0.setLenient(true);
      jsonReader0.nextString();
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was BEGIN_ARRAY at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("lz$oo?QUcg");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader1);
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      jsonReader0.setLenient(true);
      jsonReader0.nextString();
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was END_DOCUMENT at line 1 column 11 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("./]\"xldfZKKRb=*Zf8");
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringReader0.reset();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UHV;");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Nt~/M. qTrq=q<|");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("END_DOCUMENT");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("./]\"8ldfZKKRb=(Zf8");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"G uz#0&O-");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"G uz#0&O-");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NUMBER");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)118;
      StringReader stringReader0 = new StringReader(":BzB");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"G uz#0&O-");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0);
      JsonReader jsonReader0 = new JsonReader(bufferedReader0);
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6%TiuZ~{[_");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("END_DOCUMENT");
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      jsonReader0.setLenient(true);
      jsonReader0.skipValue();
      MockFile mockFile0 = new MockFile("END_DOCUMENT", "END_DOCUMENT");
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("END_DOCUMENT");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("g[u;T7]V_RNQ2D");
      stringReader0.ready();
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jsonReader0.setLenient(true);
      MockFile mockFile0 = new MockFile("O", "BEGIN_ARRAY");
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6%TiuZ~{[_");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'{'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 1879);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'{'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_OBJECT but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"G uz#0&O-");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      assertNotNull(bufferedReader0);
      
      char[] charArray0 = new char[3];
      JsonReader jsonReader0 = new JsonReader(bufferedReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 11 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"AG (X#0&O-");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 12 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Fyl/vdwVx");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      assertNotNull(bufferedReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0);
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader0 = new JsonReader(bufferedReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      try { 
        jsonReader0.hasNext();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"G uz#0&O-");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"G uz#0&O-");
      assertFalse(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.getPath();
      assertNotNull(string0);
      assertFalse(jsonReader0.isLenient());
      assertEquals("$", string0);
      
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("\"AG (X#0&O-");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"AG (X#0&O-");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      jsonReader0.setLenient(false);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 12 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "\"AG (X#0&O-";
      StringReader stringReader0 = new StringReader("\"AG (X#0&O-");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      StringReader stringReader1 = new StringReader("\"AG (X#0&O-");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      try { 
        jsonReader1.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 12 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[5r,BWXlBk");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("[5r,BWXlBk");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected null but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6%TiuZ~{[_");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'{'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 1879);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'{'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected an int but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nhS%3nU*xiX5fy");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.doPeek();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'V';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 1, 1);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', 'V'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', 'V'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', 'V'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"G nL#0&8-");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"G nL#0&8-");
      assertFalse(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unterminated string at line 1 column 11 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"G uz#0&O-");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("6%TiuZ~{[_");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JsonReader jsonReader1 = new JsonReader(pushbackReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      boolean boolean0 = jsonReader1.hasNext();
      assertFalse(jsonReader1.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertTrue(boolean0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(jsonReader1, jsonReader0);
      
      // Undeclared exception!
      try { 
        jsonReader1.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k[wa Hf7oAm");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was STRING at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)70;
      StringReader stringReader0 = new StringReader("oK?(#~IK`;[|'[e+m");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      char[] charArray0 = new char[0];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean1 = charArrayReader0.markSupported();
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("&=B:hcL");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yG4#k,@2");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("6TiuZ{[_");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader1);
      assertNotNull(pushbackReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char[] charArray0 = new char[8];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      
      int int0 = stringReader1.read();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(54, int0);
      assertNotSame(stringReader1, stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6%TiuZ~{[_");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'{'}, charArray0);
      
      boolean boolean1 = charArrayReader0.markSupported();
      assertArrayEquals(new char[] {'{'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, '{');
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'{'}, charArray0);
      
      jsonReader0.peeked = 892;
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean2 = charArrayReader0.ready();
      assertArrayEquals(new char[] {'{'}, charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      long long0 = charArrayReader0.skip(0L);
      assertArrayEquals(new char[] {'{'}, charArray0);
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("'^");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      JsonReader jsonReader0 = new JsonReader(stringReader1);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      charArray0[1] = '/';
      charArray0[2] = 'i';
      charArray0[3] = '}';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 3, 3);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '/', 'i', '}', '\u0000'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = charArrayReader0.markSupported();
      assertArrayEquals(new char[] {'\u0000', '/', 'i', '}', '\u0000'}, charArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '/', 'i', '}', '\u0000'}, charArray0);
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m=2");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      assertEquals("m", string0);
      
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6%TiuZ~{[_");
      assertNotNull(stringReader0);
      
      MockFile mockFile0 = new MockFile("O(8|g=*}(S0v#2f{k!p");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("O(8|g=*}(S0v#2f{k!p", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertEquals("O(8|g=*}(S0v#2f{k!p", mockFile0.toString());
      assertFalse(mockFile0.exists());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertEquals("6%TiuZ~", string0);
      assertNotSame(jsonReader0, jsonReader1);
      
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.isLenient());
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertFalse(jsonReader2.equals((Object)jsonReader1));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(pipedReader0, 5100);
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.peeked = 5100;
      assertFalse(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      charArray0[0] = '%';
      charArray0[1] = '/';
      charArray0[3] = '/';
      charArray0[4] = 'o';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 3, 3);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'%', '/', '\u0000', '/', 'o'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'%', '/', '\u0000', '/', 'o'}, charArray0);
      
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      charArray0[3] = '%';
      charArray0[1] = '/';
      charArray0[3] = '/';
      charArray0[4] = 'T';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 3, 3);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '/', '\u0000', '/', 'T'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '/', '\u0000', '/', 'T'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '/', '\u0000', '/', 'T'}, charArray0);
      
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6%TiuZ~{[_");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'{'}, charArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = charArrayReader0.ready();
      assertArrayEquals(new char[] {'{'}, charArray0);
      assertTrue(boolean0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'{'}, charArray0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      // Undeclared exception!
      try { 
        jsonReader1.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was BEGIN_OBJECT at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6%TiuZ~{[_");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '';
      charArray0[1] = '\u001A';
      charArray0[2] = 'G';
      charArray0[3] = '\u001A';
      charArray0[4] = '\u001A';
      charArray0[5] = '\u001A';
      charArray0[6] = '\u001A';
      charArray0[7] = '{';
      int int0 = jsonReader0.doPeek();
      assertTrue(jsonReader0.isLenient());
      assertEquals(10, int0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)4, 3);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertNotNull(inputStreamReader0);
      assertEquals(3, byteArrayInputStream0.available());
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertNotNull(jsonReader0);
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertEquals(3, byteArrayInputStream0.available());
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(jsonReader0.isLenient());
      assertEquals("\u0000\u0000\u0000", string0);
      
      int int0 = jsonReader0.doPeek();
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(jsonReader0.isLenient());
      assertEquals(17, int0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a long but was END_DOCUMENT at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"G uz#0&O-");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      PushbackReader pushbackReader1 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader1);
      assertFalse(pushbackReader1.equals((Object)pushbackReader0));
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      charArray0[1] = '5';
      int int1 = pushbackReader0.read(charArray0);
      assertArrayEquals(new char[] {'\"', 'G'}, charArray0);
      assertFalse(pushbackReader0.equals((Object)pushbackReader1));
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      assertNotSame(pushbackReader0, pushbackReader1);
      
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"AG (X#0&O-");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"AG (X#0&O-");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      boolean boolean0 = jsonReader0.hasNext();
      assertFalse(jsonReader0.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(boolean0);
      assertNotSame(stringReader0, stringReader1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(jsonReader0, jsonReader1);
      
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      charArray0[0] = '\'';
      charArray0[1] = '/';
      charArray0[2] = 'i';
      charArray0[3] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 3, 3);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '/', 'i', 't', '\u0000'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = charArrayReader0.markSupported();
      assertArrayEquals(new char[] {'\'', '/', 'i', 't', '\u0000'}, charArray0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\'', '/', 'i', 't', '\u0000'}, charArray0);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      charArray0[1] = '/';
      charArray0[2] = 'i';
      charArray0[3] = 't';
      charArray0[4] = '}';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 3, 3);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '/', 'i', 't', '}'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '/', 'i', 't', '}'}, charArray0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '/', 'i', 't', '}'}, charArray0);
      
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'\u0000', '/', 'i', 't', '}'}, charArray0);
      assertEquals("t", string0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'\u0000', '/', 'i', 't', '}'}, charArray0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      try { 
        jsonReader1.doPeek();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("J?Uc\"R:iid");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      StringReader stringReader1 = new StringReader("J?Uc\"R:iid");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      long long0 = stringReader1.skip(9);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(9L, long0);
      assertNotSame(stringReader1, stringReader0);
      
      pushbackReader0.unread(9);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[0];
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, int0);
      assertNotSame(stringReader0, stringReader1);
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = '#';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'#', '#'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'#', '#'}, charArray0);
      
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"AG (X#0&O-");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      StringReader stringReader1 = new StringReader("\"AG (X#0&O-");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      boolean boolean0 = stringReader1.markSupported();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(boolean0);
      assertNotSame(stringReader1, stringReader0);
      
      boolean boolean1 = jsonReader0.hasNext();
      assertFalse(jsonReader0.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(jsonReader0, jsonReader1);
      
      JsonReader jsonReader2 = new JsonReader(stringReader1);
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      
      jsonReader2.close();
      assertFalse(jsonReader2.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(jsonReader2, jsonReader0);
      assertNotSame(jsonReader2, jsonReader1);
      
      JsonReader jsonReader3 = new JsonReader(stringReader0);
      assertNotNull(jsonReader3);
      assertFalse(jsonReader3.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader3.equals((Object)jsonReader0));
      assertFalse(jsonReader3.equals((Object)jsonReader2));
      assertFalse(jsonReader3.equals((Object)jsonReader1));
      
      String string0 = jsonReader3.toString();
      assertNotNull(string0);
      assertFalse(jsonReader3.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader3.equals((Object)jsonReader0));
      assertFalse(jsonReader3.equals((Object)jsonReader2));
      assertFalse(jsonReader3.equals((Object)jsonReader1));
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(jsonReader3, jsonReader0);
      assertNotSame(jsonReader3, jsonReader2);
      assertNotSame(jsonReader3, jsonReader1);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was STRING at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6%TiuZ~{[_");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '{';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'6'}, charArray0);
      assertEquals(1, int0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'6'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, '6');
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'6'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was NUMBER at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"AG (X#0&O-");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      StringReader stringReader1 = new StringReader("\"AG (X#0&O-");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      ByteBuffer byteBuffer0 = charset0.encode("Ge]|*JUA=");
      assertNotNull(byteBuffer0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=10 cap=10]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(10, byteBuffer0.remaining());
      assertEquals(10, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(10, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(10, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=10 lim=10 cap=10]", byteBuffer0.toString());
      assertEquals(10, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(10, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("Ge]|*JUA=", charBuffer0.toString());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(10, charBuffer0.capacity());
      assertEquals(10, charBuffer0.length());
      
      int int0 = stringReader0.read(charBuffer0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(10, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=10 lim=10 cap=10]", byteBuffer0.toString());
      assertEquals(10, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(10, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(10, charBuffer0.position());
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(10, charBuffer0.capacity());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(10, int0);
      assertNotSame(stringReader0, stringReader1);
      
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("g[u;T7]V_RNQ2D");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      MockFile mockFile0 = new MockFile("g[u;T7]V_RNQ2D", "BEGIN_ARRAY");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/3_gson/g[u;T7]V_RNQ2D/BEGIN_ARRAY", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.exists());
      assertEquals("BEGIN_ARRAY", mockFile0.getName());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/3_gson/g[u;T7]V_RNQ2D", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a double but was BEGIN_ARRAY at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      charArray0[0] = '5';
      charArray0[1] = '+';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'5', '+', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'5', '+', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      MockFile mockFile0 = new MockFile("CTsl3& VuquL']", "CTsl3& VuquL']");
      assertNotNull(mockFile0);
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/3_gson/CTsl3& VuquL']/CTsl3& VuquL']", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/3_gson/CTsl3& VuquL']", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("CTsl3& VuquL']", mockFile0.getName());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'5', '+', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      try { 
        jsonReader1.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[19];
      charArray0[0] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[0] = '{';
      charArray0[1] = '{';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      jsonReader0.beginObject();
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'{', '{', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      try { 
        jsonReader0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 3 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[27];
      byteArray0[23] = (byte)18;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader("#!$nMb#67");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      jsonReader0.setLenient(false);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.peeked = (int) (byte)18;
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertFalse(jsonReader0.isLenient());
      
      MockFile mockFile0 = new MockFile((String) null, "`");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertEquals("`", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isHidden());
      assertEquals("`", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'E';
      charArray0[3] = 'E';
      charArray0[4] = 'P';
      charArray0[5] = 'E';
      charArray0[6] = 'P';
      charArray0[7] = 'E';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'P', 'P', 'E', 'E', 'P', 'E', 'P', 'E'}, charArray0);
      
      boolean boolean3 = charArrayReader0.markSupported();
      assertArrayEquals(new char[] {'P', 'P', 'E', 'E', 'P', 'E', 'P', 'E'}, charArray0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      boolean boolean4 = charArrayReader0.ready();
      assertArrayEquals(new char[] {'P', 'P', 'E', 'E', 'P', 'E', 'P', 'E'}, charArray0);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4);
      
      try { 
        jsonReader0.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      byteArray0[2] = (byte) (-99);
      byteArray0[23] = (byte)18;
      byteArray0[4] = (byte) (-99);
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-99);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, (byte)0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = '5';
      int int0 = byteArrayInputStream0.read();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'5', '5'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'5', '5'}, charArray0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'5', '5'}, charArray0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      long long0 = jsonReader1.nextLong();
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'5', '5'}, charArray0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertEquals(55L, long0);
      assertNotSame(jsonReader1, jsonReader0);
      
      try { 
        jsonReader0.nextNull();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)18}, byteArray0);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'5', '5', '5'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'5', '5', '5'}, charArray0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextName();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a name but was NUMBER at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)42;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)42;
      StringReader stringReader0 = new StringReader("*)KCxwLA");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotSame(jsonReader0, jsonReader1);
      
      int int0 = pushbackReader0.read();
      assertEquals(42, int0);
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotSame(jsonReader0, jsonReader1);
      
      try { 
        jsonReader1.nextLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k[wa Hf7oAm");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'j';
      charArray0[1] = 'g';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'k', '[', 'w', 'a', ' ', 'H', 'f'}, charArray0);
      assertEquals(7, int0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'k', '[', 'w', 'a', ' ', 'H', 'f'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, 7);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertArrayEquals(new char[] {'k', '[', 'w', 'a', ' ', 'H', 'f'}, charArray0);
      
      MockFile mockFile0 = new MockFile("", "");
      assertNotNull(mockFile0);
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'k', '[', 'w', 'a', ' ', 'H', 'f'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {'k', '[', 'w', 'a', ' ', 'H', 'f'}, charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {']'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {']'}, charArray0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {']'}, charArray0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      jsonReader1.peeked = 2;
      assertFalse(jsonReader1.isLenient());
      
      jsonReader1.setLenient(false);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {']'}, charArray0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotSame(jsonReader1, jsonReader0);
      
      // Undeclared exception!
      try { 
        jsonReader1.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was END_OBJECT at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      StringReader stringReader0 = new StringReader("g[u;T7]V_RNQ2D");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      boolean boolean4 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      JsonReader jsonReader2 = new JsonReader(pushbackReader0);
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.isLenient());
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      
      boolean boolean5 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      jsonReader2.setLenient(false);
      assertFalse(jsonReader2.isLenient());
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertNotSame(jsonReader2, jsonReader1);
      assertNotSame(jsonReader2, jsonReader0);
      
      int int0 = pushbackReader0.read();
      assertEquals(103, int0);
      
      try { 
        jsonReader2.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 2 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      StringReader stringReader0 = new StringReader("g[u;T7]V_RNQ2D");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      boolean boolean4 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.isLenient());
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      
      boolean boolean5 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5);
      
      jsonReader1.setLenient(true);
      assertTrue(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader2));
      assertNotSame(jsonReader1, jsonReader0);
      assertNotSame(jsonReader1, jsonReader2);
      
      jsonReader0.peeked = 7;
      assertFalse(jsonReader0.isLenient());
      
      int int0 = pushbackReader0.read();
      assertEquals(103, int0);
      
      jsonReader1.skipValue();
      assertTrue(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader2));
      assertNotSame(jsonReader1, jsonReader0);
      assertNotSame(jsonReader1, jsonReader2);
      
      // Undeclared exception!
      try { 
        jsonReader1.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-104);
      StringReader stringReader0 = new StringReader("[lUU");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      assertNotNull(bufferedReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JsonReader jsonReader0 = new JsonReader(bufferedReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotSame(jsonReader0, jsonReader1);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 5 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[3];
      StringReader stringReader0 = new StringReader("[5r,BWXlBk");
      assertNotNull(stringReader0);
      
      stringReader0.mark(992);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      assertNotNull(pushbackReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 11 path $[0]
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)90;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-21), (byte)121, (byte)78, (byte)94, (byte)90}, byteArray0);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      StringReader stringReader0 = new StringReader("g[u;T7]V_RNQ2D");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      boolean boolean5 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      int int0 = pushbackReader0.read();
      assertEquals(103, int0);
      
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.isLenient());
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      
      boolean boolean6 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6);
      
      jsonReader1.setLenient(true);
      assertTrue(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader2));
      assertNotSame(jsonReader1, jsonReader0);
      assertNotSame(jsonReader1, jsonReader2);
      
      jsonReader0.peeked = 7;
      assertFalse(jsonReader0.isLenient());
      
      int int1 = pushbackReader0.read();
      assertFalse(int1 == int0);
      assertEquals(91, int1);
      
      jsonReader1.skipValue();
      assertTrue(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader2));
      assertNotSame(jsonReader1, jsonReader0);
      assertNotSame(jsonReader1, jsonReader2);
      
      try { 
        jsonReader1.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 3 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^vgd)+]Q");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      StringReader stringReader1 = new StringReader("^vgd)+]Q");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean1 = stringReader0.ready();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(stringReader0, stringReader1);
      
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      
      jsonReader2.setLenient(true);
      assertTrue(jsonReader2.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(jsonReader2, jsonReader0);
      assertNotSame(jsonReader2, jsonReader1);
      
      jsonReader2.skipValue();
      assertTrue(jsonReader2.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(jsonReader2, jsonReader0);
      assertNotSame(jsonReader2, jsonReader1);
      
      MockFile mockFile0 = new MockFile((String) null, "^vgd)+]Q");
      assertNotNull(mockFile0);
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canWrite());
      assertEquals("^vgd)+]Q", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("^vgd)+]Q", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      
      try { 
        jsonReader2.nextDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 8 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"AG (X#0&O-");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      String string0 = jsonReader0.getPath();
      assertNotNull(string0);
      assertFalse(jsonReader0.isLenient());
      assertEquals("$", string0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      int int0 = pushbackReader0.read();
      assertEquals(34, int0);
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expected name");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.beginArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_ARRAY but was STRING at line 1 column 10 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"AG (X#0&O-");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      JsonReader jsonReader1 = new JsonReader(pushbackReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)43;
      byteArray0[8] = (byte)42;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)20, (byte)20, (byte)46, (byte)58, (byte)58, (byte)20, (byte)43, (byte)43, (byte)42}, byteArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      jsonReader1.setLenient(true);
      assertTrue(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotSame(jsonReader1, jsonReader0);
      
      boolean boolean5 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"AG (X#0&O-");
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5);
      
      String string0 = jsonReader0.toString();
      assertNotNull(string0);
      assertFalse(jsonReader0.isLenient());
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertEquals("JsonReader at line 1 column 1 path $", string0);
      assertNotSame(jsonReader0, jsonReader1);
      
      // Undeclared exception!
      try { 
        jsonReader1.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ']';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {']'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {']'}, charArray0);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {']'}, charArray0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      jsonReader1.peeked = 11;
      assertFalse(jsonReader1.isLenient());
      
      jsonReader1.setLenient(false);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {']'}, charArray0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotSame(jsonReader1, jsonReader0);
      
      String string0 = jsonReader1.nextString();
      assertNull(string0);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {']'}, charArray0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotSame(jsonReader1, jsonReader0);
      
      String string1 = jsonReader0.getPath();
      assertNotNull(string1);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {']'}, charArray0);
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertEquals("$", string1);
      assertNotSame(jsonReader0, jsonReader1);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      assertNotNull(pushbackReader0);
      assertArrayEquals(new char[] {']'}, charArray0);
      
      pushbackReader0.unread(1766);
      assertArrayEquals(new char[] {']'}, charArray0);
      
      JsonReader jsonReader2 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.isLenient());
      assertArrayEquals(new char[] {']'}, charArray0);
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      
      JsonReader jsonReader3 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader3);
      assertFalse(jsonReader3.isLenient());
      assertArrayEquals(new char[] {']'}, charArray0);
      assertFalse(jsonReader3.equals((Object)jsonReader0));
      assertFalse(jsonReader3.equals((Object)jsonReader2));
      assertFalse(jsonReader3.equals((Object)jsonReader1));
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {']'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader2);
      assertArrayEquals(new char[] {']'}, charArray0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      
      CharArrayReader charArrayReader3 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader3);
      assertArrayEquals(new char[] {']'}, charArray0);
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      
      boolean boolean1 = charArrayReader3.ready();
      assertArrayEquals(new char[] {']'}, charArray0);
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(charArrayReader3, charArrayReader0);
      assertNotSame(charArrayReader3, charArrayReader2);
      assertNotSame(charArrayReader3, charArrayReader1);
      
      try { 
        jsonReader2.endObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected value at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[5r,BWXlBk");
      assertNotNull(stringReader0);
      
      stringReader0.mark(980);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.hasNext();
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        jsonReader0.beginObject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected BEGIN_OBJECT but was BEGIN_ARRAY at line 1 column 2 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "6%TiuZ~{[_";
      StringReader stringReader0 = new StringReader("6%TiuZ~{[_");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6%TiuZ~{[_");
      assertFalse(boolean0);
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      MockFile mockFile0 = new MockFile("6%TiuZ~{[_", "6%TiuZ~{[_");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals("6%TiuZ~{[_", mockFile0.getName());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isFile());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/3_gson/6%TiuZ~{[_", mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/3_gson/6%TiuZ~{[_/6%TiuZ~{[_", mockFile0.toString());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected name at line 1 column 9 path $.
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NULL");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.nextString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a string but was NULL at line 1 column 5 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "Nt~/M. qTrq=q<|";
      StringReader stringReader0 = new StringReader("Nt~/M. qTrq=q<|");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      MockFile mockFile0 = new MockFile("Nt~/M. qTrq=q<|");
      assertNotNull(mockFile0);
      assertEquals("M. qTrq=q<|", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals("Nt~/M. qTrq=q<|", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("Nt~", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      String string1 = jsonReader0.toString();
      assertNotNull(string1);
      assertTrue(jsonReader0.isLenient());
      assertFalse(string1.equals((Object)string0));
      assertEquals("JsonReader at line 1 column 4 path $", string1);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      EvoSuiteFile evoSuiteFile0 = null;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, 1, 1);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'T', 'T', '\u0000'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'T', 'T', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertArrayEquals(new char[] {'T', 'T', '\u0000'}, charArray0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Use JsonReader.setLenient(true) to accept malformed JSON at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("84b<`,");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      MockFile mockFile0 = new MockFile("84b<`,", "84b<`,");
      assertNotNull(mockFile0);
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("84b<`,", mockFile0.getName());
      assertFalse(mockFile0.canExecute());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/3_gson/84b<`,", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/3_gson/84b<`,/84b<`,", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      MockFileReader mockFileReader0 = null;
      try {
        mockFileReader0 = new MockFileReader("84b<`,");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("H5q#qB!");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      jsonReader0.skipValue();
      assertTrue(jsonReader0.isLenient());
      
      // Undeclared exception!
      try { 
        jsonReader0.endArray();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected END_ARRAY but was END_DOCUMENT at line 1 column 8 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[35];
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)34;
      byteArray0[8] = (byte) (-104);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, (byte)21);
      assertNotNull(byteArrayInputStream0);
      assertEquals(21, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals(21, byteArrayInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(21, byteArrayInputStream0.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(sequenceInputStream0);
      assertNotNull(inputStreamReader0);
      assertEquals(21, byteArrayInputStream0.available());
      
      JsonReader jsonReader0 = new JsonReader(inputStreamReader0);
      assertNotNull(jsonReader0);
      assertEquals(21, byteArrayInputStream0.available());
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = inputStreamReader0.markSupported();
      assertEquals(21, byteArrayInputStream0.available());
      assertFalse(boolean0);
      
      jsonReader0.setLenient(true);
      assertEquals(21, byteArrayInputStream0.available());
      assertTrue(jsonReader0.isLenient());
      
      sequenceInputStream0.mark(3);
      assertEquals(21, byteArrayInputStream0.available());
      
      MockFile mockFile0 = new MockFile("Unterminated comment", "Y}hG86M,L");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals("Y}hG86M,L", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/3_gson/Unterminated comment/Y}hG86M,L", mockFile0.toString());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isHidden());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/3_gson/Unterminated comment", mockFile0.getParent());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      
      boolean boolean1 = sequenceInputStream0.markSupported();
      assertEquals(21, byteArrayInputStream0.available());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = pushbackInputStream0.markSupported();
      assertEquals(21, byteArrayInputStream0.available());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      byteArray0[20] = (byte) (-99);
      byteArray0[23] = (byte)18;
      byteArray0[4] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, (byte)0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 1055, 1055);
      assertNotNull(byteArrayInputStream1);
      assertEquals((-1027), byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      int int0 = byteArrayInputStream1.read(byteArray0);
      assertEquals((-1027), byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals((-1), int0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, 59, 123);
      assertNotNull(byteArrayInputStream2);
      assertEquals((-31), byteArrayInputStream2.available());
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      
      int int1 = byteArrayInputStream0.read(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream3);
      assertEquals(28, byteArrayInputStream3.available());
      assertFalse(byteArrayInputStream3.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream3.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream3.equals((Object)byteArrayInputStream0));
      
      byteArrayInputStream3.reset();
      assertEquals(28, byteArrayInputStream3.available());
      assertFalse(byteArrayInputStream3.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream3.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream3.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArrayInputStream3, byteArrayInputStream1);
      assertNotSame(byteArrayInputStream3, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream3, byteArrayInputStream0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'5', '5', '5'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertArrayEquals(new char[] {'5', '5', '5'}, charArray0);
      assertTrue(boolean0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'5', '5', '5'}, charArray0);
      
      int int2 = jsonReader0.nextInt();
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'5', '5', '5'}, charArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(555, int2);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      assertNotNull(pushbackReader0);
      assertArrayEquals(new char[] {'5', '5', '5'}, charArray0);
      
      JsonToken jsonToken0 = jsonReader0.peek();
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'5', '5', '5'}, charArray0);
      assertEquals(JsonToken.END_DOCUMENT, jsonToken0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      byteArray0[20] = (byte) (-99);
      byteArray0[23] = (byte)18;
      byteArray0[4] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, (byte)0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 1055, 1055);
      assertNotNull(byteArrayInputStream1);
      assertEquals((-1027), byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertEquals((-1), int0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)18;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      assertArrayEquals(new byte[] {(byte)18}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
      assertNotSame(byteArray1, byteArray0);
      
      int int1 = byteArrayInputStream0.read(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      byteArrayInputStream1.close();
      assertEquals((-1027), byteArrayInputStream1.available());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream2);
      assertEquals(28, byteArrayInputStream2.available());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      
      byteArrayInputStream2.reset();
      assertEquals(28, byteArrayInputStream2.available());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArrayInputStream2, byteArrayInputStream1);
      assertNotSame(byteArrayInputStream2, byteArrayInputStream0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'5', '5', '5'}, charArray0);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'5', '5', '5'}, charArray0);
      
      double double0 = jsonReader0.nextDouble();
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'5', '5', '5'}, charArray0);
      assertEquals(555.0, double0, 0.01);
      
      JsonReader jsonReader1 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertArrayEquals(new char[] {'5', '5', '5'}, charArray0);
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      try { 
        jsonReader1.nextName();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6%TiuZ~{[_");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      
      ByteBuffer byteBuffer0 = charset0.encode("%g~'w'3");
      assertNotNull(byteBuffer0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=7 cap=7]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(7, byteBuffer0.remaining());
      assertEquals(7, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(7, byteBuffer0.limit());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=7 lim=7 cap=7]", byteBuffer0.toString());
      assertEquals(7, byteBuffer0.limit());
      assertEquals(7, byteBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(7, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("%g~'w'3", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(7, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6%TiuZ~{[_");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = stringReader0.read(charBuffer0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=7 lim=7 cap=7]", byteBuffer0.toString());
      assertEquals(7, byteBuffer0.limit());
      assertEquals(7, byteBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(7, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(7, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(7, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(7, int0);
      
      jsonReader0.beginObject();
      assertTrue(jsonReader0.isLenient());
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      jsonReader0.close();
      assertTrue(jsonReader0.isLenient());
      
      String string0 = jsonReader0.getPath();
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      assertEquals("$", string0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // JsonReader is closed
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^vgd)+Q");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      StringReader stringReader1 = new StringReader("^vgd)+Q");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean1 = stringReader0.ready();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(stringReader0, stringReader1);
      
      JsonReader jsonReader1 = new JsonReader(stringReader1);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      
      jsonReader2.setLenient(true);
      assertTrue(jsonReader2.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(jsonReader2, jsonReader0);
      assertNotSame(jsonReader2, jsonReader1);
      
      jsonReader2.skipValue();
      assertTrue(jsonReader2.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(jsonReader2, jsonReader0);
      assertNotSame(jsonReader2, jsonReader1);
      
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      MockFile mockFile0 = new MockFile((String) null, "^vgd)+Q");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.canWrite());
      assertEquals("^vgd)+Q", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertEquals("^vgd)+Q", mockFile0.toString());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      
      stringReader0.reset();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      // Undeclared exception!
      try { 
        jsonReader2.nextDouble();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("84b<`,");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)91, (byte)91);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-85), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)6, (byte)6, (byte)91, (byte)91, (byte)6, (byte)91}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals((-85), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)6, (byte)6, (byte)91, (byte)91, (byte)6, (byte)91}, byteArray0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, pushbackInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals((-85), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)6, (byte)6, (byte)91, (byte)91, (byte)6, (byte)91}, byteArray0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertNotNull(inputStreamReader0);
      assertEquals((-85), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)6, (byte)6, (byte)91, (byte)91, (byte)6, (byte)91}, byteArray0);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotSame(jsonReader0, jsonReader1);
      
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertEquals("84b<`", string0);
      assertNotSame(jsonReader0, jsonReader1);
      
      jsonReader1.setLenient(true);
      assertTrue(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotSame(jsonReader1, jsonReader0);
      
      try { 
        jsonReader1.skipValue();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("J?Uc\"R:iid");
      assertNotNull(stringReader0);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      StringReader stringReader1 = new StringReader("J?Uc\"R:iid");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      long long0 = stringReader1.skip(9);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(9L, long0);
      assertNotSame(stringReader1, stringReader0);
      
      pushbackReader0.unread(9);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JsonReader jsonReader0 = new JsonReader(pushbackReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertTrue(jsonReader0.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals("J?Uc\"R", string0);
      assertNotSame(stringReader0, stringReader1);
      
      jsonReader0.setLenient(true);
      assertTrue(jsonReader0.isLenient());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      try { 
        jsonReader0.skipValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Expected value at line 1 column 8 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[5r,BWXlBk");
      assertNotNull(stringReader0);
      
      stringReader0.mark(980);
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean0 = jsonReader0.hasNext();
      assertFalse(jsonReader0.isLenient());
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'U', '<'}, charArray0);
      
      boolean boolean1 = charArrayReader0.ready();
      assertArrayEquals(new char[] {'U', '<'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      jsonReader0.beginArray();
      assertFalse(jsonReader0.isLenient());
      assertFalse(jsonReader0.equals((Object)jsonReader1));
      assertNotSame(jsonReader0, jsonReader1);
      
      try { 
        jsonReader1.peek();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // End of input at line 1 column 1 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[23] = (byte)18;
      byteArray0[4] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, (byte)0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 1055, 1055);
      assertNotNull(byteArrayInputStream1);
      assertEquals((-1027), byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      
      int int0 = byteArrayInputStream1.read(byteArray0);
      assertEquals((-1027), byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals((-1), int0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, 59, 123);
      assertNotNull(byteArrayInputStream2);
      assertEquals((-31), byteArrayInputStream2.available());
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      
      int int1 = byteArrayInputStream0.read(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream2);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream3);
      assertEquals(28, byteArrayInputStream3.available());
      assertFalse(byteArrayInputStream3.equals((Object)byteArrayInputStream2));
      assertFalse(byteArrayInputStream3.equals((Object)byteArrayInputStream0));
      assertFalse(byteArrayInputStream3.equals((Object)byteArrayInputStream1));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'5', '5', '5'}, charArray0);
      
      boolean boolean1 = charArrayReader0.ready();
      assertArrayEquals(new char[] {'5', '5', '5'}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JsonReader jsonReader0 = new JsonReader(charArrayReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'5', '5', '5'}, charArray0);
      
      String string0 = jsonReader0.nextString();
      assertNotNull(string0);
      assertFalse(jsonReader0.isLenient());
      assertArrayEquals(new char[] {'5', '5', '5'}, charArray0);
      assertEquals("555", string0);
      
      long long0 = charArrayReader0.skip(853L);
      assertArrayEquals(new char[] {'5', '5', '5'}, charArray0);
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        jsonReader0.nextBoolean();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Expected a boolean but was END_DOCUMENT at line 1 column 4 path $
         //
         verifyException("com.google.gson.stream.JsonReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)121;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte)90;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-21), (byte)121, (byte)78, (byte)94, (byte)90}, byteArray0);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      StringReader stringReader0 = new StringReader("g[u;T7]V_RNQ2D");
      assertNotNull(stringReader0);
      
      JsonReader jsonReader0 = new JsonReader(stringReader0);
      assertNotNull(jsonReader0);
      assertFalse(jsonReader0.isLenient());
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      assertNotNull(pushbackReader0);
      
      boolean boolean5 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5);
      
      JsonReader jsonReader1 = new JsonReader(stringReader0);
      assertNotNull(jsonReader1);
      assertFalse(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      
      int int0 = pushbackReader0.read();
      assertEquals(103, int0);
      
      jsonReader1.peeked = (int) (byte)78;
      assertFalse(jsonReader1.isLenient());
      
      JsonReader jsonReader2 = new JsonReader(stringReader0);
      assertNotNull(jsonReader2);
      assertFalse(jsonReader2.isLenient());
      assertFalse(jsonReader2.equals((Object)jsonReader1));
      assertFalse(jsonReader2.equals((Object)jsonReader0));
      
      boolean boolean6 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6);
      
      jsonReader1.setLenient(true);
      assertTrue(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader2));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotSame(jsonReader1, jsonReader2);
      assertNotSame(jsonReader1, jsonReader0);
      
      jsonReader0.peeked = 7;
      assertFalse(jsonReader0.isLenient());
      
      int int1 = pushbackReader0.read();
      assertFalse(int1 == int0);
      assertEquals(91, int1);
      
      jsonReader1.skipValue();
      assertTrue(jsonReader1.isLenient());
      assertFalse(jsonReader1.equals((Object)jsonReader2));
      assertFalse(jsonReader1.equals((Object)jsonReader0));
      assertNotSame(jsonReader1, jsonReader2);
      assertNotSame(jsonReader1, jsonReader0);
      
      // Undeclared exception!
      try { 
        jsonReader1.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }
}
