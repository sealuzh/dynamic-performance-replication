/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 03 01:09:44 GMT 2019
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealBufferedSource_ESTest extends RealBufferedSource_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeInt(107);
      Pipe pipe0 = new Pipe(107);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        realBufferedSource1.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Pipe pipe0 = new Pipe(4621L);
      Source source0 = pipe0.source();
      pipe0.sourceClosed = true;
      pipe0.sourceClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      realBufferedSource0.toString();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      boolean boolean0 = realBufferedSource0.closed;
      realBufferedSource1.inputStream();
      // Undeclared exception!
      try { 
        realBufferedSource1.indexOf((byte)0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = realBufferedSource0.indexOf(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      try { 
        realBufferedSource0.readByteArray();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      try { 
        realBufferedSource1.request(1000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      // Undeclared exception!
      try { 
        realBufferedSource0.request((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(1788);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.readUtf8CodePoint();
      try { 
        realBufferedSource0.skip(735L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      try { 
        realBufferedSource0.readFully(buffer1, 1095216660480L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(gzipSource0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      try { 
        realBufferedSource0.indexOf(byteString0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.skip(0L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource1.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(412);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString1 = ByteString.EMPTY;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Buffer buffer2 = realBufferedSource1.buffer();
      buffer2.clone();
      HashingSource.sha256(buffer1);
      HashingSource.sha1(buffer0);
      ByteString byteString2 = ByteString.EMPTY;
      ByteString[] byteStringArray0 = new ByteString[9];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString2;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString2;
      byteStringArray0[5] = byteString1;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString2;
      byteStringArray0[8] = byteString1;
      Options.of(byteStringArray0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource2.readInt();
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(buffer0);
      assertFalse(realBufferedSource3.equals((Object)realBufferedSource0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      realBufferedSource1.close();
      // Undeclared exception!
      try { 
        realBufferedSource1.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      GzipSource gzipSource0 = new GzipSource(realBufferedSource0);
      HashingSource hashingSource0 = HashingSource.sha1(gzipSource0);
      ByteString byteString0 = hashingSource0.hash();
      boolean boolean0 = realBufferedSource0.rangeEquals((long) (-2847), byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      Buffer buffer1 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-94);
      ByteString byteString0 = ByteString.of(byteArray0);
      try { 
        realBufferedSource0.rangeEquals(960L, byteString0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(51);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSource0);
      hashingSource0.close();
      hashingSource0.hash();
      hashingSource0.hash();
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readFully(buffer0, 0L);
      // Undeclared exception!
      try { 
        HashingSource.sha1((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Inflater inflater0 = new Inflater();
      realBufferedSource0.readByteString();
      InputStream inputStream0 = realBufferedSource0.inputStream();
      try { 
        ByteString.read(inputStream0, (byte)3);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe(1788);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8CodePoint();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-8);
      byte byte0 = (byte) (-27);
      byteArray0[5] = (byte) (-27);
      realBufferedSource1.read(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (int) (byte)69, (int) (byte) (-27));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=6 offset=69 byteCount=-27
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = ByteString.encodeUtf8("");
      realBufferedSource0.indexOfElement(byteString0, 8192L);
      boolean boolean0 = realBufferedSource0.request(8192L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(35);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(buffer1, inflater0);
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteString byteString0 = ByteString.of(byteArray0);
      realBufferedSource1.indexOf(byteString0);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSource0.readString((long) (byte)0, charset0);
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-19);
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte) (-105);
      // Undeclared exception!
      try { 
        realBufferedSource0.read(byteArray0, (int) (byte) (-112), (int) (byte) (-19));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=-112 byteCount=-19
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.require((-3185L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3185
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(buffer0);
      realBufferedSource0.buffer();
      try { 
        realBufferedSource0.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(gzipSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-95);
      try { 
        realBufferedSource0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(gzipSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      hashingSource0.hash();
      realBufferedSource0.indexOf((byte)1, 3864L, 3864L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(gzipSource0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      try { 
        realBufferedSource1.read(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ByteString byteString0 = ByteString.EMPTY;
      Charset.defaultCharset();
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      try { 
        realBufferedSource0.indexOf((byte)11);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      Buffer buffer1 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.indexOf((byte) (-1));
      try { 
        realBufferedSource0.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      realBufferedSource0.read(byteArray0);
      try { 
        realBufferedSource0.readShortLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = realBufferedSource0.readAll(buffer0);
      assertEquals(0L, long0);
      
      Charset charset0 = Charset.defaultCharset();
      realBufferedSource0.readString(0L, charset0);
      Buffer buffer1 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("");
      boolean boolean0 = realBufferedSource0.rangeEquals((-959L), byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      boolean boolean0 = false;
      ByteString byteString0 = ByteString.encodeUtf8("X'?a12Gnz4Q=$A]w#");
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement(byteString0, (-1545L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      int int0 = realBufferedSource0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Inflater inflater0 = new Inflater(false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      try { 
        realBufferedSource0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe(1788);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readInt();
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(gzipSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-95);
      byteArray0[1] = (byte)1;
      byteArray0[3] = (byte)49;
      try { 
        realBufferedSource0.indexOf((byte) (-86), (long) (byte)0, 3376L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)42;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-78);
      ByteString byteString0 = ByteString.of(byteArray0);
      boolean boolean0 = realBufferedSource0.rangeEquals((long) (byte)42, byteString0);
      assertFalse(boolean0);
      
      long long0 = realBufferedSource0.readAll(buffer0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource.sha1(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset.defaultCharset();
      EvoSuiteFile evoSuiteFile0 = null;
      try { 
        realBufferedSource0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = 221L;
      Pipe pipe0 = new Pipe(221L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8();
      byte byte0 = (byte)0;
      realBufferedSource0.indexOf((byte)0);
      // Undeclared exception!
      try { 
        Charset.forName("rRfzF9'0f]TvDw@jD");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // rRfzF9'0f]TvDw@jD
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe((-1313));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      GzipSource gzipSource0 = new GzipSource(buffer0);
      realBufferedSource0.skip((-1216L));
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      String string0 = realBufferedSource0.readUtf8Line();
      assertTrue(buffer0.exhausted());
      assertEquals("\uFFFD\uFFFD\uFFFD\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = 5892L;
      try { 
        realBufferedSource0.skip(5892L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Pipe pipe0 = new Pipe(4607L);
      Source source0 = pipe0.source();
      pipe0.sourceClosed = true;
      pipe0.sourceClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      realBufferedSource0.toString();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      // Undeclared exception!
      try { 
        realBufferedSource1.exhausted();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset.defaultCharset();
      String string0 = realBufferedSource0.toString();
      assertEquals("buffer([size=0])", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.indexOfElement(byteString0, (long) 100);
      hashingSource0.read(realBufferedSource0.buffer, 100);
      realBufferedSource0.request(100000000000000L);
      boolean boolean0 = realBufferedSource0.closed;
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8((-224L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -224
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(1788);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xfc
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte byte0 = (byte) (-27);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-27);
      try { 
        realBufferedSource0.readByteArray(1000000000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSource1.readByteArray((-1605L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1605
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 1788;
      Buffer buffer1 = buffer0.writeIntLe(1788);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      buffer0.writeIntLe(45);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.readUtf8CodePoint();
      Buffer buffer2 = realBufferedSource0.buffer.writeInt(1788);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer2);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      hashingSource1.hash();
      realBufferedSource0.readShort();
      hashingSource0.hash();
      // Undeclared exception!
      try { 
        realBufferedSource2.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteArray();
      realBufferedSource0.skip((byte) (-27));
      realBufferedSource0.indexOf((byte) (-27));
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      InflaterSource inflaterSource1 = new InflaterSource(inflaterSource0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha256(inflaterSource1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Charset charset0 = Charset.defaultCharset();
      try { 
        realBufferedSource0.readString(charset0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(inflaterSource0);
      try { 
        realBufferedSource1.readUtf8Line();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-112);
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(gzipSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0, (long) (byte) (-112));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      ByteString.decodeBase64("18MV#1|@DA_8:/|e");
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)0, 0L, 0L);
      realBufferedSource0.readUtf8();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      ByteString byteString0 = ByteString.EMPTY;
      long long0 = realBufferedSource1.indexOfElement(byteString0, 0L);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSource1);
      hashingSource0.read(realBufferedSource1.buffer, 0L);
      realBufferedSource0.request(100000000000000L);
      boolean boolean0 = realBufferedSource0.closed;
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource2.readUtf8((long) (byte)0);
      long long1 = realBufferedSource0.indexOf((byte)38);
      assertTrue(long1 == long0);
      assertEquals((-1L), long1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe(1788);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.readUtf8CodePoint();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource1.buffer);
      realBufferedSink0.buffer();
      realBufferedSource1.read(realBufferedSource0.buffer, 731L);
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      try { 
        realBufferedSource0.readString((long) 412, charset0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(51);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readAll(buffer0);
      realBufferedSource0.readUtf8();
      realBufferedSource0.close();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)96;
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)25;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.rangeEquals((-363L), byteString0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Pipe pipe0 = new Pipe(100000000000000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      GzipSource gzipSource0 = new GzipSource(realBufferedSource0);
      HashingSource hashingSource0 = HashingSource.sha1(gzipSource0);
      ByteString byteString0 = hashingSource0.hash();
      boolean boolean0 = realBufferedSource0.rangeEquals(100000000000000L, byteString0, (-2835), 100);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-74);
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      long long0 = realBufferedSource0.read(realBufferedSource1.buffer, (long) (byte)75);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      HashingSource hashingSource0 = HashingSource.md5(gzipSource0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      try { 
        realBufferedSource1.exhausted();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)70, 0L, 3864L);
      // Undeclared exception!
      try { 
        realBufferedSource0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.request(3882L);
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8((-3537L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3537
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        realBufferedSource0.read((byte[]) null, 53, 408);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.exhausted();
      buffer0.indexOf((byte)70);
      realBufferedSource0.inputStream();
      hashingSource0.hash();
      realBufferedSource0.indexOf((byte)0);
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSource0);
      ByteString byteString0 = hashingSource0.hash();
      hashingSource0.hash();
      boolean boolean0 = realBufferedSource0.rangeEquals(2L, byteString0, (-1699), 13);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8LineStrict((-1360L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1360
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(gzipSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-23);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        realBufferedSource0.read(byteArray0, (int) (byte)0, (-2572));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=9 offset=0 byteCount=-2572
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8();
      ByteString byteString0 = ByteString.EMPTY;
      realBufferedSource0.indexOfElement(byteString0, (long) 51);
      realBufferedSource0.buffer.clone();
      HashingSource.sha256(buffer0);
      buffer0.writeLongLe(51);
      HashingSource.sha1(realBufferedSource0);
      ByteString byteString1 = ByteString.EMPTY;
      ByteString[] byteStringArray0 = new ByteString[1];
      realBufferedSource0.readInt();
      byteStringArray0[0] = byteString1;
      Options.of(byteStringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ByteString[] byteStringArray1 = new ByteString[0];
      Options.of(byteStringArray1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Inflater inflater0 = new Inflater();
      try { 
        realBufferedSource0.skip(8L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0, 8208L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.read(buffer0, 9223372036854775807L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        realBufferedSource0.read(byteArray0, (-2145784688), 3135);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-2145784688 byteCount=3135
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8();
      ByteString byteString0 = ByteString.EMPTY;
      realBufferedSource0.indexOfElement(byteString0, (long) 51);
      Buffer buffer1 = realBufferedSource0.buffer.clone();
      Buffer buffer2 = buffer0.writeLongLe(51);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      Options.of(byteStringArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      realBufferedSource1.readDecimalLong();
      realBufferedSource1.timeout();
      assertTrue(buffer2.exhausted());
      assertTrue(buffer0.equals((Object)buffer1));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = 0L;
      realBufferedSource0.indexOf((byte)0, 0L, 0L);
      String string0 = "2[k";
      realBufferedSource0.readUtf8();
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      realBufferedSource0.read(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource1.request((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = 5892L;
      try { 
        realBufferedSource0.require(2092L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe(1788);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8CodePoint();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      ByteString[] byteStringArray0 = new ByteString[1];
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSource0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.write(buffer0);
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource1.select(options0);
      boolean boolean0 = realBufferedSource1.request(65533);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte) (-49), (long) (byte) (-49), 538L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-49 toIndex=538
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(51);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      byte[] byteArray0 = new byte[0];
      buffer1.write(byteArray0);
      realBufferedSource0.readAll(buffer0);
      realBufferedSource0.readUtf8();
      realBufferedSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8Line();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      Buffer buffer1 = new Buffer();
      try { 
        realBufferedSource0.readByteString();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = ByteString.encodeUtf8("");
      buffer0.writeInt(56320);
      realBufferedSource0.indexOfElement(byteString0, 8192L);
      assertTrue(buffer0.exhausted());
      
      boolean boolean0 = realBufferedSource0.request(8192L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteArray((long) 0);
      realBufferedSource0.indexOf((byte) (-77));
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[2] = byteString0;
      Options.of(byteStringArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.indexOf((byte)96, 0L);
      realBufferedSource0.select(options0);
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      try { 
        realBufferedSource0.readUtf8();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(1788);
      HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.exhausted();
      ByteString byteString0 = ByteString.EMPTY;
      realBufferedSource0.indexOfElement(byteString0, 1217L);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      HashingSource.sha1(hashingSource0);
      ByteString byteString1 = ByteString.EMPTY;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      ByteString byteString2 = ByteString.EMPTY;
      realBufferedSource1.rangeEquals((-958L), byteString2, 48, 48);
      // Undeclared exception!
      try { 
        realBufferedSource1.readUtf8LineStrict((-803L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -803
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      realBufferedSource0.readUtf8();
      hashingSource0.hash();
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      ByteString byteString0 = hashingSource0.hash();
      boolean boolean0 = realBufferedSource0.rangeEquals((long) 13, byteString0, 2, (-1699));
      assertFalse(boolean0);
      
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      inflaterSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource.sha1(buffer0);
      Charset charset0 = Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.closed = true;
      // Undeclared exception!
      try { 
        realBufferedSource0.readString(344L, charset0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Pipe pipe0 = new Pipe(3L);
      Buffer buffer0 = pipe0.buffer;
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      ByteString[] byteStringArray0 = new ByteString[4];
      try { 
        realBufferedSource0.readByteString();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-30);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte) (-30));
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)38;
      try { 
        realBufferedSource0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      buffer0.writeInt(51);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8CodePoint();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource1.read(buffer0, 2669L);
      try { 
        realBufferedSource1.readHexadecimalUnsignedLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)57;
      ByteString byteString0 = new ByteString(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.skip((-477L));
      Buffer buffer1 = realBufferedSource0.buffer();
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater(0, false);
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)57;
      byteArray0[2] = (byte)25;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.exhausted();
      try { 
        realBufferedSource0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      inflaterSource0.refill();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-66);
      inflater0.setInput(byteArray0);
      try { 
        realBufferedSource0.readByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.util.zip.DataFormatException: incorrect header check
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      realBufferedSink0.buffer();
      realBufferedSource0.read(buffer0, (long) 0);
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      try { 
        realBufferedSource1.readString(4278190080L, charset0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater(0, false);
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte) (-37);
      int int0 = realBufferedSource0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(1788);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.readUtf8CodePoint();
      Buffer buffer2 = realBufferedSource0.buffer.writeInt(1788);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer2);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      hashingSource1.hash();
      hashingSource0.hash();
      byte[] byteArray0 = new byte[0];
      int int0 = realBufferedSource0.read(byteArray0);
      assertEquals(0L, buffer1.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(51);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      boolean boolean0 = realBufferedSource0.request(9223372036854775807L);
      assertFalse(boolean0);
      
      boolean boolean1 = realBufferedSource0.closed;
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(gzipSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.write(realBufferedSource0.buffer);
      gzipSource0.timeout();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.indexOf(byteString0);
      Buffer buffer1 = new Buffer();
      long long0 = realBufferedSource0.readLongLe();
      long long1 = realBufferedSource0.readLongLe();
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater(0, false);
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      realBufferedSource0.read(byteArray0);
      realBufferedSource0.readUtf8Line();
      ByteString[] byteStringArray0 = new ByteString[1];
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeHexadecimalUnsignedLong(4637L);
      realBufferedSource0.readAll(buffer0);
      realBufferedSource0.indexOf((byte) (-96), 4L, 2440L);
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)0, 0L, 3864L);
      int int0 = 3075;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      // Undeclared exception!
      try { 
        realBufferedSource0.read(byteArray0, (-3134), (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=-3134 byteCount=0
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Pipe pipe0 = new Pipe(1214L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      GzipSource gzipSource0 = new GzipSource(pipe_PipeSource0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-8);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(gzipSource0, byteString0);
      pipe_PipeSource0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)21);
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(412);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readShortLe();
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x0
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater(0, false);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.inputStream();
      ByteString byteString0 = realBufferedSource0.readByteString((long) 0);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(gzipSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)49;
      try { 
        realBufferedSource0.readString(1L, (Charset) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe(412);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      realBufferedSource1.readUtf8CodePoint();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSource1.read(buffer1, 4278190080L);
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      try { 
        realBufferedSource1.readString(3L, charset0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)57;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8((long) (byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)0, 0L, 3864L);
      realBufferedSource0.buffer.writeInt(3075);
      realBufferedSource0.indexOf((byte)0, (long) (byte)0, (long) 3075);
      boolean boolean0 = realBufferedSource0.closed;
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource1.indexOf((byte)90, (long) (byte)90, (long) (byte)90);
      realBufferedSource0.close();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      assertFalse(realBufferedSource2.equals((Object)realBufferedSource0));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset charset0 = Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.readString(charset0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource1);
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      ByteString byteString0 = ByteString.EMPTY;
      realBufferedSource0.indexOfElement(byteString0, (long) 51);
      realBufferedSource0.buffer.clone();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      Buffer buffer1 = buffer0.writeLongLe(51);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HashingSource hashingSource1 = HashingSource.sha1(realBufferedSource1);
      ByteString byteString1 = ByteString.EMPTY;
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString1;
      ByteString[] byteStringArray1 = new ByteString[6];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-126);
      ByteString byteString2 = ByteString.of(byteArray0);
      byteStringArray1[0] = byteString2;
      byteStringArray1[1] = byteString0;
      byteStringArray1[2] = byteString1;
      byteStringArray1[3] = byteString0;
      ByteString byteString3 = ByteString.decodeHex("");
      byteStringArray1[4] = byteString3;
      byteStringArray1[5] = byteString1;
      Options.of(byteStringArray1);
      Options options0 = Options.of(byteStringArray1);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(hashingSource0);
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer1, inflater0);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(hashingSource1);
      realBufferedSource3.select(options0);
      realBufferedSource3.readDecimalLong();
      // Undeclared exception!
      try { 
        realBufferedSource2.require((byte) (-126));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -126
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      deflaterSink0.flush();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      int int0 = realBufferedSource0.read(byteArray0);
      assertEquals((-1), int0);
      
      realBufferedSource0.readAll(deflaterSink0);
      long long0 = realBufferedSource0.readAll(realBufferedSink0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = (-1189);
      Buffer buffer1 = buffer0.writeIntLe((-1189));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      GzipSource gzipSource0 = new GzipSource(realBufferedSource0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(gzipSource0);
      try { 
        realBufferedSource1.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      ByteString byteString0 = ByteString.EMPTY;
      realBufferedSource0.indexOfElement(byteString0, (long) 51);
      realBufferedSource0.buffer.clone();
      HashingSource.sha256(buffer0);
      buffer0.writeLongLe(51);
      HashingSource.sha1(realBufferedSource1);
      ByteString byteString1 = ByteString.EMPTY;
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString1;
      Options.of(byteStringArray0);
      ByteString[] byteStringArray1 = new ByteString[0];
      Options.of(byteStringArray1);
      realBufferedSource1.buffer();
      realBufferedSource1.readByte();
      assertEquals(0L, buffer0.size());
      
      boolean boolean0 = realBufferedSource0.exhausted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      inflaterSource0.timeout();
      ByteString byteString0 = hashingSource0.hash();
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOfElement(byteString0, (-1458L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset charset0 = Charset.defaultCharset();
      try { 
        realBufferedSource0.readString(8192L, charset0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      HashingSource.sha1(buffer1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Inflater inflater0 = new Inflater(false);
      // Undeclared exception!
      try { 
        realBufferedSource0.request((-1390L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1390
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Pipe pipe0 = new Pipe(8192L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      ByteString byteString0 = ByteString.encodeUtf8("u|`72o\"&&3i3\"e[$AUq");
      HashingSource hashingSource0 = HashingSource.hmacSha1(pipe_PipeSource0, byteString0);
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      Timeout timeout0 = realBufferedSource0.timeout();
      assertFalse(timeout0.hasDeadline());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource.md5(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)0, 0L, 0L);
      realBufferedSource0.readUtf8();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      ByteString byteString0 = ByteString.EMPTY;
      realBufferedSource1.indexOfElement(byteString0, 0L);
      buffer0.clone();
      HashingSource.sha256(realBufferedSource1);
      HashingSource.sha1(realBufferedSource0);
      ByteString[] byteStringArray0 = new ByteString[7];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      ByteString byteString1 = ByteString.EMPTY;
      byteStringArray0[6] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      ByteString byteString2 = ByteString.EMPTY;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      int int0 = 48;
      realBufferedSource0.rangeEquals(0L, byteString2, 48, (int) (byte)0);
      realBufferedSource2.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8LineStrict(2147483647L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.close();
      long long0 = 1289L;
      buffer0.writeHexadecimalUnsignedLong(1289L);
      realBufferedSource0.readAll(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)57;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      hashingSource0.hash();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(hashingSource0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.read(buffer0, (-463L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -463
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource.sha1(buffer0);
      ByteString byteString0 = ByteString.EMPTY;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      boolean boolean0 = realBufferedSource0.rangeEquals((long) 100, byteString0, 100, 48);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteArray();
      realBufferedSource0.timeout();
      realBufferedSource0.timeout();
      try { 
        realBufferedSource0.readUtf8LineStrict(4L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer2);
      boolean boolean0 = realBufferedSource1.rangeEquals((-477L), (ByteString) null, 26, 4832);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      int int0 = realBufferedSource0.read(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.exhausted();
      byte byte0 = (byte)70;
      buffer0.indexOf((byte)70);
      realBufferedSource0.inputStream();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      // Undeclared exception!
      try { 
        realBufferedSource1.indexOf((byte) (-91), 8L, 5L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=8 toIndex=5
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      long long0 = realBufferedSource1.indexOf(byteString0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)41);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource1.readByteString(1274L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      Buffer buffer1 = new Buffer();
      assertTrue(buffer1.exhausted());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      long long0 = 365L;
      Pipe pipe0 = new Pipe(365L);
      Buffer buffer0 = pipe0.buffer;
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      try { 
        realBufferedSource0.skip(4188L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      boolean boolean0 = realBufferedSource0.rangeEquals((long) 100, byteString0, 100, 13);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      GzipSource gzipSource0 = new GzipSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer.clone();
      HashingSource.sha256(buffer1);
      HashingSource.sha1(buffer1);
      ByteString byteString0 = ByteString.EMPTY;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink0.buffer);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      realBufferedSource0.close();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&,dJo");
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8LineStrict((-196L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -196
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(buffer0);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSource0.readString(0L, charset0);
      try { 
        realBufferedSource0.readLongLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)0, 0L, 0L);
      realBufferedSource0.readUtf8();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      ByteString byteString0 = ByteString.EMPTY;
      realBufferedSource1.indexOfElement(byteString0, 0L);
      buffer0.clone();
      HashingSource.sha256(realBufferedSource1);
      HashingSource.sha1(realBufferedSource0);
      ByteString byteString1 = ByteString.EMPTY;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.rangeEquals(0L, byteString1, 48, (int) (byte)0);
      realBufferedSource2.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8LineStrict(2147483647L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)120;
      ByteString.of(byteArray0);
      ByteString byteString0 = ByteString.encodeUtf8("limit < 0: ");
      realBufferedSource0.rangeEquals(1291L, byteString0);
      realBufferedSource0.readAll(buffer0);
      try { 
        realBufferedSource0.skip(660L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      hashingSource0.hash();
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteArray((-202L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -202
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8();
      realBufferedSource0.buffer.clone();
      HashingSource.sha256(buffer0);
      buffer0.writeLongLe(51);
      HashingSource.sha1(realBufferedSource0);
      ByteString byteString0 = ByteString.EMPTY;
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options.of(byteStringArray0);
      ByteString[] byteStringArray1 = new ByteString[0];
      Options.of(byteStringArray1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Inflater inflater0 = new Inflater();
      try { 
        realBufferedSource1.skip(77L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) realBufferedSource0, inflater0);
      inflaterSource0.timeout();
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully(realBufferedSource1.buffer, (-1755L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1755
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeHexadecimalUnsignedLong(1289L);
      realBufferedSource0.readAll(buffer0);
      Inflater inflater0 = new Inflater();
      realBufferedSource0.close();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      assertFalse(buffer0.exhausted());
      assertEquals(3L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      GzipSource gzipSource0 = new GzipSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) realBufferedSource1, inflater0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(inflaterSource0);
      try { 
        realBufferedSource2.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      ByteString byteString0 = ByteString.decodeHex("");
      boolean boolean0 = realBufferedSource0.rangeEquals((long) 2, byteString0, 2, 77);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.inputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.inputStream();
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((long) (byte) (-78));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -78
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      boolean boolean0 = realBufferedSource1.rangeEquals((long) 13, byteString0, 2, (-1699));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.close();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      assertFalse(realBufferedSource1.equals((Object)realBufferedSource0));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-959L));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.readAll(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x66
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Charset charset0 = Charset.defaultCharset();
      String string0 = realBufferedSource0.readString((long) 0, charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(259);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-1);
      Buffer buffer1 = buffer0.write(byteArray0);
      buffer1.writeLong(1388L);
      realBufferedSource0.readAll(buffer1);
      realBufferedSource0.readUtf8();
      realBufferedSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8CodePoint();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readIntLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[2];
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.select(options0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Inflater inflater0 = new Inflater(false);
      hashingSource0.hash();
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("+DKR");
      try { 
        realBufferedSource0.readShortLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte byte0 = (byte)0;
      try { 
        realBufferedSource0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte byte0 = (byte) (-27);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readByteArray(1000000000000000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      Buffer buffer1 = buffer0.writeInt(2145937583);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte)34;
      Buffer buffer2 = buffer1.write(byteArray0);
      try { 
        realBufferedSource0.readAll(buffer2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // ID1ID2: actual 0x00007fe8 != expected 0x00001f8b
         //
         verifyException("okio.GzipSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = 1289L;
      buffer0.writeHexadecimalUnsignedLong(1289L);
      realBufferedSource0.readAll(buffer0);
      realBufferedSource0.readDecimalLong();
      try { 
        realBufferedSource0.readByteArray(509L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      try { 
        realBufferedSource0.readAll(buffer0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readShort();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(51);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      realBufferedSource0.readShort();
      hashingSource0.hash();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(gzipSource0);
      try { 
        realBufferedSource1.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(buffer0);
      String string0 = realBufferedSource0.readUtf8();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte byte0 = (byte)3;
      Inflater inflater0 = new Inflater(false);
      hashingSource0.hash();
      InputStream inputStream0 = realBufferedSource0.inputStream();
      try { 
        ByteString.read(inputStream0, (byte)3);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.read(byteArray0);
      try { 
        realBufferedSource0.readIntLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.request(0);
      boolean boolean0 = realBufferedSource0.closed;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readUtf8((-1707L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1707
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)0, 0L, 3864L);
      realBufferedSource0.buffer.writeInt(3075);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      hashingSource0.hash();
      hashingSource0.hash();
      realBufferedSource0.indexOf((byte)0, (long) (byte)0, (long) 3075);
      boolean boolean0 = realBufferedSource0.closed;
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.inputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = ByteString.EMPTY;
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0, (long) (byte) (-78));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteArray();
      realBufferedSource0.timeout();
      realBufferedSource0.readByteArray();
      realBufferedSource0.timeout();
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      GzipSource gzipSource0 = new GzipSource(buffer0);
      gzipSource0.close();
      Buffer buffer1 = realBufferedSource0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource1.buffer();
      buffer2.indexOf((byte)126);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(gzipSource0);
      // Undeclared exception!
      try { 
        realBufferedSource2.readByteString();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(51);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      hashingSource0.hash();
      // Undeclared exception!
      try { 
        realBufferedSource0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(51);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource0.readIntLe();
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      hashingSource0.toString();
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      Buffer buffer1 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSource0.readString((-1417L), (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1417
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Charset.defaultCharset();
      realBufferedSource0.skip(0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      inflaterSource0.timeout();
      long long0 = 5929L;
      InflaterSource inflaterSource1 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource1 = HashingSource.sha256(realBufferedSource0);
      HashingSource.sha1(hashingSource1);
      hashingSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString(5929L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Pipe pipe0 = new Pipe(1024L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte) (-8), (long) (byte) (-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-8 toIndex=9223372036854775807
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      ByteString byteString0 = ByteString.encodeUtf8("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      try { 
        realBufferedSource0.indexOfElement(byteString0, 8192L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      realBufferedSource1.close();
      byte[] byteArray0 = new byte[0];
      ByteString byteString1 = new ByteString(byteArray0);
      HashingSource hashingSource1 = HashingSource.hmacSha1(realBufferedSource1, byteString0);
      hashingSource1.hash();
      buffer0.writeIntLe(380);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer1);
      realBufferedSource0.readFully(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource1.indexOf(byteString1, 100000000L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(51);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[3];
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteStringArray0[0] = byteString0;
      HashingSource hashingSource0 = HashingSource.hmacSha256(realBufferedSource0, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      byteStringArray0[1] = byteString1;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)0;
      ByteString byteString2 = ByteString.of(byteArray0);
      byteStringArray0[2] = byteString2;
      Options.of(byteStringArray0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      Options options0 = Options.of(byteStringArray0);
      int int0 = realBufferedSource1.select(options0);
      assertEquals((-1), int0);
      
      boolean boolean0 = realBufferedSource1.rangeEquals((long) (byte)97, byteString0, 1, 580);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      ByteString[] byteStringArray0 = new ByteString[4];
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      byteStringArray0[0] = byteString0;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ByteString byteString1 = ByteString.of(byteArray0);
      byteStringArray0[1] = byteString1;
      ByteString byteString2 = ByteString.of(byteArray0);
      byteStringArray0[2] = byteString2;
      ByteString byteString3 = ByteString.of(byteArray0);
      byteStringArray0[3] = byteString3;
      Options options0 = Options.of(byteStringArray0);
      try { 
        realBufferedSource0.select(options0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(51);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      realBufferedSource0.readInt();
      hashingSource0.hash();
      hashingSource0.hash();
      boolean boolean0 = realBufferedSource0.closed;
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readString((-471L), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -471
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeHexadecimalUnsignedLong(1289L);
      realBufferedSource0.readAll(buffer0);
      realBufferedSource0.readDecimalLong();
      try { 
        realBufferedSource0.readByteArray(509L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      InputStream inputStream0 = buffer0.inputStream();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      InputStream inputStream1 = realBufferedSource0.inputStream();
      assertFalse(inputStream1.equals((Object)inputStream0));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      ByteString byteString0 = ByteString.EMPTY;
      realBufferedSource0.indexOfElement(byteString0, (long) 51);
      Buffer buffer1 = realBufferedSource0.buffer.clone();
      HashingSource.sha256(buffer0);
      buffer0.writeLongLe(51);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HashingSource.sha1(realBufferedSource1);
      ByteString byteString1 = ByteString.EMPTY;
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString1;
      Options.of(byteStringArray0);
      ByteString[] byteStringArray1 = new ByteString[0];
      Options options0 = Options.of(byteStringArray1);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer1, inflater0);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(inflaterSource0);
      realBufferedSource3.select(options0);
      realBufferedSource0.readDecimalLong();
      try { 
        realBufferedSource2.require(1586L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        realBufferedSource1.read(byteArray0, (-2146710057), (-2871));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-2146710057 byteCount=-2871
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8();
      ByteString byteString0 = ByteString.EMPTY;
      realBufferedSource0.indexOfElement(byteString0, (long) 51);
      realBufferedSource0.buffer.clone();
      HashingSource.sha256(buffer0);
      buffer0.writeLongLe(51);
      HashingSource.sha1(realBufferedSource0);
      ByteString byteString1 = ByteString.EMPTY;
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString1;
      Options.of(byteStringArray0);
      ByteString[] byteStringArray1 = new ByteString[0];
      Options.of(byteStringArray1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Inflater inflater0 = new Inflater();
      realBufferedSource0.skip(8L);
      try { 
        realBufferedSource0.readIntLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt((-6607));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      byte[] byteArray0 = new byte[2];
      buffer1.readShortLe();
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-98);
      Buffer buffer2 = buffer0.write(byteArray0);
      realBufferedSource0.readAll(buffer2);
      realBufferedSource0.skip((-2257L));
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully(buffer0, (long) (-6607));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -6607
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      ByteString byteString0 = ByteString.EMPTY;
      realBufferedSource0.indexOfElement(byteString0, (long) 51);
      Buffer buffer1 = realBufferedSource0.buffer.clone();
      HashingSource.sha256(buffer0);
      buffer0.writeLongLe(51);
      HashingSource.sha1(realBufferedSource1);
      ByteString byteString1 = ByteString.EMPTY;
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString1;
      Options.of(byteStringArray0);
      ByteString[] byteStringArray1 = new ByteString[0];
      Options options0 = Options.of(byteStringArray1);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer1, inflater0);
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(inflaterSource0);
      realBufferedSource3.select(options0);
      long long0 = realBufferedSource0.readDecimalLong();
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(51);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      byte[] byteArray0 = new byte[0];
      buffer1.write(byteArray0);
      realBufferedSource0.readAll(buffer0);
      realBufferedSource0.readUtf8();
      realBufferedSource0.close();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-58);
      byteArray1[1] = (byte) (-43);
      byteArray1[2] = (byte)96;
      byteArray1[3] = (byte)108;
      byteArray1[4] = (byte)91;
      byteArray1[5] = (byte)112;
      byteArray1[6] = (byte)25;
      ByteString byteString0 = new ByteString(byteArray1);
      // Undeclared exception!
      try { 
        realBufferedSource0.rangeEquals((-363L), byteString0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      try { 
        gzipSource0.read(buffer0, 2463L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = ByteString.EMPTY;
      hashingSource0.hash();
      int int0 = (-1703);
      // Undeclared exception!
      try { 
        realBufferedSource0.read(buffer0, (long) (-1703));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1703
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.readUtf8Line();
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      try { 
        realBufferedSource0.read(buffer0, 4L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      realBufferedSource1.close();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.readByteArray();
      // Undeclared exception!
      try { 
        realBufferedSource1.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(buffer0);
      Charset.defaultCharset();
      EvoSuiteFile evoSuiteFile0 = null;
      try { 
        realBufferedSource0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      realBufferedSource1.close();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSource1.readString(100000000000000L, charset0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 51;
      Buffer buffer1 = buffer0.writeInt(51);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      byte[] byteArray0 = new byte[0];
      buffer1.write(byteArray0);
      realBufferedSource0.read(buffer1, (long) 51);
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      realBufferedSource0.readString(4L, charset0);
      long long0 = 8192L;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeIntLe(1788);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource1.readUtf8CodePoint();
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.indexOf((byte) (-32));
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer1);
      realBufferedSource0.readByteString();
      realBufferedSource1.buffer();
      // Undeclared exception!
      try { 
        realBufferedSource1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x6
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(51);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      realBufferedSource1.readUtf8CodePoint();
      Deflater deflater0 = new Deflater(0);
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer1, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      realBufferedSink0.buffer();
      realBufferedSource1.read(realBufferedSource0.buffer, (long) 0);
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      try { 
        realBufferedSource1.readString(4167L, charset0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      long long0 = realBufferedSource0.readAll(buffer0);
      assertEquals(0L, long0);
      
      Charset.defaultCharset();
      ByteString[] byteStringArray0 = new ByteString[1];
      ByteString byteString0 = ByteString.EMPTY;
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      int int0 = realBufferedSource0.select(options0);
      assertEquals(0, int0);
      
      boolean boolean0 = realBufferedSource0.rangeEquals(1388L, byteString0, 0, 1369);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readShortLe();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-74);
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      try { 
        realBufferedSource1.readUtf8(4L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Pipe pipe0 = new Pipe(4607L);
      Source source0 = pipe0.source();
      pipe0.sourceClosed = true;
      pipe0.sourceClosed = true;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      realBufferedSource0.toString();
      // Undeclared exception!
      try { 
        realBufferedSource0.exhausted();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater(0, false);
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      byte byte0 = (byte)112;
      realBufferedSource0.indexOf((byte)112);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSource0.readString(charset0);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource2.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.sha1(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte byte0 = (byte)3;
      Inflater inflater0 = new Inflater(false);
      ByteString byteString0 = ByteString.EMPTY;
      ByteString[] byteStringArray0 = new ByteString[9];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      buffer0.writeHexadecimalUnsignedLong((byte)3);
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      byteStringArray0[6] = byteString0;
      byteStringArray0[7] = byteString0;
      byteStringArray0[8] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      ByteString byteString1 = ByteString.EMPTY;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.close();
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      realBufferedSource1.rangeEquals((long) 48, byteString0, (-1081), 100);
      long long0 = 2147483647L;
      realBufferedSource0.close();
      try { 
        realBufferedSource1.readUtf8LineStrict(2147483647L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=1 content=33\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(2095105998);
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      hashingSource0.hash();
      hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.readUtf8CodePoint();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer();
      hashingSource0.hash();
      hashingSource0.hash();
      // Undeclared exception!
      try { 
        realBufferedSource0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xc7
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      boolean boolean0 = realBufferedSource0.rangeEquals((-224L), byteString0, 100, 100);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.select(options0);
      Buffer buffer1 = new Buffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte) (-68);
      ByteString byteString0 = ByteString.of(byteArray0);
      try { 
        realBufferedSource0.rangeEquals((long) (byte)42, byteString0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(1788);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.readUtf8CodePoint();
      Buffer buffer2 = realBufferedSource0.buffer.writeInt(1788);
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(buffer2);
      HashingSource hashingSource1 = HashingSource.sha1(hashingSource0);
      hashingSource1.hash();
      RealBufferedSource realBufferedSource3 = new RealBufferedSource(realBufferedSource2);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-32);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte) (-32);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)0;
      int int0 = realBufferedSource1.read(byteArray0);
      assertTrue(buffer1.equals((Object)buffer2));
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(51);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      hashingSource0.hash();
      HashingSource.sha256(hashingSource0);
      realBufferedSource0.readByte();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource0.readByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)0, 0L, 0L);
      realBufferedSource0.readUtf8();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      ByteString byteString0 = ByteString.EMPTY;
      realBufferedSource1.indexOfElement(byteString0, 0L);
      HashingSource.sha256(realBufferedSource1);
      HashingSource.sha1(realBufferedSource0);
      ByteString byteString1 = ByteString.EMPTY;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(realBufferedSource0.buffer);
      realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource2 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.rangeEquals(0L, byteString1, 48, (int) (byte)0);
      try { 
        realBufferedSource0.readUtf8LineStrict(2147483647L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      buffer0.writeUtf8("x2!qM5");
      buffer0.writeHexadecimalUnsignedLong(1289L);
      realBufferedSource0.readAll(buffer0);
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) realBufferedSource0, inflater0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.readLong();
      try { 
        realBufferedSource0.readInt();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      inflaterSource0.timeout();
      long long0 = 5942L;
      InflaterSource inflaterSource1 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource.sha256(realBufferedSource0);
      hashingSource0.close();
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString(5942L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      hashingSource0.read(realBufferedSource0.buffer, 100);
      boolean boolean0 = realBufferedSource0.closed;
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)23, (-1L), (-618L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-1 toIndex=-618
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.decodeBase64(" content=");
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      Source source0 = hashingSource0.delegate();
      hashingSource0.timeout();
      HashingSource hashingSource1 = HashingSource.sha1(source0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte) (-124), (long) (byte) (-124));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=-124 toIndex=9223372036854775807
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource1.readFully(realBufferedSource0.buffer, (-1967L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1967
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      Deflater deflater0 = new Deflater(0, true);
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      realBufferedSource0.read(byteArray0);
      try { 
        realBufferedSource0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha1(inflaterSource0);
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      long long0 = 1289L;
      buffer0.writeHexadecimalUnsignedLong(1289L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      // Undeclared exception!
      try { 
        realBufferedSource0.readAll(hashingSink0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)1, (long) (byte)1, 344L);
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)62;
      inflater0.inflate(byteArray0);
      InflaterSource inflaterSource1 = new InflaterSource((BufferedSource) buffer0, inflater0);
      ByteString byteString0 = ByteString.EMPTY;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource1);
      try { 
        realBufferedSource0.indexOf((byte)48, (long) (byte)48, 5929L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf((byte)34, 1250L, (-2910L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex=1250 toIndex=-2910
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Pipe pipe0 = new Pipe(304L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      pipe_PipeSource0.close();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-58);
      byteArray0[0] = (byte) (-58);
      byte byte1 = (byte) (-16);
      byteArray0[1] = (byte) (-16);
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully(byteArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // closed
         //
         verifyException("okio.Pipe$PipeSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      try { 
        realBufferedSource0.readUtf8(4L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      inflaterSource0.timeout();
      long long0 = 5929L;
      try { 
        realBufferedSource0.readFully(buffer0, 405L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // source exhausted prematurely
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater(0, false);
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-78);
      realBufferedSource0.read(byteArray0);
      realBufferedSource0.indexOf((byte) (-78), 3L);
      Buffer buffer2 = realBufferedSource0.buffer();
      assertNotSame(buffer1, buffer2);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      byte byte0 = (byte) (-35);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSource0.read(byteArray0, 45, (int) (byte)4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=45 byteCount=4
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readAll(buffer0);
      try { 
        realBufferedSource0.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource.md5(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      inflaterSource0.timeout();
      long long0 = 405L;
      Buffer buffer1 = realBufferedSource0.buffer();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer1);
      try { 
        realBufferedSource1.readFully(realBufferedSource0.buffer, 7L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      HashingSource.sha1(gzipSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource1.readByteString();
      // Undeclared exception!
      try { 
        realBufferedSource0.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8();
      ByteString byteString0 = ByteString.EMPTY;
      realBufferedSource0.indexOfElement(byteString0, (long) 51);
      realBufferedSource0.buffer.clone();
      HashingSource.sha256(buffer0);
      buffer0.writeLongLe(51);
      HashingSource.sha1(realBufferedSource0);
      ByteString byteString1 = ByteString.EMPTY;
      ByteString[] byteStringArray0 = new ByteString[1];
      realBufferedSource0.readInt();
      byteStringArray0[0] = byteString1;
      Options.of(byteStringArray0);
      realBufferedSource0.readByteString(2L);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ByteString[] byteStringArray1 = new ByteString[0];
      Options.of(byteStringArray1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      Inflater inflater0 = new Inflater();
      realBufferedSource0.readUtf8Line();
      try { 
        realBufferedSource0.skip(8L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe(1788);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.readUtf8CodePoint();
      assertEquals(0L, buffer1.size());
      
      boolean boolean0 = realBufferedSource1.request(65533);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString.decodeBase64("");
      int int0 = 673;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 673, 3009);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Inflater inflater0 = new Inflater(false);
      // Undeclared exception!
      try { 
        realBufferedSource0.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8Line();
      try { 
        realBufferedSource0.readLong();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(51);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      byte[] byteArray0 = new byte[5];
      buffer1.write(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.select((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Deflater deflater0 = new Deflater();
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) buffer0, deflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(deflaterSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      // Undeclared exception!
      try { 
        realBufferedSource1.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }
}
