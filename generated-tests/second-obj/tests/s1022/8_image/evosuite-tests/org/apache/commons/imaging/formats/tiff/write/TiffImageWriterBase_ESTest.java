/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:46:10 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff.write;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.nio.ByteOrder;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Stack;
import org.apache.commons.imaging.common.BinaryOutputStream;
import org.apache.commons.imaging.common.ImageBuilder;
import org.apache.commons.imaging.formats.tiff.constants.TiffDirectoryType;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfoDoubles;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfoSBytes;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfoShortOrLong;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossless;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossy;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputDirectory;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputSummary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffImageWriterBase_ESTest extends TiffImageWriterBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addExifDirectory();
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing root directory.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy((ByteOrder) null);
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        tiffImageWriterLossy0.writeImageFileHeader(binaryOutputStream0, (-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addGPSDirectory();
      tiffOutputSet0.setGPSInDegrees((-1L), (-3));
      tiffOutputSet0.getOrCreateGPSDirectory();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      assertNotNull(tiffOutputSummary0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.getOrCreateGPSDirectory();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      TiffOutputSummary tiffOutputSummary1 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      assertFalse(tiffOutputSummary1.equals((Object)tiffOutputSummary0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addInteroperabilityDirectory();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      assertNotNull(tiffOutputSummary0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addInteroperabilityDirectory();
      tiffOutputSet0.getOrCreateGPSDirectory();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      TiffOutputSummary tiffOutputSummary1 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      assertFalse(tiffOutputSummary1.equals((Object)tiffOutputSummary0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getOrCreateRootDirectory();
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(byteArray0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      hashMap0.put("EXIF", tiffOutputDirectory0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("EXIF");
      // Undeclared exception!
      try { 
        tiffImageWriterLossless0.writeImage((BufferedImage) null, mockFileOutputStream0, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.imaging.formats.tiff.write.TiffOutputDirectory cannot be cast to org.apache.commons.imaging.formats.tiff.write.TiffOutputSet
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JIS");
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(mockFileOutputStream0);
      ImageBuilder imageBuilder0 = new ImageBuilder(40965, (byte)51, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      hashtable0.put("JIS", tiffImageWriterLossless0);
      try { 
        tiffImageWriterLossless0.writeImage(bufferedImage0, binaryOutputStream0, hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: JIS
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("JIS", true);
      mockFileOutputStream0.write((int) (byte)3);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "JIS", (int) (byte)3, (int) (byte)3);
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(mockFileOutputStream0);
      ImageBuilder imageBuilder0 = new ImageBuilder((byte)3, (byte)3, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      mockPrintStream0.println();
      bufferedImage0.coerceData(true);
      ImageBuilder imageBuilder1 = new ImageBuilder((byte)3, (byte)3, true);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      try { 
        tiffImageWriterLossless0.writeImage(bufferedImage0, printStream0, hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid TIFF byte order 0
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossless", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)3;
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(byteArray0);
      ByteOrder.nativeOrder();
      ImageBuilder imageBuilder0 = new ImageBuilder((byte)3, 1597, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Locale locale0 = Locale.US;
      Object object0 = Image.UndefinedProperty;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(byteOrder0);
      OutputStream outputStream0 = null;
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      // Undeclared exception!
      tiffImageWriterLossless0.writeImage(bufferedImage0, (OutputStream) null, hashtable0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getOrCreateGPSDirectory();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      tiffOutputSet0.getOrCreateGPSDirectory();
      TiffOutputSet tiffOutputSet1 = new TiffOutputSet();
      ByteOrder.nativeOrder();
      TiffOutputDirectory tiffOutputDirectory1 = tiffOutputSet0.getOrCreateGPSDirectory();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.EXIF_DIRECTORY_EXIF_IFD;
      TagInfoShortOrLong tagInfoShortOrLong0 = new TagInfoShortOrLong("", (-3), (-3), tiffDirectoryType0);
      short[] shortArray0 = new short[12];
      tiffOutputDirectory0.add(tagInfoShortOrLong0, shortArray0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      TagInfoDoubles tagInfoDoubles0 = new TagInfoDoubles("", (-3), (-3), tagInfoShortOrLong0.directoryType);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[0] = (double) (-1L);
      tiffOutputDirectory1.add(tagInfoDoubles0, doubleArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "EXIF");
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      tiffOutputSet0.addInteroperabilityDirectory();
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      try { 
        tiffImageWriterLossy0.write(pipedOutputStream1, tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Tag (-3 (0xfffffffd: ): ) appears twice in directory.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("=IS", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      mockPrintStream0.print(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=IS");
      MockPrintStream mockPrintStream1 = new MockPrintStream("=IS");
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(mockFileOutputStream0);
      ImageBuilder imageBuilder0 = new ImageBuilder((byte)3, (byte)3, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      imageBuilder0.getBufferedImage();
      MockPrintStream mockPrintStream2 = new MockPrintStream("=IS");
      binaryOutputStream0.write3Bytes((byte)3);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      hashtable0.put("XMP_XML", tiffImageWriterLossless0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(binaryOutputStream0);
      // Undeclared exception!
      try { 
        tiffImageWriterLossless0.writeImage(bufferedImage0, bufferedOutputStream0, hashtable0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossless cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("=IS");
      ImageBuilder imageBuilder0 = new ImageBuilder((byte)3, (byte)3, false);
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addInteroperabilityDirectory();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      imageBuilder0.getBufferedImage();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      hashtable0.put("COMPRESSION", mockPrintStream0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, mockPrintStream0, hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid compression parameter, must be numeric: org.evosuite.runtime.mock.java.io.MockPrintStream@55bb889f
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("=-");
      ImageBuilder imageBuilder0 = new ImageBuilder((byte)3, (byte)3, false);
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addInteroperabilityDirectory();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(tiffOutputSet0.byteOrder);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      bufferedImage0.setAccelerationPriority(0.0F);
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.EXIF_DIRECTORY_IFD0;
      hashtable0.put("COMPRESSION", "00110010");
      bufferedImage0.flush();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      MockFile mockFile0 = new MockFile("=-", "=-");
      Short.valueOf((short) (byte)3);
      hashtable0.put("FORMAT", imageBuilder0);
      tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      hashtable1.values();
      MockPrintStream mockPrintStream1 = new MockPrintStream(" <= ");
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, mockPrintStream1, hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid compression parameter, must be numeric: 00110010
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("=IS");
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.addRootDirectory();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(tiffOutputSet0.byteOrder);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/8_image");
      FileSystemHandling.createFolder(evoSuiteFile0);
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.EXIF_DIRECTORY_IFD0;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      int int0 = 40965;
      TagInfoSBytes tagInfoSBytes0 = new TagInfoSBytes("Invalid compression block-size parameter: ", 40965, 0, tiffDirectoryType0);
      byte[] byteArray0 = new byte[1];
      tiffOutputDirectory0.add(tagInfoSBytes0, byteArray0);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      tiffOutputSet0.getOrCreateGPSDirectory();
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Output set has Interoperability Directory Offset field, but no Interoperability Directory
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("=-");
      ImageBuilder imageBuilder0 = new ImageBuilder((byte)7, (byte)7, true);
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addInteroperabilityDirectory();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(tiffOutputSet0.byteOrder);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.EXIF_DIRECTORY_IFD0;
      hashtable0.put("COMPRESSION", tiffDirectoryType0);
      bufferedImage0.flush();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      MockFile mockFile0 = new MockFile("COMPRESSION", "=-");
      Short short0 = Short.valueOf((short) (byte)7);
      hashtable1.put("COMPRESSION", short0);
      tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      Collection<Object> collection0 = new Stack<Object>();
      MockPrintStream mockPrintStream1 = new MockPrintStream("=-");
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, mockPrintStream1, hashtable1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid compression parameter (Only CCITT 1D/Group 3/Group 4, LZW, Packbits and uncompressed supported).
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("=-");
      ImageBuilder imageBuilder0 = new ImageBuilder((byte)3, (byte)3, false);
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addInteroperabilityDirectory();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(tiffOutputSet0.byteOrder);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>((byte)3);
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.EXIF_DIRECTORY_IFD0;
      hashtable0.put("COMPRESSION", tiffDirectoryType0);
      bufferedImage0.flush();
      tiffOutputSet0.dump();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      MockFile mockFile0 = new MockFile("COMPRESSION", "=-");
      Short short0 = Short.valueOf((short) (byte)3);
      hashtable1.put("COMPRESSION", short0);
      hashtable0.values();
      imageBuilder0.getBufferedImage();
      MockPrintStream mockPrintStream1 = new MockPrintStream("=-");
      tiffImageWriterLossy0.writeImage(bufferedImage0, mockPrintStream1, hashtable1);
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy();
      TiffImageWriterLossy tiffImageWriterLossy2 = new TiffImageWriterLossy();
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(mockPrintStream1, tiffOutputSet0.byteOrder);
      tiffImageWriterLossy0.writeImageFileHeader(binaryOutputStream0, (byte)3);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      tiffOutputSet0.getOrCreateGPSDirectory();
      TiffOutputSet tiffOutputSet1 = new TiffOutputSet();
      try { 
        tiffImageWriterLossy2.write(mockPrintStream1, tiffOutputSet1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No directories.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }
}
