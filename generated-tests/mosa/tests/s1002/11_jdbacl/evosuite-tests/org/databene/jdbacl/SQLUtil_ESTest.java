/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:22:48 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayReader;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.io.StreamTokenizer;
import org.apache.derby.catalog.AliasInfo;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.iapi.sql.execute.NoPutResultSet;
import org.apache.derby.iapi.store.raw.Page;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.engine.Session;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = SQLUtil.normalize("a<Bx)_-2C(#$c", true);
      assertEquals("a < Bx) _ - 2C (# $ c ", string0);
      
      String string1 = SQLUtil.removeComments("a < Bx) _ - 2C (# $ c ");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      streamTokenizer0.slashSlashComments(false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "- 0";
      stringArray0[1] = "9810800c-0121-c5e1-a2f5-00000043e718";
      String string1 = SQLUtil.renderColumnListWithTableName("9810800c-0121-c5e1-a2f5-00000043e718", stringArray0);
      assertEquals("9810800c-0121-c5e1-a2f5-00000043e718.- 0, 9810800c-0121-c5e1-a2f5-00000043e718.9810800c-0121-c5e1-a2f5-00000043e718", string1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.removeComments("SELECT * FROM ");
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("SELECT * FROM ", stringArray0, "SELECT * FROM ", "SELECT * FROM ", stringArray0);
      assertEquals("left join SELECT * FROM  as SELECT * FROM  on ", string0);
      
      TableContainer tableContainer0 = new TableContainer("SELECT * FROM ");
      String string1 = SQLUtil.typeAndName(tableContainer0);
      assertNotNull(string1);
      assertEquals("container SELECT * FROM ", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      String string0 = SQLUtil.join((String) null, "", stringArray0, stringArray0[0], stringArray0[1], stringArray0);
      assertEquals("null as null on .null = null.null and .null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table null", string0);
      
      SQLUtil.removeComments("table null");
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.removeComments("20_k!#`v%'@0YlB,{");
      String string0 = SQLUtil.renderValue("20_k!#`v%'@0YlB,{");
      assertEquals("'20_k!#`v%'@0YlB,{'", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("gT-16Nk/|U=CaR(ND");
      Boolean boolean1 = SQLUtil.mutatesStructure("gT-16Nk/|U=CaR(ND");
      assertTrue(boolean1.equals((Object)boolean0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "gT-16Nk/|U=CaR(ND";
      stringArray0[1] = "gT-16Nk/|U=CaR(ND";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("gT-16Nk/|U=CaR(ND = 'gT-16Nk/|U=CaR(ND' AND gT-16Nk/|U=CaR(ND = 'gT-16Nk/|U=CaR(ND'", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "cAJN:fy3S";
      stringArray0[1] = "table null";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("Z0*+h4#=");
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil.addRequiredCondition("table null", stringBuilder0);
      assertEquals("Z0*+h4#= and table null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil.removeComments("SELECT * FROM ");
      String string0 = SQLUtil.normalize("SELECT * FROM ", false);
      assertEquals("SELECT * FROM", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("next");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil.removeComments("table null");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("t", true, defaultDBTable0, "t");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT t CHECK t", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("t", true, defaultDBTable0, "t");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      SQLUtil.normalize("t", true);
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("CHECK t", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.join("SELECT * FROM ", "NCLOB", stringArray0, "*dt>Li<~", "*dt>Li<~", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("SELECTIVITY", stringBuilder0);
      assertEquals("SELECTIVITY", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("SELECT * FROM ", stringArray0, "%@#h\"kn>!7!zj8jt", "%@#h\"kn>!7!zj8jt", stringArray0);
      assertEquals("%@#h\"kn>!7!zj8jt as %@#h\"kn>!7!zj8jt on ", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create unique index");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      String string1 = SQLUtil.substituteMarkers("- 0", "truncate.", streamTokenizer0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLUtil.normalize("!hWO_kBaA&7/?D~", true);
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Session session0 = new Session();
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("a<Bx)_-2>:C(#$c", false, "a<Bx)_-2>:C(#$c", " columnDelimite");
      dBCheckConstraint0.setName(" columnDelimite");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" columnDelimite\" ", stringBuilder0.toString());
      
      String string0 = SQLUtil.normalize(" columnDelimite", false);
      assertEquals("columnDelimite", string0);
      
      String string1 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \" columnDelimite\" ", string1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unexpected error while decoding character data from a large object.");
      StringBuilder stringBuilder0 = new StringBuilder("Unexpected error while decoding character data from a large object.");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop materialized viewx0y28.s", defaultDBTable0, (-524802013), "|~-^rb]");
      defaultDBColumn0.setOwner(defaultDBTable0);
      defaultDBColumn0.getNotNullConstraint();
      String string1 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("null.drop materialized viewx0y28.s", string1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder("Unexpected error while decoding character data from a large object.");
      StringBuilder stringBuilder1 = new StringBuilder("table null");
      SQLUtil.normalize("Unexpected error while decoding character data from a large object.", false);
      SQLUtil.removeComments("table null");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "table null";
      SQLUtil.renderColumnListWithTableName("Unexpected error while decoding character data from a large object.", stringArray0);
      SQLUtil.addRequiredCondition("Unexpected error while decoding character data from a large object..table null", stringBuilder1);
      SQLUtil.addOptionalCondition("BLOB", stringBuilder0);
      assertEquals("Unexpected error while decoding character data from a large object. or BLOB", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      Session session0 = new Session();
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("VcP", false, "VcP", " columnDelimite");
      dBCheckConstraint0.toString();
      dBCheckConstraint0.setName(" columnDelimite");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.isQuery("SELECT * FROM ");
      String string0 = NoPutResultSet.PREVIOUS;
      String[] stringArray0 = new String[0];
      SQLUtil.join("SELECT * FROM ", "file.encoding", stringArray0, "*dt>Li<~D", "*dt>Li<~D", stringArray0);
      SQLUtil.isQuery("SELECT * FROM  join *dt>Li<~D as *dt>Li<~D on ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = SQLUtil.normalize("file.encoding", false);
      assertEquals("file.encoding", string0);
      
      boolean boolean0 = SQLUtil.isQuery("You cannot commit a closed connection.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.typeAndName((DBObject) null);
      String string0 = TypeId.NATIONAL_CHAR_NAME;
      assertEquals("NATIONAL CHAR", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder("Unexpected error while decoding character data from a large object.");
      StringBuilder stringBuilder1 = new StringBuilder("table null");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Unexpected error while decoding character data from a large object.", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1);
      SQLUtil.normalize("Unexpected error while decoding character data from a large object.", false);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      MockFile mockFile0 = new MockFile("Ny.qICof", "Ny.qICof");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      String string0 = SQLUtil.normalize("=v5,74iOvK>T", false);
      assertEquals("= v5, 74iOvK > T", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLUtil.normalize("a<Bx)_-2C(m$c\"", true);
      String string0 = AliasInfo.ALIAS_NAME_SPACE_SYNONYM_AS_STRING;
      assertEquals("S", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = SQLUtil.normalize("20_k!#`v%'@0YlB,{", true);
      assertEquals("20_k ! # ` v % '@0YlB,{'", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.leftJoin("20_k ! # ` v % '@0YlB,{'", stringArray0, "drop materialized view", "20_k!#`v%'@0YlB,{", stringArray0);
      assertEquals("left join drop materialized view as 20_k!#`v%'@0YlB,{ on ", string1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("PRIMARY KEY (, )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.countProviders();
      String string0 = TypeId.CLOB_NAME;
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("SELECT * FROM null WHERE null = null AND null = null");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("create table");
      SQLUtil.isQuery("WQ'{0");
      SQLUtil.normalize("create table", false);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      DBDataType dBDataType0 = DBDataType.getInstance((-4), "*");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("inner", (DBTable) null, dBDataType0);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("*", string1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      String string0 = RawStoreFactory.PAGE_RESERVED_ZERO_SPACE_STRING;
      StringBuilder stringBuilder0 = new StringBuilder();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "pdaqe", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("CONSTRAINT pdaqe PRIMARY KEY (, )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize(")9;G%W9u'BaC*K\"");
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.slashSlashComments(false);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil.mutatesDataOrStructure(" as ");
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin((String) null, (String[]) null, "22019", "%]/Q|_Sewl`'}G:", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      defaultDBTable0.getIndexes();
      StringBuilder stringBuilder1 = new StringBuilder();
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("FCS", stringBuilder0);
      String[] stringArray1 = new String[0];
      SQLUtil.addRequiredCondition("}JFSvVL", stringBuilder2);
      stringBuilder1.append((long) (-2266));
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("SELECT * FROM null WHERE null = null AND null = null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'SELECT * FROM null WHERE null = null AND null = null' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Character character0 = new Character('0');
      SQLUtil.renderValue(character0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.mutatesDataOrStructure("");
      Character character1 = Character.valueOf('0');
      SQLUtil.substituteMarkers("ZQzHN&54<,Qv\u0006?s", "alter session", character1);
      String[] stringArray1 = new String[17];
      stringArray1[0] = "qC#WyRi%";
      stringArray1[1] = "";
      SQLUtil.renderColumnListWithTableName("qC#WyRi%", stringArray1);
      DBSchema dBSchema0 = new DBSchema("s#= K");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insert", dBSchema0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("a<bx)_-2c(#$c");
      DBDataType dBDataType0 = DBDataType.getInstance((-1960007012), "a<bx)_-2c(#$c");
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer1);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("null A<BX)_-2C(#$C(1) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "insert";
      stringArray0[1] = "insert";
      stringArray0[2] = "a<Bx)-2N(%K#$c";
      SQLUtil.renderColumnListWithTableName("a<Bx)-2N(%K#$c", stringArray0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      String string0 = Page.DIAG_MAXROWSIZE;
      SQLUtil.mutatesDataOrStructure("call");
      SQLUtil.isQuery("insert");
      SQLUtil.normalize("insert", false);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer1);
      SQLUtil.normalize("sxRWpgmO,xg%Bvq", true);
      SQLUtil.removeComments("truncate''");
      SQLUtil.isDML("delete''");
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName(",", stringArray0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      String string0 = Page.DIAG_MAXROWSIZE;
      SQLUtil.mutatesDataOrStructure("insert");
      SQLUtil.isQuery("0QevqY{~LM");
      SQLUtil.normalize("alter indexwe&whj-]([ d3:j> ^y", false);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = SQLUtil.normalize("] #<t-+]UMYMMc", true);
      assertEquals("] # < t - + ] UMYMMc", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("0+t4Njlq[eW&YPdvAS$");
      DBDataType dBDataType0 = DBDataType.getInstance(47, "] #<t-+]UMYMMc");
      Integer integer0 = RawTransaction.ABORT;
      Integer.divideUnsigned(47, 2417);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("zU`|<b^P/", defaultDBTable0, dBDataType0, integer0, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("XA9Hxh=|=x| ;fL&q", defaultDBTable0, 47, "] #<t-+]UMYMMc");
      String string1 = SQLUtil.renderColumn(defaultDBColumn1);
      assertEquals("XA9Hxh=|=x| ;fL&q ] #<T-+]UMYMMC NULL", string1);
      
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("XA9Hxh=|=x| ;fL&q", string2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("}$i");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "alter tablenational character";
      stringArray0[1] = "alter tablenational character";
      stringArray0[2] = "}$i";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter tablenational character", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter tablenational character", true, dBUniqueConstraint0);
      DBDataType dBDataType0 = DBDataType.getInstance((-771), "}$i");
      Integer integer0 = new Integer(371);
      Integer integer1 = new Integer((-3831));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("}$i", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.isIdentical(dBUniqueConstraint0);
      SQLUtil.renderColumn(defaultDBColumn0);
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("maintainParentLinks");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("maintainParentLinks", true, defaultDBTable1, "into");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "|%>|Bb/rFk}p:B", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      StringBuilder stringBuilder0 = new StringBuilder("Unexpected error while decoding character data from a large object.");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "|~-^rb]", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[8];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string1);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      String string2 = Dependable.VIEW;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("SELECT * FROM null WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      String string3 = SQLUtil.innerJoin("table null", stringArray0, "SELECT * FROM null WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", "table null", stringArray0);
      assertEquals("SELECT * FROM null WHERE null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null as table null on table null.null = table null.null and table null.null = table null.null and table null.null = table null.null and table null.null = table null.null and table null.null = table null.null and table null.null = table null.null and table null.null = table null.null and table null.null = table null.null", string3);
      
      String string4 = SQLUtil.renderColumnListWithTableName("table null", stringArray0);
      assertEquals("table null.null, table null.null, table null.null, table null.null, table null.null, table null.null, table null.null, table null.null", string4);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLUtil.normalize("a<Bx)_-2C(#$c", true);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "a<Bx)_-2C(#$c";
      SQLUtil.renderColumnListWithTableName("a<Bx)_-2C(#$c", stringArray0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "a<Bx)_-2C(#$c", true, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "a<Bx)_-2C(#$c.a<Bx)_-2C(#$c", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("CONSTRAINT a<Bx)_-2C(#$c.a<Bx)_-2C(#$c PRIMARY KEY ()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"#$c.a<Bx\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = RawStoreFactory.STREAM_FILE_BUFFER_SIZE_PARAMETER;
      StringBuilder stringBuilder0 = new StringBuilder("Unexpected error while decoding character data from a large object.");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "|~-^rb]", false, (String[]) null);
      SQLUtil.renderValue(dBPrimaryKeyConstraint0);
      StringBuilder stringBuilder1 = new StringBuilder("alter indexdrop materialized$view} w ] n.wp");
      stringBuilder1.append(false);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Unexpected error while decoding character data from a large object.", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("Unexpected error while decoding character data from a large object.CONSTRAINT \"Unexpected error while decoding character data from a large object.\" ", stringBuilder0.toString());
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES null()", string1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("SELECT * FROM ", "file.encoding", stringArray0, "*dt>Li<~", "*dt>Li<~", stringArray0);
      assertEquals("SELECT * FROM  join *dt>Li<~ as *dt>Li<~ on ", string0);
      
      boolean boolean0 = SQLUtil.isQuery("SELECT * FROM  join *dt>Li<~ as *dt>Li<~ on ");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '=';
      charArray0[1] = 'T';
      charArray0[2] = 'k';
      charArray0[3] = 'l';
      charArray0[4] = 'H';
      charArray0[5] = '{';
      charArray0[6] = ')';
      charArray0[7] = 'w';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0, 33554432);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pushbackReader0);
      charArrayReader0.read(charArray0);
      streamTokenizer0.nval = (double) 33554432;
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("33554432", string1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = Dependable.COLUMNS_PERMISSION;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "a<Bx)-2N(%K#$c";
      String string1 = TypeId.LONGINT_NAME;
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      SQLUtil.renderValue("a<Bx)-2N(%K#$c");
      SQLUtil.mutatesDataOrStructure("'a<Bx)-2N(%K#$c'");
      SQLUtil.isQuery("ColumnsPrivilege");
      SQLUtil.normalize(" /* scanCount: ", false);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder("Unexpected error while decoding character data from a large object.");
      StringBuilder stringBuilder1 = new StringBuilder("table null");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("table null", defaultDBTable0, 2121, "`(9Lf\"~l=ay#'(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: `(9Lf\"~l=ay#'(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "a<Bx)-2N(%K#$c";
      String string0 = SQLUtil.renderColumnListWithTableName("insert", stringArray0);
      assertEquals("insert.a<Bx)-2N(%K#$c", string0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      Boolean boolean0 = new Boolean("insert");
      String string1 = SQLUtil.normalize("alter sessiono\u0006vffv]$<`].p", true);
      assertEquals("alter sessiono \u0006 vffv ] $ < ` ].p", string1);
      
      VersionNumber.valueOf((String) null);
      String string2 = SQLUtil.normalize("insert.a<Bx)-2N(%K#$c", true);
      assertEquals("insert.a < Bx) - 2N (% K # $ c", string2);
      
      String string3 = Page.DIAG_MINROWSIZE;
      Boolean boolean1 = SQLUtil.mutatesStructure("a<Bx)-2N(%K#$c");
      assertFalse(boolean1);
      
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("alter sessiono  6vffv ] $ < ` ].p");
      assertFalse(boolean2);
      assertNotNull(boolean2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = true;
      SQLUtil.normalize("*/", true);
      String string0 = "1Re[kj`M2&}-nu";
      SQLUtil.isQuery("6E6BR");
      String string1 = "it8bVGO[";
      DBCatalog dBCatalog0 = new DBCatalog("6E6BR");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("1Re[kj`M2&}-nu");
      String string2 = "drop index.";
      DBDataType.getInstance((-2106), "OJh7i[?QI.'");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      SQLUtil.renderValue("*/");
      StringBuilder stringBuilder0 = new StringBuilder("");
      stringBuilder0.append(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "1Re[kj`M2&}-nu";
      stringArray0[1] = "'*/'";
      stringArray0[2] = "*/";
      stringArray0[3] = "it8bVGO[";
      stringArray0[4] = "OJh7i[?QI.'";
      stringArray0[5] = "create table ";
      // Undeclared exception!
      try { 
        stringBuilder0.appendCodePoint((-2106));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder("Unexpected error while decoding character data from a large object.");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "|~-^rb]", false, (String[]) null);
      MockFile mockFile0 = new MockFile("alter table", "table null");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder("Unexpected error while decoding character data from a large object.");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "|~-^rb]", false, (String[]) null);
      SQLUtil.renderValue(dBPrimaryKeyConstraint0);
      StringBuilder stringBuilder1 = new StringBuilder("alter indexdrop materialized view} w ] n.wp");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Unexpected error while decoding character data from a large object.", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      MockFile mockFile0 = new MockFile("Q(", "selectselect * from join selectinto$ < ? $ as selectinto$ < ? $ on");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder("Unexpected error while decoding character data from a large object.");
      DBDataType dBDataType0 = DBDataType.getInstance((-109), "alter indextruncate");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("?", defaultDBTable0, dBDataType0, integer0, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("join", objectArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance((-1166), "");
      DBDataType dBDataType1 = DBDataType.getInstance((-206), "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType2 = DBDataType.getInstance((-3509), "Nh `\"<B=iwFq=0");
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Nh `\"<B=iwFq=0", defaultDBTable0, dBDataType2, integer0, integer1);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType1);
      SQLUtil.renderColumn(defaultDBColumn1);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("`chp");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) dBDataType0;
      PrintWriter printWriter0 = mockPrintWriter1.format("", objectArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertFalse(mockPrintWriter0.equals((Object)printWriter0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "XBM03.D";
      stringArray0[2] = null;
      stringArray0[3] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray1 = new String[2];
      stringArray1[0] = "XBM03.D";
      streamTokenizer0.sval = "XBM03.D";
      Object object0 = new Object();
      defaultDBTable1.equals(object0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = new DBForeignKeyConstraint("G#", true, defaultDBTable1, stringArray1, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint1, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      SQLUtil.normalize("XBM03.D", true);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockFile mockFile0 = new MockFile(")%d", ")%d");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(")%d", true, "JOu59\"!$<-f]_q(eo", "inner");
      defaultDBTable0.addCheckConstraint(dBCheckConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }
}
