/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 02:27:05 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "K[zM_]", "", (String) null, "ConstantValue");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2047);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "p-j}O:~", "p-j}O:~", "", "p-j}O:~");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 0, (String) null, (String) null, (String) null, "'}AYNa/jE5;Q,.KLAZ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3313);
      Object object0 = new Object();
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 1, "", "<S@C%(2LwWdF\"j", (String) null, object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@57795451
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 63359, "wheel.asm.ClassReader", "wheel.asm.ClassReader", (String) null, "wheel.asm.ClassReader");
      Attribute attribute0 = new Attribute((String) null);
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = classWriter0.pool;
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2047);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "p-j}O:~", "p-j}O:~", "", "p-j}O:~");
      fieldWriter0.visitAnnotation("]5.P;vgB{D1*W[,", false);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2047);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "p-j}O:~", "p-j}O:~", "", "p-j}O:~");
      fieldWriter0.visitAnnotation("]5.P;vgB{D1*W[,", true);
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(512);
      classWriter0.version = (-2177);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3051), "", "", "@)~P", "");
      ByteVector byteVector0 = new ByteVector(2);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1469);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "Synthetic", "Synthetic", "Synthetic", (Object) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(64, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2418);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2418, "", "", "", "");
      fieldWriter0.visitAnnotation("", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "K[zM_]", "", (String) null, "ConstantValue");
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(512);
      classWriter0.version = (-2177);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3051), "", "", "@)~P", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(512);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3051), "", "", "@)~P", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3610));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "b@8O", "RuntimeVisibleAnnotations", "&8Sd", "b@8O");
      classWriter0.lastField.visitAnnotation("b@8O", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "$tiCJCLY9/", "", "", "J?IX");
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 2, "J?IX", "J?IX", "J?IX", "J?IX");
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3610));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "b@8O", "RuntimeVisibleAnnotations", "&8Sd", "b@8O");
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3610));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "b@8O", "RuntimeVisibleAnnotations", "&8Sd", "b@8O");
      Attribute attribute0 = new Attribute("b@8O");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }
}
