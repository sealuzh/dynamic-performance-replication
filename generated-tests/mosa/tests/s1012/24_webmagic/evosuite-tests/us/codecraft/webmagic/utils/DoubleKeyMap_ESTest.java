/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:48:26 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>(2117);
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap0);
      doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Integer>();
      Integer integer0 = new Integer(0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put(integer0, (Map<Object, Integer>) hashMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>(2117);
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap0);
      doubleKeyMap0.remove("{k,%QA^KPI'K{0X=7");
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.get("{k,%QA^KPI'K{0X=7", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap1.remove("", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>(2117);
      Object object0 = new Object();
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      doubleKeyMap0.put("O@f^`sJ@6Hl=!S B2_", (Object) "O@f^`sJ@6Hl=!S B2_", "{vLf8=y_Y+");
      doubleKeyMap0.remove("{vLf8=y_Y+");
      Map<Object, String> map0 = doubleKeyMap0.get("{vLf8=y_Y+");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HashMap<Object, Map<Object, Map<Object, String>>> hashMap0 = new HashMap<Object, Map<Object, Map<Object, String>>>();
      DoubleKeyMap<Object, Object, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Map<Object, String>>(hashMap0);
      Object object0 = new Object();
      HashMap<Object, Map<String, String>> hashMap1 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap1 = new DoubleKeyMap<Object, String, String>(hashMap1);
      Map<Object, Map<Object, String>> map0 = doubleKeyMap1.newMap();
      hashMap0.put(object0, map0);
      doubleKeyMap0.remove(object0, (Object) hashMap0);
      doubleKeyMap0.remove((Object) hashMap0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, Object> doubleKeyMap2 = null;
      try {
        doubleKeyMap2 = new DoubleKeyMap<String, Integer, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      Integer integer0 = new Integer(1);
      doubleKeyMap0.put("", "", integer0);
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      doubleKeyMap0.put("", "", integer0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, String> doubleKeyMap1 = new DoubleKeyMap<Object, Object, String>(hashMap0, class0);
      Object object0 = new Object();
      doubleKeyMap1.get((Object) "", object0);
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Integer>();
      doubleKeyMap2.newMap();
      HashMap<String, Map<Object, Object>> hashMap1 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap3 = new DoubleKeyMap<String, Object, Object>();
      doubleKeyMap3.get("", (Object) null);
      Map<String, Integer> map0 = doubleKeyMap0.get("wrong proto type map ");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>(hashMap0);
      HashMap<Integer, Map<String, Object>> hashMap1 = new HashMap<Integer, Map<String, Object>>();
      Class<HashMap> class0 = HashMap.class;
      doubleKeyMap0.remove((Object) class0);
      DoubleKeyMap<Integer, String, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Object>(hashMap1, class0);
      Integer integer0 = new Integer((-3619));
      String string0 = "su}~jHmhf6#+rwm,Zm_";
      doubleKeyMap1.put(integer0, "80BlTx*q_AV :_,e", (Object) null);
      BiFunction<Object, Object, Map<Object, String>> biFunction0 = (BiFunction<Object, Object, Map<Object, String>>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      doubleKeyMap1.remove(integer0, "su}~jHmhf6#+rwm,Zm_");
      doubleKeyMap0.get((Object) hashMap0);
      HashMap<Object, Map<String, Object>> hashMap2 = new HashMap<Object, Map<String, Object>>();
      DoubleKeyMap<Object, String, Object> doubleKeyMap2 = new DoubleKeyMap<Object, String, Object>(hashMap2);
      DoubleKeyMap<Integer, String, String> doubleKeyMap3 = new DoubleKeyMap<Integer, String, String>(class0);
      Map<Integer, Map<Object, Object>> map0 = doubleKeyMap3.newMap();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap4 = new DoubleKeyMap<Integer, Object, Object>(map0);
      Map<String, Object> map1 = doubleKeyMap4.newMap();
      // Undeclared exception!
      try { 
        doubleKeyMap2.put((Object) integer0, map1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>();
      Map<String, Map<Integer, Map<Object, String>>> map0 = doubleKeyMap0.newMap();
      Integer integer0 = new Integer((-321));
      doubleKeyMap0.put("", integer0, "us.codecraft.webmagic.utils.MultiKeyMapBase");
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Integer, Map<Object, String>> doubleKeyMap1 = new DoubleKeyMap<String, Integer, Map<Object, String>>(map0, class0);
      HashMap<Object, Map<Integer, String>> hashMap0 = new HashMap<Object, Map<Integer, String>>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap2 = new DoubleKeyMap<Object, Integer, String>(hashMap0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      hashMap0.replace((Object) doubleKeyMap2, (Map<Integer, String>) hashMap1);
      Integer integer1 = new Integer((-1044));
      Integer integer2 = new Integer(3208);
      String string0 = doubleKeyMap0.get("", integer2);
      assertNull(string0);
  }
}
