/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 03:16:21 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.lang.reflect.Member;
import java.util.Enumeration;
import java.util.Locale;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(reference_kind = ", "(reference_kind = ", "(reference_kind = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `reference_kind = '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("KFX{w3L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KFX{w3L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = Utility.getSignature("\t<");
      assertEquals("L<;", string0);
      
      byte byte0 = Utility.typeOfSignature("L<;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = Utility.getSignature(" (");
      assertEquals("L(;", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 125, (int) (byte)32, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-116);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-116), (int) (byte) (-116), true);
      assertEquals("0:    f2l\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = Utility.clearBit(60, 60);
      assertEquals(60, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = Utility.clearBit(95, 4);
      assertEquals(79, int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = Utility.accessToString(174, true);
      assertEquals("private protected static transient", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Utility.accessToString((-1402), true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("IW`fvLUVKj", "char", "private protected transient strictfp synthetic annotation enum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: IW`fvLUVKj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Object[] objectArray0 = new Object[5];
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{null, null, null, null, null}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = Utility.compactClassName("(eference_Ykind = ");
      assertEquals("(eference_Ykind = ", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = Utility.format((-3333), (-3333), true, 's');
      assertEquals("-3333", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "r-jbJb%;X1";
      String string0 = Utility.printArray(objectArray0);
      assertEquals("{r-jbJb%;X1}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.isJavaIdentifierPart('^');
      String string0 = Utility.fillup("address", 3699, false, ' ');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P*xnb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P*xnb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      try { 
        Utility.typeOfSignature("0vLcEj@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0vLcEj@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-3223), 189);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = Utility.isSet(40, 148);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte byte0 = Constants.T_REFERENCE;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) byteArray0;
      String string0 = Utility.printArray(objectArray0, true, true);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("!`&@g4%_KG`dK", "[]", "!`&@g4%_KG`dK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: !`&@g4%_KG`dK
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      try { 
        Utility.typeOfSignature("byte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      short short0 = Utility.searchOpcode("long");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Utility.isJavaIdentifierPart('L');
      try { 
        Utility.typeOfSignature("AnnotationDefault");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AnnotationDefault
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String string0 = Utility.printArray(objectArray0, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = Utility.replace("?>...", "?>...", "?>...");
      assertEquals("?>...", string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Utility.methodSignatureReturnType("Byte code error: ");
      try { 
        Utility.typeOfMethodSignature("byte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: byte
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("R[fX#xBG+kp`)", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R[fX#xBG+kp`)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals(1, byteSequence0.getIndex());
      
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantPool0.copy();
      constantPool0.copy();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)119;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)119, 91, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Utility.getSignature("impdep2");
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      constantPool0.copy();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte)69;
      byteArray0[3] = (byte) (-87);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 66, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-36);
      byteArray0[0] = (byte)23;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)23, (int) (byte)23, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("s o}e=NJ$x", false);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("s$mo$7de$3dNJ$x", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, 1036, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      try { 
        Utility.typeOfSignature("HOdo t$JLr#yLe.F=%;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HOdo t$JLr#yLe.F=%;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Utility.convertString("5l<w4aCG&vJ7%[Q");
      try { 
        Utility.typeOfSignature("5l<w4aCG&vJ7%[Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5l<w4aCG&vJ7%[Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-92);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-92), 825, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = Member.PUBLIC;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("h?lIRG[mERb4}uP", (String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[mERb4}uP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("h[c6d+^0AoD~CILz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[c6d+^0AoD~CILz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-1L));
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantLong0;
      try { 
        Utility.typeOfSignature("@H|9h&`r!8e+Mb@`G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @H|9h&`r!8e+Mb@`G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Z");
      assertEquals((byte)4, byte0);
      
      String string0 = Utility.convertString("\"-Nj^fn@{2m\"-Nj^fn@{2m");
      assertEquals("\\\"-Nj^fn@{2m\\\"-Nj^fn@{2m", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Utility.convertString("M6nD}mJEn");
      try { 
        Utility.typeOfSignature("M6nD}m\\JEn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M6nD}m\\JEn
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utility.convertString("'Oa");
      short short0 = Constants.PUTSTATIC2_QUICK;
      // Undeclared exception!
      try { 
        Utility.signatureToString("'Oa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `'Oa'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.fillup("}", 83, true, '}');
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) fileSystemHandling0;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      // Undeclared exception!
      try { 
        Utility.signatureToString("QqO~U<,*LO1)0xpt", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `QqO~U<,*LO1)0xpt'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Utility.getSignature("impdep2");
      ConstantLong constantLong0 = new ConstantLong((-906L));
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantLong0;
      constantArray0[4] = (Constant) constantLong0;
      constantArray0[5] = (Constant) constantLong0;
      constantArray0[6] = (Constant) constantLong0;
      constantArray0[7] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-41);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Limpdep2;";
      Utility.methodTypeToSignature("anwa=j|c7F|+8=s", stringArray0);
      boolean boolean0 = false;
      Utility.compactClassName("(LLimpdep2;;)Lanwa=j|c7F|+8=s;", "-g", false);
      Utility.compactClassName("Limpdep2;");
      Utility.convertString("Limpdep2;");
      Utility.typeOfMethodSignature("(LLimpdep2;;)Lanwa=j|c7F|+8=s;");
      try { 
        Utility.typeOfMethodSignature("-g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      Utility.searchOpcode("lushr");
      try { 
        Utility.typeOfSignature("<illegal type>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal type>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      try { 
        Utility.typeOfSignature(",'e6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,'e6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.typeOfSignature(" arg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  arg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      short short0 = Constants.PUTSTATIC2_QUICK;
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-47);
      byteArray0[0] = (byte) (-94);
      byteArray0[2] = (byte) (-69);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-94), 170, false);
      assertEquals("0:    if_icmpge\t\t#187\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte) (-59);
      byteArray0[1] = (byte) (-59);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)32, (int) (byte)0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1280), 221, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lmul
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "(reference_kind = ";
      try { 
        Utility.typeOfSignature("(reference_kind = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (reference_kind = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)89;
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)106;
      String string0 = "Warning:";
      try { 
        Utility.typeOfSignature("Warning:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Warning:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = Utility.convertString("R08 Q");
      assertEquals("R08 Q", string0);
      assertNotNull(string0);
      
      short short0 = Utility.searchOpcode("R08 Q");
      assertEquals((short) (-1), short0);
      
      try { 
        Utility.typeOfSignature("R08 Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R08 Q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("sfo}`'NJ$x", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)115, (byte)102, (byte)111, (byte)125, (byte)96, (byte)39, (byte)78, (byte)74, (byte)43}, byteArray0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("sfo$7d$60$tNJ$x", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)115, (byte)102, (byte)111, (byte)125, (byte)96, (byte)39, (byte)78, (byte)74, (byte)43}, byteArray0);
      
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2194), (-1081), false);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    drem\n1:    fsub\n2:    ddiv\n3:    lushr\n4:    iadd\n5:    dload_1\n6:    astore_3\n7:    dstore_3\n8:    aload_1\n", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)115, (byte)102, (byte)111, (byte)125, (byte)96, (byte)39, (byte)78, (byte)74, (byte)43}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("TG=9HUi1@");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, false);
      assertNull(string0);
      
      String string1 = Utility.getSignature("jCIC#gr#<");
      assertEquals("LjCIC#gr#<;", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      try { 
        Utility.typeOfSignature("6%#V%Ig>6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6%#V%Ig>6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      try { 
        Utility.typeOfSignature("%-qlZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %-qlZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      try { 
        Utility.typeOfSignature("O(}6i2\"=5Lay/*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O(}6i2\"=5Lay/*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalid type: ");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals(7, constantPool0.getLength());
      assertEquals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      String string1 = Utility.getSignature("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("L1)null;", string1);
      assertNotNull(string1);
      
      String string2 = Utility.signatureToString("L1)null;");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("1)null", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte) (-34);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      assertEquals(0, byteSequence0.getIndex());
      assertNotNull(byteSequence0);
      assertArrayEquals(new byte[] {(byte)83, (byte) (-91), (byte) (-30), (byte) (-34)}, byteArray0);
      
      String string3 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(1, byteSequence0.getIndex());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("aastore", string3);
      assertNotNull(string3);
      assertArrayEquals(new byte[] {(byte)83, (byte) (-91), (byte) (-30), (byte) (-34)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = Utility.getSignature("T)");
      assertEquals("LT);", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("T)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      try { 
        Utility.typeOfSignature("9pyFLNA`K|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9pyFLNA`K|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      try { 
        Utility.typeOfSignature("G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      assertEquals(256, int0);
      
      try { 
        Utility.typeOfSignature("1knX&8Vo,xm/mC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1knX&8Vo,xm/mC
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals(7, constantPool0.getLength());
      assertEquals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n", string0);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("L1)null;", string1);
      assertNotNull(string1);
      
      String string2 = Utility.signatureToString("L1)null;");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("1)null", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)36;
      ConstantLong constantLong0 = new ConstantLong((byte)36);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(36L, constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)36, (int) (byte)36, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = Utility.signatureToString("[Ft-b2Tln!5OsEe\"c", true);
      assertEquals("float[]", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "[`a";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("[`a", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ``a'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = Utility.convertString("R08 Q");
      assertEquals("R08 Q", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-68), (int) (byte) (-111), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte) (-108);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 178, 178, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = Utility.convertString("'Oa");
      assertEquals("\\'Oa", string0);
      assertNotNull(string0);
      
      short short0 = Constants.I2D;
      assertEquals((short)135, short0);
      
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-98);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short)135, (int) (byte) (-78), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte) (-46);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1550), (int) (byte) (-93), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmpgt\t\t#28176
         // 3:    lload_3
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[0] = (byte)41;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)41, 179, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool2.getLength());
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertNotNull(constantPool2);
      
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)27;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 119, (int) (byte)27, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(2122L);
      assertEquals(2122L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      Constant[] constantArray1 = new Constant[7];
      assertFalse(constantArray1.equals((Object)constantArray0));
      
      constantArray1[0] = (Constant) constantLong0;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)108, 1147, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = Utility.getSignature("impdep2");
      assertEquals("Limpdep2;", string0);
      assertNotNull(string0);
      
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-119);
      String string1 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-125), 160);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("0:    lxor\n1:    l2f\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-125), (byte) (-119), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byte byte0 = Constants.CONSTANT_InterfaceMethodref;
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = Utility.compactClassName("<Gk17Zb[[0u^MO", "<Gk17Zb[[0u^MO", true);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      try { 
        Utility.typeOfSignature("Q>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byte[] byteArray1 = Utility.decode("I>Q[;^X^", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)73, (byte)62, (byte)81, (byte)91, (byte)127, (byte)59, (byte)94, (byte)88, (byte)94}, byteArray1);
      
      String string0 = Utility.methodSignatureReturnType("I>Q[;^X^");
      assertEquals("int", string0);
      assertNotNull(string0);
      
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-123), (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)73, (byte)62, (byte)81, (byte)91, (byte)127, (byte)59, (byte)94, (byte)88, (byte)94}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = Utility.getSignature("%");
      assertEquals("L%;", string0);
      assertNotNull(string0);
      
      String string1 = Utility.signatureToString("L%;");
      assertFalse(string1.equals((Object)string0));
      assertEquals("%", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      assertEquals(256, int0);
      
      char char0 = '^';
      boolean boolean0 = Utility.isJavaIdentifierPart('^');
      assertFalse(boolean0);
      
      String string0 = "&L1[#8^`";
      try { 
        Utility.typeOfSignature("&L1[#8^`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &L1[#8^`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "d";
      String string1 = Utility.convertString("d");
      assertTrue(string1.equals((Object)string0));
      assertEquals("d", string1);
      assertNotNull(string1);
      
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)36;
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte)36);
      assertEquals(36L, constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      byte byte0 = Utility.typeOfSignature("Sf4p");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      try { 
        Utility.typeOfSignature(".jar");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .jar
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Caq+F6@2],?z");
      assertEquals((byte)5, byte0);
      
      byte byte1 = Utility.typeOfSignature("Z~y,H8");
      assertFalse(byte1 == byte0);
      assertEquals((byte)4, byte1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = ">\t";
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      assertEquals(256, int0);
      
      try { 
        Utility.typeOfSignature("=lM$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =lM$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("D5hQiDGm^&iajMq;R]");
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      try { 
        Utility.typeOfSignature("UQHgI.IGb| |&4Rb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UQHgI.IGb| |&4Rb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      ConstantInteger constantInteger0 = new ConstantInteger(2342);
      assertEquals(2342, constantInteger0.getBytes());
      assertEquals((byte)3, constantInteger0.getTag());
      assertNotNull(constantInteger0);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(7, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      ConstantPool constantPool3 = constantPool1.copy();
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantPool3.getLength());
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool0);
      assertNotNull(constantPool3);
      
      ConstantPool constantPool4 = constantPool3.copy();
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool3));
      assertFalse(constantPool1.equals((Object)constantPool3));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertEquals(7, constantPool3.getLength());
      assertEquals(7, constantPool4.getLength());
      assertNotSame(constantPool0, constantPool4);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool1, constantPool3);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool4);
      assertNotSame(constantPool1, constantPool0);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool2);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool4);
      assertNotSame(constantPool4, constantPool3);
      assertNotSame(constantPool4, constantPool2);
      assertNotSame(constantPool4, constantPool0);
      assertNotSame(constantPool4, constantPool1);
      assertNotNull(constantPool4);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-49);
      try { 
        Utility.typeOfSignature(")7XCJBFP");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )7XCJBFP
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)49;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 144, 144, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      
      byte byte0 = Utility.typeOfSignature("LocalVariableTypeTable");
      assertEquals((byte)14, byte0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("LocalVariableTypeTable", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LocalVariableTypeTable
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(8, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(8, constantPool0.getLength());
      assertEquals(8, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-49);
      byteArray0[2] = (byte) (-49);
      try { 
        Utility.typeOfSignature("#x5BE)Yzj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #x5BE)Yzj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      try { 
        Utility.typeOfSignature("/*%Fl7nA|!F@:0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /*%Fl7nA|!F@:0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)69;
      byteArray0[2] = (byte)73;
      byteArray0[2] = (byte)73;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-1), 165, false);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("0:    fstore_2\n1:    nop\n2:    dstore_2\n3:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)69, (byte)0, (byte)73, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-56);
      byteArray0[3] = (byte) (-35);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 170, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-111);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-111), (int) (byte) (-111), false);
      assertEquals("0:    i2b\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-111), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-104);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 191, (-2420), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*;R:B24Es3t{{&|Kkq*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;R:B24Es3t{{&|Kkq*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertEquals(5, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)109;
      byte byte0 = Utility.typeOfSignature("[,KSh5oI_4FS");
      assertEquals((byte)13, byte0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((byte)56);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(56L, constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)56, 71, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)29, 1346, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("XTG=9HUi1@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XTG=9HUi1@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      try { 
        Utility.typeOfSignature("K}aeN3:7uf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: K}aeN3:7uf
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.classOrInterface((-798));
      assertEquals("class", string0);
      assertNotNull(string0);
      
      int int0 = Utility.setBit(69, 67);
      assertEquals(77, int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 12, 58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)93, 137, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = Pattern.DOTALL;
      assertEquals(32, int0);
      
      try { 
        Utility.typeOfSignature("X/UDhz{#X1o?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X/UDhz{#X1o?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)106;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)106, (int) (byte)106, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(5, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte)122;
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-104), (int) (byte)109, false);
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool2));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool2);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("0:    ldiv\n1:    ldiv\n2:    ishr\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)109, (byte)109, (byte)122}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("ZG)J;n%>nvjchFgj");
      assertEquals((byte)4, byte0);
      
      String string0 = Utility.signatureToString("ZG)J;n%>nvjchFgj", false);
      assertEquals("boolean", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[Ft-b2Tln!5OsEe\"c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [Ft-b2Tln!5OsEe\"c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      short short0 = Constants.PUTSTATIC2_QUICK;
      assertEquals((short)213, short0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-85);
      byteArray0[6] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-85), (int) (byte)48, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)42, 6, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-128);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 123, (int) (byte) (-128), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("S=U\"Sz", true);
      assertEquals("short", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = Pattern.DOTALL;
      assertEquals(32, int0);
      
      String string0 = Utility.signatureToString("VV");
      assertEquals("void", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)88;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2180), 70, false);
      assertEquals("0:    astore_0\n1:    pop2\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)75, (byte)88}, byteArray0);
      
      String string1 = Utility.signatureToString("D");
      assertFalse(string1.equals((Object)string0));
      assertEquals("double", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("FImq5*\".");
      assertEquals((byte)6, byte0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("W", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = Utility.signatureToString("Illegally nested brackets:");
      assertEquals("int", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("invokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokestatic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)81;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1563), (int) (byte)81, true);
      assertEquals("0:    fastore\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)81}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-73), 44, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-66);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 125, 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-61);
      String string0 = Utility.classOrInterface((byte) (-61));
      assertEquals("interface", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      String string1 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-61), (int) (byte) (-61), true);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("0:    monitorexit\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-61), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = Utility.convertString("aZ{cA;GLW ");
      assertEquals("aZ{cA;GLW ", string0);
      assertNotNull(string0);
      
      try { 
        Utility.typeOfSignature("+wTo*Q#^=5|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: wTo*Q#^=5|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)105, 57, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      short short0 = Utility.searchOpcode("char");
      assertEquals((short) (-1), short0);
      
      try { 
        Utility.typeOfSignature("! 4E7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  4E7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      short short0 = Constants.PUTSTATIC2_QUICK;
      assertEquals((short)213, short0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[6] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 41, 46, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-89);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-89), (int) (byte) (-89), true);
      assertEquals("0:    nop\n1:    goto\t\t#1\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-89), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = Utility.convertString("'Oa");
      assertEquals("\\'Oa", string0);
      assertNotNull(string0);
      
      short short0 = Constants.PUTSTATIC2_QUICK;
      assertEquals((short)213, short0);
      
      try { 
        Utility.typeOfSignature("'Oa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'Oa
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)90, (int) (byte)54, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte)89;
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-454), (int) (byte)55, false);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("0:    iaload\n1:    dup\n2:    iaload\n3:    dcmpg\n4:    dcmpg\n5:    iaload\n6:    lstore\t\t%89\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)46, (byte)89, (byte)46, (byte) (-104), (byte) (-104), (byte)46, (byte)55, (byte)89}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte) (-57);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-57), (int) (byte) (-115), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    sipush\t\t91
         // 3:    f2d
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 192, 3557, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-99);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-84);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1057, 20, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3(
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      assertEquals("<illegal type>", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)78;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)78, 151, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)17, (-1124), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-93), (-4586), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(4, constantPool0.getLength());
      assertEquals(4, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2623, 2623, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("2", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)50}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 93, (int) (byte)50, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)85;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 72, (int) (byte)85, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      String string0 = "char";
      short short0 = Utility.searchOpcode("char");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)116;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)116, (int) (short) (-1), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)125;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-116), 1147, true);
      assertEquals("0:    f2l\n1:    lushr\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)61;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-4558), (int) (byte)106, false);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    fastore\n1:    fmul\n2:    istore_2\n3:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)81, (byte)106, (byte)61, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string0 = Utility.getSignature("impHdep2");
      assertEquals("LimpHdep2;", string0);
      assertNotNull(string0);
      
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(8, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(8, constantPool0.getLength());
      assertEquals(8, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-90);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-90), (int) (byte)119, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    dneg
         // 2:    dneg
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Ec");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ec
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Ll$8b$I$A$A$A$A$AAA$A;V");
      assertEquals((byte)14, byte0);
      
      try { 
        Utility.typeOfSignature("8`FWgn ^d`(*~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8`FWgn ^d`(*~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-97);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-97), 51, true);
      assertEquals("0:    if_icmpeq\t\t#-24832\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = Utility.signatureToString("Caq+F6@2],?z");
      assertEquals("char", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)116, (int) (byte)46, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 11776. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "O?^<e\\\"";
      try { 
        Utility.methodSignatureReturnType("O?^<e\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O?^<e\"'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = Utility.convertString("neYarray");
      assertEquals("neYarray", string0);
      assertNotNull(string0);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)114;
      String string1 = Utility.codeToString(byteArray0, constantPool0, (-552), (int) (byte)114, true);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, constantPool0.getLength());
      assertEquals("0:    frem\n1:    nop\n", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)114, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-80);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 164, (int) (byte)56, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      short short0 = Constants.PUTSTATIC2_QUICK;
      assertEquals((short)213, short0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-75);
      byteArray0[6] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 41, 46, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)7;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)62, (byte)7, (byte)0, (byte)0}, byteArray0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)62, 16, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals(7, constantPool0.getLength());
      assertEquals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      String string1 = Utility.getSignature("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("L1)null;", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)47, (int) (byte)47, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      assertEquals(256, int0);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantDouble constantDouble0 = new ConstantDouble(256);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(256.0, constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-60);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2944), (int) (byte) (-60), false);
      assertEquals(2, constantPool0.getLength());
      assertEquals("0:    wide\t(wide)\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[4] = (byte) (-77);
      ConstantPool constantPool2 = constantPool0.copy();
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(2, constantPool0.getLength());
      assertEquals(2, constantPool2.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertNotNull(constantPool2);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool2, 188, 110, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Constant pool at index 0 is null.
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)48, (int) (byte)48, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)95;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)95, 133, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(8, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)118;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)118, (int) (byte)118, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)86;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)86, (-507), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), (int) (byte) (-74), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = Utility.convertString("neYarray");
      assertEquals("neYarray", string0);
      assertNotNull(string0);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte)68;
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-5), (int) (byte)29, true);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, constantPool0.getLength());
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    iload_3\n3:    <illegal opcode>\n4:    fstore_1\n", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-5), (byte)29, (byte) (-5), (byte)68}, byteArray0);
      
      try { 
        Utility.typeOfSignature("invokedynamic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: invokedynamic
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-115);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-94), (int) (byte)17, false);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals(0, constantPool0.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertEquals("0:    sipush\t\t91\n3:    f2d\n4:    nop\n5:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)17, (byte)0, (byte)91, (byte) (-115), (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)30;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)30, (int) (byte)30, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-100);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-2853), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-82);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 154, 3835, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-72);
      String string0 = "7,e`XA\\ $2'";
      try { 
        Utility.typeOfSignature("7,e`XA $2'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7,e`XA $2'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(9, constantPool0.getLength());
      assertEquals(9, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)53, (int) (byte) (-74), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-70), 179, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 83, (int) (byte) (-67), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-104);
      try { 
        Utility.typeOfSignature("\"Uo:L!*}~Icq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"Uo:L!*}~Icq
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("L$l$8b$I$A$A$A$A$A$A$A;V");
      assertEquals((byte)14, byte0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)14;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)14, (int) (byte)14, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("L$l$8b$I$A$A$A$A$A$A$A;V");
      assertEquals((byte)14, byte0);
      
      byte[] byteArray0 = Utility.decode("L$l$8b$I$A$A$A$A$A$A$A;V", false);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte) (-41);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 91, 91, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)86;
      byteArray0[1] = (byte)52;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 696, 89, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)36;
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-117);
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-117), (int) (byte)36, true);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals("0:    f2i\n1:    nop\n2:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)88;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2163), 70, true);
      assertEquals("0:    nop\n1:    pop2\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)88}, byteArray0);
      
      String string1 = Utility.signatureToString("D");
      assertFalse(string1.equals((Object)string0));
      assertEquals("double", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('^');
      assertFalse(boolean0);
      
      try { 
        Utility.methodSignatureReturnType("Dm2rD[)E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Constant[] constantArray0 = new Constant[16];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(16, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(16, constantPool0.getLength());
      assertEquals(16, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 66, 1663, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals(7, constantPool0.getLength());
      assertEquals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      String string1 = Utility.getSignature("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("L1)null;", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 42, 182, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      short short0 = Constants.PUTSTATIC2_QUICK;
      assertEquals((short)213, short0);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("KZRnw%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KZRnw%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("yf1EMxd)Jt3%");
      assertEquals("long", string0);
      assertNotNull(string0);
      
      String string1 = Constants.ILLEGAL_TYPE;
      assertFalse(string1.equals((Object)string0));
      assertEquals("<illegal type>", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("vh", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `vh'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-1L));
      assertEquals((-1L), constantLong0.getBytes());
      assertEquals((byte)5, constantLong0.getTag());
      assertNotNull(constantLong0);
      
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantLong0;
      ConstantLong constantLong1 = (ConstantLong)constantArray0[0].copy();
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals((-1L), constantLong1.getBytes());
      assertNotSame(constantLong1, constantLong0);
      assertNotNull(constantLong1);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 46, (int) (byte)63, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-104);
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)89;
      byteArray1[1] = (byte) (-104);
      byteArray1[2] = (byte)89;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)65, (byte)0, (byte)89, (byte) (-104)}, byteArray0);
      assertArrayEquals(new byte[] {(byte)89, (byte) (-104), (byte)89, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[21];
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-1989), (int) (byte)71, true);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals(1, constantPool0.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n", "0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n10:   nop\n11:   nop\n12:   nop\n13:   nop\n14:   nop\n15:   nop\n16:   nop\n17:   nop\n18:   nop\n19:   nop\n20:   nop\n", "static", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    nop
         // 8:    nop
         // 9:    nop
         // 10:   nop
         // 11:   nop
         // 12:   nop
         // 13:   nop
         // 14:   nop
         // 15:   nop
         // 16:   nop
         // 17:   nop
         // 18:   nop
         // 19:   nop
         // 20:   nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)25, (int) (byte)111, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)110;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      String string0 = Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-115), (int) (byte) (-57), false);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("0:    fdiv\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)110, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-73), (int) (byte)81, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fastore
         // 1:    lor
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals(7, constantPool0.getLength());
      assertEquals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-10);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The list of suffixes must not be null");
      assertFalse(boolean0);
      
      byteArray0[1] = (byte) (-107);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 181, 181, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(5, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(5, constantPool0.getLength());
      assertEquals(5, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4486, (int) (byte)46, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-49);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 42, (int) (byte) (-119), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 30, 79, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("L$l$8b$I$A$A$A$A$A$A$A;V");
      assertEquals((byte)14, byte0);
      
      byte[] byteArray0 = Utility.decode("~$$A8~", false);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)126, (byte)46, (byte)65, (byte)56, (byte)126}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("L$l$8b$I$A$A$A$A$A$A$A;V");
      assertEquals((byte)14, byte0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)79;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-83);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-83), (int) (byte) (-83), true);
      assertEquals("0:    nop\n1:    lreturn\n2:    lreturn\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-83), (byte) (-83)}, byteArray0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("L$l$8b$I$A$A$A$A$A$A$A;V", "L$l$8b$I$A$A$A$A$A$A$A;V", "L$l$8b$I$A$A$A$A$A$A$A;V", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L$l$8b$I$A$A$A$A$A$A$A;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)65;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)65, (int) (byte)89, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals(7, constantPool0.getLength());
      assertEquals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n", string0);
      assertNotNull(string0);
      
      String string1 = Utility.getSignature("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("L1)null;", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)89;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)89, 3, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(9, constantPool0.getLength());
      assertEquals(9, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-126);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 123, (int) (byte) (-126), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte)25;
      byteArray0[7] = (byte) (-106);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-41), (int) (byte) (-106), true);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertEquals(7, constantPool0.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertEquals("0:    dsub\n1:    <illegal opcode>\n2:    nop\n3:    dsub\n4:    ifgt\t\t#17437\n7:    fcmpg\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)103, (byte) (-41), (byte)0, (byte)103, (byte) (-99), (byte)68, (byte)25, (byte) (-106)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-27);
      int int0 = 56;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 56, 56, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-124), (int) (byte) (-124), true);
      assertEquals("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string1 = Utility.convertString("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    nop\\n1:    nop\\n2:    nop\\n3:    nop\\n4:    nop\\n5:    nop\\n6:    nop\\n7:    nop\\n", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("J");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals(7, constantPool0.getLength());
      assertEquals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)4;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 707, (int) (byte)0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-120);
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-605), 370, false);
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertEquals("0:    nop\n1:    <illegal opcode>\n2:    nop\n3:    l2i\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-41), (byte)0, (byte) (-120), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-9);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$f7$A$A$A", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)0, (byte)0, (byte)0}, byteArray0);
      
      try { 
        Utility.decode("$f7$A$A$A", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_RESET;
      assertEquals((byte)121, byte0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = Utility.decode("Invalid StackMapfame_type: ", false);
      assertNotNull(byteArray0);
      
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("Invalid$mStackMapfame_type$3a$m", string0);
      assertNotNull(string0);
      
      String string1 = Utility.replace("Invalid$mStackMapfame_type$3a$m", "_v'QlF", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Invalid$mStackMapfame_type$3a$m", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-63);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-47), (int) (byte) (-47), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(9, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = constantPool0.copy();
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(9, constantPool0.getLength());
      assertEquals(9, constantPool2.getLength());
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool1);
      assertNotNull(constantPool2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-52);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)97, 153, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("L$l$8b$I$A$A$A$A$A$A$A;V");
      assertEquals((byte)14, byte0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)79;
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-83);
      byteArray1[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray1[3] = (byte)79;
      String string0 = Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte) (-106), 93, false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertEquals("0:    lreturn\n1:    dconst_0\n2:    nop\n3:    iastore\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-83), (byte)14, (byte)0, (byte)79}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = "UQHgI.IGb| |&4Rb";
      // Undeclared exception!
      try { 
        Utility.signatureToString("UQHgI.IGb| |&4Rb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UQHgI.IGb| |&4Rb'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-16);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-16), 512, true);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    dmul\n1:    imul\n2:    ixor\n3:    <illegal opcode>\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)107, (byte)104, (byte) (-126), (byte) (-16)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)21;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3149), (-3149), false);
      assertEquals("0:    nop\n1:    iload\t\t%0\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)21, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = Utility.convertString("neYarray");
      assertEquals("neYarray", string0);
      assertNotNull(string0);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)24, (int) (byte) (-115), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = Utility.accessToString(82);
      assertEquals("private final volatile", string0);
      assertNotNull(string0);
      
      int int0 = Utility.setBit(82, 512);
      assertEquals(83, int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)84;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 91, (int) (byte)84, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-112);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-112), (int) (byte) (-112), false);
      assertEquals("0:    d2f\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-112), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      short short0 = Constants.PUTSTATIC2_QUICK;
      assertEquals((short)213, short0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-46);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 160, 160, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      short short0 = Constants.PUTSTATIC2_QUICK;
      assertEquals((short)213, short0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)46;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)73, true);
      assertEquals("0:    if_icmple\t\t#-7168\n3:    dstore_2\n4:    istore_3\n5:    iaload\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-28), (byte)0, (byte)73, (byte)62, (byte)46}, byteArray0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("a4 e4 00 49 3e 2e", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-92), (byte) (-28), (byte)0, (byte)73, (byte)62, (byte)46}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals(7, constantPool0.getLength());
      assertEquals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      String string1 = Utility.getSignature("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("L1)null;", string1);
      assertNotNull(string1);
      
      String string2 = Utility.signatureToString("L1)null;");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("1)null", string2);
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-82);
      byteArray0[4] = (byte) (-12);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)70, 1741);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      short short0 = Constants.PUTSTATIC2_QUICK;
      assertEquals((short)213, short0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)77;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 145, (-2653), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals(7, constantPool0.getLength());
      assertEquals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)4;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)80, 8, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-27);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)98, 213, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-71);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-71), (int) (byte) (-71), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(7, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)44;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)24, (int) (byte)24, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Constant[] constantArray0 = new Constant[9];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte) (-25);
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4627, (int) (byte)1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      int int0 = Pattern.DOTALL;
      assertEquals(32, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$r$ff$ff$ff", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)37, (byte) (-1), (byte) (-1), (byte) (-1)}, byteArray0);
      
      byte[] byteArray1 = Utility.decode("eTB7T>+\u0002z?B9$/0$", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "eTB7T>+\u0002z?B9$/0$";
      stringArray0[2] = ", low = ";
      stringArray0[3] = " (";
      stringArray0[4] = "\"-Nj^fn@{2m";
      stringArray0[5] = null;
      stringArray0[6] = "\"-Nj^fn@{2m";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)36;
      ConstantLong constantLong0 = new ConstantLong((byte)36);
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals(36L, constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      byte[] byteArray1 = new byte[4];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-119);
      byte[] byteArray2 = new byte[5];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-108);
      byteArray2[1] = (byte) (-62);
      byteArray2[2] = (byte) (-108);
      byteArray2[3] = (byte)99;
      byteArray2[4] = (byte) (-108);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantLong0;
      ConstantClass constantClass0 = new ConstantClass((byte)99);
      assertEquals(99, constantClass0.getNameIndex());
      assertEquals((byte)7, constantClass0.getTag());
      assertNotNull(constantClass0);
      
      constantArray0[3] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(4, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray2, constantPool0, 196, (int) (byte) (-108), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals(7, constantPool0.getLength());
      assertEquals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-10);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The list of suffixes must not be null");
      assertFalse(boolean0);
      
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)18;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 982, 154, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(3, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(3, constantPool0.getLength());
      assertEquals(3, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 59, (int) (byte) (-65), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[6] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-124), (int) (byte) (-124), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-61);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)35;
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, 170, true);
      assertEquals(0, constantPool0.getLength());
      assertEquals("0:    monitorexit\n1:    nop\n2:    iconst_2\n3:    fload_1\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-61), (byte)0, (byte)5, (byte)35}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)107;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)107, (int) (byte)107, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-1L));
      assertEquals((byte)5, constantLong0.getTag());
      assertEquals((-1L), constantLong0.getBytes());
      assertNotNull(constantLong0);
      
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantLong0;
      ConstantLong constantLong1 = (ConstantLong)constantArray0[0].copy();
      assertTrue(constantLong1.equals((Object)constantLong0));
      assertEquals((byte)5, constantLong1.getTag());
      assertEquals((-1L), constantLong1.getBytes());
      assertNotSame(constantLong1, constantLong0);
      assertNotNull(constantLong1);
      
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(9, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-109);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)59, (int) (byte) (-109), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      int int0 = Pattern.DOTALL;
      assertEquals(32, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-30);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2233, 32, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-23);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte) (-64);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 196, 122, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)47;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)34, (int) (byte)34, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(7, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      ConstantPool constantPool3 = constantPool0.copy();
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool3.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool2);
      assertNotNull(constantPool3);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("N~=4{*0g^z#?3<){as/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N~=4{*0g^z#?3<){as/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "long";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-38);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)38;
      byteArray0[8] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-8), (int) (byte) (-67), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    swap
         // 1:    <illegal opcode>
         // 2:    nop
         // 3:    impdep1
         // 4:    iastore
         // 5:    f2d
         // 6:    caload
         // 7:    dload_0
         // 8:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte)74;
      byteArray0[6] = (byte)3;
      byteArray0[7] = (byte)48;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)78, (int) (byte)48, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertEquals(7, constantPool2.getLength());
      assertNotNull(constantPool2);
      
      ConstantPool constantPool3 = constantPool0.copy();
      assertFalse(constantPool0.equals((Object)constantPool1));
      assertFalse(constantPool0.equals((Object)constantPool2));
      assertFalse(constantPool3.equals((Object)constantPool1));
      assertFalse(constantPool3.equals((Object)constantPool0));
      assertFalse(constantPool3.equals((Object)constantPool2));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool3.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool0, constantPool2);
      assertNotSame(constantPool0, constantPool3);
      assertNotSame(constantPool3, constantPool1);
      assertNotSame(constantPool3, constantPool0);
      assertNotSame(constantPool3, constantPool2);
      assertNotNull(constantPool3);
      
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)111, 1710);
      assertEquals((byte)15, constantMethodHandle0.getTag());
      assertEquals(111, constantMethodHandle0.getReferenceKind());
      assertEquals(1710, constantMethodHandle0.getReferenceIndex());
      assertNotNull(constantMethodHandle0);
      
      ConstantPool constantPool4 = constantPool2.copy();
      assertFalse(constantPool2.equals((Object)constantPool0));
      assertFalse(constantPool2.equals((Object)constantPool3));
      assertFalse(constantPool2.equals((Object)constantPool1));
      assertFalse(constantPool4.equals((Object)constantPool1));
      assertFalse(constantPool4.equals((Object)constantPool0));
      assertFalse(constantPool4.equals((Object)constantPool2));
      assertFalse(constantPool4.equals((Object)constantPool3));
      assertEquals(7, constantPool2.getLength());
      assertEquals(7, constantPool4.getLength());
      assertNotSame(constantPool2, constantPool0);
      assertNotSame(constantPool2, constantPool3);
      assertNotSame(constantPool2, constantPool4);
      assertNotSame(constantPool2, constantPool1);
      assertNotSame(constantPool4, constantPool1);
      assertNotSame(constantPool4, constantPool0);
      assertNotSame(constantPool4, constantPool2);
      assertNotSame(constantPool4, constantPool3);
      assertNotNull(constantPool4);
      
      ConstantFloat constantFloat0 = new ConstantFloat(0.0F);
      assertEquals(0.0F, constantFloat0.getBytes(), 0.01F);
      assertEquals((byte)4, constantFloat0.getTag());
      assertNotNull(constantFloat0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)111;
      byte byte0 = Utility.typeOfSignature("Bb></xobsH8N14");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals(7, constantPool0.getLength());
      assertEquals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(7, constantPool1.getLength());
      assertNotNull(constantPool1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)65;
      byteArray0[0] = (byte)65;
      int int0 = 296;
      try { 
        Utility.methodSignatureReturnType("M{=S", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M{=S'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-63);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      try { 
        Utility.typeOfSignature("2MS/q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2MS/q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String[] stringArray0 = Constants.TYPE_NAMES;
      assertNotNull(stringArray0);
      
      try { 
        Utility.methodTypeToSignature("new", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[28];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)125;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)125, (-2250), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = Utility.getSignature("T)");
      assertEquals("LT);", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)59;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)113;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)122, (int) (byte)122, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-9);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1550), (-2627), true);
      assertEquals("0:    i2s\n1:    daload\n2:    saload\n3:    lstore_1\n4:    lstore_1\n5:    <illegal opcode>\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-109), (byte)49, (byte)53, (byte)64, (byte)64, (byte) (-9)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte) (-69);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte)96;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-15), 1728, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)19, (int) (byte)19, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-86);
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)106;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)106;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte)106, false);
      assertEquals("0:    tableswitch\tdefault = 1778412138, low = 0, high = 0(0)\n", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)106, (int) (byte) (-86), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-84);
      byteArray0[4] = (byte) (-63);
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte) (-84);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-63), (int) (byte) (-84), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte) (-71);
      byteArray0[7] = (byte) (-48);
      byteArray0[8] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 193, (int) (byte)103, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)36;
      try { 
        Utility.typeOfSignature("!N*H,y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N*H,y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      assertEquals(256, int0);
      
      ConstantDouble constantDouble0 = new ConstantDouble(256);
      assertEquals((byte)6, constantDouble0.getTag());
      assertEquals(256.0, constantDouble0.getBytes(), 0.01);
      assertNotNull(constantDouble0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-1);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$c4$ff", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-1)}, byteArray0);
      
      byte[] byteArray1 = Utility.decode("*c\",dPs#H", false);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)42, (byte)99, (byte)34, (byte)44, (byte)100, (byte)80, (byte)115, (byte)35, (byte)72}, byteArray1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 65, 1318, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(Kv4-fy_&/h-q8A$7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Kv4-fy_&/h-q8A$7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-86);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-40);
      byteArray0[14] = (byte) (-40);
      byteArray0[7] = (byte)0;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte) (-40), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      int int0 = Pattern.DOTALL;
      assertEquals(32, int0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte)105;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 85, (-1104), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = "r";
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte) (-5);
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte)31;
      byteArray0[5] = (byte) (-86);
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte) (-58);
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("r");
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("r", constantUtf8_0.getBytes());
      assertNotNull(constantUtf8_0);
      
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      assertTrue(constantUtf8_1.equals((Object)constantUtf8_0));
      assertEquals((byte)1, constantUtf8_0.getTag());
      assertEquals("r", constantUtf8_0.getBytes());
      assertEquals((byte)1, constantUtf8_1.getTag());
      assertEquals("r", constantUtf8_1.getBytes());
      assertNotNull(constantUtf8_1);
      
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-2533), 84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    i2c
         // 1:    istore\t\t%251
         // 3:    dstore_1
         // 4:    lload_1
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals(7, constantPool0.getLength());
      assertEquals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-79);
      constantPool0.setConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 68, (int) (byte) (-79), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)127;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-271), (int) (byte)32, true);
      assertEquals("0:    land\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)127}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)126;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)126, (int) (byte)89, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-96), (int) (byte) (-96), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      int int0 = Pattern.UNICODE_CHARACTER_CLASS;
      assertEquals(256, int0);
      
      Constant[] constantArray0 = new Constant[1];
      ConstantDouble constantDouble0 = new ConstantDouble(256);
      assertEquals(256.0, constantDouble0.getBytes(), 0.01);
      assertEquals((byte)6, constantDouble0.getTag());
      assertNotNull(constantDouble0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)27;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(1, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(1, constantPool0.getLength());
      assertEquals(1, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)27, 256, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)40;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-3146), (-3146), false);
      assertEquals("0:    nop\n1:    dload_2\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)40, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      byteArray0[3] = (byte) (-47);
      String string0 = "T)";
      try { 
        Utility.methodSignatureReturnType("YFe/MnJTO<bouFD;nk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YFe/MnJTO<bouFD;nk'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals(7, constantPool0.getLength());
      assertEquals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n", string0);
      assertNotNull(string0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      String string1 = Utility.getSignature("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("L1)null;", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte) (-98);
      byteArray0[6] = (byte) (-90);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)16, (int) (byte) (-73), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-66);
      boolean boolean0 = false;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$be", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-66)}, byteArray0);
      
      try { 
        Utility.typeOfSignature("4Zp5JVG^s8<{o-F~KUj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4Zp5JVG^s8<{o-F~KUj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(0, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(0, constantPool0.getLength());
      assertEquals(0, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-16);
      byteArray0[6] = (byte)90;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-16), 34, false);
      assertEquals("0:    areturn\n1:    iload_2\n2:    <illegal opcode>\n3:    dup_x1\n4:    <illegal opcode>\n5:    nop\n6:    dup_x1\n", string0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte) (-80), (byte)28, (byte) (-35), (byte)90, (byte) (-16), (byte)0, (byte)90}, byteArray0);
      
      String string1 = Utility.convertString("0:    areturn\n1:    iload_2\n2:    <illegal opcode>\n3:    dup_x1\n4:    <illegal opcode>\n5:    nop\n6:    dup_x1\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("0:    areturn\\n1:    iload_2\\n2:    <illegal opcode>\\n3:    dup_x1\\n4:    <illegal opcode>\\n5:    nop\\n6:    dup_x1\\n", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    areturn\n1:    iload_2\n2:    <illegal opcode>\n3:    dup_x1\n4:    <illegal opcode>\n5:    nop\n6:    dup_x1\n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    areturn
         // 1:    iload_2
         // 2:    <illegal opcode>
         // 3:    dup_x1
         // 4:    <illegal opcode>
         // 5:    nop
         // 6:    dup_x1
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Constant[] constantArray0 = new Constant[7];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(7, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals(7, constantPool0.getLength());
      assertEquals("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-25);
      ConstantPool constantPool1 = constantPool0.copy();
      assertFalse(constantPool1.equals((Object)constantPool0));
      assertEquals(7, constantPool0.getLength());
      assertEquals(7, constantPool1.getLength());
      assertNotSame(constantPool0, constantPool1);
      assertNotSame(constantPool1, constantPool0);
      assertNotNull(constantPool1);
      
      String string1 = Utility.getSignature("1)null\n2)null\n3)null\n4)null\n5)null\n6)null\n");
      assertFalse(string1.equals((Object)string0));
      assertEquals("L1)null;", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        Utility.signatureToString("Hw?Vs2oI3u%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Hw?Vs2oI3u%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte)81;
      byteArray0[7] = (byte) (-23);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)47, 99, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals(2, constantPool0.getLength());
      assertEquals("1)null\n", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      String string1 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-103), (int) (byte) (-103), false);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, constantPool0.getLength());
      assertEquals("0:    ifeq\t\t#0\n3:    nop\n4:    nop\n", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte) (-103), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      assertEquals(2, constantPool0.getLength());
      assertNotNull(constantPool0);
      
      String string0 = constantPool0.toString();
      assertEquals(2, constantPool0.getLength());
      assertEquals("1)null\n", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-74);
      String string1 = Utility.signatureToString("TU{,$3aaLs?;TH\"5]");
      assertFalse(string1.equals((Object)string0));
      assertEquals("U{,$3aaLs?", string1);
      assertNotNull(string1);
      
      String string2 = Utility.replace("1)null\n", "java.lang..h", "Ll/PTFn)EoW8");
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("1)null\n", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("P:-hMT7O^!yP:}Xs|Z&", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P:-hMT7O^!yP:}Xs|Z&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-2);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)20, (int) (byte)82, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
