/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:40:16 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.Iterator;
import java.util.Random;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      assertEquals(0, denseMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CCSMatrix.random(519, 519, (double) 519, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("[evpV&%O De'xv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal((byte)52, (byte)52);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 2695.0;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      double double0 = cCSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, cCSMatrix0.rows());
      assertEquals(2695.0, cCSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(31);
      int[] intArray0 = new int[1];
      intArray0[0] = 31;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      Matrix matrix0 = cCSMatrix0.shuffle();
      assertEquals(0, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 582;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(582, 582, (double[]) null);
      double double0 = (-2232.12198200066);
      cCSMatrix0.set(int0, int0, double0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, (byte)48, doubleArray0);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(48, cCSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix.random(2715, 3717, 0.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertNotNull(cCSMatrix0);
      
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getRow((byte)0);
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.rows());
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      
      cCSMatrix0.each((MatrixProcedure) null);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertNotNull(cCSMatrix0);
      
      double double0 = cCSMatrix0.max();
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(657, 657, doubleArray0);
      int int0 = 0;
      VectorFunction vectorFunction0 = null;
      cCSMatrix0.updateColumn(int0, vectorFunction0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom((-973));
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CCSMatrix.random((-973), (-973), (double) (-973), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(9);
      assertEquals(0.1111111111111111, cCSMatrix0.density(), 0.01);
      assertEquals(9, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(9, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(9, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertNotNull(cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.power(9);
      assertEquals(0.1111111111111111, cCSMatrix0.density(), 0.01);
      assertEquals(9, cCSMatrix0.cardinality());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertEquals(9, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(9, cCSMatrix0.columns());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(9, cCSMatrix1.rows());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0.1111111111111111, cCSMatrix1.density(), 0.01);
      assertEquals(9, cCSMatrix1.columns());
      assertEquals(9, cCSMatrix1.cardinality());
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      
      cCSMatrix1.min();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1268, 1268);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.5, cCSMatrix0.density(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2, cCSMatrix0.cardinality());
      assertEquals(2, cCSMatrix0.columns());
      assertNotNull(cCSMatrix0);
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = cCSMatrix0.toColumnMajorSparseMatrix();
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.5, cCSMatrix0.density(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2, cCSMatrix0.cardinality());
      assertEquals(2, cCSMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(2, columnMajorSparseMatrix0.columns());
      assertEquals(2, columnMajorSparseMatrix0.cardinality());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(2, columnMajorSparseMatrix0.rows());
      assertEquals(0.5, columnMajorSparseMatrix0.density(), 0.01);
      assertNotNull(columnMajorSparseMatrix0);
      assertSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertSame(columnMajorSparseMatrix0, cCSMatrix0);
      
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.power(2);
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.5, cCSMatrix0.density(), 0.01);
      assertEquals(2, cCSMatrix0.rows());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(2, cCSMatrix0.cardinality());
      assertEquals(2, cCSMatrix0.columns());
      assertEquals(0.5, cCSMatrix1.density(), 0.01);
      assertEquals(2, cCSMatrix1.cardinality());
      assertEquals(1.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(2, cCSMatrix1.columns());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(2, cCSMatrix1.rows());
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertSame(cCSMatrix0, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix1, columnMajorSparseMatrix0);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      assertTrue(cCSMatrix1.equals((Object)columnMajorSparseMatrix0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 9;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(9);
      assertEquals(9, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.1111111111111111, cCSMatrix0.density(), 0.01);
      assertEquals(9, cCSMatrix0.columns());
      assertEquals(9, cCSMatrix0.rows());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
      assertNotNull(cCSMatrix0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(9, 9);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(9, sparseMatrix0.columns());
      assertEquals(9, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertFalse(sparseMatrix0.isRowMajor());
      assertNotNull(sparseMatrix0);
      assertNotSame(sparseMatrix0, cCSMatrix0);
      assertFalse(sparseMatrix0.equals((Object)cCSMatrix0));
      
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.cardinality());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertFalse(cCSMatrix1.isRowMajor());
      assertNotNull(cCSMatrix1);
      assertFalse(cCSMatrix1.equals((Object)sparseMatrix0));
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, sparseMatrix0, cCSMatrix1, sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertNotNull(cCSMatrix0);
      
      boolean boolean0 = cCSMatrix0.isColumnMajor();
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertTrue(boolean0);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(Double.NaN, cCSMatrix1.density(), 0.01);
      assertEquals(0.0, cCSMatrix1.max(), 0.01);
      assertFalse(cCSMatrix1.isRowMajor());
      assertEquals(0, cCSMatrix1.rows());
      assertEquals(0.0, cCSMatrix1.min(), 0.01);
      assertEquals(0, cCSMatrix1.columns());
      assertEquals(0, cCSMatrix1.cardinality());
      assertNotNull(cCSMatrix1);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertNotSame(cCSMatrix1, cCSMatrix0);
      assertTrue(cCSMatrix1.equals((Object)cCSMatrix0));
      
      Iterator<Integer> iterator0 = cCSMatrix0.iteratorOrNonZeroColumns();
      assertEquals(0, cCSMatrix0.cardinality());
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
      assertEquals(0.0, cCSMatrix0.max(), 0.01);
      assertFalse(cCSMatrix0.isRowMajor());
      assertEquals(0, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
      assertEquals(0, cCSMatrix0.columns());
      assertNotNull(iterator0);
      assertNotSame(cCSMatrix0, cCSMatrix1);
      assertTrue(cCSMatrix0.equals((Object)cCSMatrix1));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CCSMatrix.randomSymmetric((int) (byte)55, 0.1, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.eachNonZero((MatrixProcedure) null);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(23, 23, 23);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '24' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(193, 1252, doubleArray0);
      cCSMatrix0.columnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1588);
      cCSMatrix0.toBinary();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)55);
      cCSMatrix0.eachNonZero((MatrixProcedure) null);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2734, 4744.4907);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZeroInColumn(2063, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 3737;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3737, 3737);
      cCSMatrix0.shuffle();
      cCSMatrix0.iteratorOfRow(int0);
      cCSMatrix0.minInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)55);
      cCSMatrix0.removeLastRow();
      int[] intArray0 = new int[15];
      intArray0[0] = 40;
      intArray0[1] = 40;
      intArray0[2] = 40;
      intArray0[3] = 40;
      intArray0[4] = (int) (byte)55;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal((byte)39, 25);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(25, 25);
      CCSMatrix.block(cCSMatrix1, cCSMatrix0, cCSMatrix1, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal((byte)39, (byte)39);
      cCSMatrix0.max();
      cCSMatrix0.minInColumn((byte)39);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(40, (byte)52);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInRow(26, vectorAccumulator0);
      cCSMatrix0.minInColumn(40);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix1.setAll(0.1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal((byte)39, (byte)39);
      cCSMatrix0.toRowMajorSparseMatrix();
      cCSMatrix0.nonZeroAt((byte)39, 1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix((byte)40, 3587, (byte)40);
      cCSMatrix0.copyOfColumns((byte)40);
      cCSMatrix0.minInColumn((byte)40);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2734, 4744.4907);
      cCSMatrix0.copyOfRows(1510);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(1510, vectorProcedure0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      cCSMatrix0.to(matrixFactory0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[][] doubleArray0 = new double[4][5];
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn((-2352));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2352
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(5, 5);
      CCSMatrix cCSMatrix1 = new CCSMatrix(5, (byte)13);
      cCSMatrix1.setAll((byte)13);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(17, 1125, 1125);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(17, vectorProcedure0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1149);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(23, vectorFunction0);
      cCSMatrix0.power(23);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix((byte)55, 67, (byte)55);
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(76, 830.9839059041249);
      LinearAlgebra.SolverFactory linearAlgebra_SolverFactory0 = LinearAlgebra.SolverFactory.GAUSSIAN;
      cCSMatrix1.withSolver(linearAlgebra_SolverFactory0);
      cCSMatrix0.setAll(0.0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2734, (-989.73835));
      cCSMatrix0.set(29, 844, (-4327.738314088276));
      cCSMatrix0.nonZeroAt(517, 844);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(111, (-1523.94433181));
      cCSMatrix0.min();
      cCSMatrix0.set(32, 111, 32);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix((byte)10, 67, (byte)10);
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.is(matrixPredicate0);
      cCSMatrix0.minInColumn((byte)10);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal((byte)39, (byte)39);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.forEach(consumer0);
      cCSMatrix0.divide((byte)39);
      CCSMatrix.diagonal((byte)39, (byte)39);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)55);
      Matrix matrix0 = cCSMatrix0.removeLastRow();
      matrix0.minInColumn(40);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal((byte)55, (byte)55);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(byte)55).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(2, 8, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity((byte)55);
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      ooPlaceMatrixHadamardProduct0.applySymmetric(denseMatrix0, (SparseMatrix) cCSMatrix0);
      int[] intArray0 = new int[2];
      intArray0[0] = 31;
      intArray0[1] = 16;
      cCSMatrix0.select(intArray0, intArray0);
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix((byte)55, 67, (byte)55);
      cCSMatrix0.iteratorOfRow(13);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints(9972L);
      CCSMatrix cCSMatrix1 = CCSMatrix.random((int) (byte)55, 13, 0.25, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cCSMatrix1.minInColumn(67);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 67
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix((byte)55, 67, (byte)55);
      cCSMatrix0.iteratorOfRow(67);
      cCSMatrix0.maxInColumn((byte)55);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(46, (byte)55);
      cCSMatrix0.set(29, 8, (byte)55);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.maxInColumn(8);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 2734;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2734, 1979.5845);
      org.evosuite.runtime.Random.setNextRandom(3121);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      ColumnMajorSparseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix0.getColumn(int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2734;
      doubleArray0[0] = doubleArray1;
      doubleArray1[0] = (double) 2734;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 2734;
      doubleArray2[2] = (double) 2734;
      doubleArray2[4] = (double) 2734;
      doubleArray0[2] = doubleArray2;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 2734.0, 2734.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      cCSMatrix0.kroneckerProduct(columnMajorSparseMatrix0);
      org.evosuite.runtime.Random.setNextRandom(2734);
      cCSMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 3737;
      doubleArray1[1] = (double) 3737;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      cCSMatrix0.kroneckerProduct(columnMajorSparseMatrix0);
      org.evosuite.runtime.Random.setNextRandom(3737);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      int int0 = (-988);
      // Undeclared exception!
      try { 
        SparseMatrix.zero((-988), (-988), 3737);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -988x-988
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3737, Double.POSITIVE_INFINITY);
      cCSMatrix0.set(666, 32, 3737);
      cCSMatrix0.iteratorOfRow(956);
      cCSMatrix0.minInColumn(956);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(3737, 3737);
      int[] intArray0 = new int[5];
      intArray0[0] = 3737;
      intArray0[1] = 3737;
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal((byte)39, (byte)39);
      cCSMatrix0.rotate();
      cCSMatrix0.toRowVector();
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cCSMatrix0.is(matrixPredicate0);
      cCSMatrix0.rank();
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(3767, Double.POSITIVE_INFINITY);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(1156, 1156, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 2;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1142);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (double)2, (double)2, (-966.0), (-1.0)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(2, vectorFunction0);
      cCSMatrix0.power(int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[][] doubleArray0 = new double[1][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      ColumnMajorSparseMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)48;
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CCSMatrix.zero(3587, 3587, (int) (byte)35);
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(3587);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      SparseVector sparseVector0 = SparseVector.zero(3587, 14);
      ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, (ColumnMajorSparseMatrix) cCSMatrix0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)35;
      CCSMatrix.fromBinary(byteArray0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 3587;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3587, 3587, (int) (byte)35);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(3587, (int) (byte)35);
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      Matrix.identity((byte)35);
      SparseVector sparseVector0 = SparseVector.zero(3587, 14);
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(sparseVector0, (ColumnMajorSparseMatrix) cCSMatrix1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.updateAt((byte)35, 3708, matrixFunction0);
      cCSMatrix0.insertColumn(int0, vector0);
      int int1 = (-2145523446);
      cCSMatrix0.blankOfShape(int1, int1);
      int int2 = 37;
      cCSMatrix0.minInColumn(int2);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 51;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(51);
      cCSMatrix0.toColumnVector();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 51;
      doubleArray0[1] = (double) 51;
      doubleArray0[2] = (double) 51;
      doubleArray0[3] = (double) 51;
      doubleArray0[4] = (double) 51;
      doubleArray0[5] = (double) 51;
      doubleArray0[6] = (double) 51;
      doubleArray0[7] = (double) 51;
      doubleArray0[8] = (double) 51;
      SparseVector sparseVector0 = SparseVector.fromArray(doubleArray0);
      Matrix matrix0 = sparseVector0.toRowMatrix();
      CCSMatrix.block(matrix0, matrix0, matrix0, cCSMatrix0);
      cCSMatrix0.power(int0);
  }
}
