/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:50:34 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.ExtraTypeProvider;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.util.ASMClassLoader;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.PageAttributes;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.OutputStream;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.Collator;
import java.text.DateFormat;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.ZoneOffset;
import java.time.chrono.Chronology;
import java.time.chrono.MinguoDate;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      IdentityHashMap<PageAttributes, MockMinguoDate> identityHashMap0 = new IdentityHashMap<PageAttributes, MockMinguoDate>();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("*%nU2#3|^5~NP*,");
      TreeSet<Insets> treeSet0 = new TreeSet<Insets>();
      List<ExtraTypeProvider> list0 = defaultJSONParser0.getExtraTypeProviders();
      assertNotNull(list0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unterminated json string, ");
      defaultJSONParser0.setResolveStatus((-3074));
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident, pos 12, json : unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      ArrayList<DateFormatSymbols> arrayList0 = new ArrayList<DateFormatSymbols>();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      defaultJSONParser0.setConfig(parserConfig0);
      defaultJSONParser0.getDateFomartPattern();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '\u0000');
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[", parserConfig0, 0);
      Class<Point> class0 = Point.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.serializer.AwtCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":>$\"}");
      Hashtable<Double, DecimalFormatSymbols> hashtable0 = new Hashtable<Double, DecimalFormatSymbols>();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"$ref\":>$\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error :");
      DateFormat dateFormat0 = defaultJSONParser0.getDateFormat();
      assertNotNull(dateFormat0);
      
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0, defaultJSONParser0.lexer, parserConfig0);
      defaultJSONParser1.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("W8o%9_i*3e7nYOB?!");
      ArrayList<DateFormatSymbols> arrayList0 = new ArrayList<DateFormatSymbols>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      Feature feature0 = Feature.OrderedField;
      defaultJSONParser0.isEnabled(feature0);
      assertEquals(20, jSONScanner0.token());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"-9223372036854775808\"", parserConfig0, (-3));
      Feature feature0 = Feature.AllowSingleQuotes;
      defaultJSONParser0.isEnabled(feature0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("X-1XBXDe~//gOl]Sd)]", (-2849));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : X-1XBXDe~//gOl]Sd)]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("(A#FOj>2RF(,k:!F~?");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : (A#FOj>2RF(,k:!F~?
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.parseKey();
      defaultJSONParser0.setContext((Object) null, (Object) null);
      defaultJSONParser0.getFieldTypeResolver();
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(13, 13);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect }, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yzwdQB?i#eG+ZNQa'{l");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("<;L)r #C");
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : <;L)r #C
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("writeWithFieldName", parserConfig0, 1911);
      defaultJSONParser0.setDateFormat("fastjson.parser.autoTypeAccept");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(1581, 1911);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]Re2Scp;:U miP");
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : ]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '[');
      Hashtable<Double, DecimalFormatSymbols> hashtable0 = new Hashtable<Double, DecimalFormatSymbols>();
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      JSONObject jSONObject0 = new JSONObject(2557);
      Float float0 = new Float((double) 1);
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual [
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[5];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray0[0] = ']';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, ']');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unterminated json string, ");
      defaultJSONParser0.setResolveStatus((-3074));
      defaultJSONParser0.getObject("unterminated json string, ");
      assertEquals((-3074), defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unterminated json string, ");
      defaultJSONParser0.getContext();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      defaultJSONParser0.getObject("unterminated json string, ");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("writeWithFieldName", parserConfig0, 1911);
      defaultJSONParser0.resolveReference("");
      defaultJSONParser0.getSymbolTable();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{R$]ref0\":\"$\"}");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : {
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java.lang.String@0000000003");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(101, 2632);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("yPUMhp", parserConfig0, 34);
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : yPUMhp
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultJSONParser0.parseKey();
      ArrayList<DateFormatSymbols> arrayList0 = new ArrayList<DateFormatSymbols>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayDeque<DateFormatSymbols> arrayDeque0 = new ArrayDeque<DateFormatSymbols>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"$\"}");
      ArrayDeque<DateFormatSymbols> arrayDeque1 = new ArrayDeque<DateFormatSymbols>();
      defaultJSONParser0.checkListResolve(arrayDeque0);
      Class<Short> class0 = Short.TYPE;
      defaultJSONParser0.parseObject((Type) class0);
      int int0 = defaultJSONParser0.getResolveStatus();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayDeque<DateFormatSymbols> arrayDeque0 = new ArrayDeque<DateFormatSymbols>();
      ArrayDeque<DateFormatSymbols> arrayDeque1 = new ArrayDeque<DateFormatSymbols>();
      Float float0 = new Float((-423.636687));
      Class<Short> class0 = Short.TYPE;
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"$\"}", parserConfig0, 2324);
      TreeMap<Point, TimeZone> treeMap0 = new TreeMap<Point, TimeZone>();
      defaultJSONParser0.checkMapResolve(treeMap0, parserConfig0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*,[oyb`Nm&");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.getLexer();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultJSONParser0.parseKey();
      defaultJSONParser0.getResolveStatus();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, pos 3, json : NaN
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{R$]ref0\":\"$\"}");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual $
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN", parserConfig0, 97);
      FieldTypeResolver fieldTypeResolver0 = defaultJSONParser0.fieldTypeResolver;
      defaultJSONParser0.accept(18, 84);
      TreeSet<BreakIterator> treeSet0 = new TreeSet<BreakIterator>();
      defaultJSONParser0.checkListResolve(treeSet0);
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      classLoader1.clearAssertionStatus();
      classLoader0.getParent();
      JSONScanner jSONScanner0 = new JSONScanner("fastjson.parser.autoTypeSupport", 18);
      ParserConfig parserConfig1 = ParserConfig.global;
      Polygon polygon0 = new Polygon();
      polygon0.getBounds();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("create instance error", parserConfig0);
      defaultJSONParser0.getConfig();
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)defaultJSONParser0.getDateFormat();
      assertEquals("yyyy-MM-dd HH:mm:ss", mockSimpleDateFormat0.toPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(":|IR|R(]<_2xa");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : :|IR|R(]<_2xa
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      String string0 = "$.$ref";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.$ref", parserConfig0, (-10));
      JSONObject jSONObject0 = new JSONObject(false);
      defaultJSONParser0.close();
      defaultJSONParser0.setResolveStatus((-333));
      DateFormat dateFormat0 = DateFormat.getDateInstance();
      defaultJSONParser0.setDateFomrat(dateFormat0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseExtra(dateFormat0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ., info : pos 1, json : $.$ref
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("writeWithFieldName", parserConfig0, 1911);
      defaultJSONParser0.resolveReference("");
      // Undeclared exception!
      try { 
        defaultJSONParser0.popContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.getContext();
      Class<BufferCapabilities> class0 = BufferCapabilities.class;
      Class<MockThaiBuddhistDate> class1 = MockThaiBuddhistDate.class;
      JSON.parseArray("", class1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Class<?>) class0, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java.lang.String@0000000003");
      Class<Double> class0 = Double.class;
      Vector<Dimension> vector0 = new Vector<Dimension>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept((-1777));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis((-1960L));
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect ", parserConfig0, 1373);
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)MockDateFormat.getInstance();
      defaultJSONParser0.setDateFomrat(simpleDateFormat0);
      assertEquals("M/d/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[;!#rn6caNGX9x/");
      FileSystemHandling.shouldAllThrowIOExceptions();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 2, json : [;!#rn6caNGX9x/
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("java.lang.String@0000000003");
      String string0 = defaultJSONParser0.getInput();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      Vector<ExtraTypeProvider> vector0 = new Stack<ExtraTypeProvider>();
      defaultJSONParser0.handleResovleTask(vector0);
      ArrayList<DateFormatSymbols> arrayList0 = new ArrayList<DateFormatSymbols>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) vector0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",7|?M", parserConfig0);
      Feature feature0 = Feature.NonStringKeyAsString;
      defaultJSONParser0.config(feature0, false);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0);
      LinkedHashMap<MockDate, Long> linkedHashMap0 = new LinkedHashMap<MockDate, Long>();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      TimeZone timeZone0 = jSONReaderScanner0.getTimeZone();
      defaultJSONParser0.parseObject((Map) linkedHashMap0, (Object) timeZone0);
      ArrayList<DateFormatSymbols> arrayList0 = new ArrayList<DateFormatSymbols>();
      int int0 = (-1591);
      LinkedHashSet<DecimalFormatSymbols> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<DecimalFormatSymbols>((-1591), 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1591
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Nb_A]s~:W'X", parserConfig0, (-361));
      defaultJSONParser0.resolveReference("");
      defaultJSONParser0.popContext();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "{\"$ref\":\"$\"}";
      ArrayDeque<DateFormatSymbols> arrayDeque0 = new ArrayDeque<DateFormatSymbols>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"$\"}");
      defaultJSONParser0.getExtraTypeProviders();
      ArrayDeque<DateFormatSymbols> arrayDeque1 = new ArrayDeque<DateFormatSymbols>();
      defaultJSONParser0.checkListResolve(arrayDeque0);
      Float float0 = new Float((-423.636687));
      ParserConfig parserConfig0 = new ParserConfig(true);
      defaultJSONParser0.getExtraTypeProviders();
      Type type0 = null;
      Float float1 = new Float(1190.07581947);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) null, (Collection) arrayDeque1, (Object) float1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"$ref\":\"$\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]Re2Scp;B:U miP");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ]Re2Scp;B:U miP
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 22);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("uPthorities");
      Class<HttpCookie> class0 = HttpCookie.class;
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      Boolean boolean0 = Boolean.valueOf(true);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ident, pos 0, fieldName true
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", name(", parserConfig0);
      IdentityHashMap<PageAttributes, MockMinguoDate> identityHashMap0 = new IdentityHashMap<PageAttributes, MockMinguoDate>();
      PageAttributes pageAttributes0 = new PageAttributes();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      boolean boolean0 = new Boolean(false);
      MockMinguoDate mockMinguoDate2 = new MockMinguoDate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      identityHashMap0.put(pageAttributes0, mockMinguoDate0);
      MessageFormat messageFormat0 = new MessageFormat("fastjson.parser.deny");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) identityHashMap0, (Object) messageFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual (
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 22);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      defaultJSONParser0.getExtraTypeProviders();
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseInt error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.IntegerCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[;!#rn6caNGX9x/");
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      defaultJSONParser0.getDateFomartPattern();
      Class<Float> class0 = Float.TYPE;
      Class<Collator> class1 = Collator.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ;, pos 1, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(true);
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("unterminated json string, ", parserConfig1, 45);
      Class<Short> class0 = Short.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 12, json : unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", name(", parserConfig0);
      IdentityHashMap<PageAttributes, MockMinguoDate> identityHashMap0 = new IdentityHashMap<PageAttributes, MockMinguoDate>();
      PageAttributes pageAttributes0 = new PageAttributes();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      Boolean boolean0 = new Boolean(false);
      MockMinguoDate mockMinguoDate2 = new MockMinguoDate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      identityHashMap0.put(pageAttributes0, mockMinguoDate0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : , name(
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(";5^");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMDeserializerFactory0.classLoader.getParent();
      classLoader1.getParent();
      aSMDeserializerFactory0.classLoader.setDefaultAssertionStatus(true);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      Integer integer0 = new Integer((-861));
      ArrayList<DateFormatSymbols> arrayList0 = new ArrayList<DateFormatSymbols>();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      defaultJSONParser0.accept(2);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.BACKGROUND;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      char[] charArray0 = new char[4];
      charArray0[0] = '^';
      charArray0[1] = 'A';
      charArray0[2] = 'm';
      charArray0[3] = 'R';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2113, 2113);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(bufferCapabilities0, jSONReaderScanner0, parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      defaultJSONParser0.setContext((ParseContext) null);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '[');
      Hashtable<Double, DecimalFormatSymbols> hashtable0 = new Hashtable<Double, DecimalFormatSymbols>();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Point point0 = new Point();
      Integer integer0 = new Integer(0);
      JSONObject jSONObject0 = new JSONObject(2557);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 989, 9);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0, jSONReaderScanner1, parserConfig0);
      defaultJSONParser1.getExtraTypeProviders();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse(propertyProcessable0, (Object) propertyProcessable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      char[] charArray0 = new char[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '\u0000');
      ClassLoader.getSystemClassLoader();
      String string0 = ParserConfig.AUTOTYPE_SUPPORT_PROPERTY;
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(".", parserConfig0, 0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0, (Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : .
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ClassLoader classLoader1 = aSMClassLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(classLoader1);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1.classLoader);
      String string0 = "0!O8 A+";
      int int0 = 7;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN", parserConfig0, 7);
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse enum com.alibaba.fastjson.parser.Feature error, value : null
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ClassLoader.getSystemClassLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"$\"}");
      ArrayDeque<DateFormatSymbols> arrayDeque0 = new ArrayDeque<DateFormatSymbols>();
      defaultJSONParser0.getDateFormat();
      defaultJSONParser0.getDateFormat();
      BeanContext beanContext0 = defaultJSONParser0.lastBeanContext;
      defaultJSONParser0.resolveReference("{\"$ref\":\"$\"}");
      ParseContext parseContext0 = null;
      Locale locale0 = new Locale("{\"$ref\":\"$\"}");
      MessageFormat messageFormat0 = null;
      try {
        messageFormat0 = new MessageFormat("{\"$ref\":\"$\"}", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can't parse argument number: \"$ref\":\"$\"
         //
         verifyException("java.text.MessageFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"$\"}");
      ArrayDeque<DateFormatSymbols> arrayDeque0 = new ArrayDeque<DateFormatSymbols>();
      Float float0 = new Float((-423.636687));
      Class<Short> class0 = Short.TYPE;
      defaultJSONParser0.getInput();
      defaultJSONParser0.parseKey();
      Object object0 = defaultJSONParser0.getObject("java.lang.String@0000000003");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ArrayList<DateFormatSymbols> arrayList0 = new ArrayList<DateFormatSymbols>();
      ParserConfig.getGlobalInstance();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN", parserConfig0, 1027);
      defaultJSONParser0.parseKey();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      defaultJSONParser0.getResolveTaskList();
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, ")=.=");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, pos 3, json : NaN
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '\u0000');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      defaultJSONParser0.getResolveTaskList();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) classLoader0, (Object) classLoader0);
      classLoader0.setPackageAssertionStatus("java.util.Collections$EmptyMap", false);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "uPthorities");
      defaultJSONParser0.handleResovleTask(aSMClassLoader0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("fastjson.parser.deny");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '[');
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Type[] typeArray0 = new Type[1];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '[');
      Hashtable<Double, DecimalFormatSymbols> hashtable0 = new Hashtable<Double, DecimalFormatSymbols>();
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Integer integer0 = new Integer(0);
      JSONObject jSONObject0 = new JSONObject(2557);
      Float float0 = new Float((double) 1);
      Class<Short> class0 = Short.TYPE;
      Type[] typeArray0 = new Type[4];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      ParserConfig parserConfig1 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("P#[J9Gt`SR3#gr&4J<9", parserConfig1);
      ParseContext parseContext0 = defaultJSONParser0.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, ":");
      defaultJSONParser0.addResolveTask(defaultJSONParser_ResolveTask0);
      LinkedHashSet<Dimension> linkedHashSet0 = new LinkedHashSet<Dimension>();
      parserConfig0.clearDeserializers();
      Vector<Dimension> vector0 = new Vector<Dimension>();
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser("fastjson.parser.autoTypeAccept", parserConfig0, 70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"$\"}");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ParserConfig parserConfig0 = ParserConfig.global;
      PageAttributes.ColorType pageAttributes_ColorType0 = PageAttributes.ColorType.COLOR;
      defaultJSONParser0.getResolveTaskList();
      JSONObject jSONObject0 = new JSONObject(true);
      Feature feature0 = Feature.IgnoreAutoType;
      Class<JobAttributes> class0 = JobAttributes.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) feature0, (Object) throwableDeserializer0);
      BreakIterator breakIterator0 = BreakIterator.getCharacterInstance();
      Class<DecimalFormat> class1 = DecimalFormat.class;
      ThrowableDeserializer throwableDeserializer1 = new ThrowableDeserializer(parserConfig0, class1);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      throwableDeserializer1.smartMatch("fastjson.parser.autoTypeSupport");
      ParseContext parseContext1 = new ParseContext(parseContext0, breakIterator0, throwableDeserializer1);
      defaultJSONParser0.setContext(parseContext1);
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.parser.Feature cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayDeque<DateFormatSymbols> arrayDeque0 = new ArrayDeque<DateFormatSymbols>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"$\"}");
      ArrayDeque<DateFormatSymbols> arrayDeque1 = new ArrayDeque<DateFormatSymbols>();
      defaultJSONParser0.checkListResolve(arrayDeque0);
      Float float0 = new Float((-423.636687));
      Class<Short> class0 = Short.TYPE;
      defaultJSONParser0.parseObject((Type) class0);
      String string0 = defaultJSONParser0.getDateFomartPattern();
      defaultJSONParser0.resolveReference("unterminated json string, ");
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      String string1 = defaultJSONParser0.getInput();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":>$\"}");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 9, json : {\"$ref\":>$\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '[');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Stack<BigInteger> stack0 = new Stack<BigInteger>();
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      defaultJSONParser0.getResolveTaskList();
      ParseContext parseContext0 = defaultJSONParser0.context;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeSupport");
      Integer integer0 = new Integer(0);
      Float float0 = new Float((double) 0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      Float float1 = new Float((-1.0));
      Feature feature0 = Feature.InternFieldNames;
      Float float2 = new Float((double) 0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      defaultJSONParser0.getObject((String) null);
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.BACKGROUND;
      BufferCapabilities bufferCapabilities0 = new BufferCapabilities(imageCapabilities0, imageCapabilities0, bufferCapabilities_FlipContents0);
      defaultJSONParser0.setContext((Object) bufferCapabilities0, (Object) "fastjson.parser.deny");
      defaultJSONParser0.resolveReference("$");
      Class<Float> class0 = Float.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseLong error, field : 0
         //
         verifyException("com.alibaba.fastjson.serializer.FloatCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("5/^");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '\u0000');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      defaultJSONParser0.getResolveTaskList();
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) aSMDeserializerFactory0, (Object) charArray0);
      classLoader0.setPackageAssertionStatus("Io=_=}>xpXF", false);
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask(parseContext0, "fastjson.parser.autoTypeSupport");
      defaultJSONParser0.handleResovleTask("uPthorities");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) "Io=_=}>xpXF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName Io=_=}>xpXF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0.classLoader);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0!O8 A+", parserConfig0, (-10));
      Feature feature0 = Feature.UseBigDecimal;
      defaultJSONParser0.getContext();
      Short short0 = new Short((short) (-2995));
      defaultJSONParser0.setContext((Object) null, (Object) parserConfig0);
      LinkedHashMap<BreakIterator, BreakIterator> linkedHashMap0 = new LinkedHashMap<BreakIterator, BreakIterator>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      defaultJSONParser0.checkMapResolve(linkedHashMap0, (Object) null);
      ClassLoader.getSystemClassLoader();
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      HashMap<RenderingHints.Key, GridBagConstraints> hashMap0 = new HashMap<RenderingHints.Key, GridBagConstraints>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      defaultJSONParser0.setContext((ParseContext) null, (Object) renderingHints0, (Object) feature0);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      defaultJSONParser0.getInput();
      Object object0 = defaultJSONParser0.parseKey();
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeAccept");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"-9223372036854775808\"", parserConfig0, (-3));
      boolean boolean0 = new Boolean(false);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual string, pos 22, json : \"-9223372036854775808\"
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"$\"}");
      defaultJSONParser0.resolveStatus = defaultJSONParser0.resolveStatus;
      ArrayDeque<DateFormatSymbols> arrayDeque0 = new ArrayDeque<DateFormatSymbols>();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(1);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      Chronology.from(zoneOffset0);
      Long.compare((-7766605818834748097L), 1383L);
      defaultJSONParser0.resolveReference("..");
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      Feature feature0 = Feature.SupportNonPublicField;
      defaultJSONParser0.setContext((ParseContext) null, (Object) null, (Object) feature0);
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      defaultJSONParser0.getInput();
      defaultJSONParser0.parseKey();
      assertEquals(1, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = "{\"$ref\"T:\"$\"}";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\"T:\"$\"}");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{\"$ref\"T:\"$\"}");
      Hashtable<Double, DecimalFormatSymbols> hashtable0 = new Hashtable<Double, DecimalFormatSymbols>();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, name $ref
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      char[] charArray0 = new char[6];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vqxl*");
      charArray0[0] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '[');
      Hashtable<Double, DecimalFormatSymbols> hashtable0 = new Hashtable<Double, DecimalFormatSymbols>();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Integer integer0 = new Integer(0);
      JSONObject jSONObject0 = new JSONObject(2557);
      Class<Short> class0 = Short.TYPE;
      jSONObject0.toJavaObject((Type) class0);
      Integer integer1 = new Integer(0);
      JSONObject jSONObject1 = jSONObject0.fluentPut("fastjson.parser.autoTypeAccept", integer1);
      jSONObject1.getJSONObject("fastjson.parser.autoTypeSupport");
      Boolean boolean0 = new Boolean(false);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("yyyy-MM-dd HH:mm:ss", parserConfig0, 989);
      Type[] typeArray0 = new Type[1];
      typeArray0[0] = (Type) class0;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"$\"}");
      Hashtable<Double, DecimalFormatSymbols> hashtable0 = new Hashtable<Double, DecimalFormatSymbols>();
      ParserConfig parserConfig0 = new ParserConfig();
      PageAttributes pageAttributes0 = new PageAttributes();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      MockMinguoDate mockMinguoDate1 = new MockMinguoDate();
      Boolean boolean1 = new Boolean(false);
      MockMinguoDate mockMinguoDate2 = new MockMinguoDate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IdentityHashMap<PageAttributes, MockMinguoDate> identityHashMap0 = new IdentityHashMap<PageAttributes, MockMinguoDate>();
      identityHashMap0.put(pageAttributes0, mockMinguoDate1);
      MessageFormat messageFormat0 = new MessageFormat("..");
      defaultJSONParser0.parseObject((Map) hashtable0, (Object) mockMinguoDate1);
      assertEquals(1, hashtable0.size());
      assertFalse(hashtable0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayDeque<DateFormatSymbols> arrayDeque0 = new ArrayDeque<DateFormatSymbols>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"$\"}");
      ArrayDeque<DateFormatSymbols> arrayDeque1 = new ArrayDeque<DateFormatSymbols>();
      defaultJSONParser0.checkListResolve(arrayDeque0);
      Float float0 = new Float((-423.636687));
      Class<Short> class0 = Short.TYPE;
      defaultJSONParser0.parseObject((Type) class0);
      Object object0 = defaultJSONParser0.getObject("{\"$ref\":\"$\"}");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayDeque<DateFormatSymbols> arrayDeque0 = new ArrayDeque<DateFormatSymbols>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"$\"}");
      ArrayDeque<DateFormatSymbols> arrayDeque1 = new ArrayDeque<DateFormatSymbols>();
      defaultJSONParser0.checkListResolve(arrayDeque0);
      Float float0 = new Float((-423.636687));
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      defaultJSONParser0.getInput();
      defaultJSONParser0.parseKey();
      Object object0 = defaultJSONParser0.getObject("$.$ref");
      assertEquals("$", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayDeque<DateFormatSymbols> arrayDeque0 = new ArrayDeque<DateFormatSymbols>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"$\"}");
      ArrayDeque<DateFormatSymbols> arrayDeque1 = new ArrayDeque<DateFormatSymbols>();
      defaultJSONParser0.checkListResolve(arrayDeque0);
      Float float0 = new Float((-423.636687));
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) arrayDeque1, (Object) arrayDeque0);
      ParseContext parseContext1 = new ParseContext(parseContext0, "{\"$ref\":\"$\"}", arrayDeque0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      JavaBeanDeserializer javaBeanDeserializer0 = new JavaBeanDeserializer(parserConfig0, class0, (Type) null);
      defaultJSONParser0.setContext(parseContext1, (Object) parseContext1, (Object) javaBeanDeserializer0);
      defaultJSONParser0.getInput();
      ArrayDeque arrayDeque2 = (ArrayDeque)defaultJSONParser0.parseKey();
      assertTrue(arrayDeque2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayDeque<DateFormatSymbols> arrayDeque0 = new ArrayDeque<DateFormatSymbols>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"$\"}");
      ArrayDeque<DateFormatSymbols> arrayDeque1 = new ArrayDeque<DateFormatSymbols>();
      defaultJSONParser0.checkListResolve(arrayDeque0);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      defaultJSONParser0.setContext((Object) mockDateFormat0, (Object) mockDateFormat0);
      defaultJSONParser0.popContext();
      TreeSet<Insets> treeSet0 = new TreeSet<Insets>();
      BigDecimal bigDecimal0 = new BigDecimal((long) 0);
      defaultJSONParser0.getInput();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      doReturn((Type) null).when(propertyProcessable0).getType(anyString());
      doReturn((String) null).when(propertyProcessable0).toString();
      Feature feature0 = Feature.OrderedField;
      defaultJSONParser0.isEnabled(feature0);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      defaultJSONParser0.parse(propertyProcessable0, (Object) mockThaiBuddhistDate0);
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertEquals("%", decimalFormat0.getNegativeSuffix());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"$\"}");
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ArrayDeque<DateFormatSymbols> arrayDeque0 = new ArrayDeque<DateFormatSymbols>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      JSON.DEFFAULT_DATE_FORMAT = "?";
      defaultJSONParser0.getExtraProcessors();
      Class<Float> class0 = Float.TYPE;
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) imageCapabilities0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeAccept");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeAccept");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("\"-9223372036854775808\"", parserConfig0, (-12));
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject jSONObject0 = new JSONObject();
      defaultJSONParser0.parseKey();
      Object object0 = new Object();
      Stack<Double> stack0 = new Stack<Double>();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayDeque<DateFormatSymbols> arrayDeque0 = new ArrayDeque<DateFormatSymbols>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"$\"}");
      defaultJSONParser0.getExtraTypeProviders();
      ArrayDeque<DateFormatSymbols> arrayDeque1 = new ArrayDeque<DateFormatSymbols>();
      defaultJSONParser0.checkListResolve(arrayDeque0);
      Float float0 = new Float((-423.636687));
      Class<Short> class0 = Short.TYPE;
      defaultJSONParser0.parseObject((Type) class0);
      defaultJSONParser0.getDateFomartPattern();
      Hashtable<Rectangle, ImageCapabilities> hashtable0 = new Hashtable<Rectangle, ImageCapabilities>(551);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : {\"$ref\":\"$\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      LinkedHashMap<MockDate, Long> linkedHashMap0 = new LinkedHashMap<MockDate, Long>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("auPthorities");
      defaultJSONParser0.getExtraProcessors();
      ArrayList<DateFormatSymbols> arrayList0 = new ArrayList<DateFormatSymbols>();
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref*\":\"$\"}");
      Hashtable<Double, DecimalFormatSymbols> hashtable0 = new Hashtable<Double, DecimalFormatSymbols>();
      ParserConfig parserConfig0 = new ParserConfig();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      Class<Float> class0 = Float.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser1.acceptType("fastjson.parser.autoTypeAccept");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      String string0 = ")[!1yw\"c_D`";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")[!1yw\"c_D`");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : )[!1yw\"c_D`
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 103);
      jSONReaderScanner0.scanDate('[');
      Hashtable<Double, DecimalFormatSymbols> hashtable0 = new Hashtable<Double, DecimalFormatSymbols>();
      ParserConfig parserConfig0 = new ParserConfig();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("G+xQm");
      Hashtable<Double, DecimalFormatSymbols> hashtable1 = new Hashtable<Double, DecimalFormatSymbols>();
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ArrayDeque<DateFormatSymbols> arrayDeque0 = new ArrayDeque<DateFormatSymbols>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"$\"}");
      Float float0 = new Float((double) 1);
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      defaultJSONParser0.parseObject((Object) mapDeserializer0);
      Hashtable<Double, DecimalFormatSymbols> hashtable0 = new Hashtable<Double, DecimalFormatSymbols>();
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig parserConfig1 = new ParserConfig();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ParserConfig parserConfig2 = ParserConfig.global;
      JSONObject jSONObject0 = new JSONObject(false);
      jSONObject0.fluentClear();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : {\"$ref\":\"$\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", mini~umCY'axity=");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref*\":\"$\"}", parserConfig0, 1646);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject jSONObject0 = new JSONObject();
      defaultJSONParser0.parseKey();
      Object object0 = new Object();
      Stack<Double> stack0 = new Stack<Double>();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((OutputStream) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null output stream
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 103);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Z&", 103);
      jSONReaderScanner1.scanDate('+');
      Hashtable<Double, DecimalFormatSymbols> hashtable0 = new Hashtable<Double, DecimalFormatSymbols>();
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      JSONObject jSONObject0 = new JSONObject(2);
      Float float0 = new Float((double) '[');
      Integer integer0 = new Integer(0);
      Class<Double> class0 = Double.TYPE;
      // Undeclared exception!
      defaultJSONParser0.parseArray(class0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"$\"}");
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig parserConfig1 = new ParserConfig();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ParserConfig parserConfig2 = ParserConfig.global;
      PageAttributes.ColorType pageAttributes_ColorType0 = PageAttributes.ColorType.COLOR;
      ParserConfig parserConfig3 = new ParserConfig((ClassLoader) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig3);
      ParseContext parseContext0 = defaultJSONParser1.context;
      DefaultJSONParser.ResolveTask defaultJSONParser_ResolveTask0 = new DefaultJSONParser.ResolveTask((ParseContext) null, "fastjson.parser.autoTypeSupport");
      defaultJSONParser1.parseExtra(defaultJSONParser_ResolveTask0, "");
      JSONObject jSONObject0 = new JSONObject(true);
      jSONObject0.fluentClear();
      defaultJSONParser1.parseObject();
      defaultJSONParser1.resolveReference("n)MMV[$ {$");
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        JSON.parseArray("9 ;l)Ejr3[=,", class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but int, pos 1, json : 9 ;l)Ejr3[=,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayDeque<DateFormatSymbols> arrayDeque0 = new ArrayDeque<DateFormatSymbols>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"$\"}");
      defaultJSONParser0.getExtraTypeProviders();
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultJSONParser0.checkListResolve(arrayDeque0);
      Class<Short> class0 = Short.TYPE;
      Locale locale0 = Locale.KOREA;
      locale0.getScript();
      defaultJSONParser0.getExtraProcessors();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      arrayDeque0.add(dateFormatSymbols0);
      Boolean boolean0 = new Boolean("{\"$ref\":\"$\"}");
      defaultJSONParser0.parseObject((Type) class0);
      // Undeclared exception!
      try { 
        arrayDeque0.add((DateFormatSymbols) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[4] = '[';
      ArrayDeque<DateFormatSymbols> arrayDeque0 = new ArrayDeque<DateFormatSymbols>();
      Locale locale0 = new Locale(";4;rOvI\"a*", ";4;rOvI\"a*", "I{&rT]}9'PnL=~7nl8");
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("I{&rT]}9'PnL=~7nl8");
      defaultJSONParser0.checkListResolve(arrayDeque0);
      Float float0 = new Float((double) 0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(charArray0, 1, parserConfig0, (-3501));
      defaultJSONParser1.getInput();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : I{&rT]}9'PnL=~7nl8
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      String string0 = "{\"$ref\":\"$\"}";
      Boolean boolean0 = Boolean.TRUE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{\"$ref\":\"$\"}");
      String string1 = "setter not found, class ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{\"$ref\":\"$\"}");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("{\"$ref\":\"$\"}", parserConfig0, (-3283));
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONObject jSONObject0 = new JSONObject();
      defaultJSONParser1.parseKey();
      Dimension dimension0 = new Dimension();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(jSONObject0.defaultLocale);
      ParserConfig parserConfig1 = ParserConfig.global;
      Class<BigInteger> class0 = BigInteger.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.acceptType("setter not found, class ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \", info : pos 1, json : {\"$ref\":\"$\"}
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }
}
