/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 19:39:50 GMT 2018
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayReader;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackReader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[50];
      charArray0[0] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(1, jSTerm1.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      assertTrue(jSTerm0.isVariable());
      
      JSTerm jSTerm1 = jSTerm0.call();
      assertEquals(0, jSTerm1.capacity());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.setSize(0);
      jSTerm0.insertElementAt(jSSubstitution0, 0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSJshopVars.dot = 0;
      jSTerm1.retainAll(jSTerm0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("pUedV?:*A");
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSTerm0.addElement(stringBuffer0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.StringBuffer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      jSTerm0.trimToSize();
      jSSubstitution0.setSize(0);
      jSTerm0.insertElementAt(jSSubstitution0, 0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals("([] )", stringBuffer0.toString());
      assertTrue(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.backquote = 0;
      Object object0 = new Object();
      JSJshopVars.whiteSpace = 63;
      jSTerm0.addElement(object0);
      jSTerm0.toStr();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(28, stringBuffer0.length());
      
      JSJshopVars.verticalL = (-1415);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(boolean0);
      
      jSTerm1.print();
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("pUedV?:*A");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.makeConstant();
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      charArray0[1] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[5];
      charArray0[0] = '9';
      charArray0[1] = ':';
      charArray0[2] = 'W';
      charArray0[3] = 'v';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      charArray0[4] = 'w';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      jSTerm1.makeConstant();
      jSTerm1.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      jSTerm0.makeVariable();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      jSTerm0.call();
      assertTrue(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.backquote = 0;
      Object object0 = new Object();
      JSJshopVars.whiteSpace = 63;
      jSTerm0.addElement(object0);
      jSTerm0.toStr();
      jSTerm0.toStr();
      jSTerm0.makeVariable();
      JSJshopVars.verticalL = (-1415);
      jSTerm0.makeConstant();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("pUedV?:*A");
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      jSTerm0.addElement(stringBuffer0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.StringBuffer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertFalse(boolean0);
      assertEquals("[%e]", jSTerm1.toString());
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = 'e';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.equals(jSTerm1);
      System.setCurrentTimeMillis((-1L));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = 'f';
      charArray0[2] = 'O';
      charArray0[3] = 'm';
      charArray0[4] = 'L';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = 'O';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.slash = 1;
      jSTerm0.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("pUedV?:*A");
      jSTerm0.toStr();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("(pUedV?:*A )", stringBuffer0.toString());
      
      JSTerm jSTerm1 = jSTerm0.call();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("pUedV?:#*A");
      JSTerm jSTerm1 = jSTerm0.call();
      JSEvaluate.numericValue(jSTerm1);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertFalse(jSSubstitution0.fail());
      assertTrue(jSSubstitution0.isEmpty());
      assertFalse(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("pUedV?:*A");
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("(pUedV?:*A )", stringBuffer0.toString());
      
      JSTerm jSTerm1 = jSTerm0.call();
      JSEvaluate.numericValue(jSTerm0);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSSubstitution1.fail());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.interrogation = (-2);
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = '~';
      charArray0[2] = '';
      charArray0[3] = ':';
      charArray0[4] = '~';
      charArray0[5] = '0';
      charArray0[3] = 'z';
      charArray0[7] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(charArrayReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertEquals(2.0, streamTokenizer0.nval, 0.01);
      assertTrue(jSTerm2.isVariable());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("Reading Predicate");
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(20, stringBuffer0.length());
      
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm0);
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSSubstitution0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      PushbackReader pushbackReader0 = new PushbackReader(stringReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pushbackReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSSubstitution0.fail());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm0.isConstant());
      assertFalse(jSTerm0.isVariable());
  }
}
