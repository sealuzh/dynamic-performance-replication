/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:59:10 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.charset.Charset;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.SegmentedByteString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SegmentedByteString_ESTest extends SegmentedByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.md5();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        segmentedByteString0.sha1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha256(byteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      int int0 = 0;
      ByteString byteString0 = buffer0.snapshot();
      byteString0.toString();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)18;
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf(byteArray0, (int) (byte)18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        segmentedByteString0.hmacSha1(segmentedByteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toAsciiLowercase();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      // Undeclared exception!
      try { 
        segmentedByteString0.sha256();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      segmentedByteString0.hashCode = 31;
      segmentedByteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.asByteBuffer();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSource0.buffer, 0);
      byte[] byteArray0 = new byte[0];
      segmentedByteString0.rangeEquals((-13), byteArray0, (-528), (-3842));
      // Undeclared exception!
      try { 
        segmentedByteString0.base64Url();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      // Undeclared exception!
      try { 
        segmentedByteString0.hex();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")");
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString(">//*jY7,wLS=F?yJQ3&", charset0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      segmentedByteString0.rangeEquals((-1395), byteString0, 0, 1946);
      buffer0.indexOf((byte) (-3), (long) (byte)10);
      // Undeclared exception!
      try { 
        segmentedByteString0.lastIndexOf(byteString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer0, 0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      segmentedByteString0.write(pipedOutputStream0);
      // Undeclared exception!
      try { 
        segmentedByteString0.base64Url();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink.md5(realBufferedSource0.buffer);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSource0.buffer, 0);
      realBufferedSource0.buffer.readUtf8Line();
      // Undeclared exception!
      try { 
        segmentedByteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.SegmentedByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      realBufferedSink0.writeShortLe(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 2);
      // Undeclared exception!
      try { 
        segmentedByteString0.substring(120);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.emitCompleteSegments();
      realBufferedSink0.writeShortLe(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 2);
      realBufferedSink0.buffer.readUtf8Line();
      segmentedByteString0.write(buffer0);
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATA;
      segmentedByteString0.hashCode();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      segmentedByteString0.rangeEquals((int) (byte)119, byteString0, (int) (byte)119, 107);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.emitCompleteSegments();
      realBufferedSink0.writeShortLe((-23));
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 2);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
      segmentedByteString0.write(realBufferedSink0.buffer);
      try { 
        segmentedByteString0.write(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.emitCompleteSegments();
      realBufferedSink0.writeShortLe(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 2);
      realBufferedSink0.buffer.readUtf8Line();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      segmentedByteString0.write(buffer0);
      segmentedByteString0.utf8();
      Charset.defaultCharset();
      segmentedByteString0.rangeEquals(3384, (byte[]) null, 897, (int) (byte)101);
      assertFalse(buffer0.exhausted());
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.writeShortLe(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      hashingSink0.hash();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Charset charset0 = Charset.defaultCharset();
      segmentedByteString0.string(charset0);
      segmentedByteString0.endsWith((ByteString) segmentedByteString0);
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte((byte) (-38));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=-38 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "uECQZikqh[vep#Uc\"}");
      BufferedSink bufferedSink0 = realBufferedSink0.writeShortLe(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      HashingSink.hmacSha512(bufferedSink0, segmentedByteString0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)31;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "uECQZikqh[vep#Uc\"}");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "uECQZikqh[vep#Uc\"}");
      realBufferedSource0.readUtf8();
      segmentedByteString0.rangeEquals(0, byteArray0, (int) (byte) (-38), 0);
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(buffer0, (byte)31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=31
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      HashingSink.sha512(buffer0);
      realBufferedSource0.timeout();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.writeShortLe(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      segmentedByteString0.base64();
      SegmentedByteString segmentedByteString1 = new SegmentedByteString(realBufferedSink0.buffer, 1);
      realBufferedSource0.buffer.readUtf8Line();
      segmentedByteString0.rangeEquals(1399, (ByteString) segmentedByteString1, 1399, 4);
      assertEquals(1, segmentedByteString1.size());
      
      segmentedByteString0.getByte(1);
      assertFalse(segmentedByteString0.equals((Object)segmentedByteString1));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      realBufferedSource0.timeout();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      realBufferedSink0.writeShortLe(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      segmentedByteString0.hashCode();
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-38);
      byte byte0 = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)31;
      realBufferedSink0.writeShortLe(31);
      segmentedByteString0.rangeEquals((int) (byte)10, byteArray0, 277, (int) (byte) (-100));
      segmentedByteString0.base64Url();
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte((byte)10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=10 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readUtf8();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      realBufferedSource0.timeout();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      BufferedSink bufferedSink0 = realBufferedSink0.writeShortLe(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      buffer1.readUtf8Line();
      HashingSink.sha1(buffer1);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      realBufferedSink0.writeUtf8CodePoint((-1));
      segmentedByteString0.write(buffer1);
      byte[] byteArray0 = segmentedByteString0.toByteArray();
      ByteString byteString0 = hashingSink0.hash();
      byteString0.endsWith((ByteString) segmentedByteString0);
      segmentedByteString0.rangeEquals((-1), byteArray0, (-1), (-1));
      // Undeclared exception!
      try { 
        buffer1.readFully(((RealBufferedSink) bufferedSink0).buffer, 1000000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.emitCompleteSegments();
      realBufferedSink0.writeShortLe(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 2);
      realBufferedSink0.buffer.readUtf8Line();
      segmentedByteString0.write(buffer0);
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATA;
      segmentedByteString0.hashCode();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      hashingSource0.hash();
      boolean boolean0 = segmentedByteString0.rangeEquals(0, (ByteString) segmentedByteString0, (-5570), 1);
      assertEquals(2L, buffer0.completeSegmentByteCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      int int0 = 0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      realBufferedSource0.timeout();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.emit();
      Buffer buffer1 = realBufferedSink0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      realBufferedSink0.writeShortLe(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(buffer1, 2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashingSink.sha512(hashingSink0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = ByteString.decodeHex("");
      segmentedByteString0.equals(byteString0);
      SegmentedByteString segmentedByteString1 = null;
      try {
        segmentedByteString1 = new SegmentedByteString(buffer0, (-2123));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2123
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferedSink bufferedSink0 = realBufferedSink0.writeShortLe(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 2);
      segmentedByteString0.hashCode();
      segmentedByteString0.write(buffer0);
      HashingSink.hmacSha512(bufferedSink0, segmentedByteString0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      hashingSink0.toString();
      segmentedByteString0.equals(byteString0);
      segmentedByteString0.size();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-96);
      // Undeclared exception!
      try { 
        segmentedByteString0.getByte((byte) (-96));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=-96 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "out == null");
      Buffer buffer0 = new Buffer();
      buffer0.writableSegment(3506);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.emitCompleteSegments();
      realBufferedSink0.writeShortLe(0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 2);
      realBufferedSink0.buffer.readUtf8Line();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      segmentedByteString0.write(buffer0);
      byte[] byteArray0 = new byte[2];
      segmentedByteString0.utf8();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSource0.toString();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // s.limit == s.pos
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSource0.buffer);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-58);
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      SegmentedByteString segmentedByteString0 = new SegmentedByteString(realBufferedSink0.buffer, 2);
      realBufferedSink0.buffer.readUtf8Line();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byte[] byteArray1 = new byte[2];
      Charset.defaultCharset();
      boolean boolean0 = realBufferedSink0.closed;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      segmentedByteString0.indexOf(byteArray1, (-626));
      buffer0.indexOfElement((ByteString) segmentedByteString0);
      segmentedByteString0.base64Url();
      byte byte0 = ObjectStreamConstants.SC_EXTERNALIZABLE;
      segmentedByteString0.base64Url();
      segmentedByteString0.equals(buffer0);
      ByteString byteString0 = segmentedByteString0.toAsciiUppercase();
      byteString0.hex();
      segmentedByteString0.equals(byteString0);
      segmentedByteString0.internalArray();
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeShortLe((-626));
      realBufferedSink0.writeLongLe((-449L));
      Buffer buffer2 = buffer1.writeUtf8CodePoint(1);
      // Undeclared exception!
      try { 
        buffer2.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffff8e
         //
         verifyException("okio.Buffer", e);
      }
  }
}
