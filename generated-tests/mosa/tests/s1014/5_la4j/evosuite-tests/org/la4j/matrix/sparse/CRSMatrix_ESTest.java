/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:25:47 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.operation.inplace.InPlaceCopyMatrixToMatrix;
import org.la4j.operation.ooplace.OoPlaceVectorByMatrixMultiplication;
import org.la4j.vector.DenseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)73;
      byte byte0 = (byte)126;
      byteArray0[1] = (byte)126;
      byteArray0[2] = (byte) (-83);
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(96, 96, 96);
      DenseMatrix denseMatrix0 = cRSMatrix0.toDenseMatrix();
      Matrix matrix0 = cRSMatrix0.add((Matrix) denseMatrix0);
      matrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '5' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 113;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(113);
      double double0 = new Integer(113);
      sparseMatrix0.power(113);
      CRSMatrix.identity(int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 871.34;
      doubleArray1[1] = (-1366.2);
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      assertEquals(0.25, cRSMatrix0.density(), 0.01);
      assertEquals((-1366.2), cRSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = null;
      CRSMatrix.from1DArray(26, 1855, (double[]) null);
      int int0 = 1492;
      CRSMatrix.from1DArray(int0, int0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 3;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 8;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(68, 3, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.toDenseMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(1855);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1855
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toBinary();
      cRSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3, 3);
      CRSMatrix.identity(3);
      cRSMatrix0.copyOfShape(3, 3);
      cRSMatrix0.add((Matrix) cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[][] doubleArray0 = new double[8][4];
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.sum();
      cRSMatrix0.toBinary();
      MockRandom mockRandom0 = new MockRandom(4);
      CRSMatrix cRSMatrix1 = CRSMatrix.randomSymmetric(4, 0.0, (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cRSMatrix0.add((Matrix) cRSMatrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given matrices should have the same shape: 0x0 does not equal to 4x4.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceMatricesAddition", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 861;
      Random random0 = null;
      // Undeclared exception!
      try { 
        CRSMatrix.randomSymmetric(861, 1.0, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      cRSMatrix0.rank();
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      cRSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      Double double0 = new Double(3);
      cRSMatrix0.equals((Object) double0);
      cRSMatrix0.power(3);
      Locale locale0 = new Locale("vB(&n=Y~");
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 16;
      doubleArray0[1] = (double) 16;
      doubleArray0[2] = (double) 16;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(1864, 16, doubleArray0);
      MatrixMatrixOperation<String> matrixMatrixOperation0 = null;
      Matrix matrix0 = cRSMatrix0.rotate();
      cRSMatrix0.apply(matrixMatrixOperation0, matrix0);
      MockRandom mockRandom0 = new MockRandom();
      int int0 = 1645;
      CRSMatrix.diagonal(int0, doubleArray0[0]);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(13, 2312, 2312);
      cRSMatrix0.iteratorOfRow((-446));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(113, 113);
      cRSMatrix0.toDenseMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.random((-170), 86, (double) 113, (Random) null);
      cRSMatrix1.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[][] doubleArray0 = new double[4][4];
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = cRSMatrix0.blankOfColumns(1953);
      matrix0.add(2.0);
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1224);
      MockRandom mockRandom0 = new MockRandom(1L);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(4, mockRandom0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      denseMatrix0.multiplyByItsTranspose();
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 279;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2457, (-52.0));
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cRSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cRSMatrix0.to(matrixFactory0);
      cRSMatrix0.blankOfColumns(159);
      MockRandom mockRandom0 = new MockRandom();
      cRSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 32;
      MockRandom mockRandom0 = new MockRandom((-1L));
      // Undeclared exception!
      try { 
        CRSMatrix.random((-3038), 22, (double) (-3038), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1224);
      CRSMatrix cRSMatrix1 = new CRSMatrix();
      CRSMatrix.block(cRSMatrix1, cRSMatrix1, cRSMatrix0, cRSMatrix1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2457, (-52.0));
      cRSMatrix0.nonZeroAt(1730, 2457);
      DenseVector.zero(1730);
      cRSMatrix0.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(48);
      cRSMatrix0.getRow(48);
      int int0 = 2;
      cRSMatrix0.minInRow(int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      MockRandom mockRandom0 = new MockRandom(3);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(3, mockRandom0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, (SparseMatrix) cRSMatrix0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix1 = new InPlaceCopyMatrixToMatrix();
      denseMatrix0.multiplyByItsTranspose();
      cRSMatrix0.getColumn(3);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      cRSMatrix0.toColumnVector();
      MockRandom mockRandom0 = new MockRandom(3);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      CRSMatrix cRSMatrix1 = CRSMatrix.fromCSV("");
      // Undeclared exception!
      try { 
        cRSMatrix1.isZeroAt(3, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 247;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 247;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2457, (-52.0));
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldRows(vectorAccumulator0);
      Matrix matrix0 = cRSMatrix0.to(matrixFactory0);
      matrix0.norm();
      cRSMatrix0.iteratorOfRow(int0);
      double[][] doubleArrayArray0 = null;
      Matrix.from2DArray(doubleArrayArray0);
      int int1 = 84;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateAt(int0, int1, matrixFunction0);
      matrix0.set(int0, int1, doubleArray0[0]);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CRSMatrix.identity(48);
      CRSMatrix.diagonal(48, 48);
      CRSMatrix.identity(2151);
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1187, 1187);
      cRSMatrix0.copyOfShape(1215, 27);
      CRSMatrix cRSMatrix1 = CRSMatrix.fromCSV("");
      cRSMatrix1.add((Matrix) cRSMatrix0);
      cRSMatrix1.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SparseMatrix.identity(113);
      Integer integer0 = new Integer(113);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(113, (-97.6575));
      CRSMatrix.identity(113);
      Matrix matrix0 = cRSMatrix0.copyOfColumns(78);
      matrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(3);
      Double.max(1.0, 3);
      Matrix matrix0 = cRSMatrix0.power(3);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(98);
      CRSMatrix.block(matrix0, rowMajorSparseMatrix0, sparseMatrix0, matrix0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(8, (-148.0));
      cRSMatrix0.power(32);
      CRSMatrix cRSMatrix1 = new CRSMatrix(32, 32, 32);
      cRSMatrix0.copyOfShape(0, 32);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      CRSMatrix.from1DArray(32, 0, doubleArray0);
      String string0 = "";
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from2DArray((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2457, (-52.0));
      int int0 = 1730;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInRow(16, vectorProcedure0);
      cRSMatrix0.iteratorOfRow((-424));
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.updateAt(int0, int0, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      MockRandom mockRandom0 = new MockRandom(3);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(3, mockRandom0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, (SparseMatrix) cRSMatrix0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix1 = new InPlaceCopyMatrixToMatrix();
      cRSMatrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CRSMatrix.identity(3);
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CRSMatrix.identity(3);
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 3;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      CRSMatrix.diagonal(3, 3);
      Integer integer0 = new Integer(3);
      cRSMatrix0.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toBinary();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      MockRandom mockRandom0 = new MockRandom(3);
      DenseMatrix denseMatrix0 = DenseMatrix.randomSymmetric(3, mockRandom0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      Matrix matrix0 = inPlaceCopyMatrixToMatrix0.applySimple(denseMatrix0, (SparseMatrix) cRSMatrix0);
      cRSMatrix0.insert(matrix0);
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2457, (-52.0));
      cRSMatrix0.nonZeroAt(1730, 2457);
      DenseVector denseVector0 = DenseVector.zero(1730);
      Matrix matrix0 = denseVector0.toDiagonalMatrix();
      Matrix matrix1 = cRSMatrix0.insert(matrix0);
      Matrix matrix2 = cRSMatrix0.add(matrix1);
      matrix2.multiplyByItsTranspose();
      cRSMatrix0.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.sum();
      byte[] byteArray0 = cRSMatrix0.toBinary();
      CRSMatrix.fromBinary(byteArray0);
      // Undeclared exception!
      try { 
        cRSMatrix0.removeLastRow();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3, 3);
      CRSMatrix.identity(3);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(27, 3);
      cRSMatrix0.multiplyByItsTranspose();
      cRSMatrix0.nonZeroRowMajorIterator();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachNonZero(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3, 3);
      CRSMatrix.identity(3);
      Matrix matrix0 = cRSMatrix0.copyOfShape(98, 3);
      matrix0.minInRow(3);
      cRSMatrix0.setAll(3);
      matrix0.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 3;
      doubleArray0[0] = doubleArray1;
      int[] intArray0 = new int[2];
      intArray0[1] = 3;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toBinary();
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 113;
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(113);
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      CRSMatrix cRSMatrix1 = CRSMatrix.block(sparseMatrix0, sparseMatrix0, sparseMatrix0, cRSMatrix0);
      sparseMatrix0.insert((Matrix) cRSMatrix1);
      ((CRSMatrix) sparseMatrix0).minInRow(int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(8, 8);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.power(32);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix1.foldNonZeroInColumns(vectorAccumulator0);
      cRSMatrix0.copyOfColumns(32);
      cRSMatrix1.toCSV();
      Integer integer0 = new Integer(342);
      cRSMatrix0.rowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(104, 13);
      cRSMatrix0.toBinary();
      int[] intArray0 = new int[5];
      intArray0[1] = 4;
      intArray0[2] = 8;
      intArray0[4] = 104;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '104' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(8, (-148.0));
      Matrix matrix0 = cRSMatrix0.power(32);
      cRSMatrix0.copyOfShape(0, 32);
      DenseVector denseVector0 = DenseVector.zero(8);
      Matrix matrix1 = denseVector0.toDiagonalMatrix();
      matrix0.insert(matrix1);
      matrix0.add(matrix1);
      cRSMatrix0.multiplyByItsTranspose();
      matrix0.infinityNorm();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(113);
      Integer integer0 = new Integer(113);
      sparseMatrix0.toDenseMatrix();
      ((CRSMatrix) sparseMatrix0).minInRow(34);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(8, (-148.0));
      cRSMatrix0.multiply((double) 8);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(0, 6);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)6).when(vectorAccumulator0).accumulate();
      cRSMatrix1.foldNonZeroInColumn(8, vectorAccumulator0);
      cRSMatrix0.blankOfShape(99, 6);
      cRSMatrix0.minInRow(0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(113);
      Integer integer0 = new Integer(113);
      sparseMatrix0.toDenseMatrix();
      ((CRSMatrix) sparseMatrix0).maxInRow(10);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(8, 8);
      int[] intArray0 = new int[4];
      cRSMatrix0.toBinary();
      intArray0[0] = 4;
      intArray0[1] = 8;
      intArray0[2] = 6;
      intArray0[3] = 4;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '8' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)85;
      MockRandom mockRandom0 = new MockRandom();
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(30);
      cRSMatrix0.maxInRow(3);
      RowMajorSparseMatrix rowMajorSparseMatrix0 = cRSMatrix0.toRowMajorSparseMatrix();
      OoPlaceVectorByMatrixMultiplication ooPlaceVectorByMatrixMultiplication0 = new OoPlaceVectorByMatrixMultiplication();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 30;
      doubleArray0[1] = (double) 30;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (double) (byte)85;
      DenseVector denseVector0 = DenseVector.fromArray(doubleArray0);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.random((int) (byte)85, 37, 30.0, (Random) mockRandom0);
      Vector vector0 = ooPlaceVectorByMatrixMultiplication0.apply(denseVector0, columnMajorSparseMatrix0);
      rowMajorSparseMatrix0.setRow((int) byteArray0[1], vector0);
      int int0 = (-125);
      cRSMatrix0.insert((Matrix) rowMajorSparseMatrix0, (int) byteArray0[0], int0);
      MatrixProcedure matrixProcedure0 = null;
      cRSMatrix0.eachNonZero(matrixProcedure0);
      int[] intArray0 = new int[0];
      cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(132, (-2469.04476));
      cRSMatrix0.toDenseMatrix();
      CRSMatrix cRSMatrix1 = new CRSMatrix(3, 132, 132);
      cRSMatrix1.setAll(0.0);
      org.evosuite.runtime.Random.setNextRandom((-142));
      cRSMatrix0.nonZeroRowMajorIterator();
      Integer integer0 = new Integer(74);
      cRSMatrix1.rowMajorIterator();
      CRSMatrix.identity(6);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(48, 48, 48);
      MockRandom mockRandom0 = new MockRandom(959L);
      DenseMatrix.randomSymmetric(48, mockRandom0);
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(32, vectorFunction0);
      cRSMatrix0.toDenseMatrix();
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("Unknown symmetry type: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(81, 81, 3);
      cRSMatrix0.setRow(29, (double) 81);
      cRSMatrix0.sum();
      cRSMatrix0.toBinary();
      int[] intArray0 = new int[3];
      intArray0[0] = 81;
      intArray0[1] = 4;
      intArray0[2] = 3;
      cRSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(48);
      MockRandom mockRandom0 = new MockRandom(959L);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-990.72145559221), (-4016.13270052), (-990.72145559221), Double.POSITIVE_INFINITY, (-4016.13270052)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(13, vectorFunction0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 959L;
      InPlaceCopyMatrixToMatrix inPlaceCopyMatrixToMatrix0 = new InPlaceCopyMatrixToMatrix();
      cRSMatrix0.minInRow(13);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(48);
      MockRandom mockRandom0 = new MockRandom(959L);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cRSMatrix0.updateRow(13, vectorFunction0);
      double[][] doubleArray0 = new double[1][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 959L;
      doubleArray1[1] = (double) 959L;
      doubleArray1[2] = (double) 48;
      doubleArray1[3] = (double) 48;
      doubleArray1[4] = (double) 959L;
      doubleArray1[5] = (double) 48;
      doubleArray1[6] = (double) 13;
      doubleArray1[7] = 163.2892890566;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix1 = CRSMatrix.from2DArray(doubleArray0);
      SparseMatrix.identity(48);
      cRSMatrix1.toDenseMatrix();
      cRSMatrix0.minInRow(48);
      cRSMatrix0.nonZeroRowMajorIterator();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 8;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(8, 8);
      int int1 = 32;
      cRSMatrix0.power(32);
      Matrix matrix0 = cRSMatrix0.copyOfColumns(32);
      MockRandom mockRandom0 = new MockRandom(8);
      CRSMatrix.random(18, 18, 1.0, (Random) mockRandom0);
      matrix0.insert((Matrix) cRSMatrix0, 18, (-1523));
      Vector vector0 = null;
      matrix0.multiply(vector0);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(int1, int0);
      cRSMatrix1.blankOfColumns(int0);
      String string0 = "LYT^!*#P-";
      CRSMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.sum();
      cRSMatrix0.toBinary();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 48;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(48);
      cRSMatrix0.sum();
      byte[] byteArray0 = cRSMatrix0.toBinary();
      CRSMatrix cRSMatrix1 = CRSMatrix.fromBinary(byteArray0);
      CRSMatrix cRSMatrix2 = CRSMatrix.block(cRSMatrix1, cRSMatrix0, cRSMatrix1, cRSMatrix1);
      Matrix matrix0 = cRSMatrix2.removeLastRow();
      Matrix.block(cRSMatrix0, cRSMatrix2, cRSMatrix1, cRSMatrix1);
      CRSMatrix cRSMatrix3 = new CRSMatrix();
      CRSMatrix cRSMatrix4 = CRSMatrix.zero(int0, int0);
      cRSMatrix4.add(matrix0);
      matrix0.multiplyByItsTranspose();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.copyOfColumns(6);
      Matrix matrix0 = cRSMatrix0.multiply((double) 8);
      CRSMatrix cRSMatrix1 = (CRSMatrix)cRSMatrix0.copyOfShape(0, 6);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn((double)6).when(vectorAccumulator0).accumulate();
      cRSMatrix1.foldNonZeroInColumn(8, vectorAccumulator0);
      cRSMatrix0.add((Matrix) cRSMatrix0);
      matrix0.setAll(815.5191483395757);
      cRSMatrix0.rotate();
      org.evosuite.runtime.Random.setNextRandom(6);
      // Undeclared exception!
      try { 
        cRSMatrix1.minInRow(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(113, 113);
      Integer integer0 = new Integer(113);
      cRSMatrix0.toDenseMatrix();
      cRSMatrix0.maxInRow(10);
      cRSMatrix0.minInRow(2);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 3;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(3);
      MockRandom mockRandom0 = new MockRandom(3);
      DenseMatrix.randomSymmetric(3, mockRandom0);
      MockRandom mockRandom1 = new MockRandom(3);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.update(matrixFunction0);
      int int1 = 1272;
      // Undeclared exception!
      DenseMatrix.randomSymmetric(1272, mockRandom1);
  }
}
