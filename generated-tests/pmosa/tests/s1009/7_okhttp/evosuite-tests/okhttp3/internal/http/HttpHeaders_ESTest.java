/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 13:52:39 GMT 2018
 */

package okhttp3.internal.http;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiFunction;
import okhttp3.Challenge;
import okhttp3.CookieJar;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.internal.http.HttpHeaders;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HttpHeaders_ESTest extends HttpHeaders_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "h64";
      HttpHeaders.parseSeconds("h64", 255);
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HttpHeaders.skipWhitespace(" +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)", 1907);
      HttpHeaders.skipWhitespace("VW0#", 1019);
      HttpHeaders.skipWhitespace("Q> AUeMm*K'zO~:l", 1019);
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      try { 
        MockURL.URL("i)RA4", "n.w($pC-'P*g8rb", "U.?Iye{o5&2m=j@");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: i)ra4
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      headers0.toString();
      String string0 = "";
      hashMap0.put("", "");
      headers0.newBuilder();
      headers0.getDate("");
      headers0.toString();
      headers0.toMultimap();
      hashMap0.put((String) null, "");
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      HttpHeaders.contentLength(headers0);
      hashMap0.put("", "me3~^");
      HttpHeaders.varyFields(headers0);
      HttpHeaders.parseChallenges(headers1, "q\"oip)cV-gZ E%qCZd");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(biFunction0).apply(any() , any());
      hashMap0.replaceAll(biFunction0);
      HttpHeaders.skipWhitespace("", 0);
      Headers headers2 = HttpHeaders.varyHeaders(headers1, headers1);
      headers2.toString();
      headers2.names();
      HttpHeaders.hasVaryAll(headers2);
      // Undeclared exception!
      try { 
        HttpHeaders.skipUntil((String) null, 0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = HttpHeaders.skipWhitespace("d r", 0);
      int int1 = HttpHeaders.parseSeconds("d r", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = HttpHeaders.skipUntil("Y5\"i8R`|y", 1568, (String) null);
      assertEquals(1568, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "$.v!";
      int int0 = 7;
      String string1 = null;
      HttpHeaders.skipUntil("$.v!", 7, (String) null);
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      String string2 = null;
      String string3 = "TO(/d\\.Aq";
      try { 
        MockURI.URI("$.v!", "$.v!", (String) null, "TO(/d.Aq", (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 0: $.v!://$.v!?TO(/d.Aq
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpHeaders.contentLength((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "transfer-encoding";
      stringArray0[1] = "transfer-encoding";
      Headers headers0 = Headers.of(stringArray0);
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = HttpHeaders.skipUntil("We.Z", 0, ",");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      int int0 = HttpHeaders.skipWhitespace(" +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) ;(:?,|$)", 19);
      int int1 = HttpHeaders.skipUntil(" +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) ;(:?,|$)", 19, " +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) ;(:?,|$)");
      assertTrue(int1 == int0);
      assertEquals(19, int1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      String[] stringArray0 = new String[0];
      Headers headers1 = Headers.of(stringArray0);
      Headers.of((Map<String, String>) hashMap0);
      headers0.toMultimap();
      Headers.of((Map<String, String>) hashMap0);
      headers0.toMultimap();
      HttpHeaders.parseChallenges(headers0, (String) null);
      HttpHeaders.skipWhitespace("#U:t", Integer.MAX_VALUE);
      HttpHeaders.varyFields(headers1);
      Headers headers2 = Headers.of((Map<String, String>) hashMap0);
      HttpHeaders.varyHeaders(headers2, headers2);
      HttpHeaders.parseChallenges(headers2, "#U:t");
      HttpUrl.parse("#U:t");
      HttpHeaders.receiveHeaders((CookieJar) null, (HttpUrl) null, headers1);
      assertNotSame(headers1, headers0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Vary", "=S78gLuG<\"&U$");
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertEquals(0, headers1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Vary";
      stringArray0[1] = "Vary";
      Headers headers0 = Headers.of(stringArray0);
      headers0.toMultimap();
      Headers.of(stringArray0);
      boolean boolean0 = HttpHeaders.hasVaryAll(headers0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Vary";
      stringArray0[1] = "Vary";
      stringArray0[2] = "Vary";
      stringArray0[3] = "Vary";
      Headers headers0 = Headers.of(stringArray0);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      assertEquals(2, headers1.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpHeaders.skipWhitespace(" +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)", 0);
      HttpHeaders.skipWhitespace(" > ", 1);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap1);
      Headers headers1 = HttpHeaders.varyHeaders(headers0, headers0);
      HttpUrl.parse("A{xVOrlHr");
      CookieJar cookieJar0 = mock(CookieJar.class, new ViolatedAssumptionAnswer());
      HttpHeaders.receiveHeaders(cookieJar0, (HttpUrl) null, headers1);
      assertTrue(headers0.equals((Object)headers1));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpHeaders.skipWhitespace(" +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)", 0);
      HttpHeaders.skipWhitespace(" > ", 1);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      String[] stringArray0 = new String[8];
      stringArray0[0] = " +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)";
      stringArray0[1] = " > ";
      stringArray0[2] = " +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)";
      stringArray0[3] = " +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)";
      stringArray0[4] = " +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)";
      stringArray0[5] = " > ";
      stringArray0[6] = " +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)";
      stringArray0[7] = "5` NtcC$$gMWv;q";
      Headers headers0 = Headers.of(stringArray0);
      headers0.getDate("([0-9a-fa-f]*:[0-9a-fa-f:.]*)|([d.]+)");
      HttpHeaders.parseChallenges(headers0, "+([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)");
      HttpHeaders.varyHeaders(headers0, headers0);
      HttpHeaders.contentLength(headers0);
      // Undeclared exception!
      try { 
        HttpHeaders.hasVaryAll((Response) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HttpHeaders.parseSeconds("8", 55);
      System.setCurrentTimeMillis(55);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Vary";
      stringArray0[1] = "5` NtcC$$gMWv;q";
      stringArray0[2] = "5` NtcC$$gMWv;q";
      stringArray0[3] = "5` NtcC$$gMWv;q";
      stringArray0[4] = "Invalid host: ";
      stringArray0[5] = "dgyidx&wt.isftfvp";
      Headers headers0 = Headers.of(stringArray0);
      headers0.getDate("w1%pb>im?y?3pu");
      HttpHeaders.parseChallenges(headers0, "s}a");
      // Undeclared exception!
      try { 
        HttpHeaders.varyHeaders(headers0, headers0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected char 0x20 at 2 in header name: 5` NtcC$$gMWv;q
         //
         verifyException("okhttp3.Headers$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("Content-Length", "wSZ?0^+)\"l>_Oh.");
      Headers headers0 = Headers.of((Map<String, String>) hashMap1);
      long long0 = HttpHeaders.contentLength(headers0);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers.of((Map<String, String>) hashMap0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "size=%s offset=%s yteCount=%s";
      stringArray0[1] = "size=%s offset=%s yteCount=%s";
      Headers headers0 = Headers.of(stringArray0);
      List<Challenge> list0 = HttpHeaders.parseChallenges(headers0, "size=%s offset=%s yteCount=%s");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpHeaders.varyMatches((Response) null, (Headers) null, (Request) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okhttp3.internal.http.HttpHeaders", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "must have a request body.";
      stringArray0[1] = "size=%s offset=%s realmount=%s";
      Headers headers0 = Headers.of(stringArray0);
      HttpHeaders.parseChallenges(headers0, "must have a request body.");
      HttpUrl.parse("must have a request body.");
      HttpHeaders.receiveHeaders((CookieJar) null, (HttpUrl) null, headers0);
      assertEquals(1, headers0.size());
  }
}
