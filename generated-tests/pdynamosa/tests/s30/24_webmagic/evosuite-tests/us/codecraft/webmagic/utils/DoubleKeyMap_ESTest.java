/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 17:01:55 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Map<HashMap<Object, Integer>, Object>> hashMap0 = new HashMap<Integer, Map<HashMap<Object, Integer>, Object>>();
      Integer integer0 = new Integer(1);
      HashMap<HashMap<Object, Integer>, Object> hashMap1 = new HashMap<HashMap<Object, Integer>, Object>();
      hashMap0.put(integer0, hashMap1);
      DoubleKeyMap<Integer, HashMap<Object, Integer>, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Object, Integer>, Object>(hashMap0);
      Map<HashMap<Object, Integer>, Object> map0 = doubleKeyMap0.remove(integer0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<String, Object, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<String, Object>>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      doubleKeyMap0.put("", (Object) "", hashMap0);
      Map<Object, HashMap<String, Object>> map0 = doubleKeyMap0.remove("");
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, Map<Integer, Object>> hashMap0 = new HashMap<String, Map<Integer, Object>>();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(hashMap0);
      DoubleKeyMap<Map<String, String>, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Map<String, String>, Object, Integer>();
      Map<Integer, Object> map0 = doubleKeyMap1.newMap();
      hashMap0.put("", map0);
      Map<Integer, Object> map1 = doubleKeyMap0.get("");
      assertEquals(0, map1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Integer, Integer>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put(hashMap0, integer0, integer0);
      Map<Integer, Integer> map0 = doubleKeyMap0.get(hashMap0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Integer, Object, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, HashMap<Integer, Object>>();
      Integer integer0 = new Integer((-148));
      HashMap<Integer, Object> hashMap0 = doubleKeyMap0.remove(integer0, (Object) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<HashMap<Object, String>, Map<Object, Integer>> hashMap0 = new HashMap<HashMap<Object, String>, Map<Object, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, String>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Object, Integer>(hashMap0, class0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Object object0 = new Object();
      Integer integer0 = doubleKeyMap0.remove(hashMap1, object0);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Integer, Map<Integer, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Integer, Integer>, String>();
      DoubleKeyMap<Object, String, Map<String, String>> doubleKeyMap1 = new DoubleKeyMap<Object, String, Map<String, String>>();
      Map<String, String> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0, "us.codecraft.webmagic.utils.DoubleKeyMap");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<String, Integer>, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<String, Integer>, HashMap<String, Object>>();
      Map<HashMap<String, Integer>, HashMap<String, Object>> map0 = doubleKeyMap0.remove((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Map<Object, Map<String, String>>, Map<Integer, Object>> hashMap0 = new HashMap<Map<Object, Map<String, String>>, Map<Integer, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, Map<String, String>>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Map<String, String>>, Integer, Object>(hashMap0, class0);
      HashMap<Object, Map<Integer, Object>> hashMap1 = new HashMap<Object, Map<Integer, Object>>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>(hashMap1);
      Map<Integer, Object> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, String>();
      Integer integer0 = new Integer(1547);
      String string0 = doubleKeyMap0.put(integer0, (Integer) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>((Map<Object, Map<Object, Object>>) null);
      DoubleKeyMap<Map<String, String>, Object, String> doubleKeyMap1 = new DoubleKeyMap<Map<String, String>, Object, String>();
      Map<Object, Map<Integer, Integer>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap2 = new DoubleKeyMap<Object, Integer, Integer>(map0);
      Map<Object, HashMap<Map<Object, Map<HashMap<Object, Object>, HashMap<String, Object>>>, Object>> map1 = doubleKeyMap2.newMap();
      Object object0 = doubleKeyMap0.put((Object) null, (Object) map1, (Object) map0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<String, Map<Object, Object>, String> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Object>, String>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      String string0 = doubleKeyMap0.get((String) null, (Map<Object, Object>) hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Integer, Map<Integer, Integer>, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Integer, Integer>, String>();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Integer>();
      Integer integer0 = new Integer((-1));
      Integer integer1 = doubleKeyMap1.get((Object) doubleKeyMap0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(hashMap0, class0);
      Map<Integer, Object> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>();
      Map<Object, Map<Map<String, String>, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Map<String, String>, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Map<String, String>, Integer>(map0);
      Map<Map<String, String>, Integer> map1 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>();
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(map0, class0);
      Object object0 = new Object();
      Integer integer0 = new Integer(2032);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put(object0, object0, (Object) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, String, Object>((Map<String, Map<String, Object>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(1);
      DoubleKeyMap<Map<Map<String, String>, Map<String, String>>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Map<String, String>, Map<String, String>>, String, Integer>();
      HashMap<Map<String, String>, Map<String, String>> hashMap0 = new HashMap<Map<String, String>, Map<String, String>>();
      doubleKeyMap0.put((Map<Map<String, String>, Map<String, String>>) hashMap0, "", integer0);
      Integer integer1 = doubleKeyMap0.remove((Map<Map<String, String>, Map<String, String>>) hashMap0, "");
      assertEquals(1, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<Integer, String, Map<String, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Map<String, String>>();
      Map<String, String> map0 = doubleKeyMap0.remove((Integer) null, "#3*jahwCg_'^+t*");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Map<String, Integer>, Map<Object, HashMap<Integer, String>>> hashMap0 = new HashMap<Map<String, Integer>, Map<Object, HashMap<Integer, String>>>();
      DoubleKeyMap<Map<String, Integer>, Object, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Map<String, Integer>, Object, HashMap<Integer, String>>(hashMap0);
      HashMap<Map<String, String>, Map<Map<String, Integer>, HashMap<Object, Object>>> hashMap1 = new HashMap<Map<String, String>, Map<Map<String, Integer>, HashMap<Object, Object>>>();
      DoubleKeyMap<Map<String, String>, Map<String, Integer>, HashMap<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<Map<String, String>, Map<String, Integer>, HashMap<Object, Object>>(hashMap1);
      Map<String, Integer> map0 = doubleKeyMap1.newMap();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<Integer, String> hashMap3 = new HashMap<Integer, String>();
      HashMap<Integer, String> hashMap4 = doubleKeyMap0.put(map0, (Object) hashMap2, hashMap3);
      HashMap<Integer, String> hashMap5 = doubleKeyMap0.put(map0, (Object) hashMap1, hashMap4);
      assertNotNull(hashMap5);
      assertSame(hashMap5, hashMap3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<Map<HashMap<Object, String>, Map<String, Object>>, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Map<HashMap<Object, String>, Map<String, Object>>, Integer, String>();
      Map<HashMap<Object, String>, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, String>, String, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, String>, String, Object>(map0, class0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Object object0 = doubleKeyMap1.get(hashMap0, (String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<Map<String, Integer>, Map<Object, HashMap<Integer, String>>> hashMap0 = new HashMap<Map<String, Integer>, Map<Object, HashMap<Integer, String>>>();
      DoubleKeyMap<Map<String, Integer>, Object, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Map<String, Integer>, Object, HashMap<Integer, String>>(hashMap0);
      HashMap<Map<String, String>, Map<Map<String, Integer>, HashMap<Object, Object>>> hashMap1 = new HashMap<Map<String, String>, Map<Map<String, Integer>, HashMap<Object, Object>>>();
      DoubleKeyMap<Map<String, String>, Map<String, Integer>, HashMap<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<Map<String, String>, Map<String, Integer>, HashMap<Object, Object>>(hashMap1);
      Map<String, Integer> map0 = doubleKeyMap1.newMap();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<Integer, String> hashMap3 = new HashMap<Integer, String>();
      doubleKeyMap0.put(map0, (Object) hashMap2, hashMap3);
      HashMap<Integer, String> hashMap4 = doubleKeyMap0.get(map0, (Object) doubleKeyMap1);
      assertNull(hashMap4);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer(1);
      DoubleKeyMap<Map<Map<String, String>, Map<String, String>>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Map<String, String>, Map<String, String>>, String, Integer>();
      HashMap<Map<String, String>, Map<String, String>> hashMap0 = new HashMap<Map<String, String>, Map<String, String>>();
      doubleKeyMap0.put((Map<Map<String, String>, Map<String, String>>) hashMap0, "#3*jahwCg_'^+t*", integer0);
      Integer integer1 = doubleKeyMap0.remove((Map<Map<String, String>, Map<String, String>>) hashMap0, "9_PX3nN/Ug");
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<String, String>, HashMap<String, Object>, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<String, String>, HashMap<String, Object>, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
