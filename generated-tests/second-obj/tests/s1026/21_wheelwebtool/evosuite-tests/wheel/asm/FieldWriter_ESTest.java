/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:49:25 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3421));
      ByteVector byteVector0 = new ByteVector();
      System.setCurrentTimeMillis(2);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "l$Siz", "The size must be non-negative", "x]", "x]");
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3421));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3421), "Po", "Po", "Po", "Po");
      String string0 = "ZNLcv1^R";
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, 2, "Po", "ZNLcv1^R", "A1Yx([;PiA(S", fieldWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.FieldWriter@8
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3421));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3421), "n cTGem#P$DE kN", "Po", "n cTGem#P$DE kN", "Po");
      fieldWriter0.getSize();
      fieldWriter0.visitAnnotation("lB~3xq55?f!", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3421));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3421), "n cTGem#P$DE kN", "Po", "n cTGem#P$DE kN", "Po");
      fieldWriter0.getSize();
      fieldWriter0.visitAnnotation("n cTGem#P$DE kN", false);
      fieldWriter0.visitEnd();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3421));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3421), "n cTGem#P$DE kN", "Po", "n cTGem#P$DE kN", "Po");
      fieldWriter0.getSize();
      classWriter0.newInteger((-3421));
      fieldWriter0.visitAnnotation("n cTGem#P$DE kN", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2209);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "Po", "", "Po", "Synthetic");
      fieldWriter0.getSize();
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-352));
      Label label0 = new Label();
      Object object0 = label0.info;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3421), "or", "n cTGem#P$DE kN", "D\"pONK;I", (Object) null);
      fieldWriter0.getSize();
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("[]", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassWriter classWriter0 = new ClassWriter((-3389));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3389), "StackMapTable", "Po", "StackMapTable", "Po");
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("Po");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector(2403);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3421));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3421), "Po", "Po", "Po", "Po");
      ByteVector byteVector0 = classWriter0.pool;
      System.setCurrentTimeMillis(1);
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitEnd();
      Attribute attribute0 = new Attribute("Po");
      Attribute attribute1 = attribute0.next;
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassWriter classWriter0 = new ClassWriter((-1));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 191, "Po", "ZZ]r^*Dv'~_L)m W9", "Po", (Object) null);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.getSize();
      fieldWriter0.put(byteVector0);
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter0.visitEnd();
      assertSame(fieldWriter0, fieldWriter1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3421));
      int int0 = (-2635);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-567), "Po", "", (String) null, (Object) null);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putUTF8("YtkmQSpTny_&W");
      byteVector0.putUTF8("The FileFilter must not be null");
      FieldWriter fieldWriter1 = classWriter0.firstField;
      fieldWriter1.put(byteVector1);
      fieldWriter0.put(byteVector0);
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-48);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0, (-567), (byte) (-48));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -559
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3421));
      ByteVector byteVector0 = new ByteVector();
      System.setCurrentTimeMillis(2);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "l$Siz", "The size must be non-negative", "Po\"", "Po\"");
      fieldWriter0.visitAnnotation("The size must be non-negative", false);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3421));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3421), "Po", "Po", "Po", "Po");
      ByteVector byteVector0 = new ByteVector();
      byteVector0.put11((-3421), (-3421));
      fieldWriter0.visitAnnotation("Po", true);
      byteVector0.putUTF8("Po");
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitEnd();
      System.setCurrentTimeMillis(2828L);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ClassWriter classWriter0 = new ClassWriter((-3421));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-3421), "Po", "Po", "Po", "Po");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitEnd();
      classWriter0.version = (int) (byte)52;
      classWriter0.threshold = 90;
      ByteVector byteVector1 = byteVector0.putUTF8("org.apache.comonsio.filefiler.HiddenFileFilter");
      ByteVector byteVector2 = byteVector1.putInt((byte)52);
      fieldWriter0.put(byteVector2);
      fieldWriter0.getSize();
      System.setCurrentTimeMillis(2);
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitEnd();
  }
}
