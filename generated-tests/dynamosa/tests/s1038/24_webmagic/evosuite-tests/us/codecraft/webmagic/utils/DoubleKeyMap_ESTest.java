/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 05 14:05:43 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      doubleKeyMap0.put("e1", (Object) "e1", "us.codecraft.webmagic.utils.DoubleKeyMap");
      Integer integer0 = new Integer(1554);
      String string0 = doubleKeyMap0.remove("e1", (Object) integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Map<String, String>> hashMap0 = new HashMap<HashMap<Object, Object>, Map<String, String>>();
      DoubleKeyMap<HashMap<Object, Object>, String, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, String, String>(hashMap0);
      doubleKeyMap0.put((HashMap<Object, Object>) null, "hpD", "hpD");
      Map<String, String> map0 = doubleKeyMap0.get((HashMap<Object, Object>) null);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Integer>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, Integer, Object>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Object object0 = doubleKeyMap0.remove(hashMap0, (Integer) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      String string0 = doubleKeyMap0.remove("", (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Object, Map<String, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, Object>, Object>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = doubleKeyMap0.remove((Object) null, (Map<String, Object>) hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      DoubleKeyMap<Object, Integer, HashMap<Integer, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, HashMap<Integer, Object>>();
      Integer integer0 = new Integer(0);
      HashMap<Integer, Object> hashMap0 = doubleKeyMap1.remove((Object) doubleKeyMap0, integer0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>((Map<Object, Map<Object, String>>) null);
      Map<Object, String> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>();
      Map<Integer, Object> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Map<HashMap<String, Object>, Object>> hashMap0 = new HashMap<String, Map<HashMap<String, Object>, Object>>();
      DoubleKeyMap<String, HashMap<String, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<String, Object>, Object>(hashMap0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      Object object0 = doubleKeyMap0.put("jwf6U5p[v{sHR?f2", hashMap1, (Object) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put("us.codecraft.webmagic.utils.DoubleKeyMap", object0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Map<Integer, Integer>> hashMap0 = new HashMap<HashMap<Object, Object>, Map<Integer, Integer>>();
      DoubleKeyMap<HashMap<Object, Object>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Integer, Integer>(hashMap0);
      Map<Integer, Map<String, String>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, String> doubleKeyMap1 = new DoubleKeyMap<Integer, String, String>(map0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Integer) null, (String) null, "n WgV !sBvp(I=P8YhN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      DoubleKeyMap<Object, HashMap<String, Object>, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<String, Object>, Integer>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = new Integer((-421));
      Integer integer1 = doubleKeyMap1.put((Object) doubleKeyMap0, hashMap0, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Integer, String, Map<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Map<Integer, String>>();
      Integer integer0 = new Integer(0);
      Map<Integer, String> map0 = doubleKeyMap0.get(integer0, (String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      DoubleKeyMap<Map<Object, String>, Object, String> doubleKeyMap1 = new DoubleKeyMap<Map<Object, String>, Object, String>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      String string0 = doubleKeyMap1.get((Map<Object, String>) hashMap0, (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      DoubleKeyMap<String, HashMap<Object, Object>, HashMap<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<String, HashMap<Object, Object>, HashMap<Object, Object>>();
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Object, Object>(map0);
      Map<Object, Object> map1 = doubleKeyMap2.get((Object) doubleKeyMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Map<Object, String>, Integer, Map<Object, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<Object, String>, Integer, Map<Object, String>>((Map<Map<Object, String>, Map<Integer, Map<Object, String>>>) null, (Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<Integer, Integer>, Map<Object, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Integer, Integer>, Map<Object, String>>((Map<Object, Map<HashMap<Integer, Integer>, Map<Object, String>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      Map<Integer, Object> map0 = doubleKeyMap0.newMap();
      doubleKeyMap0.put("", (Object) map0, "e1");
      String string0 = doubleKeyMap0.put("", (Object) null, "w*QBIBip{e2,vJ&h");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<Integer, HashMap<Object, Map<Object, String>>, String> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Object, Map<Object, String>>, String>();
      Integer integer0 = new Integer(1238);
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      doubleKeyMap0.put(integer0, hashMap0, "");
      String string0 = doubleKeyMap0.get(integer0, hashMap0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<Integer, Object>, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Integer, Object>, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>((Map<Object, Map<Integer, Integer>>) null);
      Integer integer0 = new Integer(0);
      Integer integer1 = doubleKeyMap0.get((Object) null, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      doubleKeyMap0.put("", (Object) "", "");
      String string0 = doubleKeyMap0.remove("", (Object) "");
      assertEquals("", string0);
  }
}
