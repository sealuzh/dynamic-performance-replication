/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 20:40:07 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("uBC5^MV]", (Object) "uBC5^MV]");
      jSONObject1.putOpt("cop", hashMap0);
      JSONObject.valueToString(jSONObject0, (-1018), (-1018));
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0-b]F+<v_", (Object) "0-b]F+<v_");
      JSONObject jSONObject2 = jSONObject1.accumulate("0-b]F+<v_", "0-b]F+<v_");
      String string0 = jSONObject2.toString((-905));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (Object) "");
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      Byte byte0 = new Byte((byte) (-4));
      JSONObject jSONObject2 = jSONObject1.append("", byte0);
      assertSame(jSONObject0, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put("uBC5^MV]", (Collection) linkedList0);
      Long long0 = Long.valueOf((long) (-1018));
      JSONObject jSONObject2 = jSONObject1.accumulate("uBC5^MV]", long0);
      assertSame(jSONObject2, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{-JU%@jV?0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 10 of {-JU%@jV?0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("|");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("nu", jSONObject0);
      jSONObject0.optString("nu");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 91);
      long long0 = jSONObject0.optLong("");
      assertEquals(91L, long0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      Float float0 = new Float((-1461.0073));
      hashMap0.put("", float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("");
      assertEquals((-1461), int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer integer0 = new Integer(345);
      JSONObject jSONObject0 = new JSONObject(integer0);
      double double0 = jSONObject0.optDouble(" 9.DqHi!:`", (-1.0));
      assertEquals((-1.0), double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.put(" of ", (Object) long0);
      double double0 = jSONObject1.optDouble(" of ");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("xQ/9sr", (-1));
      double double0 = jSONObject0.optDouble("xQ/9sr");
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("true", (Object) "true");
      Object object0 = jSONObject1.opt("true");
      assertEquals("true", object0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Long long0 = new Long((-1656L));
      hashMap0.put("", long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("y8,hAG`L)RaYH&", (Object) "y8,hAG`L)RaYH&");
      boolean boolean0 = jSONObject1.has("y8,hAG`L)RaYH&");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject1 = jSONObject0.put("J", (Map) hashMap0);
      String string0 = jSONObject1.getString("J");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("0-b]F+<v_", jSONArray0);
      JSONArray jSONArray1 = jSONObject1.getJSONArray("0-b]F+<v_");
      assertEquals(1, jSONArray1.length());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Integer integer0 = new Integer(345);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("Y1%uHWV?]sp9b/X:4", (double) 0L);
      double double0 = jSONObject1.getDouble("Y1%uHWV?]sp9b/X:4");
      assertEquals(2, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)3066);
      jSONObject0.put("", (Object) short0);
      double double0 = jSONObject0.getDouble("");
      assertEquals(3066.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 0, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(13, 0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "\"\"");
      jSONObject0.toString(0, 13);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "X");
      jSONObject0.toString((-1090), (-1090));
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "F?8/EsVrB+2grl.t\"K");
      jSONObject0.remove("F?8/EsVrB+2grl.t\"K");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("nu", object0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", true);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Map) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Long long0 = new Long((-1656L));
      hashMap0.put("", long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("1513", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONArray0.toJSONObject(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[6];
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Collection<String> collection0 = hashMap0.values();
      JSONObject jSONObject1 = jSONObject0.put("Missing value", collection0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("", (long) (-574));
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("iC?AnEvg`mH", 0);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("(sarVHUf;|d>M3", 1.0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (-2469.4165855));
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optString((String) null, (String) null);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "true");
      String string0 = jSONObject0.optString((String) null);
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getequals");
      long long0 = jSONObject0.optLong("p+i`D?4n: 3=", (-2554L));
      assertEquals(3, jSONObject0.length());
      assertEquals((-2554L), long0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("iC?AnEvg`mH", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("", 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(2, jSONObject0.length());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("");
      assertNull(jSONObject1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "true");
      jSONObject0.optJSONArray("");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt((String) null, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      int int0 = jSONObject0.optInt("_W:bHvZb_hxS*", (-2919));
      assertEquals((-2919), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("RH.)G4d", 91);
      assertEquals(91, int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("", 2);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      double double0 = jSONObject0.optDouble((String) null, (double) 0L);
      assertEquals(1, jSONObject0.length());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      boolean boolean0 = jSONObject0.optBoolean("", true);
      assertTrue(boolean0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "tr~ue");
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "true");
      boolean boolean0 = jSONObject0.optBoolean("");
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      boolean boolean0 = jSONObject0.isNull(stringArray0[3]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Integer integer0 = new Integer(345);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.has("");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Integer integer0 = new Integer(345);
      JSONObject jSONObject0 = new JSONObject(integer0);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("&#9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&#9\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "F?8/EsVrB+2grl.t\"K");
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "true");
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-339.3040138057));
      assertEquals("-339.3040138057", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("Pko<<,zLA{0+}", (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      jSONObject0.append("F?8/EsVrB+2grl.t\"K", object0);
      JSONArray jSONArray0 = (JSONArray)jSONObject0.remove("F?8/EsVrB+2grl.t\"K");
      assertEquals(1, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, "\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("getcompute", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("uBC5^MV]", (Object) "uBC5^MV]");
      jSONObject1.putOpt("#.+U[%!9u^.V{4_@[", jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONObject1.write(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject();
      hashMap0.put((JSONArray) null, "%19JqO-");
      jSONObject0.putOpt("cop", hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(jSONObject0, (-1018), (-1018));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "i;q4]itm!$?%#t");
      // Undeclared exception!
      jSONObject0.toString(3990, 3990);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "&,[IYQ1HW'\"_~e");
      // Undeclared exception!
      jSONObject0.toString(1875);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 872L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 60);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      Float float0 = new Float(1030.23F);
      hashMap0.put(float0, ".UFHfxKRs?7&yy(Ep");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, "n:x>{pS$:/fE0zm8%3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("(U&[}],[y[x09q5");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of (U&[}],[y[x09q5
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("true", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, 1003, 1003);
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString(23, 23);
      assertEquals(1, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = JSONObject.quote("woj+LT5\">?@L");
      assertEquals("\"woj+LT5\\\">?@L\"", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = JSONObject.quote("YO}v=~/yW");
      assertEquals("\"YO}v=~/yW\"", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = JSONObject.quote("Qfl4/R");
      assertEquals("\"Qfl4/R\"", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("\n", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String string0 = jSONObject0.optString("3=tg8VKhWp$ni3[", "is");
      assertEquals(1, jSONObject0.length());
      assertEquals("is", string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 91);
      double double0 = jSONObject1.optDouble("", (-2234.6405541276));
      assertEquals(91.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getequals");
      double double0 = jSONObject0.optDouble("getequals", 496.169);
      assertEquals(496.169, double0, 0.01);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.opt((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Integer integer0 = new Integer(345);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 91);
      long long0 = jSONObject0.getLong("");
      assertEquals(91L, long0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.put("", (Object) boolean0);
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("");
      JSONObject jSONObject1 = jSONObject0.put("", (Object) boolean0);
      try { 
        jSONObject1.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", 91);
      int int0 = jSONObject0.getInt("");
      assertEquals(91, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("");
      JSONObject jSONObject1 = jSONObject0.put("", (Object) boolean0);
      try { 
        jSONObject1.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("true", (Object) "true");
      Object object0 = jSONObject1.get("true");
      assertEquals("true", object0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "nCpV%`:%&");
      JSONObject jSONObject0 = new JSONObject("F?8/EsVrB+2grl.t\"K", stringArray0);
      int int0 = jSONObject0.optInt((String) null, 14);
      assertEquals(14, int0);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong((String) null, 1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("xQ/9sr", false);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (Object) "");
      jSONObject0.accumulate("", "");
      StringWriter stringWriter0 = new StringWriter(34);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = JSONObject.valueToString(linkedList0, (-1018), (-609));
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 16, 16);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 32, 32);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "6XdUU6[<`H)gd@");
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 8192, 0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "true");
      String string0 = jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Float float0 = new Float((-805.831834209));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("W1geU]\u0006YP?:^");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("6wxu>9t</d6kJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"6wxu>9t<\\/d6kJ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "6XdUU6[<`H)gd@");
      int int0 = jSONObject0.optInt(",\n");
      assertEquals(0, int0);
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "wheel.json.JSONObject$Null";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("", "");
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Apkck.", true);
      assertSame(jSONObject0, jSONObject1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      String string0 = jSONObject1.optString("", "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "true");
      jSONObject0.optJSONObject("true");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("k?'Ga`$AOP#nOzayUFX", object0);
      JSONObject jSONObject2 = jSONObject1.accumulate("k?'Ga`$AOP#nOzayUFX", object0);
      JSONArray jSONArray0 = jSONObject2.optJSONArray("k?'Ga`$AOP#nOzayUFX");
      assertEquals(2, jSONArray0.length());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "7");
      JSONObject jSONObject1 = jSONObject0.put("7", 1320);
      double double0 = jSONObject1.optDouble("7");
      assertEquals(4, jSONObject0.length());
      assertEquals(1320.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Float float0 = new Float(1519.3346F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.append("JSONArray initial value should be a string or collection or array.", float0);
      jSONObject0.toString((-220));
      assertEquals(4, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Float float0 = new Float(4222.104F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(2, jSONArray1.length());
      assertEquals(2, jSONObject0.length());
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertNotNull(stringArray0);
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("+p", (-153));
      long long0 = jSONObject0.optLong("+p");
      assertEquals((-153L), long0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      JSONObject jSONObject1 = jSONObject0.put("J", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("J");
      assertNotSame(jSONObject1, jSONObject2);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("0-b]F+<v_", object0);
      try { 
        jSONObject0.getJSONObject("0-b]F+<v_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0-b]F+<v_\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("0-b]F+<v_", (Object) jSONArray0);
      JSONArray jSONArray1 = jSONObject1.getJSONArray("0-b]F+<v_");
      assertSame(jSONArray0, jSONArray1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("n:x>{pS$:/fE0z8%3", (Object) jSONObject0);
      try { 
        jSONObject1.getJSONArray("n:x>{pS$:/fE0z8%3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"n:x>{pS$:/fE0z8%3\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("itoStrin", 91);
      int int0 = jSONObject0.optInt("itoStrin");
      assertEquals(91, int0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("6XdUU6[<`H)gd@", stringArray0);
      jSONObject0.put("6XdUU6[<`H)gd@", (-1146.7));
      double double0 = jSONObject0.getDouble("6XdUU6[<`H)gd@");
      assertEquals((-1146.7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\r", (Object) "\r");
      int int0 = jSONObject0.optInt("\r");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("trque", (Object) "trque");
      try { 
        jSONObject0.getBoolean("trque");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"trque\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.put("itoStrin", (Object) boolean0);
      boolean boolean1 = jSONObject0.getBoolean("itoStrin");
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("true", (Object) "true");
      boolean boolean0 = jSONObject0.getBoolean("true");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("");
      JSONObject jSONObject1 = jSONObject0.put("", (Object) boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject1.getBoolean("");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "6XdUU6[<`H)gd@");
      jSONObject0.put("6XdUU6[<`H)gd@", (Object) jSONObject0);
      try { 
        jSONObject0.getBoolean("6XdUU6[<`H)gd@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"6XdUU6[<`H)gd@\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1025.47);
      assertEquals("1025.47", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject1 = jSONObject0.put("isappend", (Object) float0);
      try { 
        jSONObject0.append("isappend", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[isappend] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{\n\"java.lang.String@0000000004\": [java.lang.Byte@0000000012],\n\"java.lang.String@0000000009\": \"java.lang.Class@0000000010\",\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      assertEquals(3, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{-JU%P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 6 of {-JU%P
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("trque", (Object) "trque");
      boolean boolean0 = jSONObject1.isNull("trque");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("n57v", 0L);
      assertEquals(1, jSONObject0.length());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
