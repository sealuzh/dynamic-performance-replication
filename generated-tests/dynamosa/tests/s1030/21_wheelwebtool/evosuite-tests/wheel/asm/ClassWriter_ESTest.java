/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 04 23:26:20 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;
import wheel.asm.Item;
import wheel.asm.Type;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClassWriter_ESTest extends ClassWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      String[] stringArray0 = new String[0];
      classWriter0.index = (-2089);
      classWriter0.visit(17, (-2089), "", "#K8Q2", "", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(95, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "j-<lIQ<aUa";
      stringArray0[2] = "";
      stringArray0[3] = "j-<lIQ<aUa";
      stringArray0[4] = "";
      stringArray0[5] = "org.apache.commons.io.filefilter.EmptyFileFilter";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      classWriter0.visit(16777226, 17, "", "", "j-<lIQ<aUa", stringArray0);
      classWriter0.invalidFrames = true;
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(138, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(15);
      classWriter0.index = (-2423);
      int int0 = classWriter0.newNameType("A2o>R*%LzX", "A2o>R*%LzX");
      assertEquals((-2422), int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4332));
      classWriter0.index = (-4332);
      int int0 = classWriter0.newMethod("org.apache.commons.io.filefilter.CanReadFileFilter", "org.apache.commons.io.filefilter.CanReadFileFilter", "org.apache.commons.io.filefilter.CanReadFileFilter", false);
      assertEquals((-4329), int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65);
      classWriter0.index = (-899);
      int int0 = classWriter0.newField("6YtnQ", "6YtnQ", "6YtnQ");
      assertEquals((-896), int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2490));
      classWriter0.index = (-2490);
      int int0 = classWriter0.newClass("");
      assertEquals((-2489), int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-79));
      classWriter0.visitSource("", "");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65);
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(16777227, (String) null, (String) null, (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4080));
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(1, (String) null, "X6who", "&nA`i;<!fBj5j9[", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65);
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(0, "5u#", "", "-8373LX~F1A", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1305));
      String[] stringArray0 = new String[14];
      // Undeclared exception!
      try { 
        classWriter0.visitMethod((-1305), "io{@I#`@!q9", "io{@I#`@!q9", "!=k[t", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      classWriter0.visitInnerClass("oE", ",bT{F_", "", 0);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3878);
      classWriter0.visitInnerClass("{-1*R*sv@kK({X", "7h8Idby.kW%", "{-1*R*sv@kK({X", (-3419));
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1306));
      FieldVisitor fieldVisitor0 = classWriter0.visitField((-3739), "Vq/d!S;2/4wsmI6/I", "Vq/d!S;2/4wsmI6/I", "", (Object) null);
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3878);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 387);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      // Undeclared exception!
      try { 
        classWriter0.visitField(3878, "~Dd5+", (String) null, "", sequenceInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(68, "", "v,9J26EgWRgHe3h:M", "java/lang/Object", "");
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(486);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(0, "NzJj<|w@NR\"\"W2", "org.apache.commons.io.filefilter.WildcardFilter", "~3", "~3");
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65);
      AnnotationVisitor annotationVisitor0 = classWriter0.visitAnnotation("", true);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1305));
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        classWriter0.visit(33, 33, (String) null, "", "", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(486);
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        classWriter0.visit(486, 0, "#K8Q2", "#K8Q2", "#K8Q2", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1305));
      int int0 = classWriter0.newUTF8("");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.FieldWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      int int0 = classWriter0.newNameType("wheel.asm.FieldWriter", "");
      assertEquals(155, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.FieldWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      int int0 = classWriter0.newNameType("", "wheel.asm.FieldWriter");
      assertEquals(155, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(192);
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem("3n?r-{~?&", (String) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1330);
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem((String) null, "", "", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1305));
      // Undeclared exception!
      try { 
        classWriter0.newMethod("8`sc4p$J\"O!$W,DZ", (String) null, "#K8Q2", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65);
      int int0 = classWriter0.newMethod("", "", "", false);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65);
      Item item0 = classWriter0.newLong(0L);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65);
      Item item0 = classWriter0.newLong(65);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(128);
      Item item0 = classWriter0.newInteger(0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4080));
      Item item0 = classWriter0.newInteger((-4080));
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(24);
      Item item0 = classWriter0.newFloat(0.0F);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(486);
      Item item0 = classWriter0.newFloat(13);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("wheel.asm.FieldWriter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1);
      int int0 = classWriter0.newField("!;s&_3BA5", "wheel.asm.FieldWriter", "");
      assertEquals(158, int0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1305));
      // Undeclared exception!
      try { 
        classWriter0.newField((String) null, (String) null, ";}.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      int int0 = classWriter0.newField("", "7P/-l:~c", "The wildcard must not be null");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4080));
      // Undeclared exception!
      try { 
        classWriter0.newConstItem((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2086);
      // Undeclared exception!
      try { 
        classWriter0.newConst((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value null
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-895));
      Item item0 = classWriter0.newClassItem("RuntimeVisibleAnnotations");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(36);
      Item item0 = classWriter0.newClassItem("");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-895));
      int int0 = classWriter0.newClass("RuntimeVisibleAnnotations");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1218);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(0, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4332));
      // Undeclared exception!
      try { 
        classWriter0.getMergedType((-4332), (-4332));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-290));
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2375));
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass((String) null, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3979));
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("", "9OAVOMAED$/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: 
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(128);
      // Undeclared exception!
      try { 
        classWriter0.addUninitializedType((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(192);
      // Undeclared exception!
      try { 
        classWriter0.visitOuterClass((String) null, "Synthetic", "Synthetic");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(89);
      // Undeclared exception!
      try { 
        classWriter0.visitMethod(1373, "", "", "", (String[]) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(51);
      Type type0 = Type.INT_TYPE;
      // Undeclared exception!
      try { 
        classWriter0.visitField(51, (String) null, "", "org.apache.commons.io.filefilter.OrFileFilter", type0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3446);
      // Undeclared exception!
      try { 
        classWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1307));
      // Undeclared exception!
      try { 
        classWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2424);
      // Undeclared exception!
      try { 
        classWriter0.newUTF8((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2125));
      // Undeclared exception!
      try { 
        classWriter0.newNameType((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(472);
      // Undeclared exception!
      try { 
        classWriter0.newMethodItem("org.apache.commons.io.filefilter.FileFileFilter", "org.apache.commons.io.filefilter.FileFileFilter", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(486);
      // Undeclared exception!
      try { 
        classWriter0.newMethod((String) null, "RuntimeVisibleAnnotations", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2036));
      // Undeclared exception!
      try { 
        classWriter0.newFieldItem((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-290));
      classWriter0.newFieldItem("vL8PFwf%Rpn1Qy;WnP", "vL8PFwf%Rpn1Qy;WnP", "vL8PFwf%Rpn1Qy;WnP");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "p=N%Ov";
      stringArray0[1] = ">@MSvK";
      stringArray0[2] = "p=N%Ov";
      stringArray0[3] = "?6|.:f80%~ e/]h;(";
      stringArray0[4] = "?6|.:f80%~ e/]h;(";
      stringArray0[5] = ">@MSvK";
      classWriter0.visitInnerClass("The filters must not be null", "", "?6|.:f80%~ e/]h;(", 690);
      stringArray0[6] = "vL8PFwf%Rpn1Qy;WnP";
      classWriter0.index = 131072;
      stringArray0[7] = ">@MSvK";
      classWriter0.visit((-290), (-290), "?6|.:f80%~ e/]h;(", "p=N%Ov", ">@MSvK", stringArray0);
      // Undeclared exception!
      classWriter0.newField("?6|.:f80%~ e/]h;(", ">@MSvK", "PXW}!Bo{BrWV0.N,+M");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16);
      // Undeclared exception!
      try { 
        classWriter0.newField((String) null, "wYJ(8FU1wit", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-19));
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        classWriter0.newConstItem(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@5147edb9
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-79));
      // Undeclared exception!
      try { 
        classWriter0.newConst(classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-79));
      // Undeclared exception!
      try { 
        classWriter0.newClassItem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3016));
      // Undeclared exception!
      try { 
        classWriter0.newClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(192);
      classWriter0.addType("42n");
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(1, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class '42n.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16);
      classWriter0.addUninitializedType("", 16);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(16, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65);
      // Undeclared exception!
      try { 
        classWriter0.getCommonSuperClass("@X:>b^0E~!Z&G", "@X:>b^0E~!Z&G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.lang.ClassNotFoundException: Class '@X:>b^0E~!Z&G.class' should be in target project, but could not be found!
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(119);
      classWriter0.addType("$v{mIc");
      Item[] itemArray0 = new Item[1];
      classWriter0.typeTable = itemArray0;
      // Undeclared exception!
      try { 
        classWriter0.addUninitializedType("=", (-857));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1192);
      // Undeclared exception!
      try { 
        classWriter0.addType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("java/lang/Class");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 1134);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClassWriter classWriter0 = null;
      try {
        classWriter0 = new ClassWriter((ClassReader) null, 1142);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ClassReader classReader0 = new ClassReader("org.apache.commons.io.filefilter.DirectoryFileFilter");
      ClassWriter classWriter0 = new ClassWriter(classReader0, 8);
      Item item0 = classWriter0.newDouble(0.0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65);
      classWriter0.newMethodItem("w", "w", "w", true);
      int int0 = classWriter0.newNameType("w", "w");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      Long long0 = new Long(0L);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "C^=[H\"t1Z^M,s", "C^=[H\"t1Z^M,s", "C^=[H\"t1Z^M,s", long0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(88);
      classWriter0.threshold = 6;
      classWriter0.newUTF8("v-K!i>)33(E'(Pi");
      Item item0 = classWriter0.newFieldItem("", "", "!r`faoU4 *");
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(128);
      classWriter0.threshold = 0;
      Item item0 = classWriter0.newDouble(128);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1201));
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.CanReadFileFilter", "wheel.asm.MethodWriter");
      assertEquals("java/lang/Object", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2181);
      String string0 = classWriter0.getCommonSuperClass("wheel.asm.MethodWriter", "java/lang/Object");
      assertEquals("java/lang/Object", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4332));
      String string0 = classWriter0.getCommonSuperClass("org.apache.commons.io.filefilter.CanReadFileFilter", "org.apache.commons.io.filefilter.CanReadFileFilter");
      assertEquals("org.apache.commons.io.filefilter.CanReadFileFilter", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      // Undeclared exception!
      try { 
        classWriter0.getMergedType(429, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(119);
      Item[] itemArray0 = new Item[1];
      classWriter0.typeTable = itemArray0;
      classWriter0.addUninitializedType("=", 119);
      int int0 = classWriter0.addUninitializedType("RuntimeInvisibleAnnotations", 36);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-610));
      int int0 = classWriter0.addUninitializedType("jcj", (-2578));
      assertEquals(1, int0);
      
      int int1 = classWriter0.addType("");
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65);
      classWriter0.addUninitializedType("", 1073);
      int int0 = classWriter0.addUninitializedType("", 1073);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(6272);
      classWriter0.addType("RuntimeVisibleAnnotations");
      int int0 = classWriter0.addType("RuntimeVisibleAnnotations");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3380));
      classWriter0.visitOuterClass("", "", "");
      Item item0 = classWriter0.newMethodItem("", "", "", true);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      classWriter0.newConst("");
      FieldVisitor fieldVisitor0 = classWriter0.visitField(1951, "v,9J26EgWRgHe3h:M", "", (String) null, "");
      assertNotNull(fieldVisitor0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4080));
      Item item0 = classWriter0.newDouble((-1.0));
      Item item1 = classWriter0.newDouble((-1.0));
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65);
      Item item0 = classWriter0.newLong((-1));
      Item item1 = classWriter0.newLong((-1L));
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(486);
      Item item0 = classWriter0.newFloat((-1204.003F));
      Item item1 = classWriter0.newFloat((-1204.003F));
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(131072);
      Item item0 = classWriter0.newInteger(1);
      assertNotNull(item0);
      
      Boolean boolean0 = Boolean.valueOf(true);
      int int0 = classWriter0.newConst(boolean0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3979));
      Item item0 = classWriter0.newMethodItem("", "", "", true);
      Item item1 = classWriter0.newMethodItem("", "", "", true);
      assertSame(item1, item0);
      assertNotNull(item1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(486);
      Item item0 = classWriter0.newFieldItem("", "", "");
      Item item1 = classWriter0.newFieldItem("", "", "");
      assertNotNull(item1);
      assertSame(item1, item0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2086);
      Type type0 = Type.VOID_TYPE;
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-525));
      Class<Object> class0 = Object.class;
      Type type0 = Type.getType(class0);
      Item item0 = classWriter0.newConstItem(type0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      Item item0 = classWriter0.newFieldItem("[]", "", "");
      // Undeclared exception!
      try { 
        classWriter0.visitField(2428, "Gf:%~am$!/7}vG", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", "AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", item0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.Item@a
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3634));
      Double double0 = new Double((-1.0));
      int int0 = classWriter0.newConst(double0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4080));
      Float float0 = new Float((-1.0F));
      int int0 = classWriter0.newConst(float0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(128);
      Boolean boolean0 = Boolean.FALSE;
      Item item0 = classWriter0.newConstItem(boolean0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      Short short0 = new Short((short) (-557));
      int int0 = classWriter0.newConst(short0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-4080));
      Byte byte0 = new Byte((byte)4);
      Item item0 = classWriter0.newConstItem(byte0);
      assertNotNull(item0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1008));
      int int0 = classWriter0.newConst(classWriter0.COMPUTE_FRAMES);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      classWriter0.invalidFrames = true;
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1172));
      Attribute attribute0 = new Attribute("2i");
      classWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      classWriter0.visitAnnotation(">t:v;J'6S", false);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(78, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4192);
      classWriter0.visit((-79), 4192, "RuntimeInvisibleAnnotations", "H{7Aa<=)4/'W:_Hm", "", (String[]) null);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(102, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-610));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "jcj";
      stringArray0[1] = "jcj";
      classWriter0.visitMethod(13, "^m}z(m5<)Ek", "^m}z(m5<)Ek", "", stringArray0);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(104, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1173));
      classWriter0.visitField((-1173), "#", "The array of suffixes must not be null", "", "The array of suffixes must not be null");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(164, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(31);
      classWriter0.visitInnerClass("wheel.asm.MethodWriter", (String) null, (String) null, 1583);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(17);
      classWriter0.visitInnerClass("", "", "java/lang/Object", 17);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(80, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3380));
      classWriter0.visitInnerClass((String) null, "java/lang/Object", "F%T0wY.P", 24);
      classWriter0.visitInnerClass((String) null, "H)D=>,ODWbPD ", "", 1);
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-418));
      classWriter0.visitAnnotation("EnclosingMethod", true);
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(82, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3380));
      classWriter0.visitOuterClass("", "", "");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(63, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(32);
      classWriter0.visitOuterClass("YS<!S0HYV", "YS<!S0HYV", (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-3001));
      classWriter0.visitOuterClass("", (String) null, "(");
      assertEquals(2, ClassWriter.COMPUTE_FRAMES);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1305));
      classWriter0.visitSource("org.apache.commons.io.filefilter.HiddenFileFilter", "org.apache.commons.io.filefilter.HiddenFileFilter");
      byte[] byteArray0 = classWriter0.toByteArray();
      assertEquals(175, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(89);
      classWriter0.visitSource((String) null, (String) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2086);
      classWriter0.visit((-62), 4, "d,OMI 7b^ \">H#%xh", "SourceFile", (String) null, (String[]) null);
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(128);
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        classWriter0.visit(0, 2396, "RuntimeVisibleAnnotations", "7}tB", (String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(486);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        classWriter0.visit(486, 21, "#K8Q2", (String) null, "#K8Q2", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-610));
      Character character0 = Character.valueOf('j');
      int int0 = classWriter0.newConst(character0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1305));
      classWriter0.visitEnd();
      assertEquals(1, ClassWriter.COMPUTE_MAXS);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2181);
      byte[] byteArray0 = classWriter0.toByteArray();
      ClassReader classReader0 = new ClassReader(byteArray0);
      ClassWriter classWriter1 = null;
      try {
        classWriter1 = new ClassWriter(classReader0, 38);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-610));
      int int0 = classWriter0.newField("jcj", "", "jcj");
      assertEquals(5, int0);
  }
}
