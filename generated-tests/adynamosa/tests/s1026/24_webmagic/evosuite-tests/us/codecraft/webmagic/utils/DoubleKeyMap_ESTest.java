/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 18:01:38 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>(class0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Map<Object, HashMap<String, String>>> hashMap0 = new HashMap<String, Map<Object, HashMap<String, String>>>();
      DoubleKeyMap<String, Object, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<String, String>>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      doubleKeyMap0.put((String) null, (Object) hashMap0, hashMap1);
      HashMap<String, String> hashMap2 = doubleKeyMap0.remove((String) null, (Object) hashMap1);
      assertNotNull(hashMap2);
      assertSame(hashMap2, hashMap1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      DoubleKeyMap<Map<Integer, Object>, Integer, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, Object>, Integer, HashMap<Object, String>>();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      doubleKeyMap0.put((Map<Integer, Object>) hashMap1, (Integer) null, hashMap0);
      Map<Integer, HashMap<Object, String>> map0 = doubleKeyMap0.get((Map<Integer, Object>) hashMap1);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      Map<String, String> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      Map<String, String> map0 = doubleKeyMap0.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      DoubleKeyMap<HashMap<Object, String>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, String>, Object, Object>();
      Object object1 = doubleKeyMap0.put((HashMap<Object, String>) null, (Object) null, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      doubleKeyMap0.put((Object) null, (String) null, (String) null);
      Map<String, String> map0 = doubleKeyMap0.remove((Object) null);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Map<Object, HashMap<String, String>>> hashMap0 = new HashMap<String, Map<Object, HashMap<String, String>>>();
      HashMap<Integer, Map<Object, Object>> hashMap1 = new HashMap<Integer, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>(hashMap1, class0);
      Integer integer0 = new Integer((-1));
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(integer0, object0, (Object) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>();
      String string0 = doubleKeyMap0.get((Object) "\"^!p':X&qe]fzZ", (Integer) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(1);
      HashMap<Integer, Map<Object, String>> hashMap0 = new HashMap<Integer, Map<Object, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, Object, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, String>(hashMap0, class0);
      Object object0 = new Object();
      String string0 = doubleKeyMap0.get(integer0, object0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<String, Integer, Map<Map<Integer, Object>, String>> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Map<Map<Integer, Object>, String>>();
      Integer integer0 = new Integer(0);
      Map<Map<Integer, Object>, String> map0 = doubleKeyMap0.get((String) null, integer0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Object, Map<Map<Integer, Object>, String>> hashMap0 = new HashMap<Object, Map<Map<Integer, Object>, String>>();
      DoubleKeyMap<Object, Map<Integer, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Object, Map<Integer, Object>, String>(hashMap0);
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      Object object0 = new Object();
      String string0 = doubleKeyMap0.get(object0, (Map<Integer, Object>) hashMap1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Object, Map<String, String>> hashMap0 = new HashMap<Object, Map<String, String>>();
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(hashMap0);
      Map<String, String> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, Map<Object, HashMap<String, String>>> hashMap0 = new HashMap<String, Map<Object, HashMap<String, String>>>();
      DoubleKeyMap<String, Object, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<String, String>>(hashMap0);
      DoubleKeyMap<Object, Object, HashMap<Integer, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, HashMap<Integer, Object>>();
      Map<Object, HashMap<Integer, Object>> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Object, Map<Object, Map<Integer, Object>>> hashMap0 = new HashMap<Object, Map<Object, Map<Integer, Object>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Object, Map<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Map<Integer, Object>>(hashMap0, class0);
      Object object0 = new Object();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(object0, (Object) hashMap0, (Map<Integer, Object>) hashMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, Map<Object, HashMap<String, String>>> hashMap0 = new HashMap<String, Map<Object, HashMap<String, String>>>();
      DoubleKeyMap<String, Object, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<String, String>>(hashMap0);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      doubleKeyMap0.put("", (Object) "", hashMap1);
      doubleKeyMap0.remove("", (Object) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<String, Object, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<String, String>>();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = doubleKeyMap0.remove((String) null, (Object) hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, HashMap<String, Object>, Map<Map<Integer, Object>, String>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, HashMap<String, Object>, Map<Map<Integer, Object>, String>>();
      DoubleKeyMap<String, String, Map<Integer, Object>> doubleKeyMap1 = new DoubleKeyMap<String, String, Map<Integer, Object>>();
      Map<Object, Object> map0 = doubleKeyMap1.newMap();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      DoubleKeyMap<Map<Integer, Object>, HashMap<Integer, Object>, Object> doubleKeyMap2 = new DoubleKeyMap<Map<Integer, Object>, HashMap<Integer, Object>, Object>();
      Map<Map<Integer, Object>, String> map1 = doubleKeyMap2.newMap();
      doubleKeyMap0.put(map0, hashMap0, map1);
      Map<Map<Integer, Object>, String> map2 = doubleKeyMap0.put(map0, hashMap0, map1);
      assertSame(map2, map1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<String, Map<Integer, Object>, Map<String, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Map<Integer, Object>, Map<String, Object>>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      doubleKeyMap0.put("", (Map<Integer, Object>) hashMap0, (Map<String, Object>) hashMap1);
      Map<String, Object> map0 = doubleKeyMap0.get("", (Map<Integer, Object>) hashMap0);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Map<Integer, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, String, Map<Integer, Object>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, Map<Object, HashMap<String, String>>> hashMap0 = new HashMap<String, Map<Object, HashMap<String, String>>>();
      DoubleKeyMap<String, Object, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<String, String>>(hashMap0);
      HashMap<Object, HashMap<String, String>> hashMap1 = new HashMap<Object, HashMap<String, String>>();
      hashMap0.put((String) null, hashMap1);
      Object object0 = new Object();
      doubleKeyMap0.remove((String) null, object0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }
}
