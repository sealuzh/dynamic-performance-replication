/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 13:15:41 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StreamCorruptedException;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.zip.ZipException;
import org.apache.bcel.classfile.AnnotationDefault;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.ClassElementValue;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-106);
      byteArray0[3] = (byte)120;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)118;
      byteArray0[7] = (byte) (-111);
      byte byte0 = (byte) (-68);
      byteArray0[8] = (byte) (-68);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)118, 237);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.isJavaIdentifierPart('F');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte) (-65);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-65), (int) (byte)35);
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureReturnType("23 b0 2b bf", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `23 b0 2b bf'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)12;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fload_1", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "Xn\"a!n!L";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Xn\"a!n!L");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.printArray((Object[]) null, false, false);
      Utility.printArray((Object[]) null, true, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte) (-124);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-106), (int) (byte) (-111));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fcmpg
         // 1:    ishr
         // 2:    <illegal opcode>
         // 3:    i2b
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte) (-39);
      byteArray0[6] = (byte) (-16);
      byteArray0[7] = (byte) (-39);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-7));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-39), (int) (byte) (-116));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-93);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)106;
      Utility.encode(byteArray0, true);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-93), 200);
      Utility.isSet((byte)57, 15);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) (byte)104;
      objectArray0[2] = (Object) (byte)106;
      objectArray0[3] = (Object) "0:    dstore\t\t%0\n2:    if_icmpgt\t\t#26712\n5:    fmul\n";
      objectArray0[4] = (Object) (byte)86;
      Utility.printArray(objectArray0);
      Utility.isJavaIdentifierPart('<');
      Utility.fillup("{null, 104, 106, 0:    dstore\t\t%0\n2:    if_icmpgt\t\t#26712\n5:    fmul\n, 86}", 1119, false, 'q');
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)114;
      byte byte0 = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-127);
      byte byte1 = (byte) (-3);
      byteArray0[5] = (byte) (-3);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)114, (int) (byte) (-128), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)107;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1794, (int) (byte)107);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)75;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-90);
      byteArray0[6] = (byte) (-58);
      Constant[] constantArray0 = new Constant[3];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte)75, 6);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantDouble constantDouble0 = new ConstantDouble(659.460962493);
      constantArray0[1] = (Constant) constantDouble0;
      ConstantDouble constantDouble1 = new ConstantDouble((byte)66);
      constantArray0[2] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-76), (int) (byte)89);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lstore_3
         // 1:    dup
         // 2:    astore_0
         // 3:    ifnonnull\t\t#-19287
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7Rmq%Kg_=p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7Rmq%Kg_=p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Utility.compactClassName("if_icmpeq");
      Utility.compactClassName("if_icmpeq", "if_icmpeq", true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-85);
      Constant[] constantArray0 = new Constant[1];
      ConstantInteger constantInteger0 = new ConstantInteger((byte)96);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)96, 69, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("+L7", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)97;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 78, (-898), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-86);
      Constant[] constantArray0 = new Constant[1];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)23);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      constantMethodType0.toString();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-6), (int) (byte)119, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fload\t\t%119
         // 2:    <illegal opcode>
         // 3:    fcmpg
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = Utility.accessToString(40, true);
      assertEquals("static", string0);
      
      short short0 = Utility.searchOpcode("ifnull");
      assertEquals((short)198, short0);
      
      int int0 = Utility.setBit((-994), 49);
      assertEquals((-994), int0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte) (-115);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(byteSequence0);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[0] = (Constant) constantInteger1;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)83);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("f2d", string1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-108);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 785, (int) (byte) (-108));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.replace("!n!&3xv&PIa;S*M1", "N{H L/L", "N{H L/L");
      try { 
        Utility.typeOfSignature("!n!&3xv&PIa;S*M1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: n!&3xv&PIa;S*M1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.setBit(93, 394);
      Utility.replace("invokespecial", "invokespecial", "invokespecial");
      String string0 = "M)b<c ?eS +!";
      try { 
        Utility.typeOfSignature("M)b<c ?eS +!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M)b<c ?eS +!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Utility.clearBit(16, 74);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-123);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)43, (-2763));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-82);
      byteArray0[6] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("swap", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Utility.classOrInterface(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)69;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.codeToString(byteSequence0, constantPool0);
      String string0 = Utility.printArray((Object[]) null, true, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-111);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("dadd", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('O');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      try { 
        Utility.typeOfSignature("EcQsU:@{x~t6S+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EcQsU:@{x~t6S+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)120;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte)83;
      byteArray0[3] = (byte)119;
      byte byte1 = (byte) (-24);
      byteArray0[4] = (byte) (-24);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("8eX2LG?e2*khF", "ishl", "6B?oj$pGKqLswvvy}+", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8eX2LG?e2*khF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "U";
      boolean boolean0 = false;
      Utility.compactClassName("U", "L)_hf@_q<r", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("L)_hf@_q<r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L)_hf@_q<r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)13;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)79;
      byteArray0[7] = (byte) (-75);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(1410.9F);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantArray0[0] = (Constant) constantFloat0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 31, (int) (byte)110, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = false;
      char char0 = '|';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.fillup("-nruesv6}8{i", 245, false, '|');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte)25;
      int int0 = 1228;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1228, (int) (byte) (-118));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-59);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "2` yLdQgu|/7m>zS4Y");
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-126);
      byteArray0[6] = (byte)16;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte) (-128), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Ysa^n?L/k{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ysa^n?L/k{}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 2952;
      Utility.clearBit(2952, 86);
      Utility.isJavaIdentifierPart('Y');
      String string0 = "(F!q[Fx'SzV)";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(F!q[Fx'SzV)", "(F!q[Fx'SzV)", "(F!q[Fx'SzV)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `!q[Fx'SzV)'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("dreturn", false);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "dreturn";
      objectArray0[1] = (Object) "dreturn";
      objectArray0[2] = (Object) "dreturn";
      Utility.printArray(objectArray0);
      Utility.convertString("{dreturn, dreturn, dreturn}");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1943, (-866));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NjI;5;ujF");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Utility.searchOpcode("LzF8T%T:mXJ");
      Utility.accessToString((int) (short) (-1), false);
      Utility.clearBit(185, (short) (-1));
      Utility.isJavaIdentifierPart(':');
      Utility.getSignature("return");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Lreturn;";
      stringArray0[1] = "return";
      stringArray0[2] = ")";
      stringArray0[3] = ")";
      stringArray0[4] = "public private protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum";
      stringArray0[5] = ")";
      stringArray0[6] = "LzF8T%T:mXJ";
      stringArray0[7] = "Lreturn;";
      Utility.methodTypeToSignature(")", stringArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-110);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 185, (-455), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Utility.accessToString((-1580));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)32;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 670, (int) (byte)40, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)23;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2436, 90);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)69;
      byte byte0 = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)67;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1830), (-1088));
      String string0 = "\\pjKuSzoKT8Fg|A";
      String string1 = " }ug";
      boolean boolean0 = false;
      int int0 = (-1421);
      Attribute[] attributeArray0 = new Attribute[5];
      ClassElementValue classElementValue0 = new ClassElementValue(61, (-1421), (ConstantPool) null);
      ConstantPool constantPool0 = null;
      AnnotationDefault annotationDefault0 = new AnnotationDefault((-1114), (-1830), classElementValue0, (ConstantPool) null);
      Attribute attribute0 = annotationDefault0.copy((ConstantPool) null);
      attributeArray0[0] = attribute0;
      int int1 = (-2657);
      LocalVariable[] localVariableArray0 = new LocalVariable[1];
      int int2 = 291;
      LocalVariable localVariable0 = new LocalVariable((byte)67, (byte)70, (-1088), 291, (byte)73, (ConstantPool) null);
      LocalVariable localVariable1 = new LocalVariable(localVariable0);
      localVariableArray0[0] = localVariable1;
      Constant[] constantArray0 = new Constant[6];
      ConstantString constantString0 = null;
      try {
        constantString0 = new ConstantString((ConstantString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantString", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-37);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)79;
      byteArray1[1] = (byte)63;
      byteArray1[2] = (byte)63;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-26);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-26), (int) (byte) (-26), false);
      assertEquals("0:    lreturn\n1:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Utility.clearBit(132, 132);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte) (-88);
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)67;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 91, (-2479));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "\"";
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Utility.isJavaIdentifierPart('!');
      String string0 = "S_S";
      Utility.typeOfSignature("S_S");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.methodSignatureReturnType("S_S");
      Utility.signatureToString("S_S");
      int int0 = (-1615);
      Utility.accessToString((-1615));
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfMethodSignature(" Ak");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  Ak
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)102, (int) (byte)102);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)46;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, (int) (byte)46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "tT]4 z0&Q.");
      objectArray0[1] = object1;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "tT]4 z0&Q.");
      Utility.printArray(objectArray0);
      Utility.accessToString(237, false);
      Utility.convertString("o%KM-WOB!$D#d(lh,I");
      Utility.classOrInterface(237);
      Utility.isJavaIdentifierPart('Q');
      Utility.accessToString(237);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3826), (int) (byte)74, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore_3
         // 1:    dup2_x2
         // 2:    dup2_x1
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)126;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)126, (int) (byte) (-27), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)14;
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte) (-75);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(1410.9F);
      constantArray0[0] = (Constant) constantFloat0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 31, (int) (byte)110, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-109);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte) (-103);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-109), (int) (byte) (-125));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lstore_3
         // 1:    iflt\t\t#-27727
         // 4:    lxor
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("[TKV9:>I;q");
      assertEquals("KV9:>I[]", string0);
      
      String string1 = Utility.accessToString(148);
      assertEquals("protected final transient", string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)97;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte) (-45);
      byteArray0[6] = (byte)97;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.toString();
      boolean boolean0 = true;
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-45), (int) (byte) (-82), true);
      // Undeclared exception!
      try { 
        constantPool0.getConstant(171);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 171. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",u1u$L!YGI6n&NN");
      byte[] byteArray0 = Utility.decode("long", false);
      Utility.convertString("compiled from\t\t");
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("byte", stringArray0);
      Utility.methodTypeToSignature("V", stringArray0);
      MockFile mockFile0 = new MockFile("invokeinterface", ",u1u$L!YGI6n&NN");
      MockFile mockFile1 = new MockFile(mockFile0, "compiled from\t\t");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "byte");
      mockPrintStream0.print(912.7F);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "()LV;";
      Utility.printArray(printStream0, objectArray0);
      Utility.printArray(objectArray0, false);
      Utility.printArray(objectArray0, false);
      Utility.compactClassName("ubj#uAK8)6+AL");
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1), (-1));
      Utility.format((-1), (-1), false, '\"');
      Utility.classOrInterface((-1));
      Utility.compactClassName("ubj#uAK8)6+AL", "ch\u0007", true);
      Object[] objectArray1 = new Object[8];
      Object object0 = new Object();
      objectArray1[0] = object0;
      objectArray1[1] = (Object) "0:    idiv\n1:    ddiv\n2:    fdiv\n3:    dsub\n";
      objectArray1[2] = (Object) "long";
      Object object1 = new Object();
      objectArray1[3] = object1;
      objectArray1[4] = (Object) "()LV;";
      objectArray1[5] = (Object) ",u1u$L!YGI6n&NN";
      Object object2 = new Object();
      objectArray1[6] = object2;
      objectArray1[7] = (Object) "-1";
      String string1 = Utility.printArray(objectArray1, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "'(m\\8DiH7";
      try { 
        Utility.typeOfSignature("'(m8DiH7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '(m8DiH7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-57);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)72;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-57), (int) (byte)72, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-100);
      byte byte0 = (byte) (-41);
      byteArray0[5] = (byte) (-41);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-672), (-2273), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    land
         // 1:    <illegal opcode>
         // 2:    dastore
         // 3:    lload_1
         // 4:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.getSignature("null");
      Utility.accessToString((-2805));
      Utility.searchOpcode("null");
      String string0 = "UH.@=\\U";
      try { 
        Utility.typeOfSignature("UH.@=U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UH.@=U
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte) (-100);
      byteArray0[7] = (byte) (-103);
      byteArray0[8] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass((byte)52);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)9, 16384);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[2] = (Constant) constantMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("l2f", string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte) (-123);
      byteArray0[8] = (byte)24;
      Utility.encode(byteArray0, false);
      Utility.isJavaIdentifierPart('n');
      try { 
        Utility.typeOfSignature("A$h$afZ$e5$H$m$85$Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A$h$afZ$e5$H$m$85$Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte) (-117);
      Constant[] constantArray0 = new Constant[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-95), (int) (byte) (-117));
      assertEquals("0:    impdep1\n1:    lshr\n2:    dup_x1\n3:    if_icmplt\t\t#-29554\n", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("P:<l@", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P:<l@'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Utility.compactClassName("Rci(fOO");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)82;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 430, (int) (byte)114, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-97);
      byte byte0 = (byte)82;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte) (-121);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 4714, (int) (byte) (-97));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)51;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 42, 16384);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Utility.decode("+^/d_pfzx-R[hC", false);
      byte[] byteArray0 = Utility.decode("om;Xg 5", false);
      Utility.accessToString((-1777), false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      assertEquals(1, byteSequence0.getIndex());
      
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      String string0 = Utility.convertString("UgY(ZLt1NZ85");
      assertEquals("UgY(ZLt1NZ85", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "{==M<";
      Utility.compactClassName("{==M<", "{==M<", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)27;
      byteArray0[0] = (byte)27;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)27, (int) (byte)27, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-87);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte) (-84);
      byteArray0[6] = (byte) (-38);
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte)7;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.setConstantPool(constantArray0);
      constantPool1.setConstantPool(constantArray0);
      SyntheticRepository syntheticRepository0 = SyntheticRepository.getInstance((ClassPath) null);
      syntheticRepository0.findClass("java.lang.X$a9$ff");
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, emptyVisitor0);
      constantPool1.accept(descendingVisitor0);
      String string0 = Utility.codeToString(byteArray0, constantPool1, (-579), (-83));
      assertEquals("0:    ret\t\t%225\n2:    dload_2\n3:    fneg\n4:    lastore\n5:    ireturn\n6:    <illegal opcode>\n7:    aload_3\n8:    iconst_4\n", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("a9 e1 28 76 50 ac da 2d 07", string1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 96;
      boolean boolean0 = false;
      Utility.format(96, 96, false, 'N');
      try { 
        Utility.typeOfSignature("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN96");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN96
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "6*h>^y,Y[Tgw";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6*h>^y,Y[Tgw");
      Object[] objectArray0 = null;
      Utility.printArray((Object[]) null);
      Utility.setBit(6, (-385));
      Utility.printArray((Object[]) null, false, false);
      Utility.convertString("6*h>^y,Y[Tgw");
      Utility.accessToString(125, false);
      try { 
        Utility.typeOfSignature("-6YIdZ /g x81Qr%`!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -6YIdZ /g x81Qr%`!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte) (-107);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-13);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)8;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 80, (int) (byte)76, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)5;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iadd", string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      try { 
        Utility.typeOfSignature("Xk)|M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xk)|M
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Utility.typeOfSignature("J,XOFro3wezw\"FM");
      Utility.accessToString(2880, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: 0B0B0B0B
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)74;
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1328), 44);
      try { 
        Utility.typeOfMethodSignature("0:    <illegal opcode>\n1:    aload_0\n2:    fstore_3\n3:    dstore_3\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    <illegal opcode>
         // 1:    aload_0
         // 2:    fstore_3
         // 3:    dstore_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(201, 39);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("&VicIC$]/+\u00009", false);
      try { 
        Utility.typeOfSignature("&VicIC$]/+\u00009");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &VicIC$]/+\u00009
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-3);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (-20));
      assertEquals("0:    <illegal opcode>\n1:    fcmpl\n2:    nop\n3:    dstore_0\n4:    <illegal opcode>\n", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-20);
      Constant[] constantArray0 = new Constant[2];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)28, 2179);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("getstatic");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantFieldref0.accept(emptyVisitor0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 5080, 103);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "HM}jT^\"{q<Y~M`";
      try { 
        Utility.typeOfSignature("HM}jT^\"{q<Y~M`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: HM}jT^\"{q<Y~M`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte) (-5);
      byteArray0[7] = (byte)84;
      byteArray0[8] = (byte)23;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char char0 = ';';
      Utility.isJavaIdentifierPart(';');
      Utility.convertString("uGci&d[");
      int int0 = (-2708);
      Utility.accessToString((-2708), false);
      String string0 = "";
      Utility.replace("org.apache.bcel.classfile.Utility$JavaReader", "uGci&d[", "");
      int int1 = 212;
      Utility.setBit((-2708), 212);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = "vMcP$f_:[";
      // Undeclared exception!
      try { 
        Utility.decode("vMcP$f_:[", false);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"f_\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)22;
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)110;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte) (-99);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)22, (int) (byte)110, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = " Fw)z%0V8I0/GbOJw>";
      Utility.replace(" Fw)z%0V8I0/GbOJw>", " Fw)z%0V8I0/GbOJw>", " Fw)z%0V8I0/GbOJw>");
      Utility.signatureToString("D)`J6dwL");
      String string1 = ")\t";
      boolean boolean0 = false;
      Utility.compactClassName(")\t", false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(")\t", "dreturn");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // dreturn
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-3);
      boolean boolean0 = false;
      Utility.encode(byteArray0, false);
      Utility.setBit((byte)70, 3319);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("Pattern is missing");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Pattern is missing
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)20;
      Utility.toHexString(byteArray0);
      Utility.encode(byteArray0, false);
      int int0 = 67;
      Utility.isSet(1837, 67);
      Utility.methodSignatureReturnType("Zc$5by$da$e3$3c$U", false);
      Utility.compactClassName("Dont call getValueLong() on a non LONG ElementValue", "boolean", false);
      Utility.typeOfSignature("CGBHX7|");
      Utility.classOrInterface(432);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)91;
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte)99;
      byteArray1[3] = (byte)5;
      byteArray1[4] = (byte)5;
      byteArray1[5] = (byte)91;
      byteArray1[6] = (byte)60;
      byteArray1[7] = (byte)99;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: StreamCorruptedException");
      
      } catch(Throwable e) {
         //
         // invalid stream header: 5A635B79
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Utility.searchOpcode("+dQ}As[5o]");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte) (-106);
      Utility.equals(byteArray0, byteArray0);
      Utility.clearBit((byte)46, (byte)87);
      Utility.compactClassName(" h5A");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.decode("\"HF$a", false);
      Utility.setBit(2407, (-394));
      Utility.format((-1471), (-539), false, '/');
      Utility.replace(" (", "i2l", " h5A");
      Utility.compactClassName("void", true);
      try { 
        Utility.methodSignatureReturnType("i!( /C#B0[C6", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `i!( /C#B0[C6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)84;
      Constant[] constantArray0 = new Constant[1];
      ConstantClass constantClass0 = new ConstantClass((byte)53);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[0] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteArray0, constantPool1, 5, 56, false);
      assertEquals("5:    bipush\t\t84\n", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "LG[NPS+]Cz(_W<8g";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "? super ";
      Utility.methodTypeToSignature("LG[NPS+]Cz(_W<8g", stringArray0);
      Utility.compactClassName("UNw`|x^o,:");
      Object[] objectArray0 = null;
      boolean boolean0 = true;
      Utility.printArray((Object[]) null, true);
      Utility.isJavaIdentifierPart(';');
      boolean boolean1 = true;
      Utility.compactClassName("? super ", "? super ", true);
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte) (-33);
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 43, 170);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)105;
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte)67;
      ConstantPool constantPool0 = null;
      int int0 = 54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)77, 54);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte)40;
      Utility.equals(byteArray0, byteArray0);
      Utility.getSignature(" not found: ");
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)40, 94, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("lrem", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-47);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)10;
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 55, (int) (byte) (-47));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)54, 194);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("iload_2", string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "*avA>*F's`X7q";
      try { 
        Utility.typeOfSignature("*avA>*F's`X7q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: avA>*F's`X7q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "8";
      try { 
        Utility.typeOfSignature("8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Utility.replace(".jRsam-yk4", ".jRsam-yk4", ";s0(%");
      Utility.accessToString(66, false);
      try { 
        Utility.typeOfSignature(", catch_type = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , catch_type = 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false, false);
      Utility.compactClassName("(", false);
      Utility.compactClassName("(", "(", true);
      Utility.accessToString(62, true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(";
      stringArray0[1] = "(";
      stringArray0[2] = "(";
      Utility.methodTypeToSignature("private protected static final", stringArray0);
      try { 
        Utility.typeOfSignature("Ka*+l9oojw]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ka*+l9oojw]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.clearBit(182, 182);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte)4;
      byteArray0[8] = (byte) (-71);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 188, (int) (byte) (-12), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = (-1046);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.setBit((-1046), 147);
      String string0 = "O@#S\"3H9s*@`;`OR>";
      Utility.searchOpcode("O@#S\"3H9s*@`;`OR>");
      try { 
        Utility.typeOfSignature("O@#S\"3H9s*@`;`OR>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O@#S\"3H9s*@`;`OR>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)45;
      byteArray0[0] = (byte)45;
      byte byte1 = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)122;
      byte byte2 = (byte)94;
      byteArray0[3] = (byte)94;
      byte byte3 = (byte)41;
      byteArray0[4] = (byte)41;
      byte byte4 = (byte)33;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte) (-5);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.typeOfMethodSignature("ifnonnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnonnull
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "/bzs;ok+!";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("/bzs;ok+!", "/bzs;ok+!", false);
      Utility.signatureToString("BTRnM]{=XrL)u/");
      Utility.compactClassName("BTRnM]{=XrL)u/", false);
      Utility.accessToString((-2077));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BTRnM]{=XrL)u.");
      Utility.clearBit((-6295), 8);
      Utility.compactClassName(".bzs;ok+!", "public private synchronized volatile transient native interface abstract synthetic annotation enum", false);
      String string1 = "";
      boolean boolean0 = true;
      String string2 = "short";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "short");
      Utility.compactClassName(".bzs;ok+!", "", true);
      try { 
        Utility.methodSignatureArgumentTypes("BTRnM]{=XrL)u.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: BTRnM]{=XrL)u.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte) (-8);
      byteArray0[8] = (byte) (-4);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-95), 237, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 45479. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)53;
      Utility.toHexString(byteArray0);
      Utility.accessToString((int) (byte)102);
      try { 
        Utility.typeOfSignature("33 59 66 83 35");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 33 59 66 83 35
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Utility.compactClassName("freturn", true);
      Utility.format((-1836), (-1836), true, '2');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)38;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 44, (int) (byte) (-56), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = Utility.getSignature("java.lang.<`oxfr^'x");
      assertEquals("Ljava/lang/<`oxfr^'x;", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-44);
      byteArray0[6] = (byte)74;
      String string1 = Utility.encode(byteArray0, false);
      assertEquals("$z$3cz$A$ff$d4J", string1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)122;
      objectArray0[1] = (Object) (byte)74;
      objectArray0[2] = (Object) "Ljava/lang/<`oxfr^'x;";
      objectArray0[3] = (Object) (byte) (-1);
      objectArray0[4] = (Object) (byte)0;
      String string2 = Utility.printArray(objectArray0, false);
      assertEquals("122, 74, Ljava/lang/<`oxfr^'x;, -1, 0", string2);
      
      Utility.format(46, 1790, false, '_');
      boolean boolean0 = Utility.isJavaIdentifierPart('_');
      assertTrue(boolean0);
      
      String string3 = Utility.fillup("n", 86, true, '\\');
      assertEquals("n\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", string3);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Utility.setBit((-1716), (-1716));
      Utility.typeOfSignature("The strings must not be null");
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Utility.compactClassName("The wildcard must not be null");
      Utility.isJavaIdentifierPart('>');
      String string0 = "=^GS|z9f~KN";
      Utility.searchOpcode("=^GS|z9f~KN");
      Utility.methodTypeToSignature("=^GS|z9f~KN", (String[]) null);
      Utility.methodSignatureToString("()L=^GS|z9f~KN;", "The wildcard must not be null", "The wildcard must not be null", false);
      byte[] byteArray0 = new byte[0];
      Constant[] constantArray0 = new Constant[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantUtf8 constantUtf8_0 = null;
      try {
        constantUtf8_0 = new ConstantUtf8(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)120;
      Utility.equals(byteArray0, byteArray0);
      Utility.getSignature("APPEND ");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      try { 
        Utility.methodSignatureArgumentTypes("iushr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: iushr
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Utility.clearBit(16, 74);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)68;
      byteArray0[4] = (byte) (-123);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)43, (-2763));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.getSignature("S,|pH>\"A-$H^\"@PA, ");
      Utility.convertString("S,|pH>\"A-$H^\"@PA, ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)115;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)44;
      byteArray1[1] = (byte)44;
      byteArray1[2] = (byte)115;
      byteArray1[3] = (byte)44;
      byteArray1[4] = (byte)44;
      byteArray1[5] = (byte)44;
      Utility.equals(byteArray0, byteArray1);
      Utility.convertString("%d$S:).rOBk");
      Constant[] constantArray0 = new Constant[4];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte)44, (byte)44);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      Constant constant0 = constantInvokeDynamic0.copy();
      constantArray0[1] = constant0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)115);
      constantArray0[2] = (Constant) constantMethodType0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(163, (byte)44);
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 113, 175, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      objectArray0[0] = object0;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      Utility.compactClassName("java.lang.Object@5e51a137", false);
      Utility.compactClassName("java.lang.Object@5e51a137", "@^bXdG1Jv|*2/mit", false);
      try { 
        Utility.methodSignatureReturnType("O", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = Utility.isSet((-400), (-400));
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("fastore", string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("F|[Z}S");
      byte byte0 = Utility.typeOfSignature("F|[Z}S");
      assertEquals((byte)6, byte0);
      
      int int0 = Utility.setBit((byte)6, (-3418));
      assertEquals(70, int0);
      
      String string0 = Utility.classOrInterface(236);
      assertEquals("class", string0);
      
      String string1 = Utility.fillup("DbIdPa i", 70, false, '#');
      assertEquals("##############################################################DbIdPa i", string1);
      
      short short0 = Utility.searchOpcode("xsPHgvzRu( -HhE/b0}");
      assertEquals((short) (-1), short0);
      
      String string2 = Utility.compactClassName("F|[Z}S", "##############################################################DbIdPa i", false);
      assertEquals("F|[Z}S", string2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)6;
      String string3 = Utility.toHexString(byteArray0);
      assertEquals("06 06 06 06 06 ab 06", string3);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)89;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)79, (int) (byte) (-62), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.format((-845), 159, false, 'e');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte) (-35);
      byteArray0[7] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("aload\t\t%117", string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Utility.accessToString((-2352));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 229, 171, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature("QM~qe4Y?Bs4,Ad1nQ+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: QM~qe4Y?Bs4,Ad1nQ+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Utility.clearBit((-724), 62);
      Utility.isJavaIdentifierPart('c');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-56);
      byteArray0[6] = (byte)104;
      byteArray0[7] = (byte)11;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)80, 93, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0);
      try { 
        Utility.typeOfSignature(":;(O$*~P~+&B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :;(O$*~P~+&B
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      try { 
        Utility.typeOfSignature("R0WFi~AMQ|g.R=?_,|1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: R0WFi~AMQ|g.R=?_,|1
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)118;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)79, (int) (byte) (-62), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 2355;
      boolean boolean0 = false;
      Utility.format(2355, 1760, false, '1');
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("byte", stringArray0);
      Utility.compactClassName("()B", false);
      String[] stringArray1 = Utility.methodSignatureArgumentTypes("()B");
      Utility.printArray((Object[]) stringArray1, false, false);
      String string0 = "ifnull";
      try { 
        Utility.methodSignatureArgumentTypes("ifnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnull
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = Utility.fillup("?", 42, true, 'O');
      assertEquals("?OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("astore_0", string1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.fillup("short", 209, true, 'r');
      Utility.fillup("3a$E>#:'oN", 209, true, 'r');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte) (-16);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-985), 90);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(byteSequence0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[1] = (Constant) constantInterfaceMethodref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 56318. Constant pool size is: 2
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Utility.isJavaIdentifierPart('j');
      try { 
        Utility.typeOfSignature("?>...");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?>...
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Utility.fillup("M9_KRI#d%,h.", 171, false, 'x');
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte) (-75);
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat(1410.9F);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 31, (int) (byte) (-71), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Utility.printArray(objectArray0);
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, true);
      String[] stringArray0 = new String[3];
      String string0 = "$GSgC";
      stringArray0[0] = "$GSgC";
      stringArray0[1] = "{java.lang.Object@45fe250, java.lang.Object@16a103d1, java.lang.Object@5e7c2dc6, java.lang.Object@2d75019b, java.lang.Object@56432b07, java.lang.Object@48621595, java.lang.Object@774f0342}";
      stringArray0[2] = "[Pe_/'l@.\"u|p#l_%";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[Pe_/'l@.\"u|p#l_%", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [Pe_/'l@.\"u|p#l_%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      try { 
        Utility.typeOfSignature("/Y6Q&&;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /Y6Q&&;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-30);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte)72, (byte)77);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)41, (int) (byte)18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 226. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-126);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)36;
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteArray0, constantPool0, (-836), 3390);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("0:    land\n1:    <illegal opcode>\n2:    aload_0\n3:    ixor\n4:    nop\n5:    iconst_2\n6:    iconst_2\n7:    fload_2\n", "0:    land\n1:    <illegal opcode>\n2:    aload_0\n3:    ixor\n4:    nop\n5:    iconst_2\n6:    iconst_2\n7:    fload_2\n");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 0:    land
         // 1:    <illegal opcode>
         // 2:    aload_0
         // 3:    ixor
         // 4:    nop
         // 5:    iconst_2
         // 6:    iconst_2
         // 7:    fload_2
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = Utility.accessToString(9);
      assertEquals("public static", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-118);
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-101);
      byteArray0[7] = (byte)119;
      byteArray0[8] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iload_3", string1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "[1yO;2Zc:]@s&[.;*";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "instanceof");
      Utility.searchOpcode("[1yO;2Zc:]@s&[.;*");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)97;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[1yO;2Zc:]@s&[.;*");
      boolean boolean0 = false;
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-66), (int) (byte)0, false);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "monitorenter";
      Utility.compactClassName("monitorenter");
      Utility.typeOfSignature("[i4}@tz");
      String string1 = "-fiRiwemT=j";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("-fiRiwemT=j", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `-fiRiwemT=j'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "LD[!BU-IG5R>:";
      Utility.typeOfSignature("LD[!BU-IG5R>:");
      boolean boolean0 = false;
      Utility.accessToString((int) (byte)14, false);
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("LD[!BU-IG5R>:", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LD[!BU-IG5R>:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Utility.getSignature("N)Q(?:(5`");
      // Undeclared exception!
      try { 
        Utility.signatureToString("M+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-104);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "INSENSITIVE");
      byteArray0[3] = (byte)39;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-104), 8);
      Utility.convertString("0:    iconst_4\n1:    aload_1\n2:    dcmpg\n3:    dload_1\n");
      Utility.accessToString((int) (byte) (-104), false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) byteSequence0;
      objectArray0[1] = (Object) "iconst_4";
      objectArray0[2] = (Object) (byte)39;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) byteSequence0;
      objectArray0[5] = (Object) (byte)7;
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) (byte) (-104);
      objectArray0[8] = (Object) (byte)7;
      Utility.printArray(objectArray0, false);
      Utility.format((-55), 1614, true, 'B');
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    iconst_4\n1:    aload_1\n2:    dcmpg\n3:    dload_1\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    iconst_4
         // 1:    aload_1
         // 2:    dcmpg
         // 3:    dload_1
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      objectArray0[1] = object1;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true);
      Utility.compactClassName("if_icmple", "if_icmple", true);
      Object[] objectArray1 = new Object[0];
      Utility.printArray(objectArray1, true);
      Utility.printArray(objectArray0, false, true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "void";
      stringArray0[1] = "\"java.lang.Object@6e5db6c3\", \"java.lang.Object@214c74c5\"";
      stringArray0[2] = "{java.lang.Object@6e5db6c3, java.lang.Object@214c74c5}";
      stringArray0[3] = "Ga17";
      stringArray0[4] = "if_icmple";
      stringArray0[5] = "";
      try { 
        Utility.methodTypeToSignature("\"java.lang.Object@6e5db6c3\", \"java.lang.Object@214c74c5\"", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte) (-92);
      byteArray0[8] = (byte)69;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      
      String string0 = Utility.convertString("5B3r7a 75HbL(A9^V#'");
      assertEquals("5B3r7a 75HbL(A9^V#\\'", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      try { 
        Utility.typeOfSignature(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      try { 
        Utility.typeOfSignature("W6Q&&;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W6Q&&;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Utility.accessToString(46);
      Utility.searchOpcode("}Uu\"qhyltD%\b0'nm|");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)44;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 64, (int) (byte)24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "(";
      try { 
        Utility.typeOfMethodSignature("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = " N6X+nH|";
      Utility.convertString(" N6X+nH|");
      Utility.convertString("$ff$U$q$qB");
      char char0 = '@';
      Utility.isJavaIdentifierPart('@');
      int int0 = 306;
      Utility.classOrInterface(306);
      Utility.compactClassName("$ff$U$q$qB");
      int int1 = (-2554);
      Utility.accessToString((-2554), false);
      byte[] byteArray0 = Utility.decode("$ff$U$q$qB", false);
      Utility.getSignature("8Jk8_4");
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Utility.classOrInterface(224);
      Utility.isJavaIdentifierPart(' ');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)18;
      byteArray0[0] = (byte)63;
      byteArray0[5] = (byte) (-6);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 994, 3844);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 0. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Utility.accessToString((-1186), true);
      Utility.fillup("!RV_]NCg'E", (-1186), true, 'L');
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)57;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)51, (int) (byte) (-53));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      try { 
        Utility.typeOfSignature("#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "B;p~fPxVv-C4-B uX";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.typeOfSignature("B;p~fPxVv-C4-B uX");
      Utility.convertString("B;p~fPxVv-C4-B uX");
      int int0 = 1045;
      Utility.classOrInterface(1045);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      Constant[] constantArray0 = new Constant[5];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("<");
      constantArray0[0] = (Constant) constantUtf8_0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantDouble constantDouble0 = null;
      try {
        constantDouble0 = new ConstantDouble(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)58;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, 114);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(:u{?Vt%X", "U,", "(:u{?Vt%X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `:u{?Vt%X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Utility.convertString("T?d-s/");
      String string0 = "Expected class `";
      String[] stringArray0 = new String[0];
      Utility.methodTypeToSignature("Expected class `", stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet((-873), (-873));
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)71;
      byteArray0[5] = (byte) (-69);
      byteArray0[6] = (byte) (-126);
      byte byte0 = (byte)57;
      byteArray0[7] = (byte)57;
      ConstantPool constantPool0 = null;
      int int0 = 412;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 412, (int) (byte)8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "W<");
      Utility.isJavaIdentifierPart('`');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)117;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 198, (int) (byte) (-94), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.format(92, 92, true, 'J');
      String string0 = ")7K&_)H{Du";
      try { 
        Utility.typeOfSignature(")7K&_)H{Du");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )7K&_)H{Du
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "xLXe");
      Utility.compactClassName("xLXe", false);
      Utility.compactClassName("Invalid type: ");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)4;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)62, (int) (byte) (-102), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "DL?\\";
      Utility.typeOfSignature("DL?");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)7;
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("breakpoint");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `breakpoint'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)79;
      byte byte0 = (byte)115;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-65);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[6] = (byte) (-93);
      byteArray0[7] = (byte)103;
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("00 4f 73 53 bd bf a3 67");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 00 4f 73 53 bd bf a3 67
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)92;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "? extends ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "? extends ");
      byteArray0[0] = (byte)92;
      byte byte1 = (byte) (-36);
      byteArray0[1] = (byte) (-36);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)102;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[4] = (byte) (-16);
      Utility.equals(byteArray0, byteArray0);
      Utility.isSet((-1207), 547);
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("+[<}j)Q1g^Yg=S", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q1g^Yg=S'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Utility.isJavaIdentifierPart('R');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      Object[] objectArray0 = new Object[3];
      byteSequence0.reset();
      objectArray0[0] = (Object) (byte)41;
      objectArray0[1] = (Object) byteSequence0;
      objectArray0[2] = (Object) (byte)60;
      String string1 = Utility.printArray(objectArray0, false, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)62;
      byteArray0[0] = (byte)62;
      ConstantPool constantPool0 = null;
      int int0 = (-1916);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 60, (-1916));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)77;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)77, (int) (byte) (-120), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = Utility.classOrInterface(32);
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-54);
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte)112;
      byteArray0[8] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(byteSequence0);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[1] = (Constant) constantClass0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte) (-105), (-3));
      constantArray0[2] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("dstore_1", string1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "V([Wu)]](7y:";
      stringArray0[1] = "V([Wu)]](7y:";
      stringArray0[2] = "V([Wu)]](7y:";
      stringArray0[3] = "V([Wu)]](7y:";
      stringArray0[4] = "V([Wu)]](7y:";
      stringArray0[5] = "V([Wu)]](7y:";
      stringArray0[6] = "V([Wu)]](7y:";
      stringArray0[7] = "V([Wu)]](7y:";
      stringArray0[8] = "V([Wu)]](7y:";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("V([Wu)]](7y:", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[Wu)]](7y:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Utility.classOrInterface(224);
      Utility.isJavaIdentifierPart(' ');
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte) (-6);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 994, 3844);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 63. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = true;
      Utility.signatureToString("SourceFile", true);
      DataInput dataInput0 = null;
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-22);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 37, 128, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "9<9'/o";
      try { 
        Utility.typeOfSignature("9<9'/o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9<9'/o
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Utility.compactClassName("[T");
      String string0 = "9Wr9eHNuH9mhZ";
      boolean boolean0 = false;
      Utility.compactClassName("[T", "9Wr9eHNuH9mhZ", false);
      try { 
        Utility.methodSignatureReturnType("[T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "Y%u";
      Utility.compactClassName("Y%u", true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Y%u", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Y%u'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "1ho$uEFSQ>A}0g";
      try { 
        Utility.typeOfSignature("1ho$uEFSQ>A}0g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1ho$uEFSQ>A}0g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Utility.typeOfSignature("Invalid StackMap offset: ");
      try { 
        Utility.decode("Invalid StackMap offset: ", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte) (-38);
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte)20;
      Utility.toHexString(byteArray0);
      String string0 = Utility.encode(byteArray0, false);
      Utility.isSet(1837, 67);
      Utility.methodSignatureReturnType("Zc$5by$da$e3$3c$U", false);
      String string1 = Utility.compactClassName("Dont call getValueLong() on a non LONG ElementValue", "boolean", false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Utility.setBit(48, 512);
      String string0 = "4D:Zy;*qOZ";
      try { 
        Utility.typeOfSignature("4D:Zy;*qOZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4D:Zy;*qOZ
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Utility.classOrInterface((-2955));
      Utility.compactClassName("class", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)80;
      Utility.encode(byteArray0, true);
      Utility.signatureToString("Lrxv7VW9[;cQ");
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 16, (-2955));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "[XsX0@~YL;tHjhOV";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("[XsX0@~YL;tHjhOV", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XsX0@~YL;tHjhOV'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Utility.typeOfSignature("VdhUO!vO]f7'");
      String string0 = "`w}~R4SZq5X{";
      try { 
        Utility.methodSignatureArgumentTypes("`w}~R4SZq5X{", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: `w}~R4SZq5X{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-25);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-25), (int) (byte) (-25), false);
      Utility.compactClassName("0:    lload_2\n1:    <illegal opcode>\n");
      Utility.toHexString(byteArray0);
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureReturnType("20 e7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `20 e7'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = 477;
      Utility.setBit(88, 477);
      String string0 = "ZQzQ$((`w&S<=NmYdA!";
      Utility.decode("ZQzQ$((`w&S<=NmYdA!", false);
      try { 
        Utility.methodSignatureArgumentTypes("ZQzQ$((`w&S<=NmYdA!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ZQzQ$((`w&S<=NmYdA!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      int int0 = 180;
      Utility.classOrInterface(180);
      Utility.clearBit(180, 180);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int1 = 106;
      char char0 = 'x';
      Utility.fillup("ldc2_w", 106, false, 'x');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = ", max_locals = ";
      Utility.getSignature(", max_locals = ");
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte)61;
      Utility.encode(byteArray0, true);
      Utility.compactClassName("<", false);
      Utility.getSignature("<");
      try { 
        Utility.typeOfSignature("<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = "=QUi)2<z({1iXDWU<Y";
      try { 
        Utility.typeOfSignature("=QUi)2<z({1iXDWU<Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =QUi)2<z({1iXDWU<Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Utility.replace("6.PTH`!9iLc F#D})&", "Z9`;wjT'>QOKQY8c6", "6.PTH`!9iLc F#D})&");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte) (-112);
      byte byte0 = (byte)43;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)66;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)66, (int) (byte)43, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "instanceof");
      Utility.searchOpcode("[1yO;2Zc:]@s&[.;*");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)97;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[1yO;2Zc:]@s&[.;*");
      byteArray0[2] = (byte) (-65);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-66), (int) (byte) (-65), false);
      Utility.replace("[1yO;2Zc:]@s&[.;*", "[1yO;2Zc:]@s&[.;*", "zpF");
      Utility.compactClassName("zpF", false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, true);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      try { 
        Utility.typeOfSignature("5?>L4vusuz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5?>L4vusuz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte) (-9);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("dload_1", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Utility.convertString("K_i\"W4Rrii");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)47;
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-114);
      Constant[] constantArray0 = new Constant[3];
      int int0 = 234;
      ConstantClass constantClass0 = new ConstantClass(234);
      constantArray0[0] = (Constant) constantClass0;
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-114));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      short short0 = Utility.searchOpcode("/BzS;oK+!");
      assertEquals((short) (-1), short0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "H";
      // Undeclared exception!
      try { 
        Utility.signatureToString("H", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)120;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte)57;
      byteArray0[8] = (byte) (-30);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 259, (-1446), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "Ng&/|?/t,F}TKzXig";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("Ng&/|?/t,F}TKzXig", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ng&/|?/t,F}TKzXig'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Utility.methodSignatureReturnType("B2:]N\"G]*OJ<9@[\"X", false);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Utility.decode("+h9zK(V!USxMf;)", false);
      int int0 = (-1194);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.setBit((-1194), 951);
      // Undeclared exception!
      try { 
        Utility.getSignature("r6[j[txkJ\"391)o");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[j[txkJ\"391)o
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.decode("TvI%}0qrk3qOq$", false);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("-_\"R3", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `-_\"R3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("RuntimeVisibleAnnotations");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RuntimeVisibleAnnotations'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-6);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("ifle\t\t#-16992", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.encode(byteArray0, false);
      Utility.compactClassName("$x$3e$D");
      Utility.decode("$x$3e$D", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("$x$3e$D");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "$x$3e$D");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)43;
      objectArray0[1] = (Object) "$x$3e$D";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) null;
      Utility.printArray(printStream0, objectArray0);
      assertSame(mockPrintStream0, printStream0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)66;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-88), (int) (byte)10, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    d2f
         // 1:    baload
         // 2:    dastore
         // 3:    lconst_1
         // 4:    iastore
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "+r";
      try { 
        Utility.typeOfSignature("+r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: r
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)79;
      byte byte0 = (byte)115;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-65);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[6] = (byte) (-93);
      byte byte1 = (byte)103;
      byteArray0[7] = (byte)103;
      Utility.equals(byteArray0, byteArray0);
      Utility.toHexString(byteArray0);
      try { 
        Utility.typeOfSignature("67 4f 73 53 bd bf a3 67");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 67 4f 73 53 bd bf a3 67
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Utility.printArray((Object[]) null, false, false);
      Utility.accessToString(3031, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)110;
      Constant[] constantArray0 = new Constant[1];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)77);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)110, 3031);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      boolean boolean0 = true;
      Utility.accessToString(3756, true);
      String string0 = "s,vkE\"A#>50Q\\}RIdp(";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("s,vkE\"A#>50Q}RIdp(", "s,vkE\"A#>50Q}RIdp(");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // s,vkE\"A#>50Q}RIdp(
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "10?1N>m)";
      Utility.compactClassName("10?1N>m)", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-14);
      byte byte0 = (byte)98;
      byteArray0[1] = (byte)98;
      byte byte1 = (byte)40;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)20;
      byte byte2 = (byte)17;
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte) (-100);
      byteArray0[8] = (byte)36;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-100), (int) (byte)20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Utility.classOrInterface(168);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteArray0, (ConstantPool) null, (-3102), 2387, false);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0:    wide\t(wide)\n";
      Utility.methodTypeToSignature("class", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("class", "(L0:;)Lclass;", "0:    wide\t(wide)\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte)117;
      byteArray0[2] = (byte)117;
      byte byte2 = (byte) (-3);
      byteArray0[3] = (byte) (-3);
      byte byte3 = (byte) (-19);
      byteArray0[4] = (byte) (-19);
      Utility.equals(byteArray0, byteArray0);
      Utility.searchOpcode("Ei}pmVPd}QLme&K{X{O");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Ei}pmVPd}QLme&K{X{O", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ei}pmVPd}QLme&K{X{O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte)89;
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte)64;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((byte) (-63));
      constantArray0[0] = (Constant) constantString0;
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(dataInputStream0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.setBit((byte) (-63), (byte)16);
      Utility.typeOfSignature("LocalVariableTable");
      String string0 = "VkSYWi:'\"L;";
      String string1 = "E8rN.KzHy=B^u,";
      String string2 = null;
      boolean boolean0 = true;
      LocalVariableTable localVariableTable0 = null;
      try {
        localVariableTable0 = new LocalVariableTable((LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.LocalVariableTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = "(owDd,0c-dap2Y@T";
      try { 
        Utility.methodSignatureArgumentTypes("(owDd,0c-dap2Y@T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `owDd,0c-dap2Y@T'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte)75;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.compactClassName("pop", "putstatic", true);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.fillup("invokeinterface", 76, true, 'D');
      assertEquals("invokeinterfaceDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", string2);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)95;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)1;
      Utility.equals(byteArray0, byteArray0);
      Utility.format((byte)95, (byte)95, true, 'v');
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)70;
      byteArray1[1] = (byte)1;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray1[2] = (byte) (-111);
      Utility.equals(byteArray0, byteArray1);
      Utility.accessToString(1356, true);
      try { 
        Utility.decode("s>b", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = "G IHJ10";
      try { 
        Utility.methodSignatureReturnType("G IHJ10");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G IHJ10'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "oh%enf+IG%3p~");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = (-410);
      Utility.setBit((-410), 3339);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("oh%enf+IG%3p~", "oh%enf+IG%3p~", "invokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: oh%enf+IG%3p~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "f|,AhWP";
      stringArray0[1] = "f|,AhWP";
      stringArray0[2] = "f|,AhWP";
      stringArray0[3] = "f|,AhWP";
      stringArray0[4] = "f|,AhWP";
      Utility.methodTypeToSignature("f|,AhWP", stringArray0);
      try { 
        Utility.typeOfSignature("(Lf|,AhWP;Lf|,AhWP;Lf|,AhWP;Lf|,AhWP;Lf|,AhWP;)Lf|,AhWP;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (Lf|,AhWP;Lf|,AhWP;Lf|,AhWP;Lf|,AhWP;Lf|,AhWP;)Lf|,AhWP;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("[]", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("Unreachable default case reached!", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable default case reached!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-17);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte) (-28);
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$d0$$C1$ef$C$O$e4", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, false, true);
      Utility.classOrInterface(233);
      String string0 = "K(@B.8IJZ9@IKY";
      // Undeclared exception!
      try { 
        Utility.signatureToString("K(@B.8IJZ9@IKY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K(@B.8IJZ9@IKY'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "compiler version\t";
      stringArray0[1] = "compiler version\t";
      Utility.methodTypeToSignature("compiler version\t", stringArray0);
      boolean boolean0 = true;
      Utility.compactClassName("putfield", "cpyuQ!aUII1p#XDc", true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -2
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = "@}7:O";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      try { 
        Utility.typeOfSignature("@}7:O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @}7:O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = " 5biYV1";
      Utility.searchOpcode(" 5biYV1");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-106);
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)68;
      Utility.equals(byteArray0, byteArray0);
      Utility.isJavaIdentifierPart('*');
      Utility.isSet((byte) (-106), (-3195));
      Utility.printArray((Object[]) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = " 5biYV1";
      stringArray0[1] = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = " 5biYV1";
      stringArray0[6] = " 5biYV1";
      stringArray0[7] = null;
      stringArray0[8] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(" 5biYV1", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}");
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)107;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.encode(byteArray0, false);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "k";
      objectArray0[1] = (Object) "k";
      Utility.printArray(objectArray0, false);
      Utility.getSignature("k");
      Utility.accessToString((int) (byte)107);
      try { 
        Utility.decode("Lk;", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.encode(byteArray0, false);
      Utility.compactClassName("$x$3e$D");
      Utility.decode("invokeStatic", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("$x$3e$D");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "invokeStatic");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)43;
      objectArray0[1] = (Object) "invokeStatic";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) mockPrintStream0;
      objectArray0[4] = (Object) null;
      Utility.printArray(printStream0, objectArray0);
      assertSame(mockPrintStream0, printStream0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "tT]4 z0&Q.");
      objectArray0[1] = object1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.printArray(objectArray0);
      Utility.accessToString(237, false);
      Utility.convertString("o%KM-WOB!$D#d(lh,I");
      Utility.classOrInterface(237);
      Utility.isJavaIdentifierPart('Q');
      Utility.accessToString(237);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-63);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3826), (int) (byte)74, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dstore_3
         // 1:    fstore\t\t%247
         // 3:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)82;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)66;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-88), (int) (byte)10, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    lushr
         // 1:    baload
         // 2:    dastore
         // 3:    lconst_1
         // 4:    iastore
         // 5:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Utility.printArray((Object[]) null, true);
      Utility.signatureToString("C2Cq<!]#%}M(t>={]4Z", true);
      Utility.signatureToString("C2Cq<!]#%}M(t>={]4Z", true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.fillup("if_icmpgt", 878, true, 'g');
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("A8a?u=q96BB-GW80+", "C2Cq<!]#%}M(t>={]4Z", "if_icmpgt", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A8a?u=q96BB-GW80+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string0 = "short";
      Utility.getSignature("short");
      try { 
        Utility.methodSignatureArgumentTypes("S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Utility.fillup("$ Q ex#=", (-1800), true, '(');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "$ Q ex#=";
      objectArray0[0] = (Object) "$ Q ex#=";
      objectArray0[2] = (Object) "$ Q ex#=";
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      objectArray0[3] = object0;
      Utility.printArray(objectArray0);
      Utility.classOrInterface((-1800));
      String string0 = Utility.compactClassName("$ Q ex#=");
      String string1 = Utility.signatureToString("V");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Utility.fillup(" = ", 3333, true, 'J');
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.methodSignatureReturnType("F$XVQ2=r2%jVG[Q}jH", true);
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-81);
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte) (-48);
      byteArray0[8] = (byte)65;
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("Lvr");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)93);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-81), 126);
      assertEquals("0:    dup_x2\n1:    ishr\n2:    iconst_0\n3:    dreturn\n4:    dup2_x1\n5:    dneg\n6:    dconst_1\n7:    <illegal opcode>\n8:    lstore_2\n", string0);
      
      String string1 = Utility.format(90, 126, false, 'h');
      assertEquals("hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh90", string1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Utility.compactClassName("[pxoE", true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[pxoE");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[pxoE");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte) (-27);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("arraylength", "arraylength", "[pxoE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: arraylength
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "e| in/5\\");
      int int0 = Utility.setBit(170, 696);
      assertEquals(16777386, int0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('z');
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)97;
      byteArray0[7] = (byte)111;
      byteArray0[8] = (byte) (-73);
      boolean boolean1 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      String string0 = Utility.printArray(objectArray0);
      assertNotNull(string0);
      
      try { 
        Utility.methodSignatureReturnType("Warning: Padding byte != 0 in ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("GRUgTVhb=l[\":;2");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "GRUgTVhb=l[\":;2";
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "GRUgTVhb=l[\":;2";
      Object object0 = new Object();
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "GRUgTVhb=l[\":;2";
      objectArray0[8] = (Object) "GRUgTVhb=l[\":;2";
      Utility.printArray(objectArray0);
      Utility.searchOpcode("GRUgTVhb=l[\":;2");
      // Undeclared exception!
      try { 
        Utility.getSignature("GRUgTVhb=l[\":;2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[\":;2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = "G[=]IO%,i5/?0{!gJ<";
      try { 
        Utility.typeOfMethodSignature("G[=]IO%,i5/?0{!gJ<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G[=]IO%,i5/?0{!gJ<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = "A`ZefR";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A`ZefR");
      String string1 = ",ttJ#01";
      Utility.replace("A`ZefR", "ddiv", ",ttJ#01");
      Utility.accessToString((-60));
      Utility.isJavaIdentifierPart(',');
      Utility.isSet(1938, 184);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("A`ZefR", "putField", "ddiv", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: A`ZefR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)76;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Invalid method signature: ");
      byteArray0[0] = (byte)76;
      Constant[] constantArray0 = new Constant[2];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("areturn");
      constantArray0[0] = (Constant) constantUtf8_0;
      ConstantLong constantLong0 = new ConstantLong((byte)76);
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)76, (int) (byte)76, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.setBit(256, 256);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.accessToString((-2966));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)84;
      Utility.equals(byteArray0, byteArray0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) (byte)84;
      objectArray0[1] = (Object) (byte)84;
      objectArray0[2] = (Object) (byte)84;
      objectArray0[3] = (Object) (byte)84;
      Object object0 = new Object();
      objectArray0[4] = object0;
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte) (-112);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "z u_En#E&.";
      stringArray0[1] = "goto";
      Utility.methodTypeToSignature("goto", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("x%$", ")\t", "z u_En#E&.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: x%$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Utility.clearBit(5, 5);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)78;
      byteArray0[6] = (byte)19;
      Utility.encode(byteArray0, false);
      Utility.compactClassName("$ff$A$q$KBN$T");
      Utility.isSet((-311), 82);
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("$ff$A$q$KBN$T", "$ff$A$q$KBN$T", false);
      Utility.getSignature("$ff$A$q$KBN$T");
      Utility.convertString("$ff$A$q$KBN$T");
      try { 
        Utility.typeOfSignature("$ff$A$q$KBN$T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $ff$A$q$KBN$T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = Utility.fillup("$ Q ex#=", (-1800), true, '(');
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "$ Q ex#=";
      objectArray0[0] = (Object) "$ Q ex#=";
      objectArray0[2] = (Object) "$ Q ex#=";
      Object object0 = new Object();
      objectArray0[3] = object0;
      String string1 = Utility.printArray(objectArray0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte)63;
      Constant[] constantArray0 = new Constant[4];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(101);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte)63, 170);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      ConstantMethodType constantMethodType2 = new ConstantMethodType(constantMethodType1);
      constantArray0[2] = (Constant) constantMethodType2;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)63);
      constantArray0[3] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 36, (-2537), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 45616. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = "org.apache.commons.io.filefilter.RegexFileFilter";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.io.filefilter.RegexFileFilter");
      Utility.getSignature("org.apache.commons.io.filefilter.RegexFileFilter");
      Utility.getSignature("org.apache.commons.io.filefilter.RegexFileFilter");
      Utility.isSet(665, 11);
      String string1 = "long";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("6uua.ev<[Rc R#", "long", "6uua.ev<[Rc R#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6uua.ev<[Rc R#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "JI1{cR4(d0uoqoLj";
      Utility.signatureToString("JI1{cR4(d0uoqoLj", false);
      String string1 = "3 v@r}7+5v9H.?";
      String string2 = "p\"7RS";
      int int0 = (-6213);
      LocalVariable[] localVariableArray0 = new LocalVariable[7];
      int int1 = 259;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 259);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ConstantPool constantPool0 = null;
      LocalVariable localVariable0 = null;
      try {
        localVariable0 = new LocalVariable(dataInputStream0, (ConstantPool) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "D";
      try { 
        Utility.methodSignatureArgumentTypes("D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: D
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Utility.isJavaIdentifierPart('W');
      Utility.compactClassName("@", "@", true);
      Utility.setBit(42, 124);
      Utility.printArray((Object[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-101);
      byte byte0 = (byte) (-17);
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)76;
      byte byte1 = (byte)5;
      byteArray0[6] = (byte)5;
      Constant[] constantArray0 = new Constant[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(dataInputStream0);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(dataInputStream0);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[1] = (Constant) constantMethodHandle1;
      try { 
        ConstantUtf8.getInstance((DataInput) dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      int int0 = 503;
      Utility.setBit(503, 503);
      try { 
        Utility.methodSignatureArgumentTypes("$ff$U$q$KB", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $ff$U$q$KB
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Utility.searchOpcode("w/0Hj[S'Cxa^|Ha),8}");
      Utility.classOrInterface(805);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)111;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(dataInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = "java.lang.";
      Utility.compactClassName("java.lang.");
      Utility.fillup("java.lang.", (-2538), true, 'q');
      Utility.format((-2538), (-464), false, 'q');
      Utility.clearBit((-749), (-464));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "-2538";
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Utility.clearBit(5, 5);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)19;
      Utility.encode(byteArray0, false);
      Utility.compactClassName("$ff$U$q$KBQ$T");
      Utility.isSet((-311), 82);
      Utility.equals(byteArray0, byteArray0);
      Utility.compactClassName("$ff$U$q$KBQ$T", "$ff$U$q$KBQ$T", false);
      try { 
        Utility.methodSignatureReturnType("|3O'Q6Fh zZ6[F5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `|3O'Q6Fh zZ6[F5'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      MockFile mockFile0 = new MockFile("V/Q!HX3\"ZT2}=", "F1![LO^!$jd");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter1.append(' ');
      Object[] objectArray0 = new Object[0];
      Utility.printArray(printWriter0, objectArray0);
      assertEquals(4L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-87);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "byte";
      try { 
        Utility.methodSignatureReturnType("byte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `byte'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Utility.accessToString(48, true);
      try { 
        Utility.methodSignatureReturnType("long", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `long'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, true);
      try { 
        Utility.typeOfSignature("{\"java.lang.Object@61a47acd\", \"java.lang.Object@6dee87e4\", \"java.lang.Object@2754462a\", \"java.lang.Object@7c03f1b2\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: {\"java.lang.Object@61a47acd\", \"java.lang.Object@6dee87e4\", \"java.lang.Object@2754462a\", \"java.lang.Object@7c03f1b2\"}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      int int0 = 11;
      Utility.classOrInterface(11);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)88;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "";
      Utility.compactClassName("", "", true);
      String string1 = "";
      Utility.getSignature("");
      Utility.isSet((-889275714), (-889275714));
      String string2 = "S{:@7Hf<H]#Y";
      try { 
        MockURI.URI("", "", "", (-889275714), "S{:@7Hf<H]#Y", "", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://@:-889275714S%7B:@7Hf%3CH%5D%23Y?#
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)46;
      Utility.encode(byteArray0, true);
      Utility.equals(byteArray0, byteArray0);
      Utility.methodTypeToSignature("$l$8b$I$A$A$A$A$A$A$A", (String[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)86;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-7);
      byteArray0[6] = (byte)40;
      Utility.equals(byteArray0, byteArray0);
      Utility.convertString(" not found: ");
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)40, 94, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Utility.replace("ixor", "ixor", "ixor");
      boolean boolean0 = false;
      Utility.accessToString(6552, false);
      Utility.getSignature("):\n");
      Utility.compactClassName(" ", " ", false);
      char char0 = 'j';
      Utility.fillup("):\n", (-1553), false, 'j');
      try { 
        Utility.methodSignatureArgumentTypes("$FPWz", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $FPWz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      URI uRI0 = MockURI.URI("");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = "G[=]IO%,i5/?0{!gJ<";
      try { 
        Utility.typeOfSignature("G[=]IO%,i5/?0{!gJ<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G[=]IO%,i5/?0{!gJ<
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Utility.isJavaIdentifierPart('T');
      Utility.signatureToString("Illegal type: ");
      try { 
        Utility.methodSignatureArgumentTypes("ineg", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ineg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      int int0 = Utility.clearBit(1944, 1944);
      assertEquals(1944, int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-126);
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("82", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "82";
      Utility.printArray(objectArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-126);
      byteArray1[1] = (byte) (-126);
      String string1 = Utility.encode(byteArray1, false);
      assertEquals("$82$82", string1);
      
      Utility.compactClassName("?&,b+]},M9MYGEm{VU", true);
      Utility.compactClassName("?&,b+]},M9MYGEm{VU", true);
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{82}", string2);
      
      Constant[] constantArray0 = new Constant[2];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((byte) (-126), (-283));
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantLong constantLong0 = new ConstantLong((-1L));
      constantArray0[1] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string3 = Utility.codeToString(byteArray1, constantPool1, (int) (byte) (-126), (int) (byte) (-126), false);
      assertEquals("0:    ixor\n1:    ixor\n", string3);
      
      Utility.fillup("{82}", 1944, true, 'c');
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string4 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("ixor", string4);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = "if_icmpge";
      Utility.searchOpcode("if_icmpge");
      try { 
        Utility.typeOfSignature("if_icmpge");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: if_icmpge
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = "2;qblSG";
      try { 
        Utility.typeOfSignature("2;qblSG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2;qblSG
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
