/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 04:43:59 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.StreamTokenizer;
import java.util.List;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil.removeComments("(RrXL;nU`NMg_Da&e");
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin((String) null, (String[]) null, "(RrXL;nU`NMg_Da&e", "(RrXL;nU`NMg_Da&e", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter sessiongbw\"hxlnbpgx");
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("alter sessiongbw\"hxlnbpgx", (String[]) null, "alter sessiongbw\"hxlnbpgx", "alter sessiongbw\"hxlnbpgx", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.normalize("alter table~6mbps%uk!:g~y/(", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("@0&00PG&/l0");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0C.ue");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "0C.ue";
      stringArray0[1] = "HSQL Database Engine 1.8.0.5";
      stringArray0[2] = "=Bg?WV1]S\" ot7?y=K;";
      stringArray0[3] = "HSQL Database Engine 1.8.0.5";
      stringArray0[4] = "=Bg?WV1]S\" ot7?y=K;";
      stringArray0[5] = "HSQL Database Engine 1.8.0.5";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "HSQL Database Engine 1.8.0.5", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("=Bg?WV1]S\" ot7?y=K;", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      assertSame(defaultDBTable0, dBTable0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("u");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("ISO8859_9", true, "ISO8859_9", "ISO8859_9");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ISO8859_9 CHECK ISO8859_9", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("ISO8859_9", true, "ISO8859_9", "ISO8859_9");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK ISO8859_9", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("X3");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("hOQeBRwNsO`J>", stringArray0, "create unique indexdrop materialized view", "X3", stringArray0);
      assertEquals("left join create unique indexdrop materialized view as X3 on ", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "alter materialized view";
      String string0 = SQLUtil.leftJoin("alter materialized view", stringArray0, "] child: ", "COLLATION", stringArray0);
      assertEquals("left join ] child:  as COLLATION on alter materialized view.alter materialized view = COLLATION.alter materialized view", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "SELECT * FROM INFORMATION_SCHEMA.IN_DOUBT ORDER BY TRANSACTION";
      stringArray0[1] = "SELECT * FROM INFORMATION_SCHEMA.IN_DOUBT ORDER BY TRANSACTION";
      String string0 = SQLUtil.innerJoin("SELECT * FROM INFORMATION_SCHEMA.IN_DOUBT ORDER BY TRANSACTION", stringArray0, "<r\"OX", "org.firebirdsql.gds.impl.jni.NativeGDSImpl", stringArray0);
      assertEquals("<r\"OX as org.firebirdsql.gds.impl.jni.NativeGDSImpl on SELECT * FROM INFORMATION_SCHEMA.IN_DOUBT ORDER BY TRANSACTION.SELECT * FROM INFORMATION_SCHEMA.IN_DOUBT ORDER BY TRANSACTION = org.firebirdsql.gds.impl.jni.NativeGDSImpl.SELECT * FROM INFORMATION_SCHEMA.IN_DOUBT ORDER BY TRANSACTION and SELECT * FROM INFORMATION_SCHEMA.IN_DOUBT ORDER BY TRANSACTION.SELECT * FROM INFORMATION_SCHEMA.IN_DOUBT ORDER BY TRANSACTION = org.firebirdsql.gds.impl.jni.NativeGDSImpl.SELECT * FROM INFORMATION_SCHEMA.IN_DOUBT ORDER BY TRANSACTION", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null", string0);
      
      FileUtil.canonicalFile("9CQ@G1%RgR");
      boolean boolean0 = SQLUtil.isQuery("org.hsqldb.TriggerDef");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLUtil.removeComments("-dkV6R9%$,^~");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-dkV6R9%$,^~";
      stringArray0[1] = "create unique index= & 4x > ou9vldk4 *";
      String string0 = SQLUtil.renderColumnListWithTableName("-dkV6R9%$,^~", stringArray0);
      assertEquals("-dkV6R9%$,^~.-dkV6R9%$,^~, -dkV6R9%$,^~.create unique index= & 4x > ou9vldk4 *", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = SQLUtil.normalize("e+1Ju x~w^4h$)&Ao", true);
      assertEquals("e + 1Ju x ~ w ^ 4h $) & Ao", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "owmf9h8=?PfVD6");
      SQLUtil.addRequiredCondition("owmf9h8=?PfVD6", stringBuilder0);
      assertEquals("owmf9h8=?PfVD6 and owmf9h8=?PfVD6", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(">4OoxD|A@pmm[)=nBQ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("9;m#7b", defaultDBTable0, (-1724), ">4OoxD|A@pmm[)=nBQ");
      String string0 = SQLUtil.renderValue(defaultDBColumn0);
      assertEquals("9;m#7b : >4OOXD|A@PMM[)=NBQ", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("X3");
      String string0 = SQLUtil.renderValue(boolean0);
      assertEquals("false", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("alter tablenpykjdw6}\"jtiu");
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container alter tablenpykjdw6}\"jtiu", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[6] = ",t1u .z1d$w:s";
      String string0 = SQLUtil.join((String) null, "m,16h", stringArray0, stringArray0[0], "Error writing control file", stringArray0);
      assertEquals("null as Error writing control file on m,16h.null = Error writing control file.null and m,16h.null = Error writing control file.null and m,16h.null = Error writing control file.null and m,16h.null = Error writing control file.null and m,16h.null = Error writing control file.null and m,16h.null = Error writing control file.null and m,16h.,t1u .z1d$w:s = Error writing control file.,t1u .z1d$w:s and m,16h.null = Error writing control file.null", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = SQLUtil.normalize("oajinh{wp'0x", true);
      assertEquals("oajinh { wp '0x'", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table null", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("rename}mft^zwv@7k~e&x=rb");
      SQLUtil.mutatesDataOrStructure("org.h2.expression.ValueExpressio");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("rename}mft^zwv@7k~e&x=rb", stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.removeComments("'|#`f)VV");
      SQLUtil.substituteMarkers("'|#`f)VV", "'|#`f)VV", "'|#`f)VV");
      String string0 = "}u0*E";
      int int0 = 1071;
      StringBuilder stringBuilder0 = new StringBuilder(1071);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("renamewhere", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(1071, 1071);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1071
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.removeComments("k_");
      SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("null.null", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec1);
      defaultDBTable0.getUniqueConstraint("CONSTRAINT null.null FOREIGN KEY () REFERENCES null()");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("jjSb3", false, "ISO8859_9", "jjSb3");
      dBCheckConstraint0.setDoc("ISO8859_9");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK jjSb3", string0);
      
      String string1 = SQLUtil.normalize("jjSb3", false);
      assertEquals("jjSb3", string1);
      
      boolean boolean0 = SQLUtil.isQuery("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("update");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("rename}mft^zwv@7k~e&x=rb");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("deletealter session", false, "create table", "ISO8859_9");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      String string0 = SQLUtil.removeComments("create table");
      assertEquals("create table", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "iso88599";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "iso88599", true, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (iso88599)", string0);
      
      boolean boolean0 = SQLUtil.isDML("A8gIEn&[w%!Ja}lb.D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("create unique indexdate");
      String string0 = SQLUtil.removeComments("X=tpQr2K");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "create unique indexdate";
      stringArray0[1] = "X=tpQr2K";
      stringArray0[2] = "create unique indexdate";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("X=tpQr2K", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      String string1 = SQLUtil.removeComments("setFetchSize");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("execute(cwcj.{p;");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "into");
      SQLUtil.isDML("into");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("selectzaoo $ i /", true, "callzaoo$i/|4<uzfo", "into");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      SQLUtil.addOptionalCondition("into", stringBuilder0);
      assertEquals("into", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil sQLUtil0 = new SQLUtil();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Character character0 = new Character('g');
      String string0 = SQLUtil.substituteMarkers("- ", "H}/gvn", character0);
      assertEquals("- ", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Character.valueOf('J');
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = TypeId.ARRAY_NAME;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      SQLUtil.mutatesStructure(",t1u .z1");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) "ARRAY");
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "NCLOB", true, stringArray0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "NCLOB", false, stringArray0);
      SQLUtil.mutatesStructure("UNIQUE ");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) dBPrimaryKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.databene.jdbacl.model.DBPrimaryKeyConstraint cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, (DBDataType) null, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("ISO8859_9", true, "ISO8859_9", "ISO8859_9");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ISO8859_9 CHECK ISO8859_9", string0);
      
      String string1 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT ISO8859_9 ", string1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "Wy_kJM(";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("Wy_kJM(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: Wy_kJM(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("Wd_kJM(");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = SQLUtil.normalize("-:yZ^,T/QeE@S", true);
      assertEquals(" - : yZ ^, T / QeE @ S", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("zaoo$i/", false);
      assertEquals("zaoo $ i /", string0);
      
      boolean boolean0 = SQLUtil.isQuery("zaoo $ i /");
      assertFalse(boolean0);
      
      DBDataType dBDataType0 = DBDataType.getInstance(279, "zaoo$i/");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("zaoo", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setVersionColumn(true);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("ZAOO$I/(3,3)", string1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("create unique indexdate");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "j6m,{.ROyP^N";
      stringArray0[1] = "j6m,{.ROyP^N";
      stringArray0[2] = "j6m,{.ROyP^N";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("j6m,{.ROyP^N", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT j6m,{.ROyP^N FOREIGN KEY (j6m,{.ROyP^N, j6m,{.ROyP^N, j6m,{.ROyP^N) REFERENCES null(j6m,{.ROyP^N, j6m,{.ROyP^N, j6m,{.ROyP^N)", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-2420), "");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" (2) NULL", string0);
      
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(" (2) NULL", (DBTable) null, dBDataType0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(", ,  (2) NULL, , ", string1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = SQLUtil.normalize("uxpw(LLJ_lZMW_", true);
      assertEquals("uxpw (LLJ_lZMW_", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = SQLUtil.normalize("renameik##m*itkc;z,5", false);
      assertEquals("renameik # # m * itkc ; z, 5", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = SQLUtil.normalize("ZipN.L1f5Uvm7qi1b", true);
      assertEquals("ZipN.L1f5Uvm7qi1b", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = SQLUtil.normalize("}i7bu\"+,", false);
      assertEquals("} i7bu \"+,\"", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      NameSpec nameSpec0 = NameSpec.NEVER;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("l|Af@M(+@P.adQ");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "iso8859_9", false, (String[]) null);
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }
}
