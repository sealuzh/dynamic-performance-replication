/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 06 07:09:24 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-592));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-744), "Synthetic", "Synthetic", "", "");
      ByteVector byteVector0 = new ByteVector();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "hD;T%@,";
      stringArray0[1] = "yXTD/pF";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "Uv";
      stringArray0[5] = "Synthetic";
      stringArray0[6] = "Synthetic";
      stringArray0[7] = "yXTD/pF";
      stringArray0[8] = "n:Q/#rw&E-68Yh3e";
      classWriter0.visit(49, 49, "yXTD/pF", "hD;T%@,", "", stringArray0);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-609));
      classWriter0.index = (-609);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 16777227, "", "", "", "");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-600));
      classWriter0.visit((-342), (-342), "m!~qH", "m!~qH", "m!~qH", (String[]) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-600), "b54?>fpnx '$Le", "m!~qH", "The FileFilter must not be9nuel", "b54?>fpnx '$Le");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-600));
      classWriter0.index = (-600);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "ro3", "ro3", "ro3", "ro3");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-581));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-581), "", "", "", "");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "@q", "@q", "@q", "@q");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(188);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 188, "go", "go", "go", "go");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-592));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", "", "");
      ByteVector byteVector0 = new ByteVector(1);
      byteVector0.length = (-592);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter((ClassWriter) null, (-1910), "", "", "", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-31));
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 2, "", "", "", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.length = (-408);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 2, "org.apache.commons.io.filefilter.DirectoryFileFilter", "+h LotN94t", "", "org.apache.commons.io.filefilter.DirectoryFileFilter");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      ByteVector byteVector0 = classWriter0.pool;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "org.apache.commons.io.filefilter.DirectoryFileFilter", "+h LotN94t", "", "org.apache.commons.io.filefilter.DirectoryFileFilter");
      Attribute attribute0 = new Attribute("wheel.asm.FieldWriter");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      ByteVector byteVector0 = classWriter0.pool;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "org.apache.commons.io.filefilter.DirectoryFileFilter", "+h LotN94t", "", "org.apache.commons.io.filefilter.DirectoryFileFilter");
      fieldWriter0.visitAnnotation("org.apache.commons.io.filefilter.DirectoryFileFilter", false);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      ByteVector byteVector0 = classWriter0.pool;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "org.apache.commons.io.filefilter.DirectoryFileFilter", "+h LotN94t", "", "org.apache.commons.io.filefilter.DirectoryFileFilter");
      fieldWriter0.visitAnnotation("R}_d<!H~JCmF.+}~0<", true);
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      ByteVector byteVector0 = classWriter0.pool;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 40, "R}_d<!H~JCmF.+}~0<", "Synthetic", (String) null, "Synthetic");
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-600));
      classWriter0.visit((-342), (-342), "m!~qH", "m!~qH", "m!~qH", (String[]) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-600), "b54?>fpnx '$Le", "m!~qH", "The FileFilter must not be9nuel", "b54?>fpnx '$Le");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-600));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-600), "b54?>fpnx '$Le", "m!~qH", "The FileFilter must not be9nuel", "b54?>fpnx '$Le");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1), "-]t", "R}_><!H~JmF.+}0<", "-]t", (Object) null);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-600));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "ro3", "ro3", "ro3", "ro3");
      Attribute attribute0 = new Attribute("ro3");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-600));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Runti5eInvisibleAnnotations", "Runti5eInvisibleAnnotations", "Runti5eInvisibleAnnotations", "Runti5eInvisibleAnnotations");
      fieldWriter0.visitAnnotation("Runti5eInvisibleAnnotations", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-600));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "ro3", "ro3", "ro3", "ro3");
      fieldWriter0.visitAnnotation("t9KF2oP|hau", true);
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "&TrlI+JCi86w";
      stringArray0[1] = "&TrlI+JCi86w";
      stringArray0[2] = "&TrlI+JCi86w";
      stringArray0[3] = "Signature";
      stringArray0[4] = "-]t";
      stringArray0[5] = "-]t";
      stringArray0[6] = "-]t";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1), "-]t", "R}_><!H~JmF.+}0<", "-]t", (Object) null);
      classWriter0.visit(49, 49, "boolean", "", "ConstantValue", stringArray0);
      int int0 = fieldWriter0.getSize();
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-600));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-600), "b54?>fpnx '$Le", "m!~qH", "The FileFilter must not be9nuel", "b54?>fpnx '$Le");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1129), "-]t", "R}_d<!H~JCmF.+}~0<", "-]t", (Object) null);
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("", false);
      assertNotNull(annotationVisitor0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "org.apache.commons.io.filefilter.DirectoryFileFilter", "+h LotN94t", (String) null, "org.apache.commons.io.filefilter.DirectoryFileFilter");
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1129), "RuntimeVisibleAnnotations", "R}_d<!H~JCmF.+}~0<", "RuntimeVisibleAnnotations", (Object) null);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 225, "", "M5_?ha4L$]", "RuntimeVisibleAnnotations", "RuntimeVisibleAnnotations");
      assertFalse(fieldWriter1.equals((Object)fieldWriter0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1), "-]t", "R}_><!H~JmF.+}0<", "-]t", (Object) null);
      fieldWriter0.visitEnd();
  }
}
