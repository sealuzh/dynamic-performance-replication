/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 13:01:05 GMT 2018
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CCSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceMatrixHadamardProduct;
import org.la4j.operation.ooplace.OoPlaceVectorsSubtraction;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CCSMatrix_ESTest extends CCSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        CCSMatrix.fromMatrixMarket("");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(0, 0);
      cCSMatrix0.columnMajorIterator();
      cCSMatrix0.columnMajorIterator();
      int int1 = 0;
      int int2 = 0;
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(0, 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      // Undeclared exception!
      try { 
        cCSMatrix1.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1177, 1177);
      int[] intArray0 = new int[2];
      intArray0[0] = 1177;
      intArray0[1] = 1177;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '1177' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-1140);
      MockRandom mockRandom0 = new MockRandom((-1140));
      // Undeclared exception!
      try { 
        CCSMatrix.random(17, (-1140), Double.POSITIVE_INFINITY, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1;
      int int1 = 8;
      MockRandom mockRandom0 = new MockRandom(8);
      // Undeclared exception!
      try { 
        CCSMatrix.random(1, 8, (-1.0), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-4091.7270490365268);
      doubleArray2[1] = (-2412.275);
      doubleArray2[2] = 1.0;
      doubleArray2[3] = 1331.73457815976;
      doubleArray2[4] = (-4451.80000255);
      doubleArray2[5] = (-2108.2);
      doubleArray2[6] = Double.POSITIVE_INFINITY;
      doubleArray2[7] = 1942.65031582152;
      doubleArray2[8] = (-1253.10253458);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 1331.73457815976;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = Double.POSITIVE_INFINITY;
      doubleArray4[1] = Double.POSITIVE_INFINITY;
      doubleArray4[2] = (-4451.80000255);
      doubleArray4[3] = 1.0;
      doubleArray4[4] = 1331.73457815976;
      doubleArray4[5] = 1942.65031582152;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (-2108.2);
      doubleArray5[1] = 4616.826611628937;
      doubleArray5[2] = 1331.73457815976;
      doubleArray5[3] = (-4091.7270490365268);
      doubleArray5[4] = 1.0;
      doubleArray5[5] = (-4451.80000255);
      doubleArray5[6] = (-4451.80000255);
      doubleArray5[7] = Double.POSITIVE_INFINITY;
      doubleArray0[4] = doubleArray5;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      cCSMatrix0.iteratorOrNonZeroColumns();
      assertEquals(5, cCSMatrix0.rows());
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[8][3];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = Double.NEGATIVE_INFINITY;
      doubleArray2[3] = 591.60131;
      doubleArray2[4] = (-556.9706);
      doubleArray2[5] = 100.0;
      doubleArray2[6] = (-237.9);
      doubleArray2[7] = 865.5238877999537;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-237.9);
      doubleArray3[2] = (-1698.900007166);
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray3[5] = (-556.9706);
      doubleArray3[6] = 865.5238877999537;
      doubleArray3[7] = 0.0;
      doubleArray3[8] = 591.60131;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (-237.9);
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = Double.NEGATIVE_INFINITY;
      doubleArray4[5] = 1121.69518598735;
      doubleArray4[6] = (-1698.900007166);
      doubleArray4[7] = (-1236.409029479678);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 591.60131;
      doubleArray5[2] = 865.5238877999537;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = 591.60131;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 1121.69518598735;
      doubleArray6[3] = (-1698.900007166);
      doubleArray6[4] = Double.NEGATIVE_INFINITY;
      doubleArray6[5] = 591.60131;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 136.66571919132;
      doubleArray7[1] = 591.60131;
      doubleArray7[2] = Double.NEGATIVE_INFINITY;
      doubleArray7[3] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      doubleArray8[0] = (-556.9706);
      doubleArray8[1] = 100.0;
      doubleArray8[2] = 865.5238877999537;
      doubleArray8[3] = (-1698.900007166);
      doubleArray8[4] = (-2352.93789672);
      doubleArray8[5] = 591.60131;
      doubleArray0[7] = doubleArray8;
      CCSMatrix cCSMatrix0 = CCSMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        cCSMatrix0.getOrElse(1, 1, 0.0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(3, 3, 3);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        cCSMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.ColumnMajorSparseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(446, 446);
      cCSMatrix0.copyOfColumns(446);
      cCSMatrix0.rotate();
      int int0 = (-2617);
      int int1 = 0;
      double[] doubleArray0 = null;
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(int0, int1, doubleArray0);
      int int2 = 48;
      int int3 = 2148;
      CCSMatrix.zero(int2, int0, int3);
      cCSMatrix1.iteratorOfColumn(int0);
      cCSMatrix1.blankOfShape(int0, int0);
      int int4 = (-4056);
      cCSMatrix0.iteratorOfColumn(int4);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.multiplyByItsTranspose();
      CompressedVector compressedVector0 = (CompressedVector)cCSMatrix0.getRow(1383);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.getRow(933);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1, 2139.2);
      assertEquals(2139.2, cCSMatrix1.max(), 0.01);
      assertEquals(1, cCSMatrix1.cardinality());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix0.transformColumn(16, vectorFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix0.blankOfShape(2, 1);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 16;
      doubleArray0[1] = (double) 16;
      doubleArray0[2] = (double) 16;
      // Undeclared exception!
      try { 
        CCSMatrix.from1DArray(16, 16, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 2);
      cCSMatrix0.shuffle();
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2856.776366065;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 2340.5384655;
      doubleArray1[4] = 3801.992652707;
      doubleArray1[5] = 1861.611927;
      doubleArray1[6] = (-1.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 3801.992652707;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-1.0);
      doubleArray3[1] = 1861.611927;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-2028.43);
      doubleArray3[4] = 1633.9282;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 3801.992652707;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 2856.776366065;
      doubleArray4[3] = Double.POSITIVE_INFINITY;
      doubleArray4[4] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (-2028.43);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = (-2028.43);
      doubleArray5[3] = 2340.5384655;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (-1.0);
      doubleArray6[2] = 1633.9282;
      doubleArray6[3] = 1633.9282;
      doubleArray6[4] = Double.POSITIVE_INFINITY;
      doubleArray6[5] = 2856.776366065;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[4];
      doubleArray7[0] = 3801.992652707;
      doubleArray7[1] = 1861.611927;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 852.4530177227;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      doubleArray8[0] = 2340.5384655;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[0];
      doubleArray0[8] = doubleArray9;
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1177, 1177);
      boolean boolean0 = cCSMatrix0.nonZeroAt(37, 37);
      assertFalse(boolean0);
      
      double double0 = cCSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      
      cCSMatrix0.getRow(37);
      assertEquals(0.0, cCSMatrix0.min(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[4];
      double double0 = 998.47509954;
      doubleArray1[0] = 998.47509954;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = Double.POSITIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      // Undeclared exception!
      try { 
        CCSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(10);
      // Undeclared exception!
      try { 
        cCSMatrix0.getColumn(10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 2, 0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      // Undeclared exception!
      try { 
        cCSMatrix0.eachInColumn(2, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix0 = CCSMatrix.fromCSV("");
      assertEquals(0, cCSMatrix0.columns());
      assertEquals(0, cCSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      assertEquals(1.0, cCSMatrix0.density(), 0.01);
      
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(1, 1, 1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix1.update(matrixFunction0);
      assertFalse(cCSMatrix1.equals((Object)cCSMatrix0));
      assertEquals(0.0, cCSMatrix1.density(), 0.01);
      assertEquals(1, cCSMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.product();
      int int0 = 6013;
      // Undeclared exception!
      try { 
        cCSMatrix0.nonZeroIteratorOfColumn(6013);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6013
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$4", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.setAll(Double.POSITIVE_INFINITY);
      assertEquals(Double.NaN, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.setAll(0.0);
      assertEquals(0, cCSMatrix0.cardinality());
      
      CCSMatrix.zero(0, 0);
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      CCSMatrix cCSMatrix1 = CCSMatrix.from2DArray(doubleArray0);
      assertEquals(1, cCSMatrix1.rows());
      assertEquals(9, cCSMatrix1.columns());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 0);
      cCSMatrix0.mkString("Unknown field type: ", "g<'+-H");
      Matrix matrix0 = cCSMatrix0.copyOfShape(0, 2);
      assertEquals(2, matrix0.columns());
      assertEquals(0, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)55;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2549);
      cCSMatrix0.copyOfShape((byte)55, 1221);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1459, 1459);
      cCSMatrix0.copyOfRows(3);
      cCSMatrix0.minInColumn(414);
      cCSMatrix0.nonZeroColumnMajorIterator();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 66.4;
      int int0 = 727;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(727, 1184);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(2, vectorProcedure0);
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(1206, 1206, doubleArray0);
      cCSMatrix1.euclideanNorm();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)4;
      byteArray0[0] = byte0;
      byte byte1 = (byte)13;
      byteArray0[1] = byte1;
      byte byte2 = (byte)23;
      byteArray0[2] = byte2;
      CCSMatrix cCSMatrix2 = CCSMatrix.fromBinary(byteArray0);
      int int1 = (-390);
      int int2 = 309;
      cCSMatrix2.maxInColumn(int2);
      int int3 = 5;
      cCSMatrix2.iteratorOfColumn(int3);
      int int4 = 0;
      int int5 = 2;
      int int6 = 1209;
      int[] intArray0 = null;
      CCSMatrix cCSMatrix3 = new CCSMatrix(int1, int5, int6, doubleArray0, intArray0, intArray0);
      int int7 = 1511;
      cCSMatrix3.nonZeroAt(int7, int4);
      String string0 = "*y\"8Aq\"CgGw<t'8N/[0";
      CCSMatrix.fromCSV(string0);
      cCSMatrix1.nonZeroAt(int0, byteArray0[0]);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2637, 2.0);
      cCSMatrix0.eachInColumn(695, (VectorProcedure) null);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      int int1 = 526;
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 526);
      cCSMatrix0.manhattanNorm();
      cCSMatrix0.toBinary();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2676.09306171389);
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(0, 526, doubleArray0);
      int int2 = 4;
      int int3 = 2594;
      cCSMatrix1.copyOfShape(2594, 526);
      int int4 = Integer.MAX_VALUE;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachInColumn(0, vectorProcedure0);
      int int5 = (-509);
      cCSMatrix0.maxInColumn(526);
      int int6 = 6103;
      int int7 = 1217;
      cCSMatrix0.set(int1, int7, int6);
      int[] intArray0 = new int[7];
      intArray0[0] = int1;
      intArray0[1] = int5;
      intArray0[2] = int6;
      intArray0[3] = int3;
      intArray0[4] = int4;
      intArray0[5] = int0;
      intArray0[6] = int2;
      cCSMatrix1.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(0);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.copyOfShape(0, 17);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.updateColumn(17, vectorFunction0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix1.eachNonZeroInColumn(17, vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      int[] intArray0 = new int[3];
      cCSMatrix0.setAll(1616.7);
      int int0 = 0;
      CCSMatrix.zero(0, 0);
      int int1 = (-864);
      int int2 = 1600;
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.zero((-864), (-864), (-864));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -864x-864
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix0.toBinary();
      cCSMatrix0.getRow((-1));
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cCSMatrix1.eachInColumn((-1), vectorProcedure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      // Undeclared exception!
      try { 
        cCSMatrix1.blankOfShape((-872), 151);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -872x151
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.multiplyByItsTranspose();
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      Matrix matrix0 = cCSMatrix0.transformRow(13, vectorFunction0);
      CCSMatrix cCSMatrix1 = new CCSMatrix();
      assertTrue(cCSMatrix1.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1459, 1459);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      cCSMatrix0.minInColumn(414);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)75;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(1, (int) (byte)75, (int) (byte)6);
      cCSMatrix0.iteratorOfColumn((byte)75);
      cCSMatrix0.blankOfShape((byte)6, 3);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
      // Undeclared exception!
      try { 
        cCSMatrix0.iteratorOfColumn(520);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 520
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix$5", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 2, 0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-1431655764);
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '-1431655764' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cCSMatrix1.foldNonZeroInRow(8, vectorAccumulator0);
      cCSMatrix1.iteratorOrNonZeroColumns();
      assertEquals(0, cCSMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(5, 5, 5);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      double double0 = cCSMatrix0.min();
      assertEquals(5, cCSMatrix0.columns());
      assertEquals(5, cCSMatrix0.rows());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.determinant();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      double double0 = cCSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-6);
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CCSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1849.9006019);
      int[] intArray0 = new int[0];
      CCSMatrix cCSMatrix0 = new CCSMatrix(0, 0, 0, doubleArray0, intArray0, intArray0);
      SparseMatrix.fromCSV("");
      MatrixFactory<CCSMatrix> matrixFactory0 = (MatrixFactory<CCSMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(cCSMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      cCSMatrix0.to(matrixFactory0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte)33;
      byteArray0[6] = (byte) (-128);
      // Undeclared exception!
      try { 
        CCSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      Matrix matrix0 = cCSMatrix0.copyOfRows(1419);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      OoPlaceMatrixHadamardProduct ooPlaceMatrixHadamardProduct0 = new OoPlaceMatrixHadamardProduct();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(674, 674, 674);
      Matrix matrix0 = ooPlaceMatrixHadamardProduct0.applySymmetric(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, matrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2066, 2066);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.updateAt(700, 700, matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 1177;
      CCSMatrix cCSMatrix0 = new CCSMatrix(1177, 1177);
      double double0 = cCSMatrix0.determinant();
      String string0 = "v";
      CCSMatrix cCSMatrix1 = CCSMatrix.fromMatrixMarket(string0);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.QR;
      cCSMatrix1.withDecompositor(linearAlgebra_DecompositorFactory0);
      int int1 = 13;
      double[] doubleArray0 = new double[4];
      double double1 = 1.0;
      doubleArray0[0] = double1;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = double0;
      CCSMatrix.from1DArray(int0, int1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(9, 9, 9);
      cCSMatrix0.maxInColumn(3);
      // Undeclared exception!
      try { 
        cCSMatrix0.copyOfShape((-257), 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -257x5
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 2, 0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero((MatrixProcedure) null);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '3' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(9, 9, 9);
      int int0 = 3;
      cCSMatrix0.maxInColumn(3);
      // Undeclared exception!
      try { 
        CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '10' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.max();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        ColumnMajorSparseMatrix.random((-1), (-4940), 0.0, (Random) mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SparseMatrix sparseMatrix0 = SparseMatrix.identity(2007);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[2] = (double) 2007;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 2007;
      doubleArray0[6] = (double) 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.from1DArray(0, 1, doubleArray0);
      Matrix matrix0 = cCSMatrix0.shuffle();
      Matrix matrix1 = cCSMatrix0.blankOfRows(2007);
      CCSMatrix.block(sparseMatrix0, matrix0, sparseMatrix0, matrix1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1458, 1458);
      double double0 = new Integer(414);
      cCSMatrix0.max();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 2, 0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.max();
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.min();
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(0, 0, 0);
      cCSMatrix1.rotate();
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(4L);
      byte[] byteArray0 = new byte[0];
      mockRandom0.nextBytes(byteArray0);
      CCSMatrix.randomSymmetric(0, (-2172.32636), (Random) mockRandom0);
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn(16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      Matrix matrix0 = cCSMatrix0.blankOfShape(1, 1);
      assertEquals(1, matrix0.columns());
      
      double double0 = cCSMatrix0.min();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, cCSMatrix0.cardinality());
      assertFalse(cCSMatrix0.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      MockRandom mockRandom0 = new MockRandom((-377L));
      CCSMatrix.identity((byte)55);
      CCSMatrix cCSMatrix1 = CCSMatrix.diagonal(1221, (-377L));
      cCSMatrix1.copyOfShape(1221, (byte)55);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1849.9006019);
      SparseMatrix sparseMatrix0 = SparseMatrix.fromCSV("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero((int) (byte)4, (int) (byte)48, (int) (byte)33);
      LinearAlgebra.DecompositorFactory linearAlgebra_DecompositorFactory0 = LinearAlgebra.DecompositorFactory.SVD;
      cCSMatrix0.withDecompositor(linearAlgebra_DecompositorFactory0);
      cCSMatrix0.setAll((-5609.71));
      // Undeclared exception!
      try { 
        CCSMatrix.block(sparseMatrix0, sparseMatrix0, cCSMatrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(27, 583);
      cCSMatrix0.setAll(4768.13);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CCSMatrix.identity(2);
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(59, 2, 2);
      // Undeclared exception!
      try { 
        cCSMatrix0.euclideanNorm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 67.71863185654931;
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(727, 1184);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(2, vectorProcedure0);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(1206, 2);
      cCSMatrix1.euclideanNorm();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)4;
      byteArray0[0] = byte0;
      byte byte1 = (byte)13;
      byteArray0[1] = byte1;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(727, 727);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(2, vectorProcedure0);
      CCSMatrix cCSMatrix1 = CCSMatrix.from1DArray(1206, 1206, doubleArray0);
      cCSMatrix1.euclideanNorm();
      byte[] byteArray0 = new byte[3];
      cCSMatrix1.max();
      int int0 = (-1429);
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachInColumn(int0, vectorProcedure1);
      byte byte0 = (byte)4;
      byteArray0[0] = byte0;
      byte byte1 = (byte)13;
      byteArray0[1] = byte1;
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.eachNonZero(matrixProcedure0);
      cCSMatrix0.min();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 2;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 2);
      cCSMatrix0.getRow(8);
      int int1 = (-1141);
      // Undeclared exception!
      try { 
        cCSMatrix0.minInColumn((-1141));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1141
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 2, 0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      cCSMatrix0.max();
      cCSMatrix0.iteratorOrNonZeroColumns();
      cCSMatrix0.min();
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(0, 0, 0);
      cCSMatrix1.rotate();
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MockRandom mockRandom0 = new MockRandom(4L);
      cCSMatrix0.getRow((-872));
      assertEquals(2.0, cCSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 1902;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      Matrix matrix0 = cCSMatrix0.removeLastRow();
      // Undeclared exception!
      try { 
        CCSMatrix.block(matrix0, matrix0, matrix0, cCSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.determinant();
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      CCSMatrix cCSMatrix1 = new CCSMatrix(983, 983, 983);
      CCSMatrix cCSMatrix2 = CCSMatrix.zero(682, 983, 682);
      cCSMatrix2.copyOfShape(983, 682);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(2386, 2386);
      int[] intArray0 = new int[4];
      intArray0[0] = 6;
      intArray0[1] = 6;
      intArray0[2] = 2386;
      intArray0[3] = 6;
      cCSMatrix1.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      // Undeclared exception!
      try { 
        cCSMatrix0.eachNonZero((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(2, 2, 0);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2, (-1.0), (-671.50653585), (double)2).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      CCSMatrix cCSMatrix1 = (CCSMatrix)cCSMatrix0.add((Matrix) cCSMatrix0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix1.eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        cCSMatrix0.select((int[]) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(1177, 1177);
      cCSMatrix0.nonZeroAt(37, 37);
      cCSMatrix0.min();
      cCSMatrix0.minInColumn(37);
      MockRandom mockRandom0 = new MockRandom(37);
      CCSMatrix.random(1177, 1177, 0.0, (Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(44);
      cCSMatrix0.toRowVector();
      CCSMatrix cCSMatrix1 = new CCSMatrix(44, 44, 44);
      cCSMatrix0.determinant();
      int int0 = 48;
      cCSMatrix0.minInColumn(int0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = 44;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(44);
      int int1 = 1;
      int int2 = 4;
      cCSMatrix0.nonZeroAt(1, 4);
      double double0 = cCSMatrix0.min();
      int int3 = 1197;
      double double1 = cCSMatrix0.minInColumn(1197);
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) int1;
      doubleArray1[1] = (double) int0;
      doubleArray1[2] = (double) int0;
      doubleArray1[3] = (double) int0;
      doubleArray1[4] = double1;
      doubleArray1[5] = (double) int3;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) int1;
      doubleArray2[1] = (double) int1;
      doubleArray2[2] = (double) int0;
      doubleArray2[3] = (double) int3;
      doubleArray2[4] = (double) int0;
      doubleArray2[5] = double0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) int1;
      doubleArray3[1] = (double) int2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (double) int0;
      doubleArray4[1] = (double) int1;
      doubleArray4[2] = (double) int1;
      doubleArray0[3] = doubleArray4;
      CCSMatrix.from2DArray(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      int int0 = 1;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      CCSMatrix cCSMatrix1 = CCSMatrix.block(cCSMatrix0, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      cCSMatrix0.blankOfShape(1, 1);
      cCSMatrix0.insert((Matrix) cCSMatrix1, 1, 1);
      // Undeclared exception!
      try { 
        CCSMatrix.fromCSV("m9YPd&Na^PPP i`B");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1459, 1459);
      cCSMatrix0.minInColumn(414);
      int[] intArray0 = new int[7];
      intArray0[0] = 1459;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.transformRow(1, vectorFunction0);
      intArray0[1] = 414;
      intArray0[2] = 1459;
      intArray0[3] = 1459;
      intArray0[4] = 1459;
      intArray0[5] = 1459;
      intArray0[6] = 414;
      cCSMatrix0.select(intArray0, intArray0);
      String string0 = "";
      CCSMatrix.fromCSV(string0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = 1459;
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1459, 1459);
      int int1 = 414;
      cCSMatrix0.minInColumn(414);
      int[] intArray0 = new int[7];
      intArray0[0] = 1459;
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, (-2151.4575637), (-2151.4575637), (double)1, (double)1459).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      Matrix matrix0 = cCSMatrix0.transformRow(1, vectorFunction0);
      intArray0[1] = int1;
      intArray0[2] = int0;
      intArray0[3] = int0;
      intArray0[4] = int0;
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      matrix0.update(matrixFunction0);
      matrix0.max();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(9);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cCSMatrix0.each(matrixProcedure0);
      assertEquals(9, cCSMatrix0.rows());
      assertEquals(1.0, cCSMatrix0.max(), 0.01);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1459, 1459);
      int[] intArray0 = new int[7];
      intArray0[0] = 414;
      intArray0[1] = 13;
      intArray0[2] = 414;
      intArray0[3] = 414;
      intArray0[4] = 414;
      intArray0[5] = 414;
      intArray0[6] = 414;
      cCSMatrix0.select(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(18, 18);
      cCSMatrix0.getRow(1545);
      // Undeclared exception!
      try { 
        CCSMatrix.zero(48, (-414));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 48x-414
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(32, 32);
      double double0 = cCSMatrix0.maxInColumn(9);
      assertEquals(32.0, double0, 0.01);
      assertEquals(32, cCSMatrix0.cardinality());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(117, 2, 2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(4.9E-324, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(1);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      assertEquals(0.0, cCSMatrix0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(1459, 1459);
      OoPlaceVectorsSubtraction ooPlaceVectorsSubtraction0 = new OoPlaceVectorsSubtraction();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1306.0), 1.0, 3844.57258544621, (-607.8013457179), 2662.961911157).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      DenseVector.fromCollection(linkedList0);
      MatrixFunction matrixFunction1 = null;
      int int0 = 0;
      CCSMatrix cCSMatrix1 = CCSMatrix.identity(int0);
      cCSMatrix1.update(matrixFunction1);
      int int1 = 9969;
      Integer integer0 = new Integer(int1);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix();
      cCSMatrix0.toString();
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)48;
      CCSMatrix cCSMatrix1 = CCSMatrix.fromBinary(byteArray0);
      CCSMatrix cCSMatrix2 = CCSMatrix.block(cCSMatrix1, cCSMatrix0, cCSMatrix0, cCSMatrix0);
      assertNotSame(cCSMatrix2, cCSMatrix1);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(2, 2);
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.SMART;
      cCSMatrix0.withInverter(linearAlgebra_InverterFactory0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(1, vectorFunction0);
      // Undeclared exception!
      try { 
        cCSMatrix0.update((MatrixFunction) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.zero(20, 20, 20);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(8, vectorFunction0);
      double[][] doubleArray0 = new double[0][6];
      Matrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 601;
      intArray0[1] = 3248;
      intArray0[2] = 3248;
      intArray0[3] = 8;
      intArray0[4] = 8;
      intArray0[5] = 8;
      intArray0[6] = 20;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '601' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      int int0 = 32;
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(32);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = cCSMatrix0.toDenseMatrix();
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(32);
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      ooPlaceMatricesMultiplication0.apply(rowMajorSparseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      cCSMatrix0.equals(matrix0, 2845.432731450839);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SparseVector sparseVector0 = SparseVector.fromCollection(linkedList0);
      matrix0.setColumn(32, (Vector) sparseVector0);
      int int1 = 2;
      cCSMatrix0.getRow(int1);
      cCSMatrix0.getRow(int0);
      CCSMatrix cCSMatrix1 = CCSMatrix.zero(int1, int0);
      CCSMatrix cCSMatrix2 = CCSMatrix.block(denseMatrix0, denseMatrix0, cCSMatrix1, matrix0);
      int int2 = 552;
      double double0 = 1.0;
      cCSMatrix2.getOrElse(int2, int0, double0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      CCSMatrix cCSMatrix0 = new CCSMatrix(2, 2);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      double[][] doubleArray0 = new double[0][7];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      ooPlaceMatricesMultiplication0.apply(denseMatrix0, (ColumnMajorSparseMatrix) cCSMatrix0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("R8Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(20);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((-1297.65), (double)3248, (double)3248, (-294.0), 100.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      cCSMatrix0.updateColumn(8, vectorFunction0);
      double[][] doubleArray0 = new double[0][6];
      Matrix.from2DArray(doubleArray0);
      int[] intArray0 = new int[9];
      intArray0[0] = 601;
      intArray0[1] = 3248;
      intArray0[2] = 3248;
      intArray0[3] = 3248;
      intArray0[4] = 8;
      cCSMatrix0.iteratorOrNonZeroColumns();
      intArray0[5] = 8;
      intArray0[6] = 20;
      // Undeclared exception!
      try { 
        cCSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '601' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      CCSMatrix.identity(32);
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      CCSMatrix cCSMatrix0 = CCSMatrix.diagonal(32, 32);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)32, (double)32, 516.113926565, 516.113926565, (double)32).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseVector denseVector0 = DenseVector.fromCSV("");
      Matrix matrix0 = denseVector0.toRowMatrix();
      CCSMatrix cCSMatrix0 = CCSMatrix.block(matrix0, matrix0, matrix0, matrix0);
      // Undeclared exception!
      try { 
        cCSMatrix0.maxInColumn((-559));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -559
         //
         verifyException("org.la4j.matrix.sparse.CCSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CCSMatrix cCSMatrix0 = CCSMatrix.identity(2);
      cCSMatrix0.nonZeroRowMajorIterator();
      Matrix.zero(1522, 2);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)2, (double)2, (double)2, 2286.334493270375).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cCSMatrix0.update(matrixFunction0);
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 486;
      cCSMatrix0.minInColumn(1);
  }
}
