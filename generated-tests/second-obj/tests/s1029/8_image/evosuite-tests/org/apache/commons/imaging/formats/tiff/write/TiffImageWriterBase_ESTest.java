/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:36:49 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff.write;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.color.ICC_Profile;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Hashtable;
import java.util.List;
import java.util.Stack;
import java.util.regex.Pattern;
import javax.swing.DebugGraphics;
import javax.swing.JRootPane;
import javax.swing.plaf.basic.BasicOptionPaneUI;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultCaret;
import javax.swing.text.StyleConstants;
import org.apache.commons.imaging.common.BinaryOutputStream;
import org.apache.commons.imaging.common.ImageBuilder;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossy;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputDirectory;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputSummary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffImageWriterBase_ESTest extends TiffImageWriterBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet(byteOrder0);
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No directories.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy(tiffOutputSet0.byteOrder);
      tiffOutputSet0.getOrCreateGPSDirectory();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      TiffOutputSummary tiffOutputSummary1 = tiffImageWriterLossy1.validateDirectories(tiffOutputSet0);
      assertFalse(tiffOutputSummary1.equals((Object)tiffOutputSummary0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.dump();
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy(tiffOutputSet0.byteOrder);
      tiffOutputSet0.addGPSDirectory();
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing root directory.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet((ByteOrder) null);
      tiffOutputSet0.setGPSInDegrees(49, (-3286.5061899354732));
      int int0 = BasicOptionPaneUI.MinimumWidth;
      tiffOutputSet0.getOrCreateRootDirectory();
      TiffOutputSet tiffOutputSet1 = new TiffOutputSet((ByteOrder) null);
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      assertNotNull(tiffOutputSummary0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet((ByteOrder) null);
      tiffOutputSet0.addInteroperabilityDirectory();
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy((ByteOrder) null);
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy1.validateDirectories(tiffOutputSet0);
      int int0 = Pattern.CANON_EQ;
      TiffOutputSummary tiffOutputSummary1 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      assertFalse(tiffOutputSummary1.equals((Object)tiffOutputSummary0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      ImageBuilder imageBuilder0 = new ImageBuilder(75, 75, false);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      MockFile mockFile0 = new MockFile("*w{?ZMvKE_02");
      MockFile mockFile1 = new MockFile("PIXEL_DENSITY", "PIXEL_DENSITY");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      // Undeclared exception!
      tiffImageWriterLossy0.writeImage(bufferedImage0, mockFileOutputStream0, hashtable0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      ImageBuilder imageBuilder0 = new ImageBuilder(49, 49, false);
      imageBuilder0.getBufferedImage();
      MockFile mockFile0 = new MockFile("*w{?ZMvKE_02");
      MockFile mockFile1 = new MockFile("*w{?ZMvKE_02", "*w{?ZMvKE_02");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      hashtable0.put("*w{?ZMvKE_02", mockFile1);
      StyleConstants styleConstants0 = (StyleConstants)AttributeSet.NameAttribute;
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, mockFileOutputStream0, hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: *w{?ZMvKE_02
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ImageBuilder imageBuilder0 = new ImageBuilder(8, 8, true);
      MockFile mockFile0 = new MockFile("cm TNjOx}6{(N6", "cm TNjOx}6{(N6");
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      bufferedImage0.getScaledInstance(8, 10, (-39));
      mockFile0.toURI();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, mockFileOutputStream0, hashtable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      PrintStream printStream0 = DebugGraphics.logStream();
      ImageBuilder imageBuilder0 = new ImageBuilder(8, 8, true);
      BufferedImage bufferedImage0 = imageBuilder0.getBufferedImage();
      bufferedImage0.getScaledInstance(8, 8, 8);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      hashtable0.elements();
      String string0 = "XMP_XML";
      hashtable0.put("XMP_XML", bufferedImage0);
      hashtable0.keys();
      // Undeclared exception!
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, printStream0, hashtable0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.image.BufferedImage cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy((ByteOrder) null);
      PrintStream printStream0 = DebugGraphics.logStream();
      boolean boolean0 = true;
      ImageBuilder imageBuilder0 = new ImageBuilder(8, 8, true);
      BufferedImage bufferedImage0 = new BufferedImage(8, 8, 8);
      bufferedImage0.getScaledInstance(8, 8, 8);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      hashtable0.put("FORMAT", imageBuilder0);
      hashtable0.keys();
      tiffImageWriterLossy0.writeImage(bufferedImage0, printStream0, hashtable0);
      List<FieldType> list0 = FieldType.SHORT_OR_LONG;
      ByteOrder.nativeOrder();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      Stack<TiffOutputDirectory> stack0 = new Stack<TiffOutputDirectory>();
      tiffOutputSet0.getInteroperabilityDirectory();
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(printStream0);
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No directories.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy((ByteOrder) null);
      PrintStream printStream0 = DebugGraphics.logStream();
      ImageBuilder imageBuilder0 = new ImageBuilder(8, 8, true);
      BufferedImage bufferedImage0 = new BufferedImage(8, 8, 8);
      bufferedImage0.getScaledInstance(8, 8, 8);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      hashtable0.put("EXIF", imageBuilder0);
      hashtable0.keys();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, printStream0, hashtable0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.imaging.common.ImageBuilder cannot be cast to org.apache.commons.imaging.formats.tiff.write.TiffOutputSet
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy((ByteOrder) null);
      DebugGraphics.logStream();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet((ByteOrder) null);
      tiffOutputSet0.getOrCreateGPSDirectory();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      tiffOutputSet0.addInteroperabilityDirectory();
      int int0 = ICC_Profile.icSigSpaceACLR;
      TiffImageWriterLossy tiffImageWriterLossy1 = new TiffImageWriterLossy();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy1.validateDirectories(tiffOutputSet0);
      int int1 = DefaultCaret.UPDATE_WHEN_ON_EDT;
      tiffOutputSet0.getOrCreateRootDirectory();
      tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      int int2 = DefaultCaret.UPDATE_WHEN_ON_EDT;
      tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      TiffImageWriterBase.imageDataPaddingLength(342);
      int int3 = ICC_Profile.icSigSpaceACLR;
      TiffImageWriterLossy tiffImageWriterLossy2 = new TiffImageWriterLossy();
      TiffOutputSet tiffOutputSet1 = new TiffOutputSet((ByteOrder) null);
      TiffOutputSet tiffOutputSet2 = new TiffOutputSet((ByteOrder) null);
      TiffOutputSet tiffOutputSet3 = new TiffOutputSet((ByteOrder) null);
      tiffOutputSet3.addDirectory(tiffOutputSummary0.rootDirectory);
      tiffOutputSet3.addInteroperabilityDirectory();
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Output set has GPS Directory Offset field, but no GPS Directory
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }
}
