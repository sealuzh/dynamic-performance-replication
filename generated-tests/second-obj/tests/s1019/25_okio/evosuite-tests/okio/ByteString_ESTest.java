/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:22:36 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSource;
import okio.ByteString;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)14;
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteString byteString0 = new ByteString((byte[]) null);
      byteString0.EMPTY.toAsciiUppercase();
      byteString0.internalArray();
      // Undeclared exception!
      try { 
        byteString0.base64();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Base64", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.base64();
      Pipe pipe0 = new Pipe((byte)78);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteString0.EMPTY.indexOf(byteString1);
      // Undeclared exception!
      try { 
        byteString0.substring((-47));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.substring((int) (byte)0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex(" =mmBWV4<0+~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string:  =mmBWV4<0+~
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-105);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.endsWith(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte) (-105), 544);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)82;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("2};]NF96>t`8lC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: }
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)83;
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.lastIndexOf(byteArray0, (-44));
      assertEquals((-1), int0);
      
      Buffer buffer0 = new Buffer();
      boolean boolean0 = byteString0.equals(buffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("size < 4: ", 4271);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Source source0 = null;
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      ByteString byteString2 = byteString1.sha256();
      assertNotSame(byteString1, byteString2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = byteString0.md5();
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      byte[] byteArray0 = new byte[47];
      Charset.defaultCharset();
      ByteString byteString0 = hashingSource0.hash();
      byteString0.size();
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("MCoOFaPJ`0", (-65));
      // Undeclared exception!
      try { 
        ByteString.decodeHex("MCoOFaPJ`0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: M
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[47];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      int int0 = byteString1.lastIndexOf(byteString0, (int) (byte)0);
      assertEquals(0, int0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = byteString1.rangeEquals(0, byteArray0, 40, 311);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)40;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JjBziW?AJk0cV%");
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)53;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex("a\"e(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: \"
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("SHA-512", 1931);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-39);
      ByteString byteString0 = ByteString.of(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      // Undeclared exception!
      try { 
        ByteString.decodeHex(":y\"k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: :
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      HashingSource.md5(hashingSource1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha256((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      Buffer buffer2 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      byte[] byteArray0 = buffer_UnsafeCursor0.data;
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        byteString0.EMPTY.hmacSha512((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-107);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64Url();
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte)61, (int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte)32;
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe((byte)32);
      Sink sink0 = pipe0.sink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      byteString0.write(buffer0);
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("byteString == null");
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte)53;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.toAsciiLowercase();
      assertSame(byteString2, byteString1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "size < ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-97);
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (int) (byte) (-97), 2140);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=-97 byteCount=2140
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = ByteString.decodeHex("");
      boolean boolean0 = byteString0.startsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = ByteString.codePointIndexToCharIndex("9fhenrgg#", (-3270));
      assertEquals(9, int0);
      
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)34;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertArrayEquals(new byte[] {(byte)34, (byte)89, (byte)89, (byte)34}, byteArray0);
      assertNotSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      byte[] byteArray0 = new byte[7];
      inflaterSource0.timeout();
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-50);
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.readUtf8Line();
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Charset.defaultCharset();
      Charset.defaultCharset();
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = realBufferedSource0.readByteString((long) (byte)0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha1(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      ByteString byteString0 = ByteString.encodeUtf8("");
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      int int0 = byteString0.compareTo(byteString1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)14;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.substring(13, (int) (byte)86);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(4)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteString.read(sequenceInputStream0, 0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      // Undeclared exception!
      try { 
        ByteString.decodeHex("fromIndex < 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: fromIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)35;
      byteArray0[4] = (byte)35;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString.codePointIndexToCharIndex("$>y=Q", (byte)0);
      ByteString.decodeBase64("ko$VsQwCO949");
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      assertEquals(0, byteBuffer0.position());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte byte0 = (byte)49;
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.utf8();
      byteString0.EMPTY.hashCode();
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString0, byteString1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-12);
      ByteString byteString2 = ByteString.of(byteArray0);
      assertFalse(byteString2.equals((Object)byteString1));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      Object object0 = new Object();
      ByteString.decodeHex("");
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("FjAgw)l!/+GS$r,|%{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: j
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)110;
      ByteString byteString0 = ByteString.of(byteArray0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      ByteString byteString1 = ByteString.encodeUtf8("6])cH3Bt;dC8");
      Buffer buffer1 = new Buffer();
      HashingSource.md5(buffer1);
      Buffer buffer2 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byteString0.compareTo(byteString1);
      byte[] byteArray1 = byteString0.toByteArray();
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)38;
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)52;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.toString();
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.indexOf(byteArray0, (int) (byte)38);
      ByteString byteString2 = new ByteString(byteArray0);
      byteString2.compareTo(byteString0);
      // Undeclared exception!
      try { 
        byteString2.substring(52, (int) (byte)38);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(2)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("`:J=<4");
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)0;
      ByteString.of(byteArray0);
      byteString0.toString();
      byteString0.lastIndexOf(byteArray0, (-1960));
      // Undeclared exception!
      try { 
        ByteString.decodeHex("[text=`:J=<4]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: [text=`:J=<4]
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 7, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      Source source0 = hashingSource0.delegate();
      ByteString byteString0 = hashingSource0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      realBufferedSource0.readUtf8Line();
      realBufferedSource0.readByteString();
      String string0 = byteString0.toString();
      assertEquals("[hex=da39a3ee5e6b4b0d3255bfef95601890afd80709]", string0);
      
      byteString0.asByteBuffer();
      HashingSource.sha1(source0);
      ByteString byteString1 = hashingSource0.hash();
      ByteString byteString2 = byteString1.toAsciiLowercase();
      assertFalse(byteString2.equals((Object)byteString0));
      assertTrue(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      GzipSource gzipSource0 = new GzipSource(inflaterSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-105);
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)74;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha512(realBufferedSink0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.hmacSha256(realBufferedSink0.buffer, byteString0);
      ByteString byteString2 = hashingSource0.hash();
      byteString1.indexOf(byteString2);
      Object object0 = new Object();
      byteString2.equals(object0);
      byteString1.base64();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("B9T4tmnElPXpu3ZaJ5vOLqz4BcPZy+HfteKvofo1V286uQcdTFajltZ76TxhhwWH6955hT1xKCrQSYLDzply8A==");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: T
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("tR8$pHw(Qc`");
      Buffer buffer1 = new Buffer();
      ByteString byteString1 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      Object object0 = new Object();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      byteString0.indexOf(byteString1, (-55));
      hashingSource0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byteString1.startsWith(byteArray0);
      Charset charset1 = Charset.defaultCharset();
      charset0.aliases();
      byteString0.string(charset1);
      // Undeclared exception!
      try { 
        byteString0.substring((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("byteCount > Integer.MAX_VALUE: ");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        byteString0.write(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Inflater inflater0 = new Inflater(true);
      byte[] byteArray0 = new byte[7];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      // Undeclared exception!
      try { 
        byteString0.lastIndexOf((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 645;
      ByteString.codePointIndexToCharIndex("s.limit == s.pos", 645);
      ByteString byteString0 = ByteString.encodeUtf8("s.limit == s.pos");
      Buffer buffer0 = new Buffer();
      buffer0.writableSegment(16);
      byteString0.equals(buffer0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString0.endsWith(byteString1);
      ByteString[] byteStringArray0 = new ByteString[1];
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.get(1105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1105
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)62;
      ByteString byteString0 = ByteString.of(byteArray0);
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      ByteString byteString1 = ByteString.encodeUtf8("KE;:jf");
      Buffer buffer1 = new Buffer();
      HashingSource.md5(buffer1);
      Buffer buffer2 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byteString0.compareTo(byteString1);
      byte[] byteArray1 = byteString0.toByteArray();
      assertArrayEquals(new byte[] {(byte)62, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("s.limit == s.pos", 645);
      ByteString byteString0 = ByteString.encodeUtf8("s.limit == s.pos");
      Buffer buffer0 = new Buffer();
      byteString0.equals(buffer0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      // Undeclared exception!
      try { 
        byteString1.substring(645, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)14;
      ByteString byteString0 = new ByteString(byteArray0);
      String string0 = byteString0.toString();
      assertEquals("[hex=eee6eb0e]", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte byte0 = (byte)85;
      ByteString.decodeBase64("timeout < 0: ");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.read(byteArrayInputStream0, (-655));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -655
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.EMPTY.endsWith(byteString0);
      byteString0.toAsciiLowercase();
      byteString0.endsWith(byteArray0);
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ByteString.encodeUtf8("byteString == null");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-91);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      try { 
        ByteString.read(sequenceInputStream1, 77);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("byteString == null");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)93;
      byteString0.EMPTY.sha512();
      byteArray0[2] = (byte)32;
      byteArray0[4] = (byte)93;
      int int1 = byteString0.lastIndexOf(byteArray0);
      assertEquals(18, byteString0.size());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      byte[] byteArray0 = new byte[22];
      byteArray0[21] = (byte)9;
      byteArray0[21] = (byte) (-93);
      byteArray0[2] = (byte)0;
      Charset.defaultCharset();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      ByteString byteString0 = ByteString.decodeHex("");
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      int int1 = byteString1.lastIndexOf(byteString0, (int) (byte)0);
      assertEquals(0, int1);
      
      int int2 = byteString0.compareTo(byteString1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = realBufferedSource0.readByteString();
      String string0 = byteString1.base64Url();
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("", charset0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset charset1 = Charset.defaultCharset();
      String string1 = byteString0.string(charset1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      ByteString byteString0 = ByteString.of(byteArray0);
      byteString0.toString();
      ByteString.decodeBase64("[hex=1400]");
      Inflater inflater0 = new Inflater();
      // Undeclared exception!
      try { 
        byteString0.startsWith((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(1L);
      Object object0 = new Object();
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteBuffer byteBuffer0 = charset0.encode("size < 4: ");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      assertEquals(10, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[47];
      byteArray0[0] = (byte)9;
      byteArray0[21] = (byte)9;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      int int0 = byteString1.lastIndexOf(byteString0, (int) (byte)0);
      assertEquals(0, int0);
      
      boolean boolean0 = byteString0.endsWith(byteArray0);
      Object object0 = new Object();
      boolean boolean1 = byteString1.rangeEquals((int) (byte)0, byteArray0, 1321, (int) (byte)0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource.md5(buffer0);
      ByteString byteString0 = ByteString.decodeBase64("");
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      HashingSource.md5(hashingSource1);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HmacSHA256");
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource.sha1(buffer0);
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 1832);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.base64();
      Pipe pipe0 = new Pipe((byte)64);
      ByteString byteString1 = ByteString.of(byteArray0);
      byteString1.base64Url();
      Object object0 = new Object();
      byteString1.equals(byteString0);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("tR8$pHw(Qc`");
      Buffer buffer1 = new Buffer();
      ByteString byteString1 = new ByteString(byteArray0);
      Charset.defaultCharset();
      Object object0 = new Object();
      boolean boolean0 = byteString0.equals(byteString1);
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      hashingSource0.close();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      boolean boolean1 = byteString1.startsWith(byteArray0);
      assertFalse(boolean1 == boolean0);
      
      byteString0.size();
      String string0 = byteString0.base64();
      assertEquals("dFI4fyRwSHcoUWNg", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Buffer buffer0 = new Buffer();
          HashingSource.md5(buffer0);
          byte[] byteArray0 = new byte[66];
          byteArray0[0] = (byte)9;
          byteArray0[21] = (byte)9;
          byteArray0[3] = (byte)0;
          ByteString byteString0 = new ByteString(byteArray0);
          FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
          byteString0.toString();
          HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
          hashingSink0.hash();
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1556)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor69.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = ByteString.encodeUtf8("+");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      byteString1.hex();
      byteString1.equals(byteString0);
      byteString0.base64Url();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+");
      try { 
        realBufferedSource0.readByteString(1601L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Pipe pipe0 = new Pipe(143L);
      Sink sink0 = pipe0.sink();
      HashingSink hashingSink0 = HashingSink.sha1(sink0);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.asByteBuffer();
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource0.toString();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      // Undeclared exception!
      try { 
        ByteString.encodeString("SHA-256", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)14;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      byteString1.asByteBuffer();
      ByteString byteString2 = byteString1.substring((int) (byte)14);
      assertEquals(6, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.size();
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("s.limit == s.pos");
      Buffer buffer0 = new Buffer();
      byteString0.equals(buffer0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "s.limit == s.pos");
      ByteString byteString2 = ByteString.encodeUtf8("");
      String string0 = byteString0.toString();
      assertEquals("[text=s.limit == s.pos]", string0);
      
      Charset.defaultCharset();
      Charset.defaultCharset();
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString2;
      Options.of(byteStringArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)34;
      ByteString byteString3 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.equals(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      ByteString byteString0 = realBufferedSource1.readByteString();
      HashingSink hashingSink0 = HashingSink.sha512(realBufferedSource1.buffer);
      realBufferedSource1.exhausted();
      ByteString byteString1 = hashingSink0.hash();
      byteString1.toString();
      realBufferedSource0.request(0L);
      ByteString byteString2 = byteString1.toAsciiUppercase();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)61;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[hex=cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e]");
      ByteString byteString3 = ByteString.encodeUtf8("[hex=cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e]");
      ByteString.of(byteArray0);
      byteString0.toString();
      ByteString byteString4 = new ByteString(byteArray0);
      byteString2.lastIndexOf(byteString1, 122);
      Charset charset0 = Charset.defaultCharset();
      byteString4.string(charset0);
      byteString4.sha1();
      byteString3.toString();
      // Undeclared exception!
      try { 
        Charset.forName("=\u0000\u0000\u0000\u0000\u0000\u0000");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // =\u0000\u0000\u0000\u0000\u0000\u0000
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      byte[] byteArray0 = new byte[47];
      byte byte0 = (byte)13;
      byteArray0[0] = (byte)13;
      byteArray0[21] = (byte)13;
      byteArray0[3] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString byteString1 = hashingSource0.hash();
      byteString1.base64Url();
      byteString1.hex();
      ByteString byteString2 = new ByteString(byteArray0);
      ByteString byteString3 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      byteString2.string(charset0);
      byteString1.sha1();
      ByteString byteString4 = new ByteString(byteArray0);
      byteString2.toString();
      byteString4.compareTo(byteString2);
      byteString0.sha256();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
