/*
 * This file was automatically generated by EvoSuite
 * Sun Jul 21 21:41:45 GMT 2019
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.SecantSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondaryEquations;
import org.apache.commons.math3.ode.events.EventFilter;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.events.FilterType;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.LutherIntegrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-274.4543975226);
      doubleArray0[1] = (-274.4543975226);
      doubleArray0[2] = 1.8405243253979117E-8;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-274.4543975226));
      midpointIntegrator0.getEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.8405243253979117E-8, 1.0530616658562386E-20, (-2968.8186089350593), (-274.4543975226));
      BisectionSolver bisectionSolver0 = new BisectionSolver(1017.0305870993506, (-3178.878));
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter((EventHandler) null, filterType0);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) eventFilter0, 1.0530616658562386E-20, 2896.56, 2146799788, (UnivariateSolver) bisectionSolver0);
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 2784, (-1886), (-2968.8186089350593));
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0, 1.0, (-274.4543975226), 1086);
      midpointIntegrator0.addEventHandler((EventHandler) null, 1017.0305870993506, 4.547473508864641E-10, 2, (UnivariateSolver) bracketingNthOrderBrentSolver0);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, midpointIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(5.924290380648597E-224);
      LutherIntegrator lutherIntegrator0 = new LutherIntegrator(2700.964947379);
      lutherIntegrator0.getStepHandlers();
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(215.0);
      LutherIntegrator lutherIntegrator1 = new LutherIntegrator(2985.237273957);
      lutherIntegrator1.getStepHandlers();
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2700.964947379);
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.computeDerivatives((-2233.721105466895), (double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(5.924290380648597E-224);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      eventFilter0.init(2700.964947379, doubleArray0, 5.924290380648597E-224);
      LutherIntegrator lutherIntegrator0 = new LutherIntegrator(5.924290380648597E-224);
      lutherIntegrator0.getStepHandlers();
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(2700.964947379);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      lutherIntegrator0.getStepHandlers();
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.6400018930435181);
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.computeDerivatives(1101.2149934, doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(5.924290380648597E-224);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((EventHandler.Action) null, (EventHandler.Action) null).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      eventFilter0.init(2700.964947379, doubleArray0, 5.924290380648597E-224);
      LutherIntegrator lutherIntegrator0 = new LutherIntegrator(5.924290380648597E-224);
      lutherIntegrator0.getStepHandlers();
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(2700.964947379);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      lutherIntegrator0.getStepHandlers();
      MidpointIntegrator midpointIntegrator2 = new MidpointIntegrator(0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      eventFilter0.eventOccurred(989.479918321173, doubleArray0, false);
      midpointIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 3086.5184203745885, doubleArray0);
      eventFilter0.eventOccurred(3086.5184203745885, doubleArray0, false);
      MidpointIntegrator midpointIntegrator3 = new MidpointIntegrator((-253.436395351591));
      firstOrderConverter0.computeDerivatives((-2603.0), doubleArray0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      midpointIntegrator0.addEventHandler((EventHandler) eventFilter0, 1911.29589166, 1753.8248752715763, 5);
      // Undeclared exception!
      midpointIntegrator2.integrate(expandableStatefulODE0, 765.065);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-0.8139872901742529));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      LutherIntegrator lutherIntegrator0 = new LutherIntegrator((-0.8139872901742529));
      lutherIntegrator0.addStepHandler((StepHandler) null);
      lutherIntegrator0.getStepHandlers();
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(2700.964947379);
      assertEquals(Double.NaN, midpointIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator1.getCurrentStepStart(), 0.01);
      
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-897.6243585528098), 0.0, 0.0, 1802.1832425515195);
      highamHall54Integrator0.getStepHandlers();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.FIRST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(Double.NaN, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(6.07014616741277E-8, (-0.8139872901742529), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(734.84990176, 6.07014616741277E-8, 2597.14, Double.NaN);
      dormandPrince853Integrator0.getOrder();
      assertEquals(Integer.MAX_VALUE, dormandPrince853Integrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-0.8139872901742529));
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      EventFilter eventFilter1 = new EventFilter(eventFilter0, filterType0);
      double double0 = 2700.964947379;
      eventFilter1.init(286.206390743739, doubleArray0, 1.3430213928222656);
      LutherIntegrator lutherIntegrator0 = new LutherIntegrator((-0.8139872901742529));
      lutherIntegrator0.getStepHandlers();
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(286.206390743739);
      lutherIntegrator0.getStepHandlers();
      MidpointIntegrator midpointIntegrator2 = new MidpointIntegrator(2700.964947379);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[0];
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4.94E-321, doubleArray0, Double.POSITIVE_INFINITY, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = \u221E
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(5.924290380648597E-224);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      eventFilter0.init(2700.964947379, doubleArray0, 5.924290380648597E-224);
      LutherIntegrator lutherIntegrator0 = new LutherIntegrator(5.924290380648597E-224);
      lutherIntegrator0.getStepHandlers();
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(2700.964947379);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      lutherIntegrator0.getStepHandlers();
      MidpointIntegrator midpointIntegrator2 = new MidpointIntegrator((-746.25553080492));
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      midpointIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 3086.5184203745885, doubleArray0);
      MidpointIntegrator midpointIntegrator3 = new MidpointIntegrator(0.0);
      firstOrderConverter0.computeDerivatives((-3433.8775887953675), doubleArray0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      midpointIntegrator2.addEventHandler((EventHandler) eventFilter0, 1288.5166924977, (-685.393), 0);
      // Undeclared exception!
      midpointIntegrator1.integrate(expandableStatefulODE0, (double) 0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(5.924290380648597E-224);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(5.924290380648597E-224, 5.924290380648597E-224, 5.924290380648597E-224, 5.924290380648597E-224, (-2062.725)).when(eventHandler0).g(anyDouble() , any(double[].class));
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      eventFilter0.init(2700.964947379, doubleArray0, 5.924290380648597E-224);
      LutherIntegrator lutherIntegrator0 = new LutherIntegrator(5.924290380648597E-224);
      lutherIntegrator0.getStepHandlers();
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(2700.964947379);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      lutherIntegrator0.getStepHandlers();
      MidpointIntegrator midpointIntegrator2 = new MidpointIntegrator((-746.25553080492));
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      firstOrderConverter0.computeDerivatives((-746.25553080492), doubleArray0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EventFilter eventFilter1 = new EventFilter(eventFilter0, filterType0);
      midpointIntegrator2.addEventHandler((EventHandler) eventFilter1, 2700.964947379, 818.626375, 0);
      // Undeclared exception!
      midpointIntegrator2.integrate(expandableStatefulODE0, 939.457050303);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = 71.74958841;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-225.3), 3175.287072689, 71.74958841, Double.NaN);
      highamHall54Integrator0.setSafety(71.74958841);
      double double1 = 3177.392546;
      double double2 = 1287.721;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3177.392546;
      doubleArray0[1] = (-225.3);
      doubleArray0[2] = (-225.3);
      doubleArray0[3] = 1753.82487527158;
      // Undeclared exception!
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) null, 3177.392546, doubleArray0, 1.3480763914637323E214, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1.0));
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType1 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType1);
      EventFilter eventFilter1 = new EventFilter(eventFilter0, filterType0);
      FilterType filterType2 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter2 = new EventFilter(eventFilter1, filterType2);
      midpointIntegrator0.addEventHandler((EventHandler) eventFilter2, 495.2283298, (-3470.2), 1435);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      midpointIntegrator0.setMaxEvaluations(1435);
      firstOrderConverter0.computeDerivatives(4296.11175, doubleArray0, doubleArray0);
      firstOrderConverter0.computeDerivatives((-349.3478534), doubleArray0, doubleArray0);
      firstOrderConverter0.computeDerivatives((-6.933333333333334), doubleArray0, doubleArray0);
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator((-1819.152603));
      midpointIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 150.0, doubleArray0, 0.0, doubleArray0);
      int int0 = midpointIntegrator1.getEvaluations();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(5.924290380648597E-224);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      eventFilter0.init(2700.964947379, doubleArray0, 5.924290380648597E-224);
      LutherIntegrator lutherIntegrator0 = new LutherIntegrator(5.924290380648597E-224);
      lutherIntegrator0.getStepHandlers();
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(2700.964947379);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      lutherIntegrator0.getStepHandlers();
      MidpointIntegrator midpointIntegrator2 = new MidpointIntegrator((-746.25553080492));
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      midpointIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 3086.5184203745885, doubleArray0);
      MidpointIntegrator midpointIntegrator3 = new MidpointIntegrator((-253.436395351591));
      firstOrderConverter0.computeDerivatives(3086.5184203745885, doubleArray0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      midpointIntegrator3.addEventHandler((EventHandler) eventFilter0, (-2141.5833361651485), 2700.964947379, 0);
      // Undeclared exception!
      midpointIntegrator3.integrate(expandableStatefulODE0, (-253.436395351591));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-0.8139872901742529));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      eventFilter0.init(2700.964947379, doubleArray0, (-0.8139872901742529));
      LutherIntegrator lutherIntegrator0 = new LutherIntegrator((-0.8139872901742529));
      lutherIntegrator0.getStepHandlers();
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(2700.964947379);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      Collection<StepHandler> collection0 = new LinkedList<StepHandler>();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      firstOrderConverter0.computeDerivatives((-2216.4783059435), doubleArray0, doubleArray0);
      MidpointIntegrator midpointIntegrator2 = new MidpointIntegrator(860.0);
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-746.25553080492), doubleArray0, (-2500.0804060765), doubleArray0);
      MidpointIntegrator midpointIntegrator3 = new MidpointIntegrator(4.547473508864641E-10);
      assertEquals(Double.NaN, midpointIntegrator3.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator3.getCurrentSignedStepsize(), 0.01);
      
      midpointIntegrator0.getEvaluations();
      assertEquals(Integer.MAX_VALUE, midpointIntegrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-0.8139872901742529));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      eventFilter0.init(2700.964947379, doubleArray0, (-0.8139872901742529));
      LutherIntegrator lutherIntegrator0 = new LutherIntegrator((-0.8139872901742529));
      lutherIntegrator0.getStepHandlers();
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(2700.964947379);
      lutherIntegrator0.getStepHandlers();
      MidpointIntegrator midpointIntegrator2 = new MidpointIntegrator((-0.8139872901742529));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = midpointIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2762.58389, doubleArray0, (-1533.52786), doubleArray0);
      assertEquals((-1533.52786), double0, 0.01);
      
      MidpointIntegrator midpointIntegrator3 = new MidpointIntegrator(2700.964947379);
      midpointIntegrator2.getEvaluations();
      assertEquals(Integer.MAX_VALUE, midpointIntegrator2.getMaxEvaluations());
      assertEquals(Double.NaN, midpointIntegrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator2.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(5.924290380648597E-224);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      eventFilter0.init(2700.964947379, doubleArray0, 5.924290380648597E-224);
      LutherIntegrator lutherIntegrator0 = new LutherIntegrator(5.924290380648597E-224);
      lutherIntegrator0.getStepHandlers();
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(2700.964947379);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      lutherIntegrator0.getStepHandlers();
      MidpointIntegrator midpointIntegrator2 = new MidpointIntegrator((-746.25553080492));
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        midpointIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(5.924290380648597E-224);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      eventFilter0.init(2700.964947379, doubleArray0, 5.924290380648597E-224);
      LutherIntegrator lutherIntegrator0 = new LutherIntegrator(5.924290380648597E-224);
      lutherIntegrator0.getStepHandlers();
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(2700.964947379);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      lutherIntegrator0.getStepHandlers();
      MidpointIntegrator midpointIntegrator2 = new MidpointIntegrator((-746.25553080492));
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = midpointIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 3086.5184203745885, doubleArray0);
      assertEquals(3086.5184203745885, double0, 0.01);
      assertEquals(Integer.MAX_VALUE, midpointIntegrator1.getMaxEvaluations());
      
      MidpointIntegrator midpointIntegrator3 = new MidpointIntegrator((-253.436395351591));
      midpointIntegrator3.getEvaluations();
      assertEquals(Double.NaN, midpointIntegrator3.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator3.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 1783.47958, (-2313.306439), 914.443984);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 10292, (-2154), (-2154));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1563.8936575355), (-2313.306439));
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) eventFilter0, 4.547473508864641E-10, 1783.47958, (-615), (UnivariateSolver) illinoisSolver0);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 1838.578906819973, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 1838.578906819973, 2.2737367544323206E-10, 1838.578906819973);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.computeDerivatives(2.2737367544323206E-10, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 772.3;
      doubleArray0[2] = 772.3;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-625.2855941), 3.807242187736102E-281, 0, 0.0);
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter((EventHandler) null, filterType0);
      EventFilter eventFilter1 = new EventFilter(eventFilter0, filterType0);
      FilterType filterType1 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter2 = new EventFilter((EventHandler) null, filterType1);
      SecantSolver secantSolver0 = new SecantSolver((-625.2855941));
      LutherIntegrator lutherIntegrator0 = new LutherIntegrator((-3.7646381826067834E-8));
      FilterType filterType2 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter3 = new EventFilter(eventFilter2, filterType2);
      lutherIntegrator0.addEventHandler((EventHandler) eventFilter3, (-3.7646381826067834E-8), (-3337.3), (-1783), (UnivariateSolver) secantSolver0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(930.11473, fixedStepHandler0);
      lutherIntegrator0.addStepHandler(stepNormalizer0);
      LutherIntegrator lutherIntegrator1 = new LutherIntegrator(Double.NaN);
      lutherIntegrator1.clearEventHandlers();
      lutherIntegrator1.getEvaluations();
      assertEquals(Double.NaN, lutherIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, lutherIntegrator1.getMaxEvaluations());
      assertEquals(Double.NaN, lutherIntegrator1.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2.2737367544323206E-10, 2.2737367544323206E-10, 2.2737367544323206E-10, 2.2737367544323206E-10);
      dormandPrince54Integrator0.setMinReduction((-0.731173));
      dormandPrince54Integrator0.getEvaluations();
      dormandPrince54Integrator0.getEvaluations();
      LutherIntegrator lutherIntegrator0 = new LutherIntegrator(1246.84106188);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      lutherIntegrator0.addEventHandler((EventHandler) eventFilter0, 2.2737367544323206E-10, 0.0, 0, (UnivariateSolver) null);
      LutherIntegrator lutherIntegrator1 = new LutherIntegrator((-3365.0));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1246.84106188;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2.2737367544323206E-10;
      doubleArray0[3] = 2.2737367544323206E-10;
      lutherIntegrator0.clearEventHandlers();
      lutherIntegrator0.getEvaluations();
      assertEquals(Integer.MAX_VALUE, lutherIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, lutherIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, lutherIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 1840.37485069853, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator((-1482.956705223634), (-1482.956705223634), (-1482.956705223634), 1840.37485069853);
      highamHall54Integrator1.clearStepHandlers();
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      HighamHall54Integrator highamHall54Integrator2 = new HighamHall54Integrator((-489.8251989646), 3701.67958, 0.0, 1840.37485069853);
      // Undeclared exception!
      highamHall54Integrator2.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1918.2, doubleArray0, 3701.67958, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = (-1.0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(5.924290380648597E-224);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      midpointIntegrator0.addEventHandler((EventHandler) eventFilter0, (-1945.01), (-2706.9866140878257), 174);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(865).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      midpointIntegrator0.setMaxEvaluations(2);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 174;
      doubleArray1[1] = 5.924290380648597E-224;
      doubleArray1[2] = (double) 174;
      doubleArray1[3] = 5.924290380648597E-224;
      doubleArray1[4] = 1840.37485069853;
      doubleArray1[5] = (double) 174;
      // Undeclared exception!
      try { 
        firstOrderConverter0.computeDerivatives((-1.0), doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = 1838.578906819973;
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 1838.578906819973, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1938.9564034300158, doubleArray0, 1938.9564034300158, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 1838.578906819973, doubleArray0, doubleArray0);
      highamHall54Integrator0.clearStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      SecantSolver secantSolver0 = new SecantSolver((-1783));
      LutherIntegrator lutherIntegrator0 = new LutherIntegrator(0.0);
      lutherIntegrator0.addEventHandler((EventHandler) eventFilter0, (double) (-1783), 0.0, (-1783), (UnivariateSolver) secantSolver0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(1838.578906819973, fixedStepHandler0);
      lutherIntegrator0.addStepHandler(stepNormalizer0);
      lutherIntegrator0.clearEventHandlers();
      lutherIntegrator0.getEvaluations();
      assertEquals(Double.NaN, lutherIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, lutherIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, lutherIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = 4038.01;
      doubleArray0[1] = (-1376.773933);
      doubleArray0[2] = (-1376.773933);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1376.773933), (-1376.773933), doubleArray0, doubleArray0);
      SecantSolver secantSolver0 = new SecantSolver();
      dormandPrince853Integrator0.addEventHandler((EventHandler) null, 2187.62942, 0.0, 0, (UnivariateSolver) secantSolver0);
      dormandPrince853Integrator0.addEventHandler((EventHandler) null, 2762.755, 105.0, 0, (UnivariateSolver) secantSolver0);
      SecantSolver secantSolver1 = new SecantSolver();
      dormandPrince853Integrator0.addEventHandler((EventHandler) null, 0.0, 2146.910113247, 0, (UnivariateSolver) secantSolver1);
      dormandPrince853Integrator0.getName();
      dormandPrince853Integrator0.setMaxEvaluations(0);
      assertEquals(0, dormandPrince853Integrator0.getMaxEvaluations());
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-0.4353557902216363), (-0.4353557902216363), (-2712.883060798984), (-1376.773933));
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, (-1.0), (-273.304064873114), 0, (UnivariateSolver) secantSolver0);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = 0.0;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      double double1 = 0.0;
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.setMaxEvaluations(0);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getEventHandlers();
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      EventFilter eventFilter1 = new EventFilter(eventFilter0, filterType0);
      gillIntegrator0.addEventHandler((EventHandler) eventFilter1, 475.74, (double) 0, 0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      firstOrderConverter0.computeDerivatives(0.0, doubleArray0, doubleArray1);
      double[] doubleArray2 = null;
      // Undeclared exception!
      try { 
        firstOrderConverter0.computeDerivatives(0, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(9, 0.0, (-1649.809), 0.0, 9);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1649.809);
      firstOrderConverter0.computeDerivatives(3.491470347090126E290, doubleArray0, doubleArray0);
      firstOrderConverter0.computeDerivatives(1691.52661604739, doubleArray0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getSecondaryMappers();
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1892.347881082598);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 3.491470347090126E290;
      doubleArray1[4] = (-1892.347881082598);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = (double) 9;
      doubleArray1[8] = (-1054.9513);
      firstOrderConverter0.computeDerivatives((-1892.347881082598), doubleArray1, doubleArray0);
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4038.01;
      doubleArray0[1] = (-1376.773933);
      doubleArray0[2] = (-1376.773933);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1376.773933), (-1376.773933), doubleArray0, doubleArray0);
      SecantSolver secantSolver0 = new SecantSolver();
      dormandPrince853Integrator0.addEventHandler((EventHandler) null, 2187.62942, 0.0, 0, (UnivariateSolver) secantSolver0);
      dormandPrince853Integrator0.addEventHandler((EventHandler) null, 2762.755, 105.0, 0, (UnivariateSolver) secantSolver0);
      SecantSolver secantSolver1 = new SecantSolver();
      dormandPrince853Integrator0.addEventHandler((EventHandler) null, 4038.01, 2146.910113247, 0, (UnivariateSolver) secantSolver1);
      dormandPrince853Integrator0.getName();
      dormandPrince853Integrator0.setMaxEvaluations(0);
      assertEquals(0, dormandPrince853Integrator0.getMaxEvaluations());
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-0.4353557902216363), (-0.4353557902216363), (-2712.883060798984), (-1376.773933));
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, (-1.0), (-273.304064873114), 0, (UnivariateSolver) secantSolver0);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(5.924290380648597E-224);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      midpointIntegrator0.addEventHandler((EventHandler) eventFilter0, (-1945.01), (-2706.9866140878257), 174);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 174;
      doubleArray1[1] = 5.924290380648597E-224;
      doubleArray1[2] = (double) 174;
      doubleArray1[3] = 5.924290380648597E-224;
      doubleArray1[4] = 1840.37485069853;
      doubleArray1[5] = (double) 174;
      firstOrderConverter0.computeDerivatives((-1.0), doubleArray0, doubleArray1);
      double[] doubleArray2 = new double[0];
      firstOrderConverter0.computeDerivatives((-1.0), doubleArray0, doubleArray2);
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator((-1604.34));
      try { 
        midpointIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1840.37485069853, doubleArray0, 174.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 1840.37485069853, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1840.37485069853;
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1938.9564034300158, doubleArray0, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-374.5467547226902), 0.0, 0.0, (-374.5467547226902));
      graggBulirschStoerIntegrator0.setStepSizeControl(0.0, (-2704.569), 921.033500177, (-3590.892));
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.setControlFactors((-374.5467547226902), 0.0, 1000.0, (-386.5226810238));
      graggBulirschStoerIntegrator0.setControlFactors((-374.5467547226902), (-374.5467547226902), 0.0, (-231.966));
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2704.569), (-231.966), (-3547.1467914096), 0.0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getOrder();
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-386));
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 5, 5, 121.79766750721596);
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      dormandPrince54Integrator0.clearEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-386.5226810238);
      doubleArray0[3] = 1000.0;
      doubleArray0[4] = 921.033500177;
      doubleArray0[5] = (-386.5226810238);
      doubleArray0[6] = (-2704.569);
      doubleArray0[7] = (-2704.569);
      doubleArray0[8] = (-3547.1467914096);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-374.5467547226902), doubleArray0, (-386.5226810238), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 10
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4038.01;
      doubleArray0[1] = (-1376.773933);
      doubleArray0[2] = (-1376.773933);
      doubleArray0[3] = (-1376.773933);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1376.773933), (-1376.773933), doubleArray0, doubleArray0);
      SecantSolver secantSolver0 = new SecantSolver();
      dormandPrince853Integrator0.addEventHandler((EventHandler) null, 2762.755, 105.0, 0, (UnivariateSolver) secantSolver0);
      SecantSolver secantSolver1 = new SecantSolver();
      dormandPrince853Integrator0.addEventHandler((EventHandler) null, 4038.01, 2146.910113247, 0, (UnivariateSolver) secantSolver1);
      dormandPrince853Integrator0.getName();
      dormandPrince853Integrator0.setMaxEvaluations(0);
      assertEquals(0, dormandPrince853Integrator0.getMaxEvaluations());
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-0.4353557902216363), (-0.4353557902216363), (-2712.883060798984), (-1376.773933));
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, (-1.0), (-273.304064873114), 0, (UnivariateSolver) secantSolver0);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.getStepHandlers();
      highamHall54Integrator0.getMaxEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      double double0 = 0.0;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1048.0;
      doubleArray1[2] = (double) Integer.MAX_VALUE;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (double) 2059;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.initializeStep(true, 2059, doubleArray0, 0.0, doubleArray0, doubleArray0, doubleArray1, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-43.53345659001114));
      midpointIntegrator0.addEventHandler((EventHandler) null, (-2706.9866140878257), (-1.0), 174);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 174;
      doubleArray0[1] = (-2706.9866140878257);
      firstOrderConverter0.computeDerivatives((-2706.9866140878257), doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-2469.00153);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-43.53345659001114);
      doubleArray1[3] = (-55.2);
      doubleArray1[4] = (-55.2);
      doubleArray1[5] = (-2706.9866140878257);
      doubleArray1[6] = (-43.53345659001114);
      firstOrderConverter0.computeDerivatives((-55.2), doubleArray1, doubleArray1);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = (-43.53345659001114);
      doubleArray2[2] = (double) 174;
      doubleArray2[3] = (-2706.9866140878257);
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 174, doubleArray2, (-43.53345659001114), doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-2139.55747935936));
      gillIntegrator0.getEvaluations();
      gillIntegrator0.setMaxEvaluations(0);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      gillIntegrator0.addEventHandler((EventHandler) eventFilter0, (double) 0, 475.74, 0);
      gillIntegrator0.getStepHandlers();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(Double.NaN, fixedStepHandler0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1000.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 475.74;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      stepNormalizer0.init(475.74, doubleArray0, 0);
      gillIntegrator0.addStepHandler(stepNormalizer0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0, 0, (-2139.55747935936), 0.0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getEvaluations();
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(696, 475.74, 0.0, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.04556282049746119;
      doubleArray0[1] = 0.04556282049746119;
      doubleArray0[2] = 0.04556282049746119;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.04556282049746119;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(Double.NaN, 0.04556282049746119, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      highamHall54Integrator0.setStepSizeControl(0.04556282049746119, 0.04556282049746119, doubleArray1, doubleArray0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getStepHandlers();
      highamHall54Integrator0.setMaxGrowth(0.0);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(5, 2147.502777336258, 0.0, doubleArray0, doubleArray1);
      adamsMoultonIntegrator0.setMinReduction(6527.33206);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      highamHall54Integrator0.setSafety(5);
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      FilterType filterType1 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter1 = new EventFilter(eventFilter0, filterType1);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(5234.057091546294, 0.0);
      adamsMoultonIntegrator0.addEventHandler((EventHandler) eventFilter1, (-1359.3043280605077), 1134.02577, 5, (UnivariateSolver) illinoisSolver0);
      // Undeclared exception!
      try { 
        eventFilter0.g(0.0, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1.0), 981.741934462, (-1100.494176921355), 12.0);
      highamHall54Integrator0.setMaxEvaluations((-1571));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 981.741934462;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1100.494176921355);
      doubleArray0[3] = (-1.0);
      dormandPrince54Integrator0.setStepSizeControl(981.741934462, 3.18801444819E11, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      highamHall54Integrator0.getOrder();
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1.0);
      double double1 = 1210.11555494926;
      doubleArray1[1] = 1210.11555494926;
      doubleArray1[2] = 12.0;
      doubleArray1[3] = (double) (-1571);
      doubleArray1[4] = (-1100.494176921355);
      doubleArray1[5] = (-5228.957);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1367.722, (-5228.957), doubleArray1, doubleArray1);
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(Double.NaN, Double.NaN, Double.NaN, (-43.271654));
      dormandPrince54Integrator0.setSafety(0);
      dormandPrince54Integrator0.setMaxEvaluations(0);
      dormandPrince54Integrator0.setMaxEvaluations(0);
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getEvaluations();
      assertEquals(0, dormandPrince54Integrator0.getMaxEvaluations());
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-0.322376179245283), (-0.322376179245283), (-5.685526961588504), (-629.219305982844));
      graggBulirschStoerIntegrator0.setOrderControl((-42), (-2901.04), 0.0);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double double0 = (-134.7949779);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-134.7949779));
      gillIntegrator0.getCurrentStepStart();
      gillIntegrator0.getStepHandlers();
      double double1 = (-4093.6434419915);
      double double2 = 1017.0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-4093.6434419915);
      doubleArray0[1] = (-134.7949779);
      doubleArray0[2] = (-4093.6434419915);
      doubleArray0[3] = (-134.7949779);
      double double3 = 1.0;
      doubleArray0[4] = 1.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-4093.6434419915), 1017.0, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      int int0 = 0;
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      PolynomialFunctionNewtonForm polynomialFunctionNewtonForm0 = null;
      try {
        polynomialFunctionNewtonForm0 = new PolynomialFunctionNewtonForm(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // array sizes should have difference 1 (5 != 5 + 1)
         //
         verifyException("org.apache.commons.math3.analysis.polynomials.PolynomialFunctionNewtonForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(18.0, 18.0, 0.0, 1.0);
      highamHall54Integrator0.getStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, (double[]) null, 0.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 1840.37485069853, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1840.37485069853;
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1938.9564034300158, doubleArray0, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-509.0));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      classicalRungeKuttaIntegrator0.addEventHandler((EventHandler) eventFilter0, (-509.0), (-888.819383778), (-1733));
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, classicalRungeKuttaIntegrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double double0 = (-2264.117096);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-2264.117096));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2264.117096);
      doubleArray0[1] = (-2264.117096);
      firstOrderConverter0.computeDerivatives((-2264.117096), doubleArray0, doubleArray0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-1801.860308);
      doubleArray0[0] = (-1801.860308);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(Double.NaN, Double.NaN, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.computeDerivatives((-1801.860308), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      eulerIntegrator0.getName();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, eulerIntegrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3154.9738876791357, 3086.5184203745885, 3086.5184203745885, 3086.5184203745885);
      dormandPrince54Integrator0.setMinReduction(409.7759961278009);
      dormandPrince54Integrator0.getEvaluations();
      dormandPrince54Integrator0.getEvaluations();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1298.97, (-2.2056852085471177), (-597.290237863), 3086.5184203745885);
      double double0 = dormandPrince54Integrator0.getCurrentSignedStepsize();
      assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
      assertEquals(3120.558446836476, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-374.5467547226902), 0.0, 0.0, (-374.5467547226902));
      graggBulirschStoerIntegrator0.setStepSizeControl(0.0, (-2704.569), 921.033500177, (-3590.892));
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.setControlFactors((-374.5467547226902), 0.0, 1000.0, (-386.5226810238));
      graggBulirschStoerIntegrator0.setControlFactors((-374.5467547226902), (-374.5467547226902), 0.0, (-231.966));
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2704.569), (-231.966), (-3547.1467914096), 0.0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getOrder();
      boolean boolean0 = true;
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-386));
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 5, 5, 121.79766750721596);
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      dormandPrince54Integrator0.clearEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-386.5226810238);
      doubleArray0[3] = 1000.0;
      doubleArray0[4] = 921.033500177;
      doubleArray0[5] = (-386.5226810238);
      doubleArray0[6] = (-2704.569);
      doubleArray0[7] = (-2704.569);
      doubleArray0[8] = (-3547.1467914096);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-374.5467547226902), doubleArray0, (-386.5226810238), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = 1.0;
      LutherIntegrator lutherIntegrator0 = new LutherIntegrator(1.0);
      double double1 = 0.0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getSecondaryMappers();
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      firstOrderConverter0.computeDerivatives(0.0, doubleArray1, doubleArray0);
      double[] doubleArray2 = new double[0];
      expandableStatefulODE0.computeDerivatives(0.0, doubleArray1, doubleArray2);
      // Undeclared exception!
      lutherIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 772.3;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2983.5325792076), 0.0, 772.3, 833.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 772.3;
      doubleArray0[2] = 833.0;
      doubleArray0[3] = (-2983.5325792076);
      doubleArray0[4] = (-2983.5325792076);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 833.0;
      doubleArray0[7] = (-2983.5325792076);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3154.9738876791357, 2209.0974, 2209.0974, 2209.0974);
      dormandPrince54Integrator0.addEventHandler((EventHandler) null, 2209.0974, (-856.0), 93);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3154.9738876791357;
      doubleArray0[1] = 3154.9738876791357;
      doubleArray0[2] = 3154.9738876791357;
      doubleArray0[3] = (-812.0);
      doubleArray0[4] = 409.7759961278009;
      dormandPrince54Integrator0.setStepSizeControl(3154.9738876791357, (-812.0), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setMinReduction(409.7759961278009);
      dormandPrince54Integrator0.getEvaluations();
      dormandPrince54Integrator0.getEvaluations();
      dormandPrince54Integrator0.addEventHandler((EventHandler) null, 2.2737367544323206E-10, (-812.0), 0);
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.getEventHandlers();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1061.7, (-2.2056852085471177), (-597.290237863), 2209.0974);
      double double0 = dormandPrince54Integrator0.getCurrentSignedStepsize();
      assertEquals(2640.008449293273, double0, 0.01);
      assertEquals(Integer.MAX_VALUE, dormandPrince54Integrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1659.36, 1659.36, (-3745.6593281364467), 1659.36);
      highamHall54Integrator0.setMinReduction(1659.36);
      highamHall54Integrator0.setSafety(0.0);
      highamHall54Integrator0.clearStepHandlers();
      double double0 = 0.9777777777777777;
      highamHall54Integrator0.setInitialStepSize(1055.9);
      highamHall54Integrator0.getEventHandlers();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1659.36;
      doubleArray0[1] = 1659.36;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1659.36, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      doubleArray0[5] = (-3745.6593281364467);
      doubleArray0[6] = 1659.36;
      doubleArray0[7] = 1659.36;
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives(0.9777777777777777, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 1;
      double double0 = (-47.7159746087);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-47.7159746087);
      doubleArray0[1] = (-47.7159746087);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(1, 1, (-47.7159746087), doubleArray0, doubleArray0);
      double double1 = (-794.011244);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1698.0273628689, (-794.011244), doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      double double2 = 808.495;
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.initializeStep(true, 3717, doubleArray0, 231.9394929119324, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
