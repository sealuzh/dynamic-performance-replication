/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 04:32:59 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put("us.codecraft.webmagic.utils.MultiKeyMapBase", "", (Object) "us.codecraft.webmagic.utils.MultiKeyMapBase");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<String, Integer>, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<String, Integer>, Integer>((Map<Object, Map<HashMap<String, Integer>, Integer>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<String, Map<Integer, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Map<Integer, String>, Integer>();
      Map<Map<Integer, String>, Integer> map0 = doubleKeyMap0.get(":q8U");
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<HashMap<String, String>, Map<HashMap<String, String>, Integer>> hashMap0 = new HashMap<HashMap<String, String>, Map<HashMap<String, String>, Integer>>();
      Class<Map> class0 = Map.class;
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      DoubleKeyMap<Object, Integer, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, HashMap<Object, Object>>();
      Map<HashMap<String, String>, Integer> map0 = doubleKeyMap0.newMap();
      hashMap0.put(hashMap1, map0);
      DoubleKeyMap<HashMap<String, String>, HashMap<String, String>, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, String>, HashMap<String, String>, Integer>(hashMap0, class0);
      doubleKeyMap1.remove(hashMap1, hashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<String, String, HashMap<Object, Map<Integer, String>>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, Map<Integer, String>>>();
      HashMap<Object, Map<Integer, String>> hashMap0 = new HashMap<Object, Map<Integer, String>>();
      doubleKeyMap0.put("wrong proto type map ", "wrong proto type map ", hashMap0);
      HashMap<Object, Map<Integer, String>> hashMap1 = doubleKeyMap0.put("wrong proto type map ", "wrong proto type map ", hashMap0);
      assertSame(hashMap0, hashMap1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, HashMap<Integer, Map<Integer, String>>, String> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, HashMap<Integer, Map<Integer, String>>, String>();
      HashMap<Integer, Map<Integer, String>> hashMap0 = new HashMap<Integer, Map<Integer, String>>();
      String string0 = doubleKeyMap0.get((Map<Integer, String>) null, hashMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      Integer integer0 = new Integer((-735));
      doubleKeyMap0.put("Wf ef J-n7jV/h)I>M", (Object) "Wf ef J-n7jV/h)I>M", integer0);
      Integer integer1 = doubleKeyMap0.get("Wf ef J-n7jV/h)I>M", (Object) null);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, Map<Integer, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, String, Map<Integer, String>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Integer, Object, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, HashMap<Object, Object>>();
      Map<Object, HashMap<Object, Object>> map0 = doubleKeyMap0.remove((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Object>(hashMap0);
      doubleKeyMap0.put((Integer) null, "", (Object) null);
      doubleKeyMap0.remove((Integer) null, (String) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Map<Integer, String>>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<Integer, String>>, Integer, Integer>();
      HashMap<Object, Map<Integer, String>> hashMap0 = new HashMap<Object, Map<Integer, String>>();
      Integer integer0 = doubleKeyMap0.remove(hashMap0, (Integer) null);
      assertNull(integer0);
  }
}
