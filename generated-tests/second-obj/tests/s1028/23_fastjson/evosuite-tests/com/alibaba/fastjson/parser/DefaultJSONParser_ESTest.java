/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:08:41 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexer;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.SymbolTable;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.ExtraProcessor;
import com.alibaba.fastjson.parser.deserializer.FieldTypeResolver;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.Point;
import java.awt.RenderingHints;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.HttpCookie;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.StringCharacterIterator;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.IdentityHashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultJSONParser_ESTest extends DefaultJSONParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("create instance error");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.getContext();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig((ClassLoader) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(")6~]kIw9#|5EHOzTZ4L", parserConfig0);
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertNotNull(list0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      JSONScanner jSONScanner0 = new JSONScanner("K", 2556);
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      assertEquals(1, jSONScanner0.pos());
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ");
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual ,
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")nphy6V'$-Z-5=<Lvks");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      Vector<BigInteger> vector0 = new Vector<BigInteger>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) vector0, (Object) jSONScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ), pos 0, fieldName com.alibaba.fastjson.parser.JSONScanner@1
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 57, 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[1];
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SP0m5");
      defaultJSONParser0.setDateFormat("SP0m5");
      HashMap<Float, Insets> hashMap0 = new HashMap<Float, Insets>();
      Object object0 = new Object();
      Stack<RenderingHints> stack0 = new Stack<RenderingHints>();
      Point point0 = new Point(2, 0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) stack0, (Object) point0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual ident, pos 0, fieldName java.awt.Point[x=2,y=0]
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[9];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 149);
      ParserConfig parserConfig0 = new ParserConfig();
      ClassLoader.getSystemClassLoader();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.getDateFormat();
      defaultJSONParser0.getDateFomartPattern();
      defaultJSONParser0.checkListResolve((Collection) null);
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but EOF, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]prVnerty ");
      JSON.setDefaultTypeKey("\u0003ih");
      Feature feature0 = Feature.NonStringKeyAsString;
      defaultJSONParser0.config(feature0, true);
      List<DefaultJSONParser.ResolveTask> list0 = defaultJSONParser0.getResolveTaskList();
      assertNotNull(list0);
      
      defaultJSONParser0.getObject("\u0003ih");
      JSONLexer jSONLexer0 = defaultJSONParser0.getLexer();
      assertEquals(2098141, jSONLexer0.getFeatures());
      assertEquals(15, jSONLexer0.token());
      
      defaultJSONParser0.resolveReference("B=bVviU$jo0a6uHV");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("%{.h/7Li0'Pr");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Feature feature0 = Feature.SupportNonPublicField;
      defaultJSONParser0.isEnabled(feature0);
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("[B");
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual [, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '{';
      charArray0[1] = '{';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '{', '{');
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '{';
      charArray0[1] = '{';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '{', 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("^d", 964);
      jSONScanner0.isBlankInput();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      Class<Long> class0 = Long.TYPE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      defaultJSONParser0.setDateFomrat(mockSimpleDateFormat0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("()C", parserConfig0, 1);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseArrayWithType(class0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("N'N", parserConfig0, 2556);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("setter not found, class ");
      ParserConfig parserConfig0 = defaultJSONParser0.getConfig();
      assertNotNull(parserConfig0);
      
      defaultJSONParser0.getFieldTypeResolver();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Y{t", '{');
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, jSONReaderScanner0, parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.accept(0, 451);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect Unknown, actual error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("null", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.getLastResolveTask();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("m6]qNH", 1758);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      defaultJSONParser0.getExtraTypeProviders();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error : ", parserConfig0, 37);
      defaultJSONParser0.getDateFomartPattern();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("scanFieldFloatArray2", parserConfig0);
      defaultJSONParser0.getInput();
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[1];
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("SP0m5");
      HashMap<Float, Insets> hashMap0 = new HashMap<Float, Insets>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual ident, pos 5, json : SP0m5
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "=lsj7";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("E~oC?<|(\"");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      Class<Integer> class0 = Integer.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[20];
      charArray0[0] = '{';
      charArray0[1] = 'p';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'p');
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      Point point0 = new Point(2, 'p');
      Feature feature0 = Feature.NonStringKeyAsString;
      defaultJSONParser0.config(feature0, false);
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u0000
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = '<';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3229, '<');
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      parserConfig0.clearDeserializers();
      Class<MockDate> class0 = MockDate.class;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, false, false);
      Class<Integer> class1 = Integer.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parseInt error, field : null
         //
         verifyException("com.alibaba.fastjson.serializer.IntegerCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", ");
      Hashtable<Feature, JSONScanner> hashtable0 = new Hashtable<Feature, JSONScanner>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Map) hashtable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3229, 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.clearDeserializers();
      Class<MockDate> class0 = MockDate.class;
      JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, false, true);
      JavaBeanInfo.getBuilderClass(class0, (JSONType) null);
      Class<Integer> class1 = Integer.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.handleResovleTask(jSONReaderScanner0);
      defaultJSONParser0.getSymbolTable();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      JSON.setDefaultTypeKey("fastjson.parser.autoTypeAccept");
      defaultJSONParser0.setResolveStatus(0);
      defaultJSONParser0.getDateFormat();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("encodeUTF8 error", parserConfig0, 48);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : encodeUTF8 error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '{', '\u0000');
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      ClassLoader.getSystemClassLoader();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      defaultJSONParser0.getContext();
      Stack<MockDate> stack0 = new Stack<MockDate>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Collection) stack0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual EOF, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.handleResovleTask(jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("yu_RNrs$", parserConfig0, 125);
      defaultJSONParser0.setConfig(parserConfig0);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("syntax error, expect [, actual ", parserConfig0);
      defaultJSONParser0.setConfig(parserConfig0);
      defaultJSONParser0.getExtraTypeProviders();
      // Undeclared exception!
      try { 
        defaultJSONParser0.close();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not close json text, token : error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      char[] charArray0 = new char[9];
      int int0 = 149;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 149);
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      defaultJSONParser0.parse();
      ArrayList<Boolean> arrayList0 = new ArrayList<Boolean>();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0);
      ParserConfig parserConfig0 = ParserConfig.global;
      ParserConfig parserConfig1 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner1, parserConfig1);
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      defaultJSONParser0.setContext((Object) jSONReaderScanner1, (Object) jSONReaderScanner1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null, (Object) jSONReaderScanner1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unterminated json string, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", property ");
      JSON.setDefaultTypeKey("\u0003ih");
      Feature feature0 = Feature.NonStringKeyAsString;
      defaultJSONParser0.config(feature0, true);
      defaultJSONParser0.getResolveTaskList();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : , property 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3229, 0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 45);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) jSONReaderScanner0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("^", 964);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      Class<Long> class0 = Long.TYPE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      mockSimpleDateFormat0.setDateFormatSymbols(dateFormatSymbols0);
      defaultJSONParser0.setDateFomrat(mockSimpleDateFormat0);
      defaultJSONParser0.close();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      defaultJSONParser0.handleResovleTask(jSONReaderScanner0);
      Object object0 = new Object();
      defaultJSONParser0.getExtraProcessors();
      assertEquals(20, jSONReaderScanner0.token());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3266, 0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      JSONObject jSONObject0 = JSON.parseObject("NaN");
      LinkedHashSet<TimeZone> linkedHashSet0 = new LinkedHashSet<TimeZone>();
      linkedHashSet0.add(jSONObject0.defaultTimeZone);
      defaultJSONParser0.checkListResolve(linkedHashSet0);
      Class<ChoiceFormat> class0 = ChoiceFormat.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) linkedHashSet0, (Object) charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("N'N", parserConfig0, 2556);
      ParserConfig parserConfig1 = ParserConfig.global;
      parserConfig1.clearDeserializers();
      Class<MockDate> class0 = MockDate.class;
      Class<String> class1 = String.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JavaBeanInfo.build((Class<?>) class1, (Type) class0, propertyNamingStrategy0, true, false);
      Class<Integer> class2 = Integer.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : N'N
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("com.alibaba.fastjson.parser.DefaultJSONParser", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) "com.alibaba.fastjson.parser.DefaultJSONParser", (Object) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertNotNull(parseContext0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double double0 = Locale.LanguageRange.MAX_WEIGHT;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      Class<Integer> class0 = Integer.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("$.sun.misc.Launcher$AppClassLoader@6bc7c054");
      Class<BufferCapabilities> class1 = BufferCapabilities.class;
      JSON.parseArray("", class1);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray((Type) class0, (Collection) null, (Object) properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but error, pos 1, json : $.sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 110);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      Point point0 = new Point(2, 110);
      defaultJSONParser0.setContext((Object) point0, (Object) jSONReaderScanner0);
      defaultJSONParser0.popContext();
      defaultJSONParser0.getDateFormat();
      assertEquals(12, jSONReaderScanner0.token());
      assertEquals(0, defaultJSONParser0.getResolveStatus());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("K", (-12437164));
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      jSONReaderScanner0.isRef();
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      char[] charArray0 = new char[20];
      charArray0[0] = '{';
      charArray0[1] = '{';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 110);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      Point point0 = new Point(2, 110);
      defaultJSONParser0.setContext((Object) point0, (Object) jSONReaderScanner0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(true);
      Feature feature0 = Feature.CustomMapDeserializer;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("@rRHss{`&UA{/nJ%(");
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("AX@a$[J68Kio", parserConfig0);
      defaultJSONParser0.getObject("bs+dYJh\"QJ7sF}");
      assertEquals(0, defaultJSONParser0.resolveStatus);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("6+s]L)'U#P^<a[", parserConfig0, 11);
      JSON.DEFAULT_TYPE_KEY = "A/u<4)eXC";
      defaultJSONParser0.setResolveStatus(115);
      defaultJSONParser0.parse((Object) parserConfig0);
      Type[] typeArray0 = new Type[0];
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(typeArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error : int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Insets insets0 = new Insets(2570, 2570, 2570, 2570);
      insets0.set(1030, 2658, 22, 116);
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2658, 2658);
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      HttpCookie httpCookie0 = new HttpCookie("fastjson.parser.autoTypeSupport", "d");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) httpCookie0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      char[] charArray0 = new char[12];
      charArray0[0] = '{';
      charArray0[1] = '~';
      LinkedHashMap<MockJapaneseDate, DecimalFormat> linkedHashMap0 = new LinkedHashMap<MockJapaneseDate, DecimalFormat>();
      Collection<DecimalFormat> collection0 = new LinkedList<DecimalFormat>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Y{t");
      defaultJSONParser0.checkMapResolve(linkedHashMap0, collection0);
      defaultJSONParser0.getExtraProcessors();
      defaultJSONParser0.getResolveTaskList();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      dateFormatSymbols0.clone();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", dateFormatSymbols0);
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      defaultJSONParser1.getLexer();
      List<ExtraProcessor> list0 = defaultJSONParser0.getExtraProcessors();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("scanType", parserConfig0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : scanType
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("$.sun.misc.Launcher$AppClassLoader@6bc7c054.null", 91);
      jSONScanner0.isBlankInput();
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1075, 1075);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      ClassLoader.getSystemClassLoader();
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) "$.sun.misc.Launcher$AppClassLoader@6bc7c054.null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName $.sun.misc.Launcher$AppClassLoader@6bc7c054.null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{[V^");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("{[V^");
      jSONReaderScanner0.scanDouble('d');
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      Insets insets0 = new Insets(48, 16, 0, (-1));
      insets0.clone();
      insets0.set(48, (-1), 2194, 755);
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{[V^", parserConfig0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : [pos 1, json : {[V^
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Y{t");
      JSON.DEFAULT_PARSER_FEATURE = 2;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Y{t");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[10];
      Locale locale0 = Locale.ITALIAN;
      Locale.getISOCountries();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat("Y{t", decimalFormatSymbols0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Y{t", '\u0000');
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      ClassLoader.getSystemClassLoader();
      Insets insets0 = new Insets(2, 2, 2, 1);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parse((PropertyProcessable) null, (Object) charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // expect ':' at 0, actual \u001A
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'W';
      charArray0[1] = '{';
      charArray0[2] = '{';
      charArray0[3] = '\'';
      charArray0[4] = '{';
      charArray0[5] = 'W';
      charArray0[6] = '{';
      charArray0[8] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12, 'W');
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      jSONReaderScanner0.scanType("fastjson.parser.autoTypeSupport");
      Point point0 = new Point(1, 0);
      Byte byte0 = new Byte((byte) (-50));
      defaultJSONParser0.setContext((Object) jSONReaderScanner0, (Object) byte0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12, 3879);
      char[] charArray1 = new char[9];
      charArray1[0] = 'W';
      charArray1[1] = '{';
      charArray1[2] = '{';
      charArray1[3] = '\'';
      charArray1[4] = '{';
      charArray1[5] = 'W';
      charArray1[6] = '{';
      charArray1[7] = 'W';
      charArray1[8] = 'W';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray1, 12, 381);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner1);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      Point point0 = new Point(1, 0);
      Byte byte0 = new Byte((byte) (-50));
      defaultJSONParser0.setContext((Object) jSONReaderScanner1, (Object) byte0);
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      Properties properties0 = new Properties();
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("matchStat", parserConfig0, 3113);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(aSMDeserializerFactory0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig1);
      // Undeclared exception!
      try { 
        defaultJSONParser1.accept(1, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedHashMap<MockJapaneseDate, DecimalFormat> linkedHashMap0 = new LinkedHashMap<MockJapaneseDate, DecimalFormat>();
      Collection<DecimalFormat> collection0 = linkedHashMap0.values();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Y{t");
      defaultJSONParser0.checkMapResolve(linkedHashMap0, collection0);
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Y{t", 1);
      jSONReaderScanner0.sub_chars(1655, 1655);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      DefaultJSONParser defaultJSONParser2 = new DefaultJSONParser(defaultJSONParser1.lexer);
      defaultJSONParser0.accept(1);
      defaultJSONParser2.getConfig();
      DefaultJSONParser defaultJSONParser3 = null;
      try {
        defaultJSONParser3 = new DefaultJSONParser("fastjson.parser.autoTypeSupport");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0, 158);
      JSONScanner jSONScanner0 = new JSONScanner("EsXL*%I{@?l5%mXQ&^", 158);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      Class<Byte> class0 = Byte.TYPE;
      ParseContext parseContext0 = defaultJSONParser0.setContext((Object) jSONScanner0, (Object) class0);
      HttpCookie httpCookie0 = new HttpCookie("fastjson.parser.autoTypeAccept", "fastjson.parser.deny");
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      ParseContext parseContext1 = defaultJSONParser1.setContext(parseContext0, (Object) httpCookie0, (Object) mockDateFormat0);
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("fastjson.parser.deny");
      defaultJSONParser0.setContext(parseContext1, (Object) stringCharacterIterator0, (Object) null);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "Y{t";
      LinkedHashMap<MockJapaneseDate, DecimalFormat> linkedHashMap0 = new LinkedHashMap<MockJapaneseDate, DecimalFormat>();
      Collection<DecimalFormat> collection0 = linkedHashMap0.values();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Y{t");
      defaultJSONParser0.checkMapResolve(linkedHashMap0, collection0);
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = 'Q';
      charArray0[2] = '{';
      charArray0[3] = 'Q';
      charArray0[4] = '{';
      charArray0[6] = '{';
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(charArray0, 0, parserConfig0, 44);
      defaultJSONParser1.getInput();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual EOF, pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'W';
      charArray0[1] = '{';
      charArray0[3] = '\'';
      charArray0[4] = '{';
      charArray0[5] = 'W';
      charArray0[7] = 'W';
      charArray0[8] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":TQU#D+G$$qN\">", 989);
      JSON.setDefaultTypeKey("NaN");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      ParserConfig parserConfig0 = new ParserConfig(aSMClassLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("NaN", parserConfig0, 1796);
      Feature feature0 = Feature.AllowSingleQuotes;
      defaultJSONParser0.config(feature0, false);
      defaultJSONParser0.getResolveTaskList();
      defaultJSONParser0.parseKey();
      SymbolTable symbolTable0 = defaultJSONParser0.getSymbolTable();
      assertNotNull(symbolTable0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'W';
      charArray0[3] = '\'';
      charArray0[5] = 'W';
      charArray0[7] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":TQU#D+G$$qN\">", 989);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      ParserConfig parserConfig1 = new ParserConfig(classLoader0);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig1);
      JSON.setDefaultTypeKey("(ZP}");
      classLoader0.setDefaultAssertionStatus(false);
      defaultJSONParser0.addResolveTask((DefaultJSONParser.ResolveTask) null);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("^", 964);
      jSONScanner0.isBlankInput();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      Class<Long> class0 = Long.TYPE;
      defaultJSONParser0.close();
      Feature feature0 = Feature.DisableASM;
      jSONScanner0.config(feature0, false);
      ParserConfig parserConfig0 = new ParserConfig(false);
      jSONScanner0.info();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("()C", parserConfig0, 1);
      defaultJSONParser0.handleResovleTask("()C");
      parserConfig0.clearDeserializers();
      LinkedHashSet<DecimalFormat> linkedHashSet0 = new LinkedHashSet<DecimalFormat>();
      jSONScanner0.hasSpecial = false;
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("^", 0);
      defaultJSONParser1.setContext((Object) jSONScanner0, (Object) "syntax error, position at ");
      defaultJSONParser1.popContext();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseKey();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ()C
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Insets insets0 = new Insets(2570, 2570, 2570, 2570);
      insets0.left = 178;
      insets0.set(1030, 2645, 46, 116);
      char[] charArray0 = new char[4];
      charArray0[0] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2645, 2645);
      ParserConfig.getGlobalInstance();
      jSONReaderScanner0.intValue();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      jSONReaderScanner0.longValue();
      insets0.set(1030, 1326, 431, 2570);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((Object) charArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{[V^");
      Long long0 = new Long((-626L));
      ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("{[V^", parserConfig0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      LinkedHashSet<TimeZone> linkedHashSet0 = new LinkedHashSet<TimeZone>();
      defaultJSONParser0.checkListResolve(linkedHashSet0);
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";u$dW^^4]un]fCF/k<", 0);
      defaultJSONParser0.getObject("SP");
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 3, json : {[V^
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(", pos ", parserConfig0);
      ParseContext parseContext0 = defaultJSONParser0.context;
      defaultJSONParser0.setContext((ParseContext) null);
      defaultJSONParser0.getResolveStatus();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 6, json : , pos 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LinkedHashMap<MockJapaneseDate, DecimalFormat> linkedHashMap0 = new LinkedHashMap<MockJapaneseDate, DecimalFormat>();
      ArrayList<DecimalFormat> arrayList0 = new ArrayList<DecimalFormat>();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("Y{t");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Y{t");
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      jSONReaderScanner0.scanIdent();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Point point0 = new Point(51, 1);
      defaultJSONParser0.setContext((Object) null, (Object) jSONReaderScanner0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        defaultJSONParser1.parseObject((Object) arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 3, json : Y{t
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Insets insets0 = new Insets(2658, 2658, 2658, 2658);
      char[] charArray0 = new char[3];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3229, 2658);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      ParserConfig parserConfig0 = ParserConfig.global;
      parserConfig0.clearDeserializers();
      defaultJSONParser0.getExtraTypeProviders();
      Class<MockDate> class0 = MockDate.class;
      JSON.DEFAULT_TYPE_KEY = "fastjson.parser.autoTypeAccept";
      JavaBeanInfo javaBeanInfo0 = JavaBeanInfo.build((Class<?>) class0, (Type) class0, (PropertyNamingStrategy) null, false, false);
      Class<Integer> class1 = Integer.TYPE;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Type) javaBeanInfo0.clazz);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual error, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Insets insets0 = new Insets(2570, 2570, 2570, 2570);
      char[] charArray0 = new char[19];
      charArray0[0] = '[';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2658, 2570);
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, parserConfig0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      HttpCookie httpCookie0 = new HttpCookie("fastjson.parser.autoTypeSupport", "d");
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse((PropertyProcessable) null, (Object) httpCookie0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed jsonArray
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("]prVnerty ");
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.fieldTypeResolver = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig parserConfig1 = new ParserConfig();
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("T", parserConfig1);
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : ]prVnerty 
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6+s]L)'U#P^<a[", 989);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("6+s]L)'U#P^<a[", parserConfig0, 989);
      MapDeserializer mapDeserializer0 = new MapDeserializer();
      ZoneInfo zoneInfo0 = (ZoneInfo)jSONReaderScanner0.timeZone;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("fastjson.parser.autoTypeSupport", 2);
      defaultJSONParser0.getDateFormat();
      defaultJSONParser0.getFieldTypeResolver();
      defaultJSONParser0.setFieldTypeResolver((FieldTypeResolver) null);
      String string0 = "scanFieldFloatArray2";
      defaultJSONParser0.getDateFormat();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseObject((Object) "scanFieldFloatArray2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual int
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")", 964);
      jSONScanner0.isBlankInput();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      Class<Long> class0 = Long.TYPE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      int int0 = 2434;
      jSONScanner0.eofPos = 2434;
      JSON.DEFAULT_GENERATE_FEATURE = 10;
      String string0 = "()C";
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : )
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("AX@a$[J68Kio", parserConfig0);
      Object object0 = new Object();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      defaultJSONParser0.setContext((Object) "bs+dYJh\"QJ7sF}", (Object) locale0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)15;
      defaultJSONParser0.resolveReference("AX@a$[J68Kio");
      char[] charArray0 = new char[6];
      charArray0[1] = '3';
      charArray0[2] = 'O';
      charArray0[3] = 'Q';
      BeanContext beanContext0 = defaultJSONParser0.lastBeanContext;
      HashSet<DateFormatSymbols> hashSet0 = new HashSet<DateFormatSymbols>();
      defaultJSONParser0.checkListResolve(hashSet0);
      Long.getLong("EAkR\"3[HZS");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fastjson.parser.autoTypeSupport");
      ZoneInfo zoneInfo0 = (ZoneInfo)JSON.defaultTimeZone;
      Feature feature0 = Feature.AutoCloseSource;
      defaultJSONParser0.isEnabled(feature0);
      defaultJSONParser0.getExtraTypeProviders();
      Double double0 = new Double((-451.182184));
      assertEquals((-451.182184), (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("[e", 964);
      jSONScanner0.isBlankInput();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0);
      Class<Long> class0 = Long.TYPE;
      DateFormatSymbols.getInstance();
      defaultJSONParser0.close();
      Feature feature0 = Feature.DisableASM;
      jSONScanner0.config(feature0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "()C");
      ParserConfig parserConfig0 = new ParserConfig(false);
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("()C", parserConfig0, 1);
      defaultJSONParser0.handleResovleTask("()C");
      parserConfig0.clearDeserializers();
      LinkedHashSet<DecimalFormat> linkedHashSet0 = new LinkedHashSet<DecimalFormat>();
      StringCharacterIterator stringCharacterIterator0 = new StringCharacterIterator("[e", 0);
      Class<ChoiceFormat> class1 = ChoiceFormat.class;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArray(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.text.ChoiceFormat
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '{', 3879);
      char[] charArray1 = new char[9];
      charArray1[0] = 'W';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      charArray1[1] = '{';
      charArray1[2] = '{';
      charArray1[3] = '\'';
      charArray1[4] = '{';
      charArray1[5] = 'W';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray1, 3879, 2440);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      ClassLoader.getSystemClassLoader();
      defaultJSONParser0.popContext();
      ParserConfig parserConfig0 = new ParserConfig(true);
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[9];
      charArray0[1] = '{';
      charArray0[2] = '{';
      charArray0[3] = '\'';
      charArray0[4] = '{';
      charArray0[5] = 'W';
      charArray0[6] = '\'';
      charArray0[7] = '\'';
      charArray0[8] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 12, 'W');
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0);
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser(defaultJSONParser0.lexer, parserConfig0);
      jSONReaderScanner0.scanType("fastjson.parser.autoTypeSupport");
      Point point0 = new Point(1, 0);
      PropertyProcessable propertyProcessable0 = mock(PropertyProcessable.class, new ViolatedAssumptionAnswer());
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        defaultJSONParser0.parse(propertyProcessable0, (Object) mockHijrahDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '{';
      charArray0[1] = '{';
      charArray0[2] = '{';
      charArray0[3] = '\'';
      charArray0[4] = '{';
      charArray0[5] = 'W';
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("()C", parserConfig0, 12);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      // Undeclared exception!
      try { 
        defaultJSONParser0.parseArrayWithType(parameterizedTypeImpl0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but (, pos 1, json : ()C
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }
}
