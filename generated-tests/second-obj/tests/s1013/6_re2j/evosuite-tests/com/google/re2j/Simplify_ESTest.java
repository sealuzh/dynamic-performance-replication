/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:51:10 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import com.google.re2j.Simplify;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Simplify_ESTest extends Simplify_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp2;
      Regexp regexp3 = Simplify.simplify(regexp0);
      regexpArray0[7] = regexp3;
      regexp0.subs = regexpArray0;
      regexp0.max = (-2691);
      Regexp regexp4 = new Regexp(regexp_Op0);
      Simplify.simplify(regexp0);
      Regexp regexp5 = new Regexp(regexp_Op0);
      Regexp regexp6 = Simplify.simplify(regexp1);
      assertFalse(regexp6.equals((Object)regexp0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      Regexp regexp2 = new Regexp(regexp_Op0);
      regexpArray0[4] = regexp2;
      regexpArray0[7] = regexp1;
      regexp0.subs = regexpArray0;
      regexp0.max = 1;
      Regexp regexp3 = new Regexp(regexp_Op0);
      Regexp regexp4 = Simplify.simplify(regexp3);
      assertNotNull(regexp4);
      
      regexp4.name = "";
      Regexp regexp5 = Simplify.simplify(regexp0);
      assertNotNull(regexp5);
      
      Regexp regexp6 = new Regexp(regexp_Op0);
      Regexp regexp7 = Simplify.simplify(regexp4);
      assertTrue(regexp4.equals((Object)regexp5));
      assertTrue(regexp7.equals((Object)regexp5));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 7;
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp1 = Simplify.simplify(regexp0);
      regexpArray0[0] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp regexp2 = Simplify.simplify(regexp0);
      regexpArray0[6] = regexpArray0[1];
      regexpArray0[7] = regexp0;
      regexp0.min = 7;
      regexp2.name = "_.h!";
      regexp0.subs = regexpArray0;
      Regexp regexp3 = new Regexp(regexp_Op0);
      Regexp regexp4 = Simplify.simplify(regexp0);
      Regexp[] regexpArray1 = new Regexp[3];
      regexpArray1[0] = regexp0;
      regexp4.flags = 107;
      regexp2.op = regexp_Op0;
      regexpArray1[1] = regexp2;
      regexpArray1[2] = regexp2;
      regexp4.subs = regexpArray1;
      Simplify.simplify(regexpArray0[4]);
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp5 = new Regexp(regexp_Op1);
      Regexp regexp6 = new Regexp(regexp_Op0);
      Simplify.simplify((Regexp) null);
      Regexp.Op regexp_Op2 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp7 = new Regexp(regexp_Op2);
      Simplify.simplify(regexp4);
      Simplify.simplify(regexp6);
      Regexp regexp8 = Simplify.simplify(regexp0);
      Simplify.simplify(regexp6);
      Simplify.simplify(regexp8);
      Simplify.simplify(regexp1);
      Regexp regexp9 = Simplify.simplify((Regexp) null);
      assertNull(regexp9);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 1;
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp1 = Simplify.simplify(regexp0);
      regexpArray0[1] = regexp1;
      regexpArray0[1] = regexp1;
      regexpArray0[3] = regexp0;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[4] = regexp2;
      regexpArray0[5] = regexp0;
      regexpArray0[6] = regexp1;
      Regexp regexp3 = Simplify.simplify(regexp1);
      regexpArray0[7] = regexp3;
      regexp0.min = 1;
      regexp0.subs = regexpArray0;
      regexp0.max = (-2670);
      Regexp regexp4 = Simplify.simplify(regexp0);
      Regexp regexp5 = Simplify.simplify(regexp4);
      regexp5.subs = regexpArray0;
      Simplify.simplify(regexp2);
      Regexp regexp6 = new Regexp(regexp_Op0);
      Regexp regexp7 = Simplify.simplify(regexp1);
      Simplify.simplify(regexp5);
      Simplify.simplify(regexp7);
      Regexp regexp8 = Simplify.simplify(regexpArray0[0]);
      Regexp regexp9 = null;
      try {
        regexp9 = new Regexp(regexp8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = 1;
      Regexp[] regexpArray0 = new Regexp[13];
      Regexp regexp1 = Simplify.simplify(regexp0);
      regexpArray0[0] = regexp1;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp0;
      Regexp regexp2 = new Regexp(regexp1);
      regexpArray0[6] = regexp0;
      Regexp regexp3 = new Regexp(regexp_Op0);
      regexpArray0[7] = regexp3;
      regexp0.min = 1;
      regexp0.subs = regexpArray0;
      Simplify.simplify(regexpArray0[5]);
      Regexp regexp4 = new Regexp(regexp2);
      Regexp regexp5 = new Regexp(regexp_Op0);
      Simplify.simplify(regexp3);
      Regexp regexp6 = Simplify.simplify(regexp0);
      Regexp regexp7 = Simplify.simplify(regexp6);
      assertSame(regexp7, regexp6);
      
      Regexp regexp8 = new Regexp(regexp4);
      assertFalse(regexp4.equals((Object)regexp7));
      assertFalse(regexp8.equals((Object)regexp6));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ANY_CHAR_NOT_NL;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.op = regexp_Op0;
      Regexp regexp2 = Simplify.simplify(regexp1);
      regexp0.flags = 4;
      Regexp[] regexpArray0 = new Regexp[1];
      regexpArray0[0] = regexp0;
      regexp0.max = 21;
      regexp1.subs = regexpArray0;
      Regexp regexp3 = Simplify.simplify(regexp2);
      regexp3.reinit();
      regexp3.min = 66;
      regexp3.toString();
      Simplify.simplify(regexp3);
      regexp3.name = "4J|A_&";
      Regexp regexp4 = Simplify.simplify(regexp3);
      regexp4.subs = regexpArray0;
      Regexp regexp5 = Simplify.simplify(regexp4);
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      int[] intArray0 = new int[4];
      intArray0[0] = 4;
      intArray0[1] = 21;
      intArray0[2] = 66;
      intArray0[3] = 66;
      regexp5.runes = intArray0;
      regexp5.op = regexp_Op1;
      Regexp regexp6 = Simplify.simplify(regexp5);
      assertSame(regexp6, regexp1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.flags = (-4);
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp1 = Simplify.simplify(regexp0);
      regexpArray0[0] = regexp1;
      regexpArray0[3] = regexp0;
      Regexp regexp2 = Simplify.simplify(regexpArray0[2]);
      regexpArray0[3] = regexp0;
      regexpArray0[6] = regexp2;
      regexp0.min = (-4);
      regexp0.subs = regexpArray0;
      Regexp regexp3 = new Regexp(regexp_Op0);
      Regexp regexp4 = Simplify.simplify(regexp0);
      Regexp[] regexpArray1 = new Regexp[19];
      regexp3.subs = regexpArray0;
      regexpArray1[0] = regexp0;
      regexpArray1[1] = null;
      regexpArray1[2] = null;
      regexp4.reinit();
      regexp4.subs = regexpArray1;
      Simplify.simplify(regexp3);
      Simplify.simplify(regexp4);
      Regexp regexp5 = new Regexp(regexp_Op0);
      assertFalse(regexp5.equals((Object)regexp4));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[22];
      regexpArray0[2] = regexp0;
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[5] = regexp0;
      regexp0.min = 1;
      regexpArray0[2] = regexp0;
      regexpArray0[7] = regexp0;
      regexp0.min = 1;
      regexp0.subs = regexpArray0;
      regexp0.flags = 1;
      Regexp regexp2 = Simplify.simplify(regexp1);
      Regexp regexp3 = Simplify.simplify(regexp0);
      Regexp regexp4 = Simplify.simplify(regexp0);
      regexp4.cap = 1;
      Simplify.simplify(regexp3);
      regexp4.equals(regexp0.subs);
      Regexp.Op regexp_Op1 = Regexp.Op.ANY_CHAR;
      Regexp regexp5 = new Regexp(regexp_Op1);
      Regexp regexp6 = new Regexp(regexp2);
      Simplify.simplify(regexp0);
      regexp0.max = 1;
      Regexp regexp7 = new Regexp(regexp0);
      Regexp regexp8 = Simplify.simplify(regexp0);
      assertNull(regexp8);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      int int0 = (-4);
      regexp0.flags = (-4);
      Regexp[] regexpArray0 = new Regexp[8];
      Regexp regexp1 = new Regexp(regexp0);
      regexpArray0[0] = regexp1;
      regexpArray0[2] = regexp0;
      regexpArray0[3] = regexp0;
      Regexp regexp2 = Simplify.simplify(regexp0);
      regexpArray0[5] = regexp0;
      regexpArray0[7] = regexp0;
      regexp0.min = (-4);
      regexp0.subs = regexpArray0;
      Regexp regexp3 = new Regexp(regexp_Op0);
      Regexp regexp4 = Simplify.simplify(regexp0);
      Regexp[] regexpArray1 = new Regexp[3];
      regexpArray1[0] = regexp0;
      regexpArray1[1] = regexp2;
      regexpArray1[2] = regexp2;
      regexp4.subs = regexpArray1;
      Simplify.simplify(regexp3);
      Simplify.simplify(regexp4);
      Simplify.simplify(regexpArray0[4]);
      Regexp.Op regexp_Op1 = Regexp.Op.CONCAT;
      Regexp regexp5 = new Regexp(regexp_Op1);
      // Undeclared exception!
      try { 
        regexp1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[7] = regexpArray0[2];
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      Regexp[] regexpArray1 = new Regexp[22];
      regexpArray1[2] = regexpArray0[2];
      regexp1.subs = regexpArray1;
      regexp1.max = (-1);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }
}
