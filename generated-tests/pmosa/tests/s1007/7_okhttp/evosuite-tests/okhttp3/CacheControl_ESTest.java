/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 08:58:30 GMT 2018
 */

package okhttp3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import okhttp3.CacheControl;
import okhttp3.Headers;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CacheControl_ESTest extends CacheControl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noStore();
      CacheControl cacheControl0 = cacheControl_Builder2.build();
      cacheControl0.toString();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.maxStale(Integer.MAX_VALUE, timeUnit0);
      cacheControl_Builder3.build();
      Headers.Builder headers_Builder0 = new Headers.Builder();
      // Undeclared exception!
      try { 
        headers_Builder0.add("@1xa7rbDEdE^o,C R", "xpo-5aoNca]&u .Yv");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected char 0x20 at 15 in header name: @1xa7rbDEdE^o,C R
         //
         verifyException("okhttp3.Headers$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.maxAge(34, timeUnit0);
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxStale(3714, timeUnit1);
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder2);
      boolean boolean0 = cacheControl0.mustRevalidate();
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.isPrivate());
      assertEquals(2040, cacheControl0.maxAgeSeconds());
      assertEquals(3, cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noTransform();
      int int0 = 1;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.maxAge(1, timeUnit0);
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.onlyIfCached();
      int int1 = (-836);
      TimeUnit timeUnit1 = TimeUnit.MICROSECONDS;
      // Undeclared exception!
      try { 
        cacheControl_Builder3.maxStale((-836), timeUnit1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -836
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(2, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noCache();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.maxStale(2, timeUnit0);
      assertSame(cacheControl_Builder3, cacheControl_Builder1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      cacheControl_Builder0.maxStale(2496, timeUnit0);
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.minFresh(2496, timeUnit0);
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noCache();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder1.maxStale(1, timeUnit0);
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.noCache();
      CacheControl cacheControl0 = new CacheControl(cacheControl_Builder4);
      cacheControl0.FORCE_NETWORK.headerValue = "";
      cacheControl0.minFreshSeconds();
      cacheControl0.mustRevalidate();
      cacheControl0.onlyIfCached();
      cacheControl0.noCache();
      cacheControl0.noStore();
      cacheControl0.noStore();
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder0.noTransform();
      assertSame(cacheControl_Builder5, cacheControl_Builder2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      cacheControl_Builder0.noCache();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      cacheControl_Builder1.noCache();
      cacheControl_Builder1.onlyIfCached();
      CacheControl cacheControl0 = CacheControl.FORCE_NETWORK;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      CacheControl.parse(headers0);
      cacheControl1.FORCE_CACHE.headerValue = null;
      cacheControl1.FORCE_NETWORK.headerValue = null;
      cacheControl0.noTransform();
      cacheControl0.sMaxAgeSeconds();
      int int0 = cacheControl1.sMaxAgeSeconds();
      assertFalse(cacheControl1.mustRevalidate());
      assertFalse(cacheControl1.noCache());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.noStore());
      assertFalse(cacheControl1.isPrivate());
      assertEquals((-1), int0);
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.isPublic());
      assertEquals((-1), cacheControl1.minFreshSeconds());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      boolean boolean0 = cacheControl0.isPrivate();
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
      assertFalse(boolean0);
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noTransform());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.noCache());
      assertFalse(cacheControl0.isPublic());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.mustRevalidate());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Headers headers0 = Headers.of(stringArray0);
      headers0.newBuilder();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      CacheControl.parse(headers0);
      cacheControl1.headerValue = "2|;^mIS}'=[V# 0<n4j";
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      cacheControl2.FORCE_NETWORK.headerValue = "Expected alternating header names and values";
      int int0 = cacheControl0.maxStaleSeconds();
      assertEquals((-1), int0);
      
      boolean boolean0 = cacheControl2.isPublic();
      assertFalse(boolean0);
      assertFalse(cacheControl2.isPrivate());
      assertEquals((-1), cacheControl2.minFreshSeconds());
      assertEquals((-1), cacheControl2.sMaxAgeSeconds());
      assertFalse(cacheControl2.mustRevalidate());
      assertFalse(cacheControl2.noCache());
      assertFalse(cacheControl2.noStore());
      assertFalse(cacheControl2.noTransform());
      assertFalse(cacheControl2.onlyIfCached());
      assertEquals((-1), cacheControl2.maxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      CacheControl.Builder cacheControl_Builder1 = cacheControl_Builder0.noCache();
      CacheControl.Builder cacheControl_Builder2 = cacheControl_Builder1.noStore();
      CacheControl.Builder cacheControl_Builder3 = cacheControl_Builder2.onlyIfCached();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      CacheControl.Builder cacheControl_Builder4 = cacheControl_Builder3.minFresh(0, timeUnit0);
      cacheControl_Builder1.onlyIfCached();
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      cacheControl_Builder4.maxAge(0, timeUnit1);
      CacheControl cacheControl0 = cacheControl_Builder1.build();
      cacheControl0.FORCE_CACHE.toString();
      cacheControl0.toString();
      TimeUnit timeUnit2 = TimeUnit.MILLISECONDS;
      CacheControl.Builder cacheControl_Builder5 = cacheControl_Builder2.maxStale(34, timeUnit2);
      TimeUnit timeUnit3 = TimeUnit.MINUTES;
      CacheControl.Builder cacheControl_Builder6 = cacheControl_Builder4.maxStale(0, timeUnit3);
      cacheControl_Builder6.noTransform();
      cacheControl_Builder6.noCache();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl1.FORCE_CACHE.headerValue = "h5:JP";
      cacheControl1.sMaxAgeSeconds();
      cacheControl1.noTransform();
      cacheControl1.isPublic();
      cacheControl1.headerValue = "5_)";
      cacheControl1.maxStaleSeconds();
      cacheControl1.minFreshSeconds();
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      cacheControl2.minFreshSeconds();
      cacheControl_Builder5.build();
      TimeUnit timeUnit4 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        cacheControl_Builder5.maxStale((-1), timeUnit4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.add("lr,TOh&i1Dk3W", "lr,TOh&i1Dk3W");
      Headers headers0 = new Headers(headers_Builder0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheControl cacheControl0 = CacheControl.parse(headers0);
      assertFalse(cacheControl0.mustRevalidate());
      assertEquals((-1), cacheControl0.maxAgeSeconds());
      assertFalse(cacheControl0.noCache());
      assertEquals((-1), cacheControl0.minFreshSeconds());
      assertFalse(cacheControl0.isPublic());
      assertEquals((-1), cacheControl0.maxStaleSeconds());
      assertFalse(cacheControl0.isPrivate());
      assertFalse(cacheControl0.noTransform());
      assertFalse(cacheControl0.noStore());
      assertFalse(cacheControl0.onlyIfCached());
      assertEquals((-1), cacheControl0.sMaxAgeSeconds());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Headers headers0 = Headers.of((Map<String, String>) hashMap0);
      cacheControl0.headerValue = "\"{?[S/AaQv";
      Headers headers1 = Headers.of((Map<String, String>) hashMap0);
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      cacheControl1.FORCE_NETWORK.toString();
      headers1.toString();
      CacheControl cacheControl2 = CacheControl.parse(headers1);
      cacheControl0.toString();
      headers0.toString();
      CacheControl cacheControl3 = CacheControl.parse(headers0);
      cacheControl3.FORCE_CACHE.toString();
      CacheControl cacheControl4 = CacheControl.parse(headers1);
      cacheControl4.FORCE_NETWORK.toString();
      CacheControl cacheControl5 = CacheControl.parse(headers0);
      cacheControl5.FORCE_NETWORK.headerValue = "";
      cacheControl0.FORCE_CACHE.toString();
      cacheControl0.FORCE_NETWORK.toString();
      CacheControl cacheControl6 = CacheControl.parse(headers1);
      CacheControl cacheControl7 = CacheControl.parse(headers0);
      cacheControl6.toString();
      cacheControl7.FORCE_CACHE.toString();
      cacheControl6.toString();
      cacheControl0.isPrivate();
      CacheControl.parse(headers1);
      cacheControl0.sMaxAgeSeconds();
      cacheControl3.maxAgeSeconds();
      cacheControl2.maxStaleSeconds();
      cacheControl6.maxStaleSeconds();
      cacheControl4.isPublic();
      cacheControl7.minFreshSeconds();
      cacheControl4.mustRevalidate();
      CacheControl.Builder cacheControl_Builder0 = new CacheControl.Builder();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      // Undeclared exception!
      try { 
        cacheControl_Builder0.maxStale((-1), timeUnit0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxStale < 0: -1
         //
         verifyException("okhttp3.CacheControl$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.add("cache-control", "fffe");
      Headers headers0 = new Headers(headers_Builder0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.isPublic());
      assertFalse(cacheControl1.mustRevalidate());
      assertFalse(cacheControl1.isPrivate());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.noStore());
      assertFalse(cacheControl1.noTransform());
      assertFalse(cacheControl1.onlyIfCached());
      assertFalse(cacheControl1.noCache());
      assertEquals((-1), cacheControl1.minFreshSeconds());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.add("public", "lr,TOV&i1Dk3W");
      headers_Builder0.add("cache-control", "lr,TOV&i1Dk3W");
      Headers.Builder headers_Builder1 = headers_Builder0.addLenient((String) null, "`w.pWN  EK5OF_WO!=");
      Headers headers0 = new Headers(headers_Builder1);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      headers0.getDate("UTF-8");
      CacheControl cacheControl1 = CacheControl.FORCE_CACHE;
      cacheControl0.toString();
      cacheControl0.toString();
      // Undeclared exception!
      try { 
        CacheControl.parse(headers0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.add("cache-control", "lr,TOV&i1Dk3W");
      Headers headers0 = new Headers(headers_Builder0);
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      CacheControl cacheControl1 = CacheControl.FORCE_CACHE;
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      assertFalse(cacheControl2.noTransform());
      assertFalse(cacheControl2.noCache());
      assertEquals((-1), cacheControl2.sMaxAgeSeconds());
      assertFalse(cacheControl2.onlyIfCached());
      assertEquals((-1), cacheControl2.maxAgeSeconds());
      assertEquals((-1), cacheControl2.maxStaleSeconds());
      assertEquals((-1), cacheControl2.minFreshSeconds());
      assertFalse(cacheControl2.noStore());
      assertFalse(cacheControl2.mustRevalidate());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.add("cache-control", "F@=]bRj%6p(");
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      String string0 = cacheControl0.toString();
      assertEquals("max-stale=2147483647, only-if-cached", string0);
      assertNotNull(string0);
      
      Headers headers0 = headers_Builder0.build();
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertFalse(cacheControl1.noTransform());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.isPrivate());
      assertFalse(cacheControl1.isPublic());
      assertFalse(cacheControl1.noStore());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.noCache());
      assertEquals((-1), cacheControl1.maxStaleSeconds());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      headers_Builder0.add("cache-control", "F@=]bRj%6p(");
      Headers headers0 = new Headers(headers_Builder0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      String string0 = cacheControl0.toString();
      assertEquals("max-stale=2147483647, only-if-cached", string0);
      
      CacheControl cacheControl1 = CacheControl.parse(headers0);
      assertEquals((-1), cacheControl1.maxStaleSeconds());
      assertFalse(cacheControl1.isPublic());
      assertEquals((-1), cacheControl1.maxAgeSeconds());
      assertFalse(cacheControl1.noCache());
      assertEquals((-1), cacheControl1.minFreshSeconds());
      assertFalse(cacheControl1.noTransform());
      assertFalse(cacheControl1.onlyIfCached());
      assertFalse(cacheControl1.mustRevalidate());
      assertEquals((-1), cacheControl1.sMaxAgeSeconds());
      assertFalse(cacheControl1.isPrivate());
      assertFalse(cacheControl1.noStore());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Headers.Builder headers_Builder0 = new Headers.Builder();
      Headers.Builder headers_Builder1 = headers_Builder0.add("cache-control", "max-stale=");
      headers_Builder1.add("cache-control", "max-stale=");
      Headers headers0 = new Headers(headers_Builder1);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      CacheControl cacheControl0 = CacheControl.FORCE_CACHE;
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      CacheControl cacheControl1 = CacheControl.FORCE_CACHE;
      CacheControl cacheControl2 = CacheControl.parse(headers0);
      assertEquals((-1), cacheControl2.sMaxAgeSeconds());
      assertFalse(cacheControl2.noCache());
      assertFalse(cacheControl2.onlyIfCached());
      assertEquals((-1), cacheControl2.maxAgeSeconds());
      assertFalse(cacheControl2.noTransform());
      assertEquals((-1), cacheControl2.minFreshSeconds());
      assertFalse(cacheControl2.isPrivate());
      assertEquals(Integer.MAX_VALUE, cacheControl2.maxStaleSeconds());
      assertFalse(cacheControl2.noStore());
  }
}
