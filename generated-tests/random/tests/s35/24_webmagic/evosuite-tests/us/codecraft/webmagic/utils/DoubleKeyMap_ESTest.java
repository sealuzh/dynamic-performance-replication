/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 20:40:17 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Map<Object, Integer>, Map<HashMap<String, String>, Integer>> hashMap0 = new HashMap<Map<Object, Integer>, Map<HashMap<String, String>, Integer>>();
      DoubleKeyMap<Map<Object, Integer>, HashMap<String, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, HashMap<String, String>, Integer>(hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put((Map<Object, Integer>) hashMap1, hashMap2, integer0);
      Map<HashMap<String, String>, Integer> map0 = doubleKeyMap0.get((Map<Object, Integer>) hashMap1);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, Object>, Integer, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Integer, Object>((Map<Map<Object, Object>, Map<Integer, Object>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Object, Map<HashMap<Object, Integer>, Object>>, Map<Object, Object>, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<HashMap<Object, Integer>, Object>>, Map<Object, Object>, String>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-718));
      HashMap<String, Map<String, String>> hashMap0 = new HashMap<String, Map<String, String>>();
      DoubleKeyMap<String, String, String> doubleKeyMap0 = new DoubleKeyMap<String, String, String>(hashMap0);
      Map<Integer, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>(map0, class0);
      Map<Object, Object> map1 = doubleKeyMap1.remove(integer0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(hashMap0);
      Map<Integer, Object> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Integer, Map<Object, Integer>, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, Integer>, Integer>((Map<Integer, Map<Map<Object, Integer>, Integer>>) null);
      Integer integer0 = new Integer((-952));
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      doubleKeyMap0.put(integer0, (Map<Object, Integer>) hashMap0, integer0);
      Integer integer1 = doubleKeyMap0.remove(integer0, (Map<Object, Integer>) null);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-952));
      HashMap<Object, Map<Integer, Object>> hashMap0 = new HashMap<Object, Map<Integer, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(hashMap0, class0);
      Object object0 = doubleKeyMap0.remove((Object) null, integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Map<Object, Integer>, Map<HashMap<String, String>, Integer>> hashMap0 = new HashMap<Map<Object, Integer>, Map<HashMap<String, String>, Integer>>();
      DoubleKeyMap<Map<Object, Integer>, HashMap<String, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Integer>, HashMap<String, String>, Integer>(hashMap0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      HashMap<Object, Map<String, HashMap<Object, Map<HashMap<Object, Integer>, Object>>>> hashMap2 = new HashMap<Object, Map<String, HashMap<Object, Map<HashMap<Object, Integer>, Object>>>>();
      DoubleKeyMap<Object, String, HashMap<Object, Map<HashMap<Object, Integer>, Object>>> doubleKeyMap1 = new DoubleKeyMap<Object, String, HashMap<Object, Map<HashMap<Object, Integer>, Object>>>(hashMap2);
      Map<HashMap<String, String>, Integer> map0 = doubleKeyMap1.newMap();
      hashMap0.put(hashMap1, map0);
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      Integer integer0 = new Integer(0);
      Integer integer1 = doubleKeyMap0.put((Map<Object, Integer>) hashMap1, hashMap3, integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>(class0);
      Integer integer0 = new Integer((-323));
      Object object0 = doubleKeyMap0.get((Object) class0, integer0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<HashMap<Object, Object>, Map<Map<HashMap<Object, Integer>, Object>, Map<HashMap<Object, Integer>, Object>>> hashMap0 = new HashMap<HashMap<Object, Object>, Map<Map<HashMap<Object, Integer>, Object>, Map<HashMap<Object, Integer>, Object>>>();
      DoubleKeyMap<HashMap<Object, Object>, Map<HashMap<Object, Integer>, Object>, Map<HashMap<Object, Integer>, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, Map<HashMap<Object, Integer>, Object>, Map<HashMap<Object, Integer>, Object>>(hashMap0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      HashMap<Map<HashMap<Object, Integer>, Object>, Map<Object, HashMap<String, String>>> hashMap2 = new HashMap<Map<HashMap<Object, Integer>, Object>, Map<Object, HashMap<String, String>>>();
      DoubleKeyMap<Map<HashMap<Object, Integer>, Object>, Object, HashMap<String, String>> doubleKeyMap1 = new DoubleKeyMap<Map<HashMap<Object, Integer>, Object>, Object, HashMap<String, String>>(hashMap2);
      Map<Map<HashMap<Object, Integer>, Object>, Map<HashMap<Object, Integer>, Object>> map0 = doubleKeyMap1.newMap();
      hashMap0.put(hashMap1, map0);
      HashMap<HashMap<Object, Integer>, Object> hashMap3 = new HashMap<HashMap<Object, Integer>, Object>();
      doubleKeyMap0.remove(hashMap1, (Map<HashMap<Object, Integer>, Object>) hashMap3);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>();
      Integer integer0 = new Integer(2674);
      doubleKeyMap0.put((String) null, (String) null, integer0);
      Integer integer1 = doubleKeyMap0.get((String) null, "");
      assertNull(integer1);
  }
}
