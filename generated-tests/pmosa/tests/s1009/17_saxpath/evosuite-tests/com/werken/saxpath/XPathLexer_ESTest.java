/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 15:50:20 GMT 2018
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("64hMBxqU");
      xPathLexer0.endPosition();
      Token token0 = xPathLexer0.plus();
      assertEquals("6", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("4", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("hM", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("BxqU", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      xPathLexer0.isIdentifierChar('\'');
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      xPathLexer0.consume();
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.consume();
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      char char0 = xPathLexer0.LA(8);
      assertEquals('\uFFFF', char0);
      
      Token token9 = xPathLexer0.number();
      assertEquals(30, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setXPath("");
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      xPathLexer0.consume((-1));
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.div();
      xPathLexer0.leftBracket();
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token2);
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      xPathLexer0.consume((-1));
      xPathLexer0.mod();
      xPathLexer0.hasMoreChars();
      xPathLexer0.div();
      xPathLexer0.getXPath();
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.number();
      xPathLexer0.operatorName();
      xPathLexer0.minus();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.at();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      char char0 = xPathLexer0.LA(0);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.not();
      xPathLexer0.leftBracket();
      xPathLexer0.not();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertNotNull(token3);
      
      xPathLexer0.whitespace();
      xPathLexer0.or();
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('j');
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.dollar();
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.whitespace();
      xPathLexer0.getPreviousToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      Token token8 = xPathLexer0.minus();
      assertEquals(6, token8.getTokenType());
      
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      xPathLexer0.setXPath("");
      boolean boolean1 = xPathLexer0.isIdentifierChar('~');
      assertFalse(boolean1);
      
      boolean boolean2 = xPathLexer0.isIdentifierChar('j');
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.getPreviousToken();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer0.and();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.operatorName();
      boolean boolean0 = xPathLexer0.isIdentifierChar('6');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.identifier();
      xPathLexer0.consume(0);
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      xPathLexer0.setXPath("&jLgkB9*L&d%*M");
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("&", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      assertNotNull(token5);
      
      xPathLexer0.isIdentifierChar('n');
      Token token6 = xPathLexer0.slashes();
      assertEquals("*", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      xPathLexer0.hasMoreChars();
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      assertEquals("L", token7.getTokenText());
      
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      assertEquals("&", token8.getTokenText());
      
      xPathLexer0.or();
      Token token9 = xPathLexer0.at();
      assertEquals("d", token9.getTokenText());
      assertEquals(16, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.mod();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.colon();
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.whitespace();
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      xPathLexer0.pipe();
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('5');
      xPathLexer0.pipe();
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertNull(token9);
      
      xPathLexer0.consume();
      xPathLexer0.setXPath("");
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer0.pipe();
      assertEquals(17, token11.getTokenType());
      
      xPathLexer0.consume(30);
      xPathLexer0.consume(30);
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.whitespace();
      Token token12 = xPathLexer0.leftBracket();
      assertEquals(3, token12.getTokenType());
      
      Token token13 = xPathLexer0.whitespace();
      assertEquals((-2), token13.getTokenType());
      
      Token token14 = xPathLexer0.dollar();
      assertEquals(26, token14.getTokenType());
      
      boolean boolean1 = xPathLexer0.isIdentifierChar('5');
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      Token token0 = xPathLexer0.dots();
      assertEquals("S", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("N", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      xPathLexer0.star();
      Token token2 = xPathLexer0.comma();
      assertEquals("!", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      xPathLexer0.number();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("'", token3.getTokenText());
      
      xPathLexer0.consume(0);
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals("", token5.getTokenText());
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.mod();
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertNull(token6);
      
      xPathLexer0.isIdentifierStartChar('X');
      Token token7 = xPathLexer0.pipe();
      assertEquals("+", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
      
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume((-412));
      xPathLexer0.setXPath("@J");
      Token token2 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token2);
      assertEquals(16, token2.getTokenType());
      assertEquals("@", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("J", token3.getTokenText());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.literal();
      assertNull(token5);
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('1');
      assertTrue(boolean0);
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("64hMBxqU");
      int int0 = xPathLexer0.endPosition();
      assertEquals(8, int0);
      
      Token token0 = xPathLexer0.plus();
      assertEquals("6", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("4", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("hM", token2.getTokenText());
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.slashes();
      assertEquals("B", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals("x", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
      
      xPathLexer0.isIdentifierChar('\'');
      Token token5 = xPathLexer0.literal();
      assertNull(token5);
      
      xPathLexer0.consume();
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.consume();
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      char char0 = xPathLexer0.LA(8);
      assertEquals('\uFFFF', char0);
      
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.identifier();
      xPathLexer0.consume(0);
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      
      xPathLexer0.setXPath("&jLgkB9*L&d%*M");
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals("jLgkB9", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      assertNotNull(token4);
      
      xPathLexer0.isIdentifierChar('n');
      Token token5 = xPathLexer0.literal();
      assertEquals("L&d%", token5.getTokenText());
      assertEquals(27, token5.getTokenType());
      assertNotNull(token5);
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("&jLgkB9*L&d%*M");
      Token token6 = xPathLexer1.rightBracket();
      assertEquals(4, token6.getTokenType());
      assertEquals("&", token6.getTokenText());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer("&jLgkB9*L&d%*M");
      xPathLexer2.mod();
      Token token7 = xPathLexer2.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      Token token8 = xPathLexer2.dots();
      assertEquals(13, token8.getTokenType());
      assertEquals("j", token8.getTokenText());
      
      Token token9 = xPathLexer2.dollar();
      assertEquals(26, token9.getTokenType());
      
      boolean boolean0 = xPathLexer1.isIdentifierChar('@');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h2?ks");
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.number();
      assertEquals("2", token0.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.getXPath();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("k", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.identifier();
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      xPathLexer0.and();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      xPathLexer0.whitespace();
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.whitespace();
      assertEquals("", token8.getTokenText());
      assertEquals((-2), token8.getTokenType());
      
      xPathLexer0.leftParen();
      Token token9 = xPathLexer0.number();
      assertEquals(30, token9.getTokenType());
      
      Token token10 = xPathLexer0.leftBracket();
      assertEquals(3, token10.getTokenType());
      
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      Token token0 = xPathLexer0.not();
      assertEquals("~", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token1);
      
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (15) (S)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.dots();
      assertEquals("&", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals("I", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("W", token4.getTokenText());
      
      xPathLexer0.leftBracket();
      char char0 = xPathLexer0.LA(4831);
      assertEquals('\uFFFF', char0);
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("w", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      Token token0 = xPathLexer0.dots();
      assertEquals("S", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("c", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      xPathLexer0.star();
      Token token3 = xPathLexer0.comma();
      assertEquals("'", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      xPathLexer0.number();
      Token token4 = xPathLexer0.star();
      assertEquals("c", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.consume(0);
      Token token5 = xPathLexer0.nextToken();
      assertEquals(5, token5.getTokenType());
      assertEquals("+", token5.getTokenText());
      
      Token token6 = xPathLexer0.number();
      assertEquals("", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.mod();
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals("dIB", token7.getTokenText());
      
      xPathLexer0.isIdentifierChar('1');
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token8 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("64hMBxqU");
      xPathLexer0.endPosition();
      xPathLexer0.rightParen();
      xPathLexer0.plus();
      xPathLexer0.rightBracket();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.colon();
      xPathLexer0.isIdentifierChar('\'');
      xPathLexer0.literal();
      xPathLexer0.consume();
      xPathLexer0.comma();
      xPathLexer0.identifier();
      xPathLexer0.consume();
      xPathLexer0.notEquals();
      xPathLexer0.LA(8);
      xPathLexer0.number();
      xPathLexer0.consume(8);
      assertEquals("64hMBxqU", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer0.and();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.number();
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("8'zQ~D");
      xPathLexer0.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer1.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("8", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      int int0 = xPathLexer3.currentPosition();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("64hMBxqU");
      xPathLexer0.endPosition();
      Token token0 = xPathLexer0.plus();
      assertEquals("6", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("4", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("h", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("MBxqU", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      xPathLexer0.isIdentifierChar('\'');
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      xPathLexer0.consume();
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.consume();
      xPathLexer0.notEquals();
      char char0 = xPathLexer0.LA(8);
      assertEquals('\uFFFF', char0);
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      Token token0 = xPathLexer0.dots();
      assertEquals("S", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("N", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("c!", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.star();
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals("c", token3.getTokenText());
      
      Token token4 = xPathLexer0.number();
      assertEquals("", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      assertEquals("+", token5.getTokenText());
      
      xPathLexer0.consume(0);
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("dIB", token6.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.isIdentifierStartChar('X');
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("W]&8+$8O|rW B;FK");
      xPathLexer1.relationalOperator();
      xPathLexer1.setXPath("1.Ny!h}L\"0P5_o+\"");
      Token token1 = xPathLexer1.nextToken();
      assertEquals(31, token1.getTokenType());
      assertEquals("1.", token1.getTokenText());
      
      xPathLexer1.setPreviousToken((Token) null);
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer1.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer1.literal();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      xPathLexer1.isIdentifierChar('X');
      Token token5 = xPathLexer1.identifierOrOperatorName();
      assertEquals("", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      Token token0 = xPathLexer0.dots();
      assertEquals("S", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("c", token2.getTokenText());
      
      Token token3 = xPathLexer0.star();
      assertEquals("!", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('Y');
      assertTrue(boolean0);
      
      XPathLexer xPathLexer1 = new XPathLexer("SNc!'c+dIB");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.pipe();
      assertEquals(17, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      Token token0 = xPathLexer0.not();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (23) (~)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.dots();
      Token token1 = xPathLexer0.at();
      assertEquals("&", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("I", token2.getTokenText());
      
      xPathLexer0.leftBracket();
      char char0 = xPathLexer0.LA(4831);
      assertEquals('\uFFFF', char0);
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      assertEquals("n", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(13, token4.getTokenType());
      assertEquals(".", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      Token token0 = xPathLexer0.dots();
      assertEquals("S", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("N", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("c", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("!", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.number();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("'", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifier();
      assertEquals(15, token6.getTokenType());
      assertEquals("c", token6.getTokenText());
      
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
      assertEquals("+", token7.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.isIdentifierChar('6');
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Mdc{ekJ$R}H");
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      Token token0 = xPathLexer0.not();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (23) (~)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.dots();
      assertEquals("S", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals("&", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("I", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("W", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("n.w", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!8RgYg");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("!", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      Token token0 = xPathLexer0.dots();
      assertEquals("S", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("N", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("c", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("!", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("'", token4.getTokenText());
      
      Token token5 = xPathLexer0.colon();
      assertEquals("c", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
      
      xPathLexer0.isIdentifierChar('d');
      xPathLexer0.or();
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      xPathLexer0.consume();
      xPathLexer0.setXPath("pXAB-#:}D!AxS7%");
      Token token7 = xPathLexer0.comma();
      assertEquals("p", token7.getTokenText());
      assertEquals(32, token7.getTokenType());
      
      Token token8 = xPathLexer0.identifier();
      assertEquals(15, token8.getTokenType());
      
      xPathLexer0.consume();
      Token token9 = xPathLexer0.notEquals();
      assertEquals(":}", token9.getTokenText());
      assertEquals(22, token9.getTokenType());
      
      xPathLexer0.LA(0);
      Token token10 = xPathLexer0.number();
      assertEquals(30, token10.getTokenType());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~O&IWn.w");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("~", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (15) (O)", string0);
      
      xPathLexer0.consume(0);
      Token token2 = xPathLexer0.nextToken();
      assertEquals("&IWn.w", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      assertEquals("", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.star();
      assertEquals("&", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertNull(token5);
      
      Token token6 = xPathLexer0.comma();
      assertEquals("I", token6.getTokenText());
      assertEquals(32, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      xPathLexer0.dots();
      xPathLexer0.dollar();
      xPathLexer0.star();
      xPathLexer0.star();
      xPathLexer0.colon();
      xPathLexer0.getPreviousToken();
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.isIdentifierChar('.');
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      Token token0 = xPathLexer0.not();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (23) (~)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.nextToken();
      assertEquals("S&IWn.w", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      Token token4 = xPathLexer1.nextToken();
      assertEquals(2, token4.getTokenType());
      assertEquals(")", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      xPathLexer0.dots();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.star();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("!", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.star();
      xPathLexer0.consume(0);
      xPathLexer0.setPreviousToken(token0);
      assertEquals("N", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("SNc!'c+dIB");
      Token token3 = xPathLexer1.dots();
      assertEquals("S", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.at();
      assertEquals("c", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals("+", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      assertEquals("d", token6.getTokenText());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("Nc", token7.getTokenText());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~O&IWn.w");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("~", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      String string0 = token1.toString();
      assertEquals("[ (15) (O)", string0);
      
      xPathLexer0.star();
      Token token2 = xPathLexer0.comma();
      assertEquals("I", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer("[ (15) (O)");
      Token token3 = xPathLexer1.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("[", token3.getTokenText());
      
      xPathLexer0.consume(0);
      Token token4 = xPathLexer0.nextToken();
      assertEquals("Wn.w", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      xPathLexer1.mod();
      xPathLexer1.identifierOrOperatorName();
      boolean boolean0 = xPathLexer1.isIdentifierChar('z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("64hMBxqU");
      int int0 = xPathLexer0.endPosition();
      assertEquals(8, int0);
      
      Token token0 = xPathLexer0.plus();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("4", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      Token token3 = xPathLexer0.star();
      String string0 = token3.toString();
      assertEquals("[ (20) (B)", string0);
      
      token0.toString();
      token2.toString();
      token2.toString();
      String string1 = token2.toString();
      assertEquals("[ (22) (hM)", string1);
      
      String string2 = token0.toString();
      assertEquals("[ (5) (6)", string2);
      
      xPathLexer0.setPreviousToken(token0);
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("x", token4.getTokenText());
      
      Token token5 = xPathLexer0.at();
      assertEquals("q", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (22) (hM)");
      Token token6 = xPathLexer1.pipe();
      assertEquals("[", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      assertEquals("U", token7.getTokenText());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals("(", token8.getTokenText());
      assertEquals(1, token8.getTokenType());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      Token token0 = xPathLexer0.not();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (23) (~)", string0);
      
      xPathLexer0.star();
      Token token1 = xPathLexer0.colon();
      assertEquals("&", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("I", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("W", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("n", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(".", token5.getTokenText());
      assertEquals(13, token5.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('S');
      assertTrue(boolean0);
      
      xPathLexer0.identifierOrOperatorName();
      Token token6 = xPathLexer0.plus();
      assertEquals("w", token6.getTokenText());
      assertEquals(5, token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.setXPath("p~uZ@I=*s!k");
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.colon();
      assertEquals("p", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      boolean boolean0 = xPathLexer1.isIdentifierChar('1');
      assertTrue(boolean0);
      
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("~", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("");
      xPathLexer0.nextToken();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer();
      assertFalse(xPathLexer1.equals((Object)xPathLexer0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("K9X$>z^]Ln");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("K9X", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("\" V:8tn,");
      Token token0 = xPathLexer1.nextToken();
      assertEquals((-1), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer1.colon();
      assertEquals(18, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      Token token0 = xPathLexer0.not();
      token0.toString();
      Token token1 = xPathLexer0.pipe();
      assertEquals("S", token1.getTokenText());
      assertEquals(17, token1.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (23) (~)", string0);
      
      xPathLexer0.setXPath("[ (");
      Token token2 = xPathLexer0.nextToken();
      assertEquals("[", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("v1F\"/=,$J");
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("Y&&5T1m@~b>");
      xPathLexer0.isIdentifierChar(' ');
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("0");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("0", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("iB@vvw,xd(H$,N[");
      Token token0 = xPathLexer0.pipe();
      assertEquals("i", token0.getTokenText());
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      token1.toString();
      xPathLexer0.whitespace();
      Token token2 = xPathLexer0.comma();
      assertEquals("v", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      token1.toString();
      token1.toString();
      xPathLexer0.rightBracket();
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      token1.toString();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.rightBracket();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("iB@vvw,xd(H$,N[");
      xPathLexer0.getXPath();
      xPathLexer0.dots();
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("@", token4.getTokenText());
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer0.literal();
      assertEquals(27, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer0.identifierOrOperatorName();
      assertEquals("w", token6.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar(' ');
      assertFalse(boolean0);
      
      Token token7 = xPathLexer0.slashes();
      assertEquals(",", token7.getTokenText());
      assertEquals(11, token7.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token8 = xPathLexer0.rightParen();
      assertEquals("(", token8.getTokenText());
      assertEquals(2, token8.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(15, int0);
      
      Token token9 = xPathLexer0.number();
      assertEquals(30, token9.getTokenType());
      
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
      assertEquals("H", token10.getTokenText());
      
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
      assertEquals("$,", token11.getTokenText());
      
      xPathLexer0.mod();
      Token token12 = xPathLexer0.identifier();
      assertEquals(15, token12.getTokenType());
      
      Token token13 = xPathLexer0.leftBracket();
      assertEquals("[", token13.getTokenText());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.whitespace();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.minus();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.rightBracket();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.equals();
      xPathLexer0.rightParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.getPreviousToken();
      xPathLexer0.rightParen();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.doubleColon();
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      Token token1 = xPathLexer0.or();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.setXPath("p~uZ@I=*s!k");
      xPathLexer0.mod();
      xPathLexer0.notEquals();
      xPathLexer0.equals();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.star();
      xPathLexer0.setXPath("p~uZ@I=*s!k");
      String string0 = xPathLexer0.getXPath();
      assertEquals("p~uZ@I=*s!k", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("x/%u~/Ccv/r#E");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("x", token0.getTokenText());
      
      xPathLexer0.slashes();
      Token token1 = xPathLexer1.nextToken();
      assertEquals(11, token1.getTokenType());
      assertEquals("/", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("SNc!'c+dIB");
      xPathLexer0.dots();
      Token token0 = xPathLexer0.dollar();
      assertEquals("N", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.setXPath("SNc!'c+dIB");
      xPathLexer0.getXPath();
      XPathLexer xPathLexer1 = new XPathLexer("Nk7*L.p%L:I");
      Token token2 = xPathLexer1.dots();
      assertEquals("N", token2.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token3 = xPathLexer1.star();
      assertEquals("k", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("S", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.literal();
      assertNull(token5);
      
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer("rd9 }@V;'mX1O=");
      boolean boolean0 = xPathLexer3.isIdentifierStartChar(' ');
      assertFalse(boolean0);
      
      Token token6 = xPathLexer3.slashes();
      assertEquals("r", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer(")");
      Token token7 = xPathLexer4.rightParen();
      assertEquals(2, token7.getTokenType());
      
      int int0 = xPathLexer1.endPosition();
      assertEquals(11, int0);
      
      Token token8 = xPathLexer1.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer3.dots();
      assertEquals(13, token9.getTokenType());
      
      Token token10 = xPathLexer1.notEquals();
      assertEquals(22, token10.getTokenType());
      assertEquals("*L", token10.getTokenText());
      
      xPathLexer4.mod();
      Token token11 = xPathLexer3.identifier();
      assertEquals("9", token11.getTokenText());
      assertEquals(15, token11.getTokenType());
      
      Token token12 = xPathLexer4.leftBracket();
      assertEquals(3, token12.getTokenType());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h2?ks");
      xPathLexer0.number();
      xPathLexer0.leftBracket();
      xPathLexer0.star();
      xPathLexer0.consume(0);
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.number();
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer2.isIdentifierChar('1');
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("K9X$>z^]Ln");
      Token token0 = xPathLexer0.at();
      assertEquals("K", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("9", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("x/%u~/Ccv/r#7qE");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer1.slashes();
      assertEquals(12, token0.getTokenType());
      assertEquals("x/", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("py79MYf");
      Token token2 = xPathLexer3.identifier();
      assertEquals("py79MYf", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("\" V:8tn,");
      Token token0 = xPathLexer1.leftParen();
      assertEquals(1, token0.getTokenType());
      assertEquals("\"", token0.getTokenText());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals("V", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer1.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals(":", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("t4pY;11]Z*;sYa\"");
      xPathLexer1.dots();
      xPathLexer0.dollar();
      xPathLexer1.star();
      xPathLexer1.comma();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.number();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.star();
      xPathLexer0.consume(25);
      xPathLexer1.nextToken();
      xPathLexer0.number();
      xPathLexer3.mod();
      xPathLexer3.identifierOrOperatorName();
      Token token0 = xPathLexer1.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("1.Ny!h}L\"0P5_o+\"");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken((Token) null);
      xPathLexer1.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer("t,xu<Fo} .,%QFd%s");
      xPathLexer0.literal();
      xPathLexer0.slashes();
      xPathLexer2.isIdentifierChar('X');
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("UdJM?FXrB{");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("U", token0.getTokenText());
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("d", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("JM", token2.getTokenText());
      
      xPathLexer0.isIdentifierStartChar('K');
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("?", token3.getTokenText());
      
      xPathLexer0.isIdentifierStartChar('d');
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("FXrB", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("K9X$>z^]Ln");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("K", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("9", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("X", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":D|\"e-~F'f5\"rOLP?%T");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(18, token0.getTokenType());
      assertEquals(":", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(" V:tn,");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("V", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(18, token1.getTokenType());
      assertEquals(":", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bb");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("b", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("<RnHD dB_L6");
      Token token1 = xPathLexer1.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("<", token1.getTokenText());
      
      xPathLexer1.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("2");
      Token token2 = xPathLexer2.leftParen();
      assertEquals("2", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("b", token3.getTokenText());
      
      Token token4 = xPathLexer1.rightBracket();
      assertEquals(4, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("v1F\"/=,$J");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("v1F", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("\"/", token1.getTokenText());
      
      xPathLexer0.isIdentifierStartChar('K');
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.minus();
      assertEquals(6, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.isIdentifierStartChar('s');
      Token token3 = xPathLexer0.nextToken();
      assertEquals(21, token3.getTokenType());
      assertEquals("=", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.identifier();
      xPathLexer0.consume(0);
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      xPathLexer0.setXPath("&]jLgkB9*L&d%*M");
      Token token4 = new Token(0, "&]jLgkB9*L&d%*M", (-106), (-106));
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("yW5^S4^1WG8yPm");
      Token token6 = xPathLexer1.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("yW5", token6.getTokenText());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&#IWn.w");
      Token token0 = xPathLexer0.not();
      token0.toString();
      xPathLexer0.setXPath(" }^V:,");
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.consume(12);
      xPathLexer0.consume(115);
      assertEquals(" }^V:,", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      Token token0 = xPathLexer0.not();
      token0.toString();
      token0.toString();
      xPathLexer0.not();
      String string0 = token0.toString();
      assertEquals("[ (23) (~)", string0);
      
      xPathLexer0.setXPath("i_1LUo");
      Token token1 = xPathLexer0.nextToken();
      assertEquals("i_1LUo", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("64hMBxqU");
      xPathLexer0.endPosition();
      xPathLexer0.plus();
      xPathLexer0.rightBracket();
      xPathLexer0.and();
      xPathLexer0.notEquals();
      xPathLexer0.number();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer("64hMBxqU");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("C");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("64hMBxqU");
      xPathLexer0.endPosition();
      Token token0 = xPathLexer0.plus();
      assertEquals("6", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("4", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("hM", token2.getTokenText());
      
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer("64hMBxqU");
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("BxqU", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(" V:tn,");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("V", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals(":", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("tn,", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("t", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("eV-,");
      Token token0 = xPathLexer0.nextToken();
      String string0 = token0.toString();
      assertEquals("[ (15) (eV-)", string0);
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.setXPath("[ (15) (eV-)");
      Token token1 = xPathLexer0.nextToken();
      assertEquals(3, token1.getTokenType());
      assertEquals("[", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("64hMBxqU");
      xPathLexer0.endPosition();
      xPathLexer0.plus();
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("64hMBxqU");
      xPathLexer0.leftParen();
      xPathLexer1.nextToken();
      xPathLexer1.rightBracket();
      Token token0 = xPathLexer1.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<} z^Z< #H$?");
      xPathLexer0.setXPath("<} z^Z< #H$?");
      xPathLexer0.slashes();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token0 = xPathLexer0.rightBracket();
      xPathLexer1.setPreviousToken(token0);
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.equals();
      xPathLexer2.rightParen();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.notEquals();
      xPathLexer2.getPreviousToken();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token1 = xPathLexer1.identifierOrOperatorName();
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("64hMBxqU");
      int int0 = xPathLexer0.endPosition();
      assertEquals(8, int0);
      
      Token token0 = xPathLexer0.rightBracket();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (4) (6)", string0);
      
      Token token1 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token1);
      assertEquals("4", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("h", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("M", token3.getTokenText());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("B", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      assertEquals("x", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals((-1), token6.getTokenType());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("v1F\"/=,$J");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.notEquals();
      assertEquals("\"/", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('K');
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer0.getPreviousToken();
      assertEquals("v1F", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("=", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(32, token3.getTokenType());
      assertEquals(",", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      
      char char0 = xPathLexer1.LA(12);
      assertEquals('\uFFFF', char0);
      
      boolean boolean0 = xPathLexer1.isIdentifierChar('\uFFFF');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("64hMBxqU");
      xPathLexer0.endPosition();
      Token token0 = xPathLexer0.rightBracket();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (4) (6)", string0);
      
      Token token1 = xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token1);
      assertEquals("4", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("h", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("M", token3.getTokenText());
      
      xPathLexer0.leftBracket();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("x", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("qU", token5.getTokenText());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("1.Ny!h}L\"0P5_o+\"");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(31, token0.getTokenType());
      assertEquals("1.", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken((Token) null);
      xPathLexer1.setXPath("*)co#$6~");
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Ny!h}L\"0P5_o+\"", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals(20, token2.getTokenType());
      assertEquals("*", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("UdJM?FXrB{");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("U", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("d", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("UdJM?FXrB{");
      Token token2 = xPathLexer0.nextToken();
      assertEquals("JM", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      XPathLexer xPathLexer1 = new XPathLexer("#gmO AV@2xJ^)Zo");
      Token token0 = xPathLexer1.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer1.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("#", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("~", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<} z^Z< #H$?");
      xPathLexer0.setXPath("0N");
      XPathLexer xPathLexer1 = new XPathLexer("<} z^Z< #H$?");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("<", token0.getTokenText());
      assertEquals(7, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("0N", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      boolean boolean0 = xPathLexer2.isIdentifierChar('2');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("<} z^Z< #H$?");
      xPathLexer0.setXPath("R2?.DC?CW");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("R2", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("TWt5yf4NR");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.mod();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.setXPath("p~uZ@I=*s!k");
      Token token2 = xPathLexer0.star();
      assertEquals("p", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.at();
      assertEquals("~", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("uZ@I=*s!k", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h2?ks");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("h", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("fJ}\"&_8rf_");
      Token token1 = xPathLexer1.at();
      assertEquals("f", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("2", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("h2?ks");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("h", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("2", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("?", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("ks", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("64hMBxqU");
      Token token0 = xPathLexer0.notEquals();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (22) (64)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.nextToken();
      assertEquals("hMBxqU", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Oq7% Y");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("Oq7", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("%", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("xR>3NJ02.%h!^BdNN");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("x", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals("R", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(">", token2.getTokenText());
      assertEquals(9, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer(">");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(9, token0.getTokenType());
      assertEquals(">", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("76xk{';%i$& @DguX");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("76", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("x", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("k", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D`{Z+*pm7;WPRu&%@%");
      Token token0 = xPathLexer0.dots();
      assertEquals("D", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.setXPath("cgJ)=z9P}>t}JKo.]<");
      xPathLexer0.consume();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("gJ", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals(")", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("J{_%>q|CEm");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("J", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("{_%>q|CEm", token1.getTokenText());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("{", token2.getTokenText());
      
      Token token3 = xPathLexer0.minus();
      assertEquals("_", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|!");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(17, token0.getTokenType());
      assertEquals("|", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("");
      xPathLexer0.comma();
      xPathLexer0.setXPath("<oAS1o");
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.star();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("P;q,q[/VBxv");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("P", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      Token token0 = xPathLexer0.not();
      token0.toString();
      token0.toString();
      xPathLexer0.not();
      String string0 = token0.toString();
      assertEquals("[ (23) (~)", string0);
      
      xPathLexer0.setXPath(" G-&CcC}:");
      Token token1 = xPathLexer0.nextToken();
      assertEquals("G-", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("&CcC}:", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("K9X$>z^]Ln");
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(32, token0.getTokenType());
      assertEquals("K", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals("9", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("X", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("KE>9X$>z^]Ln");
      Token token0 = xPathLexer0.at();
      assertEquals("K", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("E", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("#5`n\t^(hd]MU6Sz");
      Token token0 = xPathLexer0.plus();
      assertEquals("#", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("5", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.leftBracket();
      xPathLexer0.dollar();
      xPathLexer0.leftParen();
      xPathLexer0.equals();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.isIdentifierStartChar('_');
      xPathLexer0.and();
      xPathLexer0.doubleColon();
      xPathLexer0.mod();
      xPathLexer0.endPosition();
      xPathLexer0.isIdentifierChar('_');
      xPathLexer0.mod();
      Token token1 = xPathLexer0.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("xR>3NJ02.%h!^BdNN");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("x", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("R", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(">", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(30, token3.getTokenType());
      assertEquals("3", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath(") (");
      XPathLexer xPathLexer1 = new XPathLexer("Qli$jt/Up7");
      Token token0 = xPathLexer1.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("Q", token0.getTokenText());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("li", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("$", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("8", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("_");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("_", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";6vn]]");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(";6vn]]", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&j~$iB&nd%E");
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      xPathLexer0.plus();
      xPathLexer0.plus();
      xPathLexer0.currentPosition();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.isIdentifierStartChar('a');
      xPathLexer0.comma();
      xPathLexer0.endPosition();
      xPathLexer0.slashes();
      xPathLexer0.setXPath("J2");
      xPathLexer0.literal();
      xPathLexer0.dollar();
      xPathLexer0.equals();
      xPathLexer0.comma();
      String string0 = xPathLexer0.getXPath();
      assertEquals("J2", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("A");
      XPathLexer xPathLexer2 = new XPathLexer("A");
      xPathLexer2.div();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("Y");
      Token token0 = xPathLexer1.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(")", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("(", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertNotNull(token2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("aHd%:ZU\"");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("aHd", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",DmHJFIbk?Pl");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals(",", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("DmHJFIbk", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("7gDCt");
      xPathLexer0.doubleColon();
      xPathLexer0.dollar();
      xPathLexer0.or();
      xPathLexer0.currentPosition();
      xPathLexer0.leftBracket();
      xPathLexer0.star();
      xPathLexer0.operatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      xPathLexer0.getPreviousToken();
      xPathLexer0.number();
      xPathLexer0.identifier();
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      xPathLexer0.literal();
      xPathLexer0.and();
      xPathLexer0.setXPath("[ (");
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.slashes();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.star();
      xPathLexer0.literal();
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer0.LA(3);
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("o}");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$Iru#ov@Vw");
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      XPathLexer xPathLexer1 = new XPathLexer("sq)V,jm b");
      Token token0 = xPathLexer1.identifierOrOperatorName();
      assertEquals("sq", token0.getTokenText());
      
      Token token1 = xPathLexer1.doubleColon();
      assertEquals(")V", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals(",", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals(15, token3.getTokenType());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("gZpUM]");
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("0");
      xPathLexer0.setXPath("7mohE'");
      XPathLexer xPathLexer1 = new XPathLexer("7mohE'");
      Token token0 = xPathLexer1.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("7", token0.getTokenText());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("mohE", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath(".sy!h}L\"P5_o+\"");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(".", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("sy!h}L\"P5_o+\"", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals("s", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("QaJB\r)*B$");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("QaJB", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/EUV/9b-BV");
      Token token0 = xPathLexer0.literal();
      assertNotNull(token0);
      
      String string0 = token0.toString();
      assertEquals("[ (27) (EUV)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("9", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.plus();
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("b-BV", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/EUV/9b-BV");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(11, token0.getTokenType());
      assertEquals("/", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("EUV", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/EUV/9b-BV");
      Token token0 = xPathLexer0.at();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("/", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("UV", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.setXPath("/EUV/9b-BV");
      Token token3 = xPathLexer0.nextToken();
      assertEquals(11, token3.getTokenType());
      assertEquals("/", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.setXPath("1.Ny!h}L\"yP5_o+\"");
      Token token0 = xPathLexer0.dots();
      assertEquals(14, token0.getTokenType());
      assertEquals("1.", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.plus();
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("Ny", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`#`B{}k3&[1L");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("`#`B{}k3&[1L", token0.getTokenText());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mm)T>\")(");
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      assertEquals("mm)T>\")(", xPathLexer0.getXPath());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("m,|");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("m", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(32, token1.getTokenType());
      assertEquals(",", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("f");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$Iru#ov@Vw");
      Token token0 = xPathLexer0.doubleColon();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (19) ($I)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("ru", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1.Ny!h}L\"0P5_o+\"");
      xPathLexer0.setXPath("1.Ny!h}L\"0P5_o+\"");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.pipe();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token1.getTokenType());
      assertEquals("1.Ny", token1.getTokenText());
      
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("~S&IWn.w");
      Token token0 = xPathLexer0.equals();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (21) (~)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("S", token1.getTokenText());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/EUV/9b-BV");
      Token token0 = xPathLexer0.literal();
      assertEquals("EUV", token0.getTokenText());
      assertEquals(27, token0.getTokenType());
      
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals("b", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("-", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals("B", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("L,m+=Vl23copk");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("L", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer(">fh^=Ja{q#O6#VW2Pc");
      xPathLexer1.nextToken();
      xPathLexer1.nextToken();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("RHoR73");
      Token token0 = new Token((-1), "", (-1), 7);
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("R", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      assertEquals("HoR73", token2.getTokenText());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'<./%Z");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("'<", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(".", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("/", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("%Z", token3.getTokenText());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("'<.7%N");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("'<", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(31, token2.getTokenType());
      assertEquals(".7", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("%N", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("%", token4.getTokenText());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mm)T@)(");
      Token token0 = new Token(29, "8hZg d[Rd==Q,uG;9", 1565, 29);
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.isIdentifierStartChar('V');
      Token token2 = xPathLexer0.getPreviousToken();
      assertFalse(token2.equals((Object)token1));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("aTe,s \"7Pq");
      xPathLexer0.and();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("aT", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("e", token2.getTokenText());
      
      xPathLexer0.literal();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.div();
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.slashes();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(13, int0);
      
      xPathLexer0.div();
      boolean boolean0 = xPathLexer0.isIdentifierChar('@');
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      xPathLexer0.setXPath("");
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      
      xPathLexer0.currentPosition();
      boolean boolean1 = xPathLexer0.isIdentifierStartChar('y');
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("aTe,s \"7Pq");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("X.6.M^au)G");
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".4X/!y_fjXlT");
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".9UX/!y_f|XlT");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(".9", token0.getTokenText());
      assertEquals(31, token0.getTokenType());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(".0SrxdK\"6fcK}K#");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(31, token0.getTokenType());
      assertEquals(".0", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("SrxdK\"6fcK}K#", token1.getTokenText());
  }
}
