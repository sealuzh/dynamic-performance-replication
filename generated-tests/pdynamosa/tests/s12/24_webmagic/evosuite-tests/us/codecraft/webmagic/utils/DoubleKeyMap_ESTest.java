/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 21:29:17 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, String, Integer> doubleKeyMap0 = new DoubleKeyMap<String, String, Integer>(class0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Map<Object, HashMap<Map<Object, String>, String>>> hashMap0 = new HashMap<String, Map<Object, HashMap<Map<Object, String>, String>>>();
      DoubleKeyMap<String, Object, HashMap<Map<Object, String>, String>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<Map<Object, String>, String>>(hashMap0);
      HashMap<Map<Object, String>, String> hashMap1 = new HashMap<Map<Object, String>, String>();
      doubleKeyMap0.put("", (Object) "", hashMap1);
      Map<Object, HashMap<Map<Object, String>, String>> map0 = doubleKeyMap0.remove("");
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Map<Object, String>>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Map<Object, String>>, Integer, Integer>();
      HashMap<Object, Map<Object, String>> hashMap0 = new HashMap<Object, Map<Object, String>>();
      Integer integer0 = new Integer((-1));
      doubleKeyMap0.put(hashMap0, (Integer) null, integer0);
      Map<Integer, Integer> map0 = doubleKeyMap0.get(hashMap0);
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<String, Map<Object, Map<HashMap<Integer, Object>, Object>>, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<String, Map<Object, Map<HashMap<Integer, Object>, Object>>, Map<Object, String>>();
      Map<Object, Map<HashMap<Integer, Object>, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, HashMap<Integer, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Integer, Object>, Object>(map0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      Object object0 = doubleKeyMap1.remove((Object) doubleKeyMap0, hashMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap0);
      Map<Object, Object> map0 = doubleKeyMap0.remove((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>();
      HashMap<Object, Map<String, HashMap<Map<Object, String>, String>>> hashMap0 = new HashMap<Object, Map<String, HashMap<Map<Object, String>, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, HashMap<Map<Object, String>, String>> doubleKeyMap1 = new DoubleKeyMap<Object, String, HashMap<Map<Object, String>, String>>(hashMap0, class0);
      Map<String, HashMap<Map<Object, String>, String>> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>();
      Integer integer0 = new Integer(0);
      DoubleKeyMap<HashMap<Object, String>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, String>, Object, Object>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Object object0 = doubleKeyMap1.put(hashMap0, (Object) integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Integer integer0 = new Integer(0);
      Object object0 = doubleKeyMap0.put((Object) null, integer0, (Object) "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<String, String, Map<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<String, Integer>>();
      Map<String, Integer> map0 = doubleKeyMap0.get((String) null, (String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Map<String, HashMap<Map<Object, String>, String>>> hashMap0 = new HashMap<Object, Map<String, HashMap<Map<Object, String>, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, HashMap<Map<Object, String>, String>> doubleKeyMap0 = new DoubleKeyMap<Object, String, HashMap<Map<Object, String>, String>>(hashMap0, class0);
      HashMap<Object, Map<Integer, String>> hashMap1 = new HashMap<Object, Map<Integer, String>>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>(hashMap1);
      Integer integer0 = new Integer(834);
      String string0 = doubleKeyMap1.get((Object) doubleKeyMap0, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Map<Integer, Object> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Map<Integer, Object> map0 = doubleKeyMap0.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Object, Object, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Object, HashMap<Object, String>>();
      Map<Object, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(map0, class0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) doubleKeyMap0, "1oj-,2Rj>l`T", (Object) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Object, HashMap<Integer, Map<Object, String>>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Integer, Map<Object, String>>, Object>();
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Integer, Object>();
      DoubleKeyMap<HashMap<String, Object>, Object, String> doubleKeyMap2 = new DoubleKeyMap<HashMap<String, Object>, Object, String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      doubleKeyMap2.put(hashMap0, (Object) doubleKeyMap1, (String) null);
      String string0 = doubleKeyMap2.remove(hashMap0, (Object) doubleKeyMap0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Integer, Map<HashMap<Integer, String>, HashMap<Object, Object>>> hashMap0 = new HashMap<Integer, Map<HashMap<Integer, String>, HashMap<Object, Object>>>();
      DoubleKeyMap<Integer, HashMap<Integer, String>, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Integer, String>, HashMap<Object, Object>>(hashMap0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      HashMap<Object, Object> hashMap2 = doubleKeyMap0.remove((Integer) null, hashMap1);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Integer integer0 = new Integer(1);
      doubleKeyMap0.put(hashMap0, (Object) integer0, "^XIx$6E!vRO&");
      String string0 = doubleKeyMap0.put(hashMap0, (Object) integer0, "4G}..Ynw");
      assertEquals("^XIx$6E!vRO&", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Integer, Object>, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, Object, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, Object, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, String>();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      doubleKeyMap0.put(hashMap0, (Object) null, "wrong proto type map ");
      String string0 = doubleKeyMap0.remove(hashMap0, (Object) null);
      assertEquals("wrong proto type map ", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<String, String, Map<String, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, String, Map<String, Integer>>();
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>();
      Map<Integer, Map<Object, String>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Integer, Object, String> doubleKeyMap2 = new DoubleKeyMap<Integer, Object, String>(map0);
      Map<String, Integer> map1 = doubleKeyMap2.newMap();
      doubleKeyMap0.put("*kC?n,PGJFW]yP", "*kC?n,PGJFW]yP", map1);
      Map<String, Integer> map2 = doubleKeyMap0.get("*kC?n,PGJFW]yP", "|qHa7O#`g:LStxpFAk");
      assertNull(map2);
  }
}
