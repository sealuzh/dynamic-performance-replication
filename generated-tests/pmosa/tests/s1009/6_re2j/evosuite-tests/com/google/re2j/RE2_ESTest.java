/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 15:12:59 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("64hMBxqU");
      byte[] byteArray0 = new byte[3];
      rE2_0.findAllUTF8Submatch(byteArray0, (byte)64);
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)0;
      rE2_0.findUTF8Submatch(byteArray0);
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (byte)64);
      assertNull(list0);
      
      rE2_0.findUTF8SubmatchIndex(byteArray0);
      RE2.match("UTF-8", "64hMBxqU");
      rE2_0.findSubmatch("*HQnUWtQ-8=qN<");
      String string0 = rE2_0.replaceFirst("{l%Fx,?xhT", "*HQnUWtQ-8=qN<");
      assertEquals("{l%Fx,?xhT", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.replaceAll("", "can't happen");
      // Undeclared exception!
      try { 
        rE2_0.findUTF8SubmatchIndex((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("%&$Jq");
      int[] intArray0 = rE2_0.findIndex("%&$Jq");
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = new RE2("WOPkWX,+g-$m");
      byte[] byteArray0 = new byte[2];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (-1070));
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-96);
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte) (-96));
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("[:^cntrl:]", 0, false);
      byte[] byteArray0 = new byte[0];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compilePOSIX("m");
      rE2_0.findAllUTF8Index(byteArray0, 1784);
      rE2_0.reset();
      assertEquals("m", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compilePOSIX("invalid or unsupported Perl syntax");
      boolean boolean0 = rE2_0.match("invalid or unsupported Perl syntax");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      List<String[]> list0 = rE2_0.findAllSubmatch("@6G9OEVMIBx", 527);
      assertEquals(13, list0.size());
      assertNotNull(list0);
      
      rE2_0.replaceFirst("@6G9OEVMIBx", "@6G9OEVMIBx");
      rE2_0.findAllIndex("", 886);
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[7];
      rE2_0.matchUTF8(byteArray0);
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)0;
      String string0 = rE2_0.replaceFirst(";s'`A-N\"w)H", "VKz(%F]");
      assertEquals("VKz(%F];s'`A-N\"w)H", string0);
      
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)88;
      byteArray0[6] = (byte)0;
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      rE2_0.findUTF8Index(byteArray1);
      String string1 = RE2.quoteMeta("~8!VS!*wI&Arrnl");
      assertEquals("~8!VS!\\*wI&Arrnl", string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("|l$2wiY+L2?*");
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("y4F.jj*<OG!. ");
      List<int[]> list0 = rE2_0.findAllIndex("", 92);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      RE2.quoteMeta("");
      byte[] byteArray0 = new byte[17];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      byte[] byteArray0 = new byte[4];
      rE2_0.toString();
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = RE2.quoteMeta("D");
      assertEquals("D", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("f9G");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte)27;
      byteArray0[7] = (byte) (-50);
      byteArray0[8] = (byte)0;
      rE2_0.matchUTF8(byteArray0);
      rE2_0.toString();
      rE2_0.reset();
      RE2 rE2_1 = RE2.compileImpl("f9G", 7, false);
      rE2_0.find("f9G");
      rE2_0.findSubmatchIndex("i)RA4");
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte)95;
      intArray0[1] = 44;
      intArray0[2] = (int) (byte)95;
      intArray0[3] = 110;
      intArray0[4] = (int) (byte)0;
      intArray0[5] = (int) (byte)0;
      // Undeclared exception!
      try { 
        rE2_1.match("f9G", (byte)0, 20, (byte)27, intArray0, (byte)0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = new RE2("can't happen");
      String string0 = rE2_0.find("can't happen");
      assertEquals("can't happen", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      byte[] byteArray0 = new byte[5];
      RE2.quoteMeta("");
      byteArray0[0] = (byte) (-116);
      rE2_0.findAllUTF8Index(byteArray0, (byte) (-116));
      rE2_0.findSubmatchIndex("");
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)0;
      rE2_0.prefixRune = (int) (byte) (-128);
      rE2_0.findUTF8(byteArray0);
      rE2_0.findAllSubmatchIndex("com.google.re2j.RE2", (-2188));
      rE2_0.prefixComplete = true;
      RE2 rE2_1 = RE2.compilePOSIX("j&DA\"7a=Zt5-");
      rE2_1.get();
      RE2.match("com.google.re2j.RE2", "com.google.re2j.RE2");
      rE2_1.findAllSubmatchIndex("", (byte) (-128));
      rE2_0.numberOfCapturingGroups();
      int[] intArray0 = rE2_1.findSubmatchIndex("7qDgh]w_aL7f0W");
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("$");
      byte[] byteArray0 = new byte[0];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 6);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      List<int[]> list0 = rE2_0.findAllIndex("", (-367));
      assertNotNull(list0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte) (-1);
      rE2_0.findUTF8(byteArray0);
      List<String[]> list1 = rE2_0.findAllSubmatch("MATCH", (-367));
      assertEquals(6, list1.size());
      assertNotNull(list1);
      
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)21;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)34;
      byteArray1[3] = (byte)1;
      List<byte[][]> list2 = rE2_0.findAllUTF8Submatch(byteArray1, 1368);
      assertEquals(5, list2.size());
      assertNotNull(list2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compilePOSIX("");
      rE2_0.find("");
      RE2.match("", "");
      int[] intArray0 = new int[5];
      intArray0[0] = 1919;
      intArray0[1] = 1919;
      byte[] byteArray0 = new byte[1];
      rE2_0.replaceAll("", "");
      rE2_0.findAllSubmatchIndex("", 1919);
      byteArray0[0] = (byte) (-114);
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, 1919);
      intArray0[2] = 1919;
      intArray0[3] = 1919;
      intArray0[4] = 1919;
      // Undeclared exception!
      try { 
        rE2_0.match("", 1919, 1919, 1919, intArray0, (-955));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Machine", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      rE2_0.findAll("", (-2320));
      String string0 = rE2_0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("f;ff|/;lXN");
      rE2_0.findAll("OrlHro", (-316));
      // Undeclared exception!
      try { 
        rE2_0.findAllSubmatchIndex((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      rE2_0.longest = true;
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 43);
      assertNotNull(list0);
      
      String string0 = rE2_0.replaceFirst(")+z.E/>]`>ND$5!#U", ")+z.E/>]`>ND$5!#U");
      assertEquals(")+z.E/>]`>ND$5!#U)+z.E/>]`>ND$5!#U", string0);
      
      byteArray0[1] = (byte)0;
      rE2_0.prefixUTF8 = byteArray0;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte) (-99);
      rE2_0.reset();
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-66);
      rE2_0.prefix = "";
      byteArray0[6] = (byte)92;
      List<int[]> list1 = rE2_0.findAllUTF8Index(byteArray0, (byte) (-66));
      assertEquals(5, list1.size());
      assertNotNull(list1);
      
      rE2_0.findAllSubmatchIndex("1d{{co(|3>Rl=+C", (byte)122);
      rE2_0.findSubmatch("");
      List<int[]> list2 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte)122);
      assertEquals(5, list2.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("g-");
      byte[] byteArray0 = new byte[4];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 3982);
      assertNull(list0);
      
      String string0 = rE2_0.toString();
      assertNotNull(string0);
      
      byte[] byteArray1 = rE2_0.prefixUTF8;
      assertArrayEquals(new byte[] {(byte)103, (byte)45}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      boolean boolean0 = rE2_0.match("", 0, 0, 0, intArray0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = new RE2("\"atkL`'YJ");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)17;
      rE2_0.replaceFirst("]5}uG4gY", "]5}uG4gY");
      byteArray0[1] = (byte)0;
      rE2_0.findAllUTF8(byteArray0, (byte)17);
      rE2_0.replaceAll("QSC{-%bX68!", "");
      rE2_0.reset();
      rE2_0.find("com.google.re2j.RE2");
      rE2_0.replaceFirst("\"atkL`'YJ", "UTF-8");
      rE2_0.get();
      rE2_0.get();
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        rE2_0.findUTF8Submatch((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = new RE2("%6g{wy5];");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-8);
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("%6g{wy5];", (byte) (-89));
      assertNotNull(list0);
      
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)0;
      rE2_0.prefix = "%6g{wy5];";
      byteArray0[6] = (byte) (-85);
      byte[] byteArray1 = new byte[2];
      rE2_0.prefixUTF8 = byteArray0;
      byteArray1[0] = (byte) (-43);
      byteArray1[1] = (byte) (-128);
      rE2_0.prefixUTF8 = byteArray1;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)26;
      rE2_0.findUTF8Index(byteArray0);
      rE2_0.match("%6g{wy5];");
      List<String[]> list1 = rE2_0.findAllSubmatch("%6g{wy5];", (byte) (-27));
      assertNotNull(list1);
      
      rE2_0.reset();
      List<int[]> list2 = rE2_0.findAllSubmatchIndex("l+Gu@HK", 1115);
      assertNull(list2);
      
      List<String> list3 = rE2_0.findAll("%6g{wy5];", (byte) (-128));
      assertEquals(1, list3.size());
      assertNotNull(list3);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)87;
      byteArray0[6] = (byte)33;
      rE2_0.findAllUTF8Index(byteArray0, (-1969));
      RE2 rE2_1 = RE2.compile("");
      rE2_1.match("");
      rE2_0.toString();
      rE2_0.findIndex("");
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)87;
      byteArray1[2] = (byte)87;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)87;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)8;
      rE2_1.findAllUTF8Index(byteArray1, (-2326));
      rE2_0.findSubmatch("");
      // Undeclared exception!
      try { 
        rE2_1.findAllUTF8SubmatchIndex((byte[]) null, (-594));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      rE2_0.find("");
      boolean boolean0 = rE2_0.prefixComplete;
      int[] intArray0 = new int[5];
      intArray0[0] = 1919;
      intArray0[1] = 1919;
      byte[] byteArray0 = new byte[1];
      rE2_0.replaceAll("/veSHDvD@X3UEk3", "/veSHDvD@X3UEk3");
      String string0 = "~o'`A";
      rE2_0.findAllSubmatchIndex("~o'`A", 1919);
      rE2_0.findAllUTF8SubmatchIndex(byteArray0, (-999));
      // Undeclared exception!
      try { 
        rE2_0.match("", 1919, 65596, 128768, intArray0, 65596);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      rE2_0.find("");
      RE2.match("", "");
      int[] intArray0 = new int[5];
      intArray0[0] = 1919;
      intArray0[1] = 1919;
      byte[] byteArray0 = new byte[1];
      rE2_0.replaceAll("", "");
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 2);
      assertEquals(2, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      RE2 rE2_1 = RE2.compileImpl("$", 25, true);
      rE2_0.findSubmatch("$");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)84;
      rE2_1.findUTF8(byteArray0);
      RE2 rE2_2 = new RE2("$");
      rE2_2.findAllSubmatch("", (byte)84);
      rE2_2.findAllUTF8Submatch(byteArray0, 11);
      rE2_0.match("$", 3318, (byte)84, (byte)84, (int[]) null, (byte)84);
      RE2 rE2_3 = RE2.compile("eW");
      Machine machine0 = rE2_3.get();
      assertNotNull(machine0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("$");
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      rE2_0.match("$", 749, 11, 11, intArray0, (-963));
      byte[] byteArray0 = new byte[0];
      int[] intArray1 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      
      String string0 = rE2_0.replaceAll("*", "7K1W");
      assertEquals("*7K1W", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 0, false);
      byte[] byteArray0 = new byte[6];
      RE2.compilePOSIX("No");
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
      
      boolean boolean0 = rE2_0.match("", 0, 0, 68220, (int[]) null, 68220);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("|k7dVyI`$,mP{()");
      rE2_0.findSubmatch("|k7dVyI`$,mP{()");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)115;
      rE2_0.findAllUTF8Submatch(byteArray0, (byte)115);
      // Undeclared exception!
      try { 
        rE2_0.findAllSubmatch((String) null, (byte)63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("|k7dVyI`$,mP{()");
      rE2_0.findSubmatch("|k7dVyI`$,mP{()");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)105;
      rE2_0.findAllSubmatch("|k7dVyI`$,mP{()", (byte)63);
      rE2_0.findUTF8Submatch(byteArray0);
      rE2_0.findAllUTF8(byteArray0, 8);
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }
}
