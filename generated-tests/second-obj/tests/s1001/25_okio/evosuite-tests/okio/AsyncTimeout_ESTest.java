/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:50:32 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import okio.AsyncTimeout;
import okio.Buffer;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockIOException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AsyncTimeout_ESTest extends AsyncTimeout_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockThrowable mockThrowable0 = new MockThrowable();
      MockIOException mockIOException0 = new MockIOException("beginIndex < 0", mockThrowable0);
      asyncTimeout0.newTimeoutException(mockIOException0);
      asyncTimeout0.exit((IOException) mockIOException0);
      asyncTimeout0.timedOut();
      assertFalse(asyncTimeout0.hasDeadline());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      System.setCurrentTimeMillis(65536000000L);
      asyncTimeout0.enter();
      System.setCurrentTimeMillis(65536000000L);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      Source source0 = asyncTimeout0.source((Source) null);
      assertNotNull(source0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.clearDeadline();
      MockThrowable mockThrowable0 = new MockThrowable("");
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      asyncTimeout0.deadline(65536L, timeUnit0);
      MockIOException mockIOException0 = new MockIOException(mockThrowable1);
      IOException iOException0 = asyncTimeout0.newTimeoutException(mockIOException0);
      asyncTimeout0.newTimeoutException(iOException0);
      asyncTimeout0.enter();
      boolean boolean0 = true;
      asyncTimeout0.exit(true);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockThrowable mockThrowable0 = new MockThrowable("");
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      AsyncTimeout asyncTimeout1 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      AsyncTimeout asyncTimeout2 = (AsyncTimeout)asyncTimeout1.deadline(65536L, timeUnit0);
      asyncTimeout1.enter();
      asyncTimeout0.exit(true);
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      asyncTimeout2.deadline(760L, timeUnit1);
      MockIOException mockIOException0 = new MockIOException(mockThrowable1);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      asyncTimeout0.timedOut();
      Pipe pipe0 = new Pipe(60L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      asyncTimeout0.sink(pipe_PipeSink0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AsyncTimeout asyncTimeout0 = new AsyncTimeout();
      MockThrowable mockThrowable0 = new MockThrowable("");
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      AsyncTimeout.head = asyncTimeout0;
      AsyncTimeout asyncTimeout1 = new AsyncTimeout();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      asyncTimeout1.deadline(65536L, timeUnit0);
      asyncTimeout1.enter();
      boolean boolean0 = true;
      asyncTimeout0.exit(true);
      // Undeclared exception!
      try { 
        AsyncTimeout.awaitTimeout();
        fail("Expecting exception: IllegalMonitorStateException");
      
      } catch(IllegalMonitorStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Object", e);
      }
  }
}
