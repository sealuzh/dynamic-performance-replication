/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 21:52:33 GMT 2019
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ParseProcess;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.UTF8Decoder;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.get(154);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 154, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      assertTrue(jSONArray1.isEmpty());
      
      jSONArray1.fluentSet(0, jSONArray0);
      assertEquals(1, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale locale0 = Locale.ITALY;
      jSONArray0.defaultLocale.getUnicodeLocaleKeys();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      jSONArray0.fluentClear();
      jSONArray1.remove((Object) fileSystemHandling0);
      int int0 = (-1551);
      JSONArray jSONArray2 = null;
      try {
        jSONArray2 = new JSONArray((-1551));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1551
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(984);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 984, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.set(59, (Object) null);
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      jSONArray0.getString(59);
      JSONArray jSONArray1 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(989);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Integer> class0 = Integer.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.isEmpty();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue((-632));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 35;
      JSONArray jSONArray0 = new JSONArray(35);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "com.alibaba.fastjson.serializer.EnumerationSerializer";
      stringArray0[2] = "1.2.46";
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature1;
      JSON.toJSONString((Object) serializerFeature1, serializerFeatureArray0);
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      jSONArray2.isEmpty();
      JSONArray jSONArray3 = jSONArray1.fluentSet(3089, (Object) null);
      JSONArray jSONArray4 = jSONArray3.fluentAdd(989, (Object) set0);
      int int1 = 160;
      // Undeclared exception!
      try { 
        jSONArray4.getByte(989);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : [gregory, buddhist, japanese]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      ListIterator<Object> listIterator0 = jSONArray2.listIterator();
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray0.getLong(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      int int0 = 55;
      // Undeclared exception!
      try { 
        jSONArray0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      jSONArray1.toArray();
      Integer integer0 = new Integer((-214748364));
      jSONArray0.contains(integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject((-214748364));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 34;
      JSONArray jSONArray0 = new JSONArray(34);
      JSONObject jSONObject0 = new JSONObject(false);
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      JSONObject jSONObject2 = jSONObject1.fluentRemove("1.2.46");
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((-2053), (Object) jSONObject2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2053, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.parseObject("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      Class<Object> class0 = Object.class;
      jSONArray1.toJavaList(class0);
      JSONArray jSONArray2 = jSONArray0.fluentSet(3044, linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray2.getLong(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(35);
      jSONArray0.set(8, "");
      jSONArray0.hashCode();
      int int0 = 9;
      jSONArray0.getDate(8);
      char[] charArray0 = new char[9];
      charArray0[0] = 'm';
      charArray0[1] = '>';
      charArray0[2] = '_';
      charArray0[3] = 'f';
      charArray0[5] = 'f';
      charArray0[6] = 'h';
      charArray0[7] = 'S';
      charArray0[8] = 'M';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 989);
      DefaultJSONParser defaultJSONParser0 = null;
      try {
        defaultJSONParser0 = new DefaultJSONParser(jSONReaderScanner0, (ParserConfig) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.parseObject("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      Class<Object> class0 = Object.class;
      jSONArray1.toJavaList(class0);
      jSONArray0.getBigInteger(989);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, "");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) class0);
      Predicate<Object> predicate1 = predicate0.negate();
      linkedHashSet0.removeIf(predicate1);
      jSONArray2.getByte(2146);
      jSONArray0.size();
      jSONArray2.get(1);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      JSONArray jSONArray3 = jSONArray0.fluentSet(1, jSONArray2);
      jSONArray0.set(1, jSONArray3);
      assertEquals(2, jSONArray2.size());
      assertEquals(2, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      BigDecimal bigDecimal0 = new BigDecimal(3089);
      // Undeclared exception!
      try { 
        jSONArray2.listIterator(3078);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3078
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((-719));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      Object object0 = new Object();
      ParserConfig.getGlobalInstance();
      jSONArray0.getRelatedArray();
      jSONArray0.getFloatValue(1);
      jSONArray0.fluentRemove(1);
      assertEquals(55, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      JSON.parseObject("");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(989, (Collection<?>) linkedHashSet0);
      JSONArray jSONArray3 = jSONArray2.fluentRemove(3089);
      Object object0 = new Object();
      Integer integer0 = new Integer((-1361));
      jSONArray0.contains(integer0);
      ParserConfig.getGlobalInstance();
      jSONArray1.add(1, (Object) null);
      jSONArray0.getBoolean(0);
      jSONArray2.getObject(70, (Type) null);
      jSONArray3.getIntValue(3059);
      jSONArray0.listIterator(70);
      byte byte0 = jSONArray0.getByteValue(1);
      assertEquals(3090, jSONArray0.size());
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.parseObject("");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSONArray jSONArray3 = jSONArray1.fluentAddAll(989, (Collection<?>) linkedHashSet0);
      JSONArray jSONArray4 = jSONArray3.fluentRemove(3089);
      Object object0 = new Object();
      Integer integer0 = new Integer((-1361));
      jSONArray0.contains(integer0);
      ParserConfig.getGlobalInstance();
      jSONArray1.add(1, (Object) null);
      jSONArray0.getBoolean(0);
      jSONArray3.getObject(70, (Type) null);
      int int0 = jSONArray4.getIntValue(3059);
      assertEquals(3090, jSONArray4.size());
      assertEquals(0, int0);
      
      jSONArray2.lastIndexOf(jSONArray3);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("", concurrentHashMap0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(3089);
      assertTrue(jSONArray1.equals((Object)jSONArray0));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(3089, jSONArray0);
      assertEquals(3090, jSONArray0.size());
      
      int int0 = jSONArray0.getIntValue(989);
      assertEquals(3090, jSONArray0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(954);
      JSON.parseObject((String) null);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray0.fluentRemove((Object) null);
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(jSONArray1);
      JSONArray jSONArray4 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray4.fluentAddAll(3089, (Collection<?>) jSONArray3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(jSONArray0);
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray0);
      JSONArray jSONArray3 = jSONArray2.fluentSet(3089, jSONArray0);
      jSONArray2.listIterator();
      Class<JSONArray> class0 = JSONArray.class;
      jSONArray2.toJavaList(class0);
      Class<Integer> class1 = Integer.class;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)16;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      jSONArray2.relatedArray = (Object) parserConfig0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray3.getObject(989, class1);
      jSONArray2.getInteger(958);
      jSONArray2.fluentRetainAll(jSONArray1);
      assertFalse(jSONArray2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      Integer integer0 = new Integer((-1712));
      jSONArray0.fluentSet(3089, jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.getFloatValue(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-20);
      byteArray0[0] = (byte) (-20);
      byteArray0[1] = (byte) (-23);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      HashMap<String, Field> hashMap0 = new HashMap<String, Field>();
      ParserConfig.getFieldFromCache("com.alibaba.fastjson.serializer.EnumerationSerializer", hashMap0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-2348), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.hashCode();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(99);
      Feature[] featureArray0 = new Feature[5];
      Feature feature0 = Feature.SortFeidFastMatch;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.DisableFieldSmartMatch;
      featureArray0[1] = feature1;
      Feature feature2 = Feature.OrderedField;
      featureArray0[2] = feature2;
      Feature feature3 = Feature.OrderedField;
      featureArray0[3] = feature3;
      Feature feature4 = Feature.AllowUnQuotedFieldNames;
      featureArray0[4] = feature4;
      JSON.parseObject("", featureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = (Integer) 989;
      Integer[] integerArray1 = jSONArray2.toArray(integerArray0);
      assertSame(integerArray0, integerArray1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(32, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      JSON.parseObject("");
      linkedHashSet0.remove((Object) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(989, (Collection<?>) linkedHashSet0);
      JSONArray jSONArray3 = jSONArray2.fluentRemove(3089);
      Object object0 = new Object();
      Integer integer0 = new Integer((-1361));
      jSONArray0.contains(integer0);
      ParserConfig.getGlobalInstance();
      jSONArray1.add(1, (Object) null);
      jSONArray0.getBoolean(0);
      jSONArray1.lastIndexOf(object0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(929);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 32);
      int int0 = jSONArray3.indexOf(pushbackInputStream0);
      assertEquals(3090, jSONArray3.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.parseObject("");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSONArray jSONArray3 = jSONArray1.fluentAddAll(989, (Collection<?>) linkedHashSet0);
      JSONArray jSONArray4 = jSONArray3.fluentRemove(3089);
      Object object0 = new Object();
      Integer integer0 = new Integer((-1383));
      jSONArray0.contains(integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      jSONArray1.add(1, (Object) null);
      jSONArray0.getBoolean(0);
      assertEquals(3090, jSONArray0.size());
      
      jSONArray3.getObject(70, (Type) null);
      jSONArray2.getObject(3089, (Type) null);
      assertEquals(3090, jSONArray0.size());
      
      jSONArray4.set((-1), "");
      assertEquals(3091, jSONArray1.size());
      assertEquals(3091, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(55, (Object) null);
      jSONArray0.hashCode();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.getDate(9);
      jSONArray0.fluentRemove(0);
      assertEquals(55, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object[] objectArray0 = jSONArray0.toArray();
      assertEquals(0, objectArray0.length);
      
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleKeys();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      jSONArray0.isEmpty();
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) set0);
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      List<PushbackInputStream> list0 = jSONArray3.toJavaList(class0);
      JSONArray jSONArray4 = jSONArray2.fluentRetainAll(list0);
      jSONArray4.fluentSet(989, "com.alibaba.fastjson.serializer.EnumerationSerializer");
      // Undeclared exception!
      try { 
        jSONArray1.getFloat(989);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("", class0, class0, class0, (Field) null, 989, 3087, 3089);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getField();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteDateUseDateFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.IgnoreNonFieldGetter;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONString((Object) null, serializerFeatureArray0);
      Locale locale0 = Locale.ITALIAN;
      locale0.getUnicodeLocaleKeys();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      int int0 = (-3855);
      int int1 = 969;
      // Undeclared exception!
      try { 
        jSONArray0.subList((-3855), 969);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      boolean boolean0 = jSONArray0.containsAll(linkedHashSet0);
      assertTrue(boolean0);
      
      boolean boolean1 = jSONArray0.retainAll(linkedHashSet0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.parseObject("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      Class<Object> class0 = Object.class;
      jSONArray1.toJavaList(class0);
      jSONArray1.getShort(989);
      jSONArray1.remove(989);
      assertEquals(3089, jSONArray1.size());
      
      jSONArray1.getBigInteger(954);
      assertEquals(3089, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      assertSame(jSONArray0, jSONArray1);
      
      Type type0 = jSONArray0.componentType;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1892), (Type) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(59, (Object) null);
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      JSONArray jSONArray1 = jSONArray0.fluentSet(59, (Object) null);
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>(3089);
      jSONArray1.setRelatedArray(linkedHashSet1);
      int int0 = jSONArray1.getIntValue(37);
      assertEquals(60, jSONArray0.size());
      assertEquals(0, int0);
      
      byte byte0 = jSONArray0.getByteValue(43);
      assertEquals(60, jSONArray0.size());
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      Integer integer0 = new Integer(43);
      jSONArray0.fluentSet(43, integer0);
      JSONArray jSONArray1 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray1.getLong(55);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.spliterator();
      jSONArray0.set(76, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      JSON.parseObject("");
      jSONArray0.fluentSet(3089, linkedHashSet0);
      Type[] typeArray0 = new Type[2];
      typeArray0[0] = null;
      typeArray0[1] = null;
      TypeReference<String> typeReference0 = null;
      try {
        typeReference0 = new TypeReference<String>(typeArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Class cannot be cast to java.lang.reflect.ParameterizedType
         //
         verifyException("com.alibaba.fastjson.TypeReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(35);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-1);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(35);
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) list0);
      // Undeclared exception!
      try { 
        jSONArray2.getFloat(372);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 372, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(58, (Object) null);
      JSON.toJSON((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(58, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(954);
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.getShort(954);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 954, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(2861);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2861
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONArray2.getBigInteger(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShort(32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 32, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue((-213));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getBooleanValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : 1.2.46
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      BigDecimal bigDecimal0 = new BigDecimal(989);
      // Undeclared exception!
      try { 
        jSONArray1.remove(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(989, (Object) null);
      jSONArray0.getJSONObject(989);
      assertEquals(990, jSONArray0.size());
      
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(989, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-10));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      jSONArray0.set(120, linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(120);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.alibaba.fastjson.JSONArray cannot be cast to com.alibaba.fastjson.JSONObject
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.getFieldTypeResolver();
      Feature[] featureArray0 = new Feature[1];
      Feature feature0 = Feature.InternFieldNames;
      featureArray0[0] = feature0;
      String string0 = JSON.VERSION;
      jSONArray0.set(59, "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(59);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(59, (Object) null);
      jSONArray0.getShortValue(19);
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      jSONArray0.remove(19);
      jSONArray0.getBigInteger(0);
      assertEquals(59, jSONArray0.size());
      
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp((-1600));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      jSONArray0.getBigDecimal(55);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(1835);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1835
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteEnumUsingToString;
      serializerFeatureArray0[2] = serializerFeature2;
      JSON.toJSONBytes((Object) jSONArray0, 3089, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(247);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 247, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(true);
      JSONObject jSONObject1 = jSONObject0.fluentClear();
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      String string0 = "BR";
      String string1 = "s~*I";
      JSONArray jSONArray0 = new JSONArray(3089);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "BR");
      // Undeclared exception!
      try { 
        jSONArray1.fluentAdd(1237, (Object) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1237, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3089, (Object) null);
      jSONArray0.hashCode();
      jSONArray0.toArray();
      Integer integer0 = new Integer(3089);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.getJSONObject(3089);
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      jSONArray0.getShortValue(58);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger((-269));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll((-2281), (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2281, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      jSONArray0.getDouble(55);
      double double0 = jSONArray0.getDoubleValue(1);
      assertEquals(56, jSONArray0.size());
      assertEquals(0.0, double0, 0.01);
      
      Class<JSONObject> class0 = JSONObject.class;
      jSONArray0.getObject(55, class0);
      jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(348);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 348, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray();
      Type type0 = jSONArray0.componentType;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(3089, (Type) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      boolean boolean0 = jSONArray1.isEmpty();
      assertFalse(boolean0);
      
      JSONArray jSONArray2 = jSONArray0.fluentRemove((Object) jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray0.addAll(940, (Collection<?>) jSONArray2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 940, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) linkedHashSet0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      jSONArray1.containsAll(set0);
      boolean boolean0 = jSONArray1.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(989, (Object) null);
      jSONArray0.getJSONObject(989);
      double double0 = jSONArray0.getDoubleValue(989);
      assertEquals(990, jSONArray0.size());
      assertEquals(0.0, double0, 0.01);
      
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      jSONArray1.fluentSet(3089, jSONArray0);
      assertEquals(3090, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(59, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.getTimestamp(59);
      int int0 = JSON.DEFAULT_PARSER_FEATURE;
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray1.equals((Object) null);
      assertEquals(61, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-3979));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(35);
      Class<Integer> class0 = Integer.class;
      List<Integer> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll((Collection<?>) list0);
      // Undeclared exception!
      try { 
        jSONArray2.getFloat((-123008));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(989);
      boolean boolean0 = jSONArray1.add((Object) jSONArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.getShort((-10));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.getLong(81);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 81, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(59, (Object) null);
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      jSONArray0.getString(59);
      JSONArray jSONArray1 = new JSONArray((List<Object>) null);
      jSONArray1.containsAll(linkedHashSet0);
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger(59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(59, (Object) null);
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1.2.46");
      jSONArray0.getString(59);
      JSONArray jSONArray1 = new JSONArray((List<Object>) null);
      jSONArray1.containsAll(linkedHashSet0);
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      jSONArray0.fluentRemove((Object) linkedHashSet1);
      // Undeclared exception!
      try { 
        jSONArray1.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.getJSONObject(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(982);
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-2737));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(54);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(9);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 9, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(989, (Object) null);
      Type type0 = jSONArray0.componentType;
      jSONArray0.getComponentType();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      jSONArray0.indexOf((Object) null);
      jSONArray1.hashCode();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 989
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject(989);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, "");
      Class<Object> class0 = Object.class;
      jSONArray1.toJavaList(class0);
      jSONArray0.remove(989);
      jSONArray0.getBigInteger(55);
      jSONArray1.getFloat(0);
      assertEquals(989, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(76, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      JSON.parseObject("");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      jSONArray0.fluentRemoveAll(linkedHashSet0);
      jSONArray1.fluentAddAll(989, (Collection<?>) linkedHashSet0);
      Object object0 = new Object();
      Integer integer0 = new Integer((-1383));
      jSONArray0.contains(integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      jSONArray1.add(1, (Object) null);
      assertEquals(3091, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.hashCode();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-296));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(66);
      JSON.toJSONString((Object) jSONArray0, false);
      JSON.toJSON((Object) jSONArray0);
      jSONArray0.size();
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      assertFalse(listIterator0.hasPrevious());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      jSONArray0.getDouble(55);
      jSONArray0.getDoubleValue(1);
      boolean boolean0 = jSONArray0.retainAll(linkedHashSet0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(55, (Object) null);
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      jSONArray0.getRelatedArray();
      jSONArray0.getLongValue(55);
      jSONArray0.getRelatedArray();
      assertEquals(56, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.retainAll(jSONArray1);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.getBigDecimal((-2566));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray0 = new JSONArray(59);
      Class<JSONObject> class0 = JSONObject.class;
      List<JSONObject> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      boolean boolean0 = jSONArray2.remove((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      double double0 = jSONArray0.getDoubleValue(1);
      assertEquals(56, jSONArray0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSON.parseObject("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(535, "");
      Class<Object> class0 = Object.class;
      jSONArray1.toJavaList(class0);
      jSONArray0.getShort(535);
      // Undeclared exception!
      try { 
        jSONArray0.remove((-639));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(35);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "com.alibaba.fastjson.serializer.EnumerationSerializer";
      stringArray0[2] = "1.2.46";
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature1;
      JSON.toJSONString((Object) serializerFeature1, serializerFeatureArray0);
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      jSONArray2.isEmpty();
      int int0 = 1541;
      Integer integer0 = new Integer((-1));
      JSONArray jSONArray3 = jSONArray0.fluentSet(989, serializerFeature0);
      jSONArray1.add(1, (Object) null);
      // Undeclared exception!
      try { 
        jSONArray3.getByte(1541);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1541, Size: 991
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.set((-10), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = (-23);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-23));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      jSONArray0.set(113, linkedHashSet0);
      jSONArray0.parallelStream();
      int int0 = (-780);
      jSONArray0.remove((Object) null);
      ParserConfig parserConfig0 = new ParserConfig();
      ParserConfig.global = parserConfig0;
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-780));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        JSON.parse("com.alibaba.fastjson.serializer.EnumerationSerializer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : com.alibaba.fastjson.serializer.EnumerationSerializer
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentAdd((Object) "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray0.getString((-1497));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.addAll((Collection<?>) jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.subList(974, 969);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 969
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(59, (Object) null);
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      jSONArray0.getString(59);
      Type type0 = jSONArray0.componentType;
      jSONArray0.getObject(59, (Type) null);
      // Undeclared exception!
      try { 
        jSONArray0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(55, (Object) null);
      jSONArray0.hashCode();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.getDate(9);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      jSONArray0.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray1.getBoolean(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      int int0 = jSONArray0.lastIndexOf(jSONArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      jSONArray1.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getByte(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(35);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)89;
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)75;
      int int0 = 96;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Type type0 = null;
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowArbitraryCommas;
      featureArray0[1] = feature1;
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(96);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 96, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.getTimestamp(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getByteValue(12);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 12, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 0;
      Collection<Object> collection0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.addAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray1.getDate(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-649));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      jSONArray1.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray1.getLongValue((-2322));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(59, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.getSqlDate(59);
      jSONArray0.getJSONArray(59);
      JSONObject jSONObject0 = new JSONObject(989);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("GVNs?s.0 dK_e'", concurrentSkipListMap0);
      JSONObject jSONObject1 = jSONObject0.fluentPut("GVNs?s.0 dK_e'", (Object) null);
      jSONObject1.getJSONArray("1.2.46");
      jSONArray0.add((Object) null);
      assertEquals(61, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(1519, (Object) null);
      jSONArray0.getIntValue(1519);
      jSONArray0.getShortValue(56);
      // Undeclared exception!
      try { 
        jSONArray0.addAll(8, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray1.getSqlDate(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(35);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "com.alibaba.fastjson.serializer.EnumerationSerializer";
      stringArray0[2] = "1.2.46";
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature1;
      JSON.toJSONString((Object) serializerFeature1, serializerFeatureArray0);
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      jSONArray2.isEmpty();
      Integer integer0 = new Integer(1541);
      jSONArray2.fluentSet(1617, serializerFeature0);
      jSONArray1.getLong(1541);
      jSONArray1.getFloat(1138);
      jSONArray1.getLong(199);
      assertEquals(1618, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.set(59, linkedList0);
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      jSONArray0.getString(59);
      // Undeclared exception!
      try { 
        jSONArray0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      BigDecimal bigDecimal0 = new BigDecimal(989);
      jSONArray0.listIterator();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      Class<Annotation> class0 = Annotation.class;
      jSONArray2.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray2.getInteger(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      jSONArray0.set(3089, jSONArray1);
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray1.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONObject jSONObject0 = new JSONObject();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      jSONArray1.subList(989, 3086);
      jSONArray1.clone();
      // Undeclared exception!
      try { 
        jSONArray0.getShort(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(76, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      JSON.parseObject("");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      jSONArray0.fluentRemoveAll(linkedHashSet0);
      jSONArray1.fluentAddAll(989, (Collection<?>) linkedHashSet0);
      Object object0 = new Object();
      Integer integer0 = new Integer((-1383));
      jSONArray0.contains(integer0);
      int int0 = 1;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        JSON.parse("yyyy-MM-dd HH:mm:ss", parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3184);
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "com.alibaba.fastjson.serializer.EnumerationSerializer";
      stringArray0[3] = "1.2.46";
      stringArray0[4] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[5] = "";
      stringArray0[6] = "com.alibaba.fastjson.serializer.EnumerationSerializer";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      List<Object> list0 = javaBeanSerializer0.getFieldValues(class0);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue((-842));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      jSONArray1.isEmpty();
      jSONArray0.fluentRetainAll(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getBigDecimal(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.parseObject((String) null);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getBoolean(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.listIterator((-3400));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3400
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate(957);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 957, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.set((-1), "1.2.46");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(59, (Object) null);
      jSONArray0.getShortValue(59);
      jSONArray0.getBigInteger(59);
      assertEquals(60, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      int int0 = 59;
      jSONArray0.set(59, (Object) null);
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray0.remove((-1369));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)38;
      jSONArray0.toArray();
      Set<String> set0 = jSONArray0.defaultLocale.getUnicodeLocaleKeys();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      jSONArray2.isEmpty();
      Integer integer0 = new Integer(3089);
      // Undeclared exception!
      try { 
        jSONArray1.getBigDecimal((-3764));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) jSONArray0);
      assertFalse(jSONArray2.isEmpty());
      
      JSONArray jSONArray3 = jSONArray2.fluentRemoveAll(jSONArray0);
      JSONArray jSONArray4 = jSONArray3.fluentRetainAll(jSONArray2);
      jSONArray4.fluentSet(989, jSONArray1);
      assertEquals(990, jSONArray4.size());
      
      // Undeclared exception!
      try { 
        jSONArray3.getLong((-320));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.spliterator();
      // Undeclared exception!
      try { 
        jSONArray0.getLong((-10));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(35);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSONArray0.forEach(consumer0);
      Class<Integer> class0 = Integer.class;
      Feature feature0 = Feature.SortFeidFastMatch;
      Feature feature1 = Feature.SupportArrayToBean;
      Feature[] featureArray0 = new Feature[2];
      featureArray0[0] = feature1;
      featureArray0[1] = feature0;
      // Undeclared exception!
      try { 
        JSON.parseObject("1.2.46", (Type) class0, featureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect {, actual float, pos 0, fastjson-version 1.2.46
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(59, (Object) null);
      jSONArray0.getString(59);
      Type type0 = jSONArray0.componentType;
      jSONArray0.getObject(59, (Type) null);
      assertEquals(60, jSONArray0.size());
      
      jSONArray0.fluentClear();
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray1.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      jSONArray2.toArray();
      Integer integer0 = new Integer(989);
      jSONArray1.contains((Object) null);
      int int0 = 1;
      ParserConfig parserConfig0 = new ParserConfig();
      // Undeclared exception!
      try { 
        JSON.parseObject("yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(35);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)89;
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)75;
      int int0 = 96;
      UTF8Decoder uTF8Decoder0 = new UTF8Decoder();
      Type type0 = null;
      Feature[] featureArray0 = new Feature[2];
      Feature feature0 = Feature.InitStringFieldAsEmpty;
      featureArray0[0] = feature0;
      Feature feature1 = Feature.AllowArbitraryCommas;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "com.alibaba.fastjson.serializer.EnumerationSerializer");
      Integer integer0 = new Integer((byte)108);
      jSONArray0.indexOf(integer0);
      // Undeclared exception!
      try { 
        uTF8Decoder0.decode(byteBuffer0, charBuffer0, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(59, "");
      Class<JSONArray> class0 = JSONArray.class;
      jSONArray0.toJavaList(class0);
      assertEquals(60, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet(37, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.set(989, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(59, (Object) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JSON.defaultTimeZone = jSONArray0.defaultTimeZone;
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      Class<JSONArray> class0 = JSONArray.class;
      jSONArray0.toJavaList(class0);
      jSONArray0.getTimestamp(59);
      jSONArray0.setRelatedArray((Object) null);
      assertEquals(60, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.parseObject("");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(989, (Collection<?>) linkedHashSet0);
      jSONArray2.fluentRemove(3089);
      Object object0 = new Object();
      Integer integer0 = new Integer((-1361));
      jSONArray0.contains(integer0);
      jSONArray2.getBigDecimal(989);
      jSONArray2.getJSONArray(1520);
      jSONArray1.fluentAdd((Object) null);
      assertEquals(3090, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.parseObject("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      Class<Object> class0 = Object.class;
      jSONArray1.toJavaList(class0);
      jSONArray1.getShort(989);
      jSONArray1.remove(989);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(989, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.clear();
      jSONArray0.set(3089, jSONArray1);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      jSONArray0.getDoubleValue(999);
      jSONArray0.removeAll(linkedHashSet0);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.parseObject("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      Class<Object> class0 = Object.class;
      jSONArray1.toJavaList(class0);
      jSONArray0.getBigInteger(989);
      jSONArray1.fluentSet(3089, "");
      jSONArray0.getBoolean(3089);
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(3089);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(989, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.set(989, "1.2.46");
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(989);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(55, (Object) null);
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      jSONArray0.getLongValue(55);
      jSONArray0.getRelatedArray();
      jSONArray0.getBoolean(0);
      assertEquals(56, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger((-207));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Collection<JSONArray> collection0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 645;
      JSONArray jSONArray1 = jSONArray0.fluentSet(645, "com.alibaba.fastjson.serializer.EnumerationSerializer");
      Object object0 = new Object();
      jSONArray1.fluentAdd(108, object0);
      int int1 = (-1099);
      Class<Object> class0 = Object.class;
      JSON.toJavaObject((JSON) jSONArray1, class0);
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) jSONArray1, (SerializeFilter[]) null, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLong(28);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 28, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(59, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.getSqlDate(59);
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      jSONArray0.getObject(59, (Type) parameterizedTypeImpl0);
      jSONArray0.fluentSet(59, (Object) null);
      jSONArray0.fluentRemove((Object) null);
      assertEquals(59, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getInteger((-1221));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(35);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "com.alibaba.fastjson.serializer.EnumerationSerializer";
      stringArray0[2] = "1.2.46";
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringKeyAsString;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature2;
      serializerFeatureArray0[2] = serializerFeature2;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature1;
      JSON.toJSONString((Object) serializerFeature2, serializerFeatureArray0);
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      jSONArray0.fluentRetainAll(set0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.isEmpty();
      Integer integer0 = new Integer(976);
      JSONArray jSONArray2 = jSONArray1.fluentSet(1541, integer0);
      float float0 = jSONArray0.getFloatValue(989);
      assertEquals(1542, jSONArray0.size());
      assertEquals(0.0F, float0, 0.01F);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        jSONArray2.getObject((-1116), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShort(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 47;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONArray0.set(47, linkedList0);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(47);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1198), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.hashCode();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-93);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) null);
      jSONArray1.toArray();
      Integer integer0 = new Integer(67);
      jSONArray0.contains((Object) null);
      ParserConfig parserConfig0 = new ParserConfig();
      jSONArray0.getJSONObject(55);
      Integer integer1 = new Integer(989);
      jSONArray0.add(1, (Object) integer1);
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      LinkedHashSet<Annotation> linkedHashSet1 = new LinkedHashSet<Annotation>();
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll(2657, (Collection<?>) linkedHashSet1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2657, Size: 58
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 55;
      jSONArray0.set(55, (Object) null);
      Class<String> class0 = String.class;
      JavaBeanInfo.getBuilderClass(class0, (JSONType) null);
      jSONArray0.setComponentType((Type) null);
      jSONArray0.hashCode();
      jSONArray0.toArray();
      // Undeclared exception!
      try { 
        jSONArray0.getString(1159);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1159, Size: 56
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(59, (Object) null);
      ParserConfig parserConfig0 = ParserConfig.global;
      Object object0 = JSON.toJSON((Object) jSONArray0, parserConfig0);
      jSONArray0.set(59, object0);
      jSONArray0.getJSONArray(59);
      assertEquals(60, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3089, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      jSONArray0.set(46, linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      jSONArray1.isEmpty();
      jSONArray1.fluentRemoveAll(jSONArray0);
      assertEquals(0, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentClear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(22);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "com.alibaba.fastjson.serializer.EnumerationSerializer";
      stringArray0[2] = "1.2.46";
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringKeyAsString;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature2;
      serializerFeatureArray0[2] = serializerFeature2;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature1;
      JSON.toJSONString((Object) serializerFeature2, serializerFeatureArray0);
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      jSONArray2.isEmpty();
      Integer integer0 = new Integer(976);
      jSONArray2.fluentSet(1541, integer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray1.add(711, (Object) serializerFeature2);
      jSONArray0.setRelatedArray(integer0);
      // Undeclared exception!
      try { 
        jSONArray2.getByte((-522));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(3135, "k");
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      jSONArray0.fluentSet(3135, (Object) null);
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>(0);
      Integer integer0 = new Integer(3600);
      int int0 = jSONArray0.getIntValue(0);
      assertEquals(3136, jSONArray0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      Object object0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-2854));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      Class<JSONArray> class0 = JSONArray.class;
      // Undeclared exception!
      try { 
        jSONArray1.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.JSONArray
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.parseObject("");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(989, (Collection<?>) linkedHashSet0);
      jSONArray2.fluentRemove(3089);
      Object object0 = new Object();
      Integer integer0 = new Integer((-1383));
      jSONArray0.contains(integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      jSONArray1.add(1, (Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getBoolean((-1383));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      jSONArray1.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray1.getDouble(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.parseObject("");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) null);
      jSONArray3.fluentRemove(3089);
      Object object0 = new Object();
      Integer integer0 = new Integer((-1383));
      jSONArray0.contains(integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      jSONArray1.add(1, (Object) null);
      jSONArray0.getBoolean(0);
      assertEquals(3091, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      assertFalse(listIterator0.hasPrevious());
      
      jSONArray0.fluentSet(0, listIterator0);
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.isEmpty();
      jSONArray0.lastIndexOf((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(35);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "com.alibaba.fastjson.serializer.EnumerationSerializer";
      stringArray0[2] = "1.2.46";
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature1;
      JSON.toJSONString((Object) serializerFeature1, serializerFeatureArray0);
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      jSONArray2.isEmpty();
      Integer integer0 = new Integer(1541);
      JSONArray jSONArray3 = jSONArray2.fluentSet(1617, serializerFeature0);
      jSONArray3.add(1541, (Object) serializerFeature0);
      JSONArray jSONArray4 = jSONArray1.fluentAdd(976, (Object) null);
      JSON.toJSONString((Object) jSONArray2);
      jSONArray4.getByte(160);
      jSONArray3.add(976, (Object) serializerFeature1);
      Class<Object> class0 = Object.class;
      jSONArray1.getObject(119, class0);
      jSONArray2.getString(989);
      jSONArray2.containsAll(jSONArray4);
      jSONArray0.addAll((Collection<?>) jSONArray2);
      jSONArray3.getSqlDate(160);
      jSONArray0.getJSONObject(44);
      assertEquals(3242, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(334);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 334, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      Object object0 = new Object();
      jSONArray0.set(939, object0);
      Type type0 = jSONArray0.componentType;
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(939);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.lang.Object@48bea9ed
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(35);
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "com.alibaba.fastjson.serializer.EnumerationSerializer";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "yyyy-MM-dd HH:mm:ss";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      List<Object> list0 = javaBeanSerializer0.getFieldValues(stringArray0[1]);
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(list0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      jSONArray1.setComponentType(class0);
      SerializerFeature serializerFeature0 = SerializerFeature.WriteEnumUsingName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteSlashAsSpecial;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.WriteBigDecimalAsPlain;
      serializerFeatureArray0[4] = serializerFeature4;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) javaBeanSerializer0, 0, serializerFeatureArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class class com.alibaba.fastjson.serializer.JavaBeanSerializer
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONArray0.set(0, object0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.getJSONObject(0);
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.add((-214748364), (Object) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -214748364, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(989, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      jSONArray0.getDouble(989);
      jSONArray0.getSqlDate(0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(0, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray1.set(1995, jSONArray0);
      jSONArray1.getComponentType();
      jSONArray0.hashCode();
      jSONArray1.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.parseObject((String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedList<InputStream> linkedList0 = new LinkedList<InputStream>();
      jSONArray1.fluentSet(989, linkedList0);
      Class<Object> class0 = Object.class;
      jSONArray0.toJavaList(class0);
      // Undeclared exception!
      try { 
        jSONArray1.getBigInteger(989);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(989, (Object) null);
      jSONArray0.set(0, (Object) null);
      Type type0 = jSONArray0.componentType;
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      jSONArray0.getDouble(0);
      jSONArray0.getDoubleValue(914);
      jSONArray0.getJSONArray(958);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.parseObject("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, "");
      Class<Object> class0 = Object.class;
      jSONArray1.toJavaList(class0);
      jSONArray0.remove(989);
      jSONArray0.getBigInteger(55);
      assertEquals(989, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(35);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "com.alibaba.fastjson.serializer.EnumerationSerializer";
      stringArray0[2] = "1.2.46";
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringKeyAsString;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature2;
      serializerFeatureArray0[2] = serializerFeature2;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature1;
      JSON.toJSONString((Object) serializerFeature2, serializerFeatureArray0);
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      jSONArray2.isEmpty();
      Integer integer0 = new Integer(976);
      jSONArray2.fluentSet(1541, integer0);
      jSONArray1.add(711, (Object) serializerFeature2);
      // Undeclared exception!
      try { 
        jSONArray2.getByte((-522));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.listIterator();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int int0 = 27;
      JSONArray jSONArray0 = new JSONArray(27);
      jSONArray0.stream();
      String string0 = "";
      JSONScanner jSONScanner0 = new JSONScanner("", 2258);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.alibaba.fastjson.serializer.EnumerationSerializer");
      Class<JSONArray> class0 = JSONArray.class;
      Collection<String> collection0 = jSONScanner0.newCollectionByType(class0);
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(collection0);
      // Undeclared exception!
      try { 
        jSONArray1.getString(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((-875));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -875
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      JSONArray jSONArray1 = new JSONArray(3089);
      JSONArray jSONArray2 = jSONArray0.fluentAddAll((Collection<?>) jSONArray1);
      jSONArray2.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      // Undeclared exception!
      try { 
        JSON.parseObject("`e=Yj}uxk_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : `e=Yj}uxk_
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(35);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "com.alibaba.fastjson.serializer.EnumerationSerializer";
      stringArray0[2] = "1.2.46";
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature1;
      JSON.toJSONString((Object) serializerFeature1, serializerFeatureArray0);
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      jSONArray2.isEmpty();
      Integer integer0 = new Integer(1541);
      JSONArray jSONArray3 = jSONArray2.fluentSet(1617, serializerFeature0);
      jSONArray3.add(1541, (Object) serializerFeature0);
      JSONArray jSONArray4 = jSONArray1.fluentAdd(976, (Object) null);
      jSONArray4.getByte(160);
      jSONArray3.add(976, (Object) serializerFeature1);
      assertEquals(1621, jSONArray0.size());
      assertEquals(1621, jSONArray2.size());
      
      Class<Object> class0 = Object.class;
      jSONArray1.getObject(119, class0);
      assertEquals(1621, jSONArray1.size());
      
      jSONArray2.containsAll(jSONArray4);
      jSONArray0.addAll((Collection<?>) jSONArray2);
      assertEquals(3242, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      int int0 = 1141048066;
      JSONArray jSONArray0 = new JSONArray(1141048066);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentRemoveAll(jSONArray0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      jSONArray1.fluentSet(3089, jSONArray0);
      jSONArray1.listIterator();
      Class<JSONArray> class0 = JSONArray.class;
      jSONArray1.toJavaList(class0);
      // Undeclared exception!
      jSONArray0.getLong(3089);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.set(966, jSONArray1);
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      boolean boolean0 = jSONArray1.containsAll(jSONArray0);
      assertEquals(967, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(55, linkedHashSet0);
      jSONArray0.hashCode();
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(55, (Collection<?>) linkedHashSet0);
      jSONArray1.toArray();
      LinkedHashSet<Field> linkedHashSet1 = new LinkedHashSet<Field>();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      jSONArray1.toArray();
      int int0 = (-214748364);
      // Undeclared exception!
      try { 
        jSONArray1.getInteger((-214748364));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.fluentSet(24, jSONArray0);
      jSONArray1.toArray();
      assertEquals(25, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray1.toArray();
      // Undeclared exception!
      try { 
        jSONArray0.addAll((-1928), (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1928, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.fluentRetainAll(jSONArray0);
      jSONArray1.listIterator();
      int int0 = 2071;
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-4990));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.indexOf((Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getString(59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.parseObject("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray0.getInteger(28);
      jSONArray1.fluentSet(6, (Object) null);
      jSONArray0.getLong(1276);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(614);
      Object object0 = null;
      jSONArray0.clone();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate((-2854));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(989, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      jSONArray0.getDouble(989);
      jSONArray0.getObject(1, (Type) null);
      Integer integer0 = new Integer(0);
      JSONObject jSONObject0 = new JSONObject(1);
      jSONArray0.add((Object) jSONObject0);
      assertEquals(991, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      List<PushbackInputStream> list0 = jSONArray0.toJavaList(class0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 34;
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      jSONArray0.set(34, linkedHashSet0);
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet1 = new LinkedHashSet<Field>();
      // Undeclared exception!
      try { 
        jSONArray0.getLongValue(34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(1651);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "yyyy-MM-dd HH:mm:ss");
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-713), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.contains("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int int0 = 9;
      JSONArray jSONArray0 = new JSONArray(22);
      int int1 = (-1605);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-1605));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray1.fluentRemoveAll(jSONArray0);
      jSONArray2.fluentRetainAll(jSONArray1);
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        jSONArray2.getObject(3089, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      int int0 = 55;
      jSONArray0.set(0, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        JSON.parseObject("com.alibaba.fastjson.serializer.EnumerationSerializer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, pos 1, json : com.alibaba.fastjson.serializer.EnumerationSerializer
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray1.fluentSet((-131), jSONArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray1.getFloat((-1353));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(21, (Object) null);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject((-2902));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentAdd((Object) "1.2.46");
      int int0 = (-412);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-412));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 966;
      // Undeclared exception!
      try { 
        jSONArray0.getDate(966);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 966, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      int int0 = 1646;
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(1646);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(1378, (Collection<?>) jSONArray1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1378, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      JSON.DEFAULT_TYPE_KEY = "com.alibaba.fastjson.serializer.EnumerationSerializer";
      JSONArray jSONArray2 = jSONArray0.fluentSet(989, jSONArray1);
      jSONArray2.removeAll(jSONArray1);
      jSONArray2.getRelatedArray();
      assertTrue(jSONArray2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(989, (Object) null);
      Type type0 = jSONArray0.componentType;
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      jSONArray0.getDouble(989);
      jSONArray0.addAll((Collection<?>) linkedHashSet0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray1.removeAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentSet(3089, jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemoveAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      jSONArray0.set(3530, byteArrayInputStream0);
      jSONArray0.getJSONObject(3530);
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(3530);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : java.io.ByteArrayInputStream@6243ed7d
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      JSON.parseObject("");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSONArray jSONArray3 = jSONArray1.fluentAddAll(989, (Collection<?>) linkedHashSet0);
      jSONArray3.fluentRemove(3089);
      Object object0 = new Object();
      Integer integer0 = new Integer((-1361));
      jSONArray0.contains(integer0);
      JSONArray jSONArray4 = new JSONArray(989);
      boolean boolean0 = jSONArray2.isEmpty();
      assertEquals(3089, jSONArray2.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(41);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(989, (Object) null);
      Type type0 = jSONArray0.componentType;
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      jSONArray0.getDouble(989);
      jSONArray0.getDoubleValue(1);
      // Undeclared exception!
      try { 
        jSONArray0.subList(37, (-857));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(37) > toIndex(-857)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      JSON.DEFFAULT_DATE_FORMAT = "yyyy-MM-dd HH:mm:ss";
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      ParserConfig.getFieldFromCache("1.2.46", concurrentSkipListMap0);
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      JSON.toJSONString((Object) null, (SerializeFilter[]) null, serializerFeatureArray0);
      jSONArray1.getBooleanValue(55);
      jSONArray0.getInteger(52);
      Class<String> class0 = String.class;
      JSON.toJavaObject((JSON) jSONArray1, class0);
      jSONArray1.getBigDecimal(55);
      jSONArray0.isEmpty();
      JSONArray jSONArray2 = jSONArray0.fluentRetainAll(jSONArray1);
      jSONArray2.lastIndexOf((Object) null);
      boolean boolean0 = jSONArray2.contains("yyyy-MM-dd HH:mm:ss");
      assertEquals(56, jSONArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      JSON.parseObject("");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSONArray jSONArray3 = jSONArray1.fluentAddAll(989, (Collection<?>) linkedHashSet0);
      jSONArray3.fluentRemove(3089);
      Object object0 = new Object();
      Integer integer0 = new Integer((-1361));
      jSONArray0.contains(integer0);
      JSONArray jSONArray4 = new JSONArray(989);
      jSONArray2.isEmpty();
      jSONArray1.iterator();
      // Undeclared exception!
      try { 
        jSONArray3.getFloat((-1829));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(35);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "com.alibaba.fastjson.serializer.EnumerationSerializer";
      stringArray0[2] = "1.2.46";
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature1;
      JSON.toJSONString((Object) serializerFeature1, serializerFeatureArray0);
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      jSONArray0.fluentRetainAll(set0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.isEmpty();
      Integer integer0 = new Integer(976);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONArray jSONArray2 = jSONArray1.fluentSet(1541, integer0);
      jSONArray0.getFloat(35);
      jSONArray2.toArray();
      assertEquals(1542, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.parseObject("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      Class<Object> class0 = Object.class;
      jSONArray1.toJavaList(class0);
      jSONArray0.getBigInteger(989);
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, "");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) class0);
      Predicate<Object> predicate1 = predicate0.negate();
      linkedHashSet0.removeIf(predicate1);
      jSONArray0.getBoolean(3089);
      jSONArray1.getObject(0, (Type) null);
      jSONArray2.getObject(989, (Type) null);
      assertEquals(3090, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Object> class0 = Object.class;
      List<Object> list0 = jSONArray0.toJavaList(class0);
      JSONArray jSONArray1 = new JSONArray(list0);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      // Undeclared exception!
      try { 
        JSON.toJSONString((Object) jSONArray0, serializeConfig0, (SerializerFeature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      JSONArray jSONArray1 = jSONArray0.fluentRemove(object0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      JSONArray jSONArray3 = jSONArray2.fluentAddAll((Collection<?>) jSONArray0);
      int int0 = jSONArray3.indexOf(jSONArray1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(989, (Object) null);
      Type type0 = jSONArray0.componentType;
      jSONArray0.hashCode();
      jSONArray0.toArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      jSONArray1.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.getBigDecimal(0);
      jSONArray0.getSqlDate(961);
      assertEquals(990, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(65279);
      jSONArray0.isEmpty();
      int int0 = (-1001);
      // Undeclared exception!
      try { 
        jSONArray0.get((-1001));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(3089);
      jSONArray0.setRelatedArray(integer0);
      int int0 = jSONArray0.lastIndexOf(integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.parseObject("");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      JSONArray jSONArray2 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSONArray jSONArray3 = jSONArray1.fluentAddAll(989, (Collection<?>) linkedHashSet0);
      JSONArray jSONArray4 = jSONArray3.fluentRemove(3089);
      Object object0 = new Object();
      Integer integer0 = new Integer((-1361));
      jSONArray1.addAll(3089, (Collection<?>) jSONArray0);
      jSONArray0.contains(integer0);
      JSON.toJSONString((Object) null, false);
      ParserConfig.getGlobalInstance();
      jSONArray1.add(1, (Object) null);
      jSONArray0.getBoolean(0);
      jSONArray2.getObject(70, (Type) null);
      int int0 = jSONArray4.getIntValue(3059);
      assertEquals(6179, jSONArray4.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.parseObject("");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(989, (Collection<?>) linkedHashSet0);
      jSONArray2.fluentRemove(3089);
      Object object0 = new Object();
      Integer integer0 = new Integer((-1383));
      jSONArray0.contains(integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      jSONArray1.add(1, (Object) null);
      jSONArray0.getByte(0);
      JSONArray jSONArray3 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray3.fluentAdd(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp((-637));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(35);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "com.alibaba.fastjson.serializer.EnumerationSerializer";
      stringArray0[2] = "1.2.46";
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringKeyAsString;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature2;
      serializerFeatureArray0[2] = serializerFeature2;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature1;
      JSON.toJSONString((Object) serializerFeature2, serializerFeatureArray0);
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      jSONArray0.fluentRetainAll(set0);
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.isEmpty();
      Integer integer0 = new Integer(976);
      JSONArray jSONArray2 = jSONArray1.fluentSet(1541, integer0);
      JSONArray jSONArray3 = jSONArray1.fluentAddAll(1390, (Collection<?>) jSONArray2);
      // Undeclared exception!
      try { 
        jSONArray3.add((-1660), (Object) serializerFeature0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1660, Size: 3084
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue((-1013));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.subList(31, 31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 31
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.add((Object) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONArray0);
      jSONArray1.clone();
      assertEquals(1, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<PushbackInputStream> linkedHashSet0 = new LinkedHashSet<PushbackInputStream>();
      jSONArray0.set(59, linkedHashSet0);
      jSONArray0.hashCode();
      // Undeclared exception!
      try { 
        jSONArray0.getSqlDate(59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(55, (Object) null);
      jSONArray0.hashCode();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray0.toArray();
      Integer integer0 = new Integer(55);
      jSONArray0.contains(integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      jSONArray0.getJSONObject(1);
      jSONArray0.add(55, (Object) null);
      int int0 = 0;
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(1196);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1196, Size: 57
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove(3089);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSONArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      jSONArray1.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      // Undeclared exception!
      try { 
        jSONArray1.subList(888, (-3399));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(888) > toIndex(-3399)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      jSONArray1.isEmpty();
      boolean boolean0 = jSONArray0.removeAll(jSONArray1);
      assertEquals(0, jSONArray1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      jSONArray1.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray1.getFloat(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONArray0.containsAll(jSONArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(989, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        jSONArray0.getDouble((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = jSONArray0.getRelatedArray();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      jSONArray0.containsAll(linkedHashSet0);
      jSONArray0.add((Object) linkedHashSet0);
      LinkedHashSet<Object> linkedHashSet1 = new LinkedHashSet<Object>();
      // Undeclared exception!
      try { 
        jSONArray0.getFloat(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(35);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "com.alibaba.fastjson.serializer.EnumerationSerializer";
      stringArray0[2] = "1.2.46";
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature1;
      JSON.toJSONString((Object) serializerFeature1, serializerFeatureArray0);
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      jSONArray2.isEmpty();
      Integer integer0 = new Integer(1541);
      JSONArray jSONArray3 = jSONArray2.fluentSet(1617, serializerFeature0);
      jSONArray3.add(1541, (Object) serializerFeature0);
      JSONArray jSONArray4 = jSONArray1.fluentAdd(976, (Object) null);
      jSONArray4.getByte(160);
      jSONArray3.add(976, (Object) serializerFeature1);
      Class<Object> class0 = Object.class;
      jSONArray1.getObject(119, class0);
      jSONArray2.getString(989);
      jSONArray2.containsAll(jSONArray4);
      jSONArray0.addAll((Collection<?>) jSONArray2);
      jSONArray3.getSqlDate(160);
      assertEquals(3242, jSONArray3.size());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        jSONArray0.set((-385), pushbackInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      // Undeclared exception!
      try { 
        jSONArray0.getJSONObject(20);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 20, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 55;
      JSON.DEFFAULT_DATE_FORMAT = "yyyy-MM-dd HH:mm:ss";
      jSONArray0.set(55, "yyyy-MM-dd HH:mm:ss");
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(55);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : yyyy-MM-dd HH:mm:ss
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(59, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.getTimestamp(59);
      int int0 = JSON.DEFAULT_PARSER_FEATURE;
      jSONArray0.getBigDecimal(59);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(955);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 955
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(989, (Object) null);
      Type type0 = jSONArray0.componentType;
      jSONArray0.hashCode();
      jSONArray0.toArray();
      jSONArray0.getIntValue(41);
      int int0 = JSON.DEFAULT_PARSER_FEATURE;
      jSONArray0.getObject(989, (Type) null);
      // Undeclared exception!
      try { 
        jSONArray0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.parseObject("");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      jSONArray0.fluentRemoveAll(linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(989, (Collection<?>) linkedHashSet0);
      JSONArray jSONArray3 = jSONArray2.fluentRemove(3089);
      Object object0 = new Object();
      Integer integer0 = new Integer((-1383));
      jSONArray0.contains(integer0);
      ParserConfig parserConfig0 = new ParserConfig();
      jSONArray1.add(1, (Object) null);
      jSONArray0.getBoolean(0);
      // Undeclared exception!
      try { 
        jSONArray3.getObject((-1128), (Type) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(1519, (Object) null);
      jSONArray0.getJSONArray(1519);
      assertEquals(1520, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue((-1198));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject((-1198), class0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(55, (Object) null);
      jSONArray0.hashCode();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONArray0.toArray();
      int int0 = 1;
      ParserConfig.getGlobalInstance();
      int int1 = 0;
      Object object0 = new Object();
      jSONArray0.add(0, object0);
      jSONArray0.getBoolean(55);
      ConcurrentHashMap<String, Field> concurrentHashMap0 = new ConcurrentHashMap<String, Field>();
      // Undeclared exception!
      try { 
        ParserConfig.getFieldFromCache("", concurrentHashMap0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      int int0 = 35;
      JSONArray jSONArray0 = new JSONArray(35);
      Class<Object> class0 = Object.class;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "com.alibaba.fastjson.serializer.EnumerationSerializer";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "yyyy-MM-dd HH:mm:ss";
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(class0, stringArray0);
      javaBeanSerializer0.getFieldValues(stringArray0[1]);
      JSONObject jSONObject0 = new JSONObject();
      Collection<Object> collection0 = jSONObject0.values();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(3063, collection0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3063, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(1519);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(35);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      jSONArray0.fluentRetainAll(linkedHashSet0);
      // Undeclared exception!
      try { 
        jSONArray0.fluentAddAll(3089, (Collection<?>) linkedHashSet0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      Integer[] integerArray0 = new Integer[0];
      Integer[] integerArray1 = jSONArray1.toArray(integerArray0);
      assertEquals(0, integerArray1.length);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.listIterator();
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue((-23));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(3089, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      JSON.parseObject("");
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentAddAll(989, (Collection<?>) linkedHashSet0);
      jSONArray0.fluentAdd((Object) null);
      LinkedHashSet<Field> linkedHashSet1 = new LinkedHashSet<Field>();
      // Undeclared exception!
      try { 
        jSONArray2.getDouble(3089);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(35);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "com.alibaba.fastjson.serializer.EnumerationSerializer";
      stringArray0[2] = "1.2.46";
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteDefaultValue;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNonStringValueAsString;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature1;
      JSON.toJSONString((Object) serializerFeature1, serializerFeatureArray0);
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(set0);
      JSONArray jSONArray2 = jSONArray0.fluentClear();
      jSONArray2.isEmpty();
      Integer integer0 = new Integer(976);
      jSONArray2.fluentSet(1541, integer0);
      jSONArray1.add(711, (Object) serializerFeature0);
      // Undeclared exception!
      try { 
        jSONArray2.getByte((-522));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(722);
      // Undeclared exception!
      try { 
        JSON.parseArray("com.alibaba.fastjson.serializer.EnumerationSerializer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error, expect [, actual error, pos 0, fieldName null
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.getComponentType();
      jSONArray0.setComponentType((Type) null);
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      boolean boolean0 = jSONArray0.containsAll(linkedHashSet0);
      boolean boolean1 = jSONArray0.contains(linkedHashSet0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.set(2230, (Object) null);
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) "com.alibaba.fastjson.serializer.EnumerationSerializer");
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(35);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "com.alibaba.fastjson.serializer.EnumerationSerializer";
      Integer integer0 = new Integer((-1435));
      Integer integer1 = new Integer((-1435));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      jSONArray0.contains(pushbackInputStream0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)117;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Collection<Object> collection0 = null;
      // Undeclared exception!
      try { 
        jSONArray0.fluentRetainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(989, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      jSONArray0.getDouble(989);
      jSONArray0.getDoubleValue(1);
      jSONArray0.getIntValue(1);
      ConcurrentSkipListMap<String, Field> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Field>();
      jSONArray0.addAll((Collection<?>) linkedHashSet0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONArray2.subList(0, 989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 989
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(3184);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "com.alibaba.fastjson.serializer.EnumerationSerializer";
      stringArray0[3] = "1.2.46";
      stringArray0[4] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[5] = "";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject(3184);
      jSONObject0.getJSONArray("com.alibaba.fastjson.serializer.EnumerationSerializer");
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[4];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.WriteNonStringValueAsString;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNonStringKeyAsString;
      serializerFeatureArray0[3] = serializerFeature3;
      JSON.toJSONString((Object) null, serializerFeatureArray0);
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      jSONArray1.isEmpty();
      JSONArray jSONArray2 = jSONArray0.fluentSet(989, "1.2.46");
      int int0 = 991;
      // Undeclared exception!
      try { 
        jSONArray2.add(991, (Object) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 991, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(55, (Object) null);
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSON.parseObject("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONArray jSONArray1 = jSONArray0.fluentSet(3089, linkedHashSet0);
      Class<Object> class0 = Object.class;
      jSONArray1.toJavaList(class0);
      jSONArray1.getShort(989);
      jSONArray1.remove(989);
      // Undeclared exception!
      try { 
        jSONArray1.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.getComponentType();
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale locale0 = Locale.ITALIAN;
      jSONArray0.defaultLocale.getUnicodeLocaleKeys();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      jSONArray0.fluentClear();
      jSONArray1.isEmpty();
      JSONArray jSONArray2 = jSONArray1.fluentSet(3089, 989);
      jSONArray0.getFloat(3059);
      jSONArray1.getRelatedArray();
      JSONArray jSONArray3 = jSONArray0.fluentAdd((Object) jSONArray2);
      jSONArray3.addAll(3089, (Collection<?>) linkedHashSet0);
      assertEquals(3091, jSONArray2.size());
      
      jSONArray0.fluentClear();
      assertTrue(jSONArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      // Undeclared exception!
      try { 
        jSONArray0.listIterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(35);
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        jSONArray0.getString(35);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 35, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.set(55, (Object) null);
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      jSONArray0.getLongValue(55);
      jSONArray0.getRelatedArray();
      jSONArray0.getComponentType();
      int int0 = jSONArray0.size();
      assertEquals(56, int0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getShortValue(59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertTrue(jSONArray0.isEmpty());
      
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      jSONArray0.isEmpty();
      boolean boolean0 = jSONArray0.equals(jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      ParserConfig parserConfig0 = new ParserConfig(true);
      jSONArray0.set(4445, parserConfig0);
      jSONArray0.hashCode();
      jSONArray0.toArray();
      Integer integer0 = new Integer(3089);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONArray0.getJSONObject(4445);
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedHashSet0);
      jSONArray1.getString(98);
      jSONArray0.containsAll(jSONArray1);
      Class<Integer> class0 = Integer.class;
      // Undeclared exception!
      try { 
        jSONArray1.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : com.alibaba.fastjson.parser.ParserConfig@96
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, jSONArray0);
      jSONArray1.fluentAddAll((Collection<?>) jSONArray0);
      assertEquals(2, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) "1.2.46");
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) jSONArray0);
      JSONArray jSONArray3 = jSONArray0.fluentRetainAll(jSONArray2);
      jSONArray3.fluentSet(989, jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray1.getFloatValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentAdd((Object) "1.2.46");
      Class<PushbackInputStream> class0 = PushbackInputStream.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(989, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.fluentAdd((Object) "1.2.46");
      Class<InputStream> class0 = InputStream.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("1.2.46", parserConfig0);
      defaultJSONParser0.getFieldTypeResolver();
      JSON.parseObject("", class0, (ParseProcess) null, (Feature[]) null);
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.PrettyFormat;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.SkipTransientField;
      serializerFeatureArray0[4] = serializerFeature4;
      JSON.toJSONString((Object) null, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1.2.46\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(59, (Object) null);
      jSONArray0.getShortValue(19);
      jSONArray0.getBooleanValue(59);
      // Undeclared exception!
      try { 
        jSONArray0.fluentRemove((-489));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      int int0 = 59;
      // Undeclared exception!
      try { 
        jSONArray0.getString(59);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      BigDecimal bigDecimal0 = new BigDecimal(989);
      jSONArray0.listIterator();
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray2.getInteger(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JSONArray jSONArray0 = new JSONArray((List<Object>) null);
      int int0 = (-3207);
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      // Undeclared exception!
      try { 
        jSONArray0.getByte((-3207));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      JSONArray jSONArray2 = jSONArray0.fluentAdd(0, (Object) jSONArray1);
      jSONArray2.set(0, jSONArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getString(59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 59, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.clear();
      jSONArray0.set(989, (Object) null);
      Type type0 = jSONArray0.componentType;
      jSONArray0.hashCode();
      jSONArray0.toArray();
      LinkedHashSet<Field> linkedHashSet0 = new LinkedHashSet<Field>();
      jSONArray0.getDouble(989);
      jSONArray0.getObject(1, (Type) null);
      // Undeclared exception!
      try { 
        jSONArray0.addAll(958, (Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      List<Object> list0 = null;
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      // Undeclared exception!
      try { 
        jSONArray0.getString((-1361));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      jSONArray0.fluentRemoveAll(set0);
      int int0 = 0;
      JSONArray jSONArray1 = jSONArray0.fluentAddAll(0, (Collection<?>) set0);
      // Undeclared exception!
      try { 
        jSONArray1.fluentRemove(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
