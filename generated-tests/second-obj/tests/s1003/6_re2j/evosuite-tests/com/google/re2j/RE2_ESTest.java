/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:00:20 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.RE2;
import java.nio.CharBuffer;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("ASCII_Hex_Digit");
      boolean boolean0 = rE2_0.match("ASCII_Hex_Digit");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("nc");
      rE2_0.numberOfCapturingGroups();
      byte[] byteArray0 = new byte[1];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("&xv_*4Y!Z&K+n%zFd");
      int[] intArray0 = rE2_0.findIndex("&xv_*4Y!Z&K+n%zFd");
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      byte[] byteArray0 = new byte[1];
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = RE2.match("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = new RE2("aY");
      int[] intArray0 = rE2_0.findSubmatchIndex("aY");
      assertArrayEquals(new int[] {0, 2}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      rE2_0.reset();
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 760);
      assertNotNull(list0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertEquals("", rE2_0.toString());
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.find("3jV");
      assertEquals("", string0);
      assertEquals("", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.find("");
      assertEquals("", string0);
      assertEquals("", rE2_0.toString());
      assertNotNull(string0);
      
      Machine machine0 = rE2_0.get();
      assertEquals("", rE2_0.toString());
      assertNotNull(machine0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("aY");
      assertEquals("aY", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findIndex("aY");
      assertEquals("aY", rE2_0.toString());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 2}, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-12);
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertEquals("", rE2_0.toString());
      assertNotNull(intArray0);
      assertArrayEquals(new byte[] {(byte)16, (byte) (-12)}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String> list0 = rE2_0.findAll("", 298);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        rE2_0.match("", 256, 256, 256, intArray0, 1012);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = new RE2(":]O%j6e");
      assertEquals(":]O%j6e", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = new int[22];
      intArray0[0] = 240;
      intArray0[11] = 240;
      intArray0[11] = 0;
      intArray0[3] = 240;
      intArray0[4] = 240;
      intArray0[5] = 0;
      intArray0[2] = 240;
      intArray0[4] = 0;
      intArray0[8] = 0;
      boolean boolean0 = rE2_0.match(":]O%j6e", 0, 0, 240, intArray0, 240);
      assertFalse(boolean0);
      assertEquals(":]O%j6e", rE2_0.toString());
      
      RE2 rE2_1 = RE2.compileImpl(":]O%j6e", 0, false);
      assertEquals(":]O%j6e", rE2_1.toString());
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertNotNull(rE2_1);
      assertNotSame(rE2_1, rE2_0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RE2 rE2_0 = new RE2("Q6");
      assertEquals("Q6", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex(" Tc!emciaZ*}|mdxX(6", 1815);
      assertEquals("Q6", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("$f5eOEPn2lR");
      assertEquals("$f5eOEPn2lR", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceFirst("$f5eOEPn2lR", "$f5eOEPn2lR");
      assertEquals("$f5eOEPn2lR", string0);
      assertEquals("$f5eOEPn2lR", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceFirst("", "");
      assertEquals("", string0);
      assertEquals("", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("~DeeD<U^W`hYb@");
      assertEquals("~DeeD<U^W`hYb@", rE2_0.toString());
      assertNotNull(rE2_0);
      
      rE2_0.reset();
      assertEquals("~DeeD<U^W`hYb@", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findSubmatchIndex("~DeeD<U^W`hYb@");
      assertEquals("~DeeD<U^W`hYb@", rE2_0.toString());
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertEquals("", rE2_0.toString());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      rE2_0.reset();
      assertEquals("", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllIndex("", 760);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 208);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String> list0 = rE2_0.findAll("", (-4047));
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", 20, false);
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("2", (-2241));
      assertEquals("", rE2_0.toString());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (-1381));
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("com.google.re2j.RE2");
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, 208);
      assertEquals("com.google.re2j.RE2", rE2_0.toString());
      assertNull(list0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("Ol_Chiki");
      assertEquals("Ol_Chiki", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("cQVp@sBmywmVC", 620);
      assertEquals("Ol_Chiki", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("\r");
      assertEquals("\r", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      assertEquals("\r", rE2_0.toString());
      
      boolean boolean0 = rE2_0.match("\r");
      assertTrue(boolean0);
      assertEquals("\r", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("", (-2047));
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("UTF-8");
      assertEquals("UTF-8", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)26;
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (byte)26);
      assertEquals("UTF-8", rE2_0.toString());
      assertNull(list0);
      assertArrayEquals(new byte[] {(byte)26}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, (-1573));
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string0 = rE2_0.toString();
      assertEquals("", string0);
      assertEquals("", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      rE2_0.reset();
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("", "");
      assertEquals("", string0);
      assertEquals("", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("'~beaOWTg AP8Kn");
      assertEquals("'~beaOWTg AP8Kn", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertEquals("'~beaOWTg AP8Kn", rE2_0.toString());
      assertNull(byteArray1);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)37;
      RE2 rE2_0 = new RE2("ez=A8Q%U59v*");
      assertEquals("ez=A8Q%U59v*", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (byte)37);
      assertEquals("ez=A8Q%U59v*", rE2_0.toString());
      assertNull(list0);
      assertArrayEquals(new byte[] {(byte)37}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("u&W,Gc");
      assertEquals("u&W,Gc", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String> list0 = rE2_0.findAll("", 168);
      assertEquals("u&W,Gc", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      RE2 rE2_0 = RE2.compileImpl("Old_South_Arabian", 7167, true);
      assertEquals("Old_South_Arabian", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertEquals("Old_South_Arabian", rE2_0.toString());
      assertNull(intArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("E-hv1iRpic");
      assertEquals("E-hv1iRpic", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String[] stringArray0 = rE2_0.findSubmatch("E-hv1iRpic");
      assertEquals("E-hv1iRpic", rE2_0.toString());
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("Avestan");
      assertEquals("Avestan", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("Avestan", 838);
      assertEquals("Avestan", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = RE2.quoteMeta("zf[;XGlD");
      assertEquals("zf\\[;XGlD", string0);
      assertNotNull(string0);
      
      RE2 rE2_0 = RE2.compilePOSIX("kPzD,");
      assertEquals("kPzD,", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string1 = rE2_0.replaceFirst("kPzD,", "zf[;XGlD");
      assertEquals("zf[;XGlD", string1);
      assertEquals("kPzD,", rE2_0.toString());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RE2 rE2_0 = new RE2("a~");
      assertEquals("a~", rE2_0.toString());
      assertNotNull(rE2_0);
      
      rE2_0.reset();
      assertEquals("a~", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("a~", "a~");
      assertEquals("a~", string0);
      assertEquals("a~", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceFirst("Thaana", "");
      assertEquals("Thaana", string0);
      assertEquals("", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("|js 3qS^$w4H7es");
      assertEquals("|js 3qS^$w4H7es", rE2_0.toString());
      assertNotNull(rE2_0);
      
      boolean boolean0 = rE2_0.match("|js 3qS^$w4H7es", 929, 810, 929, (int[]) null, 929);
      assertFalse(boolean0);
      assertEquals("|js 3qS^$w4H7es", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RE2 rE2_0 = new RE2("Q6");
      assertEquals("Q6", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (byte)0);
      assertEquals("Q6", rE2_0.toString());
      assertNull(list0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("&xv_*4Y!Z&K+n%zFd");
      assertEquals("&xv_*4Y!Z&K+n%zFd", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.find("&xv_*4Y!Z&K+n%zFd");
      assertEquals("", string0);
      assertEquals("&xv_*4Y!Z&K+n%zFd", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = rE2_0.prefixComplete;
      assertTrue(boolean0);
      
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (-541));
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "";
      RE2 rE2_0 = RE2.compile("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      assertEquals("", rE2_0.toString());
      
      String string1 = "|0  akVjYDfe(U5{)";
      String string2 = "(?:)";
      RE2 rE2_1 = RE2.compilePOSIX("|0  akVjYDfe(U5{)");
      assertEquals("|0  akVjYDfe(U5{)", rE2_1.toString());
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertNotNull(rE2_1);
      assertNotSame(rE2_1, rE2_0);
      
      String[] stringArray0 = rE2_1.findSubmatch("(?:)");
      assertEquals("|0  akVjYDfe(U5{)", rE2_1.toString());
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertNotNull(stringArray0);
      assertNotSame(rE2_1, rE2_0);
      
      try { 
        RE2.compilePOSIX("(?:)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing argument to repetition operator: `?`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("2b%Xxsh1;D\"U");
      assertEquals("2b%Xxsh1;D\"U", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = rE2_0.findSubmatchIndex("2b%Xxsh1;D\"U");
      assertEquals("2b%Xxsh1;D\"U", rE2_0.toString());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 12}, intArray0);
      
      List<int[]> list0 = rE2_0.findAllIndex("2b%Xxsh1;D\"U", 0);
      assertEquals("2b%Xxsh1;D\"U", rE2_0.toString());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("kPzD,");
      assertEquals("kPzD,", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String[] stringArray0 = rE2_0.findSubmatch("UTF-8");
      assertEquals("kPzD,", rE2_0.toString());
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("js3qS^$w4H7e");
      assertEquals("js3qS^$w4H7e", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertFalse(boolean0);
      assertEquals("js3qS^$w4H7e", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("|js 3qS^$w4H7es");
      assertEquals("|js 3qS^$w4H7es", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertTrue(boolean0);
      assertEquals("|js 3qS^$w4H7es", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("A\"|");
      assertEquals("A\"|", rE2_0.toString());
      assertNotNull(rE2_0);
      
      String string0 = rE2_0.replaceAll("A\"|", "A\"|");
      assertEquals("A\"||A\"|", string0);
      assertEquals("A\"|", rE2_0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-19);
      RE2 rE2_0 = RE2.compile("|0  akVjYDfe(U5{)");
      assertEquals("|0  akVjYDfe(U5{)", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertEquals("|0  akVjYDfe(U5{)", rE2_0.toString());
      assertNotNull(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-19)}, byteArray0);
      
      int int0 = 1604;
      // Undeclared exception!
      try { 
        rE2_0.findAll((String) null, (-1396));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = new byte[6];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      int[] intArray0 = new int[22];
      intArray0[0] = (int) (byte)0;
      intArray0[2] = (-44);
      intArray0[3] = 0;
      intArray0[4] = (int) (byte)0;
      // Undeclared exception!
      try { 
        rE2_0.match("", (byte)0, (byte)0, (byte)51, intArray0, 128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      RE2 rE2_0 = RE2.compileImpl("", (byte)0, false);
      assertEquals("", rE2_0.toString());
      assertNotNull(rE2_0);
      
      RE2 rE2_1 = RE2.compilePOSIX("");
      assertEquals("", rE2_1.toString());
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertNotNull(rE2_1);
      assertNotSame(rE2_1, rE2_0);
      
      int[] intArray0 = new int[5];
      intArray0[4] = (int) (byte)0;
      CharBuffer charBuffer0 = CharBuffer.allocate((byte)0);
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = charBuffer0.asReadOnlyBuffer();
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer1.hasArray());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.remaining());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      
      boolean boolean0 = rE2_0.match(charBuffer1, 0, 0, 1350, (int[]) null, 84);
      assertTrue(boolean0);
      assertEquals("", rE2_0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer1.hasArray());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.remaining());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertNotSame(rE2_0, rE2_1);
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals(0, int0);
      assertEquals("", rE2_0.toString());
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertNotSame(rE2_0, rE2_1);
      
      boolean boolean1 = rE2_1.prefixComplete;
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        rE2_1.findAllSubmatch((String) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = (-547);
      String string0 = "|0  akVjYDfe(U5{)";
      RE2 rE2_0 = RE2.compilePOSIX("|0  akVjYDfe(U5{)");
      assertEquals("|0  akVjYDfe(U5{)", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (-547));
      assertEquals("|0  akVjYDfe(U5{)", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      String string1 = RE2.quoteMeta("|0  akVjYDfe(U5{)");
      assertEquals("\\|0  akVjYDfe\\(U5\\{\\)", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      RE2 rE2_1 = null;
      try {
        rE2_1 = new RE2((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Parser$StringIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("|0  akVjYDfe(U5{)");
      assertEquals("|0  akVjYDfe(U5{)", rE2_0.toString());
      assertNotNull(rE2_0);
      
      byte[] byteArray0 = new byte[1];
      String string0 = RE2.quoteMeta("|0  akVjYDfe(U5{)");
      assertEquals("\\|0  akVjYDfe\\(U5\\{\\)", string0);
      assertNotNull(string0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("", (-547));
      assertEquals("|0  akVjYDfe(U5{)", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = rE2_0.longest;
      assertTrue(boolean0);
      
      try { 
        RE2.compileImpl("AA*?()|[-}^$", (-547), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parsing regexp: missing closing ]: `[-}^$`
         //
         verifyException("com.google.re2j.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("A\"|");
      assertEquals("A\"|", rE2_0.toString());
      assertNotNull(rE2_0);
      
      List<int[]> list0 = rE2_0.findAllIndex("A\"|", (-1770));
      assertEquals("A\"|", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
  }
}
