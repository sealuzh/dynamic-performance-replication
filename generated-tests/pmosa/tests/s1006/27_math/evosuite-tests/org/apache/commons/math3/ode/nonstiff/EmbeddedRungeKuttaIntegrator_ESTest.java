/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 06:10:16 GMT 2018
 */

package org.apache.commons.math3.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ObjectStreamConstants;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventFilter;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.events.FilterType;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbeddedRungeKuttaIntegrator_ESTest extends EmbeddedRungeKuttaIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2139.35914325313, (-1978.74649), 10.0, (-1978.74649));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      dormandPrince853Integrator0.addEventHandler((EventHandler) eventFilter0, 10.0, 0.0, 1144);
      dormandPrince853Integrator0.setMaxGrowth((-1978.74649));
      dormandPrince853Integrator0.getMinReduction();
      dormandPrince853Integrator0.getMinReduction();
      dormandPrince853Integrator0.getOrder();
      assertEquals((-1978.74649), dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(8, (-469.974533261), 0.2, 1.0);
      highamHall54Integrator0.getOrder();
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2461.889389837087;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.2;
      doubleArray1[1] = 2461.889389837087;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2461.889389837087, 0.2, doubleArray0, doubleArray1);
      dormandPrince54Integrator0.vecRelativeTolerance = doubleArray1;
      dormandPrince54Integrator0.getEventHandlers();
      dormandPrince54Integrator0.setMaxGrowth((-1303.34546254));
      dormandPrince54Integrator0.setMinReduction(0.0);
      dormandPrince54Integrator0.getMaxGrowth();
      assertEquals((-1303.34546254), dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.0), 2461.889389837087, 2461.889389837087, 2461.889389837087);
      double[][] doubleArray2 = new double[9][5];
      doubleArray2[0] = dormandPrince54Integrator0.vecRelativeTolerance;
      doubleArray2[1] = doubleArray0;
      doubleArray2[2] = doubleArray1;
      doubleArray2[3] = doubleArray0;
      doubleArray2[4] = doubleArray0;
      doubleArray2[5] = doubleArray1;
      doubleArray2[6] = dormandPrince54Integrator0.vecRelativeTolerance;
      doubleArray2[7] = doubleArray0;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 0.2;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-1303.34546254);
      doubleArray3[3] = (-1.0);
      doubleArray2[8] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (-1303.34546254);
      doubleArray4[1] = (-1303.34546254);
      doubleArray4[2] = 0.0;
      doubleArray4[3] = (-1.0);
      doubleArray4[4] = (-1.0);
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 2461.889389837087;
      dormandPrince853Integrator0.estimateError(doubleArray2, doubleArray1, doubleArray4, 0.0);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, (-1707.3103889082427));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(127).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 239.18);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(10.0, 0.0, 0.0, 10.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1004).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      highamHall54Integrator0.sanityChecks(expandableStatefulODE0, 0.0);
      highamHall54Integrator0.scalRelativeTolerance = 1.888423204421997;
      highamHall54Integrator0.resetInternalState();
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getOrder();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = 638.864921386;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.888423204421997;
      doubleArray0[6] = 1.888423204421997;
      doubleArray0[7] = (double) 5;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 1.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setStepSizeControl(0.0, 1.888423204421997, 0.9, 0.9);
      dormandPrince853Integrator0.setMaxGrowth(0.0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 5.0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = 2981.0;
      doubleArray0[1] = 2981.0;
      doubleArray0[2] = 2981.0;
      doubleArray0[3] = 2981.0;
      doubleArray0[4] = 2981.0;
      doubleArray0[5] = 2981.0;
      doubleArray0[6] = 2981.0;
      doubleArray0[7] = 2981.0;
      doubleArray0[8] = 2981.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2981.0, 2981.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setSafety(1360.4985503242);
      dormandPrince853Integrator0.getSafety();
      double[][] doubleArray1 = new double[6][0];
      doubleArray1[0] = doubleArray0;
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(1360.4985503242, (-2353.74355452806), doubleArray0, doubleArray0);
      dormandPrince853Integrator1.setStepSizeControl(1379.0, 10.0, (-1.957497997726303E-8), 75.5424528);
      dormandPrince853Integrator1.setMaxGrowth(2177.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator1.integrate(expandableStatefulODE0, 2981.0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      dormandPrince853Integrator0.sanityChecks(expandableStatefulODE0, 0.2);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 2.3228001594543457);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = 2981.0;
      doubleArray0[1] = 2981.0;
      doubleArray0[2] = 2981.0;
      doubleArray0[3] = 2981.0;
      doubleArray0[4] = 2981.0;
      doubleArray0[5] = 2981.0;
      doubleArray0[6] = 2981.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2.538670539855957, 701.6884, (-1147.53975700187), 2981.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-4.35799392139009E85));
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 2981.0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(10.0, 10.0, 0.0, 10.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      highamHall54Integrator0.sanityChecks(expandableStatefulODE0, 10.0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getOrder();
      expandableStatefulODE0.setTime(239.18);
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-4.8465821804075345E-8), (-4.8465821804075345E-8), 1.0, 5);
      dormandPrince853Integrator0.setStepSizeControl((-225.80460255061655), 0.2, (-225.80460255061655), 0.0);
      dormandPrince853Integrator0.setMaxGrowth(5);
      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, 2181.31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minimal step size (2.26E02) reached, integration needs 1.00E00
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-6.269066061111782E-9), (-6.269066061111782E-9), (-6.269066061111782E-9), (-16.30356545931));
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-16.30356545931);
      highamHall54Integrator0.filterStep((-2796.3), false, false);
      highamHall54Integrator0.clearStepHandlers();
      doubleArray1[1] = (-6.269066061111782E-9);
      doubleArray1[2] = (-6.269066061111782E-9);
      doubleArray0[0] = doubleArray1;
      highamHall54Integrator0.scalAbsoluteTolerance = (-16.30356545931);
      highamHall54Integrator0.resetInternalState();
      highamHall54Integrator0.getStepHandlers();
      highamHall54Integrator0.estimateError(doubleArray0, doubleArray1, doubleArray1, 239.18);
      highamHall54Integrator0.setMaxGrowth(239.18);
      highamHall54Integrator0.getMaxGrowth();
      highamHall54Integrator0.estimateError(doubleArray0, doubleArray1, doubleArray1, 744.729390222);
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 239.18;
      highamHall54Integrator0.estimateError(doubleArray0, doubleArray1, doubleArray2, (-1175.704));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, (-2972.2758683));
  }
}
