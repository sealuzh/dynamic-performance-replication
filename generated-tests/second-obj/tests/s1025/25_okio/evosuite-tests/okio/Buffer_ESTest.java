/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:59:59 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.nio.cs.US_ASCII;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Pipe pipe0 = new Pipe(6L);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("in == null", 1776, 1776);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 1776 > 10
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeIntLe(70);
      // Undeclared exception!
      try { 
        buffer0.write((ByteString) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteString == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(8L);
      buffer0.segmentSizes();
      // Undeclared exception!
      try { 
        buffer0.read(buffer1, (long) (byte)48);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-409L));
      long long0 = 10000000L;
      Buffer buffer2 = new Buffer();
      // Undeclared exception!
      try { 
        buffer1.readAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = true;
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.hash();
      buffer0.readUtf8();
      buffer0.writeDecimalLong(4278190080L);
      assertEquals(10L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(3656L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=3656 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer1.writeString("", (-937), (-937), (Charset) null);
        fail("Expecting exception: IllegalAccessError");
      
      } catch(IllegalAccessError e) {
         //
         // beginIndex < 0: -937
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.rangeEquals(109L, byteString0);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8("BK3PH3%{2sUm", (-3323), (-3323));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -3323
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((byte)8);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      ByteString[] byteStringArray0 = new ByteString[2];
      Options options0 = Options.of(byteStringArray0);
      options0.get(1);
      byteStringArray0[0] = null;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      byteStringArray0[1] = byteString0;
      Options options1 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        buffer1.selectPrefix(options1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (-2394L);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      buffer0.sha512();
      ByteString byteString0 = hashingSink0.hash();
      buffer0.rangeEquals((-2394L), byteString0, 0, (-2143));
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.inputStream();
      buffer0.size = (-2394L);
      buffer0.sha256();
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Pipe pipe0 = new Pipe(769L);
      Buffer buffer0 = pipe0.buffer;
      try { 
        buffer0.readUtf8LineStrict(4278190080L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((byte)8);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
      buffer_UnsafeCursor0.buffer.hashCode();
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6M<Ki}NE");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Pipe pipe0 = new Pipe(2147483647L);
      Buffer buffer0 = pipe0.buffer;
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("f*o", charset0);
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      pipe0.sinkClosed = false;
      long long0 = buffer1.readHexadecimalUnsignedLong();
      assertEquals(2L, buffer0.size());
      assertEquals(15L, long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Pipe pipe0 = new Pipe(1128L);
      pipe0.sinkClosed = true;
      Buffer buffer0 = pipe0.buffer;
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("-'Sb\\K%3Eb~!.", charset0);
      buffer0.readShort();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x27
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Pipe pipe0 = new Pipe(82L);
      Buffer buffer0 = pipe0.buffer;
      int int0 = 1627;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"<");
      Buffer buffer1 = buffer0.writeShort(1627);
      buffer0.hashCode();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      buffer1.indexOf((byte)8, 82L);
      // Undeclared exception!
      try { 
        buffer0.write(buffer1, 1283L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-381L));
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.sha1();
      buffer1.indexOf((byte) (-30), 1L, 10000000000000L);
      // Undeclared exception!
      try { 
        buffer0.copyTo(buffer1, 1000000000000000L, 38L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=1000000000000000 byteCount=38
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (-2394L);
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      buffer0.sha512();
      ByteString byteString0 = hashingSink0.hash();
      buffer0.rangeEquals((-2394L), byteString0, 0, (-2143));
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=-2394 offset=0 byteCount=-2394
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong((-1619L));
      buffer0.readIntLe();
      Buffer buffer1 = buffer0.writeByte(1223);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer1.indexOf(byteString0, (long) 1223);
      buffer0.sha512();
      // Undeclared exception!
      try { 
        buffer1.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.snapshot();
      buffer0.writeHexadecimalUnsignedLong(1670L);
      buffer0.readUtf8();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[2];
      buffer0.readUtf8();
      byteArray0[1] = (byte) (-118);
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      Buffer buffer1 = buffer0.writeString("+d*)yGoUG", charset0);
      buffer1.writeShortLe(301);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer.writeUtf8("+d*)yGoUG");
      buffer0.write((Source) buffer_UnsafeCursor0.buffer, (long) (-1));
      buffer2.outputStream();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Pipe pipe0 = new Pipe(8L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = true;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer1 = pipe0.buffer;
      buffer1.outputStream();
      // Undeclared exception!
      try { 
        buffer0.readFully(buffer1, 8L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.indexOf((byte)15, 100L, 100L);
      Buffer buffer1 = buffer0.writeIntLe(70);
      // Undeclared exception!
      try { 
        buffer1.copyTo(buffer0, 24L, (-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=24 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Pipe pipe0 = new Pipe(1006L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeInt(99);
      buffer1.readAndWriteUnsafe();
      buffer0.readByteArray();
      // Undeclared exception!
      try { 
        buffer1.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer0);
      ByteString byteString0 = buffer0.sha512();
      hashingSink0.hash();
      Pipe pipe0 = new Pipe(38L);
      Buffer buffer1 = pipe0.buffer;
      buffer1.rangeEquals(1635L, byteString0, 102, (-2526));
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.buffer.readUtf8();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.buffer.require((-1));
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong((-1619L));
      buffer0.readIntLe();
      buffer0.writeByte(1223);
      buffer0.sha512();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)25;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.hmacSha1(byteString0);
      Buffer buffer1 = buffer0.write(byteArray0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer0.writeString("", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.readAll(realBufferedSink0);
      realBufferedSink0.buffer.sha1();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Pipe pipe0 = new Pipe(10L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writableSegment((byte) (-11));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      Buffer buffer0 = pipe0.buffer;
      int int0 = (-2264);
      // Undeclared exception!
      try { 
        buffer0.writeUtf8(">9@5", (-2264), (-2264));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0: -2264
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      HashingSource hashingSource1 = HashingSource.md5(hashingSource0);
      ByteString byteString0 = hashingSource1.hash();
      buffer0.hmacSha512(byteString0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Pipe pipe0 = new Pipe(1413L);
      Buffer buffer0 = pipe0.buffer;
      String string0 = "-'Sb\\\\K%3Eb~!.";
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer1 = buffer0.writeString("f*o", charset0);
      buffer1.readShort();
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x6f
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      // Undeclared exception!
      try { 
        buffer0.indexOfElement(byteString0, (-1616L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.clone();
      Segment segment0 = buffer0.head;
      buffer0.head = null;
      Buffer buffer1 = new Buffer();
      buffer1.writeShort(2252);
      buffer1.readShort();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.timeout();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      buffer1.readUtf8();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeShort(1223);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(100L);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Pipe pipe0 = new Pipe(8L);
      Buffer buffer0 = pipe0.buffer;
      pipe0.sourceClosed = true;
      Buffer buffer1 = new Buffer();
      buffer0.writeInt(1222);
      try { 
        buffer0.readFully(buffer1, 8L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      HashingSink hashingSink0 = HashingSink.sha256(buffer1);
      ByteString byteString0 = hashingSink0.hash();
      buffer2.rangeEquals(1301L, byteString0, (-2220), 128);
      buffer2.md5();
      buffer2.emit();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.writeShort(2100799220);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.hash();
      hashingSource0.hash();
      // Undeclared exception!
      try { 
        buffer1.writeUtf8CodePoint(2100799220);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 7d37a6f4
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(8L);
      buffer0.segmentSizes();
      Buffer buffer2 = buffer1.writeUtf8("rb%s}lKKKF~CJwk", 11, 11);
      buffer2.writeUtf8CodePoint(240);
      Pipe pipe0 = new Pipe(11);
      Buffer buffer3 = pipe0.buffer;
      long long0 = new Integer(240);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1899L);
      buffer0.readShort();
      ByteString byteString0 = buffer1.sha512();
      Buffer buffer2 = buffer0.writeDecimalLong(1899L);
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      buffer2.segmentSizes();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Charset.defaultCharset();
      buffer1.indexOfElement(byteString0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      realBufferedSource0.buffer.readUtf8();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      buffer_UnsafeCursor0.buffer.write((Source) hashingSource0, (-1L));
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer_UnsafeCursor0.buffer.indexOfElement(byteString0);
      Buffer buffer2 = buffer0.write(byteString0);
      // Undeclared exception!
      try { 
        buffer2.copyTo(buffer1, (-1L), (long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Pipe pipe0 = new Pipe(508L);
      Buffer buffer0 = pipe0.buffer;
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("already attached to a buffe", charset0);
      buffer0.writeUtf8CodePoint((-1879048191));
      buffer0.segmentSizes();
      Integer integer0 = new Integer((-1879048191));
      buffer0.indexOfElement(byteString0, 2473L);
      buffer0.readUnsafe();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[0];
      buffer0.read(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte)125;
      try { 
        buffer0.readFully(byteArray1);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(1567L);
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      hashingSource0.hash();
      ByteString byteString0 = hashingSource0.hash();
      hashingSource0.hash();
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("G)z-", charset0);
      Integer integer0 = new Integer(53);
      byte[] byteArray0 = new byte[1];
      buffer1.indexOfElement(byteString0, (long) (byte)0);
      buffer0.readUnsafe();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-6024L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.indexOf((byte)15, 100L, 100L);
      buffer0.request(195L);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte) (-57), (long) (byte) (-57));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-57 toIndex=9223372036854775807
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      buffer0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.outputStream();
      buffer0.md5();
      HashingSink hashingSink0 = HashingSink.sha256(buffer_UnsafeCursor0.buffer);
      hashingSink0.hash();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("[size=0]", charset0);
      // Undeclared exception!
      try { 
        buffer0.write((Source) buffer_UnsafeCursor0.buffer, 7205759403792L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      HashingSource.sha256(buffer_UnsafeCursor0.buffer);
      try { 
        buffer_UnsafeCursor0.buffer.write((Source) buffer0, 181L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeShort((-4914));
      Buffer buffer1 = realBufferedSink1.buffer;
      buffer1.readByte();
      buffer1.writeUtf8("y");
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0);
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSink0);
      hashingSink0.hash();
      Integer integer0 = new Integer((-4914));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.writeAll((Source) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(8L);
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer1.hmacSha256(byteString0);
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(8L);
      buffer2.buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("", charset0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(100000013L);
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-30);
      hashingSource0.hash();
      byteString0.toAsciiLowercase();
      byteString0.toAsciiUppercase();
      byteArray0[4] = (byte) (-27);
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte)22;
      HashingSink.sha1(buffer1);
      buffer0.equals(hashingSource0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.emit();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AJ#Qd&F!!SI<_v,");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.indexOf((byte) (-27));
      Segment segment0 = new Segment();
      Buffer buffer3 = realBufferedSink0.buffer();
      buffer3.require((byte) (-27));
      buffer0.read(byteArray0);
      try { 
        buffer2.require((byte)22);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Pipe pipe0 = new Pipe(1963L);
      Buffer buffer0 = pipe0.buffer;
      Charset charset0 = null;
      // Undeclared exception!
      try { 
        buffer0.writeString("", 2898, 2898, (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 2898 > 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Pipe pipe0 = new Pipe(2591L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)0, 2591L, (-1221L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=2591 toIndex=-1221
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(984);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString[] byteStringArray0 = new ByteString[5];
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      Options.of(byteStringArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Pipe pipe0 = new Pipe(10L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Buffer buffer0 = pipe0.buffer;
      HashingSink.sha512(buffer0);
      buffer0.emitCompleteSegments();
      // Undeclared exception!
      try { 
        buffer0.readByteString(10L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=10
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
      Inflater inflater0 = new Inflater(true);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer0.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)1;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)110;
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.copyTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Pipe pipe0 = new Pipe(3L);
      pipe0.sourceClosed = false;
      pipe0.sourceClosed = true;
      pipe0.sourceClosed = true;
      Buffer buffer0 = pipe0.buffer;
      MockFile mockFile0 = new MockFile("\n");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) "\n";
      objectArray0[2] = (Object) pipe0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      PrintStream printStream0 = mockPrintStream0.format("\n", objectArray0);
      buffer0.copyTo((OutputStream) printStream0);
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Pipe pipe0 = new Pipe(1095209L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = pipe0.buffer;
      buffer1.writeShort(9);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer2.hashCode();
      HashingSink.sha1(buffer1);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashingSink.md5(buffer1);
      GzipSource gzipSource0 = new GzipSource(buffer_UnsafeCursor0.buffer);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 192);
      buffer0.copyTo((OutputStream) pipedOutputStream0);
      buffer2.readByte();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      List<Integer> list0 = new LinkedList<Integer>();
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.toString();
      realBufferedSink0.buffer.toString();
      byte[] byteArray0 = new byte[2];
      buffer1.indexOf((byte)0);
      byteArray0[1] = (byte) (-55);
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSink0.buffer.indexOfElement(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      long long0 = 1567L;
      Buffer buffer1 = buffer0.writeLong(1567L);
      buffer0.segmentSizes();
      realBufferedSink0.buffer();
      HashingSource.sha256(buffer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      realBufferedSink0.buffer();
      GzipSource gzipSource0 = new GzipSource(buffer1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer((byte)0);
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeShort(1223);
      Buffer buffer2 = buffer0.writeHexadecimalUnsignedLong(100000000000000000L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeLongLe(1223);
      HashingSink hashingSink0 = HashingSink.md5(buffer2);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.rangeEquals(0L, byteString0);
      buffer1.readLongLe();
      buffer1.readInt();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(100000013L);
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      hashingSource0.hash();
      buffer1.readUtf8CodePoint();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 7
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = buffer0.writeLong(1567L);
      buffer0.segmentSizes();
      realBufferedSink0.buffer();
      HashingSource.sha256(buffer0);
      realBufferedSink0.buffer();
      GzipSource gzipSource0 = new GzipSource(buffer1);
      buffer0.emitCompleteSegments();
      buffer1.readLongLe();
      Integer integer0 = new Integer(97);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteString0.sha1();
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      buffer0.indexOf((byte) (-30), 651L, 10000000000000L);
      buffer0.request((-1152921504606846976L));
      buffer0.equals(hashingSource0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Integer integer0 = new Integer(2063);
      buffer0.readUtf8Line();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2063);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.close();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(2063);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(1567L);
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      hashingSource0.hash();
      hashingSource0.hash();
      ByteString byteString0 = hashingSource0.hash();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = ByteString.encodeString("G)z-", charset0);
      Buffer buffer2 = buffer1.writeUtf8CodePoint((byte)48);
      buffer2.segmentSizes();
      Integer integer0 = new Integer(53);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Integer integer1 = new Integer((byte)48);
      buffer0.indexOf(byteString1, 1557L);
      buffer2.indexOfElement(byteString0);
      buffer1.readAndWriteUnsafe();
      buffer1.readByteArray();
      // Undeclared exception!
      try { 
        buffer1.read(buffer0, (-1232L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1232
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeShort(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      Buffer buffer2 = realBufferedSink1.buffer;
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer2.skip((byte)0);
      HashingSink.sha1(buffer2);
      byteString0.indexOf(byteArray0);
      realBufferedSink0.buffer.indexOfElement(byteString0);
      buffer1.indexOf(byteString0, (long) (byte)0);
      buffer0.emit();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeShort(1795);
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(1000000000000000014L);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      buffer2.timeout();
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      HashingSource hashingSource1 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSource.hmacSha256(hashingSource0, byteString0);
      realBufferedSink0.closed = true;
      Buffer buffer3 = realBufferedSink0.buffer.writeInt((byte)102);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer1.indexOfElement(byteString0);
      realBufferedSink0.buffer.indexOf(byteString0, 0L);
      Integer integer0 = new Integer((byte)102);
      buffer2.readUtf8CodePoint();
      hashingSink0.hash();
      buffer3.readLongLe();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      hashingSource1.toString();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(1795);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeDecimalLong((byte)0);
      Pipe pipe0 = null;
      try {
        pipe0 = new Pipe((byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxBufferSize < 1: 0
         //
         verifyException("okio.Pipe", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      // Undeclared exception!
      try { 
        realBufferedSink0.write((byte[]) null, (-3205), 1092);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = buffer0.writeLong(1567L);
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort((-3228));
      ((RealBufferedSink) bufferedSink0).buffer.writeAll(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer2.writeUtf8("y");
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSink0);
      hashingSink0.hash();
      // Undeclared exception!
      try { 
        buffer1.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer0.writeLong(1567L);
      buffer1.segmentSizes();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer2 = new Buffer();
      try { 
        buffer2.write((Source) buffer0, 10000000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, (-1175L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex < 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      Buffer buffer1 = buffer0.writeLong(1567L);
      HashingSink hashingSink0 = HashingSink.md5(realBufferedSink0.buffer);
      hashingSink0.hash();
      realBufferedSink0.buffer();
      GzipSource gzipSource0 = new GzipSource(buffer1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer((byte)0);
      buffer0.emitCompleteSegments();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      buffer0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.outputStream();
      ByteString byteString0 = buffer0.md5();
      HashingSink hashingSink0 = HashingSink.sha256(buffer_UnsafeCursor0.buffer);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer_UnsafeCursor0.buffer, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeLongLe(9223372036854775800L);
      Deflater deflater0 = new Deflater((-1));
      DeflaterSink deflaterSink0 = new DeflaterSink(bufferedSink0, deflater0);
      HashingSink.sha1(deflaterSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      realBufferedSource1.readByteString();
      ByteString byteString1 = hashingSource0.hash();
      HashingSink.hmacSha256(realBufferedSource0.buffer, byteString1);
      hashingSink0.hash();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((-1517L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1517
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      buffer0.readUtf8Line();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"7/>C,pj6nkHCJ");
      Buffer buffer0 = new Buffer();
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Pipe pipe0 = new Pipe(2147483647L);
      Buffer buffer0 = pipe0.buffer;
      Charset.defaultCharset();
      buffer0.indexOf((byte) (-124), 1776L, 1776L);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0);
      // Undeclared exception!
      try { 
        buffer0.indexOf(byteString0, (-144L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      buffer0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.outputStream();
      buffer0.md5();
      HashingSink hashingSink0 = HashingSink.sha256(buffer_UnsafeCursor0.buffer);
      hashingSink0.hash();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("[size=0]", charset0);
      HashingSource hashingSource0 = HashingSource.md5(buffer_UnsafeCursor0.buffer);
      hashingSource0.hash();
      buffer0.readUtf8();
      buffer0.writeDecimalLong((-1));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readFully((Buffer) null, (long) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = buffer0.writeLong(1567L);
      buffer1.segmentSizes();
      Buffer buffer3 = buffer0.writeShort(50);
      Buffer buffer4 = buffer0.writeHexadecimalUnsignedLong(1685L);
      HashingSource hashingSource0 = HashingSource.sha256(buffer4);
      HashingSink hashingSink0 = HashingSink.md5(buffer3);
      ByteString byteString0 = hashingSink0.hash();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)0;
      hashingSink0.hash();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      HashingSource.hmacSha256(realBufferedSink0.buffer, byteString0);
      hashingSource0.hash();
      buffer3.hmacSha512(byteString0);
      buffer2.sha512();
      buffer2.exhausted();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      try { 
        buffer1.skip(1L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = 1963L;
      Pipe pipe0 = new Pipe(1963L);
      Buffer buffer0 = pipe0.buffer;
      String string0 = "";
      Charset charset0 = null;
      Buffer buffer1 = pipe0.buffer;
      buffer0.emitCompleteSegments();
      // Undeclared exception!
      try { 
        buffer1.readString((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      buffer0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.md5();
      HashingSink hashingSink0 = HashingSink.sha256(buffer_UnsafeCursor0.buffer);
      hashingSink0.hash();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(100000000L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      ByteString[] byteStringArray0 = new ByteString[1];
      HashingSource.md5(realBufferedSink0.buffer);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      Buffer buffer2 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)0;
      HashingSink.sha1(buffer2);
      buffer2.equals(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.emit();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ((RealBufferedSink) bufferedSink0).buffer.toString();
      ((RealBufferedSink) bufferedSink0).buffer.indexOf((byte)6);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      realBufferedSink0.buffer.read(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.exhausted();
      realBufferedSink0.buffer.sha256();
      realBufferedSink0.buffer.readUtf8();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      Buffer buffer1 = realBufferedSink0.buffer.writeLong(71776119061217280L);
      buffer1.segmentSizes();
      buffer0.writeShort(1795);
      try { 
        buffer1.skip(1795);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer.writeHexadecimalUnsignedLong(5L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Inflater inflater0 = new Inflater();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte) (-27);
      byteArray0[4] = (byte)19;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.sha512();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer1.copyTo((Buffer) null, (long) (byte) (-27), 1131L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = buffer1.writeUtf8("3JFj=nX^yU'H[_0");
      Integer integer0 = new Integer(2063);
      buffer0.readUtf8Line();
      ByteString[] byteStringArray0 = new ByteString[1];
      HashingSource hashingSource0 = HashingSource.sha256(buffer2);
      HashingSource.sha1(hashingSource0);
      ByteString byteString0 = hashingSource0.hash();
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSource0.buffer.selectPrefix(options0);
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((File) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(true);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.buffer.clear();
      Buffer buffer1 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer1.indexOf((byte) (-63), (long) (byte) (-63), (long) (byte) (-63));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-63 toIndex=-63
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = (-2394L);
      buffer0.size = (-2394L);
      buffer0.sha512();
      buffer0.sha256();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 31, (-2));
      buffer0.readFrom((InputStream) byteArrayInputStream0);
      byteArrayInputStream0.reset();
      Pipe pipe0 = new Pipe((byte)8);
      Buffer buffer1 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer2.writeString("9)=h", (int) (byte)8, (-1), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -1 < 8
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      Buffer buffer1 = realBufferedSink0.buffer.writeLong(8L);
      buffer1.segmentSizes();
      BufferedSink bufferedSink0 = realBufferedSink0.writeInt(870);
      Buffer buffer2 = buffer1.writeShort(1795);
      Buffer buffer3 = buffer2.writeHexadecimalUnsignedLong(1000000000000000000L);
      buffer3.outputStream();
      HashingSource.sha256(realBufferedSink0.buffer);
      HashingSink hashingSink0 = HashingSink.sha1(buffer2);
      ByteString byteString0 = hashingSink0.hash();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      buffer1.hmacSha512(byteString0);
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      ((RealBufferedSink) bufferedSink0).buffer.select(options0);
      buffer1.timeout();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.size = (-2394L);
      buffer0.sha512();
      buffer0.sha256();
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)97, (byte)39);
      Buffer buffer1 = buffer0.readFrom((InputStream) byteArrayInputStream0);
      byteArrayInputStream0.reset();
      Pipe pipe0 = new Pipe((byte)97);
      Buffer buffer2 = pipe0.buffer;
      buffer0.equals(buffer1);
      // Undeclared exception!
      try { 
        buffer1.readAndWriteUnsafe((Buffer.UnsafeCursor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.outputStream();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.flush();
      buffer0.request(4L);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      try { 
        realBufferedSource1.readByteString(4L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Pipe pipe0 = new Pipe(6553L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeLongLe(6553L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[3] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio");
      FileSystemHandling.createFolder(evoSuiteFile0);
      int int0 = 65475;
      buffer0.readUtf8();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.writeDecimalLong(65475);
      byte byte0 = (byte)0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Fvpqm+");
      buffer0.writeDecimalLong(1000000L);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HashingSource.sha256(realBufferedSink0.buffer);
      buffer0.readDecimalLong();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      Charset.defaultCharset();
      MockPrintStream mockPrintStream0 = new MockPrintStream("]'/pdKoG%X3");
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = buffer0.writeUtf8("3JFj=nX^yU'H[_\"U0");
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort((byte) (-16));
      Integer integer0 = new Integer(2048);
      HashingSource.sha1(((RealBufferedSink) bufferedSink0).buffer);
      Buffer buffer2 = new Buffer();
      ((RealBufferedSink) bufferedSink0).buffer.segmentSizes();
      buffer2.readUtf8();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "3JFj=nX^yU'H[_\"U0");
      buffer1.writeDecimalLong(16711680L);
      ((RealBufferedSink) bufferedSink0).buffer.readUtf8CodePoint();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink1.buffer();
      Buffer buffer2 = new Buffer();
      Buffer buffer3 = buffer2.writeLong(8L);
      realBufferedSink0.buffer.segmentSizes();
      realBufferedSink1.writeInt(1547);
      buffer2.writeShort(984);
      Buffer buffer4 = realBufferedSink1.buffer.writeHexadecimalUnsignedLong(8192L);
      realBufferedSink1.buffer.outputStream();
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      buffer3.hmacSha512(byteString0);
      ByteString[] byteStringArray0 = new ByteString[1];
      byteStringArray0[0] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer4.select(options0);
      try { 
        buffer1.require(357L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.close();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not attached to a buffer
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1899L);
      buffer0.readShort();
      ByteString byteString0 = buffer1.sha512();
      buffer0.writeDecimalLong(1899L);
      byte[] byteArray0 = new byte[0];
      ByteString byteString1 = new ByteString(byteArray0);
      HashingSink.sha1(buffer0);
      buffer0.indexOfElement(byteString0);
      buffer1.completeSegmentByteCount();
      try { 
        buffer0.readUtf8LineStrict(0L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=6231383939\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.segmentSizes();
      Buffer buffer1 = realBufferedSink0.buffer();
      try { 
        buffer1.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-400L));
      HashingSource.sha256(buffer1);
      buffer0.readDecimalLong();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      ByteString byteString0 = new ByteString((byte[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer_UnsafeCursor0.buffer.writeInt((-1672));
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer2.readIntLe();
      buffer2.rangeEquals((-1876L), byteString0, (-1), 296);
      // Undeclared exception!
      try { 
        buffer2.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong((-1427L));
      HashingSink hashingSink0 = HashingSink.sha1(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer1.hmacSha256(byteString0);
      buffer1.readLongLe();
      HashingSource.sha256(buffer1);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.writeHexadecimalUnsignedLong(0L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer2.writeDecimalLong(7924927969288519679L);
      buffer2.readUtf8CodePoint();
      Pipe pipe0 = new Pipe(853L);
      Buffer buffer3 = pipe0.buffer;
      buffer1.readUtf8Line();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.outputStream();
      long long0 = 1434L;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1434L);
      MockFile mockFile0 = new MockFile("tb", "");
      buffer1.sha256();
      MockPrintStream mockPrintStream0 = new MockPrintStream("J4?$j\".X|kzC69&#MfN");
      buffer_UnsafeCursor0.buffer.clone();
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "J4?$j\".X|kzC69&#MfN", 752, 752);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha512();
      ByteString byteString1 = buffer0.sha256();
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString byteString2 = ByteString.of(byteBuffer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      hashingSink0.hash();
      byteString1.sha1();
      HashingSink hashingSink1 = HashingSink.md5(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.indexOfElement(byteString2);
      buffer0.emitCompleteSegments();
      hashingSink1.hash();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("a`");
      buffer_UnsafeCursor0.buffer.writeTo((OutputStream) mockFileOutputStream0);
      buffer0.writeShortLe((-2415));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(1567L);
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      hashingSource0.hash();
      hashingSource0.hash();
      hashingSource0.hash();
      String string0 = "G)z-";
      MockPrintStream mockPrintStream0 = new MockPrintStream("G)z-");
      buffer1.writeTo((OutputStream) mockPrintStream0);
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("G)z-", charset0);
      buffer0.segmentSizes();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (byte)15);
      Integer integer0 = new Integer((byte)15);
      // Undeclared exception!
      try { 
        buffer0.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = buffer0.writeLong(1567L);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Buffer buffer3 = buffer0.writeHexadecimalUnsignedLong(1685L);
      HashingSource.sha256(buffer3);
      buffer2.md5();
      HashingSink.sha512(buffer3);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer3);
      realBufferedSource0.buffer();
      realBufferedSource0.buffer.outputStream();
      InputStream inputStream0 = realBufferedSource0.inputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0);
      try { 
        buffer1.readFrom((InputStream) bufferedInputStream0, 1685L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Inflater inflater0 = new Inflater();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte) (-27);
      byteArray0[4] = (byte)25;
      ByteString byteString0 = new ByteString(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      try { 
        buffer0.readFrom((InputStream) bufferedInputStream0, (long) (byte)25);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      long long0 = 6291L;
      Pipe pipe0 = new Pipe(6291L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeLong((-1036L));
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      HashingSource.hmacSha256(buffer0, byteString0);
      hashingSource0.hash();
      buffer0.readUtf8CodePoint();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        buffer1.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 7
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(65590);
      Buffer buffer2 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)23;
      byteArray0[2] = (byte) (-114);
      buffer1.sha1();
      buffer0.readUtf8CodePoint();
      Buffer buffer3 = new Buffer();
      // Undeclared exception!
      try { 
        buffer1.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Pipe pipe0 = new Pipe(82L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeShort(1223);
      HashingSource hashingSource0 = HashingSource.md5(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      byteString0.toAsciiLowercase();
      byteString0.toAsciiUppercase();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      hashingSource0.hash();
      Segment segment0 = buffer1.head;
      Buffer buffer2 = buffer1.writeDecimalLong((-954L));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer0.readUtf8CodePoint();
      buffer1.readUtf8CodePoint();
      buffer1.indexOf(byteString0, 71776119061217280L);
      buffer0.hmacSha1(byteString0);
      HashingSink.sha1(buffer2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 4
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort((-25));
      HashingSource hashingSource0 = HashingSource.md5(((RealBufferedSink) bufferedSink0).buffer);
      Buffer buffer2 = buffer1.writeShort(3408);
      HashingSource.sha256(buffer2);
      HashingSink hashingSink0 = HashingSink.md5(buffer2);
      hashingSink0.hash();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      realBufferedSource0.readByteString();
      Buffer buffer3 = realBufferedSink0.buffer;
      ByteString byteString0 = hashingSource0.hash();
      byteString0.write(buffer2);
      GzipSource gzipSource0 = new GzipSource(buffer1);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(9L);
      Buffer buffer4 = new Buffer();
      buffer1.emitCompleteSegments();
      Integer integer0 = new Integer((-1));
      // Undeclared exception!
      try { 
        buffer1.writeUtf8("K6'b2*{qz\"", 6, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -1 < 6
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      try { 
        buffer2.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Pipe pipe0 = new Pipe(47L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-2135L));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(50L);
      // Undeclared exception!
      try { 
        realBufferedSink0.write(buffer1, (-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=16 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort(2100799209);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSink hashingSink0 = HashingSink.hmacSha512(bufferedSink0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      buffer1.indexOfElement(byteString1, 1004L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSource0.buffer();
      buffer1.writeDecimalLong(2100799209);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSource0.buffer.readUnsafe();
      buffer_UnsafeCursor0.next();
      buffer0.segmentSizes();
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffffa6
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong((byte)8);
      Buffer buffer1 = buffer0.emitCompleteSegments();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readInt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      pipe0.sourceClosed = true;
      Buffer buffer0 = pipe0.buffer;
      HashingSource.md5(buffer0);
      pipe0.sourceClosed = true;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "timeout == null");
      buffer0.readUtf8();
      Buffer buffer1 = new Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream(72);
      // Undeclared exception!
      try { 
        buffer0.readFrom((InputStream) pipedInputStream0, (-3471L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -3471
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      buffer0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.outputStream();
      ByteString byteString0 = buffer0.md5();
      HashingSink.sha256(buffer_UnsafeCursor0.buffer);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer_UnsafeCursor0.buffer, byteString0);
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      HashingSource hashingSource1 = HashingSource.hmacSha256(buffer_UnsafeCursor0.buffer, byteString0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource1);
      realBufferedSource1.readByteString();
      Buffer buffer1 = realBufferedSource0.buffer;
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer2.writeDecimalLong(100000000L);
      buffer_UnsafeCursor0.next();
      buffer2.segmentSizes();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.writeShort(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      dataOutputStream0.close();
      dataOutputStream0.close();
      Buffer buffer2 = buffer1.copyTo((OutputStream) byteArrayOutputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[6] = (byte)0;
      HashingSink hashingSink0 = HashingSink.sha1(buffer2);
      hashingSink0.hash();
      buffer1.indexOf((byte)0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer1 = realBufferedSink1.buffer;
      realBufferedSink1.writeShort(2100799220);
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSink0.buffer);
      hashingSource0.hash();
      hashingSource0.hash();
      realBufferedSink0.buffer.writeUtf8CodePoint(2517);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = buffer0.writeLong(1567L);
      buffer1.segmentSizes();
      Buffer buffer3 = buffer1.writeHexadecimalUnsignedLong(3092L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      HashingSource.sha256(realBufferedSource0);
      HashingSink hashingSink0 = HashingSink.sha1(buffer3);
      hashingSink0.hash();
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte)51;
      HashingSource.sha1(buffer0);
      HashingSink hashingSink1 = HashingSink.md5(buffer1);
      ByteString byteString0 = hashingSink1.hash();
      Buffer buffer4 = realBufferedSink0.buffer;
      buffer4.rangeEquals((long) (byte)0, byteString0);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x63
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((byte)8);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.offset = (long) (byte)8;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=8 > size=1
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Pipe pipe0 = new Pipe(82L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(100000000000000000L);
      pipe0.sinkClosed = false;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink1.writeDecimalLong((-2031L));
      realBufferedSink1.write(buffer0, 13L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        buffer0.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      realBufferedSink0.buffer.close();
      HashingSource hashingSource1 = HashingSource.sha256(hashingSource0);
      ByteString byteString0 = hashingSource1.hash();
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString0);
      ByteString byteString1 = hashingSink0.hash();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      realBufferedSink0.buffer.indexOfElement(byteString1, 4L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.buffer();
      Buffer buffer1 = realBufferedSource0.buffer.writeDecimalLong(1004L);
      realBufferedSource0.buffer.readUnsafe();
      buffer1.readDecimalLong();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeShort(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      Buffer buffer2 = realBufferedSink1.buffer;
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)12;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer2.skip((byte)0);
      HashingSink.sha1(buffer2);
      byteString0.lastIndexOf(byteArray0);
      buffer2.indexOfElement(byteString0);
      Buffer buffer3 = realBufferedSink1.buffer();
      byteString0.base64();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteString[] byteStringArray0 = new ByteString[4];
      buffer2.writableSegment(15);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer3.readUnsafe(buffer_UnsafeCursor0);
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      realBufferedSink0.buffer.selectPrefix(options0);
      buffer_UnsafeCursor1.buffer.sha256();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      hashingSource0.hash();
      ByteString byteString0 = hashingSource0.hash();
      realBufferedSink1.writeUtf8CodePoint((byte)48);
      buffer0.writeUtf8CodePoint(94);
      Integer integer0 = new Integer((-628));
      Buffer buffer2 = new Buffer();
      Buffer buffer3 = buffer0.writeUtf8("ZK@ ~");
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer3);
      realBufferedSink1.writeLongLe(0);
      BufferedSink bufferedSink0 = realBufferedSink0.emitCompleteSegments();
      HashingSink hashingSink0 = HashingSink.md5(bufferedSink0);
      hashingSink0.hash();
      buffer1.rangeEquals((-922337203685477580L), byteString0);
      realBufferedSink1.buffer.readDecimalLong();
      // Undeclared exception!
      try { 
        buffer1.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      buffer0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      buffer0.outputStream();
      ByteString byteString0 = buffer_UnsafeCursor0.buffer.md5();
      HashingSink.sha256(buffer0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      Buffer buffer1 = (Buffer)hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      HashingSource.hmacSha256(hashingSource0, byteString0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      ByteString byteString1 = realBufferedSource0.readByteString();
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString1;
      byteStringArray0[4] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.selectPrefix(options0);
      Buffer buffer2 = realBufferedSource0.buffer;
      realBufferedSource1.buffer();
      buffer2.writeDecimalLong((-1));
      buffer1.segmentSizes();
      Buffer buffer3 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        realBufferedSource1.buffer.readFrom((InputStream) null, (long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000000000L);
      Buffer buffer0 = pipe0.buffer;
      long long0 = 31L;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, 43, 1973, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = 100000L;
      Pipe pipe0 = new Pipe(100000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(1567L);
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      hashingSource0.hash();
      hashingSource0.hash();
      ByteString byteString0 = hashingSource0.hash();
      Charset charset0 = Charset.defaultCharset();
      hashingSource0.hash();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer();
      OutputStream outputStream0 = buffer1.outputStream();
      buffer2.snapshot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(1567L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      Buffer buffer3 = buffer0.copyTo(outputStream0);
      Charset.defaultCharset();
      buffer1.indexOfElement(byteString0);
      Buffer buffer4 = buffer0.clone();
      buffer3.sha512();
      buffer2.writeString("", charset0);
      buffer4.clear();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = (-72057594037927936L);
      Buffer buffer1 = buffer0.writeDecimalLong((-72057594037927936L));
      // Undeclared exception!
      try { 
        buffer1.writeAll(buffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Buffer buffer2 = buffer1.copyTo((OutputStream) byteArrayOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "size < 8: ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer3 = buffer1.writeUtf8("size < 8: ");
      realBufferedSink0.buffer.readLongLe();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      realBufferedSink1.writeDecimalLong(255L);
      ByteString byteString0 = buffer3.readByteString();
      byte[] byteArray0 = new byte[1];
      realBufferedSink1.buffer.indexOfElement(byteString0);
      byteArray0[0] = (byte) (-108);
      byteArrayOutputStream0.write(byteArray0);
      realBufferedSink1.buffer.segmentSizes();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "");
      HashingSource.hmacSha256(buffer1, byteString0);
      HashingSource hashingSource0 = HashingSource.hmacSha1(realBufferedSink1.buffer, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      buffer0.indexOf(byteString1);
      realBufferedSink0.buffer.indexOf(byteString0, 4044298575217846643L);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      HashingSource.md5(realBufferedSink0.buffer);
      Buffer buffer2 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)0;
      HashingSink.sha1(buffer2);
      buffer2.equals(buffer0);
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readUtf8Line(1563L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=1562 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      Buffer buffer1 = buffer0.buffer();
      buffer1.writeShort((-1201));
      Buffer buffer2 = buffer0.writeInt((-1201));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer3 = realBufferedSink0.buffer;
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer2.size = (long) (-1201);
      buffer2.equals(buffer3);
      buffer1.outputStream();
      buffer3.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        realBufferedSink0.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(667L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Pipe pipe0 = new Pipe(82L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeShort(1223);
      Buffer buffer2 = buffer0.writeHexadecimalUnsignedLong(100000000000000000L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      HashingSink.sha512(buffer2);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0);
      Integer integer0 = new Integer(1223);
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink1.write(buffer1, 13L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)2;
      Buffer buffer3 = buffer0.writeString("file == null", charset0);
      // Undeclared exception!
      try { 
        buffer3.snapshot(1223);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=16 offset=0 byteCount=1223
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.segmentSizes();
      buffer0.writeUtf8CodePoint(65553);
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      boolean boolean0 = realBufferedSink0.closed;
      Buffer buffer2 = new Buffer();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeShort(4029);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      buffer1.copyTo((OutputStream) byteArrayOutputStream0);
      byte[] byteArray0 = new byte[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer2 = buffer1.writeUtf8("size < 8: ");
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer0);
      HashingSink.md5(realBufferedSink1);
      boolean boolean0 = realBufferedSink1.closed;
      realBufferedSink0.buffer.readLongLe();
      buffer2.readInt();
      Pipe pipe0 = new Pipe(540555808);
      Buffer buffer3 = realBufferedSink0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink1.buffer);
      Buffer buffer4 = realBufferedSource0.buffer();
      buffer4.outputStream();
      InputStream inputStream0 = realBufferedSource0.inputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(inputStream0);
      realBufferedSink1.buffer.readFrom((InputStream) bufferedInputStream0, (long) (byte)0);
      realBufferedSink1.buffer.buffer();
      try { 
        buffer1.write((Source) buffer0, 32L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.segmentSizes();
      Buffer buffer1 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      boolean boolean0 = realBufferedSink0.closed;
      realBufferedSink0.buffer.writeDecimalLong(720575L);
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.segmentSizes();
      Buffer buffer1 = buffer0.writeShort(65533);
      buffer0.writeHexadecimalUnsignedLong(2199L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      realBufferedSink1.buffer.rangeEquals(7205L, byteString0);
      realBufferedSink0.writeDecimalLong(100000000000000000L);
      // Undeclared exception!
      try { 
        realBufferedSink0.write(buffer1, 1685L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=5 offset=0 byteCount=1685
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      long long0 = 95L;
      Pipe pipe0 = new Pipe(95L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeShort(1223);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      buffer0.rangeEquals((long) 1223, byteString0);
      realBufferedSink1.writeDecimalLong(95L);
      Inflater inflater0 = new Inflater(false);
      buffer1.writeDecimalLong(95L);
      buffer0.writeDecimalLong(71776119061L);
      realBufferedSink1.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer2 = realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        buffer2.readUtf8Line(95L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=94 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Pipe pipe0 = new Pipe(95L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeShort(1223);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      realBufferedSink1.writeDecimalLong(95L);
      buffer1.writeDecimalLong(95L);
      Buffer buffer2 = buffer0.writeDecimalLong(71776119061L);
      Buffer buffer3 = realBufferedSink1.buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.buffer();
      ByteString[] byteStringArray0 = new ByteString[8];
      byteStringArray0[0] = byteString0;
      ByteString byteString1 = realBufferedSource0.readByteString();
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer3.select(options0);
      realBufferedSink1.buffer();
      Segment segment0 = new Segment();
      try { 
        buffer2.require(100L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = buffer0.writeLong(1567L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BufferedSink bufferedSink0 = realBufferedSink0.writeInt(1547);
      Buffer buffer3 = new Buffer();
      buffer3.writeHexadecimalUnsignedLong(984);
      realBufferedSink0.buffer.outputStream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashingSink hashingSink0 = HashingSink.sha1(bufferedSink0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteString byteString1 = hashingSink0.hash();
      ByteString[] byteStringArray0 = new ByteString[5];
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString1;
      Charset.defaultCharset();
      HashingSink.sha1(buffer1);
      Options options0 = Options.of(byteStringArray0);
      options0.stream();
      buffer0.select(options0);
      buffer2.writableSegment(119);
      try { 
        buffer2.require(317L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha256();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      hashingSink0.hash();
      byteString0.sha1();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((byte)8);
      Buffer buffer2 = buffer0.emitCompleteSegments();
      hashingSink0.hash();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      Buffer buffer3 = buffer1.writeByte((-1700));
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSink0.buffer);
      hashingSource0.hash();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      HashingSink hashingSink1 = HashingSink.md5(buffer3);
      ByteString byteString1 = hashingSink1.hash();
      byteString1.indexOf(buffer_UnsafeCursor0.data);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.indexOf((byte)30, 1786L);
      buffer0.readByte();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)83;
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte) (-47);
      byteArray0[8] = (byte)2;
      buffer0.write(byteArray0);
      buffer0.writeDecimalLong(10000000000000L);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      boolean boolean0 = realBufferedSink0.closed;
      HashingSource.sha256(realBufferedSink0.buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      Buffer buffer1 = new Buffer();
      realBufferedSink0.buffer();
      realBufferedSink0.buffer.readAndWriteUnsafe();
      BufferedSink bufferedSink0 = realBufferedSink0.writeUtf8("h!040");
      realBufferedSink0.writeDecimalLong(1095216660480L);
      Integer integer0 = new Integer((-1));
      Inflater inflater0 = new Inflater();
      ((RealBufferedSink) bufferedSink0).buffer.readLong();
      Buffer buffer2 = new Buffer();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Pipe pipe0 = new Pipe(100L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.writeShort(1223);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.offset = 100L;
      buffer_UnsafeCursor0.resizeBuffer(100L);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("timeout < 0: ", true);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true, "timeout");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // timeout
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Buffer buffer2 = buffer1.copyTo((OutputStream) byteArrayOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer3 = buffer1.writeUtf8("size < 8: ");
      realBufferedSink0.buffer.readLongLe();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer2);
      realBufferedSink1.writeDecimalLong(255L);
      buffer3.readByteString();
      realBufferedSink1.buffer.segmentSizes();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "");
      buffer1.writeDecimalLong(100000000000000L);
      try { 
        buffer3.readFully(buffer0, 4044298575217846643L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.segmentSizes();
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.writeUtf8CodePoint(65475);
      Buffer buffer2 = realBufferedSink0.buffer();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer.sha1();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Buffer buffer3 = new Buffer();
      buffer2.readUtf8CodePoint();
      try { 
        buffer0.require(65475);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.segmentSizes();
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.toString();
      Buffer buffer2 = realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[2];
      buffer1.indexOf((byte)0);
      byteArray0[1] = (byte) (-55);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink.md5(buffer1);
      long long0 = new Integer((byte) (-55));
      buffer2.writeInt(65533);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      realBufferedSink0.buffer.indexOfElement(byteString0);
      realBufferedSink0.buffer.indexOf(byteString0, 1000000L);
      realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSink0.buffer.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio");
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte)1;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)110;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.segmentSizes();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      Buffer buffer2 = realBufferedSource0.buffer();
      Buffer buffer3 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      HashingSource hashingSource0 = HashingSource.sha256(buffer2);
      buffer2.writeByte(3018);
      hashingSource0.hash();
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      HashingSink hashingSink0 = HashingSink.md5(buffer1);
      hashingSink0.hash();
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSink2.buffer);
      Buffer buffer4 = new Buffer();
      realBufferedSink2.buffer.segmentSizes();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "out == null");
      buffer3.writeDecimalLong((-504L));
      try { 
        buffer2.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // size < 2: 1 (to read code point prefixed 0xffffffca)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      BufferedSink bufferedSink0 = realBufferedSink0.writeShort(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HashingSource.sha256(realBufferedSink0.buffer);
      HashingSource hashingSource0 = HashingSource.sha256(((RealBufferedSink) bufferedSink0).buffer);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer2 = new Buffer();
      Buffer buffer3 = realBufferedSink0.buffer();
      GzipSource gzipSource0 = new GzipSource(buffer3);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink1.writeUtf8("h!040");
      realBufferedSink1.writeDecimalLong(4698L);
      Integer integer0 = new Integer(2164);
      realBufferedSource0.buffer.writeDecimalLong(109521666048L);
      Pipe pipe0 = new Pipe(10000000L);
      Buffer buffer4 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer_UnsafeCursor0.buffer.readUnsafe(buffer_UnsafeCursor1);
      long long0 = 33L;
      realBufferedSource0.buffer.indexOf((byte)80, 33L);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer0);
      realBufferedSink1.buffer();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor1.buffer.readAndWriteUnsafe(buffer_UnsafeCursor2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString0);
      HashingSink.sha1(realBufferedSink0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Pipe pipe0 = new Pipe(7L);
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer2 = ((RealBufferedSink) bufferedSink0).buffer.writeString("", charset0);
      Buffer buffer3 = realBufferedSink0.buffer;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      bufferedSink0.writeString("", charset0);
      buffer3.indexOf((byte)92, (long) (byte)92, (long) (byte)92);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.indexOf(byteArray0);
      buffer2.indexOfElement(byteString1);
      buffer3.writeShortLe((byte)92);
      ((RealBufferedSink) bufferedSink0).buffer.readUtf8CodePoint();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer4 = realBufferedSink0.buffer();
      Buffer buffer5 = buffer4.writeDecimalLong((-1556L));
      OutputStream outputStream0 = bufferedSink0.outputStream();
      buffer5.writeTo(outputStream0);
      // Undeclared exception!
      try { 
        buffer2.readFully(buffer3, (-2110L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeShort(1795);
      Buffer buffer2 = buffer1.writeHexadecimalUnsignedLong(1000000000000000014L);
      HashingSource.sha256(realBufferedSink0.buffer);
      buffer2.timeout();
      HashingSink hashingSink0 = HashingSink.sha1(buffer1);
      HashingSource.sha1(buffer0);
      hashingSink0.hash();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer2, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeShort(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      Buffer buffer2 = realBufferedSink1.buffer;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer2.skip((byte)0);
      HashingSink.sha1(buffer2);
      byteString0.lastIndexOf(byteArray0);
      buffer2.indexOfElement(byteString0);
      Buffer buffer3 = realBufferedSink1.buffer();
      byteString0.base64();
      buffer2.equals(buffer0);
      ByteString[] byteStringArray0 = new ByteString[4];
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer3.readUnsafe(buffer_UnsafeCursor0);
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options.of(byteStringArray0);
      buffer2.writableSegment(8192);
      buffer1.require((byte)0);
      Buffer buffer4 = realBufferedSink0.buffer.writeDecimalLong((-934L));
      realBufferedSink1.buffer.readUtf8CodePoint();
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      buffer3.readShort();
      buffer4.readString((Charset) uS_ASCII0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeShort(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      Buffer buffer2 = realBufferedSink1.buffer;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)12;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer2.skip((byte)0);
      buffer2.write(byteArray0);
      HashingSink.sha1(buffer2);
      byteString0.lastIndexOf(byteArray0);
      buffer2.indexOfElement(byteString0);
      Buffer buffer3 = realBufferedSink1.buffer();
      byteString0.base64();
      buffer2.equals(buffer0);
      ByteString[] byteStringArray0 = new ByteString[4];
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer3.readUnsafe(buffer_UnsafeCursor0);
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options.of(byteStringArray0);
      buffer2.writableSegment(8192);
      buffer1.require((byte)0);
      Buffer buffer4 = realBufferedSink0.buffer.writeDecimalLong((-934L));
      realBufferedSink1.buffer.readUtf8CodePoint();
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      buffer3.readShort();
      buffer4.readString((Charset) uS_ASCII0);
      realBufferedSink1.buffer.readAll(buffer0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.sha256();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      byteString0.sha1();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((byte)8);
      Buffer buffer2 = buffer0.emitCompleteSegments();
      hashingSink0.hash();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer2.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
      Buffer buffer3 = buffer1.writeByte((-1700));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString1);
      HashingSink hashingSink1 = HashingSink.md5(buffer3);
      hashingSink1.hash();
      realBufferedSink0.buffer.outputStream();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      realBufferedSink2.buffer();
      Inflater inflater0 = new Inflater();
      Buffer buffer4 = new Buffer();
      Pipe pipe0 = new Pipe(1);
      realBufferedSink2.buffer.inputStream();
      buffer1.writeShortLe(0);
      Buffer buffer5 = realBufferedSink0.buffer();
      buffer5.copyTo(((RealBufferedSink) bufferedSink0).buffer, (long) 0, (long) 1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      realBufferedSource0.buffer.writeDecimalLong(9999999999999979L);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer0.indexOf(byteString0, 9999999999999979L);
      Charset charset0 = Charset.defaultCharset();
      buffer0.readString(charset0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = 2712;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0, 2712);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeTo((OutputStream) bufferedOutputStream0, 9999999999999979L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=9999999999999979
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.segmentSizes();
      realBufferedSink0.buffer();
      buffer0.writeUtf8CodePoint(65533);
      BufferedSink bufferedSink0 = realBufferedSink0.writeByte(474);
      HashingSource.sha256(realBufferedSink0.buffer);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      HashingSource hashingSource0 = HashingSource.sha1(buffer1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      BufferedSink bufferedSink1 = realBufferedSink0.writeLongLe(1685L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(((RealBufferedSink) bufferedSink0).buffer);
      realBufferedSource0.buffer();
      hashingSource0.toString();
      boolean boolean0 = realBufferedSource0.closed;
      Buffer buffer2 = ((RealBufferedSink) bufferedSink0).buffer.writeDecimalLong(65533);
      ((RealBufferedSink) bufferedSink1).buffer.indexOf((byte)0, 10L);
      realBufferedSource0.inputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 65533);
      Integer integer0 = new Integer((-1));
      buffer_UnsafeCursor0.buffer.readInt();
      Buffer buffer3 = realBufferedSink1.buffer();
      buffer3.writeUtf8("}$`'bSywI4wI");
      buffer2.readByte();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeShort(0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      Buffer buffer2 = realBufferedSink1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.sha256();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteString byteString1 = new ByteString(byteArray0);
      realBufferedSink0.buffer.hmacSha1(byteString1);
      HashingSink.sha1(buffer2);
      ByteString byteString2 = realBufferedSource0.readByteString();
      buffer0.rangeEquals((long) 0, byteString2);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer2);
      int int0 = ObjectStreamConstants.baseWireHandle;
      // Undeclared exception!
      try { 
        buffer1.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(1584L);
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      ByteString byteString0 = hashingSource0.hash();
      hashingSource0.hash();
      Charset.defaultCharset();
      hashingSource0.hash();
      Buffer buffer2 = buffer1.writeUtf8CodePoint((byte)16);
      buffer2.segmentSizes();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)16;
      ByteString byteString1 = new ByteString(byteArray0);
      buffer2.indexOfElement(byteString1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer3 = new Buffer();
      buffer1.indexOf(byteString0, 8L);
      // Undeclared exception!
      try { 
        buffer2.write(buffer1, 3418L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Pipe pipe0 = new Pipe(82L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeShort(1223);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer1.indexOfElement(byteString0);
      Buffer buffer2 = new Buffer();
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      sequenceInputStream0.close();
      Buffer buffer3 = new Buffer();
      Buffer buffer4 = buffer1.readFrom((InputStream) sequenceInputStream0);
      Buffer buffer5 = new Buffer();
      buffer5.indexOf(byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeLongLe(10L);
      realBufferedSink0.flush();
      HashingSink.md5(buffer0);
      buffer4.readUtf8Line();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(1095216660480L);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-126);
      buffer0.readUtf8();
      Integer integer0 = new Integer((byte) (-126));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      OutputStream outputStream0 = realBufferedSink0.outputStream();
      GzipSource gzipSource0 = new GzipSource(buffer0);
      HashingSource.md5(gzipSource0);
      realBufferedSink0.buffer.writeUtf8("\u0000\u0000\u0000\uFFFD\u0000\u0000\u0000\u0000");
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink1.writeLongLe(9999978L);
      realBufferedSink0.flush();
      HashingSink hashingSink0 = HashingSink.sha256(realBufferedSink0);
      hashingSink0.hash();
      realBufferedSink1.buffer.sha512();
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.copyTo(outputStream0, 4L, (long) (byte) (-126));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=8 offset=4 byteCount=-126
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(1567L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      String string0 = null;
      // Undeclared exception!
      try { 
        realBufferedSink0.writeUtf8((String) null, 2002, 2002);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Pipe pipe0 = new Pipe(82L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Buffer buffer0 = pipe0.buffer;
      int int0 = 1223;
      Buffer buffer1 = buffer0.writeShort(1223);
      HashingSink.sha1(buffer1);
      buffer1.equals((Object) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer1.writableSegment(1223);
      buffer1.writableSegment(1828);
      buffer1.require((-595L));
      buffer1.require((-577L));
      Buffer buffer2 = pipe0.buffer;
      int int1 = 1073741824;
      // Undeclared exception!
      try { 
        buffer2.writableSegment(1073741824);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = buffer0.writeLong(1567L);
      boolean boolean0 = realBufferedSink0.closed;
      buffer0.segmentSizes();
      Buffer buffer2 = realBufferedSink0.buffer();
      HashingSource.sha256(buffer0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)20;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer0.toString();
      Integer integer0 = new Integer((byte)20);
      ByteString byteString0 = new ByteString(byteArray0);
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer3 = buffer1.writeString("[hex=000000000000061f]", charset0);
      buffer2.segmentSizes();
      Integer.getInteger("[hex=000000000000061f]");
      Pipe pipe0 = new Pipe((byte)79);
      Buffer buffer4 = new Buffer();
      Buffer buffer5 = buffer3.writeIntLe((byte)79);
      buffer5.indexOf(byteString0);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource.hmacSha256(pipe_PipeSource0, byteString0);
      Buffer buffer6 = realBufferedSink0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer6.readUnsafe(buffer_UnsafeCursor0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffe
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeLong(1584L);
      HashingSource hashingSource0 = HashingSource.sha256(buffer1);
      hashingSource0.hash();
      ByteString byteString0 = hashingSource0.hash();
      byte byte0 = (byte)5;
      hashingSource0.hash();
      Buffer buffer2 = buffer1.writeUtf8CodePoint((byte)5);
      buffer2.segmentSizes();
      buffer1.indexOfElement(byteString0, (long) (byte)5);
      // Undeclared exception!
      try { 
        buffer1.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer0.segmentSizes();
      Buffer buffer1 = realBufferedSink0.buffer();
      realBufferedSink0.toString();
      Buffer buffer2 = buffer1.writeUtf8CodePoint(65533);
      realBufferedSink0.buffer.toString();
      byte[] byteArray0 = new byte[2];
      Integer integer0 = new Integer(65533);
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSink0.buffer.indexOfElement(byteString0);
      Charset charset0 = Charset.defaultCharset();
      Buffer buffer3 = buffer2.writeString(",y|?5ztQ@O1h/", charset0);
      buffer2.segmentSizes();
      Integer.getInteger("[hex=efbfbd]");
      Pipe pipe0 = new Pipe((long) integer0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.close();
      Buffer buffer4 = new Buffer();
      buffer3.readFrom((InputStream) sequenceInputStream0);
      buffer0.writeIntLe(257);
      buffer0.indexOf(byteString0);
      HashingSource.hmacSha256(buffer2, byteString0);
      Buffer buffer5 = pipe0.buffer;
      // Undeclared exception!
      try { 
        buffer5.selectPrefix((Options) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeDecimalLong((-400L));
      Pipe pipe0 = new Pipe(10L);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      HashingSource hashingSource0 = HashingSource.sha256(realBufferedSink0.buffer);
      Inflater inflater0 = new Inflater();
      realBufferedSink0.writeLongLe(40L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer1.sha1();
      HashingSink hashingSink0 = HashingSink.sha512(buffer1);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.writeLongLe(10L);
      realBufferedSink1.toString();
      realBufferedSink1.writeUtf8("af@E-`#OJr");
      realBufferedSink0.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      buffer_UnsafeCursor0.buffer.segmentSizes();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      realBufferedSink0.emitCompleteSegments();
      buffer_UnsafeCursor0.buffer.readUtf8LineStrict(9223372036854775807L);
      // Undeclared exception!
      try { 
        buffer1.readByteArray(10000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=0 byteCount=10000000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      boolean boolean0 = realBufferedSink0.closed;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      realBufferedSource0.readByteString();
      Buffer buffer1 = new Buffer();
      byte[] byteArray0 = new byte[3];
      Charset charset0 = Charset.defaultCharset();
      realBufferedSink0.buffer.writeString("FYkc", charset0);
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)16;
      boolean boolean1 = realBufferedSink0.closed;
      Buffer buffer2 = realBufferedSink0.buffer;
      realBufferedSink0.toString();
      boolean boolean2 = realBufferedSink0.closed;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer1.skip((-1L));
      realBufferedSink0.writeUtf8("Nu88er too large: ");
      Integer integer0 = new Integer((byte)120);
      buffer2.readHexadecimalUnsignedLong();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      buffer2.read(byteArray0);
      // Undeclared exception!
      try { 
        buffer2.readUtf8LineStrict((long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1
         //
         verifyException("okio.Buffer", e);
      }
  }
}
