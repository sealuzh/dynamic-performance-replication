/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 23:09:00 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.Reader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      char[] charArray0 = new char[6];
      char char0 = '\"';
      charArray0[0] = '\"';
      charArray0[1] = '(';
      charArray0[2] = 'N';
      charArray0[3] = '.';
      charArray0[4] = '%';
      charArray0[5] = 'D';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      char char1 = '&';
      jSONScanner0.bytesValue();
      jSONScanner0.scanFloat('&');
      jSONScanner0.getCurrent();
      // Undeclared exception!
      try { 
        jSONScanner0.arrayCopy(1369, charArray0, 0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2785, 2785);
      jSONReaderScanner0.scanFloat('0');
      jSONReaderScanner0.nextToken(2785);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("BeanToArray");
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      jSONScanner0.scanFieldFloatArray(charArray0);
      long long0 = jSONScanner0.longValue();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 999;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("?", 999);
      char[] charArray0 = new char[4];
      Class<String> class0 = String.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      charArray0[0] = '9';
      char char0 = '?';
      charArray0[1] = '?';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 41, 41);
      jSONReaderScanner0.scanNumber();
      JSONLexerBase.readString(charArray0, 0);
      jSONReaderScanner0.close();
      assertEquals(2, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = '{';
      charArray0[2] = 'v';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      Feature feature0 = Feature.AllowUnQuotedFieldNames;
      jSONReaderScanner0.config(feature0, false);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.getCalendar();
      jSONReaderScanner0.scanUUID('{');
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.close();
      assertEquals(985, jSONReaderScanner0.getFeatures());
      
      JSONScanner jSONScanner0 = new JSONScanner("syntax error : ", 0);
      Class<Object> class0 = Object.class;
      jSONScanner0.newCollectionByType(class0);
      assertEquals(0, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.awt.");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('!');
      jSONReaderScanner0.scanDecimal('J');
      int int0 = jSONReaderScanner0.getFeatures();
      assertEquals(989, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("y0}F6'>lMMw");
      Feature feature0 = Feature.InternFieldNames;
      jSONReaderScanner0.config(feature0, false);
      int int0 = jSONReaderScanner0.scanType("y0}F6'>lMMw");
      assertEquals(973, jSONReaderScanner0.getFeatures());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[1];
      char char0 = 'S';
      charArray0[0] = 'S';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 863, 863);
      jSONReaderScanner0.scanFloat('j');
      jSONReaderScanner0.stringDefaultValue();
      JSONScanner jSONScanner0 = new JSONScanner("", (-751));
      jSONScanner0.scanNumber();
      jSONScanner0.hasSpecial = false;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 863, 0, 863, 863, 863, 0, (-751), (-1));
      jSONScanner0.timeZone = (TimeZone) simpleTimeZone0;
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error");
      float float0 = jSONReaderScanner0.scanFloat('w');
      assertEquals(0.0F, float0, 0.01F);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = ')';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(lineNumberReader0);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      char char0 = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = '4';
      JSONLexerBase.readString(charArray0, 0);
      JSONScanner jSONScanner0 = new JSONScanner("53].s_");
      jSONScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.setTime('Z', 'd', 'B', '\\', '\\', 'Z');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      jSONScanner0.scanType("7`6");
      jSONScanner0.longValue();
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 95, 95);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 257;
      JSONScanner jSONScanner0 = new JSONScanner("UQW1v;", 257);
      int int1 = 355;
      char char0 = 'A';
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("hex");
      jSONReaderScanner0.scanDecimal('m');
      jSONReaderScanner0.isBlankInput();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 8);
      jSONReaderScanner0.nextToken(0);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4, 4);
      jSONReaderScanner0.isRef();
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldInt(charArray1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("RXQhE;lLr]=.Uz36");
      jSONReaderScanner0.intValue();
      Feature feature0 = Feature.InternFieldNames;
      Locale locale0 = Locale.ITALIAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      char[] charArray0 = new char[8];
      charArray0[0] = '\'';
      charArray0[1] = 'o';
      charArray0[2] = 'i';
      charArray0[3] = '2';
      charArray0[4] = 'I';
      charArray0[5] = '$';
      charArray0[6] = '$';
      charArray0[7] = '%';
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      Locale.lookupTag(linkedList0, (Collection<String>) null);
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.config(feature0, true);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("FBU4l1LFY9");
      jSONReaderScanner0.isEnabled(83, 11);
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner((Reader) null, 58);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("set", 91);
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 95, 95);
      jSONReaderScanner0.longValue();
      jSONReaderScanner0.nextToken(95);
      jSONReaderScanner0.scanString('Y');
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 8);
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanString('<');
      jSONScanner0.info();
      jSONReaderScanner0.getTimeZone();
      jSONReaderScanner0.isEOF();
      assertEquals(8, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'K';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(lineNumberReader0);
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = 1389;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 39);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      jSONReaderScanner0.close();
      SymbolTable symbolTable0 = new SymbolTable(39);
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol("]ACu(U:eJ^Z6,R", 1389, 39, 39);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = 'u';
      JSONLexerBase.readString(charArray0, 0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1239, 1002);
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("VCT4(i=)nY0Q{@FLo2");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDecimal('Y');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[7];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      char[] charArray1 = new char[8];
      charArray1[0] = '}';
      charArray1[1] = 'y';
      charArray1[2] = 'M';
      charArray1[3] = ',';
      charArrayReader0.mark(0);
      charArray1[4] = 'm';
      charArray1[5] = '_';
      charArray1[6] = '6';
      charArray1[7] = 'c';
      jSONReaderScanner0.scanFieldString(charArray1);
      jSONReaderScanner0.scanFieldDate(charArray1);
      jSONScanner0.scanBoolean('m');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("=bq5 SIhk5KCmA");
      jSONReaderScanner0.nextToken(5050);
      jSONReaderScanner0.skipWhitespace();
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      JSONLexerBase.readString(charArray0, 0);
      JSONScanner jSONScanner0 = new JSONScanner("", (-1584));
      jSONScanner0.skipWhitespace();
      int int0 = jSONScanner0.intValue();
      assertEquals(0, int0);
      
      jSONScanner0.charArrayCompare(charArray0);
      assertEquals((-1584), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed.str.lit");
      jSONReaderScanner0.nextToken(57);
      jSONReaderScanner0.close();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("!");
      jSONReaderScanner0.getCurrent();
      jSONReaderScanner0.scanIdent();
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fv");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONReaderScanner0.scanStringArray(linkedList0, '^');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(91);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = 'u';
      JSONLexerBase.readString(charArray0, 0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.isBlankInput();
      Feature feature0 = Feature.SortFeidFastMatch;
      jSONReaderScanner0.config(feature0, false);
      HashSet<String> hashSet0 = new HashSet<String>();
      jSONReaderScanner0.scanStringArray(hashSet0, 'm');
      assertEquals(477, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 57, 35);
      jSONReaderScanner0.nextToken(1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 57, (-60));
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      jSONReaderScanner0.nextToken(1);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 1077);
      jSONReaderScanner0.scanFieldDecimal(charArray0);
      charArrayReader0.markSupported();
      jSONReaderScanner0.nextToken(1077);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(5Ho");
      jSONReaderScanner0.scanInt('!');
      jSONReaderScanner0.nextToken(1017);
      assertEquals(10, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 1077);
      charArrayReader0.markSupported();
      jSONReaderScanner0.nextToken(1077);
      jSONReaderScanner0.scanInt('N');
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan true error", 57);
      jSONReaderScanner0.features = 57;
      jSONReaderScanner0.pos();
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 57, 35);
      jSONReaderScanner0.setToken(35);
      jSONReaderScanner0.nextToken(1);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanBoolean('T');
      boolean boolean0 = jSONReaderScanner0.charArrayCompare(charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      char[] charArray0 = new char[2];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(lineNumberReader0);
      jSONReaderScanner0.scanFieldDate(charArray0);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("R,AJyQ)Z\u0006", 27);
      SymbolTable symbolTable0 = new SymbolTable(47);
      jSONScanner0.scanSymbolUnQuoted(symbolTable0);
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal(']');
      assertEquals(27, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'T';
      charArray0[1] = 'u';
      charArray0[2] = '';
      charArray0[3] = '+';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 115;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 115);
      SymbolTable symbolTable0 = new SymbolTable(115);
      jSONReaderScanner0.scanSymbol(symbolTable0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15);
      SymbolTable symbolTable0 = new SymbolTable(3);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u0000
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("hdW>SDU69GYl:~z");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      boolean boolean0 = jSONScanner0.isEnabled(41);
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 57;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan true error", 57);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'x';
      int int0 = 2561;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2561, 2561);
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-584));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - x, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WriteEnu_UsingName");
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.scanStringArray((Collection<String>) null, '6');
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8A=V");
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'U';
      charArray0[2] = 'k';
      charArray0[3] = '3';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 80, 57);
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.nextToken(91);
      assertEquals('U', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      jSONScanner0.scanType("7`6");
      jSONScanner0.scanFieldFloatArray(charArray0);
      long long0 = jSONScanner0.longValue();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.nextToken(119);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("hdW>SDU69GYl:~z");
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4149, 1078);
      char[] charArray1 = new char[6];
      charArray1[0] = 'w';
      charArray1[1] = '$';
      charArray1[2] = 'd';
      charArray1[3] = 'L';
      charArray1[4] = '>';
      charArray1[5] = 'S';
      JSONLexerBase.readString(charArray1, 0);
      jSONReaderScanner0.putChar('%');
      assertEquals(1078, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parserParserConfQg");
      jSONReaderScanner0.nextToken((-2181));
      jSONReaderScanner0.putChar('J');
      assertEquals('o', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 57, 57);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONReaderScanner0.setToken((-1574));
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.time.chrono.ChronoLocalDate
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 57, 57);
      jSONReaderScanner0.nextToken(1);
      SymbolTable symbolTable0 = new SymbolTable(1);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[9];
      char[] charArray1 = new char[1];
      char char0 = 't';
      charArray1[0] = 't';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      SymbolTable symbolTable0 = new SymbolTable(100);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 100, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan true error", 57);
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = 'n';
      charArray0[2] = '<';
      charArray0[3] = '';
      charArray0[4] = '&';
      charArray0[5] = '9';
      charArray0[6] = 'M';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 84, (-547));
      jSONReaderScanner1.scanLong('G');
      jSONReaderScanner1.isBlankInput();
      jSONReaderScanner1.isBlankInput();
      // Undeclared exception!
      try { 
        jSONReaderScanner1.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2in%'~EwyM");
      jSONReaderScanner0.scanLong('P');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1000, 1000);
      jSONReaderScanner0.scanLong('t');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = ';';
      charArray0[1] = 'm';
      charArray0[2] = '<';
      charArray0[3] = 'Y';
      charArray0[4] = 'N';
      charArray0[5] = '?';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 19, 2152);
      jSONReaderScanner0.nextToken(125);
      assertEquals('m', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1018, 1018);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 43, 43);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner("*|>qFrO", 2952);
      jSONScanner0.scanFieldDate(charArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4149, 1078);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("{S3jI+9_pMC=V;4", 0);
      jSONReaderScanner1.nextToken(22);
      assertEquals('S', jSONReaderScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 57, 57);
      StringReader stringReader0 = new StringReader("ss3M_@R");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(stringReader0, 1673);
      jSONReaderScanner1.nextToken(2);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":F*2(7uP4Pr", 11);
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.pos();
      assertEquals('F', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4149, 1078);
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.isBlankInput();
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse null", 1);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      SymbolTable symbolTable0 = new SymbolTable(1);
      jSONScanner0.scanEnum(class0, symbolTable0, 'B');
      assertEquals(1, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("y0}F6' l2Mw");
      jSONReaderScanner0.scanType("y0}F6' l2Mw");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      SymbolTable symbolTable0 = new SymbolTable(120);
      jSONReaderScanner0.scanSymbolWithSeperator(symbolTable0, '$');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("`l", 15);
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      SymbolTable symbolTable0 = new SymbolTable(46);
      jSONReaderScanner0.scanEnum(class0, symbolTable0, 'a');
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol(64, 64, 11, symbolTable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'Q';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 8, (-1268));
      jSONReaderScanner0.nextToken(8);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", (-1634));
      jSONReaderScanner0.scanTrue();
      assertEquals((-1634), jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'y';
      charArray0[2] = '1';
      charArray0[3] = '\\';
      charArray0[4] = 'y';
      charArray0[5] = '!';
      charArray0[6] = '*';
      charArray0[7] = '+';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str.lit
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'c';
      charArray0[1] = 'q';
      charArray0[2] = 'W';
      charArray0[3] = 'T';
      charArray0[4] = '\\';
      charArray0[5] = '6';
      charArray0[6] = 'S';
      charArray0[7] = 'a';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 94);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Y]YwcZEN0[j4@", 27);
      jSONScanner0.scanDate('=');
      jSONScanner0.scanDecimal('1');
      assertEquals(27, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.pos = 2442;
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("hdW>SDU69GYl:~z");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanDecimal('U');
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("BeanToArray");
      jSONScanner0.scanNumber();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "BeanToArray");
      jSONScanner0.longValue();
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals('e', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 57, 57);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.putChar('!');
      jSONReaderScanner0.nextToken(24);
      jSONReaderScanner0.scanDecimal('D');
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertTrue(jSONReaderScanner0.isEOF());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 670);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.nextToken(670);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_w");
      jSONScanner0.scanIdent();
      jSONScanner0.longValue();
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldBigInteger((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      char[] charArray0 = new char[2];
      jSONScanner0.nextIdent();
      charArray0[0] = ']';
      charArray0[1] = '=';
      jSONScanner0.scanFieldBigInteger(charArray0);
      long long0 = jSONScanner0.longValue();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(4098L, long0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1078, 1078);
      jSONReaderScanner0.isBlankInput();
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      assertEquals(0, jSONScanner0.matchStat);
      assertEquals(989, jSONScanner0.getFeatures());
      
      boolean boolean0 = JSONLexerBase.isWhitespace(' ');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("gf?q%W!P]'");
      jSONReaderScanner0.scanInt('R');
      jSONReaderScanner0.nextToken(42);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan true error");
      jSONReaderScanner0.scanInt('7');
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.scanType("scan true error");
      jSONReaderScanner0.nextToken((-3030));
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      SymbolTable symbolTable0 = new SymbolTable(11);
      jSONScanner0.scanSymbol(symbolTable0, 'e');
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fv");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.nextToken();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.nextToken(78);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-1584));
      jSONScanner0.pos = (-1584);
      jSONScanner0.tokenName();
      jSONScanner0.skipWhitespace();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("^)3&X");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      jSONReaderScanner0.nextToken(102);
      jSONReaderScanner0.scanDate('I');
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan true error");
      char[] charArray0 = new char[1];
      jSONReaderScanner0.np = 116;
      charArray0[0] = '~';
      jSONReaderScanner0.scanDate('~');
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      HashSet<String> hashSet0 = new HashSet<String>();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanDate('+');
      jSONReaderScanner0.info();
      jSONReaderScanner0.nextToken((-1));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("hdW>SDU69GYl:~z");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fv");
      jSONReaderScanner0.nextToken(18);
      assertEquals(18, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      char[] charArray0 = new char[13];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4, 4);
      jSONReaderScanner0.nextToken(4);
      jSONReaderScanner0.indexOf('%', 4);
      String string0 = JSONLexerBase.readString(charArray0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fv");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(":!@GIH&04?<");
      jSONReaderScanner0.nextToken(9);
      assertEquals('!', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 57, 57);
      jSONReaderScanner0.nextToken(13);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      double double0 = jSONReaderScanner0.scanDouble('\'');
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1334, 35);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken(1334);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double double0 = jSONReaderScanner0.scanDouble('C');
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("error parse false");
      jSONReaderScanner0.matchStat = 36;
      jSONReaderScanner0.scanNumber();
      char[] charArray0 = new char[8];
      charArray0[0] = ',';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = '_';
      charArray0[4] = '/';
      charArray0[5] = '/';
      charArray0[6] = '_';
      jSONReaderScanner0.token = 36;
      charArray0[7] = '_';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '_';
      charArray0[1] = '/';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 36, 42);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("error parse false");
      jSONReaderScanner1.scanNumber();
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 103);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4, 4);
      jSONReaderScanner0.isRef();
      JSONScanner jSONScanner0 = new JSONScanner("_W#Um9rLT[i&%.e[{", 19);
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.pos();
      assertEquals('#', jSONScanner0.getCurrent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-1584));
      jSONScanner0.skipWhitespace();
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      int int0 = jSONScanner0.token();
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      assertEquals(989, jSONReaderScanner0.getFeatures());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'q';
      charArray0[1] = 'k';
      charArray0[2] = 'N';
      charArray0[3] = 'I';
      charArray0[4] = '(';
      charArray0[5] = 'j';
      charArray0[6] = '6';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0, 0);
      boolean boolean0 = jSONScanner0.isEnabled(116);
      assertFalse(boolean0);
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("_W");
      jSONScanner0.scanBoolean('<');
      long long0 = jSONScanner0.longValue();
      assertEquals(0L, long0);
      
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertFalse(boolean0);
      
      jSONScanner0.getCurrent();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("_W");
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertFalse(boolean0);
      
      char char0 = jSONScanner0.getCurrent();
      assertEquals(989, jSONScanner0.getFeatures());
      assertEquals('_', char0);
      assertEquals(0, jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[5];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1078, 1078);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 8);
      jSONReaderScanner1.scanFieldSymbol(charArray0);
      jSONReaderScanner1.isRef();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-1584));
      char[] charArray0 = new char[0];
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      jSONScanner0.scanUUID('(');
      jSONScanner0.skipWhitespace();
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ZezhFQh)M#fAT", 0);
      jSONScanner0.skipWhitespace();
      int int0 = ObjectStreamConstants.baseWireHandle;
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, '|');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[1];
      int int0 = 0;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.scanDate('.');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithChar('}');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match } - \u0000, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set");
      jSONReaderScanner0.nextToken(1227);
      char[] charArray0 = new char[9];
      charArray0[0] = 'Z';
      charArray0[1] = 'x';
      charArray0[2] = '3';
      charArray0[3] = '|';
      charArray0[4] = 'N';
      charArray0[5] = '<';
      charArray0[6] = 'a';
      charArray0[7] = '&';
      charArray0[8] = '2';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, 1227, 726);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = 'Z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 92, 6);
      jSONReaderScanner0.nextToken(917);
      assertEquals('Z', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true", (-1634));
      jSONReaderScanner0.nextToken((-286));
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parserParserConfQg");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("a<", 0);
      jSONReaderScanner0.nextToken(4);
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = '[';
      charArray0[2] = 'P';
      charArray0[3] = 'r';
      charArray0[4] = '`';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 4);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan true &error");
      char[] charArray0 = new char[4];
      charArray0[1] = '}';
      charArray0[2] = '>';
      charArray0[3] = 'J';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13);
      jSONReaderScanner0.nextToken(13);
      assertEquals('>', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1mfy");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0, 0);
      jSONReaderScanner0.scanUUID('i');
      jSONReaderScanner0.scanDecimal('G');
      jSONReaderScanner0.getFeatures();
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.getLocale();
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("fv");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONReaderScanner0.isBlankInput();
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not support type ");
      jSONReaderScanner0.scanString('9');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. n
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not support type ");
      TimeZone timeZone0 = TimeZone.getDefault();
      jSONReaderScanner0.setTimeZone(timeZone0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('_');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WriteEnu_UsingName");
      jSONReaderScanner0.scanNumber();
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'd';
      charArray0[2] = 'y';
      charArray0[3] = 'j';
      jSONReaderScanner0.sbuf = charArray0;
      double double0 = jSONReaderScanner0.scanDouble('&');
      assertEquals(2, jSONReaderScanner0.token());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(5Ho");
      jSONReaderScanner0.features = 1092;
      jSONReaderScanner0.nextToken(1017);
      double double0 = jSONReaderScanner0.scanDouble(';');
      assertEquals(10, jSONReaderScanner0.token());
      assertEquals(5.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      char[] charArray0 = new char[2];
      charArray0[0] = 'D';
      charArray0[1] = 's';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      jSONReaderScanner0.nextToken(1017);
      Feature feature0 = Feature.InternFieldNames;
      jSONReaderScanner0.config(feature0, false);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("-yBi}");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("scan true error");
      jSONReaderScanner0.ch = 'T';
      jSONReaderScanner0.nextToken(125);
      long long0 = jSONReaderScanner0.longValue();
      assertEquals(' ', jSONReaderScanner0.getCurrent());
      assertEquals(72652L, long0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      char[] charArray0 = new char[9];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)25;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      charArray0[0] = 'c';
      charArray0[1] = '5';
      charArray0[2] = 'a';
      charArray0[3] = 'm';
      charArray0[4] = '+';
      charArray0[5] = 'H';
      charArray0[6] = '^';
      charArray0[7] = '#';
      charArray0[8] = 'i';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 9, 57);
      jSONReaderScanner0.scanDate('$');
      jSONReaderScanner0.nextToken(17);
      assertEquals(1, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("set", 91);
      jSONScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 91);
      jSONReaderScanner0.nextToken(10);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("set", 239);
      jSONScanner0.scanFieldFloatArray(charArray0);
      jSONScanner0.hasSpecial = true;
      jSONScanner0.matchField(charArray0);
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.scanIdent();
      jSONScanner0.setTimeZone((TimeZone) null);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("[D;h");
      jSONReaderScanner0.scanStringArray((Collection<String>) null, ';');
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.integerValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not support type ");
      char char0 = '9';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(14);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'y';
      charArray0[1] = '2';
      charArray0[2] = '';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3006, 3006);
      jSONReaderScanner0.subString(47, 47);
      jSONReaderScanner0.nextToken(32);
      double double0 = jSONReaderScanner0.scanDouble('y');
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("gf?q%W!P]'");
      jSONReaderScanner0.nextToken(12);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("beantoarray");
      jSONReaderScanner0.nextToken(6);
      assertEquals('e', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.scanBoolean('G');
      jSONScanner0.isRef();
      jSONScanner0.scanDate('i');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      JSONScanner jSONScanner1 = new JSONScanner("float overflow : ");
      jSONScanner1.scanBoolean('\\');
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1mfy");
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      
      long long0 = jSONReaderScanner0.scanLong('Y');
      assertEquals(1L, long0);
      
      jSONReaderScanner0.subString(2818, 0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'Y';
      charArray0[5] = 'Y';
      charArray0[6] = '\\';
      charArray0[7] = 'Y';
      boolean boolean0 = jSONReaderScanner0.matchField(charArray0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(".WXUEf\"`U");
      jSONReaderScanner0.nextToken(3198);
      assertEquals(25, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("d");
      jSONReaderScanner0.nextToken(5);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000");
      jSONReaderScanner0.nextToken(7);
      assertEquals('\u001A', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not support type ");
      jSONReaderScanner0.scanDecimal('/');
      jSONReaderScanner0.scanSymbolWithSeperator((SymbolTable) null, 'U');
      Locale locale0 = Locale.ROOT;
      jSONReaderScanner0.setLocale(locale0);
      jSONReaderScanner0.close();
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1mfy");
      int int0 = Calendar.HOUR_OF_DAY;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('~');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1mfy");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char char0 = 'm';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('m');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5*MaHj8?<K%-");
      JSONScanner jSONScanner0 = new JSONScanner("5*MaHj8?<K%-");
      jSONScanner0.skipComment();
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner("*|>qFrO", 2952);
      jSONScanner0.scanFieldDate(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("-L~2B{,)y}", (-2));
      // Undeclared exception!
      try { 
        jSONScanner1.longValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONReaderScanner0.ch = '\'';
      jSONReaderScanner0.nextToken(4011);
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")+b", 1130);
      jSONScanner0.nextIdent();
      char[] charArray0 = new char[9];
      charArray0[0] = 'i';
      charArray0[1] = '^';
      charArray0[2] = 'p';
      charArray0[3] = 'R';
      jSONScanner0.nextToken(14);
      charArray0[4] = 'S';
      charArray0[5] = 'p';
      charArray0[6] = '\"';
      charArray0[7] = '_';
      charArray0[8] = 'g';
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 35, 2536);
      jSONReaderScanner0.isRef();
      jSONReaderScanner0.nextToken(3);
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(34);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan true &error");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(5Ho");
      SymbolTable symbolTable0 = new SymbolTable('x');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("SupportNonPublicField");
      jSONReaderScanner0.nextToken(0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // SupportNonPublicField
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("scan true &error");
      jSONScanner0.scanString('x');
      jSONScanner0.sp = 21;
      jSONScanner0.scanBoolean('j');
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      StringReader stringReader0 = new StringReader("null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 3136);
      jSONReaderScanner0.scanDecimal('');
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = 'G';
      charArray0[2] = '';
      charArray0[3] = ':';
      int int0 = (-244);
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-244));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanDecimal('b');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("rBO#t?,O6 1{gr29", (-1124088139));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("rBO#t?,O6 1{gr29");
      jSONReaderScanner0.scanFieldDate(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5*MaHj8?<K%-");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      char[] charArray1 = new char[6];
      charArray1[0] = '4';
      charArray1[1] = '}';
      charArray1[2] = 'I';
      charArray1[3] = 'v';
      charArray1[4] = 'G';
      charArray1[5] = '_';
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray1, (-4759));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("true", (-1124088139));
      jSONScanner0.scanBoolean('9');
      jSONScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1124088139), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("BeanToArray");
      jSONScanner0.info();
      jSONScanner0.longValue();
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("qZHm7&uSb");
      jSONScanner0.scanFieldFloat(charArray0);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("tr.ue", (-1124088139));
      jSONScanner0.scanBoolean('9');
      jSONScanner0.scanFieldUUID(charArray0);
      BigDecimal bigDecimal0 = new BigDecimal((int) '9');
      assertEquals((byte)57, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not support type ");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("n4o support type ");
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = '9';
      charArray0[5] = '9';
      jSONReaderScanner0.matchField(charArray0);
      jSONReaderScanner0.scanDecimal('9');
      double double0 = jSONReaderScanner0.scanDouble('y');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals('n', jSONReaderScanner0.getCurrent());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("1MFy");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1MFy");
      jSONScanner0.longValue();
      BigInteger bigInteger0 = jSONScanner0.scanFieldBigInteger(charArray0);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)92;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      jSONScanner0.matchField(charArray0);
      jSONScanner0.integerValue();
      jSONScanner0.numberString();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1MFy");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.nextToken(19);
      assertEquals(1, jSONReaderScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      char char0 = '\'';
      char[] charArray0 = new char[2];
      charArray0[1] = '\'';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONReaderScanner0.ch = '\u0000';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken((int) '\'');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5*MaHj8?<K%-");
      jSONReaderScanner0.scanInt('w');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('#');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not support type ");
      JSONScanner jSONScanner0 = new JSONScanner(" - ");
      jSONScanner0.skipWhitespace();
      char[] charArray0 = new char[8];
      charArray0[0] = '|';
      charArray0[1] = 'i';
      charArray0[2] = 'Q';
      charArray0[3] = '(';
      charArray0[4] = 'c';
      charArray0[5] = 'J';
      charArray0[6] = 'v';
      charArray0[7] = '@';
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 15);
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.nextToken(15);
      assertEquals(20, jSONReaderScanner0.token());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]-");
      jSONReaderScanner0.nextToken(557);
      boolean boolean0 = JSONScanner.checkDate('h', 'h', '6', 's', '(', 'Y', 125, 557);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("R,KJy@!tQaZ\u0006");
      char[] charArray0 = new char[5];
      charArray0[0] = 'y';
      charArray0[1] = 'w';
      charArray0[2] = 'N';
      charArray0[3] = '$';
      charArray0[4] = '*';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1982);
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5*MaHj8?<K%-");
      jSONReaderScanner0.scanLong('7');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("z]", 44);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.decimalValue(true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("t/e", (-1124088119));
      jSONScanner0.scanBoolean('D');
      jSONScanner0.scanFieldIntArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("5*MaHj8?<K%-");
      float float0 = jSONReaderScanner0.scanFloat('w');
      assertEquals(5.0F, float0, 0.01F);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanFloat('l');
      BigDecimal bigDecimal0 = new BigDecimal((-521));
      assertEquals((short) (-521), bigDecimal0.shortValue());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      StringReader stringReader0 = new StringReader("null");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 3136);
      jSONReaderScanner0.scanDecimal('');
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = 'G';
      charArray0[2] = '';
      jSONReaderScanner0.scanFloat(':');
      charArray0[3] = ':';
      int int0 = (-244);
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-244));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2in%'~EwyM");
      float float0 = jSONReaderScanner0.scanFloat('f');
      assertEquals(2.0F, float0, 0.01F);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("rBO#t?,O6 1{gr29", (-1124088139));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("193JgE}U:,)QL!");
      jSONReaderScanner0.scanFieldDate(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray0, 0, 10);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      char char0 = 'z';
      jSONReaderScanner0.scanLong('z');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue(false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not support type ");
      jSONReaderScanner0.scanLong('Y');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDouble(charArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONReaderScanner0.tokenName();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextToken(81);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("PwyqY");
      jSONScanner0.scanLong('{');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("PwyqY");
      jSONScanner0.scanSymbolUnQuoted((SymbolTable) null);
      jSONReaderScanner0.bytesValue();
      jSONScanner0.nextToken(40);
      assertEquals('\u001A', jSONScanner0.getCurrent());
      
      jSONReaderScanner0.resetStringPosition();
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SupportNonPublicField");
      SymbolTable symbolTable0 = new SymbolTable(23);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("java.util.Optional", 23);
      String string0 = jSONReaderScanner0.scanSymbol(symbolTable0);
      assertEquals(0, jSONReaderScanner0.matchStat);
      assertEquals(23, jSONReaderScanner0.getFeatures());
      assertEquals("java", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("O");
      boolean boolean0 = jSONScanner0.isEnabled(461, 0);
      assertFalse(boolean0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("5*MaHj8?<K%-");
      char[] charArray0 = new char[7];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'k';
      charArray0[3] = 'Q';
      charArray0[4] = 'Q';
      charArray0[5] = '4';
      charArray0[6] = '4';
      jSONScanner0.scanFieldString(charArray0);
      char[] charArray1 = new char[9];
      charArray1[0] = 'Q';
      charArray1[1] = '4';
      charArray1[2] = 'Q';
      charArray1[4] = 'Q';
      charArray1[5] = 'y';
      charArray1[6] = '4';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray1, 26, 57);
      jSONScanner0.scanNumber();
      assertEquals('*', jSONScanner0.getCurrent());
      
      jSONScanner0.decimalValue(false);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      SymbolTable symbolTable0 = new SymbolTable(82);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("Ppy3PDQ51Ya@%8HMj", (-2294));
      jSONReaderScanner0.scanLong('(');
      jSONReaderScanner1.nextToken((-379));
      assertEquals('p', jSONReaderScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("xXsIc3vt}1TCy\"J8l#");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. X
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JSONScanner jSONScanner0 = new JSONScanner("-'{R=VPri\"lof=2C", 495);
      jSONScanner0.isBlankInput();
      jSONScanner0.stringVal();
      jSONScanner0.scanString();
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. l
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = "-'{R\\=VPri\"lof=2C";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONScanner jSONScanner0 = new JSONScanner("-'{R=VPri\"lof=2C", 495);
      char char0 = '@';
      char char1 = '(';
      jSONScanner0.scanDecimal('(');
      jSONScanner0.putChar('@');
      jSONScanner0.isBlankInput();
      jSONScanner0.stringVal();
      jSONScanner0.scanString();
      char[] charArray0 = new char[2];
      charArray0[0] = char0;
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. l
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "2in%'~EwyM";
      JSONScanner jSONScanner0 = new JSONScanner("2in%'~EwyM");
      jSONScanner0.scanDecimal('a');
      SymbolTable symbolTable0 = new SymbolTable(1809);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithChar('a');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match a - 2, info : pos 0, json : 2in%'~EwyM
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char[] charArray0 = new char[2];
      charArray0[0] = '4';
      charArray0[1] = '4';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 91, 91);
      jSONReaderScanner0.scanDouble('4');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(883, 58, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      JSONScanner jSONScanner0 = new JSONScanner("8B\"g|E9C#!;");
      jSONScanner0.scanNumber();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(",9Kox[a*S\"w%7NWjJ", 0);
      jSONReaderScanner0.scanFloat('h');
      // Undeclared exception!
      try { 
        jSONScanner0.nextIdent();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "null");
      JSONScanner jSONScanner0 = new JSONScanner("8B\"g|E9C#!;");
      jSONScanner0.scanNumber();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(",9Kox[a*S\"w%7NWjJ", 0);
      jSONReaderScanner0.scanFloat('h');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("null");
      jSONReaderScanner1.scanInt('\u001A');
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("null");
      jSONReaderScanner2.nextToken(3);
      jSONReaderScanner0.bytesValue();
      int int0 = Calendar.SHORT_FORMAT;
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      JSONScanner jSONScanner0 = new JSONScanner("sq8\"yj?", 636);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, ',');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = ')';
      JSONScanner jSONScanner0 = new JSONScanner("sq8\"yj?", 636);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, ',');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" is not a primitive type");
      jSONReaderScanner0.info();
      jSONReaderScanner0.nextToken((-4518));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferedReader bufferedReader0 = new BufferedReader(inputStreamReader0, (byte)84);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(bufferedReader0);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.nextToken(120);
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      int int0 = jSONReaderScanner0.scanType("treeset");
      assertEquals(18, jSONReaderScanner0.token());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("rBO#t?,O6 1{gr29", (-1124088139));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("supportnonpublicfield", (-2197));
      jSONReaderScanner0.scanFieldLong(charArray0);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("nttqtt", (-1124088139));
      jSONScanner0.scanBoolean('6');
      jSONScanner0.scanFieldUUID(charArray0);
      char[] charArray1 = new char[6];
      charArray1[0] = '6';
      charArray1[2] = 'B';
      charArray1[3] = '@';
      charArray1[4] = 'B';
      charArray1[5] = '6';
      jSONScanner0.scanFieldDecimal(charArray1);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("error parse null", 1);
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1);
      char[] charArray1 = new char[4];
      charArray1[0] = '6';
      charArray1[1] = '6';
      charArray1[2] = '6';
      charArray1[3] = '6';
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArray1, 4821);
      jSONReaderScanner1.scanFieldBoolean(charArray1);
      jSONReaderScanner1.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.scanFalse();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse false
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner0 = new JSONScanner("nttqtt");
      jSONScanner0.scanFieldFloat(charArray0);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
