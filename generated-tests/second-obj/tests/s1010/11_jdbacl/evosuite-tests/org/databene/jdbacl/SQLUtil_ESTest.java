/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:59:08 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.PushbackReader;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.time.chrono.JapaneseDate;
import java.util.ArrayList;
import java.util.List;
import org.apache.derby.catalog.AliasInfo;
import org.apache.derby.catalog.UUID;
import org.apache.derby.iapi.error.StandardException;
import org.apache.derby.iapi.sql.compile.Optimizer;
import org.apache.derby.iapi.sql.compile.TypeCompilerFactory;
import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
import org.apache.derby.iapi.sql.dictionary.PermDescriptor;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.Page;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.impl.io.vfmem.DataStore;
import org.apache.derby.impl.io.vfmem.VirtualFile;
import org.apache.derby.impl.sql.compile.GenerationClauseNode;
import org.apache.derby.impl.sql.execute.FKInfo;
import org.apache.derby.impl.store.raw.RawStore;
import org.apache.derby.impl.store.raw.log.LogToFile;
import org.databene.commons.collection.OrderedNameMap;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.firebirdsql.jdbc.FBBlob;
import org.firebirdsql.jdbc.FBClob;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.firebirdsql.jdbc.FBDriverNotCapableException;
import org.h2.value.ValueDecimal;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("VNNA^VJ(k;|c57LNiz");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DBDataType.getInstance(98, "Kd @%x\"!#]@e,U=^w ");
      StringBuilder stringBuilder0 = new StringBuilder();
      OrderedNameMap.createCaseSensitiveMap();
      String string0 = RawStore.TEST_REENCRYPT_CRASH_AFTER_COMMT;
      boolean boolean0 = SQLUtil.isProcedureCall("Kd @%x\"!#]@e,U=^w ");
      assertFalse(boolean0);
      
      TableContainer tableContainer0 = new TableContainer((String) null);
      tableContainer0.getTable("43X41.U");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Kd @%x\"!#]@e,U=^w ", (DBTable) null, 98, "execute-ifexists");
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("Kd @%x\"!#]@e,U=^w  EXECUTE-IFEXISTS NULL", string1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = SQLUtil.normalize("JP&)g", true);
      assertEquals("JP &) g", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "vnna^vj";
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("vnna^vj = 'vnna^vj'", string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "UB";
      stringArray0[1] = "update";
      stringArray0[2] = "setNCharacterStream(String, Reader)";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("UB = 'UB' AND update = 'update' AND setNCharacterStream(String, Reader) = 'setNCharacterStream(String, Reader)'", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6.\":(ZQ06;E=wC");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "{aanB[>ZY9dq}N]e");
      System.setCurrentTimeMillis(1566L);
      String string0 = SQLUtil.substituteMarkers("Y.-/{5BZ", "{aanB[>ZY9dq}N]e", "Y.-/{5BZ");
      assertEquals("Y.-/{5BZ", string0);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      DBSchema dBSchema0 = new DBSchema("Y.-/{5BZ");
      DBPackage dBPackage0 = new DBPackage("Y.-/{5BZ", dBSchema0);
      OrderedNameMap<DBProcedure> orderedNameMap0 = OrderedNameMap.createCaseIgnorantMap();
      dBPackage0.setProcedures(orderedNameMap0);
      String string1 = SQLUtil.ownerDotComponent(dBPackage0);
      assertEquals("Y.-/{5BZ.Y.-/{5BZ", string1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "~`";
      stringArray0[1] = "~`";
      stringArray0[2] = "~`";
      String string0 = SQLUtil.leftJoin("~`", stringArray0, "~`", "SkL^Ej<X</+57k>\u0001", stringArray0);
      assertEquals("left join ~` as SkL^Ej<X</+57k>\u0001 on ~`.~` = SkL^Ej<X</+57k>\u0001.~` and ~`.~` = SkL^Ej<X</+57k>\u0001.~` and ~`.~` = SkL^Ej<X</+57k>\u0001.~`", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("null.null, null.null", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("5U}n`T!thgLv>(2\"a%");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("executenull", "executenull", versionNumber0);
      defaultDatabase0.getTable(":!b)_Tq0 (o7YKXi", false);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("@S};2/MLoEn");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("@S};2/MLoEn", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("@S};2/MLoEn", defaultDBTable0, (-177), "UNIQUE ");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = SQLUtil.normalize("w&JI*(7Y=R|v j", false);
      assertEquals("w & JI * (7Y = R | v j", string0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("w&JI*(7Y=R|v j");
      String string1 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string1);
      
      String string2 = SQLUtil.removeComments("w & JI * (7Y = R | v j");
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("LV'p.");
      StringBuilder stringBuilder1 = stringBuilder0.append(0L);
      SQLUtil.addRequiredCondition("i/h+b6z hTmGD;J&)", stringBuilder1);
      assertEquals("LV'p.0 and i/h+b6z hTmGD;J&)", stringBuilder1.toString());
      assertEquals("LV'p.0 and i/h+b6z hTmGD;J&)", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6=1vmCb3[aG+~l");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("6=1vmCb3[aG+~l", stringBuilder0);
      String string0 = SQLUtil.normalize("-ifExists", true);
      assertEquals("- ifExists", string0);
      
      SQLUtil.removeComments("<No9");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "<No9", false, stringArray0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OrderedNameMap.createCaseSensitiveMap();
      String string0 = SQLUtil.normalize("w&JI*(7Y=R|v j", false);
      assertEquals("w & JI * (7Y = R | v j", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("w & JI * (7Y = R | v j");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("alter materialized view");
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("update");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create table+l\"70%i'", (DBSchema) null);
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("create table+l\"70%i'", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DBSchema dBSchema0 = new DBSchema(">[_([40>yA]8-KL0@", (DBCatalog) null);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(">[_([40>yA]8-KL0@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: >[_([40>yA]8-KL0@
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("R'f><NK");
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin(" NULL", (String[]) null, "CLOB", " NULL", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = SQLUtil.normalize("+l\"70%", false);
      assertEquals("+ l  \"70%\"", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = SQLUtil.normalize("b6GmX]R+lB", true);
      assertEquals("b6  GmX ] R + lB", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = RawStore.TEST_REENCRYPT_CRASH_AFTER_COMMT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "\u0001\u0165", false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      dBPrimaryKeyConstraint1.setTable(defaultDBTable0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil.join("", (String) null, stringArray0, "", (String) null, stringArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("//");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(";");
      DBDataType.getInstance(98, ";");
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";";
      stringArray0[1] = ";";
      stringArray0[2] = ";";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(";", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setName(">gj");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      String string0 = FBConnectionProperties.USE_TRANSLATION_PROPERTY;
      String string1 = AliasInfo.ALIAS_NAME_SPACE_UDT_AS_STRING;
      SQLUtil.join(">gj", "updatecreate unique index", stringArray0, "sj:,6Grl.xXM/w_", "alter indexvnna^vj(k;|c57l\niz", stringArray0);
      String string2 = SQLUtil.removeComments(";");
      assertEquals(";", string2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(98, "Kd @%x\"!#]@e,U=^w ");
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.normalize("execute-ifexists", false);
      assertEquals("execute - ifexists", string0);
      
      String string1 = RawStore.TEST_REENCRYPT_CRASH_AFTER_COMMT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "\u0001\u0165", false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      dBPrimaryKeyConstraint1.setTable(defaultDBTable0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint2 = new DBPrimaryKeyConstraint(defaultDBTable0, "Kd @%x\"!#]@e,U=^w ", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string2 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint1, nameSpec0);
      assertEquals("CONSTRAINT \u0001\u0165 PRIMARY KEY ()", string2);
      
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\u0001\u0165", defaultDBTable0, 98, "M+#Q 2dMy6`5O");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Integer integer0 = new Integer(98);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("A `)!bH|=i", defaultDBTable0, dBDataType0, integer0, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      defaultDBColumn1.isIdentical(dBPrimaryKeyConstraint1);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("M+#Q 2dMy6`5O", defaultDBTable0, 57, "execute-ifexists");
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      String string3 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("\u0001\u0165, A `)!bH|=i, M+#Q 2dMy6`5O", string3);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 13);
      pipedWriter0.write("s,");
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      pipedReader0.markSupported();
      char[] charArray0 = new char[0];
      lineNumberReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(lineNumberReader0);
      streamTokenizer0.quoteChar(3209);
      SQLUtil.renderNumber(streamTokenizer0);
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(";");
      DBDataType dBDataType0 = DBDataType.getInstance(98, "Kd @%x\"!#]@e,U=^w ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(";", defaultDBTable0, dBDataType0);
      defaultDBTable0.addColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder();
      DBSchema dBSchema0 = new DBSchema(";");
      dBSchema0.getTable(">]#*Ca_s|bk;[x,k");
      DBPackage dBPackage0 = new DBPackage("^oa#X", dBSchema0);
      OrderedNameMap.createCaseSensitiveMap();
      String string0 = SQLUtil.normalize(">]#*Ca_s|bk;[x,k", true);
      assertEquals("> ] # * Ca_s | bk ; [ x, k", string0);
      
      String string1 = RawStore.TEST_REENCRYPT_CRASH_AFTER_COMMT;
      boolean boolean0 = SQLUtil.isProcedureCall("SELECT  NULL as TABLE_CAT , NULL as TABLE_SCHEM , ind.RDB$RELATION_NAME AS TABLE_NAME , ind.RDB$UNIQUE_FLAG AS NON_UNIQUE , NULL as INDEX_QUALIFIER , ind.RDB$INDEX_NAME as INDEX_NAME , NULL as ITYPE , ise.rdb$field_position+1 as ORDINAL_POSITION , ise.rdb$field_name as COLUMN_NAME , ind.RDB$INDEX_TYPE as ASC_OR_DESC , 0 as CARDINALITY , 0 as IPAGES , null as FILTER_CONDITION FROM   rdb$indices ind,   rdb$index_segments ise WHERE   ind.rdb$index_name = ise.rdb$index_name AND   UPPER(ind.rdb$relation_name) = ? ORDER BY 4, 6, 8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder("/++");
      StringBuilder stringBuilder1 = new StringBuilder();
      SQLUtil.normalize("/++", true);
      SQLUtil.removeComments("exec");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<No9");
      SQLUtil.addOptionalCondition(", outpu", stringBuilder0);
      assertEquals("/++ or , outpu", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Boolean boolean0 = SQLUtil.mutatesStructure("\"-\\K/'Y3O-,FO&|");
      assertFalse(boolean0);
      
      SQLUtil.parseColumnTypeAndSize("*/");
      String string0 = SQLUtil.normalize("'V3K+", true);
      assertEquals("'V3K+'", string0);
      
      Random.setNextRandom(90134);
      boolean boolean1 = SQLUtil.isDML("tpJz?V&M$LVyMzu");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DBDataType.getInstance(98, "Kd@%x\"!#]@e,U=^w ");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.normalize("execte-ifexists", true);
      String[] stringArray0 = new String[0];
      String string0 = LanguageConnectionContext.xidStr;
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("");
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container ", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "container ";
      stringArray0[1] = "";
      stringArray0[2] = "container ";
      stringArray0[3] = "container ";
      stringArray0[4] = "container ";
      stringArray0[5] = "";
      stringArray0[6] = "container ";
      stringArray0[7] = "container ";
      stringArray0[8] = "";
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(container , , container , container , container , , container , container , )", string1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SchemaDescriptor.IBM_SYSTEM_FUN_SCHEMA_NAME;
      StringBuilder stringBuilder0 = new StringBuilder("COLUMNPRIV");
      OrderedNameMap.createCaseSensitiveMap();
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0);
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil.mutatesStructure("SYSFUN");
      Random.setNextRandom(57);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = (-3307);
      String string0 = "6=1vmCb3[aG+~l";
      String[] stringArray0 = new String[8];
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(, , , , , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "o{y$aoufe7r4?~L";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "o{y$aoufe7r4?~L", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "o{y$aoufe7r4?~L");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      stringBuilder1.append(true);
      StringBuilder stringBuilder2 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuilder0.append(stringBuffer0);
      SQLUtil.substituteMarkers("mem:", "iw8Hs~A)zg", stringBuilder1);
      assertEquals("o{y$aoufe7r4?~LCONSTRAINT o{y$aoufe7r4?~L true", stringBuilder1.toString());
      
      SQLUtil.parseColumnTypeAndSize("o{y$aoufe7r4?~L");
      SQLUtil.normalize("o{y$aoufe7r4?~L", true);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec1);
      assertEquals("CONSTRAINT o{y$aoufe7r4?~L UNIQUE (o{y$aoufe7r4?~L, , )", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.isDML("F2l)\\)gmgrckn&S");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "F2l)\\)gmgrckn&S";
      stringArray0[1] = "F2l)\\)gmgrckn&S";
      stringArray0[3] = "F2l)\\)gmgrckn&S";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-51);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      String string0 = "deletecreate unique index";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("deletecreate unique index", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable1.getUniqueConstraint(stringArray0);
      DefaultDBTable defaultDBTable2 = new DefaultDBTable("F2l)\\)gmgrckn&S", (DBSchema) null);
      // Undeclared exception!
      try { 
        defaultDBTable2.getColumn("F2l)\\)gmgrckn&S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'F2l)\\)gmgrckn&S' not found in table 'F2l)\\)gmgrckn&S'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SQLUtil.normalize("uG5\"", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "uG5 \"\"";
      stringArray0[1] = "uG5\"";
      OrderedNameMap.createCaseSensitiveMap();
      String string0 = "w&JI*(7Y=R|v j";
      MockFileWriter mockFileWriter0 = new MockFileWriter("uG5\"", false);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      bufferedWriter0.append('3');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[8];
      OrderedNameMap<DBProcedure> orderedNameMap0 = new OrderedNameMap<DBProcedure>();
      SQLUtil.normalize("w&JI*(7Y=R|v j", false);
      OrderedNameMap<DBProcedure> orderedNameMap1 = new OrderedNameMap<DBProcedure>();
      String string0 = RawStore.TEST_REENCRYPT_CRASH_AFTER_COMMT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\u0001b\u0001d");
      SQLUtil.removeComments("w & JI * (7Y = R | v j");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.renderColumnNames(stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.insert(43, "w & JI * (7Y = R | v j");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 43
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("ALTER TABLE ", 122);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.normalize("callvnna^vj(k;|c57l\niz", true);
      StringBuilder stringBuilder0 = new StringBuilder((byte)91);
      stringBuilder0.append(true);
      StringBuilder stringBuilder1 = stringBuilder0.append("callvnna^vj(k;|c57l\niz");
      SQLUtil.addRequiredCondition("callvnna^vj(k;|c57l\niz", stringBuilder1);
      DataStore dataStore0 = new DataStore("callvnna^vj(k;|c57l\niz");
      VirtualFile virtualFile0 = new VirtualFile("fy=uZ", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil.normalize("w&JI*(7Y=R|v j", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("w & JI * (7Y = R | v j");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6=1vmCb3[aG+~l");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("6=1vmCb3[aG+~l", stringBuilder0);
      String string0 = SQLUtil.normalize("-ifExists", true);
      assertEquals("- ifExists", string0);
      
      DataStore dataStore0 = new DataStore("NCLOB");
      VirtualFile virtualFile0 = new VirtualFile("6=1vmCb3[aG+~l", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, true);
      mockPrintWriter0.println(false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "drop index";
      stringArray0[1] = "-ifExists";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "-ifExists", true, stringArray0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string1 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec1);
      assertEquals("CONSTRAINT -ifExists UNIQUE (drop index, -ifExists)", string1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "o{y$aoufe7r4?~L";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "o{y$aoufe7r4?~L");
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("o{y$aoufe7r4?~L = 'o{y$aoufe7r4?~L'", string0);
      
      DBSchema dBSchema0 = new DBSchema(", output: ");
      dBSchema0.getTable("alter table;");
      DBPackage dBPackage0 = new DBPackage("o{y$aoufe7r4?~L", dBSchema0);
      OrderedNameMap<DBProcedure> orderedNameMap0 = OrderedNameMap.createCaseSensitiveMap();
      dBPackage0.setProcedures(orderedNameMap0);
      DBProcedure dBProcedure0 = new DBProcedure("o{y$aoufe7r4?~L", dBPackage0);
      dBProcedure0.getOwner();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isProcedureCall(", output: ");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0);
      PushbackReader pushbackReader0 = new PushbackReader(lineNumberReader0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("o{y$aoufe7r4?~L = 'o{y$aoufe7r4?~L'");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "cLX mS_(oCYzHb*wL9", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("insertcreate unique index");
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (o{y$aoufe7r4?~L)", string1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/11_jdbacl");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      SQLUtil.normalize("w6!p\n.N", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Ka.>u");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Kd @%x\"!#]@e,U=^w ");
      String string0 = RawStore.TEST_REENCRYPT_CRASH_AFTER_COMMT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Kd @%x\"!#]@e,U=^w ", false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      JapaneseDate japaneseDate0 = MockJapaneseDate.now();
      dBPrimaryKeyConstraint0.equals(japaneseDate0);
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      String string1 = TypeId.XML_NAME;
      String string2 = TypeId.TIME_NAME;
      dBPrimaryKeyConstraint1.setTable(defaultDBTable0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string3 = LogToFile.DUMP_LOG_ONLY;
      Boolean boolean1 = SQLUtil.mutatesStructure("callexec");
      assertFalse(boolean1);
      
      String string4 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint1);
      assertEquals("null.Kd @%x\"!#]@e,U=^w ", string4);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      boolean boolean1 = FileUtil.fsNormalizesPosixSeparator;
      defaultDBTable0.getIndex(".");
      DBDataType dBDataType0 = DBDataType.getInstance(548, ".");
      Integer integer0 = new Integer(484);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setOwner(defaultDBTable0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      charArray0[4] = 'x';
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = TypeId.XML_NAME;
      // Undeclared exception!
      try { 
        StandardException.getSQLStateFromIdentifier("XML");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(";");
      DBDataType dBDataType0 = DBDataType.getInstance(102, "Kd @%x\"!#]@e,U=^w ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(";", defaultDBTable0, dBDataType0);
      defaultDBTable0.addColumn(defaultDBColumn0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";";
      stringArray0[1] = ";";
      stringArray0[2] = "Kd @%x\"!#]@e,U=^w ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Kd @%x\"!#]@e,U=^w ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBDataType0.isAlpha();
      dBForeignKeyConstraint0.setName(">gj");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      DataStore dataStore0 = new DataStore("KD @%X\"!#]@E,U=^W ");
      VirtualFile virtualFile0 = new VirtualFile(">gj", dataStore0);
      VirtualFile virtualFile1 = new VirtualFile("fzR'[~`*I", dataStore0);
      OutputStream outputStream0 = virtualFile1.getOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Character character0 = Character.valueOf('c');
      Character.isAlphabetic(3072);
      Character.isIdeographic(90037);
      Character.isIdeographic((-102181386));
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'c'", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "select into";
      stringArray0[1] = "select into";
      stringArray0[2] = "select into";
      stringArray0[3] = "'c'";
      stringArray0[4] = "'c'";
      stringArray0[5] = "'c'";
      String string1 = SQLUtil.join("select into", "'c'", stringArray0, "select into", "'c'", stringArray0);
      assertEquals("select into join select into as 'c' on 'c'.select into = 'c'.select into and 'c'.select into = 'c'.select into and 'c'.select into = 'c'.select into and 'c'.'c' = 'c'.'c' and 'c'.'c' = 'c'.'c' and 'c'.'c' = 'c'.'c'", string1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OrderedNameMap.createCaseSensitiveMap();
      SQLUtil.normalize("w&JI*(7Y=R|v j", false);
      String string0 = RawStore.TEST_REENCRYPT_CRASH_AFTER_COMMT;
      SQLUtil.isProcedureCall("qKF4");
      SQLUtil.mutatesDataOrStructure("alter sessionalter tablephenf*[`1&5g r1u");
      StringBuilder stringBuilder0 = new StringBuilder(18);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("LATIN4", stringBuilder0);
      assertSame(stringBuilder0, stringBuilder1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[8];
      OrderedNameMap.createCaseSensitiveMap();
      SQLUtil.normalize("w&JI*(7Y=R|v j", false);
      OrderedNameMap.createCaseSensitiveMap();
      String string0 = RawStore.TEST_REENCRYPT_CRASH_AFTER_COMMT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Fv2H");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      defaultDBTable0.getPrimaryKeyConstraint();
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0);
      PushbackReader pushbackReader0 = new PushbackReader(mockFileReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(mockFileReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(lineNumberReader0);
      streamTokenizer1.wordChars((-4), 1214);
      SQLUtil.renderNumber(streamTokenizer1);
      SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-4));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6=1vmCb3[aG+~l");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("6=1vmCb3[aG+~l", stringBuilder0);
      SQLUtil.normalize("-ifExists", true);
      SQLUtil.removeComments("<No9");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "<No9", true, stringArray0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      FKInfo fKInfo0 = new FKInfo();
      UUID uUID0 = fKInfo0.refUUID;
      NameSpec nameSpec0 = NameSpec.NEVER;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("<No9", true, (String) null, "- ifExists");
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("-ifExists", true, defaultDBTable0, (String[]) null, defaultDBTable0, stringArray0);
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getDeleteRule());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      OrderedNameMap.createCaseSensitiveMap();
      defaultDBTable0.getUniqueConstraint(stringArray0);
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      boolean boolean1 = FileUtil.fsNormalizesPosixSeparator;
      defaultDBTable0.getIndex(stringArray0[0]);
      DBDataType dBDataType0 = DBDataType.getInstance(7, " expected key: ");
      Integer integer0 = new Integer((-91106015));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("H^", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      StringWriter stringWriter0 = new StringWriter();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(".", false, defaultDBTable0, "t");
      defaultDBTable0.addCheckConstraint(dBCheckConstraint0);
      StringWriter stringWriter1 = new StringWriter(65);
      MockFile mockFile0 = new MockFile(".", "H^");
      File file0 = mockFile0.getCanonicalFile();
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      mockPrintWriter0.write("\"@Tq`?FV=V68`zE(8_");
      PrintWriter printWriter0 = mockPrintWriter0.printf(" NULL", (Object[]) stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertEquals(125L, file0.length());
      
      String string0 = SQLUtil.innerJoin("m#Ai@(k#Sp6& 0Pv", stringArray0, "insert", "m#Ai@(k#Sp6& 0Pv", stringArray0);
      assertEquals("insert as m#Ai@(k#Sp6& 0Pv on m#Ai@(k#Sp6& 0Pv.null = m#Ai@(k#Sp6& 0Pv.null and m#Ai@(k#Sp6& 0Pv.null = m#Ai@(k#Sp6& 0Pv.null and m#Ai@(k#Sp6& 0Pv.null = m#Ai@(k#Sp6& 0Pv.null and m#Ai@(k#Sp6& 0Pv.null = m#Ai@(k#Sp6& 0Pv.null and m#Ai@(k#Sp6& 0Pv.null = m#Ai@(k#Sp6& 0Pv.null", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLUtil.normalize("*/", false);
      FBClob fBClob0 = new FBClob();
      try { 
        fBClob0.length();
        fail("Expecting exception: FBDriverNotCapableException");
      
      } catch(FBDriverNotCapableException e) {
         //
         // Not yet implemented.
         //
         verifyException("org.firebirdsql.jdbc.FBClob", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(98, "Kd @%x\"!#]@e,U=^w ");
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = TypeCompilerFactory.MODULE;
      String string1 = RawStore.TEST_REENCRYPT_CRASH_AFTER_COMMT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "\u0001\u0165", false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      dBPrimaryKeyConstraint1.setName("jwbDZL]<Pi@lA ");
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0);
      PushbackReader pushbackReader0 = new PushbackReader(lineNumberReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pushbackReader0);
      stringBuilder0.append(98);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pushbackReader0);
      SQLUtil.renderNumber(streamTokenizer1);
      SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      defaultDBTable0.getPrimaryKeyConstraint();
      String string2 = Optimizer.JOIN_ORDER_OPTIMIZATION;
      SQLUtil.removeComments("G$((q&w,sTRI\"L^^R");
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("unique constraint jwbDZL]<Pi@lA ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.sql.compile.GrantNode", defaultDBTable1, dBDataType0, (Integer) (-4));
      arrayList0.add((DBColumn) defaultDBColumn0);
      arrayList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "select");
      SQLUtil.parseColumnTypeAndSize("\u0001\u00D0");
      SQLUtil.mutatesDataOrStructure("select");
      SQLUtil.isQuery("lO?_}bzvy");
      boolean boolean0 = FBBlob.SEGMENTED;
      DBSchema dBSchema0 = new DBSchema("\u0001\u00D0");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\u0001\u00D0", dBSchema0);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("execvnna^vj(k;|c57l\niz", true, defaultDBTable0, "#x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      SQLUtil.isQuery("select");
      SQLUtil.normalize("select", true);
      boolean boolean1 = FileUtil.fsNormalizesPosixSeparator;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select");
      defaultDBTable0.getIndex("clearBatch");
      DBDataType.getInstance(49, "select");
      Integer integer0 = new Integer(39);
      Integer.divideUnsigned(39, 39);
      Integer integer1 = RawTransaction.ABORT;
      String string0 = TypeId.XML_NAME;
      SQLUtil.removeComments("+l\"70%i'");
      VersionNumber.valueOf("+l\"70%i'");
      StringBuilder stringBuilder0 = new StringBuilder(1688);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DBDataType.getInstance(131, "Kd @%x\"!#]@e,U=^w ");
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = TypeCompilerFactory.MODULE;
      String string1 = RawStore.TEST_REENCRYPT_CRASH_AFTER_COMMT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "\u0001\u0165", false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      dBPrimaryKeyConstraint1.setName((String) null);
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0);
      PushbackReader pushbackReader0 = new PushbackReader(mockFileReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(mockFileReader0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("org.apache.derby.iapi.sql.compile.TypeCompilerFactory", stringBuilder0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pushbackReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(pushbackReader0);
      streamTokenizer1.whitespaceChars((-54552646), (-14));
      streamTokenizer2.wordChars(1344, (-4));
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.typeAndName(dBPrimaryKeyConstraint1);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      String string2 = SQLUtil.constraintName(dBPrimaryKeyConstraint1);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint1, stringBuilder1);
      stringBuilder0.append(520);
      assertEquals("org.apache.derby.iapi.sql.compile.TypeCompilerFactory520", stringBuilder0.toString());
      
      GenerationClauseNode generationClauseNode0 = new GenerationClauseNode();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.mutatesDataOrStructure("B45+e.;7qR86pQ");
      SQLUtil.removeComments("org.apache.derby.iapi.sql.compile.TypeCompilerFactory");
      String string3 = SQLUtil.renderColumnListWithTableName("PRIMARY KEY ", stringArray0);
      assertTrue(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Boolean boolean0 = new Boolean("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Boolean boolean1 = SQLUtil.mutatesStructure("exec");
      assertFalse(boolean1);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      DBSchema dBSchema0 = new DBSchema("qtn", dBCatalog0);
      dBSchema0.getTable("/Zd*$qb3");
      DBDataType dBDataType0 = DBDataType.getInstance(590, "|=iFLj`");
      GDSType.getType("alter table");
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      FBManagedConnectionFactory fBManagedConnectionFactory1 = fBManagedConnectionFactory0.canonicalize();
      Integer integer0 = fBManagedConnectionFactory1.getTransactionIsolation();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" |=IFLJ`(2,2) NULL", string0);
      
      String string1 = SQLUtil.normalize("hM=u", false);
      assertEquals("hM = u", string1);
      
      Boolean boolean2 = new Boolean("hM=u");
      assertTrue(boolean2.equals((Object)boolean1));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DBDataType.getInstance(98, "Kd @%x\"!#]@e,U=^w ");
      StringBuilder stringBuilder0 = new StringBuilder();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Kd @%x\"!#]@e,U=^w ");
      SQLUtil.normalize("execte-ifexists", false);
      String string0 = RawStore.TEST_REENCRYPT_CRASH_AFTER_COMMT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Kd @%x\"!#]@e,U=^w ", false, stringArray0);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFileWriter mockFileWriter0 = new MockFileWriter("execte - ifexists", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Object object0 = new Object();
      mockPrintWriter0.println(object0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("/Q&3w16", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      defaultDBTable0.getPrimaryKeyConstraint();
      String string1 = TypeId.XML_NAME;
      Character.toString('x');
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("execte - ifexists", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      char[] charArray0 = new char[1];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("AkGL`5N", defaultDBTable0, 98, "/Q&3w16");
      charArray0[0] = '-';
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("+l\"70%i'");
      assertNull(boolean0);
      
      boolean boolean1 = SQLUtil.isQuery("select");
      boolean boolean2 = SQLUtil.isProcedureCall("+l\"70%i'");
      assertFalse(boolean2 == boolean1);
      
      DBSchema dBSchema0 = new DBSchema("+l\"70%i'");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lO?_}bzvy";
      stringArray0[1] = "lO?_}bzvy";
      stringArray0[2] = "select";
      stringArray0[3] = "select";
      stringArray0[4] = "executevnna^vj(k;|c57l\niz";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("lO?_}bzvy = 'lO?_}bzvy' AND lO?_}bzvy = 'lO?_}bzvy' AND select = 'select' AND select = 'select' AND executevnna^vj(k;|c57l\niz = 'executevnna^vj(k;|c57l\niz'", string0);
      
      dBSchema0.setDoc("callvnna^vj(k;|c57l\niz");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("lO?_}bzvy");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("lO?_}bzvy", true, defaultDBTable0, "select");
      String string1 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT lO?_}bzvy ", string1);
      
      SQLUtil.isDML("callvnna^vj(k;|c57l\niz");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select", defaultDBTable0, 1493, "drop materialized view");
      defaultDBColumn0.setNullable(false);
      String string2 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("select DROP MATERIALIZED VIEW NOT NULL", string2);
      
      String string3 = LanguageConnectionContext.xidStr;
      boolean boolean3 = SQLUtil.isDML("callvnna^vj(k;|c57l\niz");
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[5];
      defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = AbstractJavaGDSImpl.PURE_JAVA_TYPE_NAME;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("drop table");
      DBDataType dBDataType0 = DBDataType.getInstance(1313, "{.");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.ABORT;
      DBDataType.getInstance(1313, "PURE_JAVA");
      Integer.getInteger("", 1313);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("{.", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      defaultDBColumn0.setDefaultValue("3");
      StringWriter stringWriter0 = new StringWriter(1313);
      Integer.getInteger("{.");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "PURE_JAVA", true, stringArray0);
      String string1 = Page.DIAG_MINROWSIZE;
      String string2 = SQLUtil.join("SYSCS_GET_XPLAIN_MODE", "minRowSize", stringArray0, "", "", stringArray0);
      assertEquals("SYSCS_GET_XPLAIN_MODE join  as  on minRowSize.null = .null and minRowSize.null = .null and minRowSize.null = .null and minRowSize.null = .null and minRowSize.null = .null", string2);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      boolean boolean0 = SQLUtil.isDDL("3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[5];
      defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = AbstractJavaGDSImpl.PURE_JAVA_TYPE_NAME;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("PT%fGRnzct=YI;5");
      DBDataType dBDataType0 = DBDataType.getInstance(1313, "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.ABORT;
      DBDataType dBDataType1 = DBDataType.getInstance(1313, "{.");
      Integer.getInteger("{.", 1313);
      Integer integer2 = new Integer(1313);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer2);
      defaultDBColumn0.getForeignKeyConstraint();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop table", defaultDBTable0, dBDataType1);
      defaultDBColumn1.setDefaultValue("");
      StringWriter stringWriter0 = new StringWriter(472);
      Integer.getInteger("{.");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "3", false, stringArray0);
      String string1 = PermDescriptor.SEQUENCE_TYPE;
      String string2 = SQLUtil.join("PT%fGRnzct=YI;5", "_/hS4ee", stringArray0, "10.4", "3", stringArray0);
      assertEquals("PT%fGRnzct=YI;5 join 10.4 as 3 on _/hS4ee.null = 3.null and _/hS4ee.null = 3.null and _/hS4ee.null = 3.null and _/hS4ee.null = 3.null and _/hS4ee.null = 3.null", string2);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      boolean boolean0 = SQLUtil.isDDL("?,e B+Q]*+*KF9x?5,V");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 13);
      pipedWriter0.write("s,");
      LineNumberReader lineNumberReader0 = new LineNumberReader(pipedReader0);
      pipedReader0.markSupported();
      char[] charArray0 = new char[0];
      lineNumberReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(lineNumberReader0);
      streamTokenizer0.nval = (-280.745635396);
      streamTokenizer0.quoteChar((-4));
      SQLUtil.renderNumber(streamTokenizer0);
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }
}
