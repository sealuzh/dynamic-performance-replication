/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 06:34:13 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Button;
import java.awt.Canvas;
import java.awt.CheckboxGroup;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.MenuItem;
import java.awt.ScrollPane;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.InputMethodListener;
import java.awt.event.MouseWheelListener;
import java.beans.EventSetDescriptor;
import java.beans.MethodDescriptor;
import java.io.IOException;
import java.lang.reflect.Method;
import java.text.AttributedCharacterIterator;
import java.util.Enumeration;
import java.util.Locale;
import javax.swing.DebugGraphics;
import javax.swing.InputMap;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JSpinner;
import javax.swing.KeyStroke;
import javax.swing.SpinnerListModel;
import javax.swing.plaf.metal.MetalSplitPaneUI;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.associations.FilteredAssociator;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.bayes.BayesNet;
import weka.core.BinarySparseInstance;
import weka.core.CheckOptionHandler;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ManhattanDistance;
import weka.core.MinkowskiDistance;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.CSVLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.tokenizers.WordTokenizer;
import weka.estimators.PoissonEstimator;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.supervised.attribute.ClassOrder;
import weka.filters.supervised.instance.Resample;
import weka.filters.supervised.instance.StratifiedRemoveFolds;
import weka.filters.unsupervised.attribute.Add;
import weka.gui.Logger;
import weka.gui.SysErrLog;
import weka.gui.beans.Appender;
import weka.gui.beans.Associator;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.ClassifierPerformanceEvaluator;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CostBenefitAnalysis;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataSourceListener;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.ImageSaver;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceStreamToBatchMaker;
import weka.gui.beans.KnowledgeFlowApp;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.SerializedModelSaver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetListener;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetListener;
import weka.gui.beans.TrainingSetMaker;
import weka.gui.explorer.ClassifierErrorsPlotInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("LbMRON\"!@Iv8-b7-", "LbMRON\"!@Iv8-b7-");
      filter0.stop();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.addTrainingSetListener((TrainingSetListener) null);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      boolean boolean0 = filter0.isBusy();
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      Logger logger0 = classifierPerformanceEvaluator0.m_logger;
      filter0.setLog((Logger) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      boolean boolean0 = filter0.eventGeneratable("jwXP<%(M");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      Resample resample0 = new Resample();
      filter0.setWrappedAlgorithm(resample0);
      assertEquals("Resample", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      filter0.addTrainingSetListener((TrainingSetListener) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      BayesNet bayesNet0 = new BayesNet();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      Random.setNextRandom(271);
      filter0.useDefaultVisual();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener1);
      assertSame(hierarchyBoundsListener2, hierarchyBoundsListener0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.removeDataSourceListener(classAssigner0);
      filter0.useDefaultVisual();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      Locale locale0 = Locale.CANADA_FRENCH;
      saver0.revalidate();
      JComponent.setDefaultLocale(locale0);
      filter0.addTrainingSetListener(saver0);
      filter0.removeTrainingSetListener(saver0);
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      BeanVisual beanVisual0 = serializedModelSaver0.m_visual;
      FlowByExpression flowByExpression0 = new FlowByExpression();
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      weka.filters.Filter filter1 = filteredAssociator0.getFilter();
      filter0.setFilter(filter1);
      FlowByExpression flowByExpression1 = new FlowByExpression();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Instances instances0 = predictionAppender0.m_format;
      TestSetEvent testSetEvent0 = new TestSetEvent(flowByExpression0, (Instances) null, 1, (-3801), 15000, 3);
      assertEquals((-3801), testSetEvent0.getMaxRunNumber());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.isBusy();
      AllFilter allFilter0 = new AllFilter();
      filter0.setFilter(allFilter0);
      Sorter sorter0 = new Sorter();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(sorter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.Sorter : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      TextViewer textViewer0 = new TextViewer();
      textViewer0.getVisual();
      filter0.setVisual((BeanVisual) null);
      AllFilter allFilter0 = (AllFilter)filter0.getWrappedAlgorithm();
      assertFalse(allFilter0.isOutputFormatDefined());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.removeTestSetListener(crossValidationFoldMaker0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getComponentPopupMenu();
      filter0.notifyInstanceListeners((InstanceEvent) null);
      filter0.addDataSourceListener((DataSourceListener) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.performRequest("rus");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rus not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Filter filter0 = new Filter();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      filter0.removeMouseWheelListener((MouseWheelListener) null);
      filter0.getInputVerifier();
      filter0.setInputVerifier((InputVerifier) null);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      filter0.paint(debugGraphics0);
      filter0.enumerateRequests();
      filter0.enumerateRequests();
      TextViewer textViewer0 = new TextViewer();
      textViewer0.requestFocus();
      filter0.addDataSourceListener(textViewer0);
      Class<ManhattanDistance> class0 = ManhattanDistance.class;
      EventSetDescriptor eventSetDescriptor0 = new EventSetDescriptor((String) null, class0, (MethodDescriptor[]) null, (Method) null, (Method) null);
      // Undeclared exception!
      try { 
        filter0.connectionAllowed(eventSetDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      filter0.removeHierarchyListener((HierarchyListener) null);
      weka.filters.Filter filter1 = filter0.getFilter();
      Filter filter2 = new Filter();
      boolean boolean0 = filter2.eventGeneratable("Stop");
      assertFalse(boolean0);
      
      Filter filter3 = new Filter();
      Enumeration enumeration0 = filter3.enumerateRequests();
      filter3.addTestSetListener((TestSetListener) null);
      filter0.disconnectionNotification("configuration", filter1);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter2.addConfigurationListener(configurationListener0);
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(enumeration0, (Instances) null, 0, (-634));
      TrainingSetEvent trainingSetEvent1 = new TrainingSetEvent(stratifiedRemoveFolds0, (Instances) null, (-1734), 2400);
      filter2.acceptTrainingSet(trainingSetEvent1);
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter2.addDataSourceListener(classAssigner0);
      DataSetEvent dataSetEvent0 = new DataSetEvent(trainingSetEvent1, (Instances) null);
      filter2.acceptDataSet(dataSetEvent0);
      filter3.acceptTrainingSet(trainingSetEvent1);
      assertEquals("AllFilter", filter3.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      filter0.removeHierarchyListener((HierarchyListener) null);
      filter0.getFilter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      KeyStroke.getKeyStroke(0, 0);
      filter0.performRequest("Stop");
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      MenuItem menuItem0 = null;
      try {
        menuItem0 = new MenuItem();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      filter0.disconnectionNotification(" tstopping.", "<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>");
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      BeanVisual beanVisual0 = new BeanVisual("model", " tstopping.", "model");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "O%");
      filter0.acceptInstance(instanceEvent0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestSetEvent testSetEvent0 = new TestSetEvent("NB{L:mqIM9FsBs*&+", instances0, 3, 50000, 2, 1);
      filter0.acceptTestSet(testSetEvent0);
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      Locale locale0 = Locale.PRC;
      filter0.setLocale(locale0);
      checkOptionHandler0.setDebug(true);
      checkOptionHandler0.checkDefaultOptions();
      filter0.connectionNotification("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", checkOptionHandler0);
      boolean boolean0 = filter0.connectionAllowed("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>");
      assertFalse(boolean0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      AttributeSelection attributeSelection0 = new AttributeSelection();
      filter0.connectionNotification("model", attributeSelection0);
      TestInstances testInstances0 = new TestInstances();
      Appender appender0 = new Appender();
      appender0.requestFocusInWindow();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "model");
      filter0.eventGeneratable("model");
      SerializedModelSaver serializedModelSaver1 = new SerializedModelSaver();
      Logger logger0 = serializedModelSaver0.m_logger;
      filter0.setCustomName("model");
      assertEquals("model", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      Sorter sorter0 = new Sorter();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      filter0.globalInfo();
      filter0.eventGeneratable("configuration");
      KeyStroke.getKeyStroke("Stop");
      Appender appender0 = new Appender();
      appender0.setVisible(true);
      InstanceEvent instanceEvent0 = appender0.m_ie;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      appender0.getInputMap();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Stop");
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      filter0.useDefaultVisual();
      AllFilter allFilter0 = new AllFilter();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      Button button0 = null;
      try {
        button0 = new Button("configuration");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      weka.filters.Filter filter1 = filter0.getFilter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter1, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      assertFalse(filter1.isFirstBatchDone());
      
      filter0.addDataSourceListener((DataSourceListener) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.updateUI();
      filter0.addTestSetListener(flowByExpression0);
      flowByExpression0.transferFocusUpCycle();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      filter0.connectionNotification(".bsi", attributeSummarizer0);
      filter0.connectionNotification(".bsi", flowByExpression0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AllFilter allFilter0 = new AllFilter();
      Filter filter0 = new Filter();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      TestInstances testInstances0 = new TestInstances();
      filter0.firePropertyChange(" ", 'D', 'D');
      SysErrLog sysErrLog0 = new SysErrLog();
      filter0.setLog(sysErrLog0);
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.getConnectedFormat();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MetalSplitPaneUI metalSplitPaneUI0 = new MetalSplitPaneUI();
      JLabel jLabel0 = new JLabel();
      PoissonEstimator poissonEstimator0 = new PoissonEstimator();
      testInstances0.generate();
      testInstances0.getRelationalClassFormat();
      FlowByExpression flowByExpression1 = new FlowByExpression();
      CheckboxGroup checkboxGroup0 = new CheckboxGroup();
      InstanceEvent instanceEvent0 = flowByExpression1.m_ie;
      filter0.acceptInstance(instanceEvent0);
      StyleContext styleContext0 = new StyleContext();
      boolean boolean0 = costBenefitAnalysis0.m_framePoppedUp;
      filter0.connectionAllowed("@data");
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      TestSetEvent testSetEvent0 = null;
      try {
        testSetEvent0 = new TestSetEvent((Object) null, (Instances) null, (-2), (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale locale1 = Locale.CANADA_FRENCH;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Canvas canvas0 = new Canvas();
      Filter filter0 = new Filter();
      TestInstances testInstances0 = new TestInstances();
      boolean boolean0 = filter0.eventGeneratable(" ");
      assertFalse(boolean0);
      
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      ClassAssigner classAssigner0 = new ClassAssigner();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.addDataSourceListener(classAssigner0);
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance(instances0);
      DataSetEvent dataSetEvent0 = new DataSetEvent(flowByExpression0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Filter filter0 = new Filter();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      filter0.addInputMethodListener((InputMethodListener) null);
      Add add0 = new Add();
      filter0.setFilter(add0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      InstanceEvent instanceEvent0 = substringReplacer0.m_ie;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      instanceEvent0.setInstance(sparseInstance1);
      filter0.acceptInstance(instanceEvent0);
      Appender appender0 = new Appender();
      filter0.removeTrainingSetListener(appender0);
      assertEquals("Add", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      Locale locale0 = Locale.TAIWAN;
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      boolean boolean0 = filter0.eventGeneratable("fcbnDFD");
      assertFalse(boolean0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Appender appender0 = new Appender();
      appender0.setVisible(false);
      InstanceEvent instanceEvent0 = appender0.m_ie;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      appender0.getInputMap();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getDirectory();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.getX();
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.addDataSourceListener(trainingSetMaker0);
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, instances0);
      Associator associator0 = new Associator();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(associator0, instances0, 1993, 1993);
      filter0.addTestSetListener(saver0);
      TestSetEvent testSetEvent0 = new TestSetEvent(serializedModelSaver0, instances0, 0, 0);
      filter0.acceptTestSet(testSetEvent0);
      ImageSaver imageSaver0 = new ImageSaver();
      Logger logger0 = imageSaver0.m_logger;
      filter0.setLog((Logger) null);
      filter0.getFilter();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.CANADA_FRENCH;
      Canvas canvas0 = new Canvas();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      canvas0.addInputMethodListener((InputMethodListener) null);
      filter0.connectionNotification("fcbnDFD", canvas0);
      TestInstances testInstances0 = new TestInstances();
      boolean boolean0 = filter0.eventGeneratable("fcbnDFD");
      assertTrue(boolean0);
      
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      ClassAssigner classAssigner0 = new ClassAssigner();
      flowByExpression0.getBorder();
      filter0.addDataSourceListener(trainingSetMaker0);
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, instances0);
      DataSetEvent dataSetEvent1 = new DataSetEvent(dataSetEvent0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      ClassOrder classOrder0 = new ClassOrder();
      ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances();
      testInstances0.getRelationalClassFormat();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(flowByExpression0, instances0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.enumerateRequests();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AllFilter allFilter0 = new AllFilter();
      Filter filter0 = new Filter();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      MultiFilter multiFilter0 = new MultiFilter();
      Appender appender0 = new Appender();
      multiFilter0.getOptions();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      AWTKeyStroke.getAWTKeyStroke((-1974), (-1974));
      filter0.setFilter(multiFilter0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      filter0.getColorModel();
      instanceEvent0.setStatus(16);
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.acceptInstance(instanceEvent0);
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      filter0.addTrainingSetListener(appender0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AllFilter allFilter0 = new AllFilter();
      Filter filter0 = new Filter();
      Filter filter1 = new Filter();
      Filter filter2 = new Filter();
      Appender appender0 = new Appender();
      TestInstances testInstances0 = new TestInstances();
      SysErrLog sysErrLog0 = new SysErrLog();
      Filter filter3 = new Filter();
      filter3.eventGeneratable(" ");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/9_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      Appender appender1 = new Appender();
      Sorter sorter0 = new Sorter();
      sorter0.getConnectedFormat();
      Filter filter4 = new Filter();
      Saver saver0 = new Saver();
      TestSetEvent testSetEvent0 = new TestSetEvent(saver0, (Instances) null, (-1), (-28));
      filter1.acceptTestSet(testSetEvent0);
      testInstances0.generate(".arff");
      Filter filter5 = new Filter();
      MetalSplitPaneUI metalSplitPaneUI0 = new MetalSplitPaneUI();
      Insets insets0 = filter1.getInsets();
      filter5.getInsets(insets0);
      Filter filter6 = new Filter();
      Filter filter7 = new Filter();
      ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances();
      testInstances0.getRelationalClassFormat();
      Filter filter8 = new Filter();
      filter6.addTrainingSetListener(appender0);
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      Filter filter9 = new Filter();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(mockHijrahDate0, (Instances) null);
      filter8.acceptTrainingSet(trainingSetEvent0);
      filter3.enumerateRequests();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter1.addConfigurationListener(configurationListener0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      Filter filter1 = new Filter();
      Appender appender0 = new Appender();
      SysErrLog sysErrLog0 = new SysErrLog();
      sysErrLog0.logMessage("@data");
      filter1.setLog(sysErrLog0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      Filter filter2 = new Filter();
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      FlowByExpression flowByExpression1 = new FlowByExpression();
      ClassAssigner classAssigner0 = new ClassAssigner();
      FlowByExpression flowByExpression2 = new FlowByExpression();
      flowByExpression2.getBorder();
      filter0.addDataSourceListener(trainingSetMaker0);
      ClassOrder classOrder0 = new ClassOrder();
      filter1.firePropertyChange("1^S3e1y0K2[", 1205, 2);
      ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter1.acceptInstance(instanceEvent0);
      filter0.addInstanceListener(filter2);
      filter0.setMinimumSize((Dimension) null);
      filter1.removeInstanceListener(flowByExpression0);
      filter0.getFilter();
      filter2.enumerateRequests();
      filter1.addDataSourceListener(flowByExpression1);
      filter0.notifyInstanceListeners(instanceEvent0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AllFilter allFilter0 = new AllFilter();
      Filter filter0 = new Filter();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      MultiFilter multiFilter0 = new MultiFilter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.setFilter(multiFilter0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      JSpinner jSpinner0 = new JSpinner();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instanceEvent0.setStatus((-7));
      instanceEvent0.setStructure(instances0);
      filter0.acceptInstance(instanceEvent0);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      filter0.getWrappedAlgorithm();
      MockRandom mockRandom0 = new MockRandom(1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-7);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Filter filter0 = new Filter();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      MultiFilter multiFilter0 = new MultiFilter();
      Appender appender0 = new Appender();
      multiFilter0.getOptions();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      AWTKeyStroke.getAWTKeyStroke((-1974), (-1974));
      filter0.setFilter(multiFilter0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      filter0.getColorModel();
      instanceEvent0.setStatus(16);
      JLabel jLabel0 = new JLabel();
      TestInstances testInstances0 = new TestInstances();
      filter0.eventGeneratable(" ");
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getStructure();
      ClassAssigner classAssigner0 = new ClassAssigner();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.addDataSourceListener(appender0);
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance(instances0);
      DataSetEvent dataSetEvent0 = new DataSetEvent(textDirectoryLoader0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      SerializedModelSaver serializedModelSaver1 = new SerializedModelSaver();
      serializedModelSaver1.getHierarchyBoundsListeners();
      InputMap inputMap0 = new InputMap();
      // Undeclared exception!
      try { 
        serializedModelSaver1.setInputMap(16, inputMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition must be one of JComponent.WHEN_IN_FOCUSED_WINDOW, JComponent.WHEN_FOCUSED or JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AllFilter allFilter0 = new AllFilter();
      Filter filter0 = new Filter();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("model");
      FlowByExpression flowByExpression0 = new FlowByExpression();
      DataSetEvent dataSetEvent0 = new DataSetEvent(instances0, instances0);
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      Logger logger0 = classifierPerformanceEvaluator0.m_logger;
      filter0.setLog((Logger) null);
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance();
      filter0.acceptDataSet(dataSetEvent0);
      SpinnerListModel spinnerListModel0 = new SpinnerListModel(testInstances0.DEFAULT_WORDS);
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator1 = new ClassifierPerformanceEvaluator();
      TestSetEvent testSetEvent0 = new TestSetEvent(spinnerListModel0, instances0, 976, (-905));
      filter0.acceptTestSet(testSetEvent0);
      String string0 = KnowledgeFlowApp.FILE_EXTENSION;
      filter0.stop();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      TestInstances testInstances0 = new TestInstances();
      Appender appender0 = new Appender();
      MultiFilter multiFilter0 = new MultiFilter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      multiFilter0.getOptions();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      AWTKeyStroke.getAWTKeyStroke((-3677), (-2));
      FilteredAssociator filteredAssociator0 = new FilteredAssociator();
      MultiFilter multiFilter1 = new MultiFilter();
      filter0.setFilter(multiFilter1);
      filter0.getColorModel();
      instanceEvent0.setStatus(15);
      InstanceEvent instanceEvent1 = appender0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent1);
      filter0.acceptInstance(instanceEvent0);
      Filter filter1 = new Filter();
      Filter filter2 = new Filter();
      Filter filter3 = new Filter();
      filter0.addInstanceListener(filter2);
      filter0.removeTrainingSetListener(filter2);
      filter1.requestFocus();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StyleContext.getDefaultStyleContext();
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      Instances instances0 = attributeSummarizer0.m_visualizeDataSet;
      filter1.acceptDataSet((DataSetEvent) null);
      Filter filter4 = new Filter();
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
      DataSetEvent dataSetEvent0 = new DataSetEvent(attributedCharacterIterator_Attribute0, (Instances) null);
      filter1.acceptDataSet((DataSetEvent) null);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Filter filter0 = new Filter();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      MultiFilter multiFilter0 = new MultiFilter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      KeyStroke.getKeyStroke(2502, 1279);
      filter0.setFilter(multiFilter0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      JSpinner jSpinner0 = new JSpinner();
      InstanceEvent instanceEvent1 = substringLabeler0.m_ie;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instanceEvent1.setStatus(2);
      instanceEvent0.setStructure(instances0);
      filter0.acceptInstance(instanceEvent1);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      try { 
        matlabLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // MatlabLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.MatlabLoader", e);
      }
  }
}
