/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 23 03:06:16 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Properties;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ClassCache;
import weka.core.ClassDiscovery;
import weka.core.FindWithCapabilities;
import weka.core.Instances;
import weka.core.ManhattanDistance;
import weka.core.SingleIndex;
import weka.core.SparseInstance;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{*8Y:";
      stringArray0[1] = "-relational-class";
      stringArray0[2] = "CpJV4(LD~H/";
      stringArray0[3] = "CY";
      stringArray0[4] = "?f~pZ .>)*A$>T=:\"3";
      stringArray0[5] = "Remaining options...";
      findWithCapabilities0.find();
      stringArray0[6] = "^YRT?9b:{*]uKY*;k";
      stringArray0[7] = "-relational-class";
      stringArray0[8] = "-no-class";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "GJm";
      stringArray0[1] = "|iM6X)";
      stringArray0[2] = "+W!";
      stringArray0[3] = "-relational-class";
      stringArray0[4] = "9K[vY<pYY";
      stringArray0[5] = "c(] uR6W-d";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.m_Capabilities = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.enableAllAttributes();
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      assertNull(capabilities1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ">FbeujOs-w&0PMX Op0");
      findWithCapabilities0.setFilename(">FbeujOs-w&0PMX Op0");
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.m_Filename = "\"position\" is numeric: ";
      findWithCapabilities0.setClassIndex("-1");
      assertEquals("\"position\" is numeric: ", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Z";
      stringArray0[1] = "-binary-class";
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      SingleIndex singleIndex0 = new SingleIndex("weka.core.ClassCache$ClassFileFilter");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      vector0.trimToSize();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.find();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      Capabilities capabilities2 = capabilities1.getOtherCapabilities();
      capabilities2.assign(capabilities0);
      capabilities1.getOtherCapabilities();
      capabilities2.disableAll();
      capabilities1.getOtherCapabilities();
      capabilities2.m_Test = false;
      Capabilities capabilities3 = capabilities2.getClassCapabilities();
      capabilities2.m_Test = false;
      HashSet<Capabilities.Capability> hashSet0 = capabilities2.m_Dependencies;
      capabilities2.m_Dependencies = hashSet0;
      capabilities3.or(capabilities0);
      capabilities3.assign(capabilities1);
      singleIndex0.setSingleIndex("weka/core/Capabilities.props");
      findWithCapabilities0.setCapabilities(capabilities3);
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.getCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "Z\n|x4c6a";
      findWithCapabilities0.setClassIndex(").");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      findWithCapabilities0.setFilename("+\"Bg5$+x;zS");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      capabilities0.getRevision();
      findWithCapabilities0.enableNot((Capabilities.Capability) null);
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability2);
      findWithCapabilities0.getRevision();
      assertEquals("+\"Bg5$+x;zS", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.m_MissingValuesTest = true;
      findWithCapabilities0.m_Capabilities = capabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8034");
      findWithCapabilities0.getRevision();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      capabilities0.setOwner(findWithCapabilities0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.disable(capabilities_Capability2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setFilename("\tMust handle date classes.");
      TestInstances.forCapabilities(findWithCapabilities0.m_Capabilities);
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.getHandler();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability3);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      try { 
        findWithCapabilities0.setOptions(testInstances1.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.listOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.m_Misses = null;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.getMisses();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "9Z\n|x4c6am";
      findWithCapabilities0.setClassIndex(").");
      findWithCapabilities0.setClassIndex(").");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties0 = new Properties();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities1.handles(capabilities_Capability0);
      capabilities0.enableAllAttributes();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename(").");
      capabilities0.disableAll();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      testInstances0.getHandler();
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities1.disableNot(capabilities_Capability1);
      try { 
        findWithCapabilities0.setOptions(testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      findWithCapabilities0.find();
      stringArray0[0] = "R";
      stringArray0[1] = "{";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka.core.WekaException";
      stringArray0[4] = "d$QkAuma0?+bUOkjIBw";
      stringArray0[5] = "-unary-class";
      stringArray0[6] = "Q%";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getHandler();
      FindWithCapabilities.main(stringArray0);
      try { 
        findWithCapabilities0.setOptions(testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setClassIndex("8034");
      findWithCapabilities0.setFilename("8034");
      findWithCapabilities0.setFilename("8034");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.disableNot((Capabilities.Capability) null);
      findWithCapabilities1.getRevision();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      findWithCapabilities0.getOptions();
      assertEquals("8034", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "-date-atts";
      stringArray0[2] = "weka/core/Capabilities.props";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.setFilename("Ut+");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.m_MissingClassValuesTest = true;
      capabilities0.enableAllClassDependencies();
      capabilities0.m_MinimumNumberInstances = (-2765);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      vector0.add("1c-c <num");
      findWithCapabilities0.listOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("1c-c <num");
      SingleIndex singleIndex0 = new SingleIndex(".4kkCBp");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getMatches();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setFilename("GB_NS$mW7");
      findWithCapabilities0.getCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.getRevision();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "weka/core/Capabilities.props";
      stringArray1[1] = "8034";
      stringArray1[2] = "weka/core/Capabilities.props";
      stringArray1[3] = "weka/core/Capabilities.props";
      stringArray1[4] = "8034";
      stringArray1[5] = "weka/core/Capabilities.props";
      stringArray1[6] = "-numeric-atts";
      stringArray1[7] = "weka/core/Capabilities.props";
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("go@V`W:4");
      findWithCapabilities0.getFilename();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      String string0 = "}Vi{Jn3ozJS";
      vector0.add("}Vi{Jn3ozJS");
      vector0.iterator();
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      String string1 = "LNx+";
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setFilename("LNx+");
      long long0 = (-286L);
      System.setCurrentTimeMillis((-286L));
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      findWithCapabilities0.disable((Capabilities.Capability) null);
      Vector<String> vector1 = findWithCapabilities0.find();
      assertNotSame(vector1, vector0);
      
      findWithCapabilities0.getMatches();
      findWithCapabilities0.isEnabled((Capabilities.Capability) null);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      boolean boolean0 = findWithCapabilities0.handles(capabilities_Capability0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.m_Matches;
      findWithCapabilities0.m_Filename = "f;BJL}";
      findWithCapabilities0.disable((Capabilities.Capability) null);
      findWithCapabilities0.find();
      findWithCapabilities0.getMatches();
      boolean boolean0 = findWithCapabilities0.isEnabledNot((Capabilities.Capability) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getMatches();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      String[] stringArray1 = findWithCapabilities3.getOptions();
      SingleIndex singleIndex0 = new SingleIndex("\"position\" has unknown type");
      findWithCapabilities3.setFilename("\"position\" has unknown type");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities1.isEnabled(capabilities_Capability2);
      try { 
        findWithCapabilities3.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("- not allowed: ");
      findWithCapabilities0.getRevision();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.enableAllClasses();
      capabilities0.getClassCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities1.isEnabledNot(capabilities_Capability1);
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      vector0.add("-c <num>");
      findWithCapabilities0.listOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("-c <num>");
      SingleIndex singleIndex0 = new SingleIndex(".4kkCBp");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getMatches();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "{%Le";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{%Le");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setClassIndex(" ");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setFilename(" ");
      capabilities0.disableAllClassDependencies();
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      TestInstances.main(stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities0.getRevision();
      TestInstances.listToArray("{%Le");
      findWithCapabilities0.getHandler();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.setOptions(stringArray1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("sibrV$z9n>[");
      findWithCapabilities1.getCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      try { 
        findWithCapabilities3.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "{%Le";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{%Le");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setClassIndex(" ");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setFilename(" ");
      capabilities0.disableAllClassDependencies();
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      capabilities0.enableAllClasses();
      TestInstances.main(stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.getMatches();
      FindWithCapabilities.main(stringArray1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disable(capabilities_Capability2);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getFilename();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.getFilename();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.listOptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5jkHU-;>*p%9w0Zdsf");
      Vector<String> vector0 = findWithCapabilities0.find();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      HashSet<Capabilities.Capability> hashSet0 = capabilities0.m_Dependencies;
      capabilities0.m_Capabilities = hashSet0;
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      capabilities0.enableAllClasses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      capabilities0.m_AttributeTest = true;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability2);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.MISSING_VALUES;
      boolean boolean0 = findWithCapabilities0.isEnabledNot(capabilities_Capability3);
      assertFalse(boolean0);
      
      Vector<String> vector1 = findWithCapabilities0.getMatches();
      assertSame(vector1, vector0);
      
      Capabilities capabilities1 = findWithCapabilities0.getCapabilities();
      assertTrue(capabilities1.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.m_ClassIndex = null;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "!^k$Vlm]q$)";
      stringArray0[1] = "-Pq:*p6r";
      stringArray0[2] = "R%O";
      stringArray0[3] = "not-string-class";
      stringArray0[4] = "_";
      stringArray0[5] = "-Q:KVB~.r;*Wv!5Rfd=";
      FindWithCapabilities.main(stringArray0);
      System.setCurrentTimeMillis(0L);
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.m_Matches = vector0;
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability2);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability3);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getClassIndex();
      Random.setNextRandom(318);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "{%Le";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{%Le");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setClassIndex(" ");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setFilename(" ");
      capabilities0.disableAllClassDependencies();
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      TestInstances.main(stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      FindWithCapabilities.main((String[]) null);
      findWithCapabilities0.getMatches();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setFilename(" ");
      findWithCapabilities0.getFilename();
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "{%Le";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{%Le");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setClassIndex(" ");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setFilename(" ");
      capabilities0.disableAllClassDependencies();
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      TestInstances.main(stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      String[] stringArray2 = new String[2];
      stringArray2[1] = "weka/core/Capabilities.props";
      FindWithCapabilities.main((String[]) null);
      findWithCapabilities0.getMatches();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setFilename(" ");
      findWithCapabilities0.getFilename();
      try { 
        findWithCapabilities0.setOptions(stringArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "{%Le";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{%Le");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.handles(capabilities_Capability2);
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setClassIndex(" ");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setFilename(" ");
      capabilities0.disableAllClassDependencies();
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      TestInstances.main(stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability3);
      String[] stringArray2 = new String[2];
      stringArray2[1] = "weka/core/Capabilities.props";
      FindWithCapabilities.main((String[]) null);
      findWithCapabilities0.getMatches();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setFilename(" ");
      findWithCapabilities0.getFilename();
      try { 
        findWithCapabilities0.setOptions(stringArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "{%Le";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enable((Capabilities.Capability) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{%Le");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.handles(capabilities_Capability1);
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setClassIndex(" ");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setFilename(" ");
      capabilities0.disableAllClassDependencies();
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      TestInstances.main(stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom(87);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      String[] stringArray2 = new String[2];
      stringArray2[1] = "weka/core/Capabilities.props";
      FindWithCapabilities.main((String[]) null);
      findWithCapabilities0.getMatches();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setFilename(" ");
      findWithCapabilities0.getFilename();
      findWithCapabilities0.enable(capabilities_Capability1);
      try { 
        findWithCapabilities0.setOptions(stringArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.find();
      findWithCapabilities0.m_Superclass = "(?vi?s";
      findWithCapabilities0.getFilename();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_NotCapabilities = null;
      MockException mockException0 = new MockException();
      mockException0.getStackTrace();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(17);
      findWithCapabilities0.m_Capabilities = capabilities0;
      // Undeclared exception!
      try { 
        findWithCapabilities0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "9Z\n|x4c6am";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9Z\n|x4c6am");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.handles(capabilities_Capability2);
      findWithCapabilities0.handles(capabilities_Capability1);
      findWithCapabilities0.setClassIndex(" ");
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setFilename(" ");
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      TestInstances.main(stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom(87);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability3);
      String[] stringArray2 = new String[2];
      stringArray2[0] = "weka/core/Capabilities.props";
      stringArray2[1] = "iGj[1J/";
      FindWithCapabilities.main(stringArray2);
      findWithCapabilities0.getMatches();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setFilename("Copy with class value set to first value: ");
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setOptions(stringArray1);
      assertEquals(" ", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.enableAllAttributeDependencies();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      testInstances0.m_NumRelationalNominal = (-1952361461);
      testInstances0.m_NumRelationalDate = (-1952361461);
      testInstances0.m_NumClasses = 95;
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.listOptions();
      findWithCapabilities0.getNotCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      try { 
        testInstances0.generateAttribute((-2065193153), (-1952361461), "not-nominal-atts");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute type '-1952361461' unknown!
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "9Z\n|x4c6am";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9Z\n|x4c6am");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.handles(capabilities_Capability2);
      findWithCapabilities0.handles(capabilities_Capability1);
      findWithCapabilities0.setClassIndex(" ");
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setFilename(" ");
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      TestInstances.main(stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom(87);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability3);
      String[] stringArray2 = new String[2];
      stringArray2[0] = "weka/core/Capabilities.props";
      stringArray2[1] = "iGj[1J/";
      FindWithCapabilities.main(stringArray2);
      findWithCapabilities0.getMatches();
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setFilename(" ");
      findWithCapabilities0.getFilename();
      try { 
        findWithCapabilities0.setOptions(stringArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "9Z\n|x4c6am";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("9Z\n|x4c6am");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.find();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getRevision();
      TestInstances.forCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      findWithCapabilities1.setHandler(findWithCapabilities0);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      findWithCapabilities1.getMisses();
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "9Z\n|x4c6am";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9Z\n|x4c6am");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("9Z\n|x4c6am");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.find();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getRevision();
      TestInstances.forCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      TestInstances.forCapabilities(capabilities1);
      findWithCapabilities1.setHandler(findWithCapabilities0);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      findWithCapabilities1.getMisses();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getFilename();
      findWithCapabilities1.getHandler();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setHandler(findWithCapabilities0);
      findWithCapabilities0.getNotCapabilities();
      assertEquals("weka/core/Capabilities.props", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "last";
      stringArray0[1] = "Get option -o: ";
      stringArray0[2] = "-date-atts";
      stringArray0[3] = "CJWi)G|w";
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getHandler();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.setFilename("Get option -o: ");
      TestInstances.main(stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom(30);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities1.isEnabled(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.getFilename();
      findWithCapabilities1.getFilename();
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.enableAllAttributes();
      TestInstances testInstances0 = new TestInstances();
      findWithCapabilities0.getCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(11, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "9Z\n|x4c6am";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9Z\n|x4c6am");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("9Z\n|x4c6am");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.find();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getRevision();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getHandler();
      findWithCapabilities0.m_Handler = null;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      findWithCapabilities0.setFilename("-ki>/=C(OYKX%");
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      capabilities0.m_MissingClassValuesTest = true;
      Random.setNextRandom(87);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      findWithCapabilities0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "9Z\n|x4c6am";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9Z\n|x4c6am");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities1.getMisses();
      findWithCapabilities1.setOptions(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String string0 = findWithCapabilities0.m_Filename;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities0.setClassIndex("");
      findWithCapabilities0.find();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getHandler();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      findWithCapabilities0.setFilename("");
      TestInstances.main(stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom(0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getFilename();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setFilename(",M@x9l9g/j9");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-nominal-atts";
      stringArray0[1] = "?PD)gph#D|{";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "2001-04-04 14:13:55";
      stringArray0[2] = "d\"Xq)zJrX9";
      stringArray0[3] = "last";
      stringArray0[4] = "-string-class";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Matches = vector0;
      vector0.add("-c <num>");
      findWithCapabilities0.listOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("-c <num>");
      SingleIndex singleIndex0 = new SingleIndex(".4kkCBp");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = null;
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setNotCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability2);
      assertFalse(capabilities_Capability2.equals((Object)capabilities_Capability0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = " z,O^j";
      stringArray0[1] = "7T)\"L";
      stringArray0[2] = "%HQ(C:;Jt";
      stringArray0[3] = "\tThe number of string attributes (default 0).";
      stringArray0[4] = " Options:\n\n";
      stringArray0[5] = "-not-relational-class";
      stringArray0[6] = "YbUT=]ca~";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "bcWt@'<@wa{]Z@f+cJb";
      stringArray0[1] = "weka.core.Range";
      stringArray0[2] = "-not-nominal-atts";
      stringArray0[3] = "BRx-b";
      stringArray0[4] = "-1";
      stringArray0[5] = "Ri";
      stringArray0[6] = "(LNG~b&H|&giE?.";
      stringArray0[7] = "-date-class";
      stringArray0[8] = "9Z\n|x4c6am";
      FindWithCapabilities.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#\"V`N7SD");
      findWithCapabilities1.setNotCapabilities(capabilities0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.setHandler(findWithCapabilities1);
      String[] stringArray0 = findWithCapabilities2.getOptions();
      assertEquals(11, stringArray0.length);
      
      Vector<String> vector0 = findWithCapabilities1.getMisses();
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "min # Instance: ";
      stringArray0[1] = "-not-binary-class";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("- not allowed: ");
      findWithCapabilities0.getFilename();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.enableAll();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("k?");
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setFilename("fzYh)l@' `,Ojj+^u");
      findWithCapabilities0.find();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getRevision();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getHandler();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      findWithCapabilities0.setFilename("fzYh)l@' `,Ojj+^u");
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom(33);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getFilename();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "1T2Xo";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("1T2Xo");
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities2.isEnabled(capabilities_Capability1);
      boolean boolean0 = findWithCapabilities0.handles((Capabilities.Capability) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-nominal-class");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.disable(capabilities_Capability0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-nominal-class";
      stringArray0[1] = "";
      stringArray0[2] = "ibx@";
      stringArray0[3] = "-nominal-class";
      stringArray0[4] = "-nominal-class";
      stringArray0[5] = "-nominal-class";
      stringArray0[6] = "-nominal-class";
      stringArray0[7] = "-nominal-class";
      stringArray0[8] = "-nominal-class";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("- not allowed: ");
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.find();
      Vector<String> vector0 = findWithCapabilities1.getMisses();
      findWithCapabilities1.setClassIndex(").");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities1.find();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities2.enableNot(capabilities_Capability1);
      findWithCapabilities0.m_Matches = vector0;
      assertEquals("- not allowed: ", findWithCapabilities0.getFilename());
      
      Random.setNextRandom(2331);
      String[] stringArray0 = findWithCapabilities2.getOptions();
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.setFilename("\tThe minimum number of instances (default 1).");
      assertEquals("\tThe minimum number of instances (default 1).", findWithCapabilities0.getFilename());
      
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities2.m_Handler;
      findWithCapabilities2.setHandler(findWithCapabilities1);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities1.handles(capabilities_Capability0);
      findWithCapabilities2.getHandler();
      FindWithCapabilities.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setFilename(")L#Yd& ]Klh=\\q");
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex(")L#Yd& ]Klh=\\q");
      boolean boolean0 = findWithCapabilities0.isEnabled(capabilities_Capability0);
      assertEquals(")L#Yd& ]Klh=\\q", findWithCapabilities0.getFilename());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities capabilities1 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.or(capabilities1);
      capabilities0.disableAll();
      capabilities1.enableAllAttributes();
      HashSet<Capabilities.Capability> hashSet0 = capabilities1.m_Dependencies;
      LinkedList<ManhattanDistance> linkedList0 = new LinkedList<ManhattanDistance>();
      hashSet0.removeAll(linkedList0);
      capabilities0.m_Capabilities = hashSet0;
      capabilities1.m_MissingClassValuesTest = true;
      hashSet0.parallelStream();
      capabilities0.m_MissingClassValuesTest = true;
      capabilities0.m_MissingClassValuesTest = true;
      hashSet0.parallelStream();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("- not allowed: ");
      findWithCapabilities0.getRevision();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.getClassCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Capabilities = capabilities0;
      findWithCapabilities1.getMisses();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "weka/core/Capabilities.props";
      TestInstances.main(stringArray0);
      boolean boolean0 = findWithCapabilities0.handles(capabilities_Capability0);
      Random.setNextRandom((-347));
      findWithCapabilities0.getOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getHandler();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      assertEquals("- not allowed: ", findWithCapabilities0.getFilename());
      
      FindWithCapabilities.main((String[]) null);
      findWithCapabilities2.getFilename();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.getFilename();
      findWithCapabilities0.setFilename("");
      boolean boolean1 = findWithCapabilities0.isEnabled(capabilities_Capability1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      TestInstances testInstances1 = new TestInstances();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      capabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setFilename("-only-multiinstance");
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom(19);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      FindWithCapabilities.main(testInstances0.DEFAULT_WORDS);
      findWithCapabilities0.getFilename();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getFilename();
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "9Z\n|x4c6am";
      stringArray0[1] = "};z";
      stringArray0[2] = "+>n";
      stringArray0[3] = "2,AR/p9AH2T.";
      stringArray0[4] = "\tMust handle date classes.";
      stringArray0[5] = "-missing-att-values";
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.m_Capabilities = capabilities0;
      stringArray0[6] = "/=";
      stringArray0[7] = "tBR`WaVr',iA6N.[,R";
      stringArray0[8] = "SV)?LS";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex(",");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ",";
      stringArray0[1] = ",";
      stringArray0[2] = ",";
      stringArray0[3] = ",";
      stringArray0[4] = ",";
      stringArray0[5] = ",";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ";zEkF`?GlF(335OB";
      stringArray0[1] = "^b%(sV^(6(!+Zg]WGG";
      stringArray0[2] = "Comparing with null object";
      stringArray0[3] = "";
      stringArray0[4] = "\tMust handle unary attributes.";
      stringArray0[5] = "w;";
      stringArray0[6] = "-not-string-class";
      stringArray0[7] = "-not-string-atts";
      stringArray0[8] = "";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "|KH";
      stringArray0[1] = "|KH";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.find();
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getFilename();
      String string0 = findWithCapabilities0.getFilename();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Usage: weka.core.WekaPackageManager [-offline] [option]";
      stringArray0[1] = "!GbOJ";
      stringArray0[2] = "keyword @relation expected";
      stringArray0[3] = "9Z\n|x4c6am";
      stringArray0[4] = "-not-numeric-atts";
      stringArray0[5] = "g@";
      stringArray0[6] = "@x+]D";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?q");
      findWithCapabilities0.getHandler();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      capabilities1.enableAllClassDependencies();
      findWithCapabilities0.setCapabilities(capabilities1);
      Capabilities capabilities2 = findWithCapabilities0.getNotCapabilities();
      assertFalse(capabilities2.hasDependencies());
      
      findWithCapabilities0.getMatches();
      findWithCapabilities0.setCapabilities(capabilities0);
      Capabilities capabilities3 = findWithCapabilities0.getCapabilities();
      assertNotSame(capabilities3, capabilities0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "9Z\n|x4c6am";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9Z\n|x4c6am");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("9Z\n|x4c6am");
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.find();
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getRevision();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getHandler();
      findWithCapabilities0.m_Handler = null;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      findWithCapabilities0.setFilename("-ki>/=C(OYKX%");
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      capabilities0.m_MissingClassValuesTest = true;
      Random.setNextRandom(87);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.isEnabled(capabilities_Capability2);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getFilename();
      assertEquals("-ki>/=C(OYKX%", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      ClassDiscovery.m_ClassCache = null;
      findWithCapabilities0.getHandler();
      SingleIndex singleIndex0 = new SingleIndex("Gi?(/8/d");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OBI");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(1228L);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getMatches();
      findWithCapabilities0.getHandler();
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      findWithCapabilities0.getFilename();
      findWithCapabilities0.setFilename("iz^UkBo");
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.setClassIndex("8034");
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      assertEquals("weka/core/Capabilities.props", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "~ G#";
      stringArray0[1] = "G3I'Xlarx%_/SI5k";
      stringArray0[2] = "not-numeric-class";
      stringArray0[3] = "t2tW#8*u{E_b{Nt'";
      stringArray0[4] = "oT6-(k<VDs`VPF]|(C";
      stringArray0[5] = "\tMust handle date attributes.";
      stringArray0[6] = "-no-class";
      FindWithCapabilities.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Matches = vector0;
      findWithCapabilities0.m_Superclass = "SV)?LS";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      findWithCapabilities0.disable(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.getCapabilities();
      Random.setNextRandom((-42));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      findWithCapabilities0.m_Matches = vector0;
      vector0.add("SV)?LS");
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      boolean boolean0 = findWithCapabilities0.handles(capabilities_Capability1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      Capabilities capabilities1 = new Capabilities(findWithCapabilities0);
      capabilities1.getClassCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      vector0.add("No class");
      findWithCapabilities0.setClassIndex("m_jikYs%,{DSWi");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities1.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      String string0 = "Length of copy missing: ";
      stringArray0[0] = "Length of copy missing: ";
      stringArray0[1] = "-roRx_?J^Q;ZQ'";
      stringArray0[2] = "-not-nominal-class";
      stringArray0[3] = "\"SN|yZ%YOn_SZI7QC:/";
      stringArray0[4] = "R( uin4n";
      stringArray0[5] = "";
      stringArray0[6] = ":hG%?#z=";
      stringArray0[7] = "Missing";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      vector0.stream();
      boolean boolean0 = vector0.removeElement(findWithCapabilities0);
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.getRevision();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.getClassCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("OBI");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      boolean boolean1 = findWithCapabilities0.isEnabled(capabilities_Capability1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[3];
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setClassIndex((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      findWithCapabilities0.m_Filename = "k|";
      capabilities0.getClassCapabilities();
      SingleIndex singleIndex0 = new SingleIndex();
      singleIndex0.getRevision();
      singleIndex0.getRevision();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-1";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.getClassCapabilities();
      SingleIndex singleIndex0 = new SingleIndex();
      singleIndex0.getRevision();
      try { 
        findWithCapabilities0.setOptions((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      capabilities0.getClassCapabilities();
      SingleIndex singleIndex0 = new SingleIndex();
      singleIndex0.getRevision();
      String[] stringArray0 = new String[0];
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      capabilities1.getOtherCapabilities();
      SingleIndex singleIndex0 = new SingleIndex();
      singleIndex0.getRevision();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "weka/core/Capabilities.props";
      capabilities0.enableAllAttributeDependencies();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      findWithCapabilities0.find();
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      assertEquals("weka/core/Capabilities.props", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      Capabilities capabilities2 = capabilities1.getOtherCapabilities();
      findWithCapabilities0.setCapabilities(capabilities2);
      findWithCapabilities0.m_Superclass = "c!1G1ZC^tO3s:g+}]h";
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "c!1G1ZC^tO3s:g+}]h";
      stringArray0[1] = "c!1G1ZC^tO3s:g+}]h";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "c!1G1ZC^tO3s:g+}]h";
      stringArray0[4] = "weka/core/Capabilities.props";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      Capabilities capabilities2 = capabilities1.getOtherCapabilities();
      findWithCapabilities0.setCapabilities(capabilities2);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities1.disableNot(capabilities_Capability0);
      SingleIndex singleIndex0 = findWithCapabilities1.m_ClassIndex;
      singleIndex0.toString();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities1.disableNot(capabilities_Capability1);
      findWithCapabilities0.setClassIndex("%HQ(C:;Jt");
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      Capabilities capabilities3 = findWithCapabilities2.getNotCapabilities();
      findWithCapabilities1.setCapabilities(capabilities3);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.find();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities4.getMisses();
      findWithCapabilities3.getFilename();
      System.setCurrentTimeMillis(23L);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      boolean boolean0 = findWithCapabilities5.isEnabled(capabilities_Capability0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setFilename("");
      String[] stringArray0 = new String[6];
      FindWithCapabilities.main(stringArray0);
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      findWithCapabilities0.getOptions();
      stringArray0[3] = "";
      stringArray0[4] = "";
      findWithCapabilities0.disableNot(capabilities_Capability0);
      stringArray0[5] = "";
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setFilename("<CUQv|");
      String[] stringArray0 = new String[6];
      FindWithCapabilities.main(stringArray0);
      stringArray0[0] = "<CUQv|";
      stringArray0[1] = "";
      stringArray0[2] = "<CUQv|";
      SingleIndex singleIndex0 = new SingleIndex();
      singleIndex0.getRevision();
      SingleIndex singleIndex1 = findWithCapabilities0.m_ClassIndex;
      singleIndex1.toString();
      findWithCapabilities0.find();
      SingleIndex.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setClassIndex("Lj*S2M--T,/RGu");
      assertFalse(findWithCapabilities1.equals((Object)findWithCapabilities0));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      String string0 = "Pw!&*";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Pw!&*";
      stringArray0[1] = "Pw!&*";
      stringArray0[2] = "8034";
      stringArray0[3] = "Pw!&*";
      stringArray0[4] = "8034";
      stringArray0[5] = "Pw!&*";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/apaniche/wekafiles/props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Pw!&*");
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Packages = vector0;
      stringArray0[6] = "Pw!&*";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.handles(capabilities_Capability0);
      // Undeclared exception!
      try { 
        vector0.listIterator(99);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setFilename("<CUQv|");
      String[] stringArray0 = new String[6];
      FindWithCapabilities.main(stringArray0);
      stringArray0[0] = "<CUQv|";
      stringArray0[1] = "";
      stringArray0[2] = "<CUQv|";
      findWithCapabilities0.getOptions();
      stringArray0[3] = "";
      stringArray0[4] = "";
      findWithCapabilities0.disableNot(capabilities_Capability0);
      stringArray0[5] = "<CUQv|";
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      try { 
        Capabilities.forInstances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "nominal-class";
      stringArray0[1] = "(uC>G$.>5FC^xP";
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1077));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getOptions();
      TestInstances testInstances0 = new TestInstances();
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      TestInstances testInstances1 = new TestInstances();
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      capabilities0.getRevision();
      testInstances0.setRelation("not-no-class");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      capabilities0.enable(capabilities_Capability0);
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances2.setWordSeparators("not-no-class");
      testInstances2.setNumRelationalNumeric(0);
      testInstances0.assign(testInstances1);
      findWithCapabilities0.m_Handler = null;
      testInstances0.m_NumRelationalString = (-1);
      findWithCapabilities0.find();
      String[] stringArray0 = new String[0];
      testInstances0.setClassIndex((-2));
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.handles(capabilities_Capability1);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability2);
      Capabilities capabilities0 = findWithCapabilities0.getNotCapabilities();
      Capabilities capabilities1 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.or(capabilities1);
      capabilities0.disableAll();
      capabilities1.enableAllAttributes();
      HashSet<Capabilities.Capability> hashSet0 = capabilities1.m_Dependencies;
      LinkedList<ManhattanDistance> linkedList0 = new LinkedList<ManhattanDistance>();
      hashSet0.removeAll(linkedList0);
      capabilities0.m_Capabilities = hashSet0;
      capabilities1.m_MissingClassValuesTest = false;
      hashSet0.parallelStream();
      capabilities0.m_MissingClassValuesTest = false;
      capabilities0.m_MissingClassValuesTest = false;
      hashSet0.parallelStream();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Filename = "\"position\" is numeric: ";
      // Undeclared exception!
      try { 
        findWithCapabilities0.setNotCapabilities((Capabilities) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex(" != ");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      SingleIndex.indexToString(0);
      singleIndex0.m_SelectedIndex = 0;
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.listOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disable(capabilities_Capability1);
      // Undeclared exception!
      try { 
        findWithCapabilities0.setFilename((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.m_Matches;
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      Capabilities capabilities0 = findWithCapabilities1.getNotCapabilities();
      capabilities0.getOtherCapabilities();
      SingleIndex singleIndex0 = findWithCapabilities1.m_ClassIndex;
      String string0 = "RsD";
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      // Undeclared exception!
      try { 
        testInstances0.getRelationalFormat(689);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 689
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("weka.core.WekaException");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.m_Filename = "";
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.handles(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.setClassIndex("-ki>/=C(OYKX%");
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.getMatches();
      findWithCapabilities0.setClassIndex("8034");
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability2);
      FindWithCapabilities.main((String[]) null);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumNominalValues(0);
      testInstances0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      Capabilities capabilities2 = capabilities1.getOtherCapabilities();
      findWithCapabilities0.setCapabilities(capabilities2);
      findWithCapabilities0.m_Superclass = "c!1G1ZC^tO3s:g+}]h";
      findWithCapabilities0.setFilename("measureStdDev_points_visited");
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      String string0 = "Pw!&*";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Pw!&*";
      stringArray0[1] = "Pw!&*";
      stringArray0[2] = "8034";
      stringArray0[3] = "Pw!&*";
      stringArray0[4] = "8034";
      stringArray0[5] = "Pw!&*";
      Vector<String> vector0 = findWithCapabilities0.find();
      findWithCapabilities0.m_Packages = vector0;
      stringArray0[6] = "Pw!&*";
      stringArray0[7] = "Pw!&*";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      boolean boolean0 = findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex();
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      ClassDiscovery.m_Cache = null;
      String[] stringArray0 = new String[4];
      singleIndex0.getRevision();
      stringArray0[0] = "";
      stringArray0[1] = "W;tZ'{jOg";
      stringArray0[2] = "IxtoF[-[";
      singleIndex0.toString();
      findWithCapabilities0.find();
      stringArray0[3] = "aNS{Vl~";
      SingleIndex.main(stringArray0);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.setClassIndex("OBI");
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.find();
      findWithCapabilities0.m_Superclass = "(?vi?s";
      findWithCapabilities0.getFilename();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.m_NotCapabilities = null;
      MockException mockException0 = new MockException();
      mockException0.getStackTrace();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(17);
      findWithCapabilities0.m_Capabilities = capabilities0;
      // Undeclared exception!
      try { 
        binarySparseInstance0.classAttribute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_NotCapabilities = null;
      findWithCapabilities0.setClassIndex("");
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.setCapabilities(capabilities0);
      assertFalse(capabilities0.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      SingleIndex singleIndex0 = new SingleIndex("weka.core.ClassCache$ClassFileFilter");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getFilename();
      findWithCapabilities0.find();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      Capabilities capabilities2 = capabilities1.getOtherCapabilities();
      capabilities2.assign(capabilities0);
      capabilities1.getOtherCapabilities();
      capabilities2.disableAll();
      capabilities1.getOtherCapabilities();
      capabilities2.m_Test = false;
      Capabilities capabilities3 = capabilities2.getClassCapabilities();
      HashSet<Capabilities.Capability> hashSet0 = capabilities2.m_Dependencies;
      capabilities2.m_Dependencies = hashSet0;
      capabilities3.or(capabilities0);
      capabilities3.assign(capabilities1);
      singleIndex0.setSingleIndex("weka/core/Capabilities.props");
      findWithCapabilities0.setCapabilities(capabilities3);
      findWithCapabilities0.m_Misses = vector0;
      findWithCapabilities0.getCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for index
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability1);
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities0.find();
      findWithCapabilities0.m_Matches = vector0;
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      FindWithCapabilities.main((String[]) null);
      findWithCapabilities0.listOptions();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.m_NumRelationalString = 0;
      testInstances0.setNumRelationalNominal(0);
      CapabilitiesHandler capabilitiesHandler0 = testInstances0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      SingleIndex singleIndex0 = new SingleIndex("&<yp<SI2^");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "&<yp<SI2^";
      stringArray0[1] = "&<yp<SI2^";
      stringArray0[2] = "&<yp<SI2^";
      stringArray0[3] = "&<yp<SI2^";
      stringArray0[4] = "&<yp<SI2^";
      stringArray0[5] = "&<yp<SI2^";
      stringArray0[6] = "32;E56l:;2Il";
      stringArray0[7] = "&<yp<SI2^";
      stringArray0[8] = "";
      SingleIndex.main(stringArray0);
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.getHandler();
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      assertEquals(0, vector0.size());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      findWithCapabilities0.setCapabilities(capabilities1);
      assertFalse(findWithCapabilities0.equals((Object)findWithCapabilities1));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.getRevision();
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.disable(capabilities_Capability0);
      int int0 = (-414);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-414));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      Vector<String> vector0 = findWithCapabilities0.m_Misses;
      // Undeclared exception!
      try { 
        vector0.set((-335), (String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -335
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getHandler();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }
}
