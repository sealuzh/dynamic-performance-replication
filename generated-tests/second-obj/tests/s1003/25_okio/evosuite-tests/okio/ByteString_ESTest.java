/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:29:04 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("okio.Base64");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: okio.Base64
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Pipe pipe0 = new Pipe(1937L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.write(realBufferedSource0.buffer);
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)21;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.startsWith(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.asByteBuffer();
      ByteString byteString2 = ByteString.decodeHex("");
      assertFalse(byteString2.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.sha1();
      byteString0.startsWith(byteArray0);
      byteString1.lastIndexOf(byteString0, 26);
      byteString1.hashCode();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      // Undeclared exception!
      try { 
        byteString0.getByte(52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.sha256();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("HmacSHA256");
      byteString0.size();
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource(buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString1 = hashingSource0.hash();
      ByteString byteString2 = byteString0.hmacSha512(byteString1);
      int int0 = byteString2.indexOf(byteString0, 10);
      assertEquals((-1), int0);
      assertEquals(64, byteString2.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)76;
      byte[] byteArray1 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray1);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)16;
      byteArray2[1] = (byte)102;
      byteArray2[2] = (byte)102;
      byteArray2[3] = (byte)72;
      byteArray2[4] = (byte)72;
      byteArray2[5] = (byte)72;
      boolean boolean0 = byteString0.rangeEquals(1143, byteArray2, 34, (int) (byte)0);
      assertFalse(boolean0);
      
      String string0 = byteString0.hex();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)53;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.endsWith(byteArray0);
      byteString0.toString();
      Charset charset0 = Charset.defaultCharset();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[hex=4baf35]");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "beginIndex < 0");
      charset0.encode("");
      byteString0.string(charset0);
      byteString0.hashCode();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeUtf8(" (to read code point prefixed 0x");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)0;
      byteString0.toAsciiLowercase();
      // Undeclared exception!
      try { 
        ByteString.decodeHex(" (to read code point prefixed 0x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit:  
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("HmacSHA256");
      byteString0.size();
      byteString0.hex();
      byteString0.toAsciiLowercase();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer0 = buffer_UnsafeCursor0.buffer;
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)70;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode = (int) (byte)0;
      byteString0.toString();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("?/Ot*>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: ?
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("B");
      ByteString byteString0 = ByteString.of(byteBuffer0);
      Buffer buffer0 = new Buffer();
      byteString0.hashCode();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString1 = ByteString.decodeBase64("UDW,");
      assertNull(byteString1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)0;
      Charset.defaultCharset();
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.EMPTY.substring((int) (byte)70);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.equals("?/Ot*>");
      byteString0.utf8 = "?/Ot*>";
      int int0 = byteString0.indexOf(byteArray0);
      ByteString byteString1 = byteString0.md5();
      String string0 = byteString0.utf8;
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      boolean boolean1 = byteString1.startsWith(byteString0);
      assertTrue(boolean1 == boolean0);
      
      byteString0.toByteArray();
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int3 = byteString1.lastIndexOf(byteString0, (int) (byte)70);
      assertEquals((-1), int3);
      assertFalse(int3 == int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.md5();
      byteString2.EMPTY.toString();
      byteString1.indexOf(byteArray0, (-16));
      byteString0.lastIndexOf(byteString1);
      byteString0.rangeEquals(0, byteString2, (-16), (-16));
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, 0, (-16));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-16
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)117;
      byteArray0[2] = (byte)70;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = byteString0.startsWith(byteArray0);
      byteString0.equals("");
      ByteString byteString1 = byteString0.sha256();
      byteString0.asByteBuffer();
      String string0 = byteString0.toString();
      assertEquals("[hex=750046004600000000000000]", string0);
      
      boolean boolean1 = byteString0.endsWith(byteString1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)117;
      byteArray0[2] = (byte)117;
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode = 2054;
      byteString0.indexOf(byteArray0);
      byteString0.toString();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("!E_rm");
      ByteString byteString1 = ByteString.of(byteBuffer0);
      byteString0.toAsciiUppercase();
      byteString1.startsWith(byteString0);
      // Undeclared exception!
      try { 
        HashingSource.hmacSha1((Source) null, byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // delegate == null
         //
         verifyException("okio.ForwardingSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("HmacSHA256");
      Charset charset0 = Charset.defaultCharset();
      byteString0.string(charset0);
      int int0 = byteString0.size();
      assertEquals(10, int0);
      
      Inflater inflater0 = new Inflater();
      ByteString byteString1 = ByteString.encodeString("HmacSHA256", charset0);
      assertTrue(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("", charset0);
      byte byte0 = (byte)0;
      byteString0.utf8();
      charset0.encode("B");
      Buffer buffer0 = new Buffer();
      byteString0.hashCode();
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      byteString1.EMPTY.utf8();
      byteString0.toAsciiUppercase();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString(" (to read code point prefixed 0x", charset0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)19;
      byteString0.indexOf(byteArray0);
      byteString0.hex();
      String string0 = byteString0.hex();
      assertEquals("2028746f207265616420636f646520706f696e74207072656669786564203078", string0);
      
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.md5();
      byteString1.utf8 = "`bN=NKX'&=PE{`2";
      byte[] byteArray0 = new byte[0];
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(0, int0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      boolean boolean0 = byteString0.equals(pipedInputStream0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.base64Url();
      byteString0.EMPTY.toString();
      // Undeclared exception!
      try { 
        ByteString.decodeHex("[size=0]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: [
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Number too large: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: N
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = null;
      ByteString byteString0 = new ByteString((byte[]) null);
      String string0 = "deadline reached";
      // Undeclared exception!
      try { 
        ByteString.decodeHex("deadline reached");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: l
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString("", charset0);
      ByteString byteString0 = ByteString.encodeUtf8("plF7!");
      int int0 = byteString0.lastIndexOf(byteArray0);
      assertEquals(5, byteString0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = ByteString.decodeBase64("");
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteString.decodeBase64("");
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      ByteString byteString0 = ByteString.decodeBase64("ni_iiklS|(_IhoX|G#");
      assertNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = null;
      int int0 = 0;
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "j<o_w]hqT(IL/\rl;QN");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.append((CharSequence) "");
      // Undeclared exception!
      try { 
        ByteString.decodeHex("%3|.R7pA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: %
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.equals("?/Ot*>");
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
      
      ByteString byteString1 = byteString0.md5();
      byteString1.hex();
      byteString1.toAsciiLowercase();
      byteString0.base64Url();
      byte[] byteArray1 = new byte[9];
      ByteString byteString2 = new ByteString(byteArray1);
      String string0 = byteString1.toString();
      assertEquals("[hex=f22276227f7f22766727227772626222]", string0);
      
      boolean boolean1 = byteString1.endsWith(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)34;
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = byteString0.indexOf(byteArray0);
      ByteString byteString1 = byteString0.md5();
      String string0 = byteString0.hex();
      assertEquals("222222", string0);
      
      ByteString byteString2 = byteString0.toAsciiLowercase();
      byteString0.base64Url();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int1 = byteString1.lastIndexOf(byteString0, (int) (byte)2);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      ByteString byteString3 = byteString0.toAsciiUppercase();
      assertSame(byteString3, byteString2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = ByteString.of(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-4);
      byteString0.lastIndexOf(byteArray1);
      Pipe pipe0 = new Pipe((byte)117);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((long) (byte) (-4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -4
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ByteString.codePointIndexToCharIndex("Dcm?}.yLa3,d", 27);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.EMPTY.hashCode();
      ByteString.codePointIndexToCharIndex("Dcm?}.yLa3,d", (-3039));
      // Undeclared exception!
      try { 
        byteString0.substring(2314, 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(0)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3821);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)109;
      byteArray1[2] = (byte) (-29);
      byteArray1[3] = (byte) (-52);
      byteArray1[4] = (byte)36;
      byteArray1[5] = (byte)63;
      byteArray1[6] = (byte) (-3);
      byteString0.EMPTY.endsWith(byteArray1);
      // Undeclared exception!
      try { 
        ByteString.read(pipedInputStream0, (-2039));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2039
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      ByteString byteString0 = ByteString.of(byteArray0);
      ByteString byteString1 = byteString0.md5();
      int int0 = byteString0.EMPTY.lastIndexOf(byteArray0);
      byteString0.sha512();
      Buffer buffer0 = new Buffer();
      int int1 = byteString0.hashCode();
      assertFalse(int1 == int0);
      
      int int2 = byteString0.compareTo(byteString1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)47;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.equals("?/Ot*>");
      byteString0.utf8 = "?/Ot*>";
      int int0 = byteString0.indexOf(byteArray0);
      ByteString byteString1 = byteString0.md5();
      String string0 = byteString1.hex();
      assertEquals("7f6f62222227722772267f7226672266", string0);
      
      ByteString byteString2 = byteString0.toAsciiLowercase();
      int int1 = byteString2.indexOf(byteString1, 178);
      assertFalse(int1 == int0);
      
      Buffer buffer0 = new Buffer();
      int int2 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      int int3 = byteString1.compareTo(byteString0);
      assertSame(byteString0, byteString2);
      assertEquals(1, int3);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)92;
      byteArray0[0] = (byte)92;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      HashingSource.sha256(hashingSource0);
      ByteString byteString0 = hashingSource0.hash();
      Source source0 = hashingSource0.delegate();
      HashingSource.hmacSha256(source0, byteString0);
      hashingSource0.hash();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      // Undeclared exception!
      try { 
        byteString1.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte)63;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte) (-83);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.equals(byteString0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "k^w.SZJU1/nOC@");
      // Undeclared exception!
      try { 
        ByteString.decodeHex("J5fupK*P~G7~l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: J5fupK*P~G7~l
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("data == null", charset0);
      byteString0.toString();
      charset0.encode("h$");
      Buffer buffer1 = new Buffer();
      byteString0.hashCode();
      // Undeclared exception!
      try { 
        byteString0.substring((-392));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-107);
      byteArray0[0] = (byte) (-107);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hashCode();
      byteString0.EMPTY.indexOf(byteArray0, (int) (byte) (-107));
      byteString0.sha512();
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)117;
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        byteString0.hmacSha1((ByteString) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-111);
      ByteString byteString0 = new ByteString(byteArray0);
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("3PDF");
      ByteString byteString1 = ByteString.of(byteBuffer0);
      ByteString byteString2 = byteString0.toAsciiLowercase();
      int int0 = byteString0.indexOf(byteString2, (int) (byte) (-111));
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString3 = realBufferedSource0.readByteString();
      int int1 = byteString1.hashCode();
      assertFalse(int1 == int0);
      
      int int2 = byteString3.compareTo(byteString2);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString(" (to read code point prefixed 0x", charset0);
      String string0 = byteString0.toString();
      assertEquals("[text= (to read code point prefixed 0x]", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Buffer buffer0 = new Buffer();
      byteString0.hashCode();
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      ByteString byteString2 = byteString0.toAsciiUppercase();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      options0.get((byte)0);
      int int0 = byteString1.compareTo(byteString2);
      assertEquals(1, int0);
      assertSame(byteString1, byteString0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      ByteString.of(byteBuffer0);
      byte[] byteArray0 = new byte[1];
      ByteString.of(byteBuffer0);
      byteArray0[0] = (byte)0;
      int int0 = byteString0.indexOf(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2009), 3641);
      ByteString byteString1 = realBufferedSource0.readByteString((long) (byte)0);
      ByteString byteString2 = new ByteString(byteArray0);
      int int1 = byteString1.lastIndexOf(byteString2, (-2009));
      assertTrue(int1 == int0);
      
      int int2 = byteString1.compareTo(byteString0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString(" (to read code point prefixed 0x", charset0);
      String string0 = byteString0.toString();
      assertEquals("[text= (to read code point prefixed 0x]", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      Buffer buffer0 = new Buffer();
      byteString0.hashCode();
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      ByteString byteString2 = byteString0.toAsciiUppercase();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(buffer0);
      ByteString byteString3 = realBufferedSource1.readByteString();
      byteString3.asByteBuffer();
      int int0 = byteString2.compareTo(byteString3);
      assertFalse(byteString2.equals((Object)byteString0));
      assertNotSame(byteString2, byteString0);
      assertEquals(1, int0);
      assertSame(byteString0, byteString1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString(" (to read code point prefixed 0x", charset0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Buffer buffer0 = new Buffer();
      byteString0.hashCode();
      ByteString byteString1 = byteString0.substring(11);
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString1;
      byteStringArray0[2] = byteString1;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString1;
      Options.of(byteStringArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = byteString1.lastIndexOf(byteArray0, (int) (byte)0);
      assertEquals((-1), int0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      int int1 = byteString1.lastIndexOf(byteString1, 90);
      assertEquals(0, int1);
      assertEquals(21, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex("7iLGa?cWd8Y&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: i
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString(" (to read code point prefixed 0x", charset0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " (to read code point prefixed 0x");
      byteString0.EMPTY.endsWith(byteArray0);
      byteString0.toString();
      Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("B");
      ByteString.of(byteBuffer0);
      // Undeclared exception!
      try { 
        byteBuffer0.putShort((int) (byte)0, (short) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        ByteString.encodeString("", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.equals("?/Ot*>");
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
      
      ByteString byteString1 = byteString0.md5();
      String string0 = byteString1.hex();
      assertEquals("f22276227f7f22766727227772626222", string0);
      
      ByteString byteString2 = byteString1.toAsciiLowercase();
      byteString0.base64Url();
      boolean boolean0 = byteString2.equals(byteString0);
      assertFalse(boolean0);
      
      byteString1.sha256();
      assertNotSame(byteString1, byteString2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = (byte) (-64);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.EMPTY.toAsciiUppercase();
      ByteString byteString2 = new ByteString(byteArray0);
      byteString2.toString();
      ByteString byteString3 = ByteString.of(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        byteString3.EMPTY.hmacSha256(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Charset.defaultCharset();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)51;
      byteArray0[4] = (byte)0;
      Buffer buffer0 = new Buffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOf(byteString0, (long) (byte)0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer0.readFully(buffer1, 0L);
      byteString0.base64Url();
      byteString0.toString();
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSource hashingSource1 = HashingSource.hmacSha256(hashingSource0, byteString0);
      ByteString byteString1 = hashingSource1.hash();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteString1.toAsciiLowercase();
      byteString1.toAsciiUppercase();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)48;
      ByteString byteString2 = new ByteString(byteArray0);
      byteString1.indexOf(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 51, 582);
      try { 
        ByteString.read(byteArrayInputStream0, 101);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2009), 3641);
      ByteString.read(byteArrayInputStream0, (byte)0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "I6CHQB!,?V;GQ(qC)");
      ByteString.of(byteBuffer0);
      ByteString byteString1 = ByteString.of(byteBuffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.emit();
      HashingSink hashingSink0 = HashingSink.sha256(bufferedSink0);
      hashingSink0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      Object object1 = new Object();
      ByteString byteString2 = byteString1.sha256();
      Object object2 = new Object();
      byteString1.equals(byteString0);
      byte[] byteArray0 = byteString0.internalArray();
      ByteString byteString3 = new ByteString(byteArray0);
      byteString0.base64Url();
      byteString2.hashCode();
      HashingSource hashingSource0 = HashingSource.md5(realBufferedSource0);
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(hashingSource0);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      HashingSource hashingSource1 = HashingSource.hmacSha256(hashingSource0, byteString0);
      ByteString byteString1 = hashingSource1.hash();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      byteString0.indexOf(byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HashingSource.hmacSha256(buffer0, byteString0);
      ByteString byteString2 = byteString1.toAsciiLowercase();
      ByteString byteString3 = byteString1.toAsciiUppercase();
      ByteString byteString4 = hashingSource1.hash();
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString3;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteStringArray0[1] = byteString4;
      byteStringArray0[2] = byteString2;
      byteStringArray0[3] = byteString4;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString1;
      byteString2.equals(byteString3);
      byteString3.internalArray();
      byteString3.base64Url();
      byteString1.lastIndexOf(byteString3);
      ByteString.decodeBase64("");
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString(" (to read code point prefixed 0x", charset0);
      byteString0.toString();
      Buffer buffer0 = new Buffer();
      byteString0.hashCode();
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      Options.of(byteStringArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[0];
      byteString1.lastIndexOf(byteArray0, 49);
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 111);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString(" (to read code point prefixed 0x", charset0);
      byteString0.toString();
      charset0.encode("B");
      Buffer buffer0 = new Buffer();
      byteString0.hashCode();
      ByteString byteString1 = byteString0.substring((int) (byte)0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString2 = byteString0.toAsciiLowercase();
      ByteString byteString3 = byteString1.toAsciiUppercase();
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      ByteString byteString4 = hashingSource0.hash();
      ByteString byteString5 = byteString3.toAsciiLowercase();
      byteString0.endsWith(byteString4);
      byteString2.base64Url();
      HashingSink hashingSink0 = HashingSink.hmacSha512(buffer0, byteString4);
      hashingSink0.hash();
      byteString4.toString();
      byteString4.toString();
      byteString5.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      Object object1 = new Object();
      ByteString byteString6 = byteString2.sha256();
      Object object2 = new Object();
      byteString6.equals(charset0);
      byteString0.base64Url();
      ByteString.codePointIndexToCharIndex("[text= (to read code point prefixed 0x]", (byte)0);
      byteString5.substring((int) (byte)0, 0);
      byteString2.startsWith(byteString1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)92;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)92);
      try { 
        ByteString.read(byteArrayInputStream0, 52);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString.encodeString(" (to read code point prefixed 0x", charset0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byte[] byteArray1 = new byte[1];
      byteString0.indexOf(byteArray0);
      byteString0.md5();
      byteString0.md5();
      byteString0.toString();
      Charset charset1 = Charset.defaultCharset();
      charset1.encode("");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteString byteString1 = ByteString.of(byteArray1);
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)37;
      ByteString byteString2 = new ByteString(byteArray2);
      byteString1.base64Url();
      ByteString.codePointIndexToCharIndex("AA==", (byte)0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("_4XM{-=k%Bus", charset0);
      byteString0.toString();
      charset0.encode("B");
      Buffer buffer0 = new Buffer();
      byteString0.hashCode();
      byteString0.substring((int) (byte)0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      ByteString byteString1 = realBufferedSource0.readByteString();
      ByteString byteString2 = byteString0.toAsciiUppercase();
      HashingSource.hmacSha1(realBufferedSource0, byteString2);
      // Undeclared exception!
      try { 
        HashingSource.hmacSha1(realBufferedSource0, byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-64);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.toAsciiUppercase();
      ByteString byteString1 = new ByteString(byteArray0);
      byteString1.toString();
      ByteString.of(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byteString1.EMPTY.write(byteArrayOutputStream0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)21;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.startsWith(byteArray0);
      ByteString byteString1 = byteString0.sha256();
      MockFile mockFile0 = new MockFile("", "j<o_w]hqT(IL/\rl;QN");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      byteString0.equals(mockPrintStream0);
      byteString1.toString();
      byteString1.toString();
      byteString0.toString();
      byteString1.internalArray();
      byteString0.toString();
      String string0 = "z@H!4h'W5z^K*T`V";
      MockFile mockFile1 = new MockFile("", "z@H!4h'W5z^K*T`V");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFile1);
      mockPrintStream1.append((CharSequence) "[hex=3f15]");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream1);
      // Undeclared exception!
      try { 
        byteString0.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }
}
