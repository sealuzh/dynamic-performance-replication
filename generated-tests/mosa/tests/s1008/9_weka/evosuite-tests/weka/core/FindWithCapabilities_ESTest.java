/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 23:33:12 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ClassDiscovery;
import weka.core.FindWithCapabilities;
import weka.core.SingleIndex;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getNotCapabilities();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "d=Y#z)~:!";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Filename = "Upper limit has not been specified";
      findWithCapabilities0.getRevision();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals("Upper limit has not been specified", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.enableAllClasses();
      Capabilities capabilities1 = capabilities0.getClassCapabilities();
      findWithCapabilities0.m_Capabilities = capabilities1;
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.setFilename("2IiGp$~#;hWi");
      assertEquals("2IiGp$~#;hWi", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "d=Y#z)~:!";
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "d=Y#z)~:!";
      findWithCapabilities0.setFilename("-silent");
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getRevision();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Superclass = "d=Y#z)~:!";
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      capabilities0.enableAllClasses();
      capabilities0.toSource("unary-class", 0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities1.m_Packages = vector0;
      findWithCapabilities0.getMatches();
      capabilities0.capabilities();
      FindWithCapabilities.main(stringArray0);
      capabilities0.disable(capabilities_Capability0);
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.getFilename();
      findWithCapabilities0.find();
      assertEquals("-silent", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "cYN#BG&@H*JFlwQ)*";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-not-string-class";
      stringArray0[1] = "cYN#BG&@H*JFlwQ)*";
      stringArray0[2] = "cYN#BG&@H*JFlwQ)*";
      stringArray0[3] = "cYN#BG&@H*JFlwQ)*";
      stringArray0[4] = "cYN#BG&@H*JFlwQ)*";
      stringArray0[5] = "cYN#BG&@H*JFlwQ)*";
      stringArray0[6] = "cYN#BG&@H*JFlwQ)*";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.m_Superclass = "d=Y#z)~:!";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getMisses();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setClassIndex("-1");
      String[] stringArray0 = new String[1];
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "[";
      stringArray0[1] = "-c";
      stringArray0[2] = "*Nq~eDO$JO=8qiK'[4M";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "cYN#BG&@H*JFlwQ)*";
      stringArray0[1] = "l";
      stringArray0[2] = "i#DuehnsS'0Z";
      stringArray0[3] = "p^$Z9pj4vT5/S<Fl";
      stringArray0[4] = "-not-nominal-atts";
      stringArray0[5] = "class";
      stringArray0[6] = "MjKe3|Lgop";
      stringArray0[7] = "6t3u";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "51.\"Y";
      stringArray0[1] = "-numeric";
      stringArray0[2] = "*K6VR:'\"[1li,)}5F";
      stringArray0[3] = "\nOriginal dataset:\n";
      stringArray0[4] = "=+6Na<v1Aq(N$B";
      stringArray0[5] = "Q";
      stringArray0[6] = "-not-binary-atts";
      stringArray0[7] = ",OW*C_~BsxxQ";
      stringArray0[8] = ">j&i>:pE<5";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Random.setNextRandom((-3196));
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-not-unary-atts";
      stringArray0[1] = "03'7Zl>,5";
      stringArray0[2] = "repCache";
      stringArray0[3] = "BN}f~LUc+\"/";
      stringArray0[4] = "\tMust handle nominal classes.";
      stringArray0[5] = "?";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-not-string-atts";
      stringArray0[1] = "-seed";
      stringArray0[2] = "Ea)f_JBzO,k";
      stringArray0[3] = "-nominal-atts";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      String[] stringArray1 = new String[5];
      stringArray1[0] = "\"IEC?pqV{U.3@/1r(";
      stringArray1[1] = "p^$Z9pj4vT5/S<Fl";
      stringArray1[2] = "-not-date-atts";
      stringArray1[3] = ";";
      stringArray1[4] = ">|8B7t>:";
      FindWithCapabilities.main(stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "d=Y#z)~:!";
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "d=Y#z)~:!";
      findWithCapabilities0.setFilename("-silent");
      findWithCapabilities0.getFilename();
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
      
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.m_Superclass = "";
      Capabilities capabilities0 = findWithCapabilities1.m_NotCapabilities;
      capabilities0.enableAllClasses();
      capabilities0.enableAll();
      capabilities0.toSource("unary-class", 0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities1.m_Packages = vector0;
      Vector<String> vector1 = findWithCapabilities0.getMatches();
      assertTrue(vector1.equals((Object)vector0));
      
      capabilities0.capabilities();
      FindWithCapabilities.main(stringArray0);
      capabilities0.disable(capabilities_Capability0);
      findWithCapabilities1.setCapabilities(capabilities0);
      Capabilities capabilities1 = findWithCapabilities0.getNotCapabilities();
      assertTrue(capabilities1.hasDependencies());
      
      findWithCapabilities0.listOptions();
      findWithCapabilities1.setCapabilities(capabilities0);
      Vector<String> vector2 = findWithCapabilities1.find();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      Vector<String> vector3 = findWithCapabilities1.getMatches();
      assertSame(vector3, vector2);
      
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability2);
      boolean boolean0 = findWithCapabilities1.handles(capabilities_Capability1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.getFailReason();
      capabilities0.m_FailReason = null;
      HashSet<Capabilities.Capability> hashSet0 = capabilities0.m_Dependencies;
      capabilities0.m_Capabilities = hashSet0;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      capabilities0.capabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.setHandler(findWithCapabilities1);
      findWithCapabilities1.setFilename("weka/core/Capabilities.props");
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      findWithCapabilities1.m_ClassIndex = singleIndex0;
      findWithCapabilities1.m_Matches = vector0;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      findWithCapabilities1.getNotCapabilities();
      System.setCurrentTimeMillis(0L);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("Yl.+b6");
      findWithCapabilities0.listOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability2);
      findWithCapabilities1.listOptions();
      assertEquals("weka/core/Capabilities.props", findWithCapabilities1.getFilename());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-date-class";
      stringArray0[1] = "ich:";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-only-multiinstance";
      stringArray0[1] = "-t";
      stringArray0[2] = "ich:";
      stringArray0[3] = "weka.core.ClassDiscovery";
      stringArray0[4] = "W";
      stringArray0[5] = "relational-atts";
      stringArray0[6] = "Hx+.79";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Unable to continue with installation.";
      stringArray0[1] = ":_1\"-73a@";
      stringArray0[2] = "-numeric-class";
      stringArray0[3] = "Class attribute: ";
      stringArray0[4] = "eZeJ!;5zfo";
      stringArray0[5] = "Numeric attributes";
      stringArray0[6] = "n;O0j_.kR{Ry$`cxVo";
      stringArray0[7] = "A";
      stringArray0[8] = ",";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "O'DhF-|z#rII66Oj\"\"";
      stringArray0[1] = "kn";
      stringArray0[2] = "-no-class";
      stringArray0[3] = "-no-no-class";
      stringArray0[4] = "M8<N.Gikym";
      stringArray0[5] = "\"]";
      stringArray0[6] = "5e$gz=t#qIZ2)h\"@f^";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability0);
      stringArray0[7] = "G&2N0";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities1.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kwp/#oN}bsG}");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.m_Misses = null;
      findWithCapabilities1.setFilename("kwp/#oN}bsG}");
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities1.setFilename("kwp/#oN}bsG}");
      findWithCapabilities1.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      findWithCapabilities1.disableNot(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getOptions();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("RE$hV_hb^W");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.setFilename("RE$hV_hb^W");
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      assertEquals("RE$hV_hb^W", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      System.setCurrentTimeMillis((-1503L));
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "weka.core.GlobalInfoJavadoc";
      stringArray0[1] = "-relational-atts";
      stringArray0[2] = ";";
      stringArray0[3] = "\tMust handle relational attributes.";
      stringArray0[4] = ";E>";
      stringArray0[5] = "Enter Username and Password";
      stringArray0[6] = "+S]J/{";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "3k4U";
      stringArray0[1] = "t|";
      stringArray0[2] = ";N#mk@9o'-`1YbIm'";
      stringArray0[3] = "-unary-class";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "cYN#BG&@H*JFlwQ)*";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      boolean boolean0 = findWithCapabilities0.handles(capabilities_Capability0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "cYN#BG&@H*JFlwQ)*";
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enable(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.enable(capabilities_Capability0);
      findWithCapabilities0.m_Superclass = "cYN#BG&@H*JFlwQ)*";
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getHandler();
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "/OKjC";
      stringArray0[1] = "-nominal-class";
      stringArray0[2] = "ujkX'xcyWT?";
      stringArray0[3] = "not-missing-att-values";
      stringArray0[4] = "$";
      stringArray0[5] = "Upper bound (";
      stringArray0[6] = "tTar:ocl4<g'4i";
      stringArray0[7] = "";
      stringArray0[8] = "Attribute isn't relation-valued!";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "At least 2 words must be provided!";
      stringArray0[1] = "\tMust handle nominal classes.";
      stringArray0[2] = "-string-atts";
      stringArray0[3] = "not-nominal-atts";
      stringArray0[4] = "x/eWD$jxp[<h:$";
      stringArray0[5] = "[";
      stringArray0[6] = "qd.QwB{d;OKwv8oj]";
      stringArray0[7] = "min # Instance: ";
      FindWithCapabilities.main(stringArray0);
  }
}
