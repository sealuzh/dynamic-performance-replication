/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 11:51:13 GMT 2018
 */

package wheel.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.junit.runner.RunWith;
import wheel.ErrorPage;
import wheel.components.Component;
import wheel.components.ElExpression;
import wheel.components.StandaloneComponent;
import wheel.util.DynamicSelectModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DynamicSelectModel_ESTest extends DynamicSelectModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.value(".e@/Gd,,1");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.collection(".e@/Gd,,1");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel2.label("YF_`2P-mq,}AJPS~");
      dynamicSelectModel3.label("aE]");
      Object object0 = new Object();
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel3.empty(object0);
      dynamicSelectModel4.getComponent();
      dynamicSelectModel3.translator("YF_`2P-mq,}AJPS~");
      DynamicSelectModel dynamicSelectModel5 = dynamicSelectModel0.collection("ha%.");
      dynamicSelectModel5.setComponent((Component) null);
      int int0 = 0;
      // Undeclared exception!
      try { 
        dynamicSelectModel2.getLabel(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression ha%. to create a dynamic ISelectModel.
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.reset();
      // Undeclared exception!
      try { 
        dynamicSelectModel0.getObjects();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      dynamicSelectModel0.reset();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.translator("");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.enumeration("");
      dynamicSelectModel1.label("");
      // Undeclared exception!
      try { 
        dynamicSelectModel2.getLabel(1253);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression .values() to create a dynamic ISelectModel.
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      // Undeclared exception!
      try { 
        dynamicSelectModel0.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      ElExpression elExpression0 = new ElExpression("");
      DynamicSelectModel dynamicSelectModel0 = null;
      try {
        dynamicSelectModel0 = new DynamicSelectModel(elExpression0, elExpression0, elExpression0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Collection attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("w)q");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.label("w)q");
      // Undeclared exception!
      try { 
        dynamicSelectModel2.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Value attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      String string0 = "E(cvL=8o{'1}|OZ0N";
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("E(cvL=8o{'1}|OZ0N");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel1.label("E(cvL=8o{'1}|OZ0N");
      dynamicSelectModel2.collection("E(cvL=8o{'1}|OZ0N");
      dynamicSelectModel2.validate();
      dynamicSelectModel2.enumeration("E(cvL=8o{'1}|OZ0N");
      dynamicSelectModel0.reset();
      dynamicSelectModel0.getComponent();
      dynamicSelectModel0.collection("E(cvL=8o{'1}|OZ0N");
      String string1 = "\"-q6AW$MO[2+kQ/Sl.g";
      // Undeclared exception!
      try { 
        dynamicSelectModel0.translateValue("\"-q6AW$MO[2+kQ/Sl.g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression E(cvL=8o{'1}|OZ0N to create a dynamic ISelectModel.
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      ErrorPage errorPage0 = new ErrorPage();
      dynamicSelectModel0.translator("kQJ");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      mockHijrahDate0.getMockedClassName();
      errorPage0.h4((Object) mockHijrahDate0);
      dynamicSelectModel0.setTopLevelComponent(errorPage0);
      dynamicSelectModel0.label("*04CRJ6wPHeNa7>");
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      MockMinguoDate.now();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.empty(mockMinguoDate0);
      // Undeclared exception!
      try { 
        dynamicSelectModel1.getObjects();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.value((String) null);
      dynamicSelectModel0.collection("org.mvel.ast.AssertNode");
      // Undeclared exception!
      try { 
        dynamicSelectModel1.getValue(30);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expression org.mvel.ast.AssertNode evaluated to an object that is not an instance of Collection or Object[]. Can't build a dynamic ISelectModel
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.enumeration("http://www.w3.org/XML/1998/namespace");
      dynamicSelectModel0.getTopLevelComponent();
      dynamicSelectModel0.setTopLevelComponent((StandaloneComponent) null);
      // Undeclared exception!
      try { 
        dynamicSelectModel1.getValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not evaluate expression http://www.w3.org/XML/1998/namespace.values() to create a dynamic ISelectModel.
         //
         verifyException("wheel.components.ElExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.value((String) null);
      dynamicSelectModel0.collection("[] from ");
      // Undeclared exception!
      try { 
        dynamicSelectModel1.getValue(3326);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3326
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("[] from ");
      dynamicSelectModel1.translateValue("");
      // Undeclared exception!
      try { 
        dynamicSelectModel1.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Label attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("[] from ");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      dynamicSelectModel1.value("[] from ");
      DynamicSelectModel dynamicSelectModel2 = new DynamicSelectModel();
      Object object0 = new Object();
      dynamicSelectModel2.empty(object0);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      dynamicSelectModel1.empty(mockMinguoDate0);
      dynamicSelectModel1.translateValue("[] from ");
      // Undeclared exception!
      try { 
        dynamicSelectModel1.validate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Could not create DynamicSelection model. Label attribute was null or not an el-expression.
         //
         verifyException("wheel.util.DynamicSelectModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DynamicSelectModel dynamicSelectModel0 = new DynamicSelectModel();
      DynamicSelectModel dynamicSelectModel1 = dynamicSelectModel0.collection("[] from ");
      DynamicSelectModel dynamicSelectModel2 = dynamicSelectModel0.collection("[] from ");
      DynamicSelectModel dynamicSelectModel3 = dynamicSelectModel0.value("[] from ");
      Object object0 = new Object();
      DynamicSelectModel dynamicSelectModel4 = dynamicSelectModel0.empty(dynamicSelectModel3);
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      dynamicSelectModel0.translateValue((String) null);
      dynamicSelectModel2.label("[] from ");
      dynamicSelectModel2.translateValue("org.mvel.util.FastList@0000000042");
      dynamicSelectModel4.getOptionCount();
      DynamicSelectModel dynamicSelectModel5 = dynamicSelectModel1.translator((String) null);
      assertSame(dynamicSelectModel5, dynamicSelectModel3);
  }
}
