/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 13:11:10 GMT 2018
 */

package com.alibaba.fastjson.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.ParseContext;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.JavaBeanSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.StringCodec;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.time.DateTimeException;
import java.time.chrono.JapaneseDate;
import java.time.chrono.JapaneseEra;
import java.util.HashMap;
import java.util.IdentityHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringCodec_ESTest extends StringCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StringCodec stringCodec0 = new StringCodec();
      stringCodec0.getFastMatchToken();
      JSONSerializer jSONSerializer0 = null;
      JapaneseEra japaneseEra0 = JapaneseEra.TAISHO;
      // Undeclared exception!
      try { 
        MockJapaneseDate.of(japaneseEra0, 0, (-1305), 16);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // year, month, and day not valid for Era
         //
         verifyException("java.time.chrono.JapaneseDate", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StringCodec stringCodec0 = new StringCodec();
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeConfig0);
      stringCodec0.write(jSONSerializer0, ";2^");
      assertNull(jSONSerializer0.getDateFormatPattern());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StringCodec stringCodec0 = StringCodec.instance;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      defaultJSONParser0.getContext();
      ParseContext parseContext0 = defaultJSONParser0.setContext((ParseContext) null, (Object) stringCodec0, (Object) null);
      Type type0 = parseContext0.type;
      Method method0 = stringCodec0.deserialze(defaultJSONParser0, (Type) null, (Object) "");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      StringCodec stringCodec0 = StringCodec.instance;
      int int0 = stringCodec0.getFastMatchToken();
      assertEquals(4, int0);
      
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Class<Object> class0 = Object.class;
      Class<MockHijrahDate> class1 = MockHijrahDate.class;
      IdentityHashMap<String, Field> identityHashMap0 = new IdentityHashMap<String, Field>();
      ParserConfig.getFieldFromCache("\"}", identityHashMap0);
      FieldInfo fieldInfo0 = new FieldInfo("", class0, class1, class1, (Field) null, (-1245), 16, 16);
      BeanContext beanContext0 = new BeanContext(class0, fieldInfo0);
      beanContext0.getMethod();
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(jSONType0);
      stringCodec0.write(jSONSerializer0, (Object) null, (Object) "", (Type) null, (-1245));
      assertEquals(4, stringCodec0.getFastMatchToken());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("WriteNonStringKeyAsString");
      Class<StringBuffer> class0 = StringBuffer.class;
      DefaultJSONParser defaultJSONParser1 = new DefaultJSONParser("");
      StringCodec stringCodec0 = new StringCodec();
      Method method0 = stringCodec0.deserialze(defaultJSONParser1, (Type) class0, (Object) defaultJSONParser1);
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      StringCodec stringCodec0 = new StringCodec();
      StringCodec stringCodec1 = StringCodec.instance;
      Class<StringBuilder> class0 = StringBuilder.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      FieldInfo[] fieldInfoArray0 = new FieldInfo[0];
      SerializeBeanInfo serializeBeanInfo0 = new SerializeBeanInfo(class0, jSONType0, "", ";?4n", (-1663), fieldInfoArray0, fieldInfoArray0);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(serializeBeanInfo0);
      Class<?> class1 = javaBeanSerializer0.getType();
      Method method0 = stringCodec1.deserialze(defaultJSONParser0, (Type) class1, (Object) ";?4n");
      assertNull(method0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      StringCodec stringCodec0 = new StringCodec();
      StringCodec stringCodec1 = StringCodec.instance;
      Class<StringBuilder> class0 = StringBuilder.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      FieldInfo[] fieldInfoArray0 = new FieldInfo[0];
      SerializeBeanInfo serializeBeanInfo0 = new SerializeBeanInfo(class0, jSONType0, "", ";?4n", (-1663), fieldInfoArray0, fieldInfoArray0);
      JavaBeanSerializer javaBeanSerializer0 = new JavaBeanSerializer(serializeBeanInfo0);
      Method method0 = stringCodec1.deserialze(defaultJSONParser0, (Type) class0, (Object) ";?4n");
      assertNull(method0);
  }
}
