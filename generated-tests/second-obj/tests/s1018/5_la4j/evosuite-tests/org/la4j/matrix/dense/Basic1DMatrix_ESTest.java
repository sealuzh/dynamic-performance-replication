/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 05:34:18 GMT 2018
 */

package org.la4j.matrix.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.iterator.MatrixIterator;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.operation.MatrixMatrixOperation;
import org.la4j.vector.DenseVector;
import org.la4j.vector.functor.VectorAccumulator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Basic1DMatrix_ESTest extends Basic1DMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[9][7];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        basic1DMatrix0.copyOfShape((-1), 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1x32
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)125;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      // Undeclared exception!
      try { 
        basic1DMatrix0.get(2359, 2359);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2359' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      Vector vector0 = basic1DMatrix0.getRow(8);
      assertEquals(0, vector0.length());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(1, mockRandom0);
      assertEquals(1, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(0);
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(945, 7);
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertNotNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket("Sides of blocks are ncompatible!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(1);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(1, 1, mockRandom0);
      basic1DMatrix0.iterator();
      // Undeclared exception!
      try { 
        basic1DMatrix0.blankOfShape((-4688), 9996);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.copyOfShape(32, 32);
      basic1DMatrix0.swapRows(16, 1637);
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4053;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(4053, 4053, doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertArrayEquals(new double[] {4053.0}, doubleArray0, 0.01);
      assertEquals(4053, basic1DMatrix0.rows());
      assertEquals(4053, basic1DMatrix0.columns());
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.copyOfShape(814, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(572, 572);
      assertNotNull(basic1DMatrix0);
      assertEquals(572, basic1DMatrix0.columns());
      assertEquals(572, basic1DMatrix0.rows());
      
      basic1DMatrix0.copyOfShape(572, 572);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(0, 0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      MatrixFactory<Basic1DMatrix> matrixFactory0 = (MatrixFactory<Basic1DMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        basic1DMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      basic1DMatrix0.swapColumns(17, 1);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV("");
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertNotNull(doubleArray0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.set((-2743), (-2743), (-2743));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2743' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      basic1DMatrix0.swapRows(3, 8);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertNotNull(doubleArray0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(589, 589);
      assertNotNull(basic1DMatrix0);
      assertEquals(589, basic1DMatrix0.columns());
      assertEquals(589, basic1DMatrix0.rows());
      
      basic1DMatrix0.swapRows(906, 3865);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(0, 0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      basic1DMatrix0.setAll(0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(27, 27);
      assertNotNull(basic1DMatrix0);
      assertEquals(27, basic1DMatrix0.rows());
      assertEquals(27, basic1DMatrix0.columns());
      
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapColumns(27, 2309);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2309
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.diagonal(0, 0);
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      MatrixFactory<Basic1DMatrix> matrixFactory0 = (MatrixFactory<Basic1DMatrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn(basic1DMatrix0).when(matrixFactory0).apply(anyInt() , anyInt());
      Basic1DMatrix basic1DMatrix1 = basic1DMatrix0.to(matrixFactory0);
      assertNotNull(basic1DMatrix1);
      assertSame(basic1DMatrix0, basic1DMatrix1);
      assertSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix1.rows());
      assertEquals(0, basic1DMatrix1.columns());
      
      basic1DMatrix0.setAll(0);
      assertSame(basic1DMatrix0, basic1DMatrix1);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      Vector vector0 = basic1DMatrix1.getRow(0);
      assertNotNull(vector0);
      assertSame(basic1DMatrix0, basic1DMatrix1);
      assertSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix1.rows());
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(0, vector0.length());
      
      byte[] byteArray0 = basic1DMatrix1.toBinary();
      assertNotNull(byteArray0);
      assertSame(basic1DMatrix0, basic1DMatrix1);
      assertSame(basic1DMatrix1, basic1DMatrix0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix1.rows());
      assertEquals(0, basic1DMatrix1.columns());
      
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.fromBinary(byteArray0);
      assertTrue(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertTrue(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertNotNull(basic1DMatrix2);
      assertSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix0, basic1DMatrix2);
      assertNotSame(basic1DMatrix1, basic1DMatrix2);
      assertSame(basic1DMatrix1, basic1DMatrix0);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix1.rows());
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(0, basic1DMatrix2.rows());
      assertEquals(0, basic1DMatrix2.columns());
      
      Matrix matrix0 = null;
      // Undeclared exception!
      try { 
        basic1DMatrix1.subtract((Matrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      basic1DMatrix0.swapColumns(17, 17);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      basic1DMatrix0.swapRows((-7), (-7));
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      double[][] doubleArray0 = basic1DMatrix0.toArray();
      assertNotNull(doubleArray0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DenseMatrix denseMatrix0 = DenseMatrix.identity(27);
      assertNotNull(denseMatrix0);
      assertEquals(27, denseMatrix0.rows());
      assertEquals(27, denseMatrix0.columns());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 28
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotNull(basic1DMatrix1);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix1.columns());
      assertEquals(0, basic1DMatrix1.rows());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(0, 0, doubleArray0);
      assertNotNull(basic1DMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      
      Matrix matrix0 = basic1DMatrix0.copyOfRows(0);
      assertTrue(matrix0.equals((Object)basic1DMatrix0));
      assertNotNull(matrix0);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix0, basic1DMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, matrix0.columns());
      assertEquals(0, matrix0.rows());
      
      Matrix matrix1 = basic1DMatrix0.copyOfShape(2274, 0);
      assertTrue(basic1DMatrix0.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(matrix1.equals((Object)basic1DMatrix0));
      assertNotNull(matrix1);
      assertNotSame(basic1DMatrix0, matrix1);
      assertNotSame(basic1DMatrix0, matrix0);
      assertNotSame(matrix1, matrix0);
      assertNotSame(matrix1, basic1DMatrix0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(2274, matrix1.rows());
      assertEquals(0, matrix1.columns());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(1, 1);
      assertNotNull(basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      
      MatrixIterator matrixIterator0 = basic1DMatrix0.iterator();
      assertNotNull(matrixIterator0);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1);
      assertNotNull(denseMatrix0);
      assertEquals(1, denseMatrix0.columns());
      assertEquals(1, denseMatrix0.rows());
      
      MatrixMatrixOperation<Basic1DMatrix> matrixMatrixOperation0 = (MatrixMatrixOperation<Basic1DMatrix>) mock(MatrixMatrixOperation.class, new ViolatedAssumptionAnswer());
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      double[] doubleArray0 = basic1DMatrix0.foldRows(vectorAccumulator0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      
      byte[] byteArray0 = basic1DMatrix0.toBinary();
      assertNotNull(byteArray0);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.fromBinary(byteArray0);
      assertTrue(basic1DMatrix1.equals((Object)basic1DMatrix0));
      assertNotNull(basic1DMatrix1);
      assertNotSame(basic1DMatrix0, basic1DMatrix1);
      assertNotSame(basic1DMatrix1, basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix1.columns());
      assertEquals(1, basic1DMatrix1.rows());
      
      Basic1DMatrix basic1DMatrix2 = Basic1DMatrix.zero(0, 37);
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix1));
      assertFalse(basic1DMatrix2.equals((Object)basic1DMatrix0));
      assertNotNull(basic1DMatrix2);
      assertNotSame(basic1DMatrix2, basic1DMatrix1);
      assertNotSame(basic1DMatrix2, basic1DMatrix0);
      assertEquals(0, basic1DMatrix2.rows());
      assertEquals(37, basic1DMatrix2.columns());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      int int0 = (-165);
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) (-165);
      Matrix matrix0 = Matrix.unit(579, 579);
      assertNotNull(matrix0);
      assertEquals(579, matrix0.columns());
      assertEquals(579, matrix0.rows());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, matrix0, basic1DMatrix0, basic1DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      assertNotNull(basic1DMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = basic1DMatrix0.toColumnMajorSparseMatrix();
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, basic1DMatrix0.rows());
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.columns());
      assertEquals(Double.NaN, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.rows());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(6, 1, 1);
      assertNotNull(sparseMatrix0);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(6, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(1, sparseMatrix0.columns());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, sparseMatrix0, sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(1, 1);
      assertNotNull(basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1, basic1DMatrix0.columns());
      
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(6, 1, 1);
      assertNotNull(sparseMatrix0);
      assertEquals(1, sparseMatrix0.columns());
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0, sparseMatrix0.cardinality());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(6, sparseMatrix0.rows());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, sparseMatrix0, sparseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 1;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.zero(1, 1);
      assertNotNull(basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = basic1DMatrix0.toColumnMajorSparseMatrix();
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(0.0, columnMajorSparseMatrix0.max(), 0.01);
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(0.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(0, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1, columnMajorSparseMatrix0.rows());
      assertEquals(1, columnMajorSparseMatrix0.columns());
      
      MockRandom mockRandom0 = new MockRandom(1);
      assertNotNull(mockRandom0);
      
      SparseMatrix sparseMatrix0 = SparseMatrix.zero(6, 1, 1);
      assertNotNull(sparseMatrix0);
      assertEquals(0, sparseMatrix0.cardinality());
      assertTrue(sparseMatrix0.isRowMajor());
      assertEquals(0.0, sparseMatrix0.max(), 0.01);
      assertEquals(6, sparseMatrix0.rows());
      assertEquals(0.0, sparseMatrix0.density(), 0.01);
      assertEquals(0.0, sparseMatrix0.min(), 0.01);
      assertEquals(1, sparseMatrix0.columns());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(columnMajorSparseMatrix0, basic1DMatrix0, basic1DMatrix0, sparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(1);
      assertNotNull(basic1DMatrix0);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = basic1DMatrix0.toColumnMajorSparseMatrix();
      assertNotNull(columnMajorSparseMatrix0);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(1, basic1DMatrix0.rows());
      assertEquals(1.0, columnMajorSparseMatrix0.max(), 0.01);
      assertEquals(1.0, columnMajorSparseMatrix0.density(), 0.01);
      assertEquals(1, columnMajorSparseMatrix0.cardinality());
      assertEquals(0.0, columnMajorSparseMatrix0.min(), 0.01);
      assertEquals(1, columnMajorSparseMatrix0.columns());
      assertFalse(columnMajorSparseMatrix0.isRowMajor());
      assertEquals(1, columnMajorSparseMatrix0.rows());
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertNotNull(denseVector0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      
      Matrix matrix0 = denseVector0.toRowMatrix();
      assertNotNull(matrix0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertEquals(1, matrix0.rows());
      assertEquals(0, matrix0.columns());
      
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, matrix0, basic1DMatrix0, basic1DMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }
}
