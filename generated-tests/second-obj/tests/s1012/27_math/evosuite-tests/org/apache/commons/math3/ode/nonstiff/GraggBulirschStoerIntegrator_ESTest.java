/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:37:30 GMT 2018
 */

package org.apache.commons.math3.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.EquationsMapper;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondaryEquations;
import org.apache.commons.math3.ode.events.EventFilter;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.events.FilterType;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GraggBulirschStoerIntegrator_ESTest extends GraggBulirschStoerIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 2.3805896467049493E-39, 0.0, 0.0);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-426.0), (-426.0), (-426.0), (-426.0));
      graggBulirschStoerIntegrator0.setControlFactors(2.558581829071045, 2.558581829071045, (-1563.72), (-426.0));
      graggBulirschStoerIntegrator0.setOrderControl(2580, (-426.0), 2580);
      assertEquals(426.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2327.972), 0.0, 0.0, 635.0774508587003);
      graggBulirschStoerIntegrator0.setControlFactors(9.362866914115166E-285, 9.362866914115166E-285, (-2327.972), 635.0774508587003);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1669.4598377382201), (-1669.4598377382201), 1.908415302517694E-250, (-3.304167134225169E-8));
      graggBulirschStoerIntegrator0.setOrderControl(491, 518.44604, (-1739.2));
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 17);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 930);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.4390208226263824E-8;
      doubleArray0[1] = 1.4390208226263824E-8;
      doubleArray0[2] = 1.7976931348623157E308;
      doubleArray0[3] = 1.4390208226263824E-8;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.7976931348623157E308, 1.4390208226263824E-8, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl(820, 1.7976931348623157E308, 1.7976931348623157E308);
      assertEquals(1.6083898326461063E150, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0E-4, 1.0E-4, 0.0, 1.7976931348623157E308);
      graggBulirschStoerIntegrator0.setControlFactors(1.0E-4, 110.0, 1.7976931348623157E308, 1.7976931348623157E308);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((ExpandableStatefulODE) null, 1445.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2072.0, 2072.0, 999.9, (-4.544525556171388E15));
      graggBulirschStoerIntegrator0.setControlFactors((-2249.8331574), 6.475395788197505, 2757.218808156, 2757.218808156);
      assertEquals(2072.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2757.218808156, 0.0, 0.0, 2757.218808156);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.vecAbsoluteTolerance = null;
      graggBulirschStoerIntegrator0.setControlFactors((-283.3769), 0.8, 2757.218808156, 0.0);
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 0);
      assertEquals(2757.218808156, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2261.0063);
      doubleArray0[1] = (-302.69972407);
      doubleArray0[2] = (-152.2);
      doubleArray0[3] = (-2261.0063);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-152.2), (-2261.0063), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 4);
      assertEquals(586.6218192839403, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      EventFilter eventFilter1 = new EventFilter(eventFilter0, filterType0);
      FilterType filterType1 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter2 = new EventFilter(eventFilter1, filterType1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-3945.12));
      expandableStatefulODE0.getSecondaryMappers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1533.0, (-3945.12), 1732.8039185290688, 5.298749302736127E206);
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (double) 1089);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter1);
      expandableStatefulODE1.getCompleteState();
      expandableStatefulODE1.setTime(1.0E-4);
      expandableStatefulODE1.getSecondaryMappers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2252.937405782534), (-1739.79474375714), 1.0E-4, 4210.220673);
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE1, 1114.9549663);
      assertEquals(11, graggBulirschStoerIntegrator0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(4, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(4, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertNotNull(firstOrderConverter1);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter1);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE1.getTime(), 0.01);
      assertNotNull(expandableStatefulODE1);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertFalse(expandableStatefulODE1.equals((Object)expandableStatefulODE0));
      
      double[] doubleArray0 = expandableStatefulODE1.getCompleteState();
      assertEquals(0, firstOrderConverter1.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE1.getTime(), 0.01);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertFalse(expandableStatefulODE1.equals((Object)expandableStatefulODE0));
      assertNotSame(firstOrderConverter1, firstOrderConverter0);
      assertNotSame(expandableStatefulODE1, expandableStatefulODE0);
      
      expandableStatefulODE1.setTime(1.0E-4);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertEquals(1.0E-4, expandableStatefulODE1.getTime(), 0.01);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertFalse(expandableStatefulODE1.equals((Object)expandableStatefulODE0));
      assertNotSame(firstOrderConverter1, firstOrderConverter0);
      assertNotSame(expandableStatefulODE1, expandableStatefulODE0);
      
      EquationsMapper[] equationsMapperArray0 = expandableStatefulODE1.getSecondaryMappers();
      assertEquals(0, firstOrderConverter1.getDimension());
      assertEquals(1.0E-4, expandableStatefulODE1.getTime(), 0.01);
      assertNotNull(equationsMapperArray0);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertFalse(expandableStatefulODE1.equals((Object)expandableStatefulODE0));
      assertNotSame(firstOrderConverter1, firstOrderConverter0);
      assertNotSame(expandableStatefulODE1, expandableStatefulODE0);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2252.937405782534), (-1739.79474375714), 1.0E-4, 4210.220673);
      assertEquals(1979.810257725295, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(2252.937405782534, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1739.79474375714, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE1, 1114.9549663);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertEquals(1114.9549663, expandableStatefulODE1.getTime(), 0.01);
      assertEquals(1979.810257725295, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(21, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(2252.937405782534, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1739.79474375714, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertFalse(expandableStatefulODE1.equals((Object)expandableStatefulODE0));
      assertNotSame(firstOrderConverter1, firstOrderConverter0);
      assertNotSame(expandableStatefulODE1, expandableStatefulODE0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      assertNotNull(eventFilter0);
      
      FilterType filterType1 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter1 = new EventFilter(eventFilter0, filterType1);
      assertNotNull(eventFilter1);
      assertFalse(filterType0.equals((Object)filterType1));
      assertFalse(filterType1.equals((Object)filterType0));
      assertFalse(eventFilter1.equals((Object)eventFilter0));
      
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE1.getTime(), 0.01);
      assertNotNull(expandableStatefulODE1);
      assertFalse(expandableStatefulODE1.equals((Object)expandableStatefulODE0));
      
      int int0 = expandableStatefulODE0.getTotalDimension();
      assertEquals(2, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertFalse(expandableStatefulODE0.equals((Object)expandableStatefulODE1));
      assertNotSame(expandableStatefulODE0, expandableStatefulODE1);
      assertEquals(2, int0);
      
      expandableStatefulODE0.setTime(0.0);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertEquals(0.0, expandableStatefulODE0.getTime(), 0.01);
      assertFalse(expandableStatefulODE0.equals((Object)expandableStatefulODE1));
      assertNotSame(expandableStatefulODE0, expandableStatefulODE1);
      
      ExpandableStatefulODE expandableStatefulODE2 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE2.getTime(), 0.01);
      assertNotNull(expandableStatefulODE2);
      assertFalse(expandableStatefulODE2.equals((Object)expandableStatefulODE1));
      assertFalse(expandableStatefulODE2.equals((Object)expandableStatefulODE0));
      
      expandableStatefulODE2.setTime(1.2300209999084473);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertEquals(1.2300209999084473, expandableStatefulODE2.getTime(), 0.01);
      assertFalse(expandableStatefulODE2.equals((Object)expandableStatefulODE1));
      assertFalse(expandableStatefulODE2.equals((Object)expandableStatefulODE0));
      assertNotSame(expandableStatefulODE2, expandableStatefulODE1);
      assertNotSame(expandableStatefulODE2, expandableStatefulODE0);
      
      expandableStatefulODE1.setTime((-1505.0));
      assertEquals(2, firstOrderConverter0.getDimension());
      assertEquals((-1505.0), expandableStatefulODE1.getTime(), 0.01);
      assertFalse(expandableStatefulODE1.equals((Object)expandableStatefulODE0));
      assertFalse(expandableStatefulODE1.equals((Object)expandableStatefulODE2));
      assertNotSame(expandableStatefulODE1, expandableStatefulODE0);
      assertNotSame(expandableStatefulODE1, expandableStatefulODE2);
      
      EquationsMapper[] equationsMapperArray0 = expandableStatefulODE0.getSecondaryMappers();
      assertEquals(2, firstOrderConverter0.getDimension());
      assertEquals(0.0, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(equationsMapperArray0);
      assertFalse(expandableStatefulODE0.equals((Object)expandableStatefulODE2));
      assertFalse(expandableStatefulODE0.equals((Object)expandableStatefulODE1));
      assertNotSame(expandableStatefulODE0, expandableStatefulODE2);
      assertNotSame(expandableStatefulODE0, expandableStatefulODE1);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1533.0, 51893.88011363003, (-1680.645534), 4.806827797299427E-9);
      assertEquals(51893.88011363003, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1533.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(8919.266685899398, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertNotNull(graggBulirschStoerIntegrator0);
      
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE2, (-1505.0));
      assertEquals(2, firstOrderConverter0.getDimension());
      assertEquals((-1505.0), expandableStatefulODE2.getTime(), 0.01);
      assertEquals(51893.88011363003, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(11, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1533.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(8919.266685899398, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertFalse(expandableStatefulODE2.equals((Object)expandableStatefulODE1));
      assertFalse(expandableStatefulODE2.equals((Object)expandableStatefulODE0));
      assertNotSame(expandableStatefulODE2, expandableStatefulODE1);
      assertNotSame(expandableStatefulODE2, expandableStatefulODE0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-25.421635519026875), 0.0, 0.0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(25.421635519026875, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertNotNull(graggBulirschStoerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(6).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(12, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(12, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1732.8039185290688, 1732.8039185290688, 4.2634204358490415E-9, 4.2634204358490415E-9);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1732.8039185290688, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1732.8039185290688, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(1732.8039185290688, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      expandableStatefulODE0.setTime(1732.8039185290688);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(1732.8039185290688, expandableStatefulODE0.getTime(), 0.01);
      
      EquationsMapper[] equationsMapperArray0 = expandableStatefulODE0.getSecondaryMappers();
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(1732.8039185290688, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(equationsMapperArray0);
      
      expandableStatefulODE0.setTime(17);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(17.0, expandableStatefulODE0.getTime(), 0.01);
      
      EquationsMapper[] equationsMapperArray1 = expandableStatefulODE0.getSecondaryMappers();
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(17.0, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(equationsMapperArray1);
      assertFalse(equationsMapperArray1.equals((Object)equationsMapperArray0));
      assertNotSame(equationsMapperArray1, equationsMapperArray0);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(4.0E-15, 4.2634204358490415E-9, (-1.251132499594621), 4.2634204358490415E-9);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(4.2634204358490415E-9, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals(4.0E-15, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertEquals(0, graggBulirschStoerIntegrator1.getEvaluations());
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(4.129610362176578E-12, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator1.getMaxEvaluations());
      assertNotNull(graggBulirschStoerIntegrator1);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (double) 1089);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1732.8039185290688, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1732.8039185290688, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(1732.8039185290688, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(101, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(1089.0, expandableStatefulODE0.getTime(), 0.01);
      assertFalse(graggBulirschStoerIntegrator0.equals((Object)graggBulirschStoerIntegrator1));
      assertNotSame(graggBulirschStoerIntegrator0, graggBulirschStoerIntegrator1);
      
      graggBulirschStoerIntegrator1.setControlFactors(2, (-2675.363903048167), 2.0, 5.835535713349749E206);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(4.2634204358490415E-9, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals(4.0E-15, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertEquals(0, graggBulirschStoerIntegrator1.getEvaluations());
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(4.129610362176578E-12, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator1.getMaxEvaluations());
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertNotSame(graggBulirschStoerIntegrator1, graggBulirschStoerIntegrator0);
      
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      assertEquals(0.0, bisectionSolver0.getMax(), 0.01);
      assertEquals(0, bisectionSolver0.getEvaluations());
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMin(), 0.01);
      assertEquals(1.0E-6, bisectionSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getStartValue(), 0.01);
      assertEquals(0, bisectionSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(bisectionSolver0);
      
      graggBulirschStoerIntegrator1.addEventHandler((EventHandler) null, (-100.2836619), 5.835535713349749E206, 2, (UnivariateSolver) bisectionSolver0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(4.2634204358490415E-9, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals(4.0E-15, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertEquals(0, graggBulirschStoerIntegrator1.getEvaluations());
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(4.129610362176578E-12, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator1.getMaxEvaluations());
      assertEquals(0.0, bisectionSolver0.getMax(), 0.01);
      assertEquals(0, bisectionSolver0.getEvaluations());
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMin(), 0.01);
      assertEquals(1.0E-6, bisectionSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getStartValue(), 0.01);
      assertEquals(0, bisectionSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertNotSame(graggBulirschStoerIntegrator1, graggBulirschStoerIntegrator0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.9424264981694277E130, 1.9424264981694277E130, 1.9424264981694277E130, 1.573964437869041E134);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(1.9424264981694277E130, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1.9424264981694277E130, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.9424264981694277E130, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertNotNull(graggBulirschStoerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1172).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(2344, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(2344, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(734).when(secondaryEquations0).getDimension();
      int int0 = expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      assertEquals(2344, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertEquals(0, int0);
      
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 888, 0, 0.65);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(1.9424264981694277E130, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1.9424264981694277E130, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.9424264981694277E130, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.8;
      doubleArray0[1] = (-1310.923222);
      doubleArray0[2] = 0.8;
      doubleArray0[3] = 0.8;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.8, 0.8, doubleArray0, doubleArray0);
      assertEquals(0.8, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(0.8, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.8, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertNotNull(graggBulirschStoerIntegrator0);
      assertArrayEquals(new double[] {0.8, (-1310.923222), 0.8, 0.8}, doubleArray0, 0.01);
      
      graggBulirschStoerIntegrator0.setOrderControl(490, (-1361.5521634976), 0.8);
      assertEquals(0.8, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(0.8, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.8, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertArrayEquals(new double[] {0.8, (-1310.923222), 0.8, 0.8}, doubleArray0, 0.01);
      
      graggBulirschStoerIntegrator0.setOrderControl((-1295), (-686.34363701), 10.0);
      assertEquals(0.8, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(0.8, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.8, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertArrayEquals(new double[] {0.8, (-1310.923222), 0.8, 0.8}, doubleArray0, 0.01);
      
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-1295));
      assertEquals(0.8, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(0.8, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.8, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertArrayEquals(new double[] {0.8, (-1310.923222), 0.8, 0.8}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1830.3689893382), 2.0, 1.2840977763293412E-303, 1.4201378353978042E-97);
      assertEquals(60.50403274721777, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(1830.3689893382, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      graggBulirschStoerIntegrator0.setStepSizeControl(1.4201378353978042E-97, 3.2704315617117956E-21, doubleArray0, doubleArray0);
      assertEquals(3.2704315617117956E-21, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.50403274721777, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.4201378353978042E-97, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      graggBulirschStoerIntegrator0.clearEventHandlers();
      assertEquals(3.2704315617117956E-21, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.50403274721777, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.4201378353978042E-97, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 81);
      assertEquals(3.2704315617117956E-21, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.50403274721777, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.4201378353978042E-97, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      
      graggBulirschStoerIntegrator0.resetInternalState();
      assertEquals(3.2704315617117956E-21, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2.155101760675363E-59, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.4201378353978042E-97, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      
      graggBulirschStoerIntegrator0.setStabilityCheck(true, (-2129), 1114, 1261);
      assertEquals(3.2704315617117956E-21, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2.155101760675363E-59, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.4201378353978042E-97, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, (-4260.7), 471.972379276569, 3);
      assertEquals(3.2704315617117956E-21, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2.155101760675363E-59, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.4201378353978042E-97, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      
      graggBulirschStoerIntegrator0.scalRelativeTolerance = 9.215765583599035E-8;
      assertEquals(3.2704315617117956E-21, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2.155101760675363E-59, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.4201378353978042E-97, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      
      graggBulirschStoerIntegrator0.setOrderControl((-186), 0.6, 0.6);
      assertEquals(3.2704315617117956E-21, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2.155101760675363E-59, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.4201378353978042E-97, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = 4.218440703602533E-170;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4.218440703602533E-170, 4.218440703602533E-170, 4.218440703602533E-170, 4.218440703602533E-170);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(4.218440703602533E-170, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(4.218440703602533E-170, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertNotNull(graggBulirschStoerIntegrator0);
      
      graggBulirschStoerIntegrator0.setControlFactors(1.0E-4, (-1283.6594603), 1.0E-4, (-331.361343668));
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(4.218440703602533E-170, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(4.218440703602533E-170, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      
      graggBulirschStoerIntegrator0.scalRelativeTolerance = 4.0;
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(4.218440703602533E-170, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(4.218440703602533E-170, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1306.6;
      doubleArray0[1] = (double) 1045;
      doubleArray0[2] = 4.218440703602533E-170;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.initializeStep(true, 1045, doubleArray0, (-2162.78776575369), doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1752.460800365675, 1752.460800365675, 4.2634204358490415E-9, 4.2634204358490415E-9);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1752.460800365675, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1752.460800365675, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(1752.460800365675, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      int int0 = 2;
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 2, 17, 304.305);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1752.460800365675, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1752.460800365675, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(1752.460800365675, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(872).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(1744, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(1744, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2963.1302397596514);
      assertEquals(2963.1302397596514, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertNotNull(regulaFalsiSolver0);
      
      double double0 = 2.415329933166504;
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1752.460800365675);
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, double0);
      boolean boolean0 = true;
      graggBulirschStoerIntegrator0.setInterpolationControl(boolean0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 1;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE1.setTime((-3945.12));
      expandableStatefulODE1.getSecondaryMappers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1950.91250760248, 1.0237410176204791E-5, (-250.92995478414), 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE2 = new ExpandableStatefulODE(firstOrderConverter1);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE1, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minimal step size (1.95E03) reached, integration needs 2.16E-05
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType1 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType1);
      FilterType filterType2 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter1 = new EventFilter(eventFilter0, filterType2);
      EventFilter eventFilter2 = new EventFilter(eventFilter0, filterType2);
      EventFilter eventFilter3 = new EventFilter(eventFilter2, filterType0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-2731.94));
      expandableStatefulODE0.setTime(1);
      expandableStatefulODE0.getSecondaryMappers();
      expandableStatefulODE0.getSecondaryMappers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2359.010747124447), 1089, (-2359.010747124447), (-1197.7659048538));
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1.9437762419688045E-8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minimal step size (2.36E03) reached, integration needs 2.30E03
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      FilterType filterType1 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter1 = new EventFilter(eventFilter0, filterType1);
      EventFilter eventFilter2 = new EventFilter(eventFilter0, filterType0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(565.9692);
      ExpandableStatefulODE expandableStatefulODE2 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE2.getSecondaryMappers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5.298749302736127E206, 1732.8039185290688, 1746.956403351634, (-396.20000000000005));
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-2868.3659));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minimal step size (5.30E206) reached, integration needs 3.66E03
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1686.02204), (-1.1165866833118273E-8), 0.0, 1862.0);
      int int0 = 24;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(24).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = (-1471.553067769267);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.2398418248052736E-12;
      doubleArray0[1] = 1862.0;
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 24);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
      doubleArray0[2] = (double) int0;
      graggBulirschStoerIntegrator0.vecAbsoluteTolerance = doubleArray0;
      StepNormalizer stepNormalizer0 = new StepNormalizer(double0, fixedStepHandler0);
      StepHandler stepHandler0 = null;
      graggBulirschStoerIntegrator0.addStepHandler(stepHandler0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE1.setTime((-3945.12));
      expandableStatefulODE1.setTime((-3945.12));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE2 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1008.38230259871, (-2431.7865683141677), doubleArray0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE3 = new ExpandableStatefulODE(firstOrderConverter1);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE3, (double) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      FilterType filterType0 = FilterType.TRIGGER_ONLY_INCREASING_EVENTS;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventFilter eventFilter0 = new EventFilter(eventHandler0, filterType0);
      EventFilter eventFilter1 = new EventFilter(eventFilter0, filterType0);
      FilterType filterType1 = FilterType.TRIGGER_ONLY_DECREASING_EVENTS;
      EventFilter eventFilter2 = new EventFilter(eventFilter1, filterType1);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE1.setTime((-3945.12));
      expandableStatefulODE1.getSecondaryMappers();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1089;
      doubleArray0[1] = 1533.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1533.0, (-2066.77), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE1, (-1723.4853724209938));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1723.4853724209938), fixedStepHandler0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
  }
}
