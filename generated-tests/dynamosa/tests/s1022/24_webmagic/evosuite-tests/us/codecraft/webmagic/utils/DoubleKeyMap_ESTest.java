/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 04 09:20:38 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      Integer integer0 = new Integer((-1334));
      doubleKeyMap0.put((Integer) null, integer0, (Object) integer0);
      Object object0 = doubleKeyMap0.remove((Integer) null, integer0);
      assertEquals((-1334), object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<String, Integer>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, Object, Object>(class0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      Integer integer0 = new Integer(0);
      DoubleKeyMap<HashMap<String, String>, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, String>, Integer, Integer>();
      Map<String, HashMap<Object, HashMap<Integer, String>>> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put(integer0, integer0, (Object) map0);
      HashMap hashMap0 = (HashMap)doubleKeyMap0.remove(integer0, integer0);
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Object, Map<Map<String, String>, Map<Integer, String>>> hashMap0 = new HashMap<Object, Map<Map<String, String>, Map<Integer, String>>>();
      Class<Map> class0 = Map.class;
      HashMap<Map<String, String>, Map<Integer, String>> hashMap1 = new HashMap<Map<String, String>, Map<Integer, String>>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      hashMap1.put((Map<String, String>) null, hashMap2);
      hashMap0.put(class0, hashMap1);
      DoubleKeyMap<Object, Map<String, String>, Map<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, String>, Map<Integer, String>>(hashMap0, class0);
      Map<Map<String, String>, Map<Integer, String>> map0 = doubleKeyMap0.remove((Object) class0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, String, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, String, Object>();
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Object>();
      Integer integer0 = new Integer((-433));
      Object object0 = doubleKeyMap1.remove(integer0, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Map<Map<Integer, String>, HashMap<String, Map<Integer, String>>>> hashMap0 = new HashMap<Object, Map<Map<Integer, String>, HashMap<String, Map<Integer, String>>>>();
      DoubleKeyMap<Object, Map<Integer, String>, HashMap<String, Map<Integer, String>>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<Integer, String>, HashMap<String, Map<Integer, String>>>(hashMap0);
      Object object0 = new Object();
      Map<Map<Integer, String>, HashMap<String, Map<Integer, String>>> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Map<Map<Integer, String>, String>, Map<Object, String>> hashMap0 = new HashMap<Map<Map<Integer, String>, String>, Map<Object, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Map<Integer, String>, String>, Object, String> doubleKeyMap0 = new DoubleKeyMap<Map<Map<Integer, String>, String>, Object, String>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Map<Map<Integer, String>, String>) null, (Object) null, "us.codecraft.webmagic.utils.MultiKeyMapBase");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>(hashMap0, class0);
      Integer integer0 = new Integer((-432));
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put("2", object0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      DoubleKeyMap<Object, Map<Integer, String>, String> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Integer, String>, String>();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      String string0 = doubleKeyMap1.put((Object) doubleKeyMap0, (Map<Integer, String>) hashMap0, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>();
      Object object1 = doubleKeyMap0.get("", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>((Map<Object, Map<Object, Integer>>) null);
      Integer integer1 = doubleKeyMap1.get((Object) doubleKeyMap0, (Object) integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Integer, Object, HashMap<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, HashMap<Object, String>>();
      Map<HashMap<Integer, Integer>, Map<Object, String>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Integer, Integer>, Object, String> doubleKeyMap1 = new DoubleKeyMap<HashMap<Integer, Integer>, Object, String>(map0, class0);
      Map<Object, String> map1 = doubleKeyMap1.get((HashMap<Integer, Integer>) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, String, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, String, Object>();
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Integer>((Map<Object, Map<Object, Integer>>) null);
      Map<Object, Integer> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, HashMap<Integer, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Integer, Object>>((Map<String, Map<String, HashMap<Integer, Object>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, HashMap<Object, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Object, String>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Map<Integer, Map<Object, Integer>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Integer, Object, Integer> doubleKeyMap1 = new DoubleKeyMap<Integer, Object, Integer>(map0);
      Map<Object, Integer> map1 = doubleKeyMap1.remove((Integer) null);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      Integer integer0 = new Integer((-6));
      Object object0 = new Object();
      doubleKeyMap0.put(integer0, integer0, object0);
      Integer integer1 = new Integer(0);
      Object object1 = doubleKeyMap0.remove(integer0, integer1);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put(integer0, integer0, (Object) integer0);
      DoubleKeyMap<HashMap<String, String>, Integer, Integer> doubleKeyMap1 = new DoubleKeyMap<HashMap<String, String>, Integer, Integer>();
      Map<String, HashMap<Object, HashMap<Integer, String>>> map0 = doubleKeyMap1.newMap();
      Object object0 = doubleKeyMap0.put(integer0, integer0, (Object) map0);
      assertEquals(0, object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      Integer integer0 = new Integer(0);
      Object object0 = doubleKeyMap0.put(integer0, integer0, (Object) integer0);
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>();
      Object object1 = doubleKeyMap1.get("", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, String, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, String, Object>();
      doubleKeyMap0.put((Map<Integer, String>) null, "S9b|MjJDWh$k", (Object) null);
      Object object0 = doubleKeyMap0.get((Map<Integer, String>) null, "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<Object, Map<Object, String>, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Map<Object, String>, Integer>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<HashMap<String, String>, Map<Integer, Integer>> hashMap0 = new HashMap<HashMap<String, String>, Map<Integer, Integer>>();
      DoubleKeyMap<HashMap<String, String>, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, String>, Integer, Integer>(hashMap0);
      HashMap<Object, Map<String, Object>> hashMap1 = new HashMap<Object, Map<String, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(hashMap1, class0);
      Object object0 = doubleKeyMap1.remove((Object) doubleKeyMap0, (String) null);
      assertNull(object0);
  }
}
