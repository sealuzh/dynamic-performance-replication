/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 10:49:52 GMT 2018
 */

package org.apache.commons.math3.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmbeddedRungeKuttaIntegrator_ESTest extends EmbeddedRungeKuttaIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1528.8367057), (-1528.8367057), 0.0, 0.0);
      highamHall54Integrator0.getOrder();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1528.8367057);
      doubleArray0[5] = (double) 5;
      doubleArray0[6] = 0.2;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-1528.8367057);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1528.8367057), (-1528.8367057), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.resetInternalState();
      dormandPrince54Integrator0.getOrder();
      highamHall54Integrator0.setSafety(10.0);
      highamHall54Integrator0.getOrder();
      assertEquals(10.0, highamHall54Integrator0.getSafety(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 646.614;
      doubleArray0[1] = 646.614;
      doubleArray0[2] = 630.7569;
      doubleArray0[3] = 630.7569;
      doubleArray0[4] = 646.614;
      doubleArray0[5] = 630.7569;
      doubleArray0[6] = 646.614;
      doubleArray0[7] = 630.7569;
      doubleArray0[8] = 630.7569;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(630.7569, 646.614, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.scalRelativeTolerance = 0.2;
      dormandPrince54Integrator0.setMinReduction(0.0);
      dormandPrince54Integrator0.setSafety(646.614);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.FIRST;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-3.903230345984362E-11), fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
      dormandPrince54Integrator0.getMinReduction();
      dormandPrince54Integrator0.setMaxGrowth(630.7569);
      dormandPrince54Integrator0.setMaxGrowth((-3.903230345984362E-11));
      assertEquals((-3.903230345984362E-11), dormandPrince54Integrator0.getMaxGrowth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2260.9, 1462.7770362, 2260.9, 1462.7770362);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(226).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, (-4053.1883180867));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-512.151962), (-512.151962), doubleArray0, doubleArray0);
      highamHall54Integrator0.getEventHandlers();
      double[][] doubleArray1 = new double[0][8];
      highamHall54Integrator0.estimateError(doubleArray1, doubleArray0, doubleArray0, (-512.151962));
      highamHall54Integrator0.getMaxGrowth();
      highamHall54Integrator0.getSafety();
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double double0 = 2190.5246;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2190.5246, 2190.5246, 2190.5246, 2190.5246);
      highamHall54Integrator0.setMinReduction(2190.5246);
      int int0 = (-1);
      highamHall54Integrator0.setMaxEvaluations((-1));
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-9.524376551107945E-9), 1.0, 0.9, 10.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(119).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 1.0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1.0, 0.9, 1368.4944, 1.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(0.0);
      highamHall54Integrator0.integrate(expandableStatefulODE0, 0.9);
      assertEquals(8, highamHall54Integrator0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1.0, 1.0, 0.6853040456771851, 0.9);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(0.6853040456771851);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, (double) 1422);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      double double0 = 1.0;
      double double1 = 0.9;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1.0, 1.0, 0.6853040456771851, 0.9);
      Double double2 = new Double(0.9);
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(1.0);
      highamHall54Integrator0.integrate(expandableStatefulODE0, (-1.0));
      highamHall54Integrator0.integrate(expandableStatefulODE0, 1.0);
      double double3 = 7.419361045185406E-195;
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 5048.6689378);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      double double0 = 32.0;
      double double1 = 3983.7265305;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(32.0, 32.0, 32.0, 3983.7265305);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 3983.7265305);
  }
}
