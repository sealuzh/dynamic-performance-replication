/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 05 06:23:53 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap0, class0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.put("wrong proto type map ", hashMap1);
      Object object0 = new Object();
      doubleKeyMap0.remove("wrong proto type map ", object0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap0, class0);
      hashMap0.put("", hashMap1);
      Map<Object, Object> map0 = doubleKeyMap0.remove("");
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Object>, HashMap<Object, String>, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, HashMap<Object, String>, String>();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      doubleKeyMap0.put((HashMap<Integer, Object>) null, hashMap0, "+t)vzyf");
      String string0 = doubleKeyMap0.put((HashMap<Integer, Object>) null, hashMap0, "");
      assertEquals("+t)vzyf", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<HashMap<Map<String, HashMap<String, String>>, Object>, Map<Integer, Object>> hashMap0 = new HashMap<HashMap<Map<String, HashMap<String, String>>, Object>, Map<Integer, Object>>();
      Class<Map> class0 = Map.class;
      HashMap<Map<String, HashMap<String, String>>, Object> hashMap1 = new HashMap<Map<String, HashMap<String, String>>, Object>();
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      hashMap0.put(hashMap1, hashMap2);
      DoubleKeyMap<HashMap<Map<String, HashMap<String, String>>, Object>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<Map<String, HashMap<String, String>>, Object>, Integer, Object>(hashMap0, class0);
      Map<Integer, Object> map0 = doubleKeyMap0.get(hashMap1);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Object>, HashMap<Object, String>, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, HashMap<Object, String>, String>();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      doubleKeyMap0.put(hashMap0, hashMap1, "");
      Map<HashMap<Object, String>, String> map0 = doubleKeyMap0.get(hashMap0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap0, class0);
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.remove("wrong proto type map ", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      String string0 = doubleKeyMap0.remove((Object) null, "zbngIjt4");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      HashMap<Object, Map<HashMap<Object, Map<String, HashMap<String, String>>>, Integer>> hashMap0 = new HashMap<Object, Map<HashMap<Object, Map<String, HashMap<String, String>>>, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<Object, Map<String, HashMap<String, String>>>, Integer> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, Map<String, HashMap<String, String>>>, Integer>(hashMap0, class0);
      HashMap<Object, Map<String, HashMap<String, String>>> hashMap1 = new HashMap<Object, Map<String, HashMap<String, String>>>();
      Integer integer0 = doubleKeyMap1.remove((Object) doubleKeyMap0, hashMap1);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Integer, Map<String, Map<Integer, Integer>>> hashMap0 = new HashMap<Integer, Map<String, Map<Integer, Integer>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, Map<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Map<Integer, Integer>>(hashMap0, class0);
      Map<String, Map<Integer, Integer>> map0 = doubleKeyMap0.remove((Integer) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Map<Map<String, HashMap<String, String>>, Object>> hashMap0 = new HashMap<Object, Map<Map<String, HashMap<String, String>>, Object>>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>();
      DoubleKeyMap<Object, Map<String, HashMap<String, String>>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Map<String, HashMap<String, String>>, Object>(hashMap0);
      Map<Map<String, HashMap<String, String>>, Object> map0 = doubleKeyMap1.remove((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Map<Map<String, HashMap<String, String>>, Integer>, Map<Integer, Object>> hashMap0 = new HashMap<Map<Map<String, HashMap<String, String>>, Integer>, Map<Integer, Object>>();
      DoubleKeyMap<Map<Map<String, HashMap<String, String>>, Integer>, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Map<Map<String, HashMap<String, String>>, Integer>, Integer, Object>(hashMap0);
      HashMap<Map<String, HashMap<String, String>>, Integer> hashMap1 = new HashMap<Map<String, HashMap<String, String>>, Integer>();
      Integer integer0 = new Integer(1);
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put((Map<Map<String, HashMap<String, String>>, Integer>) hashMap1, integer0, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Object, Map<HashMap<Object, Map<String, HashMap<String, String>>>, Integer>> hashMap0 = new HashMap<Object, Map<HashMap<Object, Map<String, HashMap<String, String>>>, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<Object, Map<String, HashMap<String, String>>>, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, Map<String, HashMap<String, String>>>, Integer>(hashMap0, class0);
      // Undeclared exception!
      try { 
        doubleKeyMap0.put((Object) class0, (HashMap<Object, Map<String, HashMap<String, String>>>) null, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<String, Object, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<String, Object>>();
      Object object0 = new Object();
      HashMap<String, Object> hashMap0 = doubleKeyMap0.put("Pf,uw!,Px1L", object0, (HashMap<String, Object>) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      DoubleKeyMap<Object, Integer, HashMap<String, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, HashMap<String, Object>>();
      Integer integer0 = new Integer(0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      HashMap<String, Object> hashMap1 = doubleKeyMap1.put((Object) doubleKeyMap0, integer0, hashMap0);
      assertNull(hashMap1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<String, Object, HashMap<Integer, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<Integer, Object>>();
      HashMap<Integer, Object> hashMap0 = doubleKeyMap0.get("50P ^H+Q ", (Object) null);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Object, Map<Map<String, HashMap<String, String>>, HashMap<Map<String, HashMap<String, String>>, Object>>> hashMap0 = new HashMap<Object, Map<Map<String, HashMap<String, String>>, HashMap<Map<String, HashMap<String, String>>, Object>>>();
      DoubleKeyMap<Object, Map<String, HashMap<String, String>>, HashMap<Map<String, HashMap<String, String>>, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<String, HashMap<String, String>>, HashMap<Map<String, HashMap<String, String>>, Object>>(hashMap0);
      HashMap<String, HashMap<String, String>> hashMap1 = new HashMap<String, HashMap<String, String>>();
      HashMap<Map<String, HashMap<String, String>>, Object> hashMap2 = doubleKeyMap0.get((Object) null, (Map<String, HashMap<String, String>>) hashMap1);
      assertNull(hashMap2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, Object>, HashMap<Object, String>, String> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, HashMap<Object, String>, String>();
      Map<HashMap<Object, String>, String> map0 = doubleKeyMap0.get((HashMap<Integer, Object>) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      DoubleKeyMap<Object, HashMap<Object, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, HashMap<Object, Object>, Object>();
      Map<HashMap<Object, Object>, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      Integer integer0 = new Integer(611);
      hashMap1.put(hashMap0, integer0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap0, class0);
      hashMap0.put("", hashMap1);
      // Undeclared exception!
      try { 
        doubleKeyMap0.remove("", (Object) hashMap1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<Integer, Object>, HashMap<Object, String>, String> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, Object>, HashMap<Object, String>, String>((Map<HashMap<Integer, Object>, Map<HashMap<Object, String>, String>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap0, class0);
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      hashMap0.put("wrong proto type map ", hashMap1);
      Object object0 = doubleKeyMap0.put("wrong proto type map ", (Object) hashMap1, (Object) class0);
      doubleKeyMap0.remove("wrong proto type map ", object0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleKeyMap<Object, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Integer>();
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>(hashMap0, class0);
      DoubleKeyMap<Object, Object, String> doubleKeyMap2 = new DoubleKeyMap<Object, Object, String>();
      String string0 = doubleKeyMap2.get((Object) doubleKeyMap0, (Object) doubleKeyMap1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>(class0);
      Integer integer0 = new Integer(1898);
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Object>(hashMap0);
      Map<String, Map<Map<?, ?>, Object>> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.put("WD6ptCYd", (Object) map0, integer0);
      Integer integer1 = doubleKeyMap0.get("WD6ptCYd", (Object) integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, HashMap<String, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<String, Object>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DoubleKeyMap<HashMap<Object, Object>, HashMap<Object, Object>, HashMap<Integer, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Object, Object>, HashMap<Object, Object>, HashMap<Integer, String>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      doubleKeyMap0.put(hashMap0, hashMap0, hashMap1);
      HashMap<Integer, String> hashMap2 = doubleKeyMap0.remove(hashMap0, hashMap0);
      assertSame(hashMap2, hashMap1);
      assertNotNull(hashMap2);
  }
}
