/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 14:47:35 GMT 2018
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.Task;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.selector.AndSelector;
import us.codecraft.webmagic.selector.Html;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.ReplaceSelector;
import us.codecraft.webmagic.selector.Selector;
import us.codecraft.webmagic.selector.SmartContentSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("title");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("6R");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      Spider spider3 = spider2.clearPipeline();
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      Spider spider4 = spider1.pipeline(collectorPipeline0);
      LinkedList<Request> linkedList1 = new LinkedList<Request>();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("6R");
      Request request0 = new Request("");
      fileCacheQueueScheduler0.push(request0, spider3);
      spider0.scheduler = (Scheduler) fileCacheQueueScheduler0;
      Request request1 = new Request("Gi%6");
      Request request2 = request1.setMethod("Gi%6");
      Request request3 = request2.addCookie("Gi%6", "Gi%6");
      request1.getExtras();
      request3.setExtras((Map<String, Object>) null);
      Request request4 = request3.addHeader("Gi%6", "6R");
      linkedList1.add(request4);
      spider1.startRequest(linkedList1);
      // Undeclared exception!
      try { 
        spider4.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Gj47T!i+");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      spider0.runAsync();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("0k[PQe$IceX}]u6p");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider1 = spider0.addPipeline(filePipeline0);
      Spider spider2 = spider1.setSpawnUrl(true);
      Spider spider3 = spider2.thread(1000);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider4 = spider3.setSpiderListeners(linkedList0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "IO[23yF;bFpY;]";
      stringArray0[1] = "/";
      stringArray0[2] = "/";
      stringArray0[3] = "0k[PQe$IceX}]u6p";
      stringArray0[4] = "0k[PQe$IceX}]u6p";
      // Undeclared exception!
      try { 
        spider4.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider0.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("download page {} error");
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      
      spider0.getStatus();
      Spider spider1 = spider0.clearPipeline();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 125;
      Spider.Status.fromValue(125);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("page status code error, page {} , code: {}");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(":wiUs+EscdpbY~");
      Spider spider0 = new Spider(simplePageProcessor0);
      int int0 = 175;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(175, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(spider0, scheduledThreadPoolExecutor0);
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 175);
      Spider spider2 = spider1.clearPipeline();
      Spider spider3 = spider2.setExecutorService(scheduledThreadPoolExecutor0);
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(spider3, scheduledThreadPoolExecutor0);
      Spider spider4 = spider3.setExitWhenComplete(false);
      Spider spider5 = spider0.clearPipeline();
      spider5.setExitWhenComplete(false);
      spider5.runAsync();
      String string0 = "nN%8";
      Spider spider6 = spider4.setUUID("nN%8");
      spider6.getPageCount();
      String string1 = null;
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor(",etD\"bVuuc");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(175, threadPoolExecutor_AbortPolicy0);
      spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 264);
      String string0 = spider0.getUUID();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertNull(string0);
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "\\)";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(")");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      Spider spider1 = spider0.setSpiderListeners((List<SpiderListener>) null);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider2 = spider1.scheduler(priorityScheduler0);
      spider2.checkIfRunning();
      // Undeclared exception!
      try { 
        spider2.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "us.codecraft.webmagic.Spider";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      spider1.getSite();
      Request request0 = new Request();
      String string1 = "us.codecraft.webmagic.selector.RegexResult";
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, (-3436));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("8'zQ~D");
      Spider spider0 = new Spider(simplePageProcessor0);
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(86, 410, 0L, timeUnit0, priorityBlockingQueue0, threadPoolExecutor_CallerRunsPolicy0);
      Spider spider1 = spider0.thread((ExecutorService) threadPoolExecutor0, 108);
      Request[] requestArray0 = new Request[4];
      Request request0 = new Request();
      requestArray0[0] = request0;
      Request request1 = request0.addCookie("_cycle_tried_times", "8'zQ~D");
      Request request2 = request1.setBinaryContent(true);
      requestArray0[1] = request2;
      Request request3 = new Request("8'zQ~D");
      requestArray0[2] = request3;
      Request request4 = request1.addCookie("_cycle_tried_times", "_cycle_tried_times");
      requestArray0[3] = request4;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("6R");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      assertTrue(spider2.isSpawnUrl());
      
      spider0.setSpawnUrl(false);
      Spider spider3 = spider0.thread(1000);
      LinkedList<SpiderListener> linkedList1 = new LinkedList<SpiderListener>();
      spider3.setSpiderListeners(linkedList1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "6R";
      stringArray0[1] = "6R";
      stringArray0[2] = "6R";
      spider3.getStartTime();
      assertFalse(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", ".json");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(3, 3, 3, timeUnit0, linkedBlockingDeque0, threadFactory0);
      spider2.setExecutorService(threadPoolExecutor0);
      spider1.setScheduler((Scheduler) null);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("mC^]o-pvRl,`QlRe");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      String string0 = "";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "mC^]o-pvRl,`QlRe");
      Spider spider2 = spider1.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "mC^]o-pvRl,`QlRe";
      spider1.downloader = (Downloader) phantomJSDownloader0;
      String string1 = "]b<9J)'/B~7";
      stringArray0[1] = "]b<9J)'/B~7";
      stringArray0[2] = "";
      stringArray0[3] = "mC^]o-pvRl,`QlRe";
      stringArray0[4] = "";
      stringArray0[5] = "";
      spider0.exitWhenComplete = false;
      stringArray0[6] = "mC^]o-pvRl,`QlRe";
      stringArray0[7] = "";
      // Undeclared exception!
      try { 
        spider2.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Spider {} started!", ", priority=");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(">as]@pND*lK|N)");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[0];
      spider1.test(stringArray0);
      String string0 = spider0.getUUID();
      assertNull(string0);
      assertTrue(spider0.isSpawnUrl());
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "Spider {} started!";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Spider {} started!", ", priority=");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(">as]@pND*lK6_|@)");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setDownloader(phantomJSDownloader0);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("}QrlpU@zJ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      AndSelector andSelector0 = new AndSelector(linkedList0);
      List<String> list0 = andSelector0.selectList("");
      spider0.startUrls(list0);
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) list0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", charset='");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.startRequest((List<Request>) null);
      spider1.stop();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Spider spider1 = spider0.scheduler((Scheduler) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", ".json");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(3, 3, 3, timeUnit0, linkedBlockingDeque0, threadFactory0);
      Spider spider3 = spider2.setExecutorService(threadPoolExecutor0);
      Spider spider4 = spider3.setUUID("vZ");
      Request request0 = new Request();
      Request request1 = request0.setCharset(", timeOut=");
      request1.putExtra("", request0);
      Page page0 = new Page();
      spider4.initComponent();
      System.setCurrentTimeMillis(3489L);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Spider spider1 = spider0.scheduler((Scheduler) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", ".json");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(3, 3, 3, timeUnit0, linkedBlockingDeque0, threadFactory0);
      Spider spider3 = spider2.setExecutorService(threadPoolExecutor0);
      Spider spider4 = spider3.setUUID("vZ");
      Request request0 = new Request();
      Request request1 = request0.setCharset(", timeOut=");
      Request request2 = request1.setBinaryContent(false);
      request2.putExtra("", (Object) null);
      Page page0 = new Page();
      List<Request> list0 = page0.getTargetRequests();
      spider0.startRequest(list0);
      spider4.initComponent();
      System.setCurrentTimeMillis(3489L);
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("download page {} error");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String string0 = spider0.getUUID();
      assertNull(string0);
      
      int int0 = spider0.getThreadAlive();
      assertEquals(0, int0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("download page {} error");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = Page.fail();
      Page page1 = page0.setRawText("download page {} error");
      Page page2 = page1.setSkip(true);
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page2, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Gj47T!i+");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getSpiderListeners();
      Charset.defaultCharset();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(" error");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      Request[] requestArray0 = new Request[1];
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      requestArray0[0] = null;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("6R");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider1 = spider0.setPipelines(linkedList0);
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider1.addRequest(requestArray0);
      spider2.clearPipeline();
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      Spider spider3 = spider1.pipeline(collectorPipeline0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      Spider spider4 = spider0.scheduler(duplicateRemovedScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, "3Djjz?X");
      spider4.downloader(phantomJSDownloader0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis((-1576L));
      spider0.stop();
      spider3.start();
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Spider spider1 = spider0.scheduler((Scheduler) null);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", ".json");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      Spider spider3 = spider2.scheduler((Scheduler) null);
      String string0 = spider3.getUUID();
      assertNull(string0);
      assertTrue(spider3.isExitWhenComplete());
      assertEquals(0L, spider3.getPageCount());
      assertTrue(spider3.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      ReplaceSelector replaceSelector0 = new ReplaceSelector("", "");
      int int0 = 3110;
      spider0.sleep(3110);
      // Undeclared exception!
      try { 
        replaceSelector0.selectList("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.ReplaceSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      linkedTransferQueue0.add("");
      spider0.setEmptySleepTime(34);
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("Spider {} started!", ", priority=");
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(">as]@pND*lK|N)");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("Gj47T!i+");
      String[] stringArray0 = new String[0];
      spider0.addUrl(stringArray0);
      Spider.create(simplePageProcessor0);
      String string0 = spider1.getUUID();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "download page {} error";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("download page {} error");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = Page.fail();
      Page page1 = page0.setRawText("download page {} error");
      page1.setSkip(true);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Request request0 = new Request("");
      request0.setPriority(2211L);
      request0.setMethod("_cycle_tried_times");
      String string0 = "x";
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "C:(#m6}";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("C:(#m6}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = new Page();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Page page1 = page0.setSkip(false);
      page1.setSkip(true);
      spider0.extractAndAddRequests(page1, false);
      // Undeclared exception!
      try { 
        spider0.thread((-1959));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }
}
