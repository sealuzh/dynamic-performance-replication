/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:37:53 GMT 2018
 */

package com.alibaba.fastjson;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.JSONPath;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.PascalNameFilter;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeFilter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.FieldInfo;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.ThaiBuddhistDate;
import java.util.Calendar;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.TreeMap;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONArray_ESTest extends JSONArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONArray jSONArray0 = new JSONArray(2160);
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      Class<Field> class0 = Field.class;
      List<Field> list0 = jSONArray0.toJavaList(class0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(2160);
      // Undeclared exception!
      try { 
        jSONArray0.getJSONArray(2160);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2160, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      double double0 = new Integer(3089);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      jSONArray1.fluentRetainAll(jSONArray0);
      boolean boolean0 = jSONArray1.addAll((Collection<?>) jSONArray0);
      assertEquals(2, jSONArray1.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(0);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      JSONArray jSONArray1 = jSONArray0.fluentRemove((Object) propertyNamingStrategy0);
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      // Undeclared exception!
      try { 
        jSONArray2.fluentRemove(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      // Undeclared exception!
      try { 
        jSONArray0.getBigDecimal(99);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 99, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 26;
      jSONArray0.getComponentType();
      // Undeclared exception!
      try { 
        jSONArray0.getTimestamp(118);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 118, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(989);
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) integer0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSONArray1.replaceAll(unaryOperator0);
      JSONArray jSONArray2 = new JSONArray(989);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray(3089);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      // Undeclared exception!
      try { 
        jSONArray0.fluentAdd(3089, (Object) mockHijrahDate0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<ChronoLocalDate> linkedList0 = new LinkedList<ChronoLocalDate>();
      JSONArray jSONArray1 = jSONArray0.fluentRemoveAll(linkedList0);
      ParserConfig.getGlobalInstance();
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      jSONArray0.fluentSet(3089, jSONArray0);
      Object object0 = new Object();
      int int0 = jSONArray0.lastIndexOf("[]");
      assertEquals(3090, jSONArray0.size());
      
      Integer integer0 = new Integer((-1));
      assertTrue(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray(108);
      JSONArray jSONArray1 = jSONArray0.fluentSet(0, fileSystemHandling0);
      // Undeclared exception!
      try { 
        jSONArray1.toArray((InputStream[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      // Undeclared exception!
      try { 
        jSONArray1.fluentAddAll(989, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 165;
      // Undeclared exception!
      try { 
        jSONArray0.getShort(165);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 165, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 0;
      ParserConfig parserConfig0 = new ParserConfig();
      Feature[] featureArray0 = new Feature[6];
      Feature feature0 = Feature.AutoCloseSource;
      JSONArray jSONArray0 = new JSONArray(0);
      jSONArray0.subList(0, 0);
      // Undeclared exception!
      try { 
        jSONArray0.getBooleanValue(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedHashSet<MockJapaneseDate> linkedHashSet0 = new LinkedHashSet<MockJapaneseDate>();
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedHashSet0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[6];
      SerializerFeature serializerFeature0 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteTabAsSpecial;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.MapSortField;
      serializerFeatureArray0[2] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[3] = serializerFeature3;
      SerializerFeature serializerFeature4 = SerializerFeature.BeanToArray;
      serializerFeatureArray0[4] = serializerFeature4;
      SerializerFeature serializerFeature5 = SerializerFeature.WriteNullStringAsEmpty;
      serializerFeatureArray0[5] = serializerFeature5;
      JSON.toJSONBytes((Object) jSONArray1, 3089, serializerFeatureArray0);
      // Undeclared exception!
      try { 
        jSONArray1.getDouble((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONArray jSONArray0 = new JSONArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONArray0.remove((Object) fileSystemHandling0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      jSONArray0.iterator();
      Long[] longArray0 = new Long[0];
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONArray0.lastIndexOf(object0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      boolean boolean0 = jSONArray0.addAll((Collection<?>) linkedList1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      jSONArray0.lastIndexOf(object0);
      // Undeclared exception!
      try { 
        jSONArray0.getString(1618);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1618, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      // Undeclared exception!
      try { 
        jSONArray0.getObject(989, class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      jSONArray1.isEmpty();
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(279);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 279, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1622, jSONArray0);
      jSONArray1.isEmpty();
      jSONArray0.iterator();
      jSONArray1.getBooleanValue(1606);
      jSONArray0.getString(279);
      jSONArray1.addAll((Collection<?>) jSONArray0);
      jSONArray0.remove(989);
      assertEquals(3245, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      JSONArray jSONArray1 = jSONArray0.fluentSet(1622, jSONArray0);
      jSONArray1.isEmpty();
      Iterator<Object> iterator0 = jSONArray0.iterator();
      jSONArray1.getBooleanValue(1618);
      jSONArray1.equals(iterator0);
      JSONArray jSONArray2 = jSONArray1.fluentRemove(956);
      Integer integer0 = new Integer(989);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      jSONArray1.setRelatedArray(iterator0);
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      JSONArray jSONArray3 = jSONArray2.fluentAdd((Object) mockThaiBuddhistDate1);
      jSONArray3.getJSONObject(1618);
      assertEquals(1623, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)31;
      byte byte0 = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-1);
      byte byte1 = (byte) (-8);
      byteArray0[8] = (byte) (-8);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-84), (byte) (-1), (byte)31, (byte)4, (byte)114, (byte) (-1), (byte)0, (byte) (-1), (byte) (-8)}, byteArray0);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      // Undeclared exception!
      try { 
        jSONArray0.getLong((byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 0;
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray0.fluentSet((-1), jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1, jSONArray2.size());
      assertNotNull(jSONArray2);
      
      boolean boolean0 = jSONArray2.isEmpty();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(boolean0);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1, jSONArray1.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1, jSONArray2.size());
      
      JSONArray jSONArray3 = jSONArray0.fluentClear();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray3.isEmpty());
      assertEquals(0, jSONArray3.size());
      assertNotNull(jSONArray3);
      
      Iterator<Object> iterator0 = jSONArray3.iterator();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray3.isEmpty());
      assertEquals(0, jSONArray3.size());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        jSONArray3.getBooleanValue(279);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 279, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        jSONArray0.getByte((byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "[]";
      JSONArray jSONArray0 = JSON.parseArray("[]");
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      // Undeclared exception!
      try { 
        jSONArray0.fluentSet((-2397), "[]");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = new JSONArray(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray1.equals((Object)jSONArray0));
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(true);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      JSONArray jSONArray2 = jSONArray1.fluentRemove((Object) null);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.equals((Object)jSONArray1));
      assertTrue(jSONArray1.equals((Object)jSONArray0));
      assertTrue(jSONArray2.equals((Object)jSONArray0));
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray2.size());
      assertTrue(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      Object object0 = jSONArray2.getRelatedArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.equals((Object)jSONArray1));
      assertTrue(jSONArray0.equals((Object)jSONArray2));
      assertTrue(jSONArray1.equals((Object)jSONArray0));
      assertTrue(jSONArray2.equals((Object)jSONArray0));
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray2.size());
      assertTrue(jSONArray2.isEmpty());
      assertNull(object0);
      
      boolean boolean0 = jSONArray1.removeAll(jSONArray2);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.equals((Object)jSONArray1));
      assertTrue(jSONArray0.equals((Object)jSONArray2));
      assertTrue(jSONArray1.equals((Object)jSONArray0));
      assertTrue(jSONArray2.equals((Object)jSONArray0));
      assertFalse(boolean0);
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray2.size());
      assertTrue(jSONArray2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      assertEquals(PropertyNamingStrategy.SnakeCase, propertyNamingStrategy0);
      
      int int0 = jSONArray0.indexOf(propertyNamingStrategy0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals((-1), int0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      List<ChronoLocalDate> list0 = jSONArray0.toJavaList(class0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      JSONArray jSONArray1 = jSONArray0.fluentAddAll((Collection<?>) list0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONArray1.add((Object) class0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(boolean0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      
      short short0 = ObjectStreamConstants.STREAM_MAGIC;
      assertEquals((short) (-21267), short0);
      
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray2.size());
      assertTrue(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      // Undeclared exception!
      try { 
        jSONArray2.getObject(989, (Type) class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.size());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray2.isEmpty());
      assertEquals(0, jSONArray2.size());
      assertNotNull(jSONArray2);
      
      jSONArray1.clear();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.size());
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      // Undeclared exception!
      try { 
        jSONArray2.getShortValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals("[]", string0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(string0);
      
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      assertNotNull(pascalNameFilter0);
      
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray2.equals((Object)jSONArray1));
      assertTrue(jSONArray2.equals((Object)jSONArray0));
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray2.size());
      assertTrue(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      Object object0 = jSONArray1.getRelatedArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.equals((Object)jSONArray2));
      assertTrue(jSONArray1.equals((Object)jSONArray2));
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray2);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray1.isEmpty());
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      JSONObject jSONObject0 = new JSONObject(1874, true);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      assertNotNull(jSONObject0);
      
      LinkedHashSet<JSONPath.Operator> linkedHashSet0 = new LinkedHashSet<JSONPath.Operator>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      JSONArray jSONArray3 = jSONArray2.fluentRetainAll(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.equals((Object)jSONArray2));
      assertTrue(jSONArray1.equals((Object)jSONArray2));
      assertTrue(jSONArray2.equals((Object)jSONArray1));
      assertTrue(jSONArray2.equals((Object)jSONArray0));
      assertTrue(jSONArray3.equals((Object)jSONArray1));
      assertTrue(jSONArray3.equals((Object)jSONArray0));
      assertNotSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray3, jSONArray1);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray2.size());
      assertTrue(jSONArray2.isEmpty());
      assertEquals(0, jSONArray3.size());
      assertTrue(jSONArray3.isEmpty());
      assertNotNull(jSONArray3);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray(1587);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONArray jSONArray1 = jSONArray0.fluentRemove(object0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.size());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray2.equals((Object)jSONArray0));
      assertTrue(jSONArray2.equals((Object)jSONArray1));
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.size());
      assertEquals(0, jSONArray2.size());
      assertTrue(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      // Undeclared exception!
      try { 
        jSONArray2.fluentAddAll(989, (Collection<?>) jSONArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = Calendar.FEBRUARY;
      assertEquals(1, int0);
      
      Integer integer0 = new Integer(989);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(989, (int)integer0);
      assertNotNull(integer0);
      
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.size());
      assertNotNull(jSONArray1);
      
      // Undeclared exception!
      try { 
        jSONArray1.getSqlDate(1885);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1885, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(2889);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONObject1.equals((Object)jSONObject0));
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      assertNotNull(jSONObject1);
      
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.fluentAdd((Object) jSONObject1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONObject0.equals((Object)jSONObject1));
      assertTrue(jSONObject1.equals((Object)jSONObject0));
      assertNotSame(jSONObject0, jSONObject1);
      assertNotSame(jSONObject1, jSONObject0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject1.size());
      assertTrue(jSONObject1.isEmpty());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1, jSONArray0.size());
      assertEquals(1, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      // Undeclared exception!
      try { 
        jSONArray1.toJavaList(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. com.alibaba.fastjson.PropertyNamingStrategy
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(1622, jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONArray1.isEmpty();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(boolean0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertNotNull(iterator0);
      
      boolean boolean1 = jSONArray1.equals(iterator0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1623
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      
      int int0 = (-1111);
      // Undeclared exception!
      try { 
        jSONArray0.getFloat((-1111));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals("[]", string0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(string0);
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(1622, jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONArray1.isEmpty();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(boolean0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertNotNull(iterator0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = jSONArray1.equals(iterator0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      
      JSONArray jSONArray2 = jSONArray1.fluentRemove(961);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1622, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1622, jSONArray1.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1622, jSONArray2.size());
      assertNotNull(jSONArray2);
      
      Integer integer0 = new Integer(989);
      assertEquals(989, (int)integer0);
      assertNotNull(integer0);
      
      JSONArray jSONArray3 = jSONArray1.getJSONArray(989);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1622, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1622, jSONArray1.size());
      assertNull(jSONArray3);
      
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      assertNotNull(simplePropertyPreFilter0);
      
      Boolean boolean3 = jSONArray0.getBoolean(1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1622, jSONArray0.size());
      assertNull(boolean3);
      
      // Undeclared exception!
      try { 
        jSONArray0.getDouble(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1622
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals("[]", string0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(string0);
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(990, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(990, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONArray1.isEmpty();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(boolean0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(990, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(990, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = serializeConfig0.propertyNamingStrategy;
      Object object0 = jSONArray1.getRelatedArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(990, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(990, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertNotNull(parameterizedTypeImpl1);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = jSONArray1.getObject(15, (Type) parameterizedTypeImpl1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertEquals(990, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(990, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        jSONArray0.get((-1350));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      
      jSONArray0.hashCode();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      JSONArray jSONArray1 = jSONArray0.fluentClear();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      // Undeclared exception!
      try { 
        jSONArray1.getJSONArray(1804);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1804, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      
      LinkedList<CharArrayWriter> linkedList0 = new LinkedList<CharArrayWriter>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<CharArrayWriter> linkedList1 = new LinkedList<CharArrayWriter>(linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      JSONArray jSONArray1 = jSONArray0.fluentRetainAll(linkedList1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertSame(jSONArray1, jSONArray0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      JSONArray jSONArray2 = jSONArray1.fluentClear();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray2.size());
      assertTrue(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      jSONArray2.setRelatedArray(mockThaiBuddhistDate0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals(0, linkedList0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, jSONArray1.size());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray2.size());
      assertTrue(jSONArray2.isEmpty());
      
      // Undeclared exception!
      try { 
        jSONArray2.getShortValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals("[]", string0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(string0);
      
      int int0 = 1622;
      JSONArray jSONArray1 = jSONArray0.fluentSet(1622, jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONArray1.isEmpty();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(boolean0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertNotNull(iterator0);
      
      boolean boolean1 = jSONArray1.getBooleanValue(1606);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      
      boolean boolean2 = jSONArray1.equals(iterator0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('2');
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("2", charArrayWriter0.toString());
      assertEquals("2", charArrayWriter1.toString());
      assertEquals(1, charArrayWriter1.size());
      assertNotNull(charArrayWriter1);
      
      // Undeclared exception!
      try { 
        jSONArray0.getIntValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1623
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      Class<JSONPath.Operator> class0 = JSONPath.Operator.class;
      List<JSONPath.Operator> list0 = jSONArray0.toJavaList(class0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = jSONArray0.containsAll(list0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(boolean0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Object[] objectArray0 = jSONArray0.toArray();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(objectArray0);
      
      // Undeclared exception!
      try { 
        jSONArray0.listIterator(114);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 114
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals("[]", string0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(string0);
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(1622, "[]");
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(iterator0);
      
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertNotNull(parameterizedTypeImpl1);
      
      String string1 = jSONArray2.getObject(1610, (Type) parameterizedTypeImpl1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertNull(string1);
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(3089);
      assertEquals(3089, (int)integer0);
      assertNotNull(integer0);
      
      JSONArray jSONArray3 = jSONArray1.fluentAdd((Object) iterator0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertEquals(1624, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1624, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(1624, jSONArray3.size());
      assertNotNull(jSONArray3);
      
      JSONArray jSONArray4 = jSONArray0.fluentAddAll(989, (Collection<?>) jSONArray2);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray3);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3248, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3248, jSONArray1.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3248, jSONArray2.size());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(3248, jSONArray4.size());
      assertNotNull(jSONArray4);
      
      JSONObject jSONObject0 = jSONArray1.getJSONObject(2109);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray4);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3248, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3248, jSONArray1.size());
      assertNull(jSONObject0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      jSONArray1.hashCode();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray4);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3248, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3248, jSONArray1.size());
      
      JSONArray jSONArray5 = (JSONArray)jSONArray4.clone();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray5.equals((Object)jSONArray4));
      assertTrue(jSONArray5.equals((Object)jSONArray3));
      assertTrue(jSONArray5.equals((Object)jSONArray0));
      assertTrue(jSONArray5.equals((Object)jSONArray2));
      assertTrue(jSONArray5.equals((Object)jSONArray1));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray5);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertNotSame(jSONArray1, jSONArray5);
      assertSame(jSONArray1, jSONArray4);
      assertNotSame(jSONArray5, jSONArray2);
      assertNotSame(jSONArray5, jSONArray0);
      assertNotSame(jSONArray5, jSONArray1);
      assertNotSame(jSONArray5, jSONArray4);
      assertNotSame(jSONArray5, jSONArray3);
      assertNotSame(jSONArray2, jSONArray5);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray4, jSONArray5);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray3);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3248, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3248, jSONArray1.size());
      assertFalse(jSONArray5.isEmpty());
      assertEquals(3248, jSONArray5.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3248, jSONArray2.size());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(3248, jSONArray4.size());
      assertNotNull(jSONArray5);
      
      byte byte0 = jSONArray4.getByteValue(1622);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.equals((Object)jSONArray5));
      assertTrue(jSONArray1.equals((Object)jSONArray5));
      assertTrue(jSONArray2.equals((Object)jSONArray5));
      assertTrue(jSONArray4.equals((Object)jSONArray5));
      assertEquals((byte)0, byte0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray5);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertNotSame(jSONArray1, jSONArray5);
      assertSame(jSONArray1, jSONArray4);
      assertNotSame(jSONArray2, jSONArray5);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray4, jSONArray5);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray3);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3248, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3248, jSONArray1.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3248, jSONArray2.size());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(3248, jSONArray4.size());
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      JSONArray jSONArray6 = jSONArray0.fluentAddAll(3089, (Collection<?>) jSONArray4);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.equals((Object)jSONArray5));
      assertFalse(jSONArray1.equals((Object)jSONArray5));
      assertFalse(jSONArray2.equals((Object)jSONArray5));
      assertFalse(jSONArray6.equals((Object)jSONArray5));
      assertFalse(jSONArray4.equals((Object)jSONArray5));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray5);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray6);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertNotSame(jSONArray1, jSONArray5);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray6);
      assertNotSame(jSONArray2, jSONArray5);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray6);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray6, jSONArray2);
      assertSame(jSONArray6, jSONArray3);
      assertNotSame(jSONArray6, jSONArray5);
      assertSame(jSONArray6, jSONArray0);
      assertSame(jSONArray6, jSONArray4);
      assertSame(jSONArray6, jSONArray1);
      assertNotSame(jSONArray4, jSONArray5);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray6);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray3);
      assertEquals(6496, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(6496, jSONArray1.size());
      assertEquals(6496, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(jSONArray6.isEmpty());
      assertEquals(6496, jSONArray6.size());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(6496, jSONArray4.size());
      assertNotNull(jSONArray6);
      
      long long0 = jSONArray2.getLongValue(0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.equals((Object)jSONArray5));
      assertFalse(jSONArray1.equals((Object)jSONArray5));
      assertFalse(jSONArray2.equals((Object)jSONArray5));
      assertEquals(0L, long0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray5);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray6);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertNotSame(jSONArray1, jSONArray5);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray6);
      assertNotSame(jSONArray2, jSONArray5);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray6);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertEquals(6496, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(6496, jSONArray1.size());
      assertEquals(6496, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals("[]", string0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(string0);
      
      int int0 = 1622;
      JSONArray jSONArray1 = jSONArray0.fluentSet(1622, "[]");
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertNotNull(jSONArray1);
      
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(iterator0);
      
      JSONArray jSONArray2 = jSONArray0.fluentRemove(989);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(1622, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1622, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertNotNull(parameterizedTypeImpl1);
      
      String string1 = jSONArray0.defaultLocale.toLanguageTag();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(string1.equals((Object)string0));
      assertEquals("en", string1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertEquals(1622, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(string1);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      short short0 = jSONArray2.getShortValue(1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals((short)0, short0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertEquals(1622, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1622, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      assertFalse(mockThaiBuddhistDate1.equals((Object)mockThaiBuddhistDate0));
      assertNotNull(mockThaiBuddhistDate1);
      
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      JSONArray jSONArray3 = jSONArray1.fluentAdd((Object) iterator0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(1623, jSONArray3.size());
      assertNotNull(jSONArray3);
      
      // Undeclared exception!
      try { 
        jSONArray3.getJSONArray(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1623
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals("[]", string0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(string0);
      
      int int0 = 1622;
      JSONArray jSONArray1 = jSONArray0.fluentSet(1622, jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertNotNull(jSONArray1);
      
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      assertNotNull(pascalNameFilter0);
      
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1623, jSONArray2.size());
      assertNotNull(jSONArray2);
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNotNull(serializeConfig0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = serializeConfig0.propertyNamingStrategy;
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONObject jSONObject0 = new JSONObject(3072, true);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[0] = serializerFeature0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[1] = "yyyy-MM-dd HH:mm:ss";
      Boolean boolean0 = jSONArray1.getBoolean(989);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray2);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertNull(boolean0);
      
      JSONArray jSONArray3 = JSON.parseArray("");
      assertNull(jSONArray3);
      
      // Undeclared exception!
      try { 
        jSONArray0.getDate(50900);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 50900, Size: 1623
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals("[]", string0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(string0);
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(1622, "[]");
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertNotNull(iterator0);
      
      JSONArray jSONArray2 = jSONArray0.fluentRemove(989);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1622, jSONArray0.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1622, jSONArray2.size());
      assertNotNull(jSONArray2);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertNotNull(parameterizedTypeImpl1);
      
      String string1 = jSONArray0.defaultLocale.toLanguageTag();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(string1.equals((Object)string0));
      assertEquals("en", string1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1622, jSONArray0.size());
      assertNotNull(string1);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      short short0 = jSONArray2.getShortValue(1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals((short)0, short0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1622, jSONArray0.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1622, jSONArray2.size());
      
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      assertFalse(mockThaiBuddhistDate1.equals((Object)mockThaiBuddhistDate0));
      assertNotNull(mockThaiBuddhistDate1);
      
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      JSONArray jSONArray3 = jSONArray1.fluentAdd((Object) iterator0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(1623, jSONArray3.size());
      assertNotNull(jSONArray3);
      
      JSONArray jSONArray4 = (JSONArray)jSONArray3.clone();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray4.equals((Object)jSONArray2));
      assertTrue(jSONArray4.equals((Object)jSONArray3));
      assertTrue(jSONArray4.equals((Object)jSONArray1));
      assertTrue(jSONArray4.equals((Object)jSONArray0));
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertNotSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray3, jSONArray4);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray4, jSONArray1);
      assertNotSame(jSONArray4, jSONArray0);
      assertNotSame(jSONArray4, jSONArray3);
      assertNotSame(jSONArray4, jSONArray2);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(1623, jSONArray3.size());
      assertEquals(1623, jSONArray4.size());
      assertFalse(jSONArray4.isEmpty());
      assertNotNull(jSONArray4);
      
      // Undeclared exception!
      try { 
        jSONArray3.getLongValue(1622);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : java.util.ArrayList$Itr@2e04bedf
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals("[]", string0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(string0);
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(1622, jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONArray1.isEmpty();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(boolean0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      assertNotNull(pascalNameFilter0);
      
      JSONArray jSONArray2 = new JSONArray(989);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertTrue(jSONArray2.isEmpty());
      assertEquals(0, jSONArray2.size());
      assertNotNull(jSONArray2);
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = serializeConfig0.propertyNamingStrategy;
      Object object0 = jSONArray2.getRelatedArray();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertNotSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray0);
      assertTrue(jSONArray2.isEmpty());
      assertEquals(0, jSONArray2.size());
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[2];
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[0] = serializerFeature0;
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      float float0 = jSONArray0.getFloatValue(1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      int int0 = 26;
      // Undeclared exception!
      try { 
        jSONArray0.getBigInteger(26);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 26, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals("[]", string0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(string0);
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(1622, jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONArray1.isEmpty();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(boolean0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertNotNull(iterator0);
      
      boolean boolean1 = jSONArray1.getBooleanValue(1606);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("yyyy-MM-dd HH:mm:ss", false);
      assertNotNull(mockFileOutputStream0);
      
      mockFileOutputStream0.write(4135);
      FileDescriptor fileDescriptor0 = mockFileOutputStream0.getFD();
      assertTrue(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("yyyy-MM-dd HH:mm:ss");
      assertEquals(1, mockFileInputStream0.available());
      assertNotNull(mockFileInputStream0);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertNotNull(parameterizedTypeImpl1);
      
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      assertNotNull(pascalNameFilter0);
      
      serializeFilterArray0[0] = (SerializeFilter) pascalNameFilter0;
      Object object0 = jSONArray0.getRelatedArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertNull(object0);
      
      boolean boolean2 = jSONArray1.contains("");
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals("[]", string0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(string0);
      
      int int0 = 1622;
      JSONArray jSONArray1 = jSONArray0.fluentSet(1622, jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONArray1.isEmpty();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(boolean0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        jSONArray1.getBooleanValue(1622);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals("[]", string0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(string0);
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(1622, jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      assertNotNull(pascalNameFilter0);
      
      JSONArray jSONArray2 = new JSONArray(jSONArray1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = serializeConfig0.propertyNamingStrategy;
      Object object0 = jSONArray0.getRelatedArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      JSONObject jSONObject0 = new JSONObject(3089, true);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      assertNotNull(jSONObject0);
      
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteNullListAsEmpty;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[9];
      serializerFeatureArray0[0] = serializerFeature1;
      serializerFeatureArray0[1] = serializerFeature1;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature1;
      serializerFeatureArray0[4] = serializerFeature1;
      serializerFeatureArray0[5] = serializerFeature0;
      serializerFeatureArray0[6] = serializerFeature0;
      serializerFeatureArray0[7] = serializerFeature1;
      serializerFeatureArray0[8] = serializerFeature1;
      byte[] byteArray0 = JSON.toJSONBytes((Object) jSONArray0, serializeConfig0, (SerializeFilter) pascalNameFilter0, serializerFeatureArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray0, jSONArray2);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(byteArray0);
      
      JSONArray jSONArray3 = (JSONArray)jSONArray2.get(1622);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertNotSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray1);
      assertNotSame(jSONArray2, jSONArray3);
      assertSame(jSONArray3, jSONArray1);
      assertNotSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1623, jSONArray3.size());
      assertFalse(jSONArray3.isEmpty());
      assertNotNull(jSONArray3);
      
      JSONArray jSONArray4 = new JSONArray(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(1623, jSONArray4.size());
      assertNotNull(jSONArray4);
      
      // Undeclared exception!
      try { 
        jSONArray4.getFloatValue(1622);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals("[]", string0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(string0);
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(1622, jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONArray1.isEmpty();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(boolean0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(iterator0);
      
      boolean boolean1 = jSONArray1.getBooleanValue(989);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      
      boolean boolean2 = jSONArray1.equals(iterator0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      
      int int0 = 961;
      Integer integer0 = new Integer(989);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(989, (int)integer0);
      assertNotNull(integer0);
      
      JSONArray jSONArray2 = jSONArray1.getJSONArray(1622);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      Class<String> class0 = String.class;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "1.2.46";
      stringArray0[1] = "1.2.46";
      stringArray0[2] = "1.2.46";
      stringArray0[3] = "yyyy-MM-dd HH:mm:ss";
      stringArray0[4] = "1.2.46";
      stringArray0[5] = "1.2.46";
      stringArray0[6] = "b";
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter(class0, stringArray0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      assertNotNull(simplePropertyPreFilter0);
      
      // Undeclared exception!
      try { 
        jSONArray2.getBoolean(1622);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals("[]", string0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(string0);
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(1622, jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONArray1.isEmpty();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(boolean0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      
      SerializeConfig serializeConfig0 = SerializeConfig.getGlobalInstance();
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = serializeConfig0.propertyNamingStrategy;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        jSONArray1.getIntValue(1622);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,{\"$ref\":\"@\"}]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      
      // Undeclared exception!
      try { 
        jSONArray0.getInteger(989);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 989, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals("[]", string0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(string0);
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(989, jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(990, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(990, jSONArray1.size());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONArray1.isEmpty();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(boolean0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(990, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(990, jSONArray1.size());
      
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(990, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(iterator0);
      
      double double0 = jSONArray1.getDoubleValue(16);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0.0, double0, 0.01);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(990, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(990, jSONArray1.size());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("yyyy-MM-dd HH:mm:ss", false);
      assertNotNull(mockFileOutputStream0);
      
      mockFileOutputStream0.write(4135);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("yyyy-MM-dd HH:mm:ss");
      assertEquals(1, mockFileInputStream0.available());
      assertNotNull(mockFileInputStream0);
      
      Type type0 = jSONArray0.getComponentType();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(990, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertNull(type0);
      
      ListIterator<Object> listIterator0 = jSONArray0.listIterator();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(990, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertNotNull(serializeConfig0);
      
      SerializeFilter[] serializeFilterArray0 = new SerializeFilter[1];
      PascalNameFilter pascalNameFilter0 = new PascalNameFilter();
      assertNotNull(pascalNameFilter0);
      
      serializeFilterArray0[0] = (SerializeFilter) pascalNameFilter0;
      TreeMap<String, Field> treeMap0 = new TreeMap<String, Field>();
      assertEquals(0, treeMap0.size());
      assertNotNull(treeMap0);
      
      Field field0 = ParserConfig.getFieldFromCache("1.2.46", treeMap0);
      assertEquals(0, treeMap0.size());
      assertNull(field0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        jSONArray1.getShortValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 990
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(1622, jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      boolean boolean0 = jSONArray1.isEmpty();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(boolean0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      
      int int0 = 1606;
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(iterator0);
      
      // Undeclared exception!
      try { 
        jSONArray1.getDoubleValue(3089);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3089, Size: 1623
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals("[]", string0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(string0);
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(1622, "[]");
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertNotNull(jSONArray1);
      
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(iterator0);
      
      boolean boolean0 = jSONArray1.isEmpty();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(boolean0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      
      Iterator<Object> iterator1 = jSONArray0.iterator();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(iterator1.equals((Object)iterator0));
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(iterator1, iterator0);
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray0.isEmpty());
      assertNotNull(iterator1);
      
      // Undeclared exception!
      try { 
        jSONArray0.getDoubleValue(1622);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals("[]", string0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(string0);
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(1622, "[]");
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertNotNull(jSONArray1);
      
      Iterator<Object> iterator0 = jSONArray0.iterator();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertNotNull(iterator0);
      
      JSONArray jSONArray2 = jSONArray1.fluentRetainAll(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1623, jSONArray2.size());
      assertNotNull(jSONArray2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertNotNull(parameterizedTypeImpl1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String string1 = jSONArray2.getObject(1610, (Type) parameterizedTypeImpl1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1623, jSONArray2.size());
      assertNull(string1);
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      assertNotNull(mockMinguoDate0);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer integer0 = new Integer(3089);
      assertEquals(3089, (int)integer0);
      assertNotNull(integer0);
      
      JSONArray jSONArray3 = jSONArray1.fluentAdd((Object) iterator0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray3, jSONArray0);
      assertSame(jSONArray3, jSONArray2);
      assertSame(jSONArray3, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1624, jSONArray0.size());
      assertEquals(1624, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(1624, jSONArray3.size());
      assertNotNull(jSONArray3);
      
      JSONArray jSONArray4 = jSONArray0.fluentAddAll(989, (Collection<?>) jSONArray2);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray0);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertFalse(jSONArray4.isEmpty());
      assertEquals(3248, jSONArray4.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3248, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3248, jSONArray1.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3248, jSONArray2.size());
      assertNotNull(jSONArray4);
      
      jSONArray1.setComponentType(parameterizedTypeImpl1);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray3);
      assertSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3248, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3248, jSONArray1.size());
      
      JSONObject jSONObject0 = jSONArray1.getJSONObject(2109);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray3);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3248, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3248, jSONArray1.size());
      assertNull(jSONObject0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      jSONArray1.hashCode();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertSame(jSONArray0, jSONArray4);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray3);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3248, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3248, jSONArray1.size());
      
      JSONArray jSONArray5 = (JSONArray)jSONArray4.clone();
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray5.equals((Object)jSONArray2));
      assertTrue(jSONArray5.equals((Object)jSONArray0));
      assertTrue(jSONArray5.equals((Object)jSONArray3));
      assertTrue(jSONArray5.equals((Object)jSONArray1));
      assertTrue(jSONArray5.equals((Object)jSONArray4));
      assertNotSame(jSONArray4, jSONArray5);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray5);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray5);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray5);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertNotSame(jSONArray5, jSONArray4);
      assertNotSame(jSONArray5, jSONArray0);
      assertNotSame(jSONArray5, jSONArray2);
      assertNotSame(jSONArray5, jSONArray3);
      assertNotSame(jSONArray5, jSONArray1);
      assertFalse(jSONArray4.isEmpty());
      assertEquals(3248, jSONArray4.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3248, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3248, jSONArray1.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3248, jSONArray2.size());
      assertFalse(jSONArray5.isEmpty());
      assertEquals(3248, jSONArray5.size());
      assertNotNull(jSONArray5);
      
      byte byte0 = jSONArray4.getByteValue(1622);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray4.equals((Object)jSONArray5));
      assertTrue(jSONArray0.equals((Object)jSONArray5));
      assertTrue(jSONArray1.equals((Object)jSONArray5));
      assertTrue(jSONArray2.equals((Object)jSONArray5));
      assertEquals((byte)0, byte0);
      assertNotSame(jSONArray4, jSONArray5);
      assertSame(jSONArray4, jSONArray0);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray5);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray5);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray5);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertFalse(jSONArray4.isEmpty());
      assertEquals(3248, jSONArray4.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3248, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3248, jSONArray1.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3248, jSONArray2.size());
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      JSONArray jSONArray6 = jSONArray0.fluentAddAll(3089, (Collection<?>) jSONArray4);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray4.equals((Object)jSONArray5));
      assertFalse(jSONArray0.equals((Object)jSONArray5));
      assertFalse(jSONArray1.equals((Object)jSONArray5));
      assertFalse(jSONArray2.equals((Object)jSONArray5));
      assertFalse(jSONArray6.equals((Object)jSONArray5));
      assertSame(jSONArray4, jSONArray6);
      assertSame(jSONArray4, jSONArray0);
      assertNotSame(jSONArray4, jSONArray5);
      assertSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray1);
      assertSame(jSONArray4, jSONArray3);
      assertSame(jSONArray0, jSONArray6);
      assertSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray5);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray5);
      assertSame(jSONArray1, jSONArray2);
      assertSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray6);
      assertSame(jSONArray2, jSONArray4);
      assertSame(jSONArray2, jSONArray6);
      assertSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray5);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertSame(jSONArray6, jSONArray1);
      assertSame(jSONArray6, jSONArray4);
      assertSame(jSONArray6, jSONArray3);
      assertSame(jSONArray6, jSONArray2);
      assertSame(jSONArray6, jSONArray0);
      assertNotSame(jSONArray6, jSONArray5);
      assertFalse(jSONArray4.isEmpty());
      assertEquals(6496, jSONArray4.size());
      assertFalse(jSONArray0.isEmpty());
      assertEquals(6496, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(6496, jSONArray1.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(6496, jSONArray2.size());
      assertEquals(6496, jSONArray6.size());
      assertFalse(jSONArray6.isEmpty());
      assertNotNull(jSONArray6);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals("[]", string0);
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray0.isEmpty());
      assertNotNull(string0);
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(1622, "[]");
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertNotNull(jSONArray1);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertNotNull(parameterizedTypeImpl1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = jSONArray1.getObject(1610, (Type) parameterizedTypeImpl1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertNull(string1);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      short short0 = jSONArray1.getShortValue(1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals((short)0, short0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      assertFalse(mockThaiBuddhistDate1.equals((Object)mockThaiBuddhistDate0));
      assertNotNull(mockThaiBuddhistDate1);
      
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONArray jSONArray2 = (JSONArray)jSONArray1.clone();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray2.equals((Object)jSONArray1));
      assertTrue(jSONArray2.equals((Object)jSONArray0));
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1623, jSONArray2.size());
      assertNotNull(jSONArray2);
      
      MockThaiBuddhistDate mockThaiBuddhistDate2 = new MockThaiBuddhistDate();
      assertFalse(mockThaiBuddhistDate2.equals((Object)mockThaiBuddhistDate0));
      assertFalse(mockThaiBuddhistDate2.equals((Object)mockThaiBuddhistDate1));
      assertNotNull(mockThaiBuddhistDate2);
      
      JSONArray jSONArray3 = jSONArray2.fluentAdd((int) (short)0, (Object) mockThaiBuddhistDate2);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.equals((Object)jSONArray2));
      assertFalse(jSONArray1.equals((Object)jSONArray2));
      assertFalse(jSONArray2.equals((Object)jSONArray0));
      assertFalse(jSONArray2.equals((Object)jSONArray1));
      assertFalse(mockThaiBuddhistDate2.equals((Object)mockThaiBuddhistDate0));
      assertFalse(mockThaiBuddhistDate2.equals((Object)mockThaiBuddhistDate1));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertNotSame(jSONArray0, jSONArray3);
      assertNotSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray2);
      assertNotSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray3);
      assertNotSame(mockThaiBuddhistDate2, mockThaiBuddhistDate0);
      assertNotSame(mockThaiBuddhistDate2, mockThaiBuddhistDate1);
      assertSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(1624, jSONArray2.size());
      assertEquals(1624, jSONArray3.size());
      assertFalse(jSONArray3.isEmpty());
      assertNotNull(jSONArray3);
      
      // Undeclared exception!
      try { 
        jSONArray1.getByteValue(1622);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"[]\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(jSONArray0);
      
      String string0 = jSONArray0.toString();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals("[]", string0);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertNotNull(string0);
      
      JSONArray jSONArray1 = jSONArray0.fluentSet(1622, "[]");
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertNotNull(jSONArray1);
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = (ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertNotNull(parameterizedTypeImpl1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = jSONArray1.getObject(1610, (Type) parameterizedTypeImpl1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(parameterizedTypeImpl1, parameterizedTypeImpl0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      assertNull(string1);
      
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      assertNotNull(mockThaiBuddhistDate0);
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      short short0 = jSONArray1.getShortValue(1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals((short)0, short0);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(1623, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(1623, jSONArray1.size());
      
      MockThaiBuddhistDate mockThaiBuddhistDate1 = new MockThaiBuddhistDate();
      assertFalse(mockThaiBuddhistDate1.equals((Object)mockThaiBuddhistDate0));
      assertNotNull(mockThaiBuddhistDate1);
      
      ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now();
      assertNotNull(thaiBuddhistDate0);
      
      JSONArray jSONArray2 = jSONArray0.fluentAddAll(989, (Collection<?>) jSONArray0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3246, jSONArray0.size());
      assertEquals(3246, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertNotNull(jSONArray2);
      
      JSONObject jSONObject0 = jSONArray1.getJSONObject(2109);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertSame(jSONArray1, jSONArray0);
      assertSame(jSONArray1, jSONArray2);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3246, jSONArray0.size());
      assertEquals(3246, jSONArray1.size());
      assertFalse(jSONArray1.isEmpty());
      assertNull(jSONObject0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      JSONArray jSONArray3 = (JSONArray)jSONArray2.clone();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONArray3.equals((Object)jSONArray0));
      assertTrue(jSONArray3.equals((Object)jSONArray2));
      assertTrue(jSONArray3.equals((Object)jSONArray1));
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray1);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3246, jSONArray0.size());
      assertEquals(3246, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertEquals(3246, jSONArray3.size());
      assertFalse(jSONArray3.isEmpty());
      assertNotNull(jSONArray3);
      
      MockThaiBuddhistDate mockThaiBuddhistDate2 = new MockThaiBuddhistDate();
      assertFalse(mockThaiBuddhistDate2.equals((Object)mockThaiBuddhistDate1));
      assertFalse(mockThaiBuddhistDate2.equals((Object)mockThaiBuddhistDate0));
      assertNotNull(mockThaiBuddhistDate2);
      
      JSONArray jSONArray4 = jSONArray3.fluentAdd((int) (short)0, (Object) mockThaiBuddhistDate2);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(mockThaiBuddhistDate2.equals((Object)mockThaiBuddhistDate1));
      assertFalse(mockThaiBuddhistDate2.equals((Object)mockThaiBuddhistDate0));
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(jSONArray4.equals((Object)jSONArray0));
      assertFalse(jSONArray4.equals((Object)jSONArray2));
      assertFalse(jSONArray4.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertNotSame(mockThaiBuddhistDate2, mockThaiBuddhistDate1);
      assertNotSame(mockThaiBuddhistDate2, mockThaiBuddhistDate0);
      assertNotSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray4, jSONArray0);
      assertNotSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray3);
      assertNotSame(jSONArray4, jSONArray1);
      assertNotSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray4);
      assertNotSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray4);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3246, jSONArray0.size());
      assertEquals(3247, jSONArray4.size());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(3246, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(3247, jSONArray3.size());
      assertNotNull(jSONArray4);
      
      byte byte0 = jSONArray2.getByteValue(1622);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray4));
      assertEquals((byte)0, byte0);
      assertNotSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray4);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3246, jSONArray0.size());
      assertEquals(3246, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      Object object3 = new Object();
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      
      boolean boolean0 = jSONArray3.contains(mockThaiBuddhistDate1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(mockThaiBuddhistDate1.equals((Object)mockThaiBuddhistDate2));
      assertFalse(mockThaiBuddhistDate1.equals((Object)mockThaiBuddhistDate0));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray4));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(boolean0);
      assertNotSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(mockThaiBuddhistDate1, mockThaiBuddhistDate2);
      assertNotSame(mockThaiBuddhistDate1, mockThaiBuddhistDate0);
      assertNotSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray4);
      assertNotSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray4);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3246, jSONArray0.size());
      assertEquals(3246, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(3247, jSONArray3.size());
      
      ThaiBuddhistDate thaiBuddhistDate1 = MockThaiBuddhistDate.now();
      assertTrue(thaiBuddhistDate1.equals((Object)thaiBuddhistDate0));
      assertNotSame(thaiBuddhistDate1, thaiBuddhistDate0);
      assertNotNull(thaiBuddhistDate1);
      
      boolean boolean1 = jSONArray2.containsAll(jSONArray4);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(mockThaiBuddhistDate2.equals((Object)mockThaiBuddhistDate1));
      assertFalse(mockThaiBuddhistDate2.equals((Object)mockThaiBuddhistDate0));
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(jSONArray4.equals((Object)jSONArray0));
      assertFalse(jSONArray4.equals((Object)jSONArray2));
      assertFalse(jSONArray4.equals((Object)jSONArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray4));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertFalse(boolean1);
      assertNotSame(mockThaiBuddhistDate2, mockThaiBuddhistDate1);
      assertNotSame(mockThaiBuddhistDate2, mockThaiBuddhistDate0);
      assertNotSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray4, jSONArray0);
      assertNotSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray3);
      assertNotSame(jSONArray4, jSONArray1);
      assertNotSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray4);
      assertNotSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray4);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3246, jSONArray0.size());
      assertEquals(3247, jSONArray4.size());
      assertFalse(jSONArray4.isEmpty());
      assertEquals(3246, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(3247, jSONArray3.size());
      
      jSONArray1.add(926, (Object) mockThaiBuddhistDate1);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(jSONArray1.equals((Object)jSONArray4));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertFalse(mockThaiBuddhistDate1.equals((Object)mockThaiBuddhistDate2));
      assertFalse(mockThaiBuddhistDate1.equals((Object)mockThaiBuddhistDate0));
      assertNotSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertNotSame(mockThaiBuddhistDate1, mockThaiBuddhistDate2);
      assertNotSame(mockThaiBuddhistDate1, mockThaiBuddhistDate0);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3247, jSONArray0.size());
      assertFalse(jSONArray1.isEmpty());
      assertEquals(3247, jSONArray1.size());
      
      byte byte1 = ObjectStreamConstants.TC_NULL;
      assertFalse(byte1 == byte0);
      assertEquals((byte)112, byte1);
      
      Object object4 = jSONArray2.remove(0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray4));
      assertNotSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray4);
      assertFalse(jSONArray0.isEmpty());
      assertEquals(3246, jSONArray0.size());
      assertEquals(3246, jSONArray2.size());
      assertFalse(jSONArray2.isEmpty());
      assertNull(object4);
      
      jSONArray1.clear();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(jSONArray1.equals((Object)jSONArray4));
      assertFalse(jSONArray1.equals((Object)jSONArray3));
      assertNotSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray1, jSONArray4);
      assertSame(jSONArray1, jSONArray0);
      assertNotSame(jSONArray1, jSONArray3);
      assertSame(jSONArray1, jSONArray2);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertTrue(jSONArray1.isEmpty());
      assertEquals(0, jSONArray1.size());
      
      Type type0 = jSONArray4.getComponentType();
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertFalse(mockThaiBuddhistDate2.equals((Object)mockThaiBuddhistDate1));
      assertFalse(mockThaiBuddhistDate2.equals((Object)mockThaiBuddhistDate0));
      assertFalse(jSONArray0.equals((Object)jSONArray4));
      assertFalse(jSONArray0.equals((Object)jSONArray3));
      assertFalse(jSONArray4.equals((Object)jSONArray0));
      assertFalse(jSONArray4.equals((Object)jSONArray2));
      assertFalse(jSONArray4.equals((Object)jSONArray1));
      assertFalse(jSONArray2.equals((Object)jSONArray3));
      assertFalse(jSONArray2.equals((Object)jSONArray4));
      assertFalse(jSONArray3.equals((Object)jSONArray2));
      assertFalse(jSONArray3.equals((Object)jSONArray0));
      assertFalse(jSONArray3.equals((Object)jSONArray1));
      assertNotSame(mockThaiBuddhistDate2, mockThaiBuddhistDate1);
      assertNotSame(mockThaiBuddhistDate2, mockThaiBuddhistDate0);
      assertNotSame(jSONArray0, jSONArray4);
      assertNotSame(jSONArray0, jSONArray3);
      assertSame(jSONArray0, jSONArray2);
      assertSame(jSONArray0, jSONArray1);
      assertNotSame(jSONArray4, jSONArray0);
      assertNotSame(jSONArray4, jSONArray2);
      assertSame(jSONArray4, jSONArray3);
      assertNotSame(jSONArray4, jSONArray1);
      assertNotSame(jSONArray2, jSONArray3);
      assertSame(jSONArray2, jSONArray1);
      assertSame(jSONArray2, jSONArray0);
      assertNotSame(jSONArray2, jSONArray4);
      assertNotSame(jSONArray3, jSONArray2);
      assertNotSame(jSONArray3, jSONArray0);
      assertNotSame(jSONArray3, jSONArray1);
      assertSame(jSONArray3, jSONArray4);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      assertEquals(3247, jSONArray4.size());
      assertFalse(jSONArray4.isEmpty());
      assertTrue(jSONArray2.isEmpty());
      assertEquals(0, jSONArray2.size());
      assertFalse(jSONArray3.isEmpty());
      assertEquals(3247, jSONArray3.size());
      assertNull(type0);
  }
}
