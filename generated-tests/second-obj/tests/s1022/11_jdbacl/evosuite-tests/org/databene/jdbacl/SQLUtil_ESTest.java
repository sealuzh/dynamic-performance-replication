/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:41:35 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.FileDescriptor;
import java.io.LineNumberReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.Writer;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.apache.derby.catalog.Dependable;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.table.Table;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil.removeComments("D(oD9~<");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execute");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "execute", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("PRIMARY KEY ()", (String[]) null, "D(oD9~<", "PRIMARY KEY ()", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("create unique index", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique index", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "create unique index";
      stringArray0[1] = "alter session";
      stringArray0[2] = "create unique index";
      stringArray0[3] = "create unique index";
      stringArray0[4] = "create unique index";
      stringArray0[5] = "create unique index";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter session", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"alter session\" PRIMARY KEY (create unique index, alter session, create unique index, create unique index, create unique index, create unique index)", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("alter materialized viewillegal column type format:");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized viewillegal column type format:");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.removeComments("D(oD~<");
      boolean boolean0 = SQLUtil.isDML("D(oD~<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("G H^g6Y?'ejV`G.!+I");
      TableContainer tableContainer0 = new TableContainer("G H^g6Y?'ejV`G.!+I");
      String string0 = SQLUtil.ownerDotComponent(tableContainer0);
      assertEquals("G H^g6Y?'ejV`G.!+I", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Character character0 = Character.valueOf('>');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'>'", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "'>'";
      stringArray0[3] = null;
      stringArray0[4] = null;
      String string1 = SQLUtil.join((String) null, (String) null, stringArray0, stringArray0[0], stringArray0[4], stringArray0);
      assertEquals("null as null on null.null = null.null and null.null = null.null and null.'>' = null.'>' and null.null = null.null and null.null = null.null", string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileReader mockFileReader0 = new MockFileReader(fileDescriptor0);
      LineNumberReader lineNumberReader0 = new LineNumberReader(mockFileReader0);
      BufferedReader bufferedReader0 = new BufferedReader(lineNumberReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(bufferedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[15];
      SQLUtil.normalize("org.apache.derby.impl.sql.compile.RowCountNode", false);
      SQLUtil.renderColumnListWithTableName("org.apache.derby.impl.sql.compile.RowCountNode", stringArray0);
      Boolean boolean0 = Boolean.valueOf("org.apache.derby.impl.sql.compile.RowCountNode");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JF0HmSq&x88(Xi");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      String string0 = SQLUtil.substituteMarkers("JF0HmSq&x88(Xi", "Q5gVp7\\67 (nC", mockHijrahDate0);
      assertEquals("JF0HmSq&x88(Xi", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = "yMPzH^7U";
      stringArray0[3] = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT  ", stringBuilder0.toString());
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "yMPzH^7U", true, stringArray0);
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals(".null, .null, .yMPzH^7U, ., .null, .null", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("0Pj/:n6V1WpT^t\"");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "0Pj/:n6V1WpT^t\"";
      stringArray0[1] = "0Pj/:n6V1WpT^t\"";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("0Pj/:n6V1WpT^t\" = '0Pj/:n6V1WpT^t\"' AND 0Pj/:n6V1WpT^t\" = '0Pj/:n6V1WpT^t\"'", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "*qRzq4Z(l4H");
      SQLUtil.addRequiredCondition("*qRzq4Z(l4H", stringBuilder0);
      assertEquals("*qRzq4Z(l4H and *qRzq4Z(l4H", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = TypeId.ARRAY_NAME;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("~}>?-CwK*/0FQFs-}F");
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      DefaultDBTable defaultDBTable3 = new DefaultDBTable();
      assertEquals("table", defaultDBTable3.getObjectType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = Dependable.FILE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("File", defaultDBTable0, 848, "watchdog");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("watchdog");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.removeComments("File");
      DBDataType dBDataType0 = DBDataType.getInstance(479, "watchdog");
      Integer integer0 = new Integer(479);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("watchdog", defaultDBTable0, dBDataType0, integer0);
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("Hm6", defaultDBTable0, dBDataType0, integer0, integer1);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn2);
      assertEquals("WATCHDOG(479,1)", string1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("alter materialized viewillegal column type format:");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("alter materialized viewillegal column type format:", "alter materialized viewillegal column type format:", versionNumber0);
      defaultDatabase0.getTable(">~KTu}uj", false);
      DBDataType dBDataType0 = DBDataType.getInstance(1450, "c/KP:da-)");
      Integer integer0 = new Integer(1450);
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("c/KP:da-)", (DBTable) null, dBDataType0, integer1);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("C/KP:DA-)(0)", string0);
      
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("I1/v3b[", (DBTable) null, dBDataType0, integer0, integer2);
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("I1/v3b[, c/KP:da-), I1/v3b[", string1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      DBDataType dBDataType0 = DBDataType.getInstance(3651, "}Y9k5 ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("}Y9k5 ", (DBTable) null, dBDataType0);
      defaultDBColumn0.getNotNullConstraint();
      SQLUtil.constraintName(dBUniqueConstraint0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = "yMPzH^7U";
      stringArray0[3] = "";
      stringArray0[4] = "yMPzH^7U";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create materialized view", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "yMPzH^7U", false, stringArray0);
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      String string0 = SQLUtil.normalize("6:+;bJnE@ r0NyJ|MBG", false);
      assertEquals("6 : + ; bJnE @ r0NyJ | MBG", string0);
      
      boolean boolean0 = SQLUtil.isDDL("calls?m/^i [b8$0*");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("+ts}3Bo");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "calls?m/^i [b8$0*";
      stringArray0[1] = "6 : + ; bJnE @ r0NyJ | MBG";
      stringArray0[2] = "6:+;bJnE@ r0NyJ|MBG";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("+ts}3Bo", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
      
      SQLUtil.parseColumnTypeAndSize("&]n2Y-]LwuM!1~f`n87");
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "&]n2Y-]LwuM!1~f`n87";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, &]n2Y-]LwuM!1~f`n87)", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Character.valueOf('>');
      String[] stringArray0 = new String[12];
      stringArray0[1] = null;
      stringArray0[11] = null;
      stringArray0[4] = null;
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, stringArray0[0], stringArray0[4], stringArray0);
      assertEquals("null as null on null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("KotaM");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.isDDL("NePnK`=wu,OhY?");
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NePnK`=wu,OhY?");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "NePnK`=wu,OhY?";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      stringBuilder0.insert(0, (CharSequence) "NePnK`=wu,OhY?");
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("XBM03.D");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance((-1931), "os.name");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("NePnK`=wu,OhY?", defaultDBTable1, dBDataType0, integer0);
      defaultDBColumn0.isIdentical(dBUniqueConstraint0);
      SQLUtil.typeAndName(dBUniqueConstraint0);
      // Undeclared exception!
      try { 
        defaultDBTable1.getUniqueConstraint("NePnK`=wu,OhY?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = SQLUtil.normalize("drop index(,^f[8vm0i77=wtssx%>", false);
      assertEquals("drop index (, ^ f [ 8vm0i77 = wtssx % >", string0);
      
      boolean boolean0 = SQLUtil.isDDL(":^");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Illegal column type format: ");
      stringBuilder0.append('(');
      SQLUtil.addOptionalCondition("Go]", stringBuilder0);
      assertEquals("Illegal column type format: ( or Go]", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      SQLUtil.parseColumnTypeAndSize("renameexecuteilegalcolumc typeifora::");
      String string0 = SQLUtil.normalize("3\"^LX;(g.(!h#g", false);
      assertEquals("3 \"^LX;(g.(!h#g\"", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLUtil.normalize("I,u`E*sYNfGRJ%(n", false);
      String[] stringArray0 = new String[7];
      stringArray0[2] = "I, u ` E * sYNfGRJ  % (n";
      stringArray0[1] = "";
      stringArray0[2] = "I, u ` E * sYNfGRJ  % (n";
      stringArray0[3] = "I,u`E*sYNfGRJ%(n";
      stringArray0[4] = "I,u`E*sYNfGRJ%(n";
      stringArray0[5] = "I, u ` E * sYNfGRJ  % (n";
      stringArray0[6] = "I, u ` E * sYNfGRJ  % (n";
      SQLUtil.leftJoin("I,u`E*sYNfGRJ%(n", stringArray0, "", "illegal column type fo", stringArray0);
      String string0 = SchemaDescriptor.IBM_SYSTEM_FUN_SCHEMA_NAME;
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("executeintoillegal", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("executeintoillegal", dBSchema0);
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ";[0eN", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1222), "B4~w");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(";[0eN", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      defaultDBTable0.removeForeignKeyConstraint((DBForeignKeyConstraint) null);
      SQLUtil.removeComments("CONSTRAINT ;[0eN UNIQUE ()");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "CONSTRAINT ;[0eN UNIQUE ()");
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT ;[0eN UNIQUE ()CONSTRAINT ;[0eN ", stringBuilder0.toString());
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("\"#", dBSchema0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("22008", false, defaultDBTable1, "22008");
      SQLUtil.constraintName(dBCheckConstraint0);
      String string0 = SQLUtil.ownerDotComponent(dBCheckConstraint0);
      assertEquals("\"#.22008", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = null;
      SQLUtil.renderColumnNames((String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = Dependable.FILE;
      String string1 = Dependable.FILE;
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("File", defaultDBTable0, 1284, "/Eo>kGN](k@cG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: /Eo>kGN](k@cG
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil.isDDL("NePnK`=wu,OhY?");
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NePnK`=wu,OhY?");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "NePnK`=wu,OhY?";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      DBDataType.getInstance(3651, "}Y9k5 ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}Y9k5 ");
      mockPrintWriter0.append('k');
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("NePnK`=wu,OhY?", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("Illegal column type format: ");
      SQLUtil.typeAndName((DBObject) null);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("call");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "I*r}Ofm&zbX_I6]A";
      stringArray0[1] = "ilegal column typeifor";
      stringArray0[2] = "I*r}Ofm&zbX_I6]A";
      SQLUtil.renderColumnListWithTableName("I*r}Ofm&zbX_I6]A", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(12);
      SQLUtil.addOptionalCondition("I*r}Ofm&zbX_I6]A.I*r}Ofm&zbX_I6]A, I*r}Ofm&zbX_I6]A.ilegal column typeifor, I*r}Ofm&zbX_I6]A.I*r}Ofm&zbX_I6]A", stringBuilder0);
      assertEquals("I*r}Ofm&zbX_I6]A.I*r}Ofm&zbX_I6]A, I*r}Ofm&zbX_I6]A.ilegal column typeifor, I*r}Ofm&zbX_I6]A.I*r}Ofm&zbX_I6]A", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "yMPzH^7U";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String string0 = Dependable.FILE;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "`/y", true, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      boolean boolean0 = SQLUtil.isDML("truncate");
      assertTrue(boolean0);
      
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT `/y ", string1);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string2 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT `/y PRIMARY KEY (, yMPzH^7U, , , , )", string2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = false;
      SQLUtil.normalize("D!)f-'fCHZ", true);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "D!)f-'fCHZ");
      int int0 = 4547;
      int int1 = (-2896);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(4547, (CharSequence) "D!)f-'fCHZ", 4547, (-2896));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 4547
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("LONGNVARCHAR");
      assertNull(boolean0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("", false, "postConstructor", "RUS");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT  CHECK RUS", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil.removeComments("SELECT * FROM ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "SELECT * FROM ";
      stringArray0[1] = "SELECT * FROM ";
      stringArray0[2] = "SELECT * FROM ";
      stringArray0[3] = "SELECT * FROM ";
      String string0 = SQLUtil.innerJoin("SELECT * FROM ", stringArray0, "SELECT * FROM ", "SELECT * FROM ", stringArray0);
      assertEquals("SELECT * FROM  as SELECT * FROM  on SELECT * FROM .SELECT * FROM  = SELECT * FROM .SELECT * FROM  and SELECT * FROM .SELECT * FROM  = SELECT * FROM .SELECT * FROM  and SELECT * FROM .SELECT * FROM  = SELECT * FROM .SELECT * FROM  and SELECT * FROM .SELECT * FROM  = SELECT * FROM .SELECT * FROM ", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("SELECT * FROM ");
      assertFalse(boolean0);
      
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("SELECT * FROM ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"SELECT * FROM \" FOREIGN KEY (SELECT * FROM , SELECT * FROM , SELECT * FROM , SELECT * FROM ) REFERENCES null(SELECT * FROM , SELECT * FROM , SELECT * FROM , SELECT * FROM )", string1);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      String string2 = SQLUtil.renderColumnListWithTableName("SELECT * FROM ", stringArray0);
      assertEquals("SELECT * FROM .SELECT * FROM , SELECT * FROM .SELECT * FROM , SELECT * FROM .SELECT * FROM , SELECT * FROM .SELECT * FROM ", string2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("FJ&cZ@V{CHjXa,F");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      SQLUtil.typeAndName(defaultDBTable0);
      DBDataType.getInstance((-11), "FJ&cZ@V{CHjXa,F");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("FJ&cZ@V{CHjXa,F", defaultDBTable0, (-11), "ansiTrim");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("drop indexillegal column type format:");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "exec";
      SQLUtil.mutatesStructure("exec");
      StringBuilder stringBuilder0 = new StringBuilder("exec");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        DBDataType.getInstance("execi_hq`|=z]~ec)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-492), "`MAm7[");
      dBDataType0.isAlpha();
      FileSystemHandling.shouldAllThrowIOExceptions();
      dBDataType0.isAlpha();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("`MAm7[", defaultDBTable0, dBDataType0);
      SQLUtil.ownerDotComponent(defaultDBColumn0);
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create unique indexselect intoillegal column type format:", true, stringArray0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      arrayList0.add((DBColumn) defaultDBColumn0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      SQLUtil.innerJoin("CONSTRAINT \"create unique indexselect intoillegal column type format:\" ", stringArray0, "='wGuf3HPA>Y)Nky", "insert", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "+9aCC*Q)/|ksEonI");
      SQLUtil.addRequiredCondition("CONSTRAINT \"create unique indexselect intoillegal column type format:\" ", stringBuilder0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("null.`MAm7[");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Boolean boolean0 = new Boolean("`MAm7[");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-492), "`MAm7[");
      dBDataType0.isAlpha();
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultDBTable0.setName("- ");
      DBDataType.getInstance((-492), "BLOB");
      dBDataType0.isAlpha();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("`MAm7[", defaultDBTable0, dBDataType0);
      SQLUtil.ownerDotComponent(defaultDBColumn0);
      SQLUtil.isDML("+9aCC*Q)/|ksEonI");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create unique indexselect intoillegal column type format:", true, stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.constraintName(dBUniqueConstraint0);
      defaultDBColumn0.toString();
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      arrayList0.add((DBColumn) defaultDBColumn0);
      arrayList0.add((DBColumn) defaultDBColumn0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      String string0 = RawStoreFactory.CONTAINER_INITIAL_PAGES;
      SQLUtil.innerJoin("derby.storage.initialPages", stringArray0, "org.databene.jdbacl.SQLUtil", "X}=|U#PnRz`hXce", stringArray0);
      dBUniqueConstraint0.setTable(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "+9aCC*Q)/|ksEonI");
      SQLUtil.addRequiredCondition("CONSTRAINT \"create unique indexselect intoillegal column type format:\" ", stringBuilder0);
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("- .`MAm7[");
      assertNull(boolean1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/11_jdbacl/5mW9b;Ep");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "5|3MUtiEZ");
      String[] stringArray0 = new String[9];
      SQLUtil.removeComments("'");
      MockFile.createTempFile("]=0o", "'");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("ilegal ", 35);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "'", true, stringArray0);
      defaultDBTable0.getCheckConstraints();
      DBDataType.getInstance(1136, "]=0o");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5mW9b;Ep");
      Set<DBForeignKeyConstraint> set0 = new LinkedHashSet<DBForeignKeyConstraint>();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("'");
      assertNotNull(objectArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = SQLUtil.normalize("renamecalls?m/^i [b8$0*", false);
      assertEquals("renamecalls ? m / ^ i [ b8 $ 0 *", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[9];
      SQLUtil.removeComments("'");
      SQLUtil.renderColumnNames(stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(, , , , , , , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "yMPzH^7U";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String string0 = Dependable.FILE;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "`/y", true, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      defaultDBTable0.addUniqueConstraint(dBPrimaryKeyConstraint0);
      dBPrimaryKeyConstraint0.equals("yMPzH^7U");
      dBPrimaryKeyConstraint0.setName("drop indexq6m7;#>r+3");
      SQLUtil.isDML("truncate");
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.mutatesDataOrStructure("insert");
      System.setCurrentTimeMillis(2609L);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      SQLUtil.mutatesDataOrStructure("select intoillegal column type format:");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "&CQ ";
      stringArray0[1] = "select intoillegal column type format:";
      SQLUtil.mutatesDataOrStructure("select into");
      boolean boolean1 = true;
      SQLUtil.normalize("rename", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("into");
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[9];
      SQLUtil.normalize("'", true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l=0o");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "9rFhd!k1E1l%", true, stringArray0);
      defaultDBTable0.getUniqueConstraint("9rFhd!k1E1l%");
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("''", defaultDBTable0, (-307122711), "|1Q}u)lmqpL%");
      defaultDBTable0.getForeignKeyConstraints();
      SQLUtil.removeComments("C ");
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (, , , , , , , , )
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = TypeId.VARBINARY_NAME;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/11_jdbacl/watchdog");
      FileSystemHandling.createFolder(evoSuiteFile0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("VARBINARY", defaultDBTable0, 848, "watchdog");
      String string1 = Dependable.CONSTRAINT;
      DBDataType dBDataType0 = DBDataType.getInstance(479, "watchdog");
      Integer integer0 = new Integer(479);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("watchdog", defaultDBTable0, dBDataType0, integer0);
      Integer integer1 = RawTransaction.ABORT;
      Integer.getInteger("watchdog", 479);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("Hm6", defaultDBTable0, dBDataType0, integer0, integer1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn2);
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "WATCHDOG(479,1)", false, "watchdog");
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("call");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Hm6");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "yMPzH^7U";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("cqMoF{rvG\"GVBmuL3?");
      String string0 = Dependable.FILE;
      boolean boolean0 = SQLUtil.isDML("truncate");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`/y");
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean1 = SQLUtil.isDDL("yMPzH^7U");
      assertFalse(boolean1 == boolean0);
      
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean2);
      assertFalse(boolean2);
      
      System.setCurrentTimeMillis(2609L);
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, yMPzH^7U, , , , )", string1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLUtil.mutatesStructure("Ilegal column typeiformat: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("Ilegal column typeiformat: ", true);
      SQLUtil.normalize("D!)y*'fCHZ", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("Ilegal column typeiformat: ", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = new Integer(65279);
      defaultDBTable0.setName("Ilegal column typeiformat: ");
      String string0 = Table.SYSTEM_TABLE;
      SQLUtil.normalize("Ilegal column typeiformat :", false);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      SQLUtil.renderValue(defaultDBTable0);
      DBDataType dBDataType0 = DBDataType.getInstance((-623), "(zcu & nfe");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("D!)y*'fCHZ", defaultDBTable0, dBDataType0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultDBColumn0.setDefaultValue("(zcu & nfe");
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
