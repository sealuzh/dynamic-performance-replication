/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 05 20:04:32 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>(class0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<HashMap<String, Object>, Map<Map<Object, Object>, HashMap<String, String>>> hashMap0 = new HashMap<HashMap<String, Object>, Map<Map<Object, Object>, HashMap<String, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, Object>, Map<Object, Object>, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Map<Object, Object>, HashMap<String, String>>(hashMap0, class0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<Map<Object, Object>, HashMap<String, String>> hashMap2 = new HashMap<Map<Object, Object>, HashMap<String, String>>();
      hashMap0.put(hashMap1, hashMap2);
      Map<Map<Object, Object>, HashMap<String, String>> map0 = doubleKeyMap0.remove(hashMap1);
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      Integer integer0 = new Integer(1);
      doubleKeyMap0.put("", (Object) integer0, integer0);
      Map<Object, Integer> map0 = doubleKeyMap0.remove("");
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-35));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DoubleKeyMap<Integer, Integer, Map<String, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Map<String, String>>((Map<Integer, Map<Integer, Map<String, String>>>) null);
      doubleKeyMap0.put(integer0, integer0, (Map<String, String>) hashMap0);
      Map<String, String> map0 = doubleKeyMap0.put(integer0, integer0, (Map<String, String>) null);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      Integer integer0 = doubleKeyMap0.remove("QjQa'f{=|(;A", (Object) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DoubleKeyMap<String, Integer, String> doubleKeyMap0 = new DoubleKeyMap<String, Integer, String>((Map<String, Map<Integer, String>>) null);
      String string0 = doubleKeyMap0.remove((String) null, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoubleKeyMap<String, Object, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<String, Object, HashMap<String, Object>>();
      Map<Object, HashMap<String, Object>> map0 = doubleKeyMap0.remove((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoubleKeyMap<Object, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Object, Object>();
      Object object0 = new Object();
      Map<Object, Object> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      String string0 = doubleKeyMap0.put((String) null, (Object) null, "$}EVWML\"$P");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Integer, String>((Map<Map<Object, Object>, Map<Integer, String>>) null);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      String string0 = doubleKeyMap0.get((Map<Object, Object>) hashMap0, (Integer) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, Object, HashMap<Map<Object, Object>, Object>> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, Object, HashMap<Map<Object, Object>, Object>>();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, String>();
      Map<Object, Object> map0 = doubleKeyMap1.newMap();
      Object object0 = new Object();
      HashMap<Map<Object, Object>, Object> hashMap0 = doubleKeyMap0.get(map0, object0);
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      String string0 = doubleKeyMap0.get((Object) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DoubleKeyMap<HashMap<Integer, String>, Object, HashMap<String, Object>> doubleKeyMap0 = new DoubleKeyMap<HashMap<Integer, String>, Object, HashMap<String, Object>>();
      Map<Object, Map<Integer, Map<Integer, Object>>> map0 = doubleKeyMap0.newMap();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, Map<Integer, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Map<Integer, Object>>(map0, class0);
      Integer integer0 = new Integer((-3976));
      Map<Integer, Object> map1 = doubleKeyMap1.get((Object) doubleKeyMap0, integer0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DoubleKeyMap<Object, Map<Object, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Map<Object, Object>, Object>();
      Map<Map<Object, Object>, Object> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Integer, Map<Object, Object>, String> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, Object>, String>();
      DoubleKeyMap<Object, Map<Object, Object>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Object, Object>, Object>();
      Map<Map<Object, Object>, Object> map0 = doubleKeyMap1.get((Object) doubleKeyMap0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Object, Map<Map<Object, Object>, Map<Object, Object>>> hashMap0 = new HashMap<Object, Map<Map<Object, Object>, Map<Object, Object>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Map<Object, Object>, Map<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Object, Map<Object, Object>, Map<Object, Object>>(hashMap0, class0);
      Object object0 = new Object();
      HashMap<Object, Object> hashMap1 = new HashMap<Object, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap0.put(object0, (Map<Object, Object>) hashMap1, (Map<Object, Object>) hashMap1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, HashMap<Object, Object>, Map<Object, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, HashMap<Object, Object>, Map<Object, Object>>((Map<Object, Map<HashMap<Object, Object>, Map<Object, Object>>>) null, class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Object, Integer, HashMap<Map<Object, Object>, String>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Object, Integer, HashMap<Map<Object, Object>, String>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      DoubleKeyMap<Map<Object, Object>, Object, HashMap<Map<Object, Object>, Object>> doubleKeyMap1 = new DoubleKeyMap<Map<Object, Object>, Object, HashMap<Map<Object, Object>, Object>>();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer((-1443));
      doubleKeyMap0.put("", (Object) doubleKeyMap1, integer0);
      Integer integer1 = doubleKeyMap0.remove("", (Object) hashMap0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>();
      Integer integer0 = new Integer((-1));
      String string0 = doubleKeyMap0.remove(object0, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<HashMap<String, Object>, Map<Map<Object, Object>, HashMap<String, String>>> hashMap0 = new HashMap<HashMap<String, Object>, Map<Map<Object, Object>, HashMap<String, String>>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<HashMap<String, Object>, Map<Object, Object>, HashMap<String, String>> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Map<Object, Object>, HashMap<String, String>>(hashMap0, class0);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      HashMap<Map<Object, Object>, HashMap<String, String>> hashMap2 = new HashMap<Map<Object, Object>, HashMap<String, String>>();
      hashMap0.put(hashMap1, hashMap2);
      HashMap<Object, Object> hashMap3 = new HashMap<Object, Object>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      doubleKeyMap0.put(hashMap1, (Map<Object, Object>) hashMap3, hashMap4);
      doubleKeyMap0.remove(hashMap1, (Map<Object, Object>) hashMap3);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DoubleKeyMap<Map<Object, Object>, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Object, Object>, String, Integer>((Map<Map<Object, Object>, Map<String, Integer>>) null);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer0 = new Integer((-870));
      doubleKeyMap0.put((Map<Object, Object>) hashMap0, "", integer0);
      Integer integer1 = doubleKeyMap0.get((Map<Object, Object>) hashMap0, "xRj5UBM");
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DoubleKeyMap<HashMap<String, Object>, String, Map<Object, Object>> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, String, Map<Object, Object>>((Class<? extends Map>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<String, Map<String, Object>> hashMap0 = new HashMap<String, Map<String, Object>>();
      DoubleKeyMap<String, String, Object> doubleKeyMap0 = new DoubleKeyMap<String, String, Object>(hashMap0);
      Object object0 = new Object();
      Object object1 = doubleKeyMap0.put("", "", object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      Object object0 = new Object();
      doubleKeyMap0.put("", object0, (Integer) null);
      Integer integer0 = doubleKeyMap0.remove("", object0);
      assertNull(integer0);
  }
}
