/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:45:39 GMT 2018
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInput;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Member;
import java.net.URI;
import java.util.Locale;
import java.util.regex.Pattern;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.ElementValue;
import org.apache.bcel.classfile.EmptyVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.util.ClassPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[1] = object0;
      String string0 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(name_index = ");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      Utility.printArray((PrintWriter) mockPrintWriter0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = Pattern.CANON_EQ;
      Utility.classOrInterface(128);
      Utility.decode("class", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("class", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      try { 
        Utility.typeOfMethodSignature("*]o+yi} ]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: *]o+yi} ]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = Utility.getSignature("");
      String string1 = Utility.fillup("L;", (-87), true, '~');
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = Utility.getSignature("\t\t#");
      assertEquals("L#;", string0);
      
      String string1 = Utility.compactClassName("\t\t#");
      assertEquals("\t\t#", string1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Utility.getSignature("(class_index = ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L(class_index;");
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)14;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("b5 0e", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.isJavaIdentifierPart('\'');
      // Undeclared exception!
      try { 
        Utility.getSignature("E<4nZGB,Lf)!3[+z:q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[+z:q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)54;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.signatureToString("6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `6'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-94);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.encode(byteArray0, false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.compactClassName("$a2$A");
      // Undeclared exception!
      try { 
        Utility.signatureToString("$a2$A", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$a2$A'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      try { 
        Utility.typeOfSignature("3<?$jE|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3<?$jE|
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      try { 
        Utility.typeOfSignature("@{,.F:v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: @{,.F:v
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Oy<ZIk*]JEK(OvF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Oy<ZIk*]JEK(OvF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Utility.replace("]c2iTex]Sd", "]c2iTex]Sd", "]c2iTex]Sd");
      try { 
        Utility.typeOfSignature("]c2iTex]Sd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ]c2iTex]Sd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = Utility.printArray((Object[]) null, false, true);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("`Ir");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "`Ir";
      objectArray0[1] = (Object) mockPrintStream0;
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = ObjectStreamConstants.baseWireHandle;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.getSignature("java.lang., low = ");
      Utility.typeOfSignature("Ljava/lang/,;");
      try { 
        Utility.methodSignatureArgumentTypes("impdep2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: impdep2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = ";Sf ";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature(";Sf ", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)11;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("if_icmple", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_icmple'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = Utility.getSignature("\t#");
      assertEquals("L#;", string0);
      
      Object[] objectArray0 = new Object[15];
      objectArray0[0] = (Object) "\t#";
      objectArray0[1] = (Object) "L#;";
      Object object0 = new Object();
      objectArray0[3] = (Object) "\t#";
      objectArray0[4] = (Object) "\t#";
      String string1 = Utility.printArray(objectArray0, false, true);
      assertEquals("\"\t#\", \"L#;\", null, \"\t#\", \"\t#\", null, null, null, null, null, null, null, null, null, null", string1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "Kl(DWOoE4wS;AM";
      Utility.replace("X)=Uow}hM^iIu", "X)=Uow}hM^iIu", "Kl(DWOoE4wS;AM");
      try { 
        Utility.typeOfSignature("Kl(DWOoE4wS;AM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Kl(DWOoE4wS;AM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("M/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `M/'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CONSTANT_Fieldref");
      assertEquals((byte)5, byte0);
      
      String string0 = Constants.ILLEGAL_OPCODE;
      String string1 = Utility.compactClassName("getfield");
      assertEquals("getfield", string1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      try { 
        Utility.typeOfSignature("!6Qhm>s&pR78Ne7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 6Qhm>s&pR78Ne7
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = ElementValue.ENUM_CONSTANT;
      Utility.getSignature("boolean");
      try { 
        Utility.methodSignatureArgumentTypes("Z", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      short short0 = Utility.searchOpcode("putfield");
      assertEquals((short)181, short0);
      
      String string0 = Utility.compactClassName("putfield", true);
      assertEquals("putfield", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte byte0 = (byte) (-94);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-94);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-94), (int) (byte) (-94));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.accessToString((-2302));
      boolean boolean0 = false;
      Utility.compactClassName("GW;{Cri9v!", false);
      String string1 = Constants.ILLEGAL_TYPE;
      MockFile mockFile0 = new MockFile("", "GW;{Cri9v!");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)124;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantClass constantClass0 = new ConstantClass((byte)124);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantClass1;
      constantArray0[1] = (Constant) constantClass0;
      constantArray0[2] = (Constant) constantClass0;
      constantArray0[3] = (Constant) constantClass0;
      constantArray0[4] = (Constant) constantClass1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "<illegal opcode>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"<illegal opcode>\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-88);
      byteArray0[1] = (byte)41;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "From\tTo\tHandler\tType\n";
      Utility.getSignature("From\tTo\tHandler\tType\n");
      String string1 = "g;=GoY)GLlW.v{CL#";
      try { 
        Utility.typeOfSignature("g;=GoY)GLlW.v{CL#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: g;=GoY)GLlW.v{CL#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = Member.DECLARED;
      byte[] byteArray0 = new byte[9];
      boolean boolean0 = true;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-71);
      byteArray1[1] = (byte)13;
      String string0 = "(\\#RF=^O\"dN!E+";
      try { 
        Utility.typeOfMethodSignature("(#RF=^O\"dN!E+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (#RF=^O\"dN!E+
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "/f@'P\"U`ZCqs";
      String string1 = Constants.ILLEGAL_OPCODE;
      try { 
        Utility.typeOfSignature("/f@'P\"U`ZCqs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /f@'P\"U`ZCqs
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "[]";
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("[]", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: []
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte) (-92);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-92), 982, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dconst_1
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Utility.convertString("jaanV)g.nt");
      byte byte0 = ElementValue.PRIMITIVE_FLOAT;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence3.markSupported();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = Utility.accessToString((int) (byte) (-67), true);
      assertEquals("public protected static final transient native abstract strictfp synthetic annotation enum", string0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = Utility.isSet(65, 1235);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Utility.compactClassName("Ivk?r+0QWD]", "Ivk?r+0QWD]", true);
      assertEquals("", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[3];
      Utility.signatureToString("V", false);
      String string1 = Utility.compactClassName("Bl)_V$L;");
      assertEquals("Bl)_V$L;", string1);
      
      Locale.getISOLanguages();
      int int0 = Utility.setBit((-1831), 47);
      assertEquals((-1831), int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A/W9.!D]`'oe0F|");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(q,*N4", "(q,*N4", "A/W9.!D]`'oe0F|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `q,*N4'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-105);
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 1532, (-1750));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), 2582);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Utility.methodSignatureReturnType("BootstrapMethoes");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "zT&g'");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte) (-86), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "l2i";
      Utility.convertString("l2i");
      String string1 = "L;V";
      MockPrintStream mockPrintStream0 = new MockPrintStream("L;V");
      Pattern.quote("L;V");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-127);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 255, (-203), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utility.methodSignatureReturnType("Invalid StackMap offset: ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Invalid StackMap offset: ";
      stringArray0[1] = "int";
      stringArray0[2] = "int";
      stringArray0[3] = "int";
      System.setCurrentTimeMillis(2628L);
      Utility.isJavaIdentifierPart('2');
      try { 
        Utility.methodSignatureArgumentTypes("sx(M?b6z1%o\"6C939", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: sx(M?b6z1%o\"6C939
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = Utility.getSignature("\t\t#");
      assertEquals("L#;", string0);
      
      String string1 = Utility.methodSignatureReturnType("L#;");
      assertEquals("#", string1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)100;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 81, (int) (byte)49, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)98;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2678, (int) (byte)98, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Utility.replace("&,VR>U69c", "&,VR>U69c", "quI}aR?");
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat(110);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      try { 
        Utility.typeOfSignature("&,VR>U69c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &,VR>U69c
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Utility.typeOfSignature("Illegally nested brackets:");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Illegally nested brackets:");
      ConstantPool constantPool0 = null;
      byte byte0 = (byte) (-93);
      byte byte1 = (byte) (-71);
      try { 
        Utility.methodSignatureReturnType("G`/:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G`/:'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Utility.convertString("?y#W 40");
      Utility.typeOfSignature("Invalid constant pool reference: ");
      try { 
        Utility.typeOfMethodSignature("?y#W 40");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?y#W 40
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "$l$8b$I$A$A$A$A$A$A$A";
      try { 
        Utility.typeOfSignature("$l$8b$I$A$A$A$A$A$A$A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $l$8b$I$A$A$A$A$A$A$A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      byteArray0[2] = (byte) (-8);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte) (-8));
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("istore_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: istore_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[21];
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-82), (int) (byte)0, true);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte) (-62);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)40;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte byte0 = (byte)5;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.signatureToString("PLJHi>9zl!|ik|q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `PLJHi>9zl!|ik|q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "?y#W 40?y#W 40";
      String string1 = Constants.ILLEGAL_OPCODE;
      byte byte0 = ObjectStreamConstants.TC_ENUM;
      Utility.compactClassName("?y#W 40?y#W 40");
      try { 
        Utility.typeOfSignature("<illegal opcode>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <illegal opcode>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = null;
      try { 
        Utility.typeOfSignature("AeWW%wN8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: AeWW%wN8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_EXCEPTION;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("CONTANT_Fieldref");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)123;
      Object object0 = new Object();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byteSequence1.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("char");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: char
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "'";
      try { 
        Utility.typeOfSignature("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      byte byte0 = ObjectStreamConstants.TC_ENUM;
      Utility.getSignature("?y#W 40?y#W 40");
      Utility.typeOfSignature("Z");
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, true, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("?y#W 40?y#W 40", "<illegal opcode>", "?y#W 40?y#W 40");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?y#W 40?y#W 40
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Utility.convertString("X)=Uow}hM^i\"u");
      Utility.compactClassName("X)=Uow}hM^i\"u", "X)=Uow}hM^i\"u", true);
      MockFile mockFile0 = new MockFile("", "jsr");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteSequence0.readUnsignedByte();
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      BCELComparator bCELComparator0 = JavaClass.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)88;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 81, (int) (byte)49, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "Y";
      try { 
        Utility.typeOfSignature("Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Y
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)49;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)65;
      Utility.equals(byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        Utility.signatureToString("W=>M3$@z6m", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `W=>M3$@z6m'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = Utility.isJavaIdentifierPart('z');
      assertTrue(boolean0);
      
      String string0 = Utility.signatureToString("F>|Y|hX8N{+,ME7", true);
      assertEquals("float", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "M/(";
      byte[] byteArray0 = Utility.decode("M/(", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte) (-86));
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string1 = "istore_0";
      try { 
        Utility.typeOfSignature("istore_0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: istore_0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = Member.DECLARED;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-90);
      byte byte0 = Utility.typeOfSignature("*Th9AEQl_)k5");
      assertEquals((byte)14, byte0);
      
      int int1 = Utility.clearBit(3474, 31);
      assertEquals(3474, int1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('`');
      boolean boolean1 = Utility.isJavaIdentifierPart('Z');
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)102;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2569), 512, true);
      assertEquals("0:    iastore\n1:    fsub\n", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      byte[] byteArray1 = new byte[5];
      byteArray1[1] = (byte)101;
      byteArray1[2] = (byte) (-53);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&OhT^mVSOb`Sq");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 10, (int) (byte) (-53), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("~Dh>y1XU++G$q", false);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("\"'oMH%[Eor?'n0h~", false);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "\"'oMH%[Eor?'n0h~";
      try { 
        Utility.decode("j~9,$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 67;
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)83;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",HYT[01WI:@");
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature(",HYT[01WI:@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ,HYT[01WI:@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = Pattern.UNICODE_CASE;
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.signatureToString("Ivk?r+0QWD]");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1408, (byte)0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = (byte) (-89);
      try { 
        Utility.typeOfSignature(".9o'*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .9o'*
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9$Zw!,iW8#\"{jB!O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9$Zw!,iW8#\"{jB!O
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.markSupported();
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("X)=Uow}hM^iIu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: X)=Uow}hM^iIu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('v');
      // Undeclared exception!
      try { 
        Utility.signatureToString("T#", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: T#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.compactClassName("LIvk?r+0QWD]", "LIvk?r+0QWD]", true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("LIvk?r+0QWD]");
      byte byte0 = (byte) (-55);
      String string0 = "CONSTANT_MethodHandle";
      try { 
        Utility.methodSignatureReturnType("LIvk?r+0QWD]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LIvk?r+0QWD]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      try { 
        Utility.typeOfSignature("Rw6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Rw6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('`');
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)79;
      byteArray0[1] = (byte)99;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)99, 490, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "FNIQ@s`v=cL9o#>\"]";
      byte[] byteArray0 = Utility.decode("V", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string1 = Constants.ILLEGAL_TYPE;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 301, 190, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "? extends ";
      MockPrintStream mockPrintStream0 = new MockPrintStream("? extends ");
      Utility.isJavaIdentifierPart('c');
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)79, 952, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 7;
      Utility.isSet(7, 7);
      String string0 = "#ZQ;wGJdP,j";
      try { 
        Utility.typeOfSignature("#ZQ;wGJdP,j");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #ZQ;wGJdP,j
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
      
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_EXCEPTION;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "BootstrapMethods");
      int int0 = Pattern.CANON_EQ;
      byte byte1 = ObjectStreamConstants.TC_CLASS;
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)123;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$A$7b", string0);
      
      String string1 = Utility.classOrInterface((byte)123);
      assertEquals("class", string1);
      
      byte[] byteArray1 = Utility.decode("$A$7b", false);
      assertArrayEquals(new byte[] {(byte)0, (byte)123}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = File.pathSeparator;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-113);
      byteArray0[1] = (byte) (-78);
      Utility.encode(byteArray0, false);
      try { 
        Utility.decode("$8f$b2", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = ObjectStreamConstants.TC_EXCEPTION;
      Pattern.quote("@L?y#W");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte1 = ElementValue.PRIMITIVE_SHORT;
      boolean boolean0 = false;
      Utility.compactClassName("Q@L?y#WE", "@L?y#W", false);
      String string0 = "G7e]73I}";
      try { 
        Utility.typeOfSignature("G7e]73I}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G7e]73I}
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)31;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "]c2iTex]Sd");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)39, (int) (byte)31, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "\"'oMH\\%[E\\or?'n0h~";
      Utility.compactClassName("\"'oMH%[Eor?'n0h~", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-99);
      byteArray0[1] = (byte) (-63);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((-2090));
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string0 = Constants.ILLEGAL_TYPE;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      MockFile mockFile0 = new MockFile("'?Hkx");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)24, (int) (byte) (-14), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "M/";
      try { 
        Utility.typeOfSignature("M/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: M/
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.convertString("I\"l");
      try { 
        Utility.typeOfSignature("4a6>.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 4a6>.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Utility.typeOfSignature(";S8 ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;S8 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utility.methodSignatureReturnType("SK{?");
      byte byte0 = ObjectStreamConstants.SC_EXTERNALIZABLE;
      Utility.convertString("SK{?");
      String string0 = Utility.signatureToString("StackMap(");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)41;
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 167, (-780), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Utility.setBit((byte)116, (byte)116);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("XRyH\"0T>kqf]X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XRyH\"0T>kqf]X'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = ElementValue.PRIMITIVE_FLOAT;
      Utility.setBit((byte)70, (byte)70);
      String string0 = Constants.CONSTRUCTOR_NAME;
      try { 
        Utility.typeOfSignature("8]<BEU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8]<BEU
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.compactClassName("f|<O", true);
      Utility.convertString("f|<O");
      Utility.setBit((-315), (byte)71);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)71;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("i+9}c~ #lNM7.3S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: i+9}c~ #lNM7.3S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.convertString("q-KSb]aU2XLkV(|A");
      Utility.setBit((-1460), (-1460));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature("q-KSb]aU2XLkV(|A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: q-KSb]aU2XLkV(|A
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.typeOfSignature("TT");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.methodSignatureReturnType("sW<Mu@k?)Z#'", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      try { 
        Utility.typeOfSignature("sW<Mu@k?)Z#'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: sW<Mu@k?)Z#'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-94);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("<clinit>", "z-od/\"a!paj&B", "invokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <clinit>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-PEC");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte) (-35);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1697, 4816);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "?m=L'Y#w&!";
      stringArray0[1] = "?m=L'Y#w&!";
      stringArray0[2] = "?m=L'Y#w&!";
      stringArray0[3] = "?m=L'Y#w&!";
      stringArray0[4] = "?m=L'Y#w&!";
      stringArray0[5] = "?m=L'Y#w&!";
      stringArray0[6] = "?m=L'Y#w&!";
      Utility.methodTypeToSignature("?m=L'Y#w&!", stringArray0);
      try { 
        Utility.typeOfSignature("?m=L'Y#w&!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?m=L'Y#w&!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = Constants.CONSTRUCTOR_NAME;
      byte byte0 = (byte) (-99);
      Utility.getSignature("<init>");
      String string1 = "5pth";
      try { 
        Utility.typeOfSignature("5pth");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5pth
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("M/(", false);
      Utility.equals(byteArray0, byteArray0);
      int int0 = (-1113);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 36, (-1770), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = Utility.replace("2EBA$<76pMc", "#l[h`fesS}CvoAl-=", "if_icmpne");
      assertEquals("2EBA$<76pMc", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      int int0 = Member.PUBLIC;
      byteSequence0.markSupported();
      byteSequence0.close();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readInt();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.skip(0);
      String string1 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("land", string1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.compactClassName("HzF#m$@G:xcO", "impdep2", true);
      Utility.isSet((byte) (-67), 66);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)81;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 649, 52, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = ">_5?6eC/Zrv+6|h&";
      MockFile mockFile0 = new MockFile(">_5?6eC/Zrv+6|h&");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      try { 
        Utility.typeOfSignature(">_5?6eC/Zrv+6|h&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >_5?6eC/Zrv+6|h&
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("\t\t");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("(fTl,(caF7qZY,J!;");
      constantPool0.constantToString((Constant) constantUtf8_0);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)75;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2513, (int) (byte)75, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)91;
      Utility.equals(byteArray0, byteArray0);
      Utility.codeToString(byteArray0, (ConstantPool) null, (-1113), 197, true);
      Utility.compactClassName(", low = ");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    aload_1\n1:    dup_x2\n2:    nop\n", "0:    aload_1\n1:    dup_x2\n2:    nop\n", "0:    aload_1\n1:    dup_x2\n2:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    aload_1
         // 1:    dup_x2
         // 2:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte)66;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-2383), (int) (byte)66);
      assertEquals("0:    <illegal opcode>\n1:    <illegal opcode>\n2:    fdiv\n3:    lload_3\n4:    lstore_3\n", string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Utility.convertString("1cA5'U");
      // Undeclared exception!
      try { 
        Utility.signatureToString("1cA5'U", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `1cA5'U'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Utility.convertString("I\"l");
      Utility.compactClassName("I\"l", true);
      byte[] byteArray0 = new byte[5];
      int int0 = Utility.clearBit((byte) (-1), (byte)0);
      assertEquals((-2), int0);
      
      String string0 = Utility.signatureToString("I\"l", true);
      assertEquals("int", string0);
      
      String string1 = Utility.convertString("I\"l");
      assertEquals("I\\\"l", string1);
      
      String string2 = Utility.compactClassName("Ms1$VyvB70d", true);
      assertEquals("Ms1$VyvB70d", string2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/]c2iTex]Sd");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)114;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte) (-23);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(8192);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = null;
      try {
        byteSequence1 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "\"'oMH\\%[E\\or?'n0h~";
      boolean boolean0 = true;
      Utility.compactClassName("\"'oMH%[Eor?'n0h~", true);
      Utility.setBit((-315), (-315));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)114;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readFloat();
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureReturnType("\"'oMH%[Eor?'n0h~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\"'oMH%[Eor?'n0h~'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Utility.isSet(191, 191);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)27;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        byteSequence1.readFloat();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = Pattern.UNICODE_CASE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)42;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[13];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence2, constantPool0, false);
      try { 
        byteSequence2.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Constants.CONSTRUCTOR_NAME;
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)74;
      Utility.codeToString(byteArray0, constantPool0, (-693), (int) (byte)119);
      Utility.getSignature("0:    pop\n1:    sastore\n2:    return\n3:    dneg\n4:    dstore_3\n5:    nop\n");
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 103);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isSet(2082, 2082);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)109;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)109, (-333), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool1 = constantPool0.copy();
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)17, (-2473));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = Constants.ILLEGAL_OPCODE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.read();
      byteSequence1.readByte();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte)34;
      Utility.encode(byteArray1, false);
      Utility.classOrInterface((-27));
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, (-135), (int) (byte)16, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Utility.methodSignatureReturnType("Ez@%jTl0_rR;J@u+Gl=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Ez@%jTl0_rR;J@u+Gl='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = Constants.CONSTRUCTOR_NAME;
      Constant[] constantArray0 = new Constant[8];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      Utility.codeToString(byteArray0, constantPool0, (int) (byte)0, (-693));
      Utility.getSignature("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n");
      Utility.convertString("0:    nop\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n");
      Utility.compactClassName(";y6ri/rv(Ws&9)*SZAe%", false);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      assertFalse(constantPool1.equals((Object)constantPool0));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/1_bcel/Unreachable default case reached!");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Utility.getSignature("impdep2");
      byte byte0 = ObjectStreamConstants.TC_BLOCKDATALONG;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)60;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)21, 42, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte)22;
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(16, 195);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-102), 159);
      String string0 = "if_icmpgt";
      try { 
        Utility.methodSignatureReturnType("if_icmpgt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_icmpgt'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      byte byte1 = (byte)67;
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-128), (int) (byte)67);
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    nop\n1:    ior\n2:    nop\n3:    nop\n4:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    nop
         // 1:    ior
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Utility.getSignature("\")IVJLd<3?");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) "\")IVJLd<3?";
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "\")IVJLd<3?";
      objectArray0[4] = (Object) "\")IVJLd<3?";
      objectArray0[5] = (Object) "\")IVJLd<3?";
      objectArray0[7] = (Object) "L\")IVJLd<3?;";
      String string0 = Constants.ILLEGAL_TYPE;
      objectArray0[8] = (Object) "8\"2|BE|";
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      MockFile mockFile0 = new MockFile("\")IVJLd<3?");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 180, 637, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-61);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-61), (int) (byte) (-61), true);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("0:    monitorexit\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    monitorexit
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "Q&a{'37R@oqQ~>";
      try { 
        Utility.typeOfSignature("Q&a{'37R@oqQ~>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q&a{'37R@oqQ~>
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("\"UL6T=C\"31Dl}L6*.-u", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("N(]-.%GR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N(]-.%GR'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)76;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)76, (int) (byte)76);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = 2063;
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("k:gaj4iDm#Tj?W)[", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: [
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Utility.typeOfSignature("S<");
      char char0 = '>';
      Utility.isJavaIdentifierPart('>');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)48;
      ConstantString constantString0 = new ConstantString(3);
      ConstantString constantString1 = new ConstantString(constantString0);
      Utility.convertString("sDk!}@");
      boolean boolean0 = false;
      Utility.fillup("v^id", 167, false, '>');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 97, (-2347), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = Member.DECLARED;
      try { 
        Utility.methodSignatureReturnType("KwRX ^Bz", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KwRX ^Bz'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      String[] stringArray0 = new String[8];
      stringArray0[0] = "iload_3";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = (-32768);
      Utility.setBit((-3245), (-32768));
      String string0 = "\"}n%'# ]u]l<";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"}n%'# ]u]l<");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string1 = "Ph.o$";
      try { 
        Utility.typeOfSignature("Ph.o$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ph.o$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte byte0 = ObjectStreamConstants.TC_ENUM;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)126;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.equals(byteArray0, byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 103, 225, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RL\"<2lF&hR'P");
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte byte0 = (byte) (-90);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantPool0.toString();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-90);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 14, (int) (byte) (-90), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.markSupported();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteSequence1.available();
      byteSequence2.markSupported();
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      byteSequence2.skip(1L);
      Utility.typeOfSignature("[L0`qr)V~:");
      Utility.compactClassName("`j0f;W7m&r?.,udv#", "`j0f;W7m&r?.,udv#", false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfMethodSignature("`j0f;W7m&r?.,udv#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: `j0f;W7m&r?.,udv#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte byte0 = Constants.CONSTANT_Fieldref;
      Utility.compactClassName("3, ");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)118;
      byteArray0[3] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)118, (int) (byte)114, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-57);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 170, (int) (byte) (-57));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "Unreachable defaut case reachd!";
      try { 
        Utility.methodSignatureReturnType("Unreachable defaut case reachd!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Unreachable defaut case reachd!'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(2029);
      FileSystemHandling.shouldAllThrowIOExceptions();
      constantString0.toString();
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)21;
      String string1 = Constants.CONSTRUCTOR_NAME;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-93), (int) (byte)21);
      assertEquals("0:    iload\t\t%0\n2:    nop\n", string2);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      char char0 = 'j';
      Utility.isJavaIdentifierPart('j');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)69;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)69, (int) (byte)44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Utility.compactClassName("newarray", "newarray", false);
      String string0 = " (";
      MockPrintStream mockPrintStream0 = new MockPrintStream(" (");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.copy();
      constantPool1.setConstantPool(constantArray0);
      ConstantInteger constantInteger0 = new ConstantInteger(180);
      ConstantPool constantPool2 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      byteArray0[2] = (byte)85;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)85, (int) (byte)85);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "YjMS2CyC9+");
      Utility.isSet(2, 2);
      // Undeclared exception!
      try { 
        Utility.signatureToString("YjMS2CyC9+", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YjMS2CyC9+'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      try { 
        Utility.typeOfSignature("W^mj%O5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: W^mj%O5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte byte0 = Utility.typeOfSignature("TT");
      assertEquals((byte)14, byte0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.methodSignatureReturnType("F&B9rM$.r:C4i#", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte byte1 = Utility.typeOfSignature("F&B9rM$.r:C4i#");
      assertEquals((byte)6, byte1);
      
      String string1 = Utility.convertString("float");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = Utility.compactClassName("dreturn", true);
      assertEquals("dreturn", string2);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[2] = object0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-105);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5Y ");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      try { 
        Utility.typeOfSignature(")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Utility.convertString("%|/%Y}muIq~ZoQA");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%|/%Y}muIq~ZoQA");
      MockPrintStream mockPrintStream0 = new MockPrintStream("%|/%Y}muIq~ZoQA");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte) (-120);
      byteArray0[8] = (byte)58;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)58, 1743, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = Constants.ILLEGAL_TYPE;
      Pattern.quote("java.lang.StringBuffer");
      Utility.convertString("java.lang.StringBuffer");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q>bE");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-101);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 291, 6045, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)43;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte) (-74);
      Utility.equals(byteArray0, byteArray1);
      Utility.classOrInterface(75);
      Utility.compactClassName("class", false);
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "private pr", "LineNumber(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<clinit>");
      byte[] byteArray0 = new byte[18];
      byteArray0[6] = (byte) (-70);
      byteArray0[0] = (byte)34;
      byteArray0[2] = (byte) (-16);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3595, (-881));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 4, (int) (byte) (-70));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Constant[] constantArray0 = null;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)104;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)104;
      byteArray0[3] = (byte)55;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)104, 82);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.markSupported();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteSequence1.available();
      byteSequence2.markSupported();
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      byteSequence2.skip(1L);
      Utility.typeOfSignature("[L0`qr)V~:");
      Utility.compactClassName("`j0f;W7m&r?.,udv#", "`j0f;W7m&r?.,udv#", false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfMethodSignature("`j0f;W7m&r?.,udv#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: `j0f;W7m&r?.,udv#
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[10];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte)17;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)17, (int) (byte)17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)24;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)24;
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte)110;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string0 = Constants.ILLEGAL_TYPE;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      MockFile mockFile0 = new MockFile("<illegal type>", "<illegal type>");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-14), (int) (byte)24);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    dload\t\t%0
         // 2:    dload\t\t%235
         // 4:    dload\t\t%0
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = File.pathSeparator;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-74), (int) (byte) (-74), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)57;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string0 = Constants.ILLEGAL_TYPE;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      MockFile mockFile0 = new MockFile(";41I<yf&Uscl&]<R");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 5, (int) (byte)57, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-107);
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 103, (int) (byte) (-107), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("\t\t");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t\t");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)52);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfMethodSignature("XaWrQ^*w'4a((##J0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: XaWrQ^*w'4a((##J0
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[0] = (byte)52;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)52;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence3, constantPool1, false);
      ByteSequence byteSequence4 = new ByteSequence(byteArray0);
      byteSequence4.readFully(byteArray0);
      int int0 = Pattern.CANON_EQ;
      // Undeclared exception!
      try { 
        Utility.signatureToString("L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = Member.DECLARED;
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-90);
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((byte)35);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte byte0 = (byte) (-15);
      Utility.codeToString(byteArray0, constantPool0, (-32768), (-1281));
      try { 
        Utility.typeOfSignature("0:    fload_1\n1:    fload_1\n2:    if_acmpne\t\t#1704\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n9:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    fload_1
         // 1:    fload_1
         // 2:    if_acmpne\t\t#1704
         // 5:    nop
         // 6:    nop
         // 7:    nop
         // 8:    nop
         // 9:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.isSet((byte)62, (byte)62);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)62;
      byteArray1[1] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 13, (int) (byte) (-94), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "'";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-114);
      byte byte0 = (byte) (-95);
      byteArray0[4] = (byte) (-95);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: -114
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)78;
      byteArray0[5] = (byte)67;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)55;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)55, (int) (byte)78);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = Utility.decode("FNIQ@s`v=cL9o#>\"]", false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string0 = Constants.ILLEGAL_TYPE;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 46, 301, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.isSet((-1450), 2891);
      char char0 = 'i';
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 175, (-939));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-113);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-59), 180);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    d2i
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      try { 
        Utility.typeOfSignature("EuV UE%mu3{(l");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EuV UE%mu3{(l
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = "Unreachable default case reached!";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)76;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)99, (int) (byte)76, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-104);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-104), (int) (byte) (-83), true);
      assertEquals("0:    dcmpg\n1:    nop\n2:    nop\n", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ConstantPool constantPool0 = null;
      String string0 = ", referenc";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", referenc");
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "goto_w");
      byteArray0[0] = (byte)72;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)72;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2660, 87, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.isJavaIdentifierPart('w');
      // Undeclared exception!
      try { 
        Utility.signatureToString("RzB45=Tm~GMn*>", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `RzB45=Tm~GMn*>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ConstantFloat constantFloat0 = new ConstantFloat(90);
      String string0 = "-f{un|yY){S";
      try { 
        Utility.typeOfSignature("-f{un|yY){S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -f{un|yY){S
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Utility.replace("&,VR>U69c", "&,VR>U69c", "quI}aR?");
      ConstantFloat constantFloat0 = new ConstantFloat(110);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)97;
      byteArray0[5] = (byte)97;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 3159, 110);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte byte0 = (byte) (-113);
      byte[] byteArray0 = new byte[1];
      byte byte1 = (byte)26;
      byteArray0[0] = (byte)26;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ", o 2M= ");
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)26, (int) (byte)26);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType(byteSequence0);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[0] = (Constant) constantMethodType1;
      ConstantFloat constantFloat0 = new ConstantFloat((byte)37);
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0);
      assertEquals("ifle\t\t#32064", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[3];
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte)112, 96);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-63), (byte)112);
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte) (-63);
      String string0 = "[';%F{;GHz";
      ClassPath classPath0 = new ClassPath("[';%F{;GHz");
      Utility.setBit((byte) (-63), (-1342));
      // Undeclared exception!
      try { 
        Utility.signatureToString("[';%F{;GHz", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `';%F{;GHz'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte byte0 = (byte) (-98);
      byteArray0[0] = (byte) (-98);
      byte byte1 = (byte)117;
      byteArray0[1] = (byte)117;
      byte byte2 = (byte)103;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte)103;
      byte byte3 = (byte)85;
      String string0 = "private";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "private");
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfMethodSignature("private");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: private
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int int0 = Member.DECLARED;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-90);
      Utility.classOrInterface(125);
      int int1 = 3474;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-117), (-1452));
      try { 
        Utility.typeOfSignature("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2)e20~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2)e20~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "%Zzf2";
      try { 
        Utility.typeOfSignature("%Zzf2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %Zzf2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Utility.isJavaIdentifierPart('L');
      try { 
        Utility.typeOfSignature("UJVqB#e*J(h(KV!$.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: UJVqB#e*J(h(KV!$.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = Utility.replace("2EBA$<7}6pMc", "#l[h`fesS}CvoAl-=", "if_icmpne");
      assertEquals("2EBA$<7}6pMc", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      int int0 = Member.PUBLIC;
      byteSequence0.markSupported();
      byteSequence0.close();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readInt();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.skip(0);
      String string1 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("dneg", string1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "zWSI&");
      ConstantString constantString0 = new ConstantString((-1249));
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-49);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1476, (int) (byte) (-67), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-3318));
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-113));
      constantMethodType0.copy();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(162, 3);
      BCELComparator bCELComparator0 = Method.getComparator();
      Constant.setComparator(bCELComparator0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1106, (-2773), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-104);
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)28, (int) (byte)102, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)63;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)63;
      byteArray1[1] = (byte) (-31);
      byteArray1[2] = (byte)110;
      byteArray1[3] = (byte)110;
      byteArray1[4] = (byte) (-31);
      byteArray1[5] = (byte) (-31);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)110, (-4845));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte) (-95);
      byteArray0[2] = (byte) (-95);
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-85);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-85);
      byteArray1[1] = (byte) (-95);
      byteArray1[2] = (byte) (-85);
      byteArray1[3] = (byte) (-95);
      byteArray1[4] = (byte) (-85);
      byteArray1[5] = (byte) (-95);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte) (-95), (-842));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Utility.isSet((byte) (-126), (byte) (-126));
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte) (-126);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)18, (int) (byte)121, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)102;
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte)102;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2678, (int) (byte)98, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-77);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)5, (-2361));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Utility.convertString("l2i");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-106);
      Utility.codeToString(byteArray0, constantPool0, (-3823), (int) (byte) (-106));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("0:    fcmpg\n1:    nop\n2:    nop\n", "\t<", "0:    fcmpg\n1:    nop\n2:    nop\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0:    fcmpg
         // 1:    nop
         // 2:    nop
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)98;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)98, (int) (byte)20, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte) (-63);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, 1, 1, true);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "J{";
      Utility.typeOfSignature("J{");
      Utility.getSignature(";Sf ");
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Utility.convertString("]c2mTa2]{d");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]c2mTa2]{d");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-96);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]c2mTa2]{d");
      byte[] byteArray1 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-96), (byte) (-96));
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantNameAndType0;
      constantArray0[2] = (Constant) constantNameAndType0;
      constantArray0[3] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Utility.codeToString(byteArray0, constantPool1, (int) (byte) (-96), 97, false);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      char char0 = 'j';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)44, (int) (byte)44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Utility.convertString("]c2iTex]Sd");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)22;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)69, (int) (byte)22);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)36;
      byteArray1[3] = (byte)32;
      byteArray1[4] = (byte)36;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, (int) (byte)36, 135);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.encode(byteArray0, false);
      Utility.classOrInterface((-305));
      byte[] byteArray1 = Utility.decode("interface", false);
      MockFile mockFile0 = new MockFile(";sT");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.mark((-2773));
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.compactClassName("'", "lmul", false);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("impdep2", "impdep2", false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "monitorexit");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)108;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = Constants.OPCODE_NAMES;
      try { 
        Utility.methodSignatureArgumentTypes("Q~E", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q~E
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "i2s";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ConstantPool constantPool0 = null;
      String string1 = Constants.ILLEGAL_OPCODE;
      byte[] byteArray0 = Utility.decode("void", false);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) byteArray0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      int int0 = 72;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 72, 72, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)122;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)122, 185, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = "j#ND";
      Utility.compactClassName("j#ND");
      Utility.setBit((-1468), (-1468));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)125;
      byte byte0 = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 171, 173, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)7;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.isSet((-115), (-115));
      byte[] byteArray1 = new byte[0];
      Utility.equals(byteArray1, byteArray1);
      Utility.getSignature("Ah#&S:");
      String string0 = "Dr:J3dSwp\\{OKK@>tx1";
      Utility.typeOfSignature("Dr:J3dSwp{OKK@>tx1");
      try { 
        Utility.typeOfMethodSignature("LAh#&S:;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: LAh#&S:;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Utility.replace("2GEBA$<7}6pMc", "#l[h`fesS}CvoAl-=", "if_icmpne");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = Constants.CONSTRUCTOR_NAME;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte) (-114);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-104), 54, false);
      Utility.clearBit((byte) (-104), 1024);
      Utility.accessToString(19, false);
      Utility.compactClassName("long");
      Utility.format(83, (byte) (-104), false, '3');
      Utility.accessToString(3460, true);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Utility.replace("2EBA$<7}6pMc", "putstatic", "putstatic");
      MockPrintStream mockPrintStream0 = new MockPrintStream("2EBA$<7}6pMc");
      MockPrintStream mockPrintStream1 = new MockPrintStream("if_icmpge");
      MockPrintStream mockPrintStream2 = new MockPrintStream("ifge");
      Pattern.quote("Synthetic attribute with length > 0");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Constants.ILLEGAL_OPCODE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)121;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)121, 9, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)37;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte)37;
      byteArray0[7] = (byte)55;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)55, (int) (byte) (-65));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Utility.convertString("\t\t");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t\t");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Constants.CONSTRUCTOR_NAME;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-70);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-114);
      byteArray0[5] = (byte) (-60);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-60), (int) (byte) (-60));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte byte0 = (byte) (-72);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-72);
      char char0 = '`';
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-72), (-401));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "Unreachable default case reached!";
      String string1 = "7*DY[q[|@#.{#,1S ";
      // Undeclared exception!
      try { 
        Utility.getSignature("7*DY[q[|@#.{#,1S ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[q[|@#.{#,1S 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-PEC");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte)75;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-167), 102, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)11;
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)75;
      byteArray0[7] = (byte)51;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)75, 129, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<clinit>");
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-70);
      byteArray0[0] = (byte)54;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-70);
      byteArray0[5] = (byte) (-70);
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte) (-70);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3595, (-881));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      Utility.printArray(objectArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{null, java.lang.Object@476f6f5, null, null, null}";
      Utility.compactClassName("]", true);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)1;
      objectArray0[1] = (Object) (byte)1;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)121;
      objectArray0[4] = (Object) (byte) (-44);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)19;
      byteArray0[8] = (byte) (-92);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool0.toString();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)31, 527);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      byte[] byteArray1 = new byte[7];
      byteArray1[1] = (byte) (-119);
      byteArray1[2] = (byte) (-119);
      byteArray1[4] = (byte) (-69);
      byteArray1[6] = (byte) (-69);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 2622, (int) (byte)0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      int int0 = Pattern.UNICODE_CASE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("Q&a{'37R@oqQ~>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q&a{'37R@oqQ~>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = File.pathSeparator;
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-125);
      byteArray0[1] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 7, 187);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(1727);
      byte byte0 = (byte) (-117);
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)17;
      byteArray0[5] = (byte)58;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)60, 1727, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(2042);
      byte byte0 = (byte) (-117);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)21;
      Utility.equals(byteArray0, byteArray0);
      Utility.classOrInterface((byte) (-117));
      int int0 = 450;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 450, (int) (byte) (-117), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.convertString("\t\t");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\t\t");
      MockPrintStream mockPrintStream0 = new MockPrintStream("+m#O/qOz>N8");
      String string0 = "monitorexit";
      Pattern.quote("monitorexit");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-73);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 184, 161);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      Utility.convertString("");
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      constantPool0.setConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)52;
      byteArray0[7] = (byte)52;
      byteArray0[0] = (byte)52;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)107;
      byteArray0[8] = (byte)52;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)52, (int) (byte)52);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.classOrInterface(163);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-23);
      byteArray0[0] = (byte) (-70);
      byteArray0[0] = (byte) (-66);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-66), 189);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)68;
      byteArray0[12] = (byte)84;
      byteArray0[3] = (byte)38;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1T}i,B|DY9Pq !?vgX");
      Utility.encode(byteArray0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Utility.methodSignatureReturnType("D$A$A$s$A$A$A$A$A$A$A$AT$A$A$A$A$A$A$A$A", false);
      String string0 = Constants.ILLEGAL_OPCODE;
      Utility.getSignature("1T}i,B|DY9Pq !?vgX");
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = "IE.M*HLI";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-78);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 1598, (int) (byte) (-78));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = "]cdiTex]Sd";
      String string1 = Constants.CONSTRUCTOR_NAME;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[12];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<init>");
      byteArray0[4] = (byte)26;
      byteArray0[6] = (byte) (-97);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)26, (int) (byte)26, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)32;
      Utility.convertString("==_l!S&]");
      String string0 = "Oy<ZIk*]JEK(OvF";
      try { 
        Utility.typeOfSignature("==_l!S&]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ==_l!S&]
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Utility.compactClassName("BootstrapMethoes");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Utility.getSignature("BV");
      String string0 = "Illegally nested brackets:";
      try { 
        Utility.typeOfSignature("7Q&Zp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7Q&Zp
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-87);
      byteArray0[2] = (byte) (-87);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      byte byte1 = (byte) (-94);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 212, 181, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Utility.typeOfSignature("VB PdMmQMC#zo");
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[21];
      byteArray0[1] = (byte) (-82);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(169);
      Integer integer0 = new Integer((byte) (-82));
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Z/@yQh");
      byteSequence0.available();
      Utility.codeToString(byteArray0, (ConstantPool) null, 21, 919, true);
      try { 
        Utility.methodSignatureArgumentTypes("[%<qE4gz2ml{M[nqMY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: [%<qE4gz2ml{M[nqMY
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = "void";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "void");
      Utility.isSet((byte) (-126), (byte) (-126));
      ConstantPool constantPool0 = null;
      byte byte0 = (byte) (-125);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray1 = new byte[13];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "void";
      stringArray0[1] = "void";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Utility.compactClassName("java.lang.]c2iTex]od");
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) "java.lang.]c2iTex]od";
      objectArray0[3] = (Object) "java.lang.]c2iTex]od";
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)54;
      byteArray0[1] = (byte)54;
      objectArray0[3] = (Object) (byte)54;
      Utility.equals(byteArray0, byteArray0);
      Utility.classOrInterface((byte)54);
      ConstantPool constantPool0 = null;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)53;
      byteArray1[1] = (byte)54;
      byteArray1[2] = (byte)24;
      byteArray1[3] = (byte)54;
      byteArray1[4] = (byte)54;
      objectArray0[2] = (Object) (byte)91;
      byteArray1[6] = (byte)54;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, (int) (byte)91, (int) (byte)0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte byte0 = (byte)96;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid StackMap offset: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("{");
      Pattern.quote("khG6pp={w_");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ConstantPool constantPool0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[6] = (byte)96;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)96;
      byteArray0[5] = (byte) (-68);
      byteArray0[6] = (byte) (-68);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 188, (-1120));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 96
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      int int0 = Member.DECLARED;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-89);
      byteArray0[4] = (byte) (-93);
      byteArray0[6] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-89), (int) (byte) (-93), false);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockPrintStream mockPrintStream0 = new MockPrintStream("N%*ZHH92aUT!");
      byte[] byteArray0 = Utility.decode(",^mj%O2", false);
      Object object0 = new Object();
      Object object1 = new Object();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(72, 1247);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(332, 332);
      Constant constant0 = constantMethodref0.copy();
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantMethodref0;
      constantArray0[1] = (Constant) constantInterfaceMethodref0;
      constantArray0[2] = constant0;
      constantArray0[3] = (Constant) constantMethodref0;
      constantArray0[4] = (Constant) constantMethodref0;
      constantArray0[5] = constant0;
      constantArray0[6] = constant0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool0, (-1594), 1247, false);
      ByteSequence byteSequence0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, constantPool0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[10];
      byteArray0[4] = (byte)46;
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-113);
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-113);
      byteArray0[5] = (byte)46;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[9] = (byte)46;
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte)46;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, (int) (byte) (-113), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Utility.searchOpcode(".4phj.K#77qmp");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-100);
      ConstantPool constantPool0 = null;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (short) (-1), (-700));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    fload_3
         // 1:    fsub
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-55);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-55);
      byteArray1[1] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 161, (-2512), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "\"'oMH\\%[E\\or?'n0h~";
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string1 = Constants.CONSTRUCTOR_NAME;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.classOrInterface((-1519));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("uVI28", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)113;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0);
      // Undeclared exception!
      try { 
        constantPool0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Utility.signatureToString("[VOm1R", false);
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-55), 59);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantMethodref1.copy();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      Object object1 = new Object();
      String string0 = File.pathSeparator;
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":";
      Utility.methodTypeToSignature(":", stringArray0);
      Utility.methodSignatureToString("(L:;)L:;", "5kfy\"TKdj_1", "5vn8</4$h", true);
      Utility.replace("byte", "invokeinterface", ":");
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-93);
      byteArray0[4] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2180, 245, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      int int0 = Pattern.CASE_INSENSITIVE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-71);
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte) (-55);
      Utility.methodSignatureReturnType("CONSTANT_MethodHandle");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1195, 1195);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      int int0 = Member.DECLARED;
      byte[] byteArray0 = new byte[9];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.close();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-67);
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte) (-55);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1::y*(GQ@9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1::y*(GQ@9
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      byte byte0 = Constants.CONSTANT_String;
      try { 
        Utility.methodSignatureReturnType("Oy<ZIk*EK(vF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Oy<ZIk*EK(vF'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "])TQ:";
      byte byte0 = (byte) (-76);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Utility.searchOpcode(".4phj.K#77qmp");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-105);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[4] = (byte)40;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-64), (-1528), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte) (-34);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[4] = (byte) (-34);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("NE|Zc\"8B3FC@Clv,");
      constantPool0.constantToString((Constant) constantUtf8_0);
      constantPool0.setConstantPool(constantArray0);
      Utility.encode(byteArray0, true);
      try { 
        Utility.typeOfSignature("NE|Zc\"8B3FC@Clv,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: NE|Zc\"8B3FC@Clv,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<clinit>");
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte) (-16);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-16), (int) (byte) (-16));
      try { 
        Utility.typeOfSignature(":;Dap@T)vT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :;Dap@T)vT
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-79), (int) (byte) (-79));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    jsr_w\t\t#-909522487
         // 5:    return
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      int int0 = (-6);
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-75);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)87, (-6));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-102);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-102), 17, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    nop
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      String string1 = Constants.ILLEGAL_TYPE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-55);
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null);
      // Undeclared exception!
      try { 
        Utility.signatureToString("<illegal type>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<illegal type>'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.typeOfSignature("Illegally nested brackets:");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Illegally nested brackets:");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintStream mockPrintStream1 = new MockPrintStream("{java.lang.Object@204902, java.lang.Object@7e98580b, java.lang.Object@764e97b2, java.lang.Object@172d09a0, java.lang.Object@15c72a1e}fy\"TKdj_1");
      String string0 = Constants.ILLEGAL_TYPE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-115);
      byteArray0[4] = (byte)10;
      mockPrintStream1.write(byteArray0, 3503, (-3075));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      mockPrintStream0.println((long) (byte)121);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)121, 1703, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = objectArray0[0];
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = objectArray0[0];
      Utility.printArray(objectArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{null, java.lang.Object@67d0ae66, null, java.lang.Object@7d19580e, null}";
      Utility.methodTypeToSignature("{null, java.lang.Object@67d0ae66, null, java.lang.Object@7d19580e, null}", (String[]) null);
      Utility.methodSignatureToString("()L{null,;", "fy\"TKdj_1", "5vn8</4$h", true);
      Utility.setBit((-1726205043), 226);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-119);
      objectArray0[2] = (Object) (byte) (-69);
      Utility.isJavaIdentifierPart('J');
      Utility.classOrInterface((byte) (-119));
      Utility.convertString("fy\"TKdj_1");
      Utility.compactClassName("fy\"TKdj_1", "{null, java.lang.Object@67d0ae66, null, java.lang.Object@7d19580e, null}", true);
      Utility.convertString("x=<");
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-63);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-63);
      Utility.format((-1119), 165, false, 'W');
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 368, 62);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantString constantString0 = new ConstantString(2048);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)11, 2068, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte) (-94);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-62), 1304, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    if_icmpge\t\t#-23822
         // 3:    f2i
         // 4:    monitorenter
         // 5:    fconst_0
         // 6:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      Object object1 = new Object();
      String string0 = Constants.ILLEGAL_OPCODE;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<illegal opcode>";
      Utility.methodTypeToSignature("<illegal opcode>", stringArray0);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(L<illegal;)L<illegal;", "5kfy\"TKdj_1", "5vn8</4$h", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L<illegal;)L<illegal;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = object0;
      Object object1 = new Object();
      String string0 = Constants.CONSTRUCTOR_NAME;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<init>";
      Utility.methodTypeToSignature("<init>", stringArray0);
      String string1 = "5kfy\"TKdj_1";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(L<init>;)L<init>;", "5kfy\"TKdj_1", "5vn8</4$h", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `init>;)L<init>;'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(39, 123);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(39, 123);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      EmptyVisitor emptyVisitor2 = new EmptyVisitor();
      constantNameAndType0.accept(emptyVisitor2);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      EmptyVisitor emptyVisitor3 = new EmptyVisitor();
      EmptyVisitor emptyVisitor4 = new EmptyVisitor();
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte) (-77);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-98);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.available();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)62, (-1424), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EmptyVisitor emptyVisitor0 = new EmptyVisitor();
      constantPool0.copy();
      EmptyVisitor emptyVisitor1 = new EmptyVisitor();
      EmptyVisitor emptyVisitor2 = new EmptyVisitor();
      constantPool0.setConstantPool(constantArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-59);
      byteArray0[6] = (byte)17;
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 187, (int) (byte)98, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Utility.typeOfSignature("Illegally nested brackets:");
      MockPrintStream mockPrintStream0 = new MockPrintStream("Illegally nested brackets:");
      String string0 = Constants.ILLEGAL_TYPE;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = new Object();
      Object[] objectArray0 = new Object[9];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 173, (int) (byte)10, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      Utility.printArray(objectArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{null, java.lang.Object@242820e, null, null, null}";
      Utility.methodTypeToSignature("{null, java.lang.Object@242820e, null, null, null}", stringArray0);
      Utility.methodSignatureToString("(L{null,;)L{null,;", "]", "5vn8</4$h", true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte)121;
      byteArray0[5] = (byte) (-44);
      byteArray0[6] = (byte)31;
      byteArray0[7] = (byte)19;
      byteArray0[8] = (byte) (-92);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)31, 527);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[0] = (byte)0;
      byteArray0[3] = (byte) (-95);
      ConstantInteger constantInteger0 = new ConstantInteger(12);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantInteger0;
      constantArray0[1] = (Constant) constantInteger0;
      constantArray0[2] = (Constant) constantInteger0;
      constantArray0[3] = (Constant) constantInteger0;
      constantArray0[4] = (Constant) constantInteger0;
      constantArray0[5] = (Constant) constantInteger0;
      constantArray0[6] = (Constant) constantInteger0;
      constantArray0[7] = (Constant) constantInteger0;
      constantArray0[8] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, (int) (byte)83, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = File.pathSeparator;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)12;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)46;
      Utility.encode(byteArray0, false);
      byte[] byteArray1 = Utility.decode("$M$A$$$$$M$M$$", false);
      Utility.format((byte)46, (byte)0, false, 'E');
      Utility.encode(byteArray1, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("$M$A$$$$$M$M$$", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `$M$A$$$$$M$M$$'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "J^m<[");
      Utility.getSignature("'2%&b%z}mmkge;|");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "J^m<[";
      objectArray0[1] = (Object) "'2%&b%z}mmkge;|";
      objectArray0[2] = (Object) "J^m<[";
      objectArray0[3] = (Object) "'2%&b%z}mmkge;|";
      objectArray0[4] = (Object) "'2%&b%z}mmkge;|";
      objectArray0[5] = (Object) "J^m<[";
      objectArray0[6] = (Object) "L'2%&b%z}mmkge;|;";
      objectArray0[7] = (Object) "J^m<[";
      Utility.printArray(objectArray0, false);
      Utility.searchOpcode("J^m<[");
      Utility.searchOpcode("J^m<[");
      Utility.methodSignatureReturnType("J^m<[, '2%&b%z}mmkge;|, J^m<[, '2%&b%z}mmkge;|, '2%&b%z}mmkge;|, J^m<[, L'2%&b%z}mmkge;|;, J^m<[", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)81;
      Constant[] constantArray0 = new Constant[7];
      DataInput dataInput0 = null;
      ConstantInteger constantInteger0 = null;
      try {
        constantInteger0 = new ConstantInteger((DataInput) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      boolean boolean0 = true;
      String string0 = Constants.CONSTRUCTOR_NAME;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<init>");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iqU)gK");
      int int0 = (-1090148709);
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-111), (-1090148709), true);
      try { 
        Utility.methodSignatureReturnType("0:    i2b\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `0:    i2b
         // 1:    nop
         // 2:    nop
         // 3:    nop
         // 4:    nop
         // 5:    nop
         // 6:    nop
         // 7:    nop
         // 8:    nop
         // '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantMethodref constantMethodref0 = new ConstantMethodref(7, (byte)112);
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(98, (byte)112);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Constant[] constantArray0 = new Constant[14];
      constantArray0[7] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      constantPool1.toString();
      constantPool1.setConstantPool(constantArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)112;
      byteArray1[1] = (byte) (-55);
      byteArray1[2] = (byte)112;
      byteArray1[3] = (byte) (-80);
      byteArray1[4] = (byte)112;
      byteArray1[5] = (byte) (-80);
      byteArray1[6] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, constantPool0, 169, 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)31;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2087, 9, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(2029);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-16);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-3584), (-451));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[21];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=i9PA");
      byteArray0[0] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Constant[] constantArray0 = new Constant[4];
      ConstantInteger constantInteger0 = new ConstantInteger(32);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(constantInvokeDynamic0);
      constantArray0[1] = (Constant) constantInvokeDynamic1;
      ConstantClass constantClass0 = new ConstantClass(175);
      constantArray0[3] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      Utility.codeToString(byteArray0, constantPool0, 18, (int) (byte)121);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(1L);
      Utility.classOrInterface(201);
      Utility.isJavaIdentifierPart('_');
      try { 
        Utility.methodSignatureArgumentTypes("'mv;WMo+$8[dPZ7sAM5", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 'mv;WMo+$8[dPZ7sAM5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
