/*
 * This file was automatically generated by EvoSuite
 * Mon Jul 16 18:05:18 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.net.URI;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Locale;
import java.util.zip.Deflater;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSink;
import okio.BufferedSource;
import okio.ByteString;
import okio.DeflaterSink;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Options;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Segment;
import okio.SegmentPool;
import okio.Source;
import okio.Timeout;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Buffer_ESTest extends Buffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      ByteString[] byteStringArray0 = new ByteString[6];
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteStringArray0[0] = byteString0;
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSource0);
      ByteString byteString1 = hashingSource0.hash();
      byteStringArray0[1] = byteString1;
      ByteString byteString2 = hashingSource0.hash();
      byteStringArray0[2] = byteString2;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)8;
      ByteString byteString3 = new ByteString(byteArray0);
      byteStringArray0[3] = byteString3;
      ByteString byteString4 = hashingSource0.hash();
      byteStringArray0[4] = byteString4;
      ByteString byteString5 = new ByteString((byte[]) null);
      byteStringArray0[5] = byteString5;
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.get((byte)24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeShort((-932));
      int int0 = ObjectStreamConstants.baseWireHandle;
      // Undeclared exception!
      try { 
        buffer0.read(buffer1, 65536L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteArray();
      ByteString byteString0 = buffer0.md5();
      assertEquals(16, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.md5();
      buffer0.indexOf(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      buffer_UnsafeCursor0.start = 2135875628;
      long long0 = buffer_UnsafeCursor0.buffer.writeAll(buffer0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer0.writeUtf8("D");
      boolean boolean0 = buffer_UnsafeCursor0.buffer.exhausted();
      assertEquals(1L, buffer0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = 1295L;
      Pipe pipe0 = new Pipe(1295L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.readUtf8();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer0.indexOfElement(byteString0);
      buffer0.writeUtf8("");
      byte[] byteArray0 = null;
      ByteString[] byteStringArray0 = new ByteString[4];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      long long0 = buffer0.indexOfElement((ByteString) null);
      assertEquals((-1L), long0);
      
      buffer0.md5();
      byte[] byteArray0 = new byte[0];
      Buffer buffer1 = buffer0.write(byteArray0);
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = 3473L;
      Pipe pipe0 = new Pipe(3473L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.snapshot();
      Segment segment0 = new Segment();
      buffer_UnsafeCursor0.buffer.head = segment0;
      segment0.prev = buffer_UnsafeCursor0.buffer.head;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek(3473L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=3473 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.toString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-261L));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082861L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(4L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      // Undeclared exception!
      try { 
        buffer1.copyTo(buffer0, (-1L), (long) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=-1 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUnsafe();
      try { 
        buffer0.readUtf8LineStrict();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.exhausted();
      Buffer buffer1 = buffer0.writeShort((-932));
      int int0 = ObjectStreamConstants.baseWireHandle;
      // Undeclared exception!
      try { 
        buffer1.readUtf8LineStrict((long) (-932));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -932
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.exhausted();
      Buffer buffer2 = realBufferedSource0.buffer.writeShort((-932));
      buffer0.emit();
      // Undeclared exception!
      try { 
        buffer2.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082861L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeShort(5);
      buffer1.emit();
      // Undeclared exception!
      try { 
        buffer1.readIntLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 4: 2
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.indexOf((byte)2, (long) (byte)2);
      buffer0.size = 4L;
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(4L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-6);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte) (-6);
      realBufferedSink0.write(byteArray0);
      realBufferedSink0.buffer.indexOf((byte) (-6), 0L);
      realBufferedSink0.outputStream();
      realBufferedSink0.buffer.readInt();
      try { 
        buffer0.readUtf8LineStrict(1272L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=3 content=fafafa\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("gzip finished without exhausting source");
      ByteString byteString0 = buffer1.readByteString(3L);
      buffer1.rangeEquals(3L, byteString0);
      assertEquals(36L, buffer1.size());
      
      String string0 = buffer1.readUtf8Line();
      assertEquals("p finished without exhausting source", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)39;
      try { 
        buffer0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-29);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-6);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)45;
      byteArray0[8] = (byte)105;
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(2073432487);
      assertFalse(buffer0.exhausted());
      
      int int0 = buffer0.readIntLe();
      assertEquals((-1492019589), int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(3139L);
      long long0 = buffer0.completeSegmentByteCount();
      assertEquals(0L, long0);
      
      buffer_UnsafeCursor0.buffer.sha512();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeShort((byte) (-6));
      buffer0.emit();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      try { 
        buffer0.readUtf8LineStrict(416L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=2 content=fffa\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      Source source0 = hashingSource0.delegate();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      hashingSink0.hash();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-1);
      // Undeclared exception!
      try { 
        buffer0.indexOf((byte)0, (long) (byte) (-1), 10L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size=0 fromIndex=-1 toIndex=10
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.md5();
      buffer0.indexOf(byteString0);
      // Undeclared exception!
      try { 
        buffer0.write((Source) null, 1208L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000L);
      Buffer buffer0 = pipe0.buffer;
      try { 
        buffer0.require(4L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.require((-261L));
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Pipe pipe0 = new Pipe(1938L);
      pipe0.sinkClosed = false;
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      byte[] byteArray0 = new byte[6];
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      realBufferedSource0.buffer.readFrom((InputStream) pushbackInputStream0, (long) (byte)0);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)8;
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        buffer0.readFrom((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Pipe pipe0 = new Pipe(1938L);
      pipe0.sinkClosed = false;
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.size = 1938L;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      realBufferedSource0.buffer.readFrom((InputStream) pushbackInputStream0, (long) (byte)0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(5L);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // not acquired
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeUtf8("s.limit == sVpos");
      ByteString byteString0 = buffer0.readByteString(3L);
      buffer0.rangeEquals(3L, byteString0);
      buffer1.hmacSha1(byteString0);
      assertEquals(13L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.md5();
      buffer0.rangeEquals(5986L, byteString0);
      ByteString byteString1 = buffer0.hmacSha1(byteString0);
      assertEquals(20, byteString1.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)62;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      byteString0.write(realBufferedSink0.buffer);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.buffer.hmacSha256(byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)62;
      byteArray1[1] = (byte)62;
      byteArray1[2] = (byte) (-70);
      ByteString.encodeUtf8("r)8Nw&_6N<Qc&W)");
      byteArray1[3] = (byte)62;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (byte)62, (byte)114);
      byteArrayInputStream0.read();
      // Undeclared exception!
      try { 
        ByteString.of(byteArray1, 3068, (int) (byte)62);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=3068 byteCount=62
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = buffer0.writeUtf8("D");
      buffer2.toString();
      Buffer buffer3 = new Buffer();
      // Undeclared exception!
      try { 
        Options.of((ByteString[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.exhausted();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      try { 
        buffer0.write((Source) buffer_UnsafeCursor0.buffer, 501L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)62;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)62;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSink hashingSink0 = HashingSink.hmacSha256(buffer0, byteString0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer1 = realBufferedSink0.buffer();
      byteString0.write(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer0.hmacSha256(byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      ByteString.encodeUtf8("r)8Nw&_6N<Qc&W)");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)62, (byte)62);
      byteArrayInputStream0.read();
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (-2055), 3068);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=-2055 byteCount=3068
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.readUtf8(0L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.close();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertTrue(buffer_UnsafeCursor0.readWrite);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.exhausted();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      // Undeclared exception!
      try { 
        buffer2.indexOf(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bytes is empty
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8CodePoint(0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer();
      buffer0.readAll(buffer2);
      // Undeclared exception!
      try { 
        buffer2.readUtf8Line(1000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=1 offset=999 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(1748);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.readByteString();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Pipe pipe0 = new Pipe(1000000000000000L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = new Buffer();
      buffer0.readFully(buffer1, 0L);
      assertEquals(0L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082861L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      long long0 = 4L;
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.writableSegment((-6));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer0.md5();
      buffer1.exhausted();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-932));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer0.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(4L);
      assertFalse(buffer0.exhausted());
      
      long long0 = buffer1.readHexadecimalUnsignedLong();
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Pipe pipe0 = new Pipe(1046L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.readUtf8Line();
      buffer0.indexOf((byte) (-1), 1046L);
      Buffer buffer1 = buffer0.clone();
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      pipe0.sourceClosed = true;
      buffer1.read(buffer0, 1046L);
      buffer0.outputStream();
      buffer0.readUtf8();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSource0.readByteString((long) (byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -1
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.clone();
      BufferedSink bufferedSink0 = buffer1.emit();
      assertNotSame(bufferedSink0, buffer0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.exhausted();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      int int0 = buffer_UnsafeCursor0.end;
      buffer_UnsafeCursor0.offset = 100L;
      buffer_UnsafeCursor0.resizeBuffer(501L);
      assertEquals(501, buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.readUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeHexadecimalUnsignedLong((-261L));
      ByteString byteString0 = new ByteString((byte[]) null);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.end = 1073741824;
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writeUtf8((String) null, 4, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("8L");
      // Undeclared exception!
      try { 
        buffer1.readByteString(3L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=0 byteCount=3
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      buffer0.writeUtf8("okio.SegmentPool");
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeShort((-932));
      Buffer buffer2 = new Buffer();
      int int0 = ObjectStreamConstants.baseWireHandle;
      buffer1.emitCompleteSegments();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-197L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -197
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.exhausted();
      Buffer buffer1 = buffer0.writeShort((-126));
      // Undeclared exception!
      try { 
        buffer1.readUtf8Line((-1759L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=0 byteCount=-1759
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Buffer buffer0 = new Buffer();
      HashingSource hashingSource0 = HashingSource.sha256(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      buffer0.indexOf(byteString0, 9223372036854775807L);
      // Undeclared exception!
      try { 
        buffer0.readByteString((-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.exhausted();
      Buffer buffer1 = buffer0.writeShort((-932));
      buffer1.writeShort(17);
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.emit();
      assertEquals(4L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeInt(1725);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      assertFalse(buffer0.exhausted());
      
      long long0 = buffer_UnsafeCursor0.resizeBuffer(1725);
      assertEquals(4L, long0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer0.indexOfElement(byteString0);
      Buffer buffer1 = new Buffer();
      Buffer buffer2 = buffer1.writeUtf8("Hk1~q_ ");
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      Options.of(byteStringArray0);
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
      // Undeclared exception!
      try { 
        buffer2.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(1725);
      HashingSink.sha256(buffer0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)99;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer1.writeUtf8CodePoint(101);
      buffer1.readByte();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      int int0 = buffer0.select(options0);
      assertFalse(buffer0.exhausted());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      realBufferedSink0.write(byteString0);
      long long0 = realBufferedSink0.buffer.indexOf(byteString0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.clone();
      realBufferedSource0.buffer.exhausted();
      Buffer buffer2 = realBufferedSource0.buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer2);
      Buffer buffer3 = realBufferedSink0.buffer;
      buffer0.clear();
      Buffer buffer4 = realBufferedSink0.buffer();
      // Undeclared exception!
      try { 
        buffer4.readUtf8((-1015L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1015
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.exhausted();
      Buffer buffer1 = buffer0.writeShort((-932));
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer1.indexOfElement(byteString0);
      try { 
        buffer1.write((Source) buffer0, 2851L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.exhausted();
      buffer0.writeShort((-932));
      Buffer buffer1 = buffer0.clone();
      buffer1.toString();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-932));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -932
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-6);
      realBufferedSink0.writeDecimalLong((byte) (-6));
      byteArray0[2] = (byte) (-6);
      // Undeclared exception!
      try { 
        buffer0.write((Source) realBufferedSink0.buffer, 1382L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.md5();
      buffer0.indexOfElement(byteString0, 16711690L);
      buffer0.indexOf(byteString0);
      buffer0.writeDecimalLong((-1L));
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(4L);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.exhausted();
      buffer0.segmentSizes();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.clone();
      // Undeclared exception!
      try { 
        buffer0.writeUtf8CodePoint(2145788712);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected code point: 7fe62328
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.exhausted();
      buffer0.segmentSizes();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer buffer1 = buffer0.writeUtf8("U$G=e4'G");
      buffer1.readLong();
      buffer0.toString();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte)16;
      byteArray0[8] = (byte) (-28);
      realBufferedSource0.read(byteArray0);
      Buffer buffer2 = realBufferedSource0.buffer;
      buffer2.readUnsafe();
      String string0 = "";
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("s.limit == s.pos");
      long long0 = buffer1.readLongLe();
      assertEquals(2338610025153179251L, long0);
      
      ByteString byteString0 = buffer0.readByteString(3L);
      buffer0.rangeEquals(3L, byteString0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.exhausted();
      buffer0.segmentSizes();
      MockFile mockFile0 = new MockFile("G%3JN/`B;", "G%3JN/`B;");
      MockFile mockFile1 = new MockFile(mockFile0, "G%3JN/`B;");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile1);
      long long0 = 1L;
      // Undeclared exception!
      try { 
        buffer0.copyTo((OutputStream) mockFileOutputStream0, 1L, 3621L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=1 byteCount=3621
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer0.sha256();
      buffer0.md5();
      buffer0.writeShort(255);
      assertEquals(2L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      boolean boolean0 = buffer0.exhausted();
      assertTrue(boolean0);
      
      buffer0.segmentSizes();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(0L);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      buffer0.md5();
      buffer0.emit();
      buffer0.close();
      assertEquals(0L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte)127;
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      boolean boolean0 = buffer1.rangeEquals((long) (byte) (-13), byteString0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(939L);
      Buffer buffer1 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.readAll(buffer1);
      buffer1.writeUtf8("D");
      // Undeclared exception!
      try { 
        buffer0.readLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer1);
      Buffer buffer2 = realBufferedSource0.buffer;
      realBufferedSource0.buffer.writeUtf8("37D+zf5(V_~W@ t*v");
      Buffer buffer3 = buffer2.writeShortLe((-1));
      // Undeclared exception!
      try { 
        buffer3.writeAll(buffer2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(100L);
      long long0 = 1382L;
      InflaterSource inflaterSource0 = null;
      try {
        inflaterSource0 = new InflaterSource((BufferedSource) buffer0, (Inflater) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // inflater == null
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte(72);
      buffer0.writeDecimalLong(4161L);
      assertEquals(5L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      realBufferedSource0.indexOf((byte)103, (long) (byte)103);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        buffer0.hmacSha512(byteString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString("UTF-8", 68, 68, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > string.length: 68 > 5
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeString("!.84gKTH|Nq", 3462, (-3593), charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex: -3593 < 3462
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Pipe pipe0 = new Pipe(6L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer();
      buffer0.writeAll(realBufferedSink0.buffer);
      Timeout timeout0 = buffer0.timeout();
      assertNotNull(timeout0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        buffer0.readLongLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 8: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.writeUtf8CodePoint(65533);
      // Undeclared exception!
      try { 
        buffer0.readByteString(2065842175L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=3 offset=0 byteCount=2065842175
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeByte((-1513));
      buffer1.md5();
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-6);
      realBufferedSink0.writeDecimalLong((byte) (-6));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSink0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer1 = buffer_UnsafeCursor1.buffer;
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(2L, buffer1.size());
      
      buffer_UnsafeCursor0.buffer.md5();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.inputStream();
      buffer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.exhausted();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.writeTo((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("");
      MockPrintStream mockPrintStream0 = new MockPrintStream("VVjw1f9QtuwOnz:d");
      Buffer buffer1 = buffer0.writeTo((OutputStream) mockPrintStream0);
      assertSame(buffer1, buffer0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.exhausted();
      buffer0.sha512();
      ByteString byteString0 = buffer0.md5();
      buffer0.rangeEquals(5989L, byteString0);
      // Undeclared exception!
      try { 
        buffer0.readFully((Buffer) null, (-779L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.seek((-2275L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // offset=-2275 > size=0
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.segmentSizes();
      buffer0.writeHexadecimalUnsignedLong(255L);
      try { 
        buffer0.skip(1000L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("jp=vc?.[yOT", charset0);
      try { 
        buffer0.skip(1474L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      boolean boolean0 = buffer0.request((-1216L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.exhausted();
      buffer0.md5();
      buffer0.md5();
      buffer0.request(8L);
      buffer0.readUtf8Line();
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        buffer0.writeString((String) null, 243, 243, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // string == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer0.readByte();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.md5();
      buffer0.rangeEquals(790L, byteString0);
      Object object0 = new Object();
      buffer0.equals(object0);
      // Undeclared exception!
      try { 
        buffer0.readByteString((-760L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-760
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer0.readUnsafe(buffer_UnsafeCursor0);
      buffer_UnsafeCursor1.buffer.writeLongLe(4294967295L);
      buffer_UnsafeCursor1.buffer.indexOf((byte)0);
      // Undeclared exception!
      try { 
        buffer0.readAndWriteUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Pipe pipe0 = new Pipe(4L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.flush();
      assertEquals(0L, buffer0.completeSegmentByteCount());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.exhausted();
      buffer0.md5();
      MockFile mockFile0 = new MockFile("ZM[<D!H%uq<z*bz");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      buffer0.copyTo((OutputStream) mockPrintStream0);
      long long0 = (-375L);
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line((-375L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-375
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Inflater inflater0 = new Inflater();
      InflaterSource inflaterSource0 = new InflaterSource((BufferedSource) buffer0, inflater0);
      HashingSource hashingSource0 = HashingSource.md5(inflaterSource0);
      GzipSource gzipSource0 = new GzipSource(hashingSource0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(gzipSource0);
      HashingSource.md5(inflaterSource0);
      Buffer buffer1 = realBufferedSource0.buffer;
      // Undeclared exception!
      try { 
        buffer1.readShortLe();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha1();
      // Undeclared exception!
      try { 
        buffer0.readUtf8Line(4L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=3 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeIntLe((-2141772254));
      buffer1.sha1();
      buffer0.readUtf8Line(0L);
      try { 
        buffer0.skip(184L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeByte((-2184));
      buffer0.segmentSizes();
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.segmentSizes();
      buffer0.writeShortLe(1100);
      buffer0.readUnsafe();
      buffer0.segmentSizes();
      ByteString[] byteStringArray0 = new ByteString[2];
      Options options0 = Options.of(byteStringArray0);
      // Undeclared exception!
      try { 
        options0.get(1100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1100
         //
         verifyException("okio.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      ByteString byteString0 = buffer0.md5();
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      ByteString byteString1 = hashingSink0.hash();
      byteStringArray0[5] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      buffer0.select(options0);
      // Undeclared exception!
      try { 
        buffer0.read((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Pipe pipe0 = new Pipe(1938L);
      pipe0.sinkClosed = false;
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.size = 181L;
      byte[] byteArray0 = new byte[6];
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      realBufferedSource0.buffer.readFrom((InputStream) pushbackInputStream0, (long) (byte)0);
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)8;
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(realBufferedSink0.buffer);
      ByteString byteString0 = realBufferedSource0.readByteString();
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteString0);
      buffer0.readAll(bufferedSink0);
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.md5();
      Charset charset0 = Charset.defaultCharset();
      buffer0.writeString("", charset0);
      try { 
        buffer0.skip(1474L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readDecimalLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte) (-73);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      buffer0.writeUtf8CodePoint((-2147483625));
      assertEquals(1L, buffer0.size());
      
      byte byte0 = buffer0.readByte();
      assertEquals((byte)23, byte0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.sha1();
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      ByteString byteString0 = realBufferedSource0.readByteString(0L);
      boolean boolean0 = buffer1.rangeEquals(1108L, byteString0, (-1), 274);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Pipe pipe0 = new Pipe(1627L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.writeUtf8CodePoint(4113);
      assertEquals(3L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readByteString();
      Charset charset0 = Charset.defaultCharset();
      String string0 = buffer0.readString(charset0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.exhausted();
      buffer0.segmentSizes();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeUtf8("U$G=e4'G");
      buffer0.toString();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-37);
      byte byte0 = (byte)23;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)51;
      byteArray0[7] = (byte)16;
      byteArray0[8] = (byte) (-28);
      buffer0.write(byteArray0);
      realBufferedSource0.read(byteArray0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer1.readUnsafe();
      String string0 = "";
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.readUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeHexadecimalUnsignedLong((-261L));
      ByteString byteString0 = new ByteString((byte[]) null);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      String string0 = ((RealBufferedSink) bufferedSink0).buffer.readUtf8Line();
      assertNotNull(string0);
      assertEquals("fffffffffffffefb", string0);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("gzip finished without exhausting source");
      buffer0.readUtf8Line(3L);
      short short0 = buffer1.readShortLe();
      assertEquals(33L, buffer1.size());
      assertEquals((short)26144, short0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.equals(buffer0);
      buffer0.writeByte((-3951));
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Object object0 = new Object();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink1.buffer();
      boolean boolean0 = realBufferedSink0.buffer.equals(buffer1);
      assertTrue(boolean0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readUnsafe();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.exhausted();
      buffer0.segmentSizes();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      buffer0.writeUtf8("_HA+33TGpmX&7X2kVc");
      buffer0.readLong();
      buffer0.toString();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer;
      buffer0.readUnsafe();
      // Undeclared exception!
      try { 
        Charset.forName("^00k}$7");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ^00k}$7
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      buffer0.indexOfElement(byteString0);
      buffer0.readUtf8Line();
      MockPrintStream mockPrintStream0 = new MockPrintStream("delegate == null");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) realBufferedSource0;
      objectArray0[1] = (Object) byteString0;
      objectArray0[2] = (Object) "delegate == null";
      objectArray0[3] = (Object) "";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "";
      PrintStream printStream0 = mockPrintStream0.printf("", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)73;
      mockPrintStream1.write(byteArray0);
      // Undeclared exception!
      try { 
        realBufferedSource0.buffer.writeTo((OutputStream) mockPrintStream1, (-1L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Pipe pipe0 = new Pipe(1926L);
      pipe0.sinkClosed = false;
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      Buffer buffer0 = realBufferedSource0.buffer;
      buffer0.size = 181L;
      RealBufferedSource realBufferedSource1 = new RealBufferedSource(realBufferedSource0);
      // Undeclared exception!
      try { 
        realBufferedSource1.readByteString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUtf8();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      long long0 = buffer0.indexOfElement(byteString0);
      assertEquals((-1L), long0);
      
      String string0 = buffer0.readUtf8Line();
      assertNull(string0);
      
      realBufferedSource0.buffer.readAndWriteUnsafe();
      Pipe pipe0 = new Pipe(2176L);
      Buffer buffer1 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.buffer.sha256();
      buffer_UnsafeCursor0.resizeBuffer(2024L);
      buffer_UnsafeCursor0.buffer.indexOfElement(byteString0);
      assertEquals((-1), buffer_UnsafeCursor0.start);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("PEvSO6SF");
      ByteString byteString0 = buffer1.readByteString(8L);
      long long0 = buffer0.indexOfElement(byteString0);
      assertFalse(buffer0.exhausted());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.close();
      buffer0.writeDecimalLong(16711680L);
      assertEquals(8L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      realBufferedSink0.writeDecimalLong(10000L);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-6);
      realBufferedSink0.writeDecimalLong((byte) (-6));
      byteArray0[2] = (byte) (-6);
      // Undeclared exception!
      try { 
        buffer0.write((Source) realBufferedSink0.buffer, 1382L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      Buffer buffer0 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(280375465082880L);
      realBufferedSink0.buffer.write((Source) buffer0, (-1711L));
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer_UnsafeCursor0.buffer);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      
      Buffer buffer1 = realBufferedSink0.buffer();
      buffer1.inputStream();
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(15L, buffer1.size());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.writeDecimalLong(2L);
      realBufferedSink0.writeDecimalLong(1846L);
      // Undeclared exception!
      try { 
        buffer1.write((Source) realBufferedSink0.buffer, 1846L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(10000L);
      ((RealBufferedSink) bufferedSink0).buffer.writeShort((byte) (-6));
      realBufferedSink0.buffer.readHexadecimalUnsignedLong();
      int int0 = ObjectStreamConstants.baseWireHandle;
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.readUtf8LineStrict((-1031L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1031
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong(13L);
      assertFalse(buffer0.exhausted());
      
      long long0 = buffer0.readHexadecimalUnsignedLong();
      assertEquals(13L, long0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("size < 8: ");
      buffer0.readByteString(3L);
      long long0 = buffer0.readHexadecimalUnsignedLong();
      assertFalse(buffer0.exhausted());
      assertEquals(14L, long0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.readUnsafe();
      Buffer buffer1 = buffer0.writeUtf8("s.limit == s.pos");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeDecimalLong((-3693L));
      buffer0.write((Source) realBufferedSink0.buffer, 4L);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink0.buffer();
      realBufferedSink0.buffer.inputStream();
      assertEquals(20L, buffer1.size());
      assertEquals(20L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("s.limit == s.pos");
      Segment segment0 = buffer0.writableSegment(1992);
      SegmentPool.next = segment0;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeDecimalLong(280375465082880L);
      try { 
        buffer0.write((Source) realBufferedSink0.buffer, (long) 1992);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.writeUtf8("YLLh=lR");
      ByteString byteString0 = buffer0.md5();
      realBufferedSink0.buffer.readByteString((long) (byte)3);
      realBufferedSink0.buffer.rangeEquals((-868L), byteString0);
      realBufferedSink0.buffer.hashCode();
      long long0 = realBufferedSink0.buffer.read(buffer0, (long) (byte)3);
      assertEquals(3L, buffer0.size());
      assertEquals(3L, long0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Locale locale0 = Locale.ENGLISH;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong((-1152921504606846976L));
      buffer0.sha1();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer((-3275L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // newSize < 0: -3275
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer.writeUtf8("s.limht == .pos");
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(2147483643L);
      try { 
        realBufferedSink0.buffer.write((Source) realBufferedSink1.buffer, 255L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(2147483647L);
      long long0 = realBufferedSink0.buffer.readDecimalLong();
      assertEquals(2147483647L, long0);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Pipe pipe0 = new Pipe((byte)102);
      Buffer buffer0 = pipe0.buffer;
      String string0 = " content=";
      Segment segment0 = buffer0.writableSegment((byte)102);
      SegmentPool.next = segment0;
      MockFile mockFile0 = new MockFile(" content=");
      buffer0.writeHexadecimalUnsignedLong(1294L);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) SegmentPool.next;
      mockPrintStream0.printf(locale0, "", objectArray0);
      PrintStream printStream0 = mockPrintStream0.append('P');
      Buffer buffer1 = buffer0.writeTo((OutputStream) printStream0);
      int int0 = (-2089);
      // Undeclared exception!
      try { 
        buffer1.snapshot((-2089));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=-2089
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(4L);
      assertFalse(buffer0.exhausted());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("*dM");
      buffer1.writeTo((OutputStream) mockPrintStream0);
      assertTrue(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Pipe pipe0 = new Pipe((byte)102);
      Buffer buffer0 = pipe0.buffer;
      MockFile mockFile0 = new MockFile(" content=");
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1294L);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.ENGLISH;
      ByteString[] byteStringArray0 = new ByteString[2];
      ByteString byteString0 = new ByteString(byteArray0);
      byteStringArray0[0] = byteString0;
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer1, byteString0);
      ByteString byteString1 = hashingSource0.hash();
      byteStringArray0[1] = byteString1;
      Options options0 = Options.of(byteStringArray0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer2.select(options0);
      // Undeclared exception!
      try { 
        buffer0.write((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeInt(1748);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeDecimalLong(32L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer2 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer2.readAndWriteUnsafe(buffer_UnsafeCursor0);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readAndWriteUnsafe(buffer_UnsafeCursor1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // already attached to a buffer
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Pipe pipe0 = new Pipe((byte)102);
      Buffer buffer0 = pipe0.buffer;
      Segment segment0 = buffer0.writableSegment((byte)102);
      SegmentPool.next = segment0;
      MockFile mockFile0 = new MockFile(" content=");
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(1294L);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.ENGLISH;
      ByteString byteString0 = new ByteString(byteArray0);
      buffer0.indexOfElement(byteString0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      try { 
        buffer1.readUtf8LineStrict(20L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=3 content=353065\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Pipe pipe0 = new Pipe(9964L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(9964L);
      Buffer buffer1 = bufferedSink0.buffer();
      buffer1.writeDecimalLong(9964L);
      realBufferedSink0.buffer.readHexadecimalUnsignedLong();
      int int0 = ObjectStreamConstants.baseWireHandle;
      // Undeclared exception!
      try { 
        ((RealBufferedSink) bufferedSink0).buffer.readUtf8LineStrict((-1031L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // limit < 0: -1031
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer0.writeUtf8("s.limit == s.pos");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeDecimalLong(1000000L);
      realBufferedSink0.buffer.writeShort((-2792));
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x73
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("size < 8: ");
      // Undeclared exception!
      try { 
        buffer0.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x73
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      HashingSink hashingSink0 = HashingSink.md5(buffer0);
      ByteString byteString0 = hashingSink0.hash();
      HashingSource hashingSource0 = HashingSource.hmacSha256(buffer0, byteString0);
      hashingSource0.delegate();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      buffer0.readFrom((InputStream) byteArrayInputStream0);
      assertEquals(1L, buffer0.size());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Pipe pipe0 = new Pipe(65280L);
      Buffer buffer0 = pipe0.buffer;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer1 = realBufferedSource0.buffer();
      InputStream inputStream0 = realBufferedSource0.inputStream();
      try { 
        buffer1.readFrom(inputStream0, 65280L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-1790L));
      int int0 = buffer1.readUtf8CodePoint();
      assertFalse(buffer0.exhausted());
      assertEquals(102, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer.writeUtf8("s.limit == s.pos");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)0;
      BufferedSink bufferedSink0 = realBufferedSink0.write(byteArray0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(bufferedSink0);
      realBufferedSink1.buffer.readUtf8();
      long long0 = 6L;
      try { 
        buffer0.readUtf8LineStrict(6L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=6 content=732e6c696d6974203d3d20732e706f73030331318200\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[2];
      realBufferedSink0.write(byteArray0);
      try { 
        realBufferedSink0.buffer.readUtf8LineStrict((long) (byte)0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // \\n not found: limit=0 content=0000\u2026
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong((-1152921504606846976L));
      realBufferedSink0.buffer.writeShort(2145825359);
      BufferedSink bufferedSink0 = realBufferedSink0.buffer.emit();
      int int0 = ObjectStreamConstants.baseWireHandle;
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer1);
      realBufferedSink2.writeDecimalLong(2L);
      try { 
        bufferedSink0.write((Source) realBufferedSink2.buffer, 115292150460684697L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(10000L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      Buffer buffer1 = pipe0.buffer;
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = buffer1.readAndWriteUnsafe(buffer_UnsafeCursor0);
      Buffer buffer2 = buffer_UnsafeCursor1.buffer;
      assertEquals(0L, buffer2.completeSegmentByteCount());
      
      short short0 = ((RealBufferedSink) bufferedSink0).buffer.readShortLe();
      assertEquals((short)12337, short0);
      
      buffer_UnsafeCursor1.close();
      assertEquals((-1L), buffer_UnsafeCursor1.offset);
      assertEquals((-1), buffer_UnsafeCursor1.end);
      assertEquals((-1), buffer_UnsafeCursor1.start);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeHexadecimalUnsignedLong((-1790L));
      short short0 = buffer0.readShortLe();
      assertFalse(buffer0.exhausted());
      assertEquals((short)26214, short0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer.writeUtf8("s.limit == s.pos");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      ByteString byteString0 = realBufferedSink0.buffer.md5();
      realBufferedSink0.buffer.rangeEquals(10000L, byteString0);
      buffer0.hashCode();
      realBufferedSink0.buffer.clear();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("size < 8: ");
      buffer0.readByteString(3L);
      // Undeclared exception!
      try { 
        buffer1.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x65
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      realBufferedSink0.writeDecimalLong(10000L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      
      long long0 = realBufferedSink0.buffer.readDecimalLong();
      assertEquals(10000L, long0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      boolean boolean0 = realBufferedSink0.buffer.equals(buffer0);
      assertTrue(boolean0);
      
      realBufferedSink0.writeDecimalLong(20L);
      long long0 = realBufferedSink0.buffer.readDecimalLong();
      assertEquals(20L, long0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      buffer0.writeShort((-932));
      int int0 = ObjectStreamConstants.baseWireHandle;
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        buffer0.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xfffffffc
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      realBufferedSink0.writeShortLe(698);
      Buffer buffer0 = realBufferedSink0.buffer;
      realBufferedSink0.writeDecimalLong(10000L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0xffffffba
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeUtf8("YLLh=lR");
      byte byte0 = (byte)3;
      buffer1.md5();
      buffer1.readByteString((long) (byte)3);
      realBufferedSink0.writeDecimalLong((-3003L));
      Buffer buffer2 = realBufferedSink0.buffer.writeUtf8("YLLh=lR");
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer2);
      realBufferedSource0.buffer();
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readDecimalLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9] or '-' character but was 0x68
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Pipe pipe0 = new Pipe(65280L);
      Buffer buffer0 = pipe0.buffer;
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(65280L);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      Buffer buffer2 = realBufferedSource0.buffer();
      InputStream inputStream0 = realBufferedSource0.inputStream();
      Buffer buffer3 = buffer2.readFrom(inputStream0, 65280L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer3.readAndWriteUnsafe();
      buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      long long0 = 71776119061217280L;
      buffer_UnsafeCursor0.resizeBuffer(long0);
      int int0 = 1114111;
      buffer1.read(buffer_UnsafeCursor0.data, int0, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeUtf8("YLLh=lR");
      buffer1.readUnsafe();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      BufferedSink bufferedSink0 = realBufferedSink1.writeByte(2727);
      bufferedSink0.writeShort(2727);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(bufferedSink0);
      realBufferedSink2.writeHexadecimalUnsignedLong((-1L));
      realBufferedSink1.writeInt((-2147483625));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      realBufferedSink1.buffer.readUtf8Line();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readByteString(1000000000000L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=7 offset=0 byteCount=1000000000000
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-1798L));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.next();
      try { 
        buffer1.readUtf8Line((long) 16);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeUtf8("YLLh=lR");
      buffer1.readUnsafe();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink1.writeDecimalLong(2111L);
      realBufferedSink0.writeDecimalLong(100000L);
      // Undeclared exception!
      try { 
        buffer1.read(realBufferedSink0.buffer, 2111L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == this
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Pipe pipe0 = new Pipe(9964L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(9964L);
      Buffer buffer1 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink1.writeByte(100);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(bufferedSink0);
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(realBufferedSink1);
      realBufferedSink3.writeHexadecimalUnsignedLong(10000000000000000L);
      buffer_UnsafeCursor0.buffer.readAndWriteUnsafe();
      Buffer buffer2 = pipe0.buffer;
      buffer2.readUtf8Line();
      realBufferedSink3.buffer.readUtf8CodePoint();
      HashingSource hashingSource0 = HashingSource.sha1(realBufferedSink3.buffer);
      ByteString byteString0 = hashingSource0.hash();
      boolean boolean0 = realBufferedSink0.buffer.rangeEquals((long) (-1), byteString0, 50, 2961);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong(10000L);
      buffer1.sha1();
      buffer1.readUtf8CodePoint();
      buffer0.segmentSizes();
      assertFalse(buffer0.exhausted());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.buffer.writeUtf8("");
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink1.buffer.writeDecimalLong((-1488L));
      realBufferedSink0.writeDecimalLong(2147483643L);
      realBufferedSink0.writeDecimalLong((-958L));
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink0);
      realBufferedSink0.buffer.readDecimalLong();
      buffer0.writeLongLe((-1834L));
      // Undeclared exception!
      try { 
        realBufferedSink2.buffer.readShort();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size < 2: 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong((-815L));
      long long0 = realBufferedSink0.buffer.readDecimalLong();
      assertEquals((-815L), long0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("source == null");
      ByteString byteString0 = buffer0.readByteString(4L);
      buffer1.rangeEquals(3L, byteString0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeUtf8(".outputStream()");
      ByteString byteString0 = realBufferedSink0.buffer.md5();
      ByteString byteString1 = realBufferedSink0.buffer.readByteString((long) (byte)3);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)48;
      ByteString byteString2 = new ByteString(byteArray0);
      realBufferedSink0.buffer.rangeEquals((long) (byte)3, byteString2);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer1.inputStream();
      buffer2.timeout();
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString1;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString2;
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer.writeUtf8("YLLh=lR");
      byte[] byteArray0 = new byte[0];
      ByteString byteString0 = new ByteString(byteArray0);
      buffer1.rangeEquals((long) (byte)3, byteString0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      Buffer buffer2 = realBufferedSink1.buffer();
      buffer1.inputStream();
      buffer1.timeout();
      ByteString[] byteStringArray0 = new ByteString[0];
      Options options0 = Options.of(byteStringArray0);
      buffer2.select(options0);
      realBufferedSink0.buffer.selectPrefix(options0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Pipe pipe0 = new Pipe((byte)102);
      MockFile mockFile0 = new MockFile(" content=");
      Buffer buffer0 = new Buffer();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.ENGLISH;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " content=");
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[5];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer0.selectPrefix(options0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1));
      MockFile mockFile0 = new MockFile("size < 8: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.ENGLISH;
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) mockFile0;
      objectArray0[1] = (Object) "O7fX#+$Q1N?iPdq)";
      objectArray0[1] = (Object) mockFile0;
      objectArray0[3] = (Object) mockFile0;
      objectArray0[4] = (Object) "";
      objectArray0[6] = (Object) "";
      mockPrintStream0.printf(locale0, "O7fX#+$Q1N?iPdq)", objectArray0);
      buffer_UnsafeCursor0.next();
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.resizeBuffer(16);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // resizeBuffer() only permitted for read/write buffers
         //
         verifyException("okio.Buffer$UnsafeCursor", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeDecimalLong(100000000000L);
      realBufferedSink0.buffer();
      Buffer buffer2 = realBufferedSink1.buffer;
      // Undeclared exception!
      try { 
        realBufferedSink1.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // size == 0
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.readUnsafe();
      Buffer buffer1 = buffer0.writeUtf8("s.limit != s.pos");
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeDecimalLong(1000000000000011L);
      try { 
        buffer0.write((Source) realBufferedSink0.buffer, 2573L);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong((-72057594037927936L));
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer buffer2 = buffer1.writeDecimalLong(9223372036854775807L);
      buffer2.writeShortLe((-2233));
      // Undeclared exception!
      try { 
        realBufferedSink0.buffer.readHexadecimalUnsignedLong();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected leading [0-9a-fA-F] character but was 0x2d
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.writeUtf8("s.limit == s.pos");
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(3L);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(1000000L);
      realBufferedSink0.buffer.sha1();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = ((RealBufferedSink) bufferedSink0).buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.resizeBuffer(1L);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Locale locale0 = Locale.ENGLISH;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      ByteString byteString0 = buffer0.sha256();
      realBufferedSink0.write(byteString0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(realBufferedSink0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(realBufferedSink1);
      Buffer buffer1 = realBufferedSink2.buffer();
      realBufferedSink0.buffer.inputStream();
      realBufferedSink1.buffer.timeout();
      ByteString[] byteStringArray0 = new ByteString[6];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      byteStringArray0[3] = byteString0;
      byteStringArray0[4] = byteString0;
      byteStringArray0[5] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.select(options0);
      realBufferedSink0.buffer.selectPrefix(options0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Pipe pipe0 = new Pipe(9964L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(9964L);
      Buffer buffer1 = bufferedSink0.buffer();
      Buffer buffer2 = buffer1.writeDecimalLong(9964L);
      buffer2.writeShortLe((-2233));
      realBufferedSink0.buffer.readHexadecimalUnsignedLong();
      buffer1.emit();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$E[u22{:%|{B");
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString[] byteStringArray0 = new ByteString[3];
      byteStringArray0[0] = byteString0;
      byteStringArray0[1] = byteString0;
      byteStringArray0[2] = byteString0;
      Options options0 = Options.of(byteStringArray0);
      buffer1.selectPrefix(options0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("gzip finished without exhausting source");
      buffer1.md5();
      ByteString byteString0 = buffer0.readByteString(3L);
      buffer0.rangeEquals(3L, byteString0);
      MockFile mockFile0 = new MockFile("gzip finished without exhausting source");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      buffer1.copyTo((OutputStream) mockFileOutputStream0, 3L, 3L);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("gzip finished without exhausting source");
      buffer1.md5();
      MockPrintStream mockPrintStream0 = new MockPrintStream("ISIZE");
      Locale locale0 = Locale.PRC;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "\\", (Object[]) null);
      buffer1.copyTo((OutputStream) printStream0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.buffer();
      Pipe pipe0 = new Pipe(3L);
      Buffer buffer2 = pipe0.buffer;
      Object object0 = new Object();
      buffer2.equals(object0);
      buffer0.clear();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = (RealBufferedSink)realBufferedSink0.writeByte((-1896));
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer0);
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      realBufferedSink1.toString();
      realBufferedSink0.buffer.readUtf8CodePoint();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Locale locale0 = Locale.ENGLISH;
      HashingSink hashingSink0 = HashingSink.sha512(buffer0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      ByteString byteString0 = hashingSink0.hash();
      realBufferedSink0.write(byteString0);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      realBufferedSink0.buffer.readUtf8CodePoint();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      HashingSource hashingSource0 = HashingSource.md5(pipe_PipeSource0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-109);
      ByteString byteString0 = new ByteString(byteArray0);
      HashingSource hashingSource1 = HashingSource.hmacSha256(hashingSource0, byteString0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource1);
      Buffer buffer0 = realBufferedSource0.buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      realBufferedSink0.writeDecimalLong(65280L);
      Buffer buffer2 = realBufferedSink0.buffer();
      buffer2.readHexadecimalUnsignedLong();
      realBufferedSink0.buffer.emit();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Integer integer0 = new Integer((-1065));
      Buffer buffer3 = buffer2.writeLongLe((byte) (-109));
      buffer3.readUtf8CodePoint();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer3.readAndWriteUnsafe(buffer_UnsafeCursor0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.emitCompleteSegments();
      ByteString byteString0 = realBufferedSink0.buffer.sha1();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = realBufferedSink0.buffer.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.resizeBuffer(1L);
      realBufferedSink0.buffer.indexOfElement(byteString0, (long) 1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("gzip finished without exhausting source");
      ByteString byteString0 = buffer1.md5();
      ByteString byteString1 = buffer0.readByteString(3L);
      buffer0.rangeEquals(3L, byteString1);
      buffer0.rangeEquals(100000000000000000L, byteString0);
      buffer1.rangeEquals(2656L, byteString1, 110, (-752));
      buffer1.toString();
      buffer1.buffer();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      buffer0.exhausted();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.seek((-1));
      try { 
        buffer0.readUtf8CodePoint();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      Buffer buffer1 = realBufferedSink0.buffer;
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      Deflater deflater0 = new Deflater((-1), false);
      DeflaterSink deflaterSink0 = new DeflaterSink((BufferedSink) realBufferedSink0, deflater0);
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(deflaterSink0);
      realBufferedSink2.writeByte((-1588));
      RealBufferedSink realBufferedSink3 = new RealBufferedSink(realBufferedSink1);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSink3.buffer.readAndWriteUnsafe();
      realBufferedSink0.writeShortLe((-1588));
      Pipe pipe0 = new Pipe(9223372036854775807L);
      Buffer buffer2 = buffer_UnsafeCursor0.buffer;
      buffer_UnsafeCursor0.buffer.readUtf8Line();
      buffer1.readUtf8CodePoint();
      Buffer.UnsafeCursor buffer_UnsafeCursor2 = buffer_UnsafeCursor0.buffer.readUnsafe();
      buffer_UnsafeCursor1.buffer.clear();
      Object object0 = new Object();
      buffer_UnsafeCursor2.buffer.equals(object0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      realBufferedSink0.writeDecimalLong(10000000L);
      realBufferedSink0.buffer.sha1();
      Buffer buffer1 = realBufferedSink0.buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.resizeBuffer(1000000L);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Pipe pipe0 = new Pipe(33L);
      Buffer buffer1 = pipe0.buffer;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      buffer1.writeUtf8("\u2026]");
      realBufferedSink0.buffer.hashCode();
      Buffer buffer2 = realBufferedSink0.buffer;
      buffer2.sha1();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeUtf8("\u2026]");
      // Undeclared exception!
      try { 
        buffer1.readFully((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readUnsafe();
      Buffer buffer1 = buffer_UnsafeCursor0.buffer.writeHexadecimalUnsignedLong((-1));
      Integer integer0 = new Integer((-1));
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer1);
      buffer0.indexOf((byte)33, 280375L);
      realBufferedSink1.writeByte((-1899));
      RealBufferedSink realBufferedSink2 = new RealBufferedSink(buffer0);
      Buffer.UnsafeCursor buffer_UnsafeCursor1 = realBufferedSink2.buffer.readAndWriteUnsafe();
      Pipe pipe0 = new Pipe(65536L);
      Buffer buffer2 = pipe0.buffer;
      realBufferedSink2.buffer.readUtf8Line();
      Buffer buffer3 = realBufferedSink2.buffer;
      buffer3.hashCode();
      realBufferedSink0.buffer.buffer();
      buffer_UnsafeCursor1.close();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer0.writeShort((-1));
      buffer0.indexOf((byte)9, (long) (byte)9);
      // Undeclared exception!
      try { 
        buffer_UnsafeCursor0.buffer.readUtf8Line(4278190080L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=2 offset=4278190079 byteCount=1
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("s.limit == s.pos");
      Segment segment0 = buffer0.writableSegment(1992);
      segment0.owner = false;
      SegmentPool.next = segment0;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      // Undeclared exception!
      try { 
        realBufferedSink0.writeDecimalLong(280375465082880L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082893L);
      Buffer buffer0 = pipe0.buffer;
      buffer0.sha1();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(1000000L);
      // Undeclared exception!
      buffer0.hashCode();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Locale locale0 = Locale.ENGLISH;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      ByteString byteString0 = buffer0.sha256();
      realBufferedSink0.write(byteString0);
      realBufferedSink0.buffer.indexOf(byteString0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("gzip finished without exhausting source");
      ByteString byteString0 = buffer1.md5();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-50);
      realBufferedSink0.write(byteArray0);
      realBufferedSink0.toString();
      realBufferedSink0.buffer.hashCode();
      buffer0.buffer();
      realBufferedSink0.buffer.indexOf(byteString0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("s.limit == s.pos");
      Segment segment0 = buffer0.writableSegment(1992);
      SegmentPool.next = segment0;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      BufferedSink bufferedSink0 = realBufferedSink0.writeDecimalLong(280375465082880L);
      buffer0.write((Source) realBufferedSink0.buffer, 4L);
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      ByteString byteString0 = hashingSource0.hash();
      bufferedSink0.write(byteString0);
      buffer0.indexOf(byteString0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Buffer buffer1 = buffer0.writeUtf8("s.limit == s.pos");
      ByteString byteString0 = buffer1.sha1();
      buffer1.indexOf(byteString0, 100000000000000000L);
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.offset = 1072L;
      buffer_UnsafeCursor0.resizeBuffer(15L);
      Integer integer0 = new Integer((-1));
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Pipe pipe0 = new Pipe(280375465082880L);
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("s.limit == s.pos");
      ByteString byteString0 = buffer1.sha1();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readAndWriteUnsafe();
      buffer_UnsafeCursor0.resizeBuffer(15L);
      Integer integer0 = new Integer((-1));
      buffer0.indexOf(byteString0, 1095216660480L);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Pipe pipe0 = new Pipe(10000L);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(pipe_PipeSink0);
      Buffer buffer0 = realBufferedSink0.buffer;
      byte[] byteArray0 = new byte[7];
      realBufferedSink0.writeDecimalLong((byte)0);
      RealBufferedSink realBufferedSink1 = new RealBufferedSink(buffer0);
      realBufferedSink1.outputStream();
      realBufferedSink1.buffer();
      InputStream inputStream0 = buffer0.inputStream();
      realBufferedSink0.buffer.readFrom(inputStream0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("gzip finished without exhausting source");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      Buffer buffer2 = buffer1.write(byteArray0);
      ByteString byteString0 = buffer1.readByteString(3L);
      buffer1.readUtf8CodePoint();
      buffer2.indexOf(byteString0, 3L);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-1798L));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.next();
      ByteString byteString0 = new ByteString(buffer_UnsafeCursor0.data);
      HashingSink hashingSink0 = HashingSink.hmacSha1(buffer1, byteString0);
      hashingSink0.hash();
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(hashingSink0);
      realBufferedSink0.closed = false;
      realBufferedSink0.write(byteString0);
      buffer1.readUtf8CodePoint();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeUtf8("s.limit == s.pos");
      Segment segment0 = buffer0.writableSegment(1992);
      SegmentPool.next = segment0;
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer1);
      realBufferedSink0.writeDecimalLong(280375465082880L);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s.limit == s.pos", true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      realBufferedSink0.buffer.writeTo((OutputStream) filterOutputStream0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer0.readAndWriteUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.resizeBuffer(538L);
      buffer_UnsafeCursor0.resizeBuffer(0L);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer buffer1 = buffer0.writeHexadecimalUnsignedLong((-1798L));
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = buffer1.readUnsafe();
      buffer_UnsafeCursor0.next();
      buffer_UnsafeCursor0.next();
  }
}
