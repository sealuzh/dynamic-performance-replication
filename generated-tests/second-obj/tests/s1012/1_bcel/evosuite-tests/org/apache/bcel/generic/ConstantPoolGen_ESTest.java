/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 00:26:10 GMT 2018
 */

package org.apache.bcel.generic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.lang.reflect.Member;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.DescendingVisitor;
import org.apache.bcel.classfile.JavaClass;
import org.apache.bcel.classfile.Method;
import org.apache.bcel.generic.ArrayType;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ClassLoaderRepository;
import org.apache.bcel.util.ClassPath;
import org.apache.bcel.util.ClassPathRepository;
import org.apache.bcel.util.MemorySensitiveClassPathRepository;
import org.apache.bcel.util.SyntheticRepository;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConstantPoolGen_ESTest extends ConstantPoolGen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[2];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      int int0 = constantPoolGen0.addFloat(2.0F);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConstantClass constantClass0 = new ConstantClass(2230);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[1] = (Constant) constantClass0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(226);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(226);
      Constant[] constantArray0 = new Constant[6];
      constantArray0[4] = (Constant) constantMethodType0;
      constantArray0[5] = (Constant) constantString0;
      Method method0 = new Method();
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1450, 0);
      ConstantDouble constantDouble0 = new ConstantDouble(0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[3] = (Constant) constantMethodref1;
      constantMethodref1.copy();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addFloat(470.5F);
      int int0 = constantPoolGen0.lookupMethodref("}9fA@E>l)o&t_[6", "( !0A]r4 :Unknown constant type :CONSTANT_Fieldref[9](class_index = 2, name_and_type_index = 4)", "Gr%;i'<C<}n!;");
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.size = (-1284);
      String string0 = "XYG3hbnYsea%";
      constantPoolGen0.lookupClass("XYG3hbnYsea%");
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref("XYG3hbnYsea%", (String) null, "XYG3hbnYsea%");
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantString constantString0 = new ConstantString((-1504));
      constantArray0[0] = (Constant) constantString0;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1504));
      constantArray0[1] = (Constant) constantMethodType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      int int0 = constantPoolGen0.addMethodref("&", "&", "&");
      assertEquals(6, constantPoolGen0.getSize());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Short.BYTES;
      constantPoolGen0.addFloat(2);
      constantPoolGen0.getFinalConstantPool();
      int int1 = constantPoolGen0.lookupString("<$0aXOkCVqIk\"8LlxB& Grt}(g'*H&<$0aXOkCVqIk\"8LlxB");
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.index;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayType arrayType0 = new ArrayType("Unexpected constant type: ", 240);
      constantPoolGen0.addArrayClass(arrayType0);
      constantPoolGen0.addArrayClass(arrayType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantInteger constantInteger0 = new ConstantInteger(240);
      assertEquals(240, constantInteger0.getBytes());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Constant[] constantArray0 = new Constant[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.getFinalConstantPool();
      // Undeclared exception!
      try { 
        constantPoolGen1.addInterfaceMethodref((String) null, "[", "g!/qd8|\",={^O)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(52, 52);
      String string0 = "DH i_#Fj;QQm";
      Constant[] constantArray0 = new Constant[3];
      constantArray0[0] = (Constant) constantNameAndType0;
      constantArray0[1] = (Constant) constantNameAndType0;
      constantArray0[2] = (Constant) constantNameAndType0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.adjustSize();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      assertEquals(1, constantPool0.getLength());
      
      int int0 = constantPoolGen0.getSize();
      assertEquals(1, int0);
      
      ConstantPool constantPool1 = constantPoolGen0.getConstantPool();
      assertEquals(256, constantPool1.getLength());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(1120.3F);
      int int0 = constantPoolGen0.lookupLong(1);
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat(870.46106F);
      constantPoolGen0.lookupDouble(1.0);
      int int0 = constantPoolGen0.lookupFieldref("U", "U", "##");
      assertEquals(2, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantFloat constantFloat0 = new ConstantFloat((-3786.5F));
      constantArray0[0] = (Constant) constantFloat0;
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[1] = (Constant) constantFloat1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupFloat((-3011.961F));
      int int0 = constantPoolGen0.addDouble((-1));
      assertEquals(4, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ConstantClass constantClass0 = new ConstantClass(2213);
      constantClass0.clone();
      Constant[] constantArray0 = new Constant[2];
      constantArray0[0] = (Constant) constantClass0;
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantClass0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2213
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("!&7*8:i5>La7)");
      constantPoolGen0.addConstant(constantUtf8_0, constantPoolGen0);
      int int0 = Double.SIZE;
      int int1 = Short.BYTES;
      constantPoolGen0.getFinalConstantPool();
      assertEquals(2, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.index;
      String string0 = "";
      ArrayType arrayType0 = new ArrayType("", (byte)7);
      ArrayType arrayType1 = new ArrayType("", (byte)7);
      constantPoolGen0.addArrayClass(arrayType0);
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      String string1 = "Select ";
      constantPoolGen0.lookupNameAndType("Select ", "Select ");
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool1);
      int int1 = 250;
      PipedInputStream pipedInputStream0 = new PipedInputStream(250);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Constant[] constantArray0 = new Constant[5];
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-933), (-933));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[0] = (Constant) constantFieldref1;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("e[V${g,^");
      ConstantUtf8 constantUtf8_1 = new ConstantUtf8(constantUtf8_0);
      constantArray0[1] = (Constant) constantUtf8_1;
      ConstantUtf8 constantUtf8_2 = new ConstantUtf8("e[V${g,^");
      constantArray0[2] = (Constant) constantUtf8_2;
      ConstantDouble constantDouble0 = new ConstantDouble((-3467.30752240734));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[3] = (Constant) constantDouble1;
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-933));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[4] = (Constant) constantMethodType1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool1);
      int int0 = constantPoolGen0.lookupString("e[V${g,^");
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.lookupMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(17, 17);
      Constant[] constantArray0 = new Constant[1];
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantInvokeDynamic0, constantPoolGen0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unknown constant type CONSTANT_InvokeDynamic[18](bootstrap_method_attr_index = 17, name_and_type_index = 17)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addInterfaceMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantClass constantClass0 = new ConstantClass((-995));
      constantArray0[0] = (Constant) constantClass0;
      ConstantLong constantLong0 = new ConstantLong((-995));
      constantArray0[1] = (Constant) constantLong0;
      ConstantInteger constantInteger0 = new ConstantInteger((-995));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[2] = (Constant) constantInteger1;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-995), (-995));
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addNameAndType("&A", "&A");
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.adjustSize();
      int int0 = constantPoolGen0.addNameAndType("&A", "&A");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.toString();
      constantPoolGen0.lookupNameAndType("", "");
      constantPoolGen0.addLong((-1));
      constantPoolGen0.lookupMethodref("", "", "");
      int int0 = constantPoolGen0.addLong((-4611578839718631336L));
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat((-3207.0F));
      ConstantMethodref constantMethodref0 = new ConstantMethodref(1, 1);
      ConstantDouble constantDouble0 = new ConstantDouble(747.5393333670074);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "' is not of a reference type as expected.");
      Constant[] constantArray0 = new Constant[5];
      constantArray0[0] = (Constant) constantDouble1;
      ConstantDouble constantDouble2 = new ConstantDouble(0.0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "' is not of a reference type as expected.");
      constantArray0[0] = (Constant) constantDouble0;
      constantArray0[3] = (Constant) constantDouble0;
      constantArray0[4] = (Constant) constantDouble1;
      ConstantFloat constantFloat0 = new ConstantFloat((-3207.0F));
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantFloat constantFloat2 = new ConstantFloat(constantFloat1);
      constantFloat1.setBytes(0.0F);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen1.addConstant(constantMethodref0, constantPoolGen0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.bcel.classfile.ConstantFloat cannot be cast to org.apache.bcel.classfile.ConstantClass
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = Pattern.COMMENTS;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-570), 69);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantInteger constantInteger0 = new ConstantInteger(249);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      ConstantInteger constantInteger2 = new ConstantInteger(constantInteger1);
      constantInteger0.setBytes((-570));
      constantInteger2.copy();
      constantMethodHandle0.clone();
      BCELComparator bCELComparator0 = MethodGen.getComparator();
      Constant.setComparator(bCELComparator0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      int int1 = Member.PUBLIC;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      constantPoolGen0.addConstant(constantInteger2, constantPoolGen1);
      assertEquals(3, constantPoolGen0.getSize());
      
      int int2 = constantPoolGen1.lookupFloat(2.0F);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantMethodType constantMethodType0 = new ConstantMethodType((-1554));
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      ConstantDouble constantDouble0 = new ConstantDouble(0.0);
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "(=F8h");
      ConstantDouble constantDouble2 = new ConstantDouble(144.9458751742276);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "re)#5Q\"XWN-?Uv_zHU ");
      ConstantFloat constantFloat0 = new ConstantFloat(1.0F);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      ConstantFloat constantFloat2 = new ConstantFloat(constantFloat0);
      constantFloat0.setBytes(2.0F);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantDouble1, constantPoolGen0);
      ArrayType arrayType0 = null;
      try {
        arrayType0 = new ArrayType((byte) (-107), (-216));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: -107
         //
         verifyException("org.apache.bcel.generic.BasicType", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      MethodGen methodGen0 = null;
      // Undeclared exception!
      try { 
        constantPoolGen0.addMethodref((MethodGen) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lastore");
      Constant[] constantArray0 = new Constant[3];
      long long0 = 1346L;
      ConstantLong constantLong0 = new ConstantLong(1346L);
      constantArray0[0] = (Constant) constantLong0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(1787, 253);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[2] = (Constant) constantLong1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupDouble(2.0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.addConstant(constantLong0, constantPoolGen1);
      String string0 = "V`\\)SNH";
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      try { 
        pipedInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addLong(1397L);
      constantPoolGen0.lookupNameAndType("Wm9Hi?%:.D650\"8", "Wm9Hi?%:.D650\"8");
      constantPoolGen0.toString();
      assertEquals(3, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.getFinalConstantPool();
      ObjectType objectType0 = Type.THROWABLE;
      int int0 = constantPoolGen0.addClass(objectType0);
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(47, 3411);
      ConstantNameAndType constantNameAndType1 = new ConstantNameAndType(constantNameAndType0);
      constantArray0[0] = (Constant) constantNameAndType1;
      ConstantInteger constantInteger0 = new ConstantInteger(47);
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[1] = (Constant) constantInteger1;
      int int0 = 2077;
      ConstantClass constantClass0 = new ConstantClass(2077);
      constantArray0[2] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantPool0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.STRINGBUFFER;
      constantPoolGen0.addClass(objectType0);
      int int0 = Member.DECLARED;
      constantPoolGen0.addInteger(199);
      constantPoolGen0.addDouble(1);
      constantPoolGen0.addInteger(604);
      constantPoolGen0.getConstant(4);
      assertEquals(7, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayType arrayType0 = new ArrayType("", (byte)52);
      Class<ConstantString> class0 = ConstantString.class;
      arrayType0.getElementType();
      Type.getType(class0);
      int int0 = constantPoolGen0.size;
      constantPoolGen0.getConstantPool();
      constantPoolGen0.lookupInterfaceMethodref("", "", "");
      Constant[] constantArray0 = new Constant[2];
      constantPoolGen0.getConstantPool();
      ConstantInteger constantInteger0 = new ConstantInteger((-1));
      constantArray0[0] = (Constant) constantInteger0;
      ConstantInteger constantInteger1 = new ConstantInteger(249);
      constantArray0[1] = (Constant) constantInteger1;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      SyntheticRepository.getInstance();
      ConstantInteger constantInteger2 = new ConstantInteger((-1477));
      constantPoolGen1.addConstant(constantArray0[1], constantPoolGen0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(608, (-1475));
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      assertTrue(constantMethodref1.equals((Object)constantMethodref0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFloat((-1081.146F));
      constantPoolGen0.adjustSize();
      constantPoolGen0.addFloat((-1081.146F));
      constantPoolGen0.getFinalConstantPool();
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(644, 0);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(constantInterfaceMethodref0);
      constantArray0[0] = (Constant) constantInterfaceMethodref1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantArray0[0], constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 644
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Constant[] constantArray0 = new Constant[4];
      ConstantFieldref constantFieldref0 = new ConstantFieldref(5223, 5223);
      constantArray0[0] = (Constant) constantFieldref0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(5223, (-569));
      constantArray0[1] = (Constant) constantInvokeDynamic0;
      ConstantClass constantClass0 = new ConstantClass((-3114));
      ConstantClass constantClass1 = new ConstantClass(constantClass0);
      constantArray0[2] = (Constant) constantClass1;
      ConstantFloat constantFloat0 = new ConstantFloat(2.0F);
      constantArray0[3] = (Constant) constantFloat0;
      ConstantPoolGen constantPoolGen0 = null;
      try {
        constantPoolGen0 = new ConstantPoolGen(constantArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = constantPoolGen0.index;
      Class<ConstantString> class0 = ConstantString.class;
      Type.getType(class0);
      constantPoolGen0.getConstantPool();
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(1, (-437));
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref(2, (-2144));
      constantInterfaceMethodref0.clone();
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(53);
      ConstantInterfaceMethodref constantInterfaceMethodref1 = new ConstantInterfaceMethodref(1, (byte)0);
      constantNameAndType0.copy();
      Constant[] constantArray0 = new Constant[0];
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantNameAndType0, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -437
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      int int0 = Pattern.LITERAL;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int1 = Byte.SIZE;
      int int2 = Double.MAX_EXPONENT;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("^`y(hbPoKI~M;;");
      Constant[] constantArray0 = new Constant[5];
      constantUtf8_0.copy();
      constantArray0[0] = (Constant) constantUtf8_0;
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantInteger constantInteger0 = new ConstantInteger(1023);
      constantInteger0.clone();
      constantInteger0.clone();
      constantPoolGen0.addString(" o pla_n handle");
      constantPoolGen0.addString(" o pla_n handle");
      int int3 = constantPoolGen0.addLong(16);
      assertEquals(5, constantPoolGen0.getSize());
      assertEquals(3, int3);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.lookupFloat(0.0F);
      constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addDouble((-1));
      constantPoolGen0.addDouble((-1715.49792484));
      constantPoolGen0.toString();
      assertEquals(5, constantPoolGen0.getSize());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat((-1.0F));
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-5486), 644);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      constantArray0[2] = (Constant) constantMethodHandle1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantPool0);
      int int0 = constantPoolGen0.lookupUtf8("^mL");
      assertEquals(3, constantPoolGen0.getSize());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Constant[] constantArray0 = new Constant[1];
      ConstantString constantString0 = new ConstantString((-2034458190));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[0] = (Constant) constantString1;
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen(constantArray0);
      constantPoolGen0.lookupFloat((-2349.631F));
      constantPoolGen0.getFinalConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen();
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantString1, constantPoolGen1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2034458190
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.CLASS;
      int int0 = Short.BYTES;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      int int1 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      Constant[] constantArray0 = new Constant[20];
      constantPoolGen0.addInterfaceMethodref("", "", "");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(4, (-686));
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      constantPool1.copy();
      int int2 = Double.MAX_EXPONENT;
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      // Undeclared exception!
      try { 
        constantPoolGen0.setConstant(284, constantArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 284
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.OBJECT;
      int int0 = Character.MAX_CODE_POINT;
      constantPoolGen0.getConstantPool();
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-3041), (-686));
      constantFieldref0.setNameAndTypeIndex((-686));
      constantPoolGen0.addFloat(0.0F);
      int int1 = Character.SIZE;
      // Undeclared exception!
      try { 
        constantPoolGen0.addConstant(constantFieldref0, constantPoolGen0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3041
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ArrayType arrayType0 = new ArrayType("", (byte)52);
      Class<ConstantString> class0 = ConstantString.class;
      ArrayType arrayType1 = (ArrayType)arrayType0.getElementType();
      Type.getType(class0);
      int int0 = Short.BYTES;
      constantPoolGen0.lookupInterfaceMethodref("", "", "");
      ConstantInteger constantInteger0 = new ConstantInteger((-1));
      constantPoolGen0.addInterfaceMethodref("", "", "");
      Method method0 = new Method();
      constantPoolGen0.addInterfaceMethodref("", "", "");
      ConstantFloat constantFloat0 = new ConstantFloat(4);
      String string0 = Constants.ILLEGAL_OPCODE;
      DADD dADD0 = new DADD();
      int int1 = Byte.BYTES;
      ArrayType arrayType2 = null;
      try {
        arrayType2 = new ArrayType(arrayType1, (-1081));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid number of dimensions: -1081
         //
         verifyException("org.apache.bcel.generic.ArrayType", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Class<ConstantString> class0 = ConstantString.class;
      Type.getType(class0);
      int int0 = Short.BYTES;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((-1982292596), 2);
      ConstantMethodHandle constantMethodHandle1 = new ConstantMethodHandle(constantMethodHandle0);
      ConstantInteger constantInteger0 = new ConstantInteger(243);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantString constantString0 = new ConstantString((-2706));
      ConstantString constantString1 = new ConstantString(constantString0);
      constantMethodHandle1.clone();
      constantInteger0.setBytes((-4168));
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      int int1 = Character.MAX_RADIX;
      constantPool0.copy();
      constantPoolGen1.addFieldref("7Y!';BZx?{b#@", "7Y!';BZx?{b#@", "");
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen(constantPool0);
      constantPoolGen2.addClass("7Y!';BZx?{b#@");
      constantPoolGen1.addFieldref("7Y!';BZx?{b#@", "7Y!';BZx?{b#@", "");
      assertEquals(6, constantPoolGen1.getSize());
      
      int int2 = constantPoolGen2.addString("7Y!';BZx?{b#@");
      assertEquals(3, int2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      ObjectType objectType0 = Type.THROWABLE;
      int int0 = Character.MAX_CODE_POINT;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      constantPool0.constantToString((Constant) constantUtf8_0);
      constantPoolGen0.lookupMethodref("ACC_SUPER special lookup procedure not successful: method '", "", "");
      ConstantFieldref constantFieldref0 = new ConstantFieldref((-1), (-1));
      constantPoolGen0.addString("w[ZfX0#KiQy8.#c;t[");
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("w[ZfX0#KiQy8.#c;t[", "w[ZfX0#KiQy8.#c;t[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"w[ZfX0#KiQy8.#c;t[\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addMethodref("I", "I", "I");
      int int0 = constantPoolGen0.index;
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.toString();
      try { 
        constantPool0.getConstantString(702, (byte)124);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 702. Constant pool size is: 256
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantString constantString0 = new ConstantString(1607);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "a$[bf~A@N`:J3`Qq*";
      String string1 = "/qfNC7Nikd!`:8$Th4";
      constantPoolGen0.addFieldref("a$[bf~A@N`:J3`Qq*", "Unexpected constant type: ", "/qfNC7Nikd!`:8$Th4");
      constantPoolGen0.addString("/qfNC7Nikd!`:8$Th4");
      ConstantPool constantPool0 = constantPoolGen0.getConstantPool();
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen1.toString();
      // Undeclared exception!
      try { 
        constantPool0.getConstantString(7, (byte) (-79));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -79
         //
         verifyException("org.apache.bcel.Const", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      constantPoolGen0.size = 4;
      ConstantPool constantPool0 = constantPoolGen0.getFinalConstantPool();
      constantPoolGen0.addFieldref("^u1at6*st{!)7", "^u1at6*st{!)7", "^u1at6*st{!)7");
      ConstantDouble constantDouble0 = new ConstantDouble(8);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantPool0);
      constantPoolGen0.addConstant(constantDouble0, constantPoolGen1);
      constantPoolGen0.lookupNameAndType("#", "#");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(4, 4);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(340, 16);
      constantFieldref1.toString();
      ConstantFieldref constantFieldref2 = new ConstantFieldref(constantFieldref1);
      constantPoolGen0.addConstant(constantDouble0, constantPoolGen1);
      // Undeclared exception!
      try { 
        constantPoolGen0.addArrayClass((ArrayType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.ConstantPoolGen", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      String string0 = "";
      constantPoolGen0.addMethodref("", "", "");
      constantPoolGen0.addFloat(4);
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(256, 5);
      Constant[] constantArray0 = new Constant[5];
      constantArray0[1] = (Constant) constantMethodHandle0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      constantArray0[2] = (Constant) constantUtf8_0;
      constantPoolGen0.addMethodref("", "", "");
      ConstantInteger constantInteger0 = new ConstantInteger(4);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoaderRepository classLoaderRepository0 = new ClassLoaderRepository(classLoader0);
      try { 
        classLoaderRepository0.loadClass("");
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         //  not found.
         //
         verifyException("org.apache.bcel.util.ClassLoaderRepository", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addNameAndType("", "");
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("");
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle(2, 2);
      Constant[] constantArray0 = new Constant[2];
      constantArray0[1] = (Constant) constantMethodHandle0;
      ConstantInteger constantInteger0 = new ConstantInteger(2);
      ConstantPoolGen constantPoolGen1 = new ConstantPoolGen(constantArray0);
      constantPoolGen1.addFieldref("", "", "");
      constantPoolGen0.addString("");
      ConstantPoolGen constantPoolGen2 = new ConstantPoolGen();
      constantPoolGen2.addInterfaceMethodref("", "", "");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(2, 2);
      ClassPath classPath0 = new ClassPath("");
      ClassPath classPath1 = new ClassPath(classPath0, "");
      ClassPathRepository classPathRepository0 = new ClassPathRepository(classPath1);
      classPathRepository0.findClass("");
      org.apache.bcel.classfile.Visitor visitor0 = mock(org.apache.bcel.classfile.Visitor.class, new ViolatedAssumptionAnswer());
      DescendingVisitor descendingVisitor0 = new DescendingVisitor((JavaClass) null, visitor0);
      constantFieldref0.setNameAndTypeIndex((byte)3);
      ObjectType objectType0 = Type.STRINGBUFFER;
      int int0 = constantPoolGen1.index;
      ObjectType objectType1 = Type.CLASS;
      constantFieldref0.toString();
      int int1 = constantPoolGen1.addConstant(constantFieldref0, constantPoolGen2);
      assertEquals(6, constantPoolGen1.getSize());
      assertEquals(5, int1);
  }
}
