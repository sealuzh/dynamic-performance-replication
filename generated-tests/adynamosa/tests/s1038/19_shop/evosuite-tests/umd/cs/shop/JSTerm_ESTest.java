/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 13:23:41 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("B!");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      streamTokenizer0.ttype = (-412);
      SystemInUtil.addInputLine("8.0");
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      jSTerm0.sort((Comparator) null);
      System.setCurrentTimeMillis(718L);
      JSTerm jSTerm1 = jSTerm0.call();
      JSJshopVars.exclamation = 0;
      jSTerm1.print();
      jSTerm0.toStr();
      jSTerm1.matches(jSTerm0);
      jSTerm1.makeEval(true);
      streamTokenizer0.pushBack();
      System.setCurrentTimeMillis(2216L);
      jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[6];
      charArray0[0] = '\u008E';
      charArray0[0] = '>';
      charArray0[4] = '\u0080';
      charArray0[5] = 'i';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.apostrophe = 0;
      jSTerm0.add(0, (Object) "Tb.iZh*0-GopPC");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.addElement("call");
      jSTerm0.retainAll(jSSubstitution0);
      jSTerm0.add(0, (Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSJshopVars.rightPar = 0;
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      assertFalse(jSTerm0.isFunction());
      
      jSTerm0.makeFunction();
      jSTerm0.add(0, (Object) "Tb.iZh*0-GopPC");
      jSTerm2.print();
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      jSTerm3.remove((Object) "call");
      JSJshopVars.leftPar = 0;
      jSTerm0.isGround();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      jSSubstitution1.removeElements(jSSubstitution0);
      JSTerm jSTerm4 = jSTerm0.call();
      jSTerm0.matches(jSTerm4, jSSubstitution1);
      System.setCurrentTimeMillis(0);
      jSTerm1.toStr();
      jSTerm4.standardizerTerm();
      assertTrue(jSTerm4.isFunction());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[6];
      charArray0[0] = '\u008E';
      charArray0[0] = '>';
      charArray0[4] = '\u0080';
      charArray0[5] = 'i';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.apostrophe = 0;
      jSTerm0.add(0, (Object) "Tb.iZh*0-GopPC");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.addElement("call");
      jSTerm0.retainAll(jSSubstitution0);
      jSTerm0.add(0, (Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSJshopVars.rightPar = 0;
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSTerm0.makeFunction();
      jSTerm0.add(0, (Object) "Tb.iZh*0-GopPC");
      jSTerm2.print();
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      jSTerm3.remove((Object) "call");
      JSJshopVars.leftPar = 0;
      jSTerm0.isGround();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      jSSubstitution1.removeElements(jSSubstitution0);
      JSTerm jSTerm4 = jSTerm0.call();
      jSTerm0.matches(jSTerm4, jSSubstitution1);
      System.setCurrentTimeMillis(0);
      jSTerm1.toStr();
      jSTerm4.equals(jSTerm0);
      boolean boolean0 = jSTerm0.equals(jSTerm4);
      assertTrue(jSTerm0.isFunction());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[6];
      charArray0[0] = '\u008E';
      charArray0[0] = '>';
      charArray0[4] = '\u0080';
      charArray0[5] = 'i';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.apostrophe = 0;
      jSTerm0.add(0, (Object) "Tb.iZh*0-GopPC");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.addElement("call");
      jSTerm0.retainAll(jSSubstitution0);
      jSTerm0.add(0, (Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSJshopVars.rightPar = 0;
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSTerm0.makeFunction();
      jSTerm0.add(0, (Object) "Tb.iZh*0-GopPC");
      jSTerm1.print();
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      jSTerm3.remove((Object) "call");
      JSJshopVars.leftPar = 0;
      jSTerm0.isGround();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      jSSubstitution1.removeElements(jSSubstitution0);
      JSTerm jSTerm4 = jSTerm0.call();
      jSTerm0.matches(jSTerm4, jSSubstitution1);
      System.setCurrentTimeMillis(0);
      jSTerm1.toStr();
      boolean boolean0 = jSTerm4.equals(jSTerm0);
      assertTrue(jSTerm0.isFunction());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[6];
      charArray0[0] = '\u008E';
      SystemInUtil.addInputLine("call");
      charArray0[3] = ',';
      charArray0[4] = '\u0080';
      charArray0[5] = '^';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.apostrophe = 0;
      jSTerm0.add(0, (Object) "Tb.iZh*0-GopPC");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.addElement("call");
      jSTerm0.retainAll(jSSubstitution0);
      jSTerm0.add(0, (Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSJshopVars.rightPar = 0;
      jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSTerm1.makeFunction();
      jSTerm0.add(0, (Object) "Tb.iZh*0-GopPC");
      jSTerm1.print();
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      JSJshopVars.leftPar = 0;
      jSTerm1.makeEval(true);
      StringReader stringReader0 = new StringReader("call");
      stringReader0.reset();
      jSTerm0.cloneT();
      StringReader stringReader1 = new StringReader("call");
      stringReader1.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      SystemInUtil.addInputLine("call");
      SystemInUtil.addInputLine(";Tb.i*0OGopPCR");
      charArray0[0] = 'G';
      charArray0[2] = '';
      charArray0[3] = ',';
      charArray0[4] = '\u0080';
      charArray0[5] = '^';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add(0, (Object) "pVM<j");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.addElement("pVM<j");
      jSTerm0.retainAll(jSSubstitution0);
      jSTerm0.add(0, (Object) jSTerm1);
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSTerm1.makeFunction();
      jSTerm0.add(0, (Object) ";");
      jSTerm1.print();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm0.matches(jSTerm2, jSSubstitution1);
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSTerm2.isFunction());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      SystemInUtil.addInputLine("call");
      SystemInUtil.addInputLine(";Tb.i*0OGopPCR");
      charArray0[0] = 'G';
      charArray0[2] = '';
      charArray0[3] = ',';
      charArray0[4] = 'r';
      charArray0[5] = '^';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add(0, (Object) "pVM<j");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.addElement("pVM<j");
      jSTerm0.retainAll(jSSubstitution0);
      jSTerm0.add(0, (Object) jSTerm1);
      jSTerm1.makeFunction();
      jSTerm0.add(0, (Object) ";");
      jSTerm1.print();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSSubstitution1.fail());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.print();
      jSTerm0.makeFunction();
      jSTerm0.toStr();
      jSTerm0.isEval();
      jSTerm0.toStr();
      streamTokenizer0.lowerCaseMode(false);
      jSTerm0.makeEval(true);
      jSTerm0.isEval();
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm0.isFunction());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader1 = new StringReader("max");
      SystemInUtil.addInputLine((String) null);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      streamTokenizer0.ordinaryChar((-2));
      SystemInUtil.addInputLine("max");
      jSTerm1.makeFunction();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      jSSubstitution0.add((Object) null);
      streamTokenizer0.resetSyntax();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm1.isGround();
      jSTerm2.matches(jSTerm0, jSSubstitution1);
      jSTerm0.toStr();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add(0, (Object) "");
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      SystemInUtil.addInputLine("\"c=nlxXl9_:");
      jSTerm0.add(0, (Object) jSTerm1);
      jSTerm0.add(0, (Object) "; ");
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(>AfL'cJ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer1.resetSyntax();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Integer integer0 = new Integer(2841);
      StringReader stringReader0 = new StringReader("(>AfL'cJ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add(0, (Object) "");
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(3, stringBuffer0.length());
      
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      jSTerm2.setElementAt((Object) null, 0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.trimToSize();
      JSJshopVars.greaterT = 36;
      boolean boolean0 = jSTerm2.equals(jSTerm0);
      jSTerm2.trimToSize();
      boolean boolean1 = jSTerm0.equals(jSTerm2);
      assertTrue(boolean1 == boolean0);
      
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      assertTrue(jSTerm3.isFunction());
      
      jSTerm0.cloneT();
      StringReader stringReader0 = new StringReader("A8H,t{KC");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm5 = jSTerm4.standardizerTerm();
      jSTerm1.print();
      JSSubstitution jSSubstitution3 = jSTerm2.matches(jSTerm5);
      jSTerm5.applySubstitutionT(jSSubstitution1);
      assertFalse(jSSubstitution1.fail());
      
      jSTerm0.matches(jSTerm2, jSSubstitution3);
      assertTrue(jSSubstitution3.fail());
      assertTrue(jSTerm5.isConstant());
      assertNotSame(jSTerm5, jSTerm4);
      assertFalse(jSTerm5.isFunction());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add(0, (Object) "");
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.toStr();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      assertEquals("[]", jSTerm2.toString());
      
      jSTerm2.setElementAt((Object) null, 0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm2.replaceAll(unaryOperator0);
      jSTerm1.trimToSize();
      JSJshopVars.greaterT = 36;
      jSTerm2.equals(jSTerm0);
      jSTerm2.trimToSize();
      jSTerm0.equals(jSTerm2);
      jSTerm2.applySubstitutionT(jSSubstitution1);
      jSTerm0.cloneT();
      StringReader stringReader0 = new StringReader("A8H,t{KC");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      jSTerm1.print();
      jSTerm2.matches(jSTerm4);
      assertTrue(jSTerm4.isConstant());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(;'V<");
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.minus = 59;
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SystemInUtil.addInputLine("(*'V<");
      StringReader stringReader0 = new StringReader("(*'V<");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("cj");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(p7]0m .o5;);NQ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("8.0");
      assertFalse(stringReader1.equals((Object)stringReader0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(j]Ff| 'vT");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add(0, (Object) ".");
      jSTerm0.toStr();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.removeAll(jSTerm0);
      jSTerm0.equals(jSTerm1);
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object object0 = new Object();
      SystemInUtil.addInputLine("/z");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add(0, object0);
      StringReader stringReader0 = new StringReader("Y?Y]92&WEh9.6U+f5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.clonePF();
      jSTerm0.add(1, (Object) jSTerm1);
      //  // Unstable assertion: assertFalse(jSTerm1.isEval());
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      //  // Unstable assertion: assertEquals(32, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement((Object) null);
      JSJshopVars.rightBrac = (-694);
      jSTerm0.add(0, (Object) ".");
      jSTerm0.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader1 = new StringReader("max");
      SystemInUtil.addInputLine((String) null);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      streamTokenizer0.ordinaryChar((-2));
      SystemInUtil.addInputLine("max");
      jSTerm0.print();
      jSTerm1.makeFunction();
      jSTerm1.equals(jSTerm2);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      jSSubstitution0.add((Object) null);
      streamTokenizer0.resetSyntax();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution1);
      jSTerm1.toStr();
      jSTerm1.makeEval(true);
      jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Aax");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(111);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      stringReader0.read();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      streamTokenizer0.commentChar(113);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      jSTerm1.matches(jSTerm0, jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(90);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      stringReader0.read();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.parallelStream();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm3.equals(jSTerm0);
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm0);
      jSTerm2.applySubstitutionT(jSSubstitution1);
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator0);
      jSTerm0.toStr();
      jSTerm2.toStr();
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add(0, (Object) "$");
      jSTerm0.isGround();
      SystemInUtil.addInputLine("$");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.containsAll(jSSubstitution0);
      jSTerm0.isGround();
      jSTerm0.isConstant();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSSubstitution0.standarizerSubs();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.containsAll(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.clonePF();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      SystemInUtil.addInputLine(" S) sL9");
      StringReader stringReader0 = new StringReader(" S) sL9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.print();
      StringReader stringReader1 = new StringReader("$");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSSubstitution3.removeAll(jSSubstitution1);
      JSTerm jSTerm3 = jSTerm1.parseList(streamTokenizer0);
      jSTerm3.applySubstitutionT(jSSubstitution3);
      System.setCurrentTimeMillis((-1L));
      StringReader stringReader2 = new StringReader("$");
      // Undeclared exception!
      try { 
        jSTerm3.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(111);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      stringReader0.read();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      streamTokenizer0.commentChar(113);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm0.matches(jSTerm1);
      jSSubstitution1.trimToSize();
      streamTokenizer0.slashSlashComments(false);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) "max");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("o");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      jSTerm0.print();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StringReader stringReader2 = new StringReader(".");
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.isGround();
      StringReader stringReader3 = new StringReader("(");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer4);
      boolean boolean0 = jSTerm0.equals(jSTerm2);
      assertTrue(jSTerm0.isVariable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "max";
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader1 = new StringReader("max");
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine("umd.cs.shop.JSTerm");
      streamTokenizer0.commentChar(63);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader1 = new StringReader("max");
      SystemInUtil.addInputLine((String) null);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      streamTokenizer0.ordinaryChar((-2));
      SystemInUtil.addInputLine("max");
      jSTerm0.print();
      jSTerm1.makeFunction();
      jSTerm1.equals(jSTerm2);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.resetSyntax();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      jSTerm1.toStr();
      jSTerm1.makeEval(true);
      jSTerm1.cloneT();
      assertTrue(jSTerm0.isVariable());
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution2));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.makeVariable();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.commentChar((-1));
      JSTerm jSTerm1 = jSTerm0.cloneT();
      SystemInUtil.addInputLine((String) null);
      jSTerm0.print();
      jSTerm0.makeFunction();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.equals(jSTerm2);
      jSTerm2.matches(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add(0, (Object) "3");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.isEmpty();
      StringReader stringReader0 = new StringReader("3");
      jSTerm0.makeVariable();
      jSTerm0.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm2 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.equals(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.elementAt(427);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 427 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader1 = new StringReader("max");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm1.matches(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution4);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.makeVariable();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      jSTerm0.equals(jSTerm2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.call();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm0.cloneT();
      assertTrue(jSTerm0.isVariable());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSSubstitution0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.call();
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.print();
      jSTerm0.isVariable();
      StringReader stringReader1 = new StringReader(")");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(true);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.isGround();
      System.setCurrentTimeMillis((-4));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(%[WO");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(2684);
      StringReader stringReader1 = new StringReader("(%[WO");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 0;
      String string0 = ".";
      jSTerm0.add(0, (Object) ".");
      jSTerm0.add(0, (Object) ".");
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      Integer integer0 = new Integer(2631);
      jSTerm0.remove((Object) integer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.standardizerTerm();
      StringReader stringReader0 = new StringReader("cawR!~E|/Fp(%u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Ko");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.call();
      streamTokenizer0.whitespaceChars((-3), (-3));
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("YE--qu( 9[l*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("gNWFF:NNx4g)V_uke");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChars(52, 0);
      streamTokenizer0.pushBack();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.sval = "gNWFF:NNx4g)V_uke";
      jSSubstitution0.containsAll(jSTerm0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Object object0 = new Object();
      jSSubstitution0.add(object0);
      JSJshopVars.equalT = 52;
      jSTerm1.matches(jSTerm0);
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals("gNWFF:NNx4g ", stringBuffer0.toString());
      
      System.setCurrentTimeMillis(41);
      jSTerm0.toStr();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.print();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm2.matches(jSTerm0);
      jSTerm0.print();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      System.setCurrentTimeMillis(0);
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      assertNotSame(jSTerm4, jSTerm2);
      assertTrue(jSTerm4.isConstant());
      
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm5 = jSTerm1.parseList(streamTokenizer0);
      jSTerm5.clonePF();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm5);
      assertFalse(jSTerm1.isEval());
      assertEquals("[nil]", jSTerm5.toString());
      assertFalse(jSTerm5.isFunction());
      assertNotSame(jSTerm1, jSTerm3);
      assertFalse(jSTerm5.isVariable());
      assertTrue(jSSubstitution1.fail());
      assertTrue(jSTerm5.isConstant());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeVariable();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.remove((Object) "O_7ALx");
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(O");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.isGround();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6[4Xaa,E");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer(0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.print();
      jSTerm0.makeFunction();
      jSTerm0.toStr();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.equals(jSTerm0);
      jSTerm0.toStr();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 2631;
      jSTerm0.setSize(2631);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add(0, (Object) "");
      Object object0 = jSTerm0.clone();
      jSTerm0.add(0, object0);
      jSTerm0.add(0, (Object) "s");
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6[4Xaa,E");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.commentChar((-3940));
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.nval = 3539.57446424562;
      jSTerm1.print();
      jSTerm1.makeFunction();
      jSTerm0.toStr();
      jSTerm1.isEval();
      jSTerm0.toStr();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      assertFalse(jSTerm2.isConstant());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.makeConstant();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm4 = jSTerm3.call();
      jSTerm1.isFunction();
      jSTerm0.equals(jSTerm4);
      boolean boolean0 = jSTerm2.equals(jSTerm4);
      assertTrue(jSTerm2.isConstant());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add(0, (Object) null);
      StringReader stringReader0 = new StringReader("yO|H]F(bn\"");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.add(0, (Object) jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 0;
      jSTerm0.add(0, (Object) null);
      StringReader stringReader0 = new StringReader("yO|H]F(bn\"");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.add(0, (Object) jSTerm0);
      jSTerm0.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add(0, (Object) "o");
      jSTerm0.add(0, (Object) "o");
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(2631);
      jSTerm0.stream();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add(0, (Object) "o");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.isEmpty();
      jSTerm0.isFunction();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.makeConstant();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm3.call();
      jSTerm2.isFunction();
      jSTerm2.equals(jSTerm1);
      boolean boolean0 = jSTerm3.equals(jSTerm4);
      assertTrue(jSTerm0.isConstant());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add(0, (Object) "o");
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.spliterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      jSTerm0.toStr();
      streamTokenizer0.commentChar(0);
      jSTerm2.equals(jSTerm0);
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      jSTerm0.call();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm2.matches(jSTerm3, jSSubstitution0);
      Integer integer0 = new Integer((-4));
      // Undeclared exception!
      try { 
        jSTerm3.insertElementAt(integer0, (-4));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add(0, (Object) null);
      StringReader stringReader0 = new StringReader("yO|H]F(bn\"");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.add(0, (Object) jSTerm0);
      jSTerm0.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add(0, (Object) jSSubstitution0);
      jSTerm0.print();
      StringReader stringReader0 = new StringReader("?H5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.subList(0, 1215);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1215
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add(0, (Object) jSSubstitution0);
      jSTerm0.print();
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(1215);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      jSTerm0.isEval();
      streamTokenizer0.lowerCaseMode(false);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      assertTrue(jSSubstitution2.fail());
      
      System.setCurrentTimeMillis(0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm2);
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSSubstitution3.fail());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.print();
      jSTerm0.isVariable();
      StringReader stringReader1 = new StringReader(")");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add(0, (Object) jSSubstitution0);
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.elementAt((-1479));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.print();
      jSTerm0.makeFunction();
      jSTerm0.toStr();
      jSTerm0.isEval();
      jSTerm0.toStr();
      streamTokenizer0.lowerCaseMode(false);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      jSTerm0.remove(0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("63A,VX[=^%OTQOl}L$");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[9];
      charArray0[0] = ')';
      charArray0[1] = 'u';
      charArray0[2] = '`';
      charArray0[3] = 's';
      charArray0[4] = ')';
      charArray0[5] = 'e';
      charArray0[6] = 'm';
      charArray0[7] = ':';
      charArray0[8] = '\\';
      stringReader0.read(charArray0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.clear();
      jSTerm0.add(0, (Object) jSSubstitution0);
      jSTerm0.makeVariable();
      int int0 = 33;
      JSJshopVars.slash = 33;
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add(0, (Object) "o");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.isEval();
      jSTerm0.isFunction();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(127, 127);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.trimToSize();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm4.clone();
      jSTerm2.standardizerTerm();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm1.makeConstant();
      jSTerm3.isFunction();
      jSTerm2.matches(jSTerm5);
      jSTerm1.toStr();
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.VarCounter = (-726);
      int int0 = 0;
      JSJshopVars.interrogation = 0;
      jSTerm0.add(0, (Object) "o");
      jSTerm0.add(0, (Object) "o");
      jSTerm0.isVariable();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(2, 49);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.lessT = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "list");
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.isEval();
      jSTerm1.isFunction();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      streamTokenizer0.whitespaceChars(49, (-1));
      jSTerm2.trimToSize();
      jSTerm2.remove((Object) jSTerm1);
      jSTerm2.matches(jSTerm0, (JSSubstitution) null);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.print();
      jSTerm0.makeFunction();
      jSTerm0.toStr();
      jSTerm0.isEval();
      jSTerm0.toStr();
      streamTokenizer0.lowerCaseMode(false);
      jSTerm0.makeEval(true);
      jSTerm0.isEval();
      jSTerm0.print();
      jSTerm0.cloneT();
      assertTrue(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(2, 49);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.lessT = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "list");
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      boolean boolean0 = jSTerm0.isEval();
      boolean boolean1 = jSTerm1.isFunction();
      assertTrue(boolean1 == boolean0);
      
      jSTerm1.applySubstitutionT(jSSubstitution0);
      streamTokenizer0.whitespaceChars(49, (-1));
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      jSTerm0.clone();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm3.isFunction());
      assertNotSame(jSTerm2, jSTerm3);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.print();
      jSTerm0.makeFunction();
      jSTerm0.toStr();
      jSTerm0.isEval();
      jSTerm0.toStr();
      streamTokenizer0.lowerCaseMode(false);
      jSTerm0.makeEval(true);
      jSTerm0.isEval();
      jSTerm0.print();
      jSTerm0.standardizerTerm();
      boolean boolean0 = jSTerm0.isFunction();
      assertFalse(jSTerm0.isConstant());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add(0, (Object) "o");
      jSTerm0.add(0, (Object) "o");
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 0;
      jSTerm0.add(0, (Object) "o");
      jSTerm0.add(0, (Object) "o");
      jSTerm0.isFunction();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add(0, (Object) "o");
      jSTerm0.add(0, (Object) "o");
      jSTerm0.isFunction();
      jSTerm0.isFunction();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.slash = 46;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.removeElement(jSSubstitution0);
      jSTerm0.add(0, (Object) jSSubstitution0);
      jSTerm0.print();
      System.setCurrentTimeMillis(0);
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=Q");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader(" Expected (");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      System.setCurrentTimeMillis(7663L);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer4);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add(0, (Object) jSSubstitution0);
      jSTerm0.isGround();
      jSTerm0.isVariable();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.clear();
      jSTerm0.add(0, (Object) jSSubstitution0);
      jSTerm0.makeVariable();
      int int0 = 33;
      JSJshopVars.slash = 33;
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(2, 49);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.lessT = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "list");
      jSTerm0.standarizerPredicateForm();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      boolean boolean0 = jSTerm0.isEval();
      jSTerm1.isFunction();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      streamTokenizer0.whitespaceChars(1781, (-1));
      jSTerm2.trimToSize();
      JSTerm jSTerm3 = (JSTerm)jSTerm0.clone();
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      boolean boolean1 = jSTerm2.equals(jSTerm4);
      assertTrue(boolean1);
      
      jSTerm3.makeConstant();
      boolean boolean2 = jSTerm4.isFunction();
      assertTrue(boolean2 == boolean0);
      
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm2);
      assertFalse(jSSubstitution1.fail());
      
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertNotSame(jSTerm1, jSTerm4);
      assertFalse(jSTerm1.isVariable());
      assertEquals(10, jSTerm1.capacity());
      assertEquals("%%% ", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(2, 49);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.lessT = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "list");
      jSTerm0.standarizerPredicateForm();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.isEval();
      jSTerm1.isFunction();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      streamTokenizer0.whitespaceChars(1781, (-1));
      jSTerm2.trimToSize();
      jSTerm0.clone();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      jSSubstitution0.stream();
      jSTerm3.trimToSize();
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      jSTerm1.add((Object) stringReader0);
      jSTerm2.matches(jSTerm0);
      jSTerm1.isVariable();
      JSJshopVars.dot = (-1701);
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      assertEquals(2, jSTerm1.size());
      
      jSTerm3.matches(jSTerm4);
      jSTerm2.isVariable();
      boolean boolean0 = jSTerm1.isEval();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%%%");
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isGround();
      System.setCurrentTimeMillis((-664L));
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer0);
      assertEquals(41, streamTokenizer0.ttype);
      assertFalse(jSTerm2.isVariable());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) ".nz|79!@O");
      jSTerm0.add(0, (Object) jSSubstitution0);
      jSTerm0.isGround();
      System.setCurrentTimeMillis(0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.iterator();
      jSTerm0.equals(jSTerm2);
      boolean boolean1 = jSTerm1.equals(jSTerm0);
      assertTrue(boolean1 == boolean0);
      assertFalse(jSTerm1.isEval());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = null;
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(2, 49);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.lessT = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "list");
      jSTerm0.standarizerPredicateForm();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.isEval();
      jSTerm1.isFunction();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      streamTokenizer0.whitespaceChars(1781, (-1));
      jSTerm2.trimToSize();
      jSTerm0.clone();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      int int0 = (-1701);
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      jSSubstitution0.stream();
      // Undeclared exception!
      try { 
        jSTerm3.subList((-1), (-1701));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add(0, (Object) jSSubstitution0);
      JSJshopVars.rightBrac = 2;
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=Q");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      jSTerm0.makeFunction();
      jSTerm0.isEval();
      jSTerm0.toStr();
      jSTerm0.isEval();
      jSTerm0.makeEval(false);
      jSTerm0.call();
      assertTrue(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("E}FCF@0d79(=1\u0002");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeElement(stringReader0);
      jSTerm0.add(0, (Object) stringReader0);
      jSTerm0.print();
      jSTerm0.isConstant();
      jSTerm0.isConstant();
      jSTerm0.print();
      assertFalse(jSTerm0.isConstant());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(O");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("OFE+CP3CK7k");
      StringReader stringReader1 = new StringReader("OFE+CP3CK7k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm();
      long long0 = new Integer((-4));
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("max");
      stringReader0.skip(0L);
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("T]Z:gMeAxNU`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.slashStarComments(false);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution1);
      boolean boolean0 = jSTerm0.isVariable();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3D7fmlR06__I4O");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(40);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.pushBack();
      jSTerm0.toStr();
      jSTerm0.isGround();
      jSTerm0.isConstant();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add(0, (Object) jSSubstitution0);
      JSJshopVars.rightBrac = 2;
      JSTerm jSTerm1 = jSTerm0.call();
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Z");
      jSTerm0.addElement(stringReader0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      jSTerm1.iterator();
      jSTerm0.equals(jSTerm1);
      jSTerm0.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.print();
      jSTerm0.makeFunction();
      jSTerm0.toStr();
      jSTerm0.isEval();
      jSTerm0.toStr();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(jSTerm0.isFunction());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.exclamation = 3436;
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Jas-E}oOP.6f6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      streamTokenizer0.resetSyntax();
      jSTerm1.lastElement();
      jSTerm0.remove((Object) "%%%");
      JSJshopVars.slash = (-1);
      jSTerm0.isFunction();
      char[] charArray0 = new char[3];
      charArray0[0] = '<';
      charArray0[1] = 'o';
      charArray0[2] = 'P';
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, 1270, 422);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6[4Xaa,E");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.commentChar((-3940));
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.nval = 3539.57446424562;
      jSTerm1.spliterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      jSTerm0.toStr();
      streamTokenizer0.commentChar((-3940));
      jSTerm1.isConstant();
      jSTerm1.equals(jSTerm0);
      jSTerm1.matches(jSTerm0, jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm1.insertElementAt(jSTerm0, (-3940));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add(0, (Object) "o");
      Integer integer0 = new Integer(37);
      jSTerm0.add(0, (Object) integer0);
      StringReader stringReader0 = new StringReader("o");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TT3O+");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      jSSubstitution0.add((Object) "");
      jSTerm0.isEval();
      jSTerm0.isEval();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.print();
      StringReader stringReader1 = new StringReader(">'uzy!Pwf0{V");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5'~PE>wdzXN~az\"");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm0.isConstant());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.iterator();
      jSTerm0.equals(jSTerm2);
      jSTerm0.makeConstant();
      jSTerm2.equals(jSTerm0);
      jSTerm0.matches(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      StringReader stringReader0 = new StringReader("|:^Pus7(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DRh=q6`|C_bZ@H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.markSupported();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.print();
      jSSubstitution0.add((Object) stringReader0);
      jSSubstitution0.add((Object) jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H'8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<Integer> consumer0 = null;
      jSSubstitution0.add((Object) stringReader0);
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      // Undeclared exception!
      try { 
        unaryOperator0.compose((Function<? super JSSubstitution, ? extends JSSubstitution>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.print();
      jSTerm0.makeFunction();
      jSTerm0.toStr();
      jSTerm0.isEval();
      jSTerm0.toStr();
      jSTerm0.makeEval(true);
      assertFalse(jSTerm0.isConstant());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("max");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
      
      jSTerm1.print();
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      stringReader0.skip((-2458L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("T]Z:gMeAxNU`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution1.fail());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add(0, (Object) jSSubstitution0);
      JSJshopVars.rightBrac = 2;
      jSTerm0.print();
      assertFalse(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = ".";
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      streamTokenizer0.quoteChar((-1663));
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("CiXuZ>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ) ");
      stringReader0.reset();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = 0;
      stringReader0.mark(0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.wordChars((-808), 0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
