/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 01:56:32 GMT 2018
 */

package org.la4j.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.linear.ForwardBackSubstitutionSolver;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesSubtraction;
import org.la4j.vector.SparseVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ForwardBackSubstitutionSolver_ESTest extends ForwardBackSubstitutionSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      OoPlaceMatricesSubtraction ooPlaceMatricesSubtraction0 = new OoPlaceMatricesSubtraction();
      double[][] doubleArray0 = new double[9][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-355.267260572185);
      doubleArray2[1] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 428.000449537;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-355.267260572185);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-355.267260572185);
      doubleArray3[5] = 0.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (-2243.0);
      doubleArray5[1] = 428.000449537;
      doubleArray5[2] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (-355.267260572185);
      doubleArray6[1] = (-355.267260572185);
      doubleArray6[2] = (-355.267260572185);
      doubleArray6[3] = 428.000449537;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 428.000449537;
      doubleArray7[2] = (-355.267260572185);
      doubleArray7[3] = 428.000449537;
      doubleArray7[4] = 428.000449537;
      doubleArray7[5] = (-355.267260572185);
      doubleArray7[6] = (-355.267260572185);
      doubleArray7[7] = 0.0;
      doubleArray7[8] = (-355.267260572185);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[7];
      doubleArray8[0] = (-355.267260572185);
      doubleArray8[1] = (-355.267260572185);
      doubleArray8[2] = (-355.267260572185);
      doubleArray8[3] = 0.0;
      doubleArray8[4] = (-2243.0);
      doubleArray8[5] = (-432.6455625040334);
      doubleArray8[6] = (-2243.0);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[6];
      doubleArray9[0] = (-2243.0);
      doubleArray9[1] = (-432.6455625040334);
      doubleArray9[2] = (-2243.0);
      doubleArray9[3] = (-2243.0);
      doubleArray9[4] = 428.000449537;
      doubleArray9[5] = (-432.6455625040334);
      doubleArray0[8] = doubleArray9;
      SparseMatrix sparseMatrix0 = SparseMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = ooPlaceMatricesSubtraction0.applySimple(sparseMatrix0, sparseMatrix0);
      ForwardBackSubstitutionSolver forwardBackSubstitutionSolver0 = null;
      try {
        forwardBackSubstitutionSolver0 = new ForwardBackSubstitutionSolver(matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given coefficient matrix can not be used with this solver.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.zero(7, 7, 7);
      ForwardBackSubstitutionSolver forwardBackSubstitutionSolver0 = new ForwardBackSubstitutionSolver(rowMajorSparseMatrix0);
      SparseVector sparseVector0 = SparseVector.zero(7);
      // Undeclared exception!
      try { 
        forwardBackSubstitutionSolver0.solve(sparseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This system can not be solved: coefficient matrix is singular.
         //
         verifyException("org.la4j.linear.AbstractSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RowMajorSparseMatrix rowMajorSparseMatrix0 = RowMajorSparseMatrix.identity(3);
      SparseVector sparseVector0 = SparseVector.zero(3, 3);
      ForwardBackSubstitutionSolver forwardBackSubstitutionSolver0 = new ForwardBackSubstitutionSolver(rowMajorSparseMatrix0);
      forwardBackSubstitutionSolver0.solve(sparseVector0);
      boolean boolean0 = forwardBackSubstitutionSolver0.applicableTo(rowMajorSparseMatrix0);
      assertTrue(boolean0);
  }
}
