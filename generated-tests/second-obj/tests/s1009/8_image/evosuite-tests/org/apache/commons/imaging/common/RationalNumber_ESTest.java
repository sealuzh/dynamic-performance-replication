/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 22:48:58 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(3.163333417433023E-8);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0", string0);
      assertEquals(3.163333372664112E-8, rationalNumber0.doubleValue(), 0.01);
      assertEquals(31612223, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-4629), (-4629));
      int int0 = rationalNumber0.intValue();
      assertEquals(1, int0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2147483648L));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-2147483647", string0);
      
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(2.147483647E9, rationalNumber1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      String string0 = rationalNumber0.toString();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0);
      assertEquals(1.0F, rationalNumber0.floatValue(), 0.01F);
      assertEquals(1.0, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.1474836290835385E9);
      String string0 = rationalNumber0.toString();
      assertEquals("2,147,483,629", string0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(2.14748365E9F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1.0E-8);
      long long0 = rationalNumber0.longValue();
      assertEquals(100000000, rationalNumber0.divisor);
      assertEquals(0L, long0);
      assertEquals(1.0E-8, rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-467.2));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-467.2", string0);
      
      rationalNumber0.negate();
      assertEquals((-467.2), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1273.5);
      double double0 = rationalNumber0.doubleValue();
      assertEquals(2547, rationalNumber0.numerator);
      assertEquals(1273.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(1, 1);
      String string0 = rationalNumber0.toString();
      String string1 = rationalNumber0.toDisplayString();
      assertEquals("1", string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-2794), 811);
      String string0 = rationalNumber0.toString();
      assertEquals("-2794/811 (-3.445)", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-1.0));
      assertEquals((-1.0F), rationalNumber0.floatValue(), 0.01F);
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-1.0), rationalNumber0.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      String string0 = rationalNumber0.toString();
      assertEquals("2,147,483,647", string0);
      
      float float0 = rationalNumber0.floatValue();
      assertEquals(2.14748365E9F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber(0, 0);
      rationalNumber0.toString();
      // Undeclared exception!
      try { 
        rationalNumber0.toDisplayString();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2147483668L));
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-2147483647", string0);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-2147483647), (-2147483668L));
      assertEquals(536870912, rationalNumber1.numerator);
      assertEquals(0.9999999906867744, rationalNumber1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber.factoryMethod(0L, (-2147483649L));
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod((-2147483649L), 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: -2147483649, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-863.00199527));
      rationalNumber0.negate();
      long long0 = rationalNumber0.longValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-863L), long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483668L), (-2147483668L));
      assertEquals((byte)1, rationalNumber0.byteValue());
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1, (-2147483668L));
      assertEquals(2147483628, rationalNumber1.divisor);
      assertEquals(4.656612916445479E-10, rationalNumber1.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(49L, 49L);
      RationalNumber rationalNumber1 = new RationalNumber(1, 1);
      rationalNumber0.longValue();
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod((-2185L), 2147483649L);
      assertEquals((-1.017935574054718E-6), rationalNumber2.doubleValue(), 0.01);
      
      rationalNumber0.floatValue();
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1", string0);
      
      RationalNumber rationalNumber3 = rationalNumber0.negate();
      RationalNumber rationalNumber4 = RationalNumber.valueOf((-1093));
      rationalNumber3.negate();
      long long0 = rationalNumber3.longValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals((-1L), long0);
      
      RationalNumber rationalNumber5 = new RationalNumber(1, (-4619));
      RationalNumber.factoryMethod(1, 1);
      RationalNumber.factoryMethod(49L, (-2147483648L));
      RationalNumber rationalNumber6 = RationalNumber.factoryMethod((-5222L), 49L);
      assertEquals((-106L), rationalNumber6.longValue());
      assertEquals((-106.57143F), rationalNumber6.floatValue(), 0.01F);
      
      long long1 = rationalNumber4.longValue();
      assertEquals((-1093.0F), rationalNumber4.floatValue(), 0.01F);
      assertEquals((-1093L), long1);
  }
}
