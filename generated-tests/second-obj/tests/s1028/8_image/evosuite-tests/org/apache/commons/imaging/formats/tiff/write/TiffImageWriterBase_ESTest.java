/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:52:06 GMT 2018
 */

package org.apache.commons.imaging.formats.tiff.write;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.image.BufferedImage;
import java.awt.image.TileObserver;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.ByteOrder;
import java.text.DateFormat;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Stack;
import javax.accessibility.AccessibleExtendedText;
import javax.swing.JFormattedTextField;
import javax.swing.JViewport;
import javax.swing.ScrollPaneConstants;
import javax.swing.text.DefaultEditorKit;
import org.apache.commons.imaging.common.BinaryOutputStream;
import org.apache.commons.imaging.formats.tiff.constants.TiffDirectoryType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldType;
import org.apache.commons.imaging.formats.tiff.fieldtypes.FieldTypeShort;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfoByteOrShort;
import org.apache.commons.imaging.formats.tiff.taginfos.TagInfoBytes;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossless;
import org.apache.commons.imaging.formats.tiff.write.TiffImageWriterLossy;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputDirectory;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputSummary;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TiffImageWriterBase_ESTest extends TiffImageWriterBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy((ByteOrder) null);
      // Undeclared exception!
      try { 
        tiffImageWriterLossy0.writeImageFileHeader((BinaryOutputStream) null, 12L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(byteOrder0);
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addGPSDirectory();
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing root directory.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(byteOrder0);
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.getOrCreateGPSDirectory();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      TiffOutputSummary tiffOutputSummary1 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      assertFalse(tiffOutputSummary1.equals((Object)tiffOutputSummary0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(byteOrder0);
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet(byteOrder0);
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      tiffOutputSet0.getOrCreateGPSDirectory();
      int int0 = JFormattedTextField.REVERT;
      String string0 = DefaultEditorKit.selectionEndWordAction;
      tiffOutputSet0.getExifDirectory();
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      TileObserver tileObserver0 = mock(TileObserver.class, new ViolatedAssumptionAnswer());
      ByteOrder.nativeOrder();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      ByteOrder byteOrder2 = ByteOrder.BIG_ENDIAN;
      Stack<TiffOutputDirectory> stack0 = new Stack<TiffOutputDirectory>();
      hashtable0.put("COMPRESSION", tiffOutputSet0);
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      ByteOrder.nativeOrder();
      TiffOutputSet tiffOutputSet1 = new TiffOutputSet();
      tiffOutputSet1.setGPSInDegrees(2, (-2));
      tiffOutputSet1.getDirectories();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet1);
      assertNotNull(tiffOutputSummary0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = SystemColor.SCROLLBAR;
      BufferedImage bufferedImage0 = new BufferedImage(23, 23, 4);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      // Undeclared exception!
      tiffImageWriterLossy0.writeImage(bufferedImage0, byteArrayOutputStream0, hashtable0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.getOrCreateExifDirectory();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = SystemColor.CONTROL_TEXT;
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      BufferedImage bufferedImage0 = new BufferedImage(65, 771, 4);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>(572);
      // Undeclared exception!
      tiffImageWriterLossy0.writeImage(bufferedImage0, byteArrayOutputStream0, hashtable0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(byteOrder0);
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      ByteOrder.nativeOrder();
      tiffOutputSet0.addInteroperabilityDirectory();
      tiffOutputSet0.addGPSDirectory();
      TiffOutputSummary tiffOutputSummary0 = tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      assertNotNull(tiffOutputSummary0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet(byteOrder0);
      byte[] byteArray0 = new byte[6];
      tiffOutputSet0.addInteroperabilityDirectory();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(tiffOutputSet0.byteOrder);
      tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
      tiffOutputSet0.getExifDirectory();
      ByteOrder.nativeOrder();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      ByteOrder.nativeOrder();
      // Undeclared exception!
      try { 
        tiffImageWriterLossy0.write((OutputStream) null, tiffOutputSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.common.BinaryOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteOrder.nativeOrder();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = ICC_Profile.icHdrVersion;
      String string0 = DefaultEditorKit.downAction;
      BufferedImage bufferedImage0 = new BufferedImage(8, 8, 8);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Long long0 = new Long(8);
      Long.min(8, 0L);
      hashtable0.put("COPRESSION", long0);
      ByteOrder.nativeOrder();
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, byteArrayOutputStream0, hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unknown parameter: COPRESSION
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet(byteOrder0);
      TiffOutputDirectory tiffOutputDirectory0 = tiffOutputSet0.getOrCreateRootDirectory();
      TiffOutputSet tiffOutputSet1 = new TiffOutputSet(byteOrder0);
      TiffOutputDirectory tiffOutputDirectory1 = tiffOutputSet1.getOrCreateExifDirectory();
      TiffDirectoryType tiffDirectoryType0 = TiffDirectoryType.EXIF_DIRECTORY_EXIF_IFD;
      TagInfoByteOrShort tagInfoByteOrShort0 = new TagInfoByteOrShort("51{)y5Q`@>", (-2), (-2), tiffDirectoryType0);
      byte[] byteArray0 = new byte[1];
      tiffOutputDirectory1.add(tagInfoByteOrShort0, byteArray0);
      FieldTypeShort fieldTypeShort0 = FieldType.SHORT;
      tagInfoByteOrShort0.toString();
      TiffDirectoryType tiffDirectoryType1 = TiffDirectoryType.TIFF_DIRECTORY_IFD0;
      TagInfoBytes tagInfoBytes0 = new TagInfoBytes("51{)y5Q`@>", (-2), fieldTypeShort0, (-1), tiffDirectoryType1);
      tiffOutputDirectory1.add(tagInfoBytes0, byteArray0);
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = SystemColor.SCROLLBAR;
      tiffOutputDirectory0.getItemDescription();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      BufferedImage bufferedImage0 = new BufferedImage(23, 23, 4);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>(0);
      try { 
        tiffImageWriterLossy0.write(byteArrayOutputStream0, tiffOutputSet1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Tag (-2 (0xfffffffe: 51{)y5Q`@>): ) appears twice in directory.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = JFormattedTextField.REVERT;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 4);
      byteArrayOutputStream0.flush();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      TiffImageWriterLossless tiffImageWriterLossless0 = new TiffImageWriterLossless(byteArray0);
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet(byteOrder0);
      try { 
        tiffImageWriterLossless0.writeImage(bufferedImage0, byteArrayOutputStream0, hashtable0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Not a Valid TIFF File
         //
         verifyException("org.apache.commons.imaging.common.BinaryFunctions", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteOrder.nativeOrder();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = DateFormat.SECOND_FIELD;
      BufferedImage bufferedImage0 = new BufferedImage(7, 7, 7);
      byteArrayOutputStream0.flush();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      Stack<TiffOutputDirectory> stack0 = new Stack<TiffOutputDirectory>();
      ByteOrder.nativeOrder();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      Long long0 = new Long(7);
      Long.min((-20L), 0L);
      hashtable0.put("EXIF", long0);
      byte[] byteArray0 = new byte[3];
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(byteArrayOutputStream0, byteOrder1);
      tiffImageWriterLossy0.writeImageFileHeader(binaryOutputStream0, 0L);
      byteArray0[2] = (byte)7;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteOrder.nativeOrder();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      tiffOutputSet0.addGPSDirectory();
      Stack<TiffOutputDirectory> stack1 = new Stack<TiffOutputDirectory>();
      TiffImageWriterBase.imageDataPaddingLength((byte)0);
      // Undeclared exception!
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, byteArrayOutputStream0, hashtable0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to org.apache.commons.imaging.formats.tiff.write.TiffOutputSet
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = ColorSpace.TYPE_3CLR;
      String string0 = ScrollPaneConstants.VERTICAL_SCROLLBAR;
      BufferedImage bufferedImage0 = new BufferedImage(13, 13, 4);
      byteArrayOutputStream0.flush();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(byteArrayOutputStream0);
      tiffImageWriterLossy0.writeImageFileHeader(binaryOutputStream0);
      ByteOrder.nativeOrder();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      Long long0 = new Long(13);
      hashtable0.put("COMPRESSION", long0);
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      Stack<TiffOutputDirectory> stack0 = new Stack<TiffOutputDirectory>();
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, byteArrayOutputStream0, hashtable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid compression parameter (Only CCITT 1D/Group 3/Group 4, LZW, Packbits and uncompressed supported).
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = ColorSpace.TYPE_3CLR;
      String string0 = ScrollPaneConstants.VERTICAL_SCROLLBAR;
      BufferedImage bufferedImage0 = new BufferedImage(13, 13, 4);
      byteArrayOutputStream0.flush();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Stack<TiffOutputDirectory> stack0 = new Stack<TiffOutputDirectory>();
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(byteArrayOutputStream0);
      tiffImageWriterLossy0.writeImageFileHeader(binaryOutputStream0);
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      ByteOrder.nativeOrder();
      Hashtable<String, Object> hashtable2 = new Hashtable<String, Object>();
      Long long0 = new Long(13);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object object0 = Image.UndefinedProperty;
      hashtable1.put("COMPRESSION", object0);
      Hashtable<String, Object> hashtable3 = new Hashtable<String, Object>();
      ByteOrder.nativeOrder();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, byteArrayOutputStream0, hashtable1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid compression parameter, must be numeric: java.lang.Object@88b68cd
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(byteOrder0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "More than one EXIF directory.");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = JFormattedTextField.REVERT;
      byteArrayOutputStream0.write(855);
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 4);
      byteArrayOutputStream0.flush();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      ByteOrder byteOrder2 = ByteOrder.BIG_ENDIAN;
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      hashtable0.put("XMP_XML", mockHijrahDate0);
      // Undeclared exception!
      try { 
        tiffImageWriterLossy0.writeImage(bufferedImage0, byteArrayOutputStream0, hashtable0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate cannot be cast to java.lang.String
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = JFormattedTextField.REVERT;
      String string0 = ScrollPaneConstants.VERTICAL_SCROLLBAR;
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 4);
      byteArrayOutputStream0.flush();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Stack<TiffOutputDirectory> stack0 = new Stack<TiffOutputDirectory>();
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      ByteOrder.nativeOrder();
      Hashtable<String, Object> hashtable2 = new Hashtable<String, Object>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      Long long0 = new Long(2);
      hashtable2.put("COMPRESSION", long0);
      Hashtable<String, Object> hashtable3 = new Hashtable<String, Object>();
      ByteOrder.nativeOrder();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      Stack<TiffOutputDirectory> stack1 = new Stack<TiffOutputDirectory>();
      tiffImageWriterLossy0.writeImage(bufferedImage0, byteArrayOutputStream0, hashtable2);
      // Undeclared exception!
      try { 
        tiffImageWriterLossy0.validateDirectories((TiffOutputSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = ICC_Profile.CLASS_DEVICELINK;
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      ByteOrder.nativeOrder();
      Stack<TiffOutputDirectory> stack0 = new Stack<TiffOutputDirectory>();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      ByteOrder.nativeOrder();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "GainControl");
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      Stack<TiffOutputDirectory> stack1 = new Stack<TiffOutputDirectory>();
      Long long0 = new Long(3);
      hashtable0.put("COMPRESSION", long0);
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      tiffImageWriterLossy0.writeImage(bufferedImage0, byteArrayOutputStream0, hashtable0);
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet(byteOrder0);
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No directories.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteOrder.nativeOrder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = AccessibleExtendedText.LINE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BufferedImage bufferedImage0 = new BufferedImage(4, 4, 4);
      byteArrayOutputStream0.flush();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      Stack<TiffOutputDirectory> stack0 = new Stack<TiffOutputDirectory>();
      ByteOrder.nativeOrder();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      Long long0 = new Long(4);
      Integer integer0 = new Integer(4);
      hashtable0.put("COMPRESSION", long0);
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(byteArrayOutputStream0, byteOrder1);
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy(byteOrder1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(binaryOutputStream0);
      tiffImageWriterLossy0.writeImage(bufferedImage0, mockPrintStream0, hashtable0);
      BinaryOutputStream binaryOutputStream1 = new BinaryOutputStream(mockPrintStream0);
      tiffImageWriterLossy0.writeImageFileHeader(binaryOutputStream0, (-1L));
      assertEquals(192, binaryOutputStream0.getByteCount());
      assertEquals(192, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = JViewport.BLIT_SCROLL_MODE;
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 4);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      Stack<TiffOutputDirectory> stack0 = new Stack<TiffOutputDirectory>();
      Hashtable<String, Object> hashtable1 = new Hashtable<String, Object>();
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      Long long0 = new Long(1);
      hashtable1.put("COMPRESSION", long0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)117;
      Hashtable<String, Object> hashtable2 = new Hashtable<String, Object>();
      Stack<TiffOutputDirectory> stack1 = new Stack<TiffOutputDirectory>();
      tiffImageWriterLossy0.writeImage(bufferedImage0, byteArrayOutputStream0, hashtable1);
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      try { 
        tiffImageWriterLossy0.validateDirectories(tiffOutputSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No directories.
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TiffImageWriterLossy tiffImageWriterLossy0 = new TiffImageWriterLossy();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      int int0 = ColorSpace.TYPE_3CLR;
      String string0 = ScrollPaneConstants.VERTICAL_SCROLLBAR;
      BufferedImage bufferedImage0 = new BufferedImage(13, 13, 4);
      byteArrayOutputStream0.flush();
      Stack<TiffOutputDirectory> stack0 = new Stack<TiffOutputDirectory>();
      BinaryOutputStream binaryOutputStream0 = new BinaryOutputStream(byteArrayOutputStream0);
      tiffImageWriterLossy0.writeImageFileHeader(binaryOutputStream0);
      ByteOrder.nativeOrder();
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      Long long0 = new Long(4);
      hashtable0.put("COMPRESSION", long0);
      ByteOrder.nativeOrder();
      TiffOutputSet tiffOutputSet0 = new TiffOutputSet();
      Stack<TiffOutputDirectory> stack1 = new Stack<TiffOutputDirectory>();
      tiffImageWriterLossy0.writeImage(bufferedImage0, byteArrayOutputStream0, hashtable0);
      // Undeclared exception!
      try { 
        tiffImageWriterLossy0.validateDirectories((TiffOutputSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.imaging.formats.tiff.write.TiffImageWriterBase", e);
      }
  }
}
