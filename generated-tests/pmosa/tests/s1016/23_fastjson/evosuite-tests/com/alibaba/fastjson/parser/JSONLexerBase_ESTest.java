/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 10:00:54 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.JSONLexerBase;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStreamReader;
import java.io.PushbackReader;
import java.io.StringReader;
import java.math.BigDecimal;
import java.nio.charset.Charset;
import java.time.ZoneId;
import java.time.chrono.ChronoLocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileReader;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONLexerBase_ESTest extends JSONLexerBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.isBlankInput();
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDate('u');
      jSONScanner0.putChar('/');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 610;
      JSONScanner jSONScanner0 = new JSONScanner("", 610);
      char[] charArray0 = new char[1];
      jSONScanner0.isBlankInput();
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.next();
      jSONScanner0.stringDefaultValue = "";
      assertEquals(0, jSONScanner0.matchStat());
      
      jSONScanner0.scanBoolean('\'');
      jSONScanner0.scanDecimal('\'');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      charArray0[1] = 'B';
      charArray0[2] = 'Z';
      charArray0[3] = 'E';
      charArray0[4] = '8';
      char char0 = '{';
      charArray0[5] = '{';
      charArray0[6] = 'V';
      int int0 = 809;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 809, 809);
      jSONReaderScanner0.scanDecimal('$');
      jSONReaderScanner0.charArrayCompare(charArray0);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.newCollectionByType(class0);
      int int1 = 0;
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      // Undeclared exception!
      try { 
        jSONScanner0.stringVal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1i");
      jSONScanner0.scanDecimal('=');
      jSONScanner0.scanIdent();
      jSONScanner0.getLocale();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 512;
      JSONScanner jSONScanner0 = new JSONScanner("5XY,*t", 56);
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = '#';
      charArray0[2] = 'V';
      charArray0[3] = '8';
      charArray0[4] = 'v';
      charArray0[5] = 'A';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.read();
      charArrayReader0.read();
      int int0 = (-1973);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, (-1973));
      jSONReaderScanner0.scanNumber();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - V, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 1275);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(1275);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - \u001A, info : pos 0, json : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.isRef();
      assertEquals((-1), jSONScanner0.matchStat);
      
      jSONScanner0.scanBoolean(':');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      char[] charArray0 = new char[6];
      int int0 = 1244;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1244);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      Class<MockThaiBuddhistDate> class0 = MockThaiBuddhistDate.class;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate cannot be cast to java.util.Collection
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uI{sWv#^0y/8?");
      jSONScanner0.scanString('X');
      jSONScanner0.stringVal();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldUUID(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=\"gI\"]bD/^03VmyL6");
      jSONScanner0.isEnabled((-1520), (-1520));
      Feature feature0 = Feature.OrderedField;
      jSONScanner0.config(feature0, false);
      jSONScanner0.stringVal();
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      jSONScanner0.scanFieldUUID(charArray0);
      charArray0[1] = '6';
      charArray0[2] = '\'';
      jSONScanner0.bp = (-1520);
      charArray0[3] = '!';
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.add("=\"gI\"]bD/^03VmyL6");
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) hashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 87);
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONScanner0.config(feature0, false);
      jSONScanner0.nextToken(87);
      assertEquals(23, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 52);
      jSONReaderScanner0.nextTokenWithChar('a');
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uI{Wv#^0y/8=");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldIntArray(charArray0);
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("WriteEnumUsingName", 15);
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = 'w';
      charArray0[2] = 'i';
      charArray0[3] = '7';
      charArray0[4] = 'v';
      charArray0[5] = 'e';
      charArray0[6] = 'f';
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-1292));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - W, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("A");
      Set<String> set0 = ZoneId.getAvailableZoneIds();
      jSONScanner0.scanStringArray(set0, '>');
      jSONScanner0.nextToken();
      jSONScanner0.scanBoolean('5');
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      assertEquals('x', char0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.setLocale((Locale) null);
      jSONScanner0.tokenName();
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[4];
      charArray0[0] = 'F';
      charArray0[1] = ' ';
      charArray0[2] = 'p';
      charArray0[3] = ']';
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.subString(59, 59);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("B", 54);
      jSONScanner0.longValue();
      jSONScanner0.setToken(54);
      assertEquals(54, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = 'F';
      charArray0[2] = 'w';
      charArray0[3] = '{';
      charArray0[4] = 'r';
      charArray0[5] = ';';
      charArray0[6] = 'J';
      StringReader stringReader0 = new StringReader("");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 31);
      jSONReaderScanner0.subString(31, 0);
      Class<Feature> class0 = Feature.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.close();
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("", 46);
      jSONScanner1.matchField2(charArray0);
      jSONScanner1.charAt(34);
      jSONScanner1.bytesValue();
      jSONScanner1.scanFieldBoolean(charArray0);
      assertEquals(46, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uI{Wv#^0y/8?");
      jSONScanner0.close();
      jSONScanner0.scanDecimal('N');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=\"gI\"]bD/^03VmyL6");
      jSONScanner0.isEnabled((-1515), (-1515));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal identifier : ", 63);
      char[] charArray0 = new char[2];
      jSONReaderScanner0.nextToken();
      charArray0[1] = 'J';
      charArray0[1] = 'y';
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals('l', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uI{Wv#^0y/8?", (-2778));
      jSONScanner0.scanStringArray((Collection<String>) null, '-');
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = '0';
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.setToken((-447));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 83);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt(45380);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 443);
      jSONReaderScanner0.scanFieldLong(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanUUID('$');
      jSONReaderScanner0.scanDate('U');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("j)NMdE8.~>Mpk)a37");
      jSONScanner0.eofPos = 0;
      char[] charArray0 = new char[6];
      charArray0[0] = ';';
      charArray0[1] = ']';
      charArray0[2] = '[';
      charArray0[3] = 'R';
      jSONScanner0.next();
      charArray0[4] = ']';
      charArray0[5] = '0';
      jSONScanner0.scanFieldBoolean(charArray0);
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      jSONScanner0.scanStringArray((Collection<String>) null, '=');
      jSONScanner0.scanFieldString(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2644, 0);
      jSONReaderScanner0.scanFieldIntArray(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.nextTokenWithColon((-2));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - ;, info : 
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 52);
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = 'F';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 45);
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("rm7eFEtRazd,_R*MUN");
      jSONScanner0.scanISO8601DateIfMatch();
      // Undeclared exception!
      try { 
        jSONScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanDecimal('R');
      jSONScanner0.stringDefaultValue = "";
      jSONScanner0.getFeatures();
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = 'b';
      charArray0[2] = '?';
      charArray0[3] = 'y';
      charArray0[4] = 'p';
      // Undeclared exception!
      try { 
        JSONScanner.charArrayCompare("M12F2=k!)YveO!", (-4592), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 93, 'x');
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g,&#!#ofpJY>");
      jSONScanner0.np = 65;
      jSONScanner0.scanBoolean('v');
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. g
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", (-868));
      char[] charArray0 = new char[7];
      charArray0[0] = 'q';
      charArray0[1] = 'U';
      charArray0[2] = '4';
      charArray0[3] = 'H';
      charArray0[4] = 'U';
      charArray0[5] = '$';
      charArray0[6] = '[';
      jSONScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanBoolean('{');
      char[] charArray1 = new char[2];
      charArray1[0] = 'H';
      charArray1[1] = '{';
      jSONScanner0.scanFieldSymbol(charArray1);
      int int0 = jSONScanner0.pos();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("iw");
      assertEquals(0, jSONScanner0.matchStat);
      
      Class<Feature> class0 = Feature.class;
      SymbolTable symbolTable0 = new SymbolTable(31);
      jSONScanner0.scanEnum(class0, symbolTable0, 'x');
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONScanner0.config(feature0, true);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1284);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("{");
      jSONScanner0.nextToken(23);
      jSONScanner0.skipWhitespace();
      SymbolTable symbolTable0 = new SymbolTable(34);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, '%');
      assertEquals(12, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("*EE3C]^g");
      char[] charArray0 = new char[9];
      jSONReaderScanner0.scanFieldFloat(charArray0);
      charArray0[0] = 'Z';
      charArray0[1] = 'e';
      char char0 = 'g';
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      jSONReaderScanner0.scanEnum(class0, (SymbolTable) null, '|');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanTrue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uI{Wv#^0y/8?", (-2778));
      jSONScanner0.scanBoolean('{');
      boolean boolean0 = jSONScanner0.isEnabled((-2778));
      assertEquals((-2778), jSONScanner0.getFeatures());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", info : ");
      jSONScanner0.isRef();
      jSONScanner0.nextToken((-1240));
      assertEquals(16, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 2422, 2422);
      jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      charArray0[1] = '0';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 52);
      jSONReaderScanner0.nextTokenWithChar('a');
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
      
      JSONScanner jSONScanner0 = new JSONScanner("f", 6);
      int int0 = jSONScanner0.getFeatures();
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.stringDefaultValue = "";
      char[] charArray0 = new char[6];
      charArray0[0] = '0';
      charArray0[1] = '0';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Locale locale0 = Locale.TAIWAN;
      jSONScanner0.setLocale(locale0);
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0);
      jSONScanner1.scanBoolean('~');
      assertEquals(989, jSONScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONScanner jSONScanner0 = new JSONScanner("");
      JSONScanner jSONScanner1 = new JSONScanner("x!$0T:86{PUU]", 0);
      jSONScanner0.tokenName();
      jSONScanner0.scanBoolean('{');
      // Undeclared exception!
      try { 
        jSONScanner1.scanFieldString((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("B", 54);
      jSONScanner0.hasSpecial = true;
      jSONScanner0.longValue();
      jSONScanner0.setToken(54);
      int int0 = jSONScanner0.scanType("B");
      assertEquals(54, jSONScanner0.token());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'g';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 43, 78);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      double double0 = jSONReaderScanner0.scanFieldDouble(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g,&#!#ofpJY>");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g,&#!#ofpJY>");
      jSONScanner0.nextIdent();
      int int0 = jSONScanner0.getFeatures();
      assertEquals(18, jSONScanner0.token());
      assertEquals(989, int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      char[] charArray0 = new char[7];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[0] = 'a';
      charArray0[1] = 'B';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 52);
      jSONReaderScanner0.nextTokenWithChar('a');
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.nextIdent();
      assertTrue(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uI{Wv#^0y/8?");
      jSONScanner0.tokenName();
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanBoolean(':');
      int int0 = jSONScanner0.token();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("E{.vzbap6JklmD");
      jSONScanner0.intValue();
      jSONScanner0.bp = 123;
      jSONScanner0.getFeatures();
      jSONScanner0.nextToken(989);
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("com.alibaba.fastjson.JSONArray", 438);
      Feature feature0 = Feature.AllowArbitraryCommas;
      jSONScanner0.isEnabled(feature0);
      jSONScanner0.intValue();
      jSONScanner0.stringVal();
      SymbolTable symbolTable0 = new SymbolTable(15);
      char[] charArray0 = new char[5];
      charArray0[0] = 'r';
      charArray0[1] = 'H';
      charArray0[2] = 'W';
      charArray0[3] = 'd';
      charArray0[4] = '6';
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, 438, 0, 87);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanBoolean('`');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 87);
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextToken(87);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("g,&#!#ofpJY>");
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[7];
      charArray0[0] = '%';
      charArray0[1] = '^';
      charArray0[2] = 'n';
      charArray0[3] = 'g';
      jSONScanner0.scanDouble('j');
      charArray0[4] = '\'';
      charArray0[5] = 'H';
      charArray0[6] = 'Y';
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.scanType("g}H[r<");
      jSONScanner0.skipWhitespace();
      float float0 = jSONScanner0.scanFieldFloat(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uI{Wv#^0y/8?");
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, '(');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("*/vV");
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, 'S');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uI{Wv#^0y/8?");
      jSONScanner0.scanBoolean(':');
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JSONScanner jSONScanner0 = new JSONScanner("");
      jSONScanner0.scanString();
      char char0 = 'I';
      jSONScanner0.scanBoolean(char0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      jSONScanner0.putChar('w');
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.scanBoolean('&');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uI{Wv#^0y/8?");
      jSONScanner0.scanNumber();
      jSONScanner0.scanBoolean('0');
      assertEquals(2, jSONScanner0.token());
      
      boolean boolean0 = JSONLexerBase.isWhitespace(' ');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uI{Wv#^0y/8?");
      jSONScanner0.scanUUID('=');
      boolean boolean0 = jSONScanner0.scanBoolean(':');
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = ':';
      charArray0[2] = ':';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = ':';
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      jSONScanner0.scanFieldStringArray(charArray0, class0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("", 1275);
      jSONScanner0.resetStringPosition();
      jSONScanner0.scanBoolean('\\');
      boolean boolean0 = jSONScanner0.isBlankInput();
      assertEquals(20, jSONScanner0.token());
      
      boolean boolean1 = JSONScanner.checkDate('\\', 'h', 'h', 'm', 'h', '\"', (-214748364), (-214748364));
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '&';
      charArray0[1] = 'j';
      charArray0[2] = 'y';
      charArray0[3] = '^';
      charArray0[4] = 'o';
      charArray0[5] = 'r';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 544, 544);
      jSONReaderScanner0.scanDate('j');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g,&#!#ofpJY>");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.getFeatures();
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals((-1), jSONScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g,&#!#ofpJY>");
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = '`';
      charArray0[2] = '+';
      charArray0[3] = '~';
      charArray0[4] = '\\';
      charArray0[5] = ']';
      charArray0[6] = 'L';
      charArray0[7] = '2';
      charArray0[8] = 'B';
      jSONScanner0.matchField(charArray0);
      jSONScanner0.getFeatures();
      assertEquals(0, jSONScanner0.matchStat);
      
      boolean boolean0 = jSONScanner0.scanBoolean('2');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g,&#!#ofpJY>");
      char[] charArray0 = new char[9];
      jSONScanner0.scanFieldDecimal(charArray0);
      boolean boolean0 = jSONScanner0.matchField(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g,&#!#ofpJY>");
      jSONScanner0.nextToken(17);
      SymbolTable symbolTable0 = new SymbolTable(17);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : ,pos 0, json : g,&#!#ofpJY>
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("undefined");
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = 'L';
      charArray0[2] = '$';
      charArray0[3] = ',';
      charArray0[4] = 'i';
      charArray0[5] = 'b';
      charArray0[6] = 'H';
      jSONScanner0.scanFieldLong(charArray0);
      jSONScanner0.scanBoolean('[');
      jSONScanner0.scanSymbol((SymbolTable) null);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2+D[o");
      SymbolTable symbolTable0 = new SymbolTable(27);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : 2
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3!W(fPoj");
      jSONScanner0.scanNumber();
      jSONScanner0.nextToken(77);
      SymbolTable symbolTable0 = new SymbolTable(1580);
      jSONScanner0.scanSymbol(symbolTable0);
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("java.time.LocalTime");
      jSONScanner0.scanBoolean('Q');
      jSONScanner0.getFeatures();
      jSONScanner0.getLocale();
      jSONScanner0.getCurrent();
      // Undeclared exception!
      try { 
        jSONScanner0.scanFieldInt((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g,&#!#ofpJY>");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanString('G');
      JSONScanner jSONScanner1 = new JSONScanner("g,&#!#ofpJY>");
      int int0 = jSONScanner0.getFeatures();
      assertEquals(989, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("A");
      jSONScanner0.nextToken(2426);
      SymbolTable symbolTable0 = new SymbolTable(188);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : \u001Apos 0, json : A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = 'H';
      charArray0[2] = 'a';
      charArray0[3] = '1';
      charArray0[4] = 'B';
      charArray0[5] = 'f';
      charArray0[6] = '}';
      charArray0[7] = '|';
      charArray0[8] = '>';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1704);
      long long0 = jSONReaderScanner0.scanLong('+');
      assertEquals(0L, long0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("]", (-2636));
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      long long0 = jSONReaderScanner0.scanLong('%');
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uI{Wv#^0y/8?");
      jSONScanner0.scanBoolean('d');
      jSONScanner0.nextToken((-1));
      char[] charArray0 = new char[4];
      charArray0[0] = 'd';
      charArray0[1] = '\\';
      charArray0[2] = 'd';
      charArray0[3] = 'd';
      jSONScanner0.scanFieldStringArray(charArray0, 26, (SymbolTable) null);
      jSONScanner0.nextIdent();
      assertEquals('W', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g,&#!#ofpJY>");
      boolean boolean0 = jSONScanner0.isBlankInput();
      boolean boolean1 = jSONScanner0.scanBoolean('@');
      assertEquals(989, jSONScanner0.getFeatures());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      SymbolTable symbolTable0 = new SymbolTable(110);
      jSONScanner0.scanEnum(class0, symbolTable0, 'L');
      jSONScanner0.nextToken(19);
      jSONScanner0.nextToken(512);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g,&#!#ofpJY>");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanString('X');
      jSONScanner0.stringVal();
      jSONScanner0.getCalendar();
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1i");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      int int0 = jSONScanner0.getFeatures();
      assertEquals((-1), jSONScanner0.matchStat);
      assertEquals(989, int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      char[] charArray0 = new char[5];
      char char0 = '-';
      charArray0[0] = '-';
      char char1 = '0';
      charArray0[1] = '0';
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      charArray0[2] = '9';
      char char2 = 'C';
      charArray0[3] = 'C';
      charArray0[4] = 'Z';
      int int0 = 84;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 84, 84);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.intValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g,&#!#ofpJY>");
      SymbolTable symbolTable0 = new SymbolTable(12);
      jSONScanner0.scanSymbol(symbolTable0);
      jSONScanner0.scanString('X');
      jSONScanner0.stringVal();
      SymbolTable symbolTable1 = null;
      try {
        symbolTable1 = new SymbolTable((-1668));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Y^Sfz5o", 6);
      char[] charArray0 = new char[7];
      Locale locale0 = Locale.KOREA;
      jSONReaderScanner0.setLocale(locale0);
      charArray0[0] = 'S';
      charArray0[1] = 'L';
      charArray0[2] = '~';
      charArray0[3] = 'L';
      jSONReaderScanner0.scanFloat('L');
      charArray0[4] = 'a';
      charArray0[5] = '.';
      charArray0[6] = 'C';
      jSONReaderScanner0.scanString('C');
      jSONReaderScanner0.scanFieldFloatArray2(charArray0);
      jSONReaderScanner0.getFeatures();
      jSONReaderScanner0.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      char[] charArray0 = new char[1];
      jSONScanner0.scanFloat('P');
      jSONScanner0.scanFieldDecimal(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'F';
      charArray0[1] = '7';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1284);
      jSONReaderScanner0.scanFieldFloat(charArray0);
      int int0 = jSONReaderScanner0.matchStat();
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("unclosed str");
      char[] charArray0 = new char[1];
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.charAt('\u0000');
      assertEquals((-2), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("d[IQ[r=");
      // Undeclared exception!
      try { 
        jSONScanner0.skipComment();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // invalid comment
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g,2#!#ofiJY>");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.nextToken(6);
      assertEquals(',', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 76;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner0 = new JSONScanner("float", 76);
      jSONScanner0.scanBoolean('?');
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. f
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3<;TDj=+");
      char[] charArray0 = new char[5];
      charArray0[0] = ']';
      charArray0[1] = '9';
      charArray0[2] = '8';
      charArray0[3] = 'B';
      char char0 = 'f';
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.scanString('T');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanDecimal('>');
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("tI{sWv#^0y/8?");
      JSONScanner jSONScanner1 = new JSONScanner("dalvik", 0);
      jSONScanner0.skipWhitespace();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken((-2484));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("R=KH3", 9984);
      jSONScanner0.info();
      jSONScanner0.isEnabled(9984, 0);
      jSONScanner0.charAt(9984);
      // Undeclared exception!
      try { 
        jSONScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g,&#!#ofpJY>");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.nextToken(11);
      assertEquals(',', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uI{Wv#^0y/8?");
      jSONScanner0.getFeatures();
      jSONScanner0.nextToken(3);
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(" ");
      jSONScanner0.intValue();
      jSONScanner0.nextToken((-1825));
      jSONScanner0.scanLong('*');
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.nextToken(1);
      // Undeclared exception!
      try { 
        JSONLexerBase.readString((char[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false", 75);
      jSONScanner0.nextToken(18);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      Locale locale0 = Locale.TAIWAN;
      jSONScanner0.setLocale(locale0);
      jSONScanner0.scanFieldFloatArray2(charArray0);
      char[] charArray1 = new char[2];
      charArray1[0] = 'W';
      charArray1[1] = 'C';
      jSONScanner0.scanFieldUUID(charArray1);
      assertEquals((-2), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g,&#!#ofpJY>");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.sp = 88;
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray1);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. g
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1i");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      jSONScanner0.nextToken((-929));
      jSONScanner0.getTimeZone();
      assertEquals('i', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. n
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '}';
      charArray0[1] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 14);
      jSONReaderScanner0.nextIdent();
      assertEquals('W', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uI{Wv#^0y/8?");
      JSONScanner jSONScanner1 = new JSONScanner("uI{Wv#^0y/8?", 0);
      jSONScanner0.nextToken(14);
      assertEquals('{', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.nextToken(7);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g,&#!#ofpJY>");
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        JSONLexerBase.readString(charArray0, 3840);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uI{Wv#^0y/8?");
      String string0 = JSONLexerBase.readString((char[]) null, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uI{Wv#^0y/8?");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      Locale locale0 = Locale.TAIWAN;
      jSONScanner0.setLocale(locale0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      jSONScanner0.scanFieldFloat(charArray0);
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(yF,A\"");
      jSONScanner0.nextToken(0);
      assertEquals('y', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)120;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)66, (byte)120);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(bufferedInputStream0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(inputStreamReader0, 40);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanFloat('p');
      jSONReaderScanner0.info();
      assertEquals(40, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      char[] charArray0 = new char[5];
      charArray0[0] = 'Q';
      charArray0[1] = 'n';
      charArray0[2] = 'N';
      charArray0[3] = 'u';
      charArray0[4] = 'z';
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.nextToken(11);
      jSONScanner0.resetStringPosition();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = '#';
      charArray0[2] = 'M';
      charArray0[3] = 'W';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 271, 43);
      long long0 = jSONReaderScanner0.scanFieldSymbol(charArray0);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("wH|R=44uTl");
      jSONScanner0.nextToken(9);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner((char[]) null, 1292, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanDecimal('=');
      jSONScanner0.scanIdent();
      jSONScanner0.getLocale();
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'v2uNhab-^e6s6!");
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      JSONScanner jSONScanner1 = new JSONScanner(charArray0, 0, 1389);
      jSONScanner1.scanFieldFloatArray(charArray0);
      Locale locale0 = Locale.TAIWAN;
      jSONScanner1.setLocale(locale0);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(4599);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("'v2uNhab-^e6s6!");
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".CR}_&S9KNWG.", 87);
      jSONScanner0.skipWhitespace();
      jSONScanner0.nextToken(87);
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue(true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "[i";
      JSONScanner jSONScanner0 = new JSONScanner("[i");
      int int0 = (-2);
      jSONScanner0.nextToken((-2));
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanFloat('P');
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.isRef();
      jSONScanner0.getLocale();
      jSONScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanFloat('n');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - n, info : pos 0, json : new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("u8bS", 6);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDate('0');
      assertEquals(6, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[14];
      charArray0[0] = '_';
      charArray0[1] = '?';
      charArray0[2] = '_';
      JSONScanner jSONScanner0 = new JSONScanner("U;Z4:G8CEO@3P9", 1459);
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken(11);
      assertEquals(24, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.isRef();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      char char0 = '}';
      jSONScanner0.scanStringArray(set0, '}');
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(58);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - n, info : pos 0, json : null
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      JSONScanner jSONScanner0 = new JSONScanner("unh6fkrbbrt42");
      jSONScanner0.isRef();
      jSONScanner0.nextToken(10);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uI{Wv#^0y/8=");
      JSONScanner jSONScanner1 = new JSONScanner("uI{Wv#^0y/8=", 0);
      jSONScanner1.skipWhitespace();
      jSONScanner1.nextToken(0);
      // Undeclared exception!
      try { 
        jSONScanner1.decimalValue(false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1i");
      jSONScanner0.scanDecimal('=');
      jSONScanner0.nextToken(51);
      jSONScanner0.decimalValue(true);
      assertEquals(2, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "d@65";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("d@65");
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray0);
      char[] charArray1 = new char[5];
      charArray1[0] = '@';
      charArray1[1] = '|';
      charArray1[2] = 'T';
      charArray1[3] = ',';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray1[4] = 'j';
      // Undeclared exception!
      try { 
        jSONReaderScanner0.matchField2(charArray1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set", (-392));
      JSONScanner jSONScanner1 = new JSONScanner("null", (-392));
      char[] charArray0 = new char[0];
      jSONScanner1.scanFieldDouble(charArray0);
      jSONScanner0.setToken((-1));
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(110);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - S, info : pos 0, json : Set
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ncull");
      jSONScanner0.scanString('x');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set", (-392));
      JSONScanner jSONScanner1 = new JSONScanner("U");
      char[] charArray0 = new char[1];
      charArray0[0] = 'h';
      jSONScanner1.scanFieldDecimal(charArray0);
      jSONScanner0.nextToken((-1778));
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1012, "U");
      JSONScanner jSONScanner2 = new JSONScanner("&u+lJ_<k_K;R-J`", (-2));
      jSONScanner2.setTimeZone(simpleTimeZone0);
      JSONScanner jSONScanner3 = new JSONScanner("uhv");
      // Undeclared exception!
      try { 
        jSONScanner1.nextTokenWithColon((-3969));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - U, info : pos 0, json : U
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 42, 42);
      jSONReaderScanner0.scanFieldLong(charArray0);
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      JSONScanner jSONScanner0 = new JSONScanner("trim", 42);
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(789);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^THS&^W)OB5+V~@");
      JSONScanner jSONScanner0 = new JSONScanner("1i");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.nextToken(0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^THS&^W)OB5+V~@");
      JSONScanner jSONScanner0 = new JSONScanner("1i");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("true");
      jSONReaderScanner0.nextToken(0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.floatValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uI{Wv#^0y/8=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "uI{Wv#^0y/8=");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldIntArray(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.util.UTF8Decoder");
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      jSONReaderScanner0.nextToken(14);
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2R{ hV+3)F`gSq");
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanDouble('+');
      jSONReaderScanner0.scanDate('[');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uI{Wv#^0y/8=");
      jSONScanner0.scanString('g');
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.setToken(2078);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 103);
      jSONReaderScanner0.scanDouble('O');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      assertEquals(0, jSONScanner0.matchStat);
      
      jSONScanner0.scanDecimal('=');
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = '=';
      charArray0[6] = '=';
      charArray0[7] = '=';
      charArray0[8] = '=';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 4102);
      jSONReaderScanner0.scanUUID('=');
      jSONReaderScanner0.scanDate('=');
      jSONScanner0.scanUUID('=');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("not", (-1121));
      String string0 = jSONScanner0.scanString('$');
      assertNull(string0);
      
      jSONScanner0.putChar('$');
      Number number0 = jSONScanner0.integerValue();
      assertEquals(62, number0);
      assertEquals((-1121), jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanString('x');
      JSONScanner jSONScanner1 = new JSONScanner("null", (-392));
      long long0 = jSONScanner1.longValue();
      assertEquals(0L, long0);
      
      jSONScanner1.isRef();
      jSONScanner0.scanUUID('x');
      assertEquals(989, jSONScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      SymbolTable symbolTable0 = new SymbolTable(40);
      jSONScanner0.scanSymbol(symbolTable0);
      char[] charArray0 = new char[5];
      jSONScanner0.scanUUID('Q');
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(t-?AUG&nox!\"<Rd'#`");
      jSONScanner0.close();
      jSONScanner0.nextToken(12);
      assertEquals('t', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")%OX#}zz >|,WX ");
      jSONScanner0.isRef();
      jSONScanner0.getLocale();
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = '>';
      charArray0[5] = 'u';
      jSONScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 42, 42);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
      
      jSONReaderScanner0.charAt(0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      jSONReaderScanner0.sub_chars(1, 12);
      jSONReaderScanner0.scanUUID('a');
      jSONReaderScanner0.scanDate('$');
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.scanLong('\\');
      assertEquals(42, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      jSONScanner0.nextIdent();
      jSONScanner0.longValue();
      char[] charArray0 = new char[1];
      charArray0[0] = '`';
      jSONScanner0.nextToken(3558);
      assertEquals(20, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = '_';
      charArray0[2] = '\\';
      charArray0[3] = 'F';
      charArray0[4] = '+';
      charArray0[5] = '&';
      charArray0[6] = 'U';
      JSONScanner.charArrayCompare("iqSw", 4, charArray0);
      int int0 = 21;
      JSONScanner jSONScanner0 = new JSONScanner("-9ndm", 21);
      jSONScanner0.scanIdent();
      jSONScanner0.longValue();
      // Undeclared exception!
      try { 
        jSONScanner0.sub_chars(21, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[1] = ']';
      charArray0[2] = 'I';
      charArray0[3] = 'd';
      charArray0[4] = 'R';
      charArray0[5] = '=';
      charArray0[6] = '<';
      charArray0[7] = ')';
      charArray0[8] = 'm';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 69);
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.charAt(69);
      boolean boolean0 = jSONReaderScanner0.isEnabled(0, 69);
      assertEquals((-1), jSONReaderScanner0.matchStat);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("v0w");
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = ',';
      charArray0[2] = '[';
      charArray0[3] = '2';
      charArray0[4] = '}';
      charArray0[5] = 'r';
      charArray0[6] = 'K';
      JSONScanner jSONScanner1 = new JSONScanner("v0w", '}');
      jSONScanner1.nextToken(8);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-7145));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONScanner jSONScanner0 = new JSONScanner("*CNyEfX4");
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[2] = '0';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONScanner jSONScanner1 = new JSONScanner("uIv", (-2431));
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken(20);
      assertEquals('N', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("~%B+D");
      jSONScanner0.scanNumber();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray2(charArray0);
      jSONScanner0.nextToken(20);
      assertEquals('%', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")%OX#}zz >|,WX ");
      char char0 = '>';
      jSONScanner0.nextToken(12);
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. %
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("ki", 51);
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.setToken(2078);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 51);
      jSONReaderScanner0.scanDouble('d');
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONScanner jSONScanner0 = new JSONScanner("'v2uNhab-^e6s6!");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONReaderScanner0.matchField(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uI");
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONScanner0.close();
      jSONScanner0.nextToken((-1));
      assertEquals(18, jSONScanner0.token());
      
      int int0 = jSONReaderScanner0.intValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONScanner jSONScanner0 = new JSONScanner("'v2uNhab-^e6s6!");
      jSONScanner0.scanDouble('0');
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed single-quote string
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      jSONScanner0.scanDecimal('=');
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[4] = '=';
      charArray0[5] = '=';
      charArray0[8] = '=';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 4102);
      jSONReaderScanner0.scanFloat('=');
      jSONReaderScanner0.scanUUID('=');
      jSONReaderScanner0.scanDate('\u0000');
      assertEquals(4102, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[2] = '/';
      charArray0[2] = '/';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("not match ");
      jSONReaderScanner0.scanDouble('\u0000');
      jSONReaderScanner0.scanFieldUUID(charArray0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      jSONReaderScanner0.scanLong('v');
      jSONReaderScanner0.scanDate('/');
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = '_';
      charArray0[2] = '\\';
      charArray0[3] = 'F';
      JSONScanner jSONScanner0 = new JSONScanner("U;Z4:G8CEO@3P9");
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken(4);
      assertEquals('Z', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[7];
      JSONScanner jSONScanner0 = new JSONScanner("3!W(fPoj");
      jSONScanner0.scanNumber();
      jSONScanner0.nextToken(4);
      jSONScanner0.getCalendar();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("hWf.oc");
      jSONScanner0.scanNumber();
      jSONScanner0.nextToken(4);
      jSONScanner0.getCalendar();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONScanner jSONScanner0 = new JSONScanner("*CNyEfX4");
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      charArray0[2] = '0';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1187);
      jSONReaderScanner0.scanDate('0');
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "Set";
      objectArray0[2] = (Object) "*CNyEfX4";
      objectArray0[3] = (Object) charArray0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) jSONReaderScanner0;
      objectArray0[6] = (Object) jSONScanner0;
      jSONReaderScanner0.lexError("iu*OmO", objectArray0);
      jSONReaderScanner0.charArrayCompare(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      JSONScanner jSONScanner1 = new JSONScanner("TdQEE,)u~ E*h:G");
      jSONScanner1.scanDouble('u');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      long long0 = jSONScanner1.longValue();
      assertEquals(0L, long0);
      
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldDouble(charArray0);
      JSONScanner jSONScanner2 = new JSONScanner("new", (-672));
      jSONScanner2.scanUUID(',');
      assertEquals((-672), jSONScanner2.getFeatures());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanBoolean('>');
      char[] charArray1 = new char[0];
      jSONScanner0.scanFieldUUID(charArray1);
      Class<Feature> class0 = Feature.class;
      // Undeclared exception!
      try { 
        jSONScanner0.newCollectionByType(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // com.alibaba.fastjson.parser.Feature
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      Locale locale0 = Locale.TAIWAN;
      jSONScanner0.setLocale(locale0);
      jSONScanner0.scanFieldFloatArray2(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("false", (-2));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2R{ hV+3)F`gSq");
      jSONReaderScanner0.scanDouble('d');
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(bufferedReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("6 s", (-2565));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      char char0 = ']';
      jSONReaderScanner0.scanStringArray(set0, ']');
      jSONReaderScanner0.scanType("yQ,,s)^x8F`_FE");
      jSONReaderScanner0.scanDouble('H');
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.scanUUID('d');
      char[] charArray0 = new char[4];
      charArray0[0] = 'H';
      charArray0[1] = '?';
      charArray0[2] = 'd';
      charArray0[3] = ']';
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray0, (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unh6fkrbbrt42");
      jSONScanner0.scanDecimal('(');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 0);
      jSONReaderScanner0.scanFloat('(');
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = '(';
      charArray0[4] = '(';
      charArray0[5] = '(';
      charArray0[6] = '(';
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-352));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unh6fkrbbrt42");
      jSONScanner0.scanDecimal('(');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", 0);
      jSONReaderScanner0.scanFloat('(');
      char[] charArray0 = new char[7];
      charArray0[0] = '(';
      charArray0[2] = '(';
      charArray0[3] = '(';
      charArray0[4] = '(';
      charArray0[5] = '(';
      charArray0[6] = '(';
      JSONReaderScanner jSONReaderScanner1 = null;
      try {
        jSONReaderScanner1 = new JSONReaderScanner(charArray0, (-352));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      JSONScanner jSONScanner1 = new JSONScanner("new", 0);
      jSONScanner0.scanString('=');
      JSONScanner jSONScanner2 = new JSONScanner("Y^`_ ", 1879);
      jSONScanner0.nextToken(642);
      assertEquals((-1), jSONScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = 4;
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = '_';
      charArray0[2] = '\\';
      charArray0[3] = 'F';
      charArray0[4] = '+';
      charArray0[5] = '&';
      charArray0[6] = 'U';
      JSONScanner.charArrayCompare("iqSw", 4, charArray0);
      int int1 = 21;
      JSONScanner jSONScanner0 = new JSONScanner("-9ndm", 21);
      // Undeclared exception!
      try { 
        jSONScanner0.longValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = '#';
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^");
      JSONScanner jSONScanner0 = new JSONScanner("^");
      jSONScanner0.setToken((-2407));
      jSONScanner0.putChar('X');
      jSONScanner0.scanFieldDecimal(charArray0);
      jSONScanner0.putChar('#');
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1i");
      jSONScanner0.scanDecimal('=');
      jSONScanner0.scanIdent();
      jSONScanner0.integerValue();
      assertEquals(18, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      JSONScanner jSONScanner0 = new JSONScanner("1i");
      jSONScanner0.scanFloat('[');
      // Undeclared exception!
      try { 
        jSONScanner0.decimalValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      char[] charArray0 = new char[6];
      JSONScanner jSONScanner0 = new JSONScanner("2M2A#Z$@I,o:");
      jSONScanner0.scanDecimal('e');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("2M2A#Z$@I,o:");
      jSONReaderScanner0.scanFloat('@');
      jSONReaderScanner0.scanUUID('d');
      JSONScanner jSONScanner1 = new JSONScanner("uIv", (-1));
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken((-1));
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("unclosed jsonArray");
      jSONScanner0.scanNumber();
      jSONScanner0.scanType("ZF~Nz>]B");
      jSONScanner0.nextToken(13);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-858));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(":hzj1S`9r#G~g0tqKQ", (-697));
      jSONScanner0.scanString('x');
      JSONScanner jSONScanner1 = new JSONScanner(":hzj1S`9r#G~g0tqKQ", (-1));
      jSONScanner0.nextToken((-1397));
      assertEquals('h', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(".CR}_&S9KNWG.", 87);
      jSONScanner0.skipWhitespace();
      char[] charArray0 = new char[9];
      charArray0[0] = 'H';
      jSONScanner0.scanNumber();
      jSONScanner0.nextToken(87);
      jSONScanner0.getCalendar();
      assertEquals('R', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set", (-392));
      jSONScanner0.scanString('x');
      JSONScanner jSONScanner1 = new JSONScanner("null", (-392));
      char[] charArray0 = new char[0];
      jSONScanner1.scanFieldDouble(charArray0);
      jSONScanner0.setToken((-1));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null", (-392));
      jSONReaderScanner0.scanUUID('x');
      jSONScanner1.scanFieldDecimal(charArray0);
      jSONScanner0.putChar('x');
      // Undeclared exception!
      try { 
        jSONScanner1.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set", (-392));
      jSONScanner0.scanString('x');
      JSONScanner jSONScanner1 = new JSONScanner("null", (-392));
      char[] charArray0 = new char[0];
      jSONScanner1.scanFieldDouble(charArray0);
      jSONScanner0.setToken((-1));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("7-k-!B[E");
      jSONReaderScanner0.scanUUID('x');
      jSONScanner1.scanFieldDecimal(charArray0);
      jSONScanner0.putChar('x');
      jSONScanner0.integerValue();
      assertEquals((-1), jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      JSONScanner jSONScanner0 = new JSONScanner("3!W(fPoj");
      jSONScanner0.scanNumber();
      jSONScanner0.nextToken(4);
      jSONScanner0.getCalendar();
      assertEquals(1, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("x");
      jSONScanner0.close();
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken(11);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=/\fv8>mI&F`");
      jSONScanner0.isRef();
      jSONScanner0.resetStringPosition();
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "new");
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("W'uE/?:yG4#]\rIn1");
      jSONReaderScanner0.scanStringArray(set0, ']');
      jSONReaderScanner0.scanType("new");
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = ']';
      charArray0[3] = ']';
      charArray0[4] = ']';
      charArray0[5] = ']';
      charArray0[6] = ']';
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      Locale locale0 = Locale.TAIWAN;
      jSONScanner0.scanFieldDate(charArray0);
      jSONScanner0.nextToken();
      SymbolTable symbolTable0 = new SymbolTable(388);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, '>');
      jSONScanner0.isEOF();
      jSONScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanFieldBigInteger(charArray0);
      assertEquals(7, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 93, 'x');
      JSONScanner jSONScanner0 = new JSONScanner("1I", 0);
      jSONScanner0.scanString(';');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jSONScanner0.scanIdent();
      jSONScanner0.putChar(';');
      // Undeclared exception!
      try { 
        jSONScanner0.integerValue();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("iGh3U/b5", 3100);
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = 'L';
      charArray0[2] = '/';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("nSE4[D", 108);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("iGh3U/b5");
      jSONReaderScanner0.scanDouble('5');
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0);
      jSONReaderScanner1.scanDate('/');
      assertEquals(989, jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("(t-?AUG&nox!\"<Rd'#`");
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner1 = new JSONScanner("(t-?AUG&nox!\"<Rd'#`");
      jSONScanner0.scanString('Z');
      JSONScanner jSONScanner2 = new JSONScanner("}6", 0);
      jSONScanner2.scanFieldDouble(charArray0);
      jSONScanner0.setToken(40);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("A:B9+xOwTXf7HUh'", (-1));
      jSONReaderScanner0.scanUUID('$');
      jSONScanner1.scanFieldDecimal(charArray0);
      jSONScanner0.putChar('$');
      jSONScanner0.integerValue();
      assertEquals(40, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#yjVY>IhA=N/y-GAf5z");
      jSONScanner0.scanNumber();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#yjVY>IhA=N/y-GAf5z", 0);
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      assertEquals((-2), jSONScanner0.matchStat);
      
      JSONScanner jSONScanner1 = new JSONScanner("#yjVY>IhA=N/y-GAf5z", 36);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("not match ");
      jSONReaderScanner1.scanDouble('/');
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner(bufferedReader0);
      jSONReaderScanner2.scanDate(' ');
      assertEquals(989, jSONReaderScanner2.getFeatures());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("new");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "new");
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new");
      jSONReaderScanner0.scanStringArray(set0, ']');
      char[] charArray0 = new char[7];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = ']';
      charArray0[3] = ']';
      jSONReaderScanner0.scanFieldBigInteger(charArray0);
      charArray0[4] = ']';
      charArray0[5] = ']';
      charArray0[6] = ']';
      jSONScanner0.scanFieldDouble(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      charArray0[5] = '=';
      charArray0[8] = '=';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 4102);
      jSONReaderScanner0.scanFloat('=');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "new";
      objectArray0[1] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("iqSw", objectArray0);
      jSONReaderScanner0.scanUUID('=');
      jSONReaderScanner0.scanDate('\u0000');
      jSONReaderScanner0.charAt(4102);
      long long0 = jSONReaderScanner0.scanLong('\u0000');
      assertEquals(1, jSONReaderScanner0.token());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.scanDecimal('K');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanFloat('e');
      jSONReaderScanner0.scanUUID('d');
      JSONScanner jSONScanner1 = new JSONScanner("oracle.sql.TIMESTAMP", 629);
      jSONScanner0.nextIdent();
      jSONScanner0.nextToken(0);
      assertEquals('\u001A', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.isRef();
      jSONScanner0.nextToken(0);
      assertEquals(0, jSONScanner0.pos());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = 'z';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanDecimal('A');
      assertEquals(989, jSONReaderScanner0.getFeatures());
      assertFalse(jSONReaderScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("'p?64VfMw");
      SymbolTable symbolTable0 = new SymbolTable(3);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=/\fv8>mI&F`");
      jSONScanner0.skipComment();
      // Undeclared exception!
      try { 
        jSONScanner0.scanHex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal state. \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3!W(fPoj");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3!W(fPoj", 4616);
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("3!W(fPoj", objectArray0);
      jSONReaderScanner0.scanUUID('&');
      jSONScanner0.scanDecimal(')');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("G~Jf?B");
      jSONReaderScanner1.scanDate('&');
      jSONReaderScanner1.charAt(125);
      jSONScanner0.nextToken(48);
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = ')';
      charArray0[4] = '&';
      charArray0[5] = '&';
      charArray0[6] = 's';
      jSONScanner0.scanFieldDate(charArray0);
      assertEquals('!', jSONScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.isRef();
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0, 125);
      JSONScanner jSONScanner1 = new JSONScanner("zb@^^%Gw8v#", 110);
      jSONScanner0.scanNumber();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)58;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jSONScanner0.calendar = (Calendar) mockGregorianCalendar0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jSONScanner0.scanFieldSymbol(charArray0);
      jSONReaderScanner0.copyTo(110, 0, charArray0);
      jSONReaderScanner0.scanDouble('k');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0);
      jSONReaderScanner1.nextToken(1389);
      jSONScanner1.nextToken(5);
      assertEquals('b', jSONScanner1.getCurrent());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("fal!se");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
      jSONScanner0.scanBoolean('>');
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 13);
      long long0 = JSONLexerBase.MULTMIN_RADIX_TEN;
      Class<Object> class0 = Object.class;
      jSONReaderScanner0.scanFieldStringArray(charArray0, class0);
      jSONReaderScanner0.scanFieldLong(charArray0);
      char char0 = Locale.PRIVATE_USE_EXTENSION;
      jSONReaderScanner0.subString(3423, 723);
      jSONReaderScanner0.isEnabled((-1778), 3423);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=/\fv8>mI&F`");
      jSONScanner0.isRef();
      jSONScanner0.getLocale();
      char[] charArray0 = new char[15];
      charArray0[0] = 'u';
      jSONScanner0.scanFieldInt(charArray0);
      // Undeclared exception!
      try { 
        jSONScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanFloat('4');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray1);
      JSONScanner jSONScanner0 = null;
      try {
        jSONScanner0 = new JSONScanner(charArray1, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.scanInt('W');
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanFieldBoolean(charArray0);
      char[] charArray1 = new char[0];
      jSONReaderScanner0.scanFieldDate(charArray1);
      assertEquals((-1), jSONReaderScanner0.matchStat);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[5] = 'A';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("new", 4102);
      assertEquals(0, jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanInt('A');
      jSONReaderScanner0.scanFloat('A');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "new";
      JSONScanner jSONScanner0 = new JSONScanner("new", 25);
      char[] charArray1 = new char[2];
      charArray1[0] = 'A';
      charArray1[1] = 'A';
      jSONScanner0.scanFieldDouble(charArray1);
      jSONScanner0.nextToken((-923));
      jSONScanner0.getCalendar();
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("g,&#!#ofpJY>", 7);
      int int0 = jSONReaderScanner0.scanInt('V');
      assertEquals(0, int0);
      
      jSONReaderScanner0.scanFloat('V');
      JSONScanner jSONScanner0 = new JSONScanner("g,&#!#ofpJY>", 7);
      jSONScanner0.nextToken((-70));
      assertEquals(7, jSONScanner0.getFeatures());
      assertEquals(0, jSONScanner0.pos());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      char[] charArray0 = new char[2];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("o", 3);
      jSONReaderScanner0.scanInt('<');
      jSONReaderScanner0.scanFloat('d');
      JSONScanner jSONScanner0 = new JSONScanner("equals", (-4006));
      jSONScanner0.scanFieldDouble(charArray0);
      jSONScanner0.nextToken(4102);
      jSONScanner0.getCalendar();
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("WriteDateUseDateFormat", 83);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jSONScanner0.scanStringArray(arrayList0, '*');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "WriteDateUseDateFormat");
      jSONScanner0.scanStringArray(arrayList0, 'i');
      SymbolTable symbolTable0 = new SymbolTable(83);
      jSONScanner0.scanSymbol(symbolTable0, 'i');
      jSONScanner0.scanLong('e');
      // Undeclared exception!
      try { 
        jSONScanner0.nextToken();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse true
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#yjVY>IhA=N/y-GAf5z");
      jSONScanner0.scanNumber();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#yjVY>IhA=N/y-GAf5z", 0);
      char char0 = '/';
      char[] charArray0 = new char[3];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      SymbolTable symbolTable0 = new SymbolTable(20);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, '/');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("]");
      JSONScanner jSONScanner1 = new JSONScanner("]");
      jSONScanner1.scanNumber();
      jSONScanner0.nextToken((-3553));
      JSONScanner jSONScanner2 = new JSONScanner("expect ':' at ", 5483);
      jSONScanner1.nextToken(76);
      assertTrue(jSONScanner1.isEOF());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      JSONScanner jSONScanner1 = new JSONScanner(" - ");
      jSONScanner1.scanType(" - ");
      JSONScanner jSONScanner2 = new JSONScanner(" - ", 0);
      char[] charArray0 = new char[0];
      JSONScanner jSONScanner3 = new JSONScanner(charArray0, 0);
      jSONScanner3.nextIdent();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 0);
      JSONScanner jSONScanner4 = new JSONScanner("undefined", 0);
      jSONScanner1.isBlankInput();
      jSONScanner2.nextIdent();
      jSONScanner0.nextToken(82);
      assertTrue(jSONScanner0.isEOF());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(")");
      JSONScanner jSONScanner1 = new JSONScanner("fastjson.compatibleWithFieldName", 0);
      char[] charArray0 = new char[5];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      jSONScanner1.scanFieldBigInteger(charArray0);
      jSONScanner1.scanBoolean('>');
      SymbolTable symbolTable0 = new SymbolTable(99999999);
      // Undeclared exception!
      try { 
        jSONScanner1.scanSymbol(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // syntax error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '%';
      charArray0[1] = '';
      charArray0[2] = 'a';
      charArray0[3] = 'w';
      charArray0[4] = 's';
      charArray0[5] = 'l';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 93, 1911);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      jSONReaderScanner0.lexError("v=#>]cn?JxumOa", objectArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("-9ndm");
      jSONReaderScanner1.scanUUID('c');
      jSONReaderScanner1.scanDate('I');
      jSONReaderScanner1.charAt(1911);
      jSONReaderScanner1.scanFieldString(charArray0);
      assertEquals((-2), jSONReaderScanner1.matchStat);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1qi");
      jSONReaderScanner0.scanDouble('Y');
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      jSONReaderScanner0.scanFieldUUID(charArray0);
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      jSONReaderScanner0.charAt(0);
      assertEquals((-2), jSONReaderScanner0.matchStat);
      
      jSONReaderScanner0.scanLong('=');
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("1qi", (-1));
      jSONReaderScanner1.scanFieldDouble(charArray0);
      jSONReaderScanner1.scanDate('q');
      assertEquals((-1), jSONReaderScanner1.getFeatures());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1i");
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = '[';
      jSONScanner0.scanFieldFloatArray2(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner(":$", (-2));
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("1i");
      StringReader stringReader0 = new StringReader("fastjson.parser.deny");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 1410);
      PushbackReader pushbackReader0 = new PushbackReader(bufferedReader0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(pushbackReader0, 32);
      double double0 = jSONReaderScanner1.scanDouble('[');
      assertEquals(0.0, double0, 0.01);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      char[] charArray1 = new char[9];
      charArray1[0] = '[';
      charArray1[1] = '[';
      charArray1[2] = '9';
      charArray1[3] = ':';
      charArray1[4] = '[';
      charArray1[5] = '[';
      charArray1[6] = ':';
      charArray1[7] = '[';
      charArray1[8] = 's';
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      long long0 = jSONReaderScanner0.scanLong('k');
      assertEquals(1L, long0);
      assertEquals(989, jSONReaderScanner0.getFeatures());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "Set";
      int int0 = 7;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Set", 7);
      char char0 = 'A';
      char[] charArray0 = new char[6];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      charArray0[4] = 'm';
      charArray0[5] = 'A';
      SymbolTable symbolTable0 = new SymbolTable(7);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanFieldStringArray(charArray0, 2378, symbolTable0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("g,&#!#ofpJY>");
      SymbolTable symbolTable0 = new SymbolTable(20);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbol((SymbolTable) null, 'S');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed.str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("=/\fv8>mI&F`");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("\u0000");
      jSONReaderScanner0.scanInt('d');
      jSONReaderScanner0.scanFloat('d');
      JSONScanner jSONScanner1 = new JSONScanner("ui", (-1));
      jSONScanner0.nextToken((-1));
      assertEquals(1, jSONScanner0.token());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("false");
      char[] charArray0 = new char[9];
      charArray0[0] = '?';
      charArray0[1] = '0';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("3", 0);
      jSONScanner0.next();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner(charArrayReader0, 0);
      jSONReaderScanner0.scanFloat('(');
      jSONReaderScanner1.scanUUID('y');
      JSONReaderScanner jSONReaderScanner2 = null;
      try {
        jSONReaderScanner2 = new JSONReaderScanner(charArray0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("eUoKE^l~@T+W~o?oQ`&");
      jSONScanner0.scanDouble('N');
      jSONScanner0.scanNumber();
      jSONScanner0.nextToken(881);
      // Undeclared exception!
      try { 
        jSONScanner0.nextTokenWithColon(881);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // not match : - o, info : pos 2, json : eUoKE^l~@T+W~o?oQ`&
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("E5;%%Pp@");
      jSONReaderScanner0.resetStringPosition();
      char char0 = '!';
      jSONReaderScanner0.putChar('!');
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.subString(125, 47);
      char char1 = '1';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONReaderScanner0.scanDecimal('1');
      jSONReaderScanner0.scanUUID('?');
      JSONScanner jSONScanner0 = new JSONScanner("+{$I\"q,INZe", (-832));
      jSONScanner0.stringVal();
      char char2 = 'f';
      // Undeclared exception!
      try { 
        jSONScanner0.setTimeZone('f', '1', '1');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3!W(fPoj");
      jSONScanner0.scanNumber();
      jSONScanner0.floatValue();
      jSONScanner0.nextToken(0);
      jSONScanner0.getCalendar();
      int int0 = Calendar.LONG_FORMAT;
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("3!W(fPoj");
      jSONScanner0.scanNumber();
      jSONScanner0.floatValue();
      jSONScanner0.nextToken(0);
      jSONScanner0.getCalendar();
      jSONScanner0.indexOf('/', 44);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner(", name ");
      jSONScanner0.scanNumber();
      jSONScanner0.scanDecimal('`');
      jSONScanner0.nextToken(342);
      SymbolTable symbolTable0 = new SymbolTable(97);
      jSONScanner0.scanSymbol(symbolTable0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("J=Dlsc");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloatArray(charArray0);
      Locale locale0 = Locale.TAIWAN;
      Object object0 = new Object();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(";", (-2));
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSONReaderScanner0;
      objectArray0[1] = (Object) jSONReaderScanner0;
      jSONReaderScanner0.lexError("J=Dlsc", objectArray0);
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("%Cu");
      jSONReaderScanner0.lexError("%Cu", objectArray0);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("error parse new");
      jSONReaderScanner1.scanUUID('.');
      jSONReaderScanner1.scanDate('h');
      jSONReaderScanner2.charAt(0);
      jSONScanner0.scanNumber();
      jSONReaderScanner1.longValue();
      jSONReaderScanner0.scanFieldInt(charArray0);
      jSONScanner0.scanISO8601DateIfMatch(false);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("E5;%%Pp@");
      jSONReaderScanner0.resetStringPosition();
      jSONReaderScanner0.scanNumber();
      jSONReaderScanner0.subString(125, 0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONReaderScanner0.scanDecimal('[');
      jSONReaderScanner0.scanUUID('[');
      JSONScanner jSONScanner0 = new JSONScanner("+{$I\"q,INZe", (-832));
      jSONScanner0.stringVal();
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      charArray0[4] = '[';
      charArray0[5] = '[';
      charArray0[6] = '[';
      jSONScanner0.scanFieldFloat(charArray0);
      jSONScanner0.nextToken(31);
      SymbolTable symbolTable0 = new SymbolTable(8192);
      // Undeclared exception!
      try { 
        jSONScanner0.scanSymbolUnQuoted(symbolTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // illegal identifier : {pos 1, json : +{$I\"q,INZe
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.isRef();
      jSONScanner0.scanBoolean('Y');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      SymbolTable symbolTable0 = new SymbolTable(3);
      jSONScanner0.scanSymbolWithSeperator(symbolTable0, 'Z');
      jSONScanner0.isEOF();
      jSONScanner0.nextToken(3);
      jSONScanner0.tokenName();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.isRef();
      jSONScanner0.scanBoolean('Y');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 3);
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      SymbolTable symbolTable0 = new SymbolTable(19);
      jSONScanner0.scanEnum(class0, symbolTable0, '^');
      Feature feature0 = Feature.IgnoreAutoType;
      jSONScanner0.config(feature0, true);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("Set");
      char[] charArray0 = new char[0];
      jSONScanner0.scanFloat('`');
      jSONScanner0.scanFieldUUID(charArray0);
      jSONScanner0.matchField(charArray0);
      jSONScanner0.integerValue();
      jSONScanner0.scanFieldSymbol(charArray0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("#yjVY>IhA=N/y-GAf5z");
      jSONScanner0.scanNumber();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("#yjVY>IhA=N/y-GAf5z");
      JSONScanner jSONScanner1 = new JSONScanner("N=')xP7(z", (-3356));
      jSONScanner0.scanString('1');
      jSONScanner1.putChar('1');
      jSONScanner1.integerValue();
      jSONScanner1.nextToken((-3356));
      jSONScanner1.longValue();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("eUoKE^l~@T+W~o?oQ`&");
      jSONScanner0.scanNumber();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("eUoKE^l~@T+W~o?oQ`&");
      JSONScanner jSONScanner1 = new JSONScanner("UseISO8601DateFormat", (-3356));
      jSONScanner0.scanString('1');
      jSONScanner1.putChar('1');
      jSONScanner1.integerValue();
      jSONScanner1.scanLong('\'');
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("null");
      jSONScanner0.isRef();
      jSONScanner0.nextToken(0);
      char[] charArray0 = new char[6];
      charArray0[0] = '`';
      charArray0[1] = 'z';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("null");
      jSONReaderScanner0.scanDate('z');
      jSONReaderScanner0.isBlankInput();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("uI");
      jSONScanner0.scanFloat('>');
      jSONScanner0.nextToken(16);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("HPDg");
      jSONReaderScanner0.scanDecimal('/');
      jSONScanner0.next();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("TreeSet");
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = 'R';
      charArray0[2] = 'g';
      charArray0[4] = 'R';
      charArray0[5] = 'a';
      jSONScanner0.scanFieldFloatArray(charArray0);
      Locale locale0 = Locale.TAIWAN;
      jSONScanner0.scanFieldDate(charArray0);
      JSONScanner jSONScanner1 = new JSONScanner("TreeSet");
      jSONScanner1.nextToken();
      int int0 = 31;
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1185263
         //
         verifyException("com.alibaba.fastjson.parser.SymbolTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1qi");
      Locale locale0 = Locale.FRANCE;
      jSONScanner0.setLocale(locale0);
      char[] charArray0 = new char[0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jSONScanner0.longValue();
      jSONScanner0.scanFieldDouble(charArray0);
      char char0 = '{';
      JSONScanner jSONScanner1 = null;
      try {
        jSONScanner1 = new JSONScanner(charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      JSONScanner jSONScanner0 = new JSONScanner("1i");
      jSONScanner0.putChar('?');
      jSONScanner0.integerValue();
      jSONScanner0.doubleValue();
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldBigInteger(charArray0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "\"O=Ie{;KwApVn}";
      JSONScanner jSONScanner0 = new JSONScanner("\"O=Ie{;KwApVn}");
      // Undeclared exception!
      try { 
        jSONScanner0.scanString('r');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed str
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      JSONScanner jSONScanner0 = new JSONScanner("1i");
      jSONScanner0.scanDecimal('n');
      char[] charArray0 = new char[0];
      jSONScanner0.scanFieldFloat(charArray0);
  }
}
