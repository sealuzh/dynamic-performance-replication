/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:00:15 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.Locale;
import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.PermDescriptor;
import org.apache.derby.iapi.store.raw.RawStoreFactory;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.TypeId;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.value.ValueLob;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.reverse();
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0F);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("43X32.U", stringBuilder1);
      stringBuilder2.append(0.0F);
      assertEquals("0.0 or 43X32.U0.0", stringBuilder2.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("43X32.U", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append(0.0F);
      SQLUtil.addOptionalCondition("43X32.U", stringBuilder2);
      stringBuilder0.append(0.0F);
      assertEquals("43X32.U0.0 or 43X32.U0.0", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.mutatesStructure("dac-[Nz]jv>LU6n\"");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append("alter table<mvt{,uru]=cm!'.");
      SQLUtil.addRequiredCondition("dac-[Nz]jv>LU6n\"", stringBuilder1);
      assertEquals("alter table<mvt{,uru]=cm!'. and dac-[Nz]jv>LU6n\"", stringBuilder1.toString());
      assertEquals("alter table<mvt{,uru]=cm!'. and dac-[Nz]jv>LU6n\"", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize(" ADD ");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = " ADD ";
      stringArray0[3] = "";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(,  ADD , , )", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join("drop index", "drop index", stringArray0, "{3-REQ,hmiN<S~", "*`i%;hhv{2U 0O::zA/", stringArray0);
      assertEquals("drop index join {3-REQ,hmiN<S~ as *`i%;hhv{2U 0O::zA/ on drop index.null = *`i%;hhv{2U 0O::zA/.null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string1 = TypeId.SMALLINT_NAME;
      Boolean boolean0 = SQLUtil.mutatesStructure("drop index");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ",\n    ";
      stringArray0[1] = ",\n    ";
      stringArray0[2] = "z4)ITur8fjr>.";
      stringArray0[3] = ",\n    ";
      String string0 = SQLUtil.join(",\n    ", ",\n    ", stringArray0, "!Q>@;]+NH", "t+\" T}pGc3", stringArray0);
      assertEquals(",\n     join !Q>@;]+NH as t+\" T}pGc3 on ,\n    .,\n     = t+\" T}pGc3.,\n     and ,\n    .,\n     = t+\" T}pGc3.,\n     and ,\n    .z4)ITur8fjr>. = t+\" T}pGc3.z4)ITur8fjr>. and ,\n    .,\n     = t+\" T}pGc3.,\n    ", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("org.databene.jdbacl.model.DBCatalog", (String) null, "org.databene.jdbacl.model.DBCatalog");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil.isDDL("<mvt{,uru]=c");
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Locale locale0 = Locale.CANADA;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.renderColumnListWithTableName("selecty", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (-3225.86188);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 3225.86188", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Error converting to unicode stream.";
      stringArray0[1] = "Error resetting connection: ";
      stringArray0[2] = "uDF";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("Error converting to unicode stream. = 'Error converting to unicode stream.' AND Error resetting connection:  = 'Error resetting connection: ' AND uDF = 'uDF'", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.isQuery("PAGE_STORE");
      SQLUtil.normalize("PAGE_STORE", false);
      DBSchema dBSchema0 = new DBSchema("insert,*[");
      assertEquals("schema", dBSchema0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLUtil.isQuery("PAG~E_STORE");
      SQLUtil.normalize("PAG~E_STORE", false);
      DBSchema dBSchema0 = new DBSchema("insert,*[");
      assertNull(dBSchema0.getDoc());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("XTAP`$ +si1916?Y>^");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("XTAP`$ +si1916?Y>^", dBSchema0);
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "[x=oV5Y", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT [x=oV5Y ", string0);
      
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      dBUniqueConstraint0.setDoc("CONSTRAINT [x=oV5Y ");
      boolean boolean0 = SQLUtil.isQuery(".nUIE4UC.I");
      assertFalse(boolean0);
      
      String string1 = TypeId.SMALLINT_NAME;
      String string2 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil.isQuery("u%]WX*Y<U,");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.removeComments("drop tablers&06?$jc5zu^w/*#");
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("drop tablers&06?$jc5zu^w/*#");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "\\C]c[x";
      String[] stringArray0 = null;
      String string1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.join("", "C]c[x", (String[]) null, "", (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append(0.0F);
      SQLUtil.normalize("2p@.8BBn8&3<w", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("2p @.8BBn8 & 3 < w");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "2p @.8BBn8 & 3 < w";
      stringArray0[1] = "2p @.8BBn8 & 3 < w";
      stringArray0[2] = "2p @.8BBn8 & 3 < w";
      stringArray0[3] = "2p@.8BBn8&3<w";
      stringArray0[4] = "2p @.8BBn8 & 3 < w";
      stringArray0[5] = "2p @.8BBn8 & 3 < w";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("2p @.8BBn8 & 3 < w", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.reverse();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(,?/}^gnT88fojD~ku");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "X3V0a[Kj5Fb", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "shared read lock", true, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      DBSchema dBSchema0 = new DBSchema("/*");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "- 0";
      stringArray0[2] = "/*";
      stringArray0[4] = null;
      stringArray0[5] = "- 0";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, - 0, /*, , , - 0)", string1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DBColumn dBColumn0 = null;
      String string0 = "*bu(;^ml-g4*O)<+2/";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*bu(;^ml-g4*O)<+2/");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("*bu(;^ml-g4*O)<+2/", true, defaultDBTable0, "insert");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      char[] charArray0 = new char[0];
      int int0 = 1978;
      // Undeclared exception!
      try { 
        stringBuilder1.append(charArray0, 888, 1978);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.normalize("3}/`MhgQXWOT8)", false);
      assertEquals("3 } / ` MhgQXWOT8)", string0);
      
      DBSchema dBSchema0 = new DBSchema("");
      String string1 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBSchema dBSchema0 = new DBSchema("*bu(>^ml-g4]O)><+2/");
      dBSchema0.addTable(defaultDBTable0);
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil.typeAndName(dBSchema0);
      String string0 = TypeId.ARRAY_NAME;
      assertEquals("ARRAY", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("P");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "P";
      stringArray0[1] = "P";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-60);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("update");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "P", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT P PRIMARY KEY (P, P)", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append(0.0F);
      String string0 = SQLUtil.normalize("'j3T#F", true);
      assertEquals("'j3T#F'", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil.isQuery("PAGE_STORE");
      String string0 = LanguageConnectionContext.dbnameStr;
      DBConstraint dBConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("XTAP`$ +si1916?Y>^");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("XTAP`$ +si1916?Y>^", dBSchema0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "[x=oV5Y";
      stringArray0[1] = "callwoj 8q&k";
      stringArray0[2] = "XTAP`$ +si1916?Y>^";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "callwoj 8q&k", true, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      dBUniqueConstraint0.setDoc("alter materialized viewwoj 8q&k");
      assertEquals("alter materialized viewwoj 8q&k", dBUniqueConstraint0.getDoc());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.reverse();
      StringBuilder stringBuilder1 = new StringBuilder();
      SQLUtil.addOptionalCondition("2p@.8BBn8&3<w", stringBuilder0);
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("PRIMARY_KEY BIT", 274);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String[] stringArray0 = new String[6];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[0] = "drop indexdop index";
      stringArray0[1] = "drop indexdop index";
      stringArray0[2] = "drop indexdop index";
      stringArray0[3] = "drop indexdop index";
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String string0 = null;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, (DBDataType) null, integer0);
      TableContainer tableContainer0 = new TableContainer("drop indexdop index", (CompositeDBObject<? extends DBObject>) null);
      boolean boolean0 = true;
      tableContainer0.getSequences(true);
      String string1 = PermDescriptor.UDT_TYPE;
      SQLUtil.mutatesStructure("executekv41byorfx0m?!1");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray1 = null;
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint((String[]) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns ()
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      DBSchema dBSchema0 = new DBSchema("*bu(>^ml-g4]O)<+2/");
      dBSchema0.addTable(defaultDBTable0);
      SQLUtil.normalize("*bu(>^ml-g4]O)<+2/", true);
      SQLUtil.typeAndName(dBSchema0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("*bu(>^ml-g4]O)<+2/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \">^ml-g4]O\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      StringBuilder stringBuilder2 = stringBuilder1.append(0.0F);
      stringBuilder2.reverse();
      SQLUtil.normalize("drop index<mvt{,uru]=cm!'.", false);
      DBSchema dBSchema0 = new DBSchema("insert,*[");
      assertEquals("insert,*[", dBSchema0.getName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.reverse();
      DBSequence dBSequence0 = new DBSequence("FLOAT8", (DBSchema) null);
      String string0 = SQLUtil.ownerDotComponent(dBSequence0);
      assertEquals("FLOAT8", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(,?/}^gnT88fojD~ku");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "FLOAT8";
      stringArray0[1] = "<mvt";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "X3V0a[Kj5Fb", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (FLOAT8, <mvt)", string1);
      
      String string2 = SQLUtil.substituteMarkers("JZW", "P", defaultDBTable0);
      assertEquals("JZW", string2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("j8|<`/JovKFG]-(", stringArray0, "|F;/3~=!S%", "j8|<`/JovKFG]-(", stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(2029, "|F;/3~=!S% as j8|<`/JovKFG]-( on ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|F;/3~=!S% as j8|<`/JovKFG]-( on ", defaultDBTable0, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("g;E,qF10@", stringArray0, "*bu(>^ml-g4]O)<+2/", "Z82A;", stringArray0);
      assertEquals("left join *bu(>^ml-g4]O)<+2/ as Z82A; on ", string0);
      
      DBSchema dBSchema0 = new DBSchema("create table ");
      DBCatalog dBCatalog0 = new DBCatalog();
      dBSchema0.setCatalog(dBCatalog0);
      dBSchema0.getTable((String) null);
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("g;E,qF10@");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "Z82A;", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("Unknown constraint type: ", false, dBUniqueConstraint0);
      SQLUtil.renderColumnListWithTableName("BLOB", stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec1);
      assertEquals("UNIQUE ()", string1);
      
      boolean boolean0 = SQLUtil.isDML("g;E,qF10@");
      assertFalse(boolean0);
      
      String string2 = SQLUtil.renderValue(nameSpec0);
      assertEquals("ALWAYS", string2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*bu(;^ml-g4*O)<+2/");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "> ,GP@)q.g";
      stringArray0[1] = "*bu(;^ml-g4*O)<+2/";
      stringArray0[2] = "3`aD.";
      stringArray0[3] = "> ,GP@)q.g";
      DBDataType dBDataType0 = DBDataType.getInstance(2065, "eLzBmC");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("rEzz$m7y&fJq+h[}B", defaultDBTable0, dBDataType0);
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBSchema dBSchema0 = new DBSchema("*bu(>^ml-g4]O)<+2/");
      dBSchema0.setName("*bu(>^ml-g4]O)<+2/");
      dBSchema0.addTable(defaultDBTable0);
      defaultDBTable0.getReferrers();
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = new StringBuilder();
      stringBuilder0.append(false);
      stringBuilder1.append("eeIt");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("G>v}2e6:c0(eba?k9", defaultDBTable0, 189, "G>v}2e6:c0(eba?k9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: G>v}2e6:c0(eba?k9
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = SQLUtil.normalize("<}+U$9qn G5xIY/2]", false);
      assertEquals("< } + U $ 9qn G5xIY /  2 ]", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<q@cc!? n";
      SQLUtil.innerJoin("<q@cc!? n", stringArray0, "\u0001\u01A4", (String) null, stringArray0);
      TableContainer tableContainer0 = new TableContainer("drop table<mvt{,uru]=cm!'.");
      VersionNumber versionNumber0 = VersionNumber.valueOf("<q@cc!? n");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("3`aD.", "", versionNumber0);
      StringBuilder stringBuilder0 = new StringBuilder("yDuBRg");
      stringBuilder0.append(104.729599);
      String string0 = SQLUtil.normalize("t\"a>x1hB}Avw|1", true);
      assertEquals("t \"a>x1hB}Avw|1\"", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      String string0 = TypeId.SMALLINT_NAME;
      SQLUtil.mutatesDataOrStructure("alter materialized view<mvt{,uru]=cm!'.");
      SQLUtil.isDDL("X[]\"V|");
      SQLUtil.isProcedureCall("X[]\"V|");
      byte[] byteArray0 = new byte[2];
      defaultDBTable0.setPrimaryKey((DBPrimaryKeyConstraint) null);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable1, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = FileUtil.fsNormalizesPosixSeparator;
      DBSchema dBSchema0 = new DBSchema("*bu(;^ml-g4*O)<+2/");
      String string0 = SQLUtil.normalize("*bu(;^ml-g4*O)<+2/", false);
      assertEquals("* bu (; ^ ml - g4 * O) < +  2 /", string0);
      
      SQLUtil.typeAndName(dBSchema0);
      StringBuilder stringBuilder0 = new StringBuilder("* bu (; ^ ml - g4 * O) < +  2 /");
      DBSchema dBSchema1 = new DBSchema("schema *bu(;^ml-g4*O)<+2/");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("schema *bu(;^ml-g4*O)<+2/", dBSchema0);
      String string1 = SQLUtil.typeAndName(dBSchema1);
      assertEquals("schema schema *bu(;^ml-g4*O)<+2/", string1);
      
      System.setCurrentTimeMillis((-4L));
      String[] stringArray0 = new String[18];
      stringArray0[0] = "schema schema *bu(;^ml-g4*O)<+2/";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("schema schema *bu(;^ml-g4*O)<+2/", true, defaultDBTable0, stringArray0, defaultDBTable1, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string2 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (schema schema *bu(;^ml-g4*O)<+2/, , , , , , , , , , , , , , , , , ) REFERENCES schema *bu(;^ml-g4*O)<+2/(schema schema *bu(;^ml-g4*O)<+2/, , , , , , , , , , , , , , , , , )", string2);
      
      boolean boolean1 = SQLUtil.isDML("file.separator");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder("MTx[+vVhQtOQc1XCeH");
      stringBuilder0.chars();
      TableContainer tableContainer0 = new TableContainer("MTx[+vVhQtOQc1XCeH");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("]>A}M", (DBSchema) null);
      DBSchema dBSchema0 = new DBSchema("#XA=;~vSg)+bl+t");
      defaultDBTable0.setSchema((DBSchema) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "]>A}M";
      stringArray0[1] = "#XA=;~vSg)+bl+t";
      stringArray0[2] = "*:sAfAd.0xcu%F<";
      stringArray0[3] = "MTx[+vVhQtOQc1XCeH";
      stringArray0[4] = null;
      stringArray0[5] = "Unknown constraint type: ";
      stringArray0[6] = "Y$Gl7nt?r";
      stringArray0[7] = "Y$Gl7nt?r";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      Integer integer0 = RawTransaction.ABORT;
      dBUniqueConstraint0.setDoc("]>A}M");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.normalize("drop tablers&06?$jc5zu^w/*#", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = RawStoreFactory.OLD_ENCRYPTED_KEY;
      SQLUtil sQLUtil0 = new SQLUtil();
      Boolean boolean0 = new Boolean(false);
      StringBuilder stringBuilder0 = new StringBuilder("drop tablers & 06 ? $ jc5zu ^ w /* #");
      String string1 = "43X40.U";
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-2391), "43X40.U");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2391
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("");
      dBCatalog0.removeSchema(dBSchema0);
      DBSchema dBSchema1 = new DBSchema("Ko.Dksr.w5'j", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema1);
      defaultDBTable0.setSchema(dBSchema0);
      dBCatalog0.getComponents();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ".>7x;CAXL?v2", false, (String[]) null);
      SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      SQLUtil.removeComments("");
      SQLUtil.typeAndName(dBSchema0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.innerJoin((String) null, stringArray0, "", "", stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance((-3117), "9A,uB-n_tz");
      dBDataType0.isAlpha();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      defaultDBColumn0.setSize(integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = TypeId.BLOB_NAME;
      DBDataType dBDataType0 = DBDataType.getInstance(543, "BLOB");
      dBDataType0.isAlpha();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = new Integer((-436845786));
      Integer integer2 = Integer.getInteger("BLOB", integer1);
      defaultDBColumn0.setSize(integer2);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.removeComments("alter session");
      Boolean boolean0 = SQLUtil.mutatesStructure("");
      assertFalse(boolean0);
      
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" BLOB NULL", string1);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      Integer integer3 = RawTransaction.ABORT;
      boolean boolean1 = SQLUtil.isDML("<E#Lst1]?0J0}*An");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.normalize("drop tablers&06?$jc5zu^w/*#", true);
      DBDataType dBDataType0 = DBDataType.getInstance(246, "drop tablers&06?$jc5zu^w/*#");
      dBDataType0.isAlpha();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop table", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setSize(integer0);
      String string0 = FBConnectionProperties.USE_STANDARD_UDF_PROPERTY;
      SQLUtil.removeComments("drop tablers&06?$jc5zu^w/*#");
      defaultDBColumn0.setFractionDigits(integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "drop table DROP TABLERS&06?$JC5ZU^W/*#(3,3) NULL";
      stringArray0[1] = "drop table";
      stringArray0[2] = "drop tablers&06?$jc5zu^w/*#";
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("drop table");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      defaultDBTable0.getReferrers();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "getStatement");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      Locale locale0 = Locale.ITALY;
      mockPrintWriter0.printf(locale0, "NCLOB", (Object[]) null);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(24, "select intosmallint");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("op_response resp_object: ", defaultDBTable1, dBDataType0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select intosmallint");
      assertFalse(boolean0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      boolean boolean1 = SQLUtil.isQuery("op_response resp_object: ");
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("<mvt{,URu]=cM!'.");
      SQLUtil.isDML("<mvt{,URu]=cM!'.");
      DBDataType dBDataType0 = DBDataType.getInstance(39, "<mvt{,URu]=cM!'.");
      dBDataType0.isAlpha();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select into", defaultDBTable0, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn0);
      defaultDBColumn0.getForeignKeyConstraint();
      SQLUtil.removeComments("'7?f5[&{wY8yruFr}");
      defaultDBColumn0.setDefaultValue("'7?f5[&{wY8yruFr}");
      SQLUtil.mutatesDataOrStructure("select into <MVT{,URU]=CM!'. NULL");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "select into";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "select into");
      StringBuilder stringBuilder1 = stringBuilder0.append((-471));
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-966), "alter sessionnw7l$");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -966
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 0.12;
      SQLUtil.renderNumber(streamTokenizer0);
      String[] stringArray0 = new String[1];
      SQLUtil.innerJoin("alter tableexecutekv41byorfx0m?!1", stringArray0, (String) null, (String) null, stringArray0);
      TableContainer tableContainer0 = new TableContainer((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getReferrers();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      mockPrintWriter0.print('1');
      mockPrintWriter0.append((CharSequence) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil.isProcedureCall("alter tableexecutekv41byorfx0m?!1");
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBSchema dBSchema0 = new DBSchema("*bu(,>^ml-g4]O)<+2/");
      dBSchema0.setName("*bu(,>^ml-g4]O)<+2/");
      dBSchema0.addTable(defaultDBTable0);
      defaultDBTable0.getReferrers();
      defaultDBTable0.isIdentical(dBSchema0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      mockPrintWriter0.append((CharSequence) "getStatement");
      SQLUtil.normalize("getStatement", true);
      SQLUtil.typeAndName(defaultDBTable0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("*bu(,>^ml-g4]O)<+2/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = FileUtil.fsIsIgnoreCase;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBSchema dBSchema0 = new DBSchema("*bu(,>^ml-g4]O)<+2/");
      dBSchema0.setName("*bu(,>^ml-g4]O)<+2/");
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(24, "select intosmallint");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("op_response resp_object: ", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setType(dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)62;
      ValueLob valueLob0 = ValueLob.createSmallLob((byte)62, byteArray0);
      Reader reader0 = valueLob0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("select intosmallint", false, "org.apache.derby.iapi.services.crypto.CipherFactoryBuilder", "- 0");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "/|sTF=BP>T3]Ha");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0, nameSpec0);
      assertEquals("/|sTF=BP>T3]HaCONSTRAINT \"select intosmallint\" ", stringBuilder0.toString());
      
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      Boolean boolean1 = SQLUtil.mutatesStructure("|NP<cR@NM5|{>K&IF~j");
      assertFalse(boolean1);
  }
}
