/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 15:35:48 GMT 2018
 */

package com.alibaba.fastjson.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.PropertyNamingStrategy;
import com.alibaba.fastjson.TypeReference;
import com.alibaba.fastjson.annotation.JSONType;
import com.alibaba.fastjson.asm.Opcodes;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.Feature;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.parser.deserializer.ASMDeserializerFactory;
import com.alibaba.fastjson.parser.deserializer.EnumDeserializer;
import com.alibaba.fastjson.parser.deserializer.JSONPDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer;
import com.alibaba.fastjson.parser.deserializer.JavaObjectDeserializer;
import com.alibaba.fastjson.parser.deserializer.Jdk8DateCodec;
import com.alibaba.fastjson.parser.deserializer.MapDeserializer;
import com.alibaba.fastjson.parser.deserializer.NumberDeserializer;
import com.alibaba.fastjson.parser.deserializer.OptionalCodec;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessable;
import com.alibaba.fastjson.parser.deserializer.PropertyProcessableDeserializer;
import com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer;
import com.alibaba.fastjson.parser.deserializer.StackTraceElementDeserializer;
import com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer;
import com.alibaba.fastjson.parser.deserializer.TimeDeserializer;
import com.alibaba.fastjson.serializer.AtomicCodec;
import com.alibaba.fastjson.serializer.BeanContext;
import com.alibaba.fastjson.serializer.IntegerCodec;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.SerializeBeanInfo;
import com.alibaba.fastjson.serializer.SerializeConfig;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.alibaba.fastjson.serializer.SimplePropertyPreFilter;
import com.alibaba.fastjson.util.ASMClassLoader;
import com.alibaba.fastjson.util.FieldInfo;
import com.alibaba.fastjson.util.JavaBeanInfo;
import com.alibaba.fastjson.util.ParameterizedTypeImpl;
import com.alibaba.fastjson.util.TypeUtils;
import java.awt.BufferCapabilities;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.ImageCapabilities;
import java.awt.Insets;
import java.awt.JobAttributes;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.io.File;
import java.io.ObjectStreamConstants;
import java.io.PrintStream;
import java.lang.annotation.Annotation;
import java.lang.reflect.AccessibleObject;
import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.GenericArrayType;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.HttpCookie;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.BreakIterator;
import java.text.ChoiceFormat;
import java.text.Collator;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.MessageFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.RuleBasedCollator;
import java.time.Instant;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.JapaneseDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Currency;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.NavigableMap;
import java.util.Properties;
import java.util.SimpleTimeZone;
import java.util.SortedMap;
import java.util.TimeZone;
import java.util.TreeMap;
import java.util.UUID;
import java.util.Vector;
import java.util.WeakHashMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.LongBinaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.java.util.MockUUID;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TypeUtils_ESTest extends TypeUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TypeUtils.loadClass("cause");
      // Undeclared exception!
      try { 
        TypeUtils.createCollection((Type) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TODO
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TypeUtils.clearClassMapping();
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.util.concurrent.ConcurrentSkipListMap");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "t J.3Ga*5gR#*$azNR");
      MockThread mockThread0 = new MockThread(threadGroup1, "]3Kq>o${*kR*]:c_?");
      MockThread mockThread1 = new MockThread();
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      classLoader0.setClassAssertionStatus("j?oDG=G", true);
      InterruptedException interruptedException0 = new InterruptedException();
      TypeUtils.loadClass("java.util.OptionalLong");
      MockUUID.fromString("java.nio.file.Path");
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean(interruptedException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.InterruptedException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      String string0 = null;
      TypeUtils.loadClass((String) null, classLoader0);
      TypeUtils.getCollectionItemType((Type) null);
      ThreadGroup threadGroup0 = null;
      try {
        threadGroup0 = new ThreadGroup((ThreadGroup) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.ThreadGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("QV2EN", classLoader0, true);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("tkilGVAZ", "D{S7");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("+tir@", sQLTransientConnectionException0);
      String string0 = TypeUtils.castToString(sQLNonTransientConnectionException0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TypeUtils.loadClass("`lja=9ly|Gc");
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.fnv1a_64_lower("`lja=9ly|Gc");
      TypeUtils.isHibernateInitialized("x8Xam-HI)S.Fi||X]IS");
      TreeMap<MockCalendar, Jdk8DateCodec> treeMap0 = new TreeMap<MockCalendar, Jdk8DateCodec>();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Class<SQLException> class0 = SQLException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn((Class) null).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      TypeUtils.getGenericParamType((Type) null);
      Class<MockHijrahDate> class1 = MockHijrahDate.class;
      TypeUtils.getSerializeFeatures(class1);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(mockThaiBuddhistDate0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate@72367134
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.remove((Object) class0);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) hashtable0, false);
      // Undeclared exception!
      try { 
        TypeUtils.createCollection(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create instance error, class com.alibaba.fastjson.parser.deserializer.JSONPDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Class<JavaObjectDeserializer> class0 = JavaObjectDeserializer.class;
      TypeUtils.isProxy(class0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashtable0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Class<Double> class0 = Double.TYPE;
      Class<?> class1 = TypeUtils.getCollectionItemClass(class0);
      TypeUtils.unwrapOptional(class1);
      Character.valueOf('&');
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      ClassLoader.getSystemClassLoader();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Boolean boolean0 = new Boolean(false);
      TypeUtils.getSerializeFeatures(class0);
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertFalse(parserConfig0.isAutoTypeSupport());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Class<Long> class0 = Long.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Type type0 = TypeUtils.getGenericParamType(class0);
      assertNull(type0);
      
      InterruptedException interruptedException0 = new InterruptedException();
      interruptedException0.getLocalizedMessage();
      boolean boolean0 = TypeUtils.isHibernateInitialized(interruptedException0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1971, ".{");
      simpleTimeZone0.setDSTSavings(1971);
      String string0 = TypeUtils.castToString(simpleTimeZone0);
      assertNotNull(string0);
      
      MockThread mockThread0 = new MockThread("2-[21{=");
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0);
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      mockThread1.getStackTrace();
      TypeUtils.loadClass(".{", (ClassLoader) aSMClassLoader0, true);
      String string1 = TypeUtils.decapitalize("5_U.'te+c");
      assertEquals("5_U.'te+c", string1);
      
      Class<Jdk8DateCodec> class0 = Jdk8DateCodec.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      Class<SQLRecoverableException> class1 = SQLRecoverableException.class;
      Class<MockDateFormat> class2 = MockDateFormat.class;
      Class<TimeZone> class3 = TimeZone.class;
      Hashtable<String, Field> hashtable0 = new Hashtable<String, Field>();
      ParserConfig.getFieldFromCache("Ljava.lang.AutoCloseable", hashtable0);
      FieldInfo fieldInfo0 = new FieldInfo("73T(", class2, class3, class3, (Field) null, 1971, 1971, 1971);
      BeanContext beanContext0 = new BeanContext(class1, fieldInfo0);
      beanContext0.getMethod();
      boolean boolean0 = TypeUtils.isAnnotationPresentOneToMany((Method) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TypeUtils.clearClassMapping();
      TreeMap<Float, SQLSyntaxErrorException> treeMap0 = new TreeMap<Float, SQLSyntaxErrorException>();
      Float float0 = new Float(254.3606530345);
      treeMap0.pollFirstEntry();
      treeMap0.headMap(float0, false);
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Type[] typeArray0 = new Type[7];
      TypeUtils.fnv1a_64_lower("Ghf}wmv0e'&!k=O");
      long long0 = new Long(224146807618824437L);
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      Class<PropertyNamingStrategy> class0 = PropertyNamingStrategy.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      TypeUtils.unwrapOptional(class0);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("Ljava.util.concurrent.ConcurrentSkipListMap");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ljava.util.concurrent.ConcurrentSkipListMap");
      ArrayList<BatchUpdateException> arrayList0 = new ArrayList<BatchUpdateException>();
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(arrayList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "`lja=9ly|Gc";
      TypeUtils.loadClass("`lja=9ly|Gc");
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.fnv1a_64_lower("`lja=9ly|Gc");
      TypeUtils.isHibernateInitialized("x8Xam-HI)S.Fi||X]IS");
      TypeUtils.castToDouble((Object) null);
      EnumDeserializer enumDeserializer0 = null;
      try {
        enumDeserializer0 = new EnumDeserializer((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.EnumDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TypeUtils.decapitalize("/,\"MUPe4{7m");
      Class<SqlDateDeserializer> class0 = SqlDateDeserializer.class;
      TypeUtils.isPath(class0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      TypeUtils.unwrapOptional(class0);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("Ljava.util.concurrent.ConcurrentSkipListMap");
      Character.valueOf('J');
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("Ljava.util.concurrent.ConcurrentSkipListMap");
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      Class<Locale> class1 = Locale.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Collator> class2 = Collator.class;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ThreadGroup threadGroup0 = new ThreadGroup("</");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      TypeUtils.loadClass("/DaGe(", (ClassLoader) aSMClassLoader0, false);
      TypeUtils.decapitalize("/DaGe(");
      classLoader1.setPackageAssertionStatus("/DaGe(", false);
      Class<JavaBeanDeserializer> class1 = JavaBeanDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class1);
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashtable0, false);
      TypeUtils.loadClass("/DaGe(");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "char");
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      LinkedHashSet<TimeDeserializer> linkedHashSet0 = new LinkedHashSet<TimeDeserializer>();
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) linkedHashSet0, (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@lja=9ly|Gc");
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      Class<Short> class1 = Short.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0, true);
      Class<TimeZone> class2 = TimeZone.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) identityHashMap0, true);
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(list0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : []
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "Ljava.util.concurrent.ConcurrentSkipListMap";
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      Boolean boolean0 = Boolean.FALSE;
      InterruptedException interruptedException0 = new InterruptedException();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat("Ljava.util.concurrent.ConcurrentSkipListMap");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TreeMap<InstantiationException, MockJapaneseDate> treeMap0 = new TreeMap<InstantiationException, MockJapaneseDate>();
      // Undeclared exception!
      try { 
        TypeUtils.castToFloat(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to float, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      Class<?> class0 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      TypeUtils.unwrapOptional(class0);
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("Ljava.util.concurrent.ConcurrentSkipListMap");
      Character.valueOf('J');
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory1);
      JavaBeanInfo.build(class0, (Type) parameterizedTypeImpl0, (PropertyNamingStrategy) null);
      Class<NumberDeserializer> class1 = NumberDeserializer.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) weakHashMap0, false);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Double double0 = new Double((-1.0));
      TypeUtils.castToInt(double0);
      // Undeclared exception!
      try { 
        TypeUtils.getClassFromMapping((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      Boolean boolean1 = Boolean.TRUE;
      InterruptedException interruptedException0 = new InterruptedException("`lja=9ly|Gc");
      TypeUtils.loadClass("float");
      TypeUtils typeUtils0 = new TypeUtils();
      assertTrue(TypeUtils.compatibleWithJavaBean);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TypeUtils.castToShort((Object) null);
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.getKoltinConstructorParameters(class0);
      TypeUtils.unwrapOptional(class0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.putIfAbsent("1[jCmFxZ~jt=7", "Ljava.util.concurrent.ConcurrentSkipListMap");
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, hashtable0, false, propertyNamingStrategy0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TypeUtils.castToByte((Object) null);
      Byte.toUnsignedInt((byte) (-33));
      Byte.toUnsignedLong((byte) (-127));
      Byte.toUnsignedInt((byte)35);
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<DataTruncation> class0 = DataTruncation.class;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, true);
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("rLL&X_|");
      negativeArraySizeException0.getLocalizedMessage();
      MockFile mockFile0 = new MockFile("scanInt", "EMNLC]6.a{Cg4");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      negativeArraySizeException0.printStackTrace((PrintStream) mockPrintStream0);
      InternalError internalError0 = new InternalError("rLL&X_|", negativeArraySizeException0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(internalError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.InternalError: rLL&X_|
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Class<IllegalAccessError> class0 = IllegalAccessError.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      List<FieldInfo> list0 = TypeUtils.computeGettersWithFieldBase(class0, (Map<String, String>) null, true, propertyNamingStrategy0);
      assertEquals(4, list0.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      TypeUtils.isHibernateInitialized((Object) null);
      TypeUtils.castToDouble((Object) null);
      TypeUtils.isGenericParamType(class0);
      // Undeclared exception!
      try { 
        JSON.parseObject("", (Feature[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.JSON", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      Class<OptionalCodec> class0 = OptionalCodec.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0);
      Hashtable<NoSuchMethodException, Point> hashtable0 = new Hashtable<NoSuchMethodException, Point>();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      Boolean boolean0 = new Boolean(false);
      Class<NoSuchMethodException> class1 = NoSuchMethodException.class;
      TypeUtils.getSerializeFeatures(class1);
      Type[] typeArray0 = new Type[0];
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      int int0 = Calendar.MONDAY;
      Class<BreakIterator> class0 = BreakIterator.class;
      TypeUtils.getSerializeFeatures(class0);
      DataTruncation dataTruncation0 = new DataTruncation((-2731), true, false, (-2731), 2344);
      dataTruncation0.getNextWarning();
      // Undeclared exception!
      try { 
        TypeUtils.castToBytes((Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TypeUtils.loadClass("o");
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      TypeUtils.getParserFeatures(class0);
      TypeUtils.fnv1a_64_lower("Ljava.util.concurrent.ConcurrentSkipListMap");
      TypeUtils.isHibernateInitialized("o");
      TypeUtils.castToDouble((Object) null);
      TypeUtils.isGenericParamType((Type) null);
      Feature feature0 = Feature.OrderedField;
      Feature[] featureArray0 = new Feature[8];
      featureArray0[0] = feature0;
      featureArray0[1] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      featureArray0[6] = feature0;
      featureArray0[7] = feature0;
      int[] intArray0 = new int[0];
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("o", intArray0);
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      identityHashMap0.put("write", "write");
      Class<Double> class1 = Double.class;
      TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0, true);
      TypeUtils.computeGetters((Class<?>) class0, (Map<String, String>) identityHashMap0, true);
      assertEquals(1, identityHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      Class<Double> class0 = Double.TYPE;
      int int0 = Calendar.MONDAY;
      Class<DecimalFormatSymbols> class1 = DecimalFormatSymbols.class;
      TypeUtils.getSerializeFeatures(class1);
      Class<TimeZone> class2 = TimeZone.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) class0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.TimeZone
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      Class<Object> class1 = Object.class;
      AtomicLong atomicLong0 = new AtomicLong((-4837536971810737970L));
      TypeUtils.castToJavaBean((Object) atomicLong0, class1);
      // Undeclared exception!
      try { 
        TypeUtils.castToBigDecimal(class0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TypeUtils.isAnnotationPresentManyToMany((Method) null);
      Class<Byte> class0 = Byte.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      TypeUtils.checkPrimitiveArray(genericArrayType0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      TypeUtils typeUtils0 = new TypeUtils();
      ClassLoader.getSystemClassLoader();
      TypeUtils.loadClass("yyyy/MM/dd HH:mm:ss", (ClassLoader) aSMDeserializerFactory0.classLoader, false);
      AtomicInteger atomicInteger0 = new AtomicInteger((-1710));
      Class<Object> class1 = Object.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) atomicInteger0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = null;
      TypeUtils.castToByte((Object) null);
      Type type0 = null;
      Byte.toUnsignedInt((byte) (-33));
      Byte.toUnsignedLong((byte) (-127));
      int int0 = Character.MAX_RADIX;
      Byte.compare((byte)19, (byte) (-87));
      TypeUtils.castToTimestamp((Object) null);
      // Undeclared exception!
      try { 
        Date.from((Instant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      VerifyError verifyError0 = new VerifyError();
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime(verifyError0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.VerifyError
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Class<PropertyProcessableDeserializer> class0 = PropertyProcessableDeserializer.class;
      ClassLoader.getSystemClassLoader();
      TypeUtils.isGenericParamType(class0);
      Class<Annotation> class1 = Annotation.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(class1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : interface java.lang.annotation.Annotation
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("`lja=9ly|Gc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : `lja=9ly|Gc
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      TypeUtils.castToString(imageCapabilities0);
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlTime("write javaBean error, fastjson version 1.2.46");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : write javaBean error, fastjson version 1.2.46
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      ParserConfig parserConfig0 = new ParserConfig();
      Class<JSONObject> class0 = JSONObject.class;
      ThrowableDeserializer throwableDeserializer0 = new ThrowableDeserializer(parserConfig0, class0);
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp(throwableDeserializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : com.alibaba.fastjson.parser.deserializer.ThrowableDeserializer@99
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Class<EnumDeserializer> class0 = EnumDeserializer.class;
      TypeUtils.unwrapOptional(class0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.put("1>)=O/ CI6s#^)Qkq~", "1>)=O/ CI6s#^)Qkq~");
      hashtable0.putIfAbsent("1[jCmFxZ~jt=7", "Ljava.util.concurren.ConcurrentSkipListMap");
      hashtable0.put("1[jCmFxZ~jt=7", "1[jCmFxZ~jt=7");
      Class class1 = (Class)TypeUtils.getCollectionItemType(class0);
      assertEquals("class java.lang.Object", class1.toString());
      assertNotNull(class1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Class<SQLFeatureNotSupportedException> class0 = SQLFeatureNotSupportedException.class;
      TypeUtils.isKotlin(class0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(map0);
      Class<LinkageError> class1 = LinkageError.class;
      TypeUtils.getParserFeatures(class1);
      TypeUtils.castToByte((Object) null);
      TypeUtils.loadClass("BgPWxSsr<op@Y");
      Insets insets0 = new Insets(0, 136, 136, (-2516));
      Class<Integer> class2 = Integer.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) insets0, class2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : java.awt.Insets[top=0,left=136,bottom=136,right=-2516]
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TypeUtils.loadClass("o");
      Class<JSONPDeserializer> class0 = JSONPDeserializer.class;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      TypeUtils.fnv1a_64_lower("Ljava.util.concurrent.ConcurrentSkipListMap");
      TypeUtils.isHibernateInitialized("o");
      TypeUtils.castToDouble((Object) null);
      TypeUtils.isGenericParamType((Type) null);
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter((Class<?>) null, stringArray0);
      simplePropertyPreFilter0.getClazz();
      TypeUtils.unwrapOptional(class0);
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      java.util.IdentityHashMap<RuleBasedCollator, RenderingHints> identityHashMap0 = new java.util.IdentityHashMap<RuleBasedCollator, RenderingHints>();
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class com.alibaba.fastjson.parser.deserializer.JSONPDeserializer
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.setClassAssertionStatus("b(!SN9qz}", true);
      Class<StackOverflowError> class0 = StackOverflowError.class;
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      doReturn(class1).when(jSONType0).builder();
      JavaBeanInfo.getBuilderClass(class0, jSONType0);
      TypeUtils.getGenericParamType(class0);
      TreeMap<DecimalFormat, DecimalFormatSymbols> treeMap0 = new TreeMap<DecimalFormat, DecimalFormatSymbols>();
      TypeUtils.castToDate((Object) null);
      JSONObject jSONObject0 = new JSONObject(true);
      MockDate mockDate0 = new MockDate(27, 1345, (-1073), 1345, 3089);
      TimeDeserializer timeDeserializer0 = new TimeDeserializer();
      jSONObject0.getDouble("b(!SN9qz}");
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException();
      BigInteger bigInteger0 = TypeUtils.castToBigInteger((Object) null);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      Class<Boolean> class0 = Boolean.TYPE;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      ThreadGroup threadGroup0 = new ThreadGroup("</");
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "</");
      ParserConfig parserConfig0 = null;
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) threadGroup0, type0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : [Z
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Class<BreakIterator> class0 = BreakIterator.class;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      AtomicLong atomicLong0 = new AtomicLong(1077L);
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      doReturn(1077L).when(longBinaryOperator0).applyAsLong(anyLong() , anyLong());
      atomicLong0.getAndAccumulate(1077L, longBinaryOperator0);
      atomicLong0.incrementAndGet();
      Class<Object> class1 = Object.class;
      TypeUtils.castToJavaBean((Object) concurrentHashMap0, class1);
      Locale locale0 = Locale.UK;
      Locale.forLanguageTag("o");
      ParserConfig parserConfig0 = null;
      ThrowableDeserializer throwableDeserializer0 = null;
      try {
        throwableDeserializer0 = new ThrowableDeserializer((ParserConfig) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 8);
      Class<Double> class0 = Double.TYPE;
      int int0 = Calendar.MONDAY;
      Class<BreakIterator> class1 = BreakIterator.class;
      TypeUtils.getSerializeFeatures(class1);
      Class<TimeZone> class2 = TimeZone.class;
      TimeZone timeZone0 = TypeUtils.castToJavaBean((Object) map0, class2);
      assertNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Type[] typeArray0 = new Type[6];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], typeArray0[2]);
      assertNotNull(parameterizedTypeImpl0);
      
      long long0 = TypeUtils.fnv1a_64_lower("Ghf}wmv0e'&!k=O");
      assertEquals(6592310187447408969L, long0);
      
      long long1 = TypeUtils.fnv1a_64("Ix\"U.2d8TwVN+w");
      assertFalse(long1 == long0);
      assertEquals((-5639507945255787302L), long1);
      
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertNotNull(type0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-CtO9gsib~3Hai");
      assertFalse(boolean0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      IntegerCodec integerCodec0 = IntegerCodec.instance;
      assertNotNull(integerCodec0);
      assertEquals(2, integerCodec0.getFastMatchToken());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<MockJapaneseDate> class0 = MockJapaneseDate.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Map<String, Object>) null, class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Class<Properties> class0 = Properties.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      assertNotNull(javaObjectDeserializer0);
      assertEquals(12, javaObjectDeserializer0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : class java.util.Properties
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("`lja=9ly|Gc");
      assertNull(class0);
      
      Class<JSONPDeserializer> class1 = JSONPDeserializer.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
      
      long long0 = TypeUtils.fnv1a_64_lower("`lja=9ly|Gc");
      assertEquals((-920841822752811551L), long0);
      
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
      
      long long1 = TypeUtils.fnv1a_64_lower("localizedMessage");
      assertFalse(long1 == long0);
      assertEquals((-3820065973998222831L), long1);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<?> class2 = TypeUtils.getClassFromMapping("localizedMessage");
      assertNull(class2);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      Class<Calendar> class3 = Calendar.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class3, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setPackageAssertionStatus("[", false);
      Class<?> class0 = TypeUtils.loadClass("M/S6Z7(7#~w^/", classLoader0, false);
      assertNull(class0);
      
      Class<?> class1 = TypeUtils.getCollectionItemClass((Type) null);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      ClassLoader classLoader2 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader2);
      assertSame(classLoader2, classLoader0);
      assertSame(classLoader2, classLoader1);
      
      Class<StackTraceElementDeserializer> class2 = StackTraceElementDeserializer.class;
      boolean boolean0 = TypeUtils.isGenericParamType(class1);
      assertFalse(boolean0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Object", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(1, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      Class<Annotation> class3 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class2, class3);
      assertNull(annotation0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Class<?> class0 = TypeUtils.getClassFromMapping("Ghf}wmv0e'&!k=O");
      assertNull(class0);
      
      Class<SQLTransactionRollbackException> class1 = SQLTransactionRollbackException.class;
      int int0 = TypeUtils.getParserFeatures(class1);
      assertEquals(0, int0);
      
      long long0 = TypeUtils.fnv1a_64_lower("Ghf}wmv0e'&!k=O");
      assertEquals(6592310187447408969L, long0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized((Object) null);
      assertFalse(boolean0);
      
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
      
      long long1 = TypeUtils.fnv1a_64_lower("M%JW-AY#N");
      assertFalse(long1 == long0);
      assertEquals((-8333474932218678037L), long1);
      
      long long2 = TypeUtils.fnv1a_64("to");
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertEquals(632818452916781220L, long2);
      
      Class class2 = (Class)TypeUtils.unwrapOptional(class1);
      assertNotNull(class2);
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isAnnotation());
      assertEquals("class java.sql.SQLTransactionRollbackException", class2.toString());
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Class<BigInteger> class3 = BigInteger.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.SnakeCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class3, (Map<String, String>) weakHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Type[] typeArray0 = new Type[6];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], typeArray0[2]);
      assertNotNull(parameterizedTypeImpl0);
      
      long long0 = TypeUtils.fnv1a_64_lower("Ghf}wmv0e'&!k=O");
      assertEquals(6592310187447408969L, long0);
      
      long long1 = TypeUtils.fnv1a_64("Ix\"U.2d8TwVN+w");
      assertFalse(long1 == long0);
      assertEquals((-5639507945255787302L), long1);
      
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertNotNull(type0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      Type type1 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertNotNull(type1);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(parameterizedTypeImpl0, type1);
      assertSame(type1, parameterizedTypeImpl0);
      assertSame(type1, type0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger(mockGregorianCalendar0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.e\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "`Dq7%B";
      ChoiceFormat choiceFormat0 = new ChoiceFormat("`Dq7%B");
      assertNotNull(choiceFormat0);
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertTrue(choiceFormat0.isGroupingUsed());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertFalse(choiceFormat0.isParseIntegerOnly());
      
      choiceFormat0.setMinimumFractionDigits((-444));
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertTrue(choiceFormat0.isGroupingUsed());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertFalse(choiceFormat0.isParseIntegerOnly());
      
      Class<TimeUnit> class0 = TimeUnit.class;
      // Undeclared exception!
      try { 
        TypeUtils.castToJavaBean((Object) choiceFormat0, class0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.concurrent.TimeUnit
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Class<DecimalFormatSymbols> class0 = DecimalFormatSymbols.class;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      Class<?> class1 = TypeUtils.loadClass((String) null);
      assertNull(class1);
      
      Class<JSONPDeserializer> class2 = JSONPDeserializer.class;
      BigDecimal bigDecimal0 = TypeUtils.castToBigDecimal((Object) null);
      assertNull(bigDecimal0);
      
      Type[] typeArray0 = new Type[9];
      typeArray0[0] = (Type) null;
      typeArray0[1] = (Type) class0;
      Class<Long> class3 = Long.TYPE;
      assertNotNull(class3);
      assertFalse(class3.isInterface());
      assertEquals(1041, class3.getModifiers());
      assertFalse(class3.isArray());
      assertFalse(class3.isAnnotation());
      assertEquals("long", class3.toString());
      assertFalse(class3.isEnum());
      assertFalse(class3.isSynthetic());
      assertTrue(class3.isPrimitive());
      
      typeArray0[2] = (Type) class3;
      typeArray0[3] = (Type) null;
      typeArray0[4] = (Type) class0;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) null;
      typeArray0[7] = (Type) class2;
      typeArray0[8] = (Type) class0;
      Class<?> class4 = TypeUtils.getRawClass(typeArray0[7]);
      assertNotNull(class4);
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isPrimitive());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isArray());
      assertFalse(class4.isInterface());
      assertFalse(class4.isEnum());
      assertFalse(class4.isAnnotation());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.JSONPDeserializer", class4.toString());
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class4, typeArray0[8]);
      assertNotNull(parameterizedTypeImpl0);
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isPrimitive());
      assertEquals(1, class4.getModifiers());
      assertFalse(class4.isArray());
      assertFalse(class4.isInterface());
      assertFalse(class4.isEnum());
      assertFalse(class4.isAnnotation());
      assertEquals("class com.alibaba.fastjson.parser.deserializer.JSONPDeserializer", class4.toString());
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("d-g0`@m5)bCv[");
      assertNull(class0);
      
      BufferCapabilities.FlipContents bufferCapabilities_FlipContents0 = BufferCapabilities.FlipContents.COPIED;
      assertNotNull(bufferCapabilities_FlipContents0);
      
      MockNullPointerException mockNullPointerException0 = new MockNullPointerException();
      assertNotNull(mockNullPointerException0);
      
      mockNullPointerException0.printStackTrace();
      TimeDeserializer timeDeserializer0 = new TimeDeserializer();
      assertNotNull(timeDeserializer0);
      assertEquals(2, timeDeserializer0.getFastMatchToken());
      
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      assertNotNull(mockHijrahDate0);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp((Object) null);
      assertNull(timestamp0);
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      assertNotNull(jSONPDeserializer0);
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertNotNull(numberFormatException0);
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(numberFormatException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Class<Dimension> class0 = Dimension.class;
      Class<Object> class1 = Object.class;
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      
      long long0 = TypeUtils.fnv1a_64("getgetLocalizedMessage");
      assertEquals(1018107206021399397L, long0);
      
      Class class2 = (Class)TypeUtils.unwrapOptional(class0);
      assertNotNull(class2);
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isEnum());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isInterface());
      assertEquals("class java.awt.Dimension", class2.toString());
      assertFalse(class2.isArray());
      assertEquals(1, class2.getModifiers());
      assertFalse(class2.isPrimitive());
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>(48);
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Class<SQLNonTransientException> class0 = SQLNonTransientException.class;
      Class<Annotation> class1 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class1);
      assertNull(annotation0);
      
      Annotation annotation1 = TypeUtils.getAnnotation((Class<?>) class1, class1);
      assertNull(annotation1);
      
      Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("(C)Z");
      assertNotNull(negativeArraySizeException0);
      assertEquals("(C)Z", negativeArraySizeException0.getMessage());
      assertEquals("java.lang.NegativeArraySizeException: (C)Z", negativeArraySizeException0.toString());
      
      ThreadGroup threadGroup0 = new ThreadGroup("y[hmy5[cxf'YTIE");
      assertNotNull(threadGroup0);
      assertEquals("y[hmy5[cxf'YTIE", threadGroup0.getName());
      
      MockThread mockThread0 = new MockThread(threadGroup0, "java.awt.Font");
      assertNotNull(mockThread0);
      assertEquals("y[hmy5[cxf'YTIE", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      
      MockThread mockThread1 = new MockThread(threadGroup0, "getgetCause");
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("y[hmy5[cxf'YTIE", threadGroup0.getName());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("y[hmy5[cxf'YTIE", threadGroup0.getName());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertNotSame(mockThread1, mockThread0);
      
      Class<?> class0 = TypeUtils.loadClass("(C)Z", classLoader0);
      assertNull(class0);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("y[hmy5[cxf'YTIE", threadGroup0.getName());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertNotSame(mockThread1, mockThread0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      ClassLoader classLoader1 = mockThread1.getContextClassLoader();
      assertNotNull(classLoader1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("y[hmy5[cxf'YTIE", threadGroup0.getName());
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertNotSame(mockThread1, mockThread0);
      assertSame(classLoader1, classLoader0);
      
      long long0 = TypeUtils.fnv1a_64("getgetCause");
      assertEquals(4282710441940005972L, long0);
      
      // Undeclared exception!
      try { 
        TypeUtils.getSerializeFeatures((Class<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      boolean boolean1 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertTrue(class0.isPrimitive());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("fastjson.parser.deny");
      assertNotNull(threadGroup0);
      assertEquals("fastjson.parser.deny", threadGroup0.getName());
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, (String) null);
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("fastjson.parser.deny", threadGroup0.getName());
      assertNull(threadGroup1.getName());
      
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertTrue(parserConfig1.isAsmEnable());
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertNotSame(parserConfig1, parserConfig0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) type0, type0, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class<?> class0 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("class java.lang.String", class0.toString());
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertNotNull(class1);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("class java.lang.String", class0.toString());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("Ljava.util.concurrent.ConcurrentSkipListMap");
      assertNotNull(illegalThreadStateException0);
      assertEquals("java.lang.IllegalThreadStateException: Ljava.util.concurrent.ConcurrentSkipListMap", illegalThreadStateException0.toString());
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", illegalThreadStateException0.getMessage());
      
      Character character0 = Character.valueOf('J');
      assertNotNull(character0);
      assertEquals('J', (char)character0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      Boolean boolean0 = new Boolean(false);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Class<RuleBasedCollator> class2 = RuleBasedCollator.class;
      int int0 = TypeUtils.getSerializeFeatures(class2);
      assertEquals(0, int0);
      
      ParameterizedTypeImpl parameterizedTypeImpl1 = new ParameterizedTypeImpl((Type[]) null, class1, class2);
      assertNotNull(parameterizedTypeImpl1);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals("class java.lang.String", class0.toString());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      
      Properties properties0 = new Properties();
      assertNotNull(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) properties0, (ParameterizedType) parameterizedTypeImpl1, parserConfig0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
      
      Class<?> class0 = TypeUtils.getCollectionItemClass((Type) null);
      assertNotNull(class0);
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals("class java.lang.Object", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) genericArrayType0;
      typeArray0[1] = (Type) genericArrayType0;
      typeArray0[2] = (Type) class0;
      ThreadGroup threadGroup0 = new ThreadGroup("/Date(");
      assertNotNull(threadGroup0);
      assertEquals("/Date(", threadGroup0.getName());
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "LocalizedMessage");
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("/Date(", threadGroup0.getName());
      assertEquals("LocalizedMessage", threadGroup1.getName());
      
      MockThread mockThread0 = new MockThread(threadGroup1, "Z,TBa");
      assertNotNull(mockThread0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("/Date(", threadGroup0.getName());
      assertEquals("LocalizedMessage", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("/Date(", threadGroup0.getName());
      assertEquals("LocalizedMessage", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      
      Class<?> class1 = TypeUtils.loadClass("Z,TBa", classLoader0);
      assertNull(class1);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("/Date(", threadGroup0.getName());
      assertEquals("LocalizedMessage", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      
      typeArray0[3] = (Type) null;
      typeArray0[4] = (Type) genericArrayType0;
      typeArray0[5] = (Type) genericArrayType0;
      typeArray0[6] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[6], typeArray0[4]);
      assertNotNull(parameterizedTypeImpl0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("/Date(", threadGroup0.getName());
      assertEquals("LocalizedMessage", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      String string0 = parameterizedTypeImpl0.getTypeName();
      assertNotNull(string0);
      
      String string1 = parameterizedTypeImpl0.getTypeName();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      ParserConfig parserConfig0 = new ParserConfig(aSMDeserializerFactory0);
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertEquals("/Date(", threadGroup0.getName());
      assertEquals("LocalizedMessage", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) null, (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : com.alibaba.fastjson.util.ParameterizedTypeImpl@3fbf154a
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Type[] typeArray0 = new Type[6];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], typeArray0[2]);
      assertNotNull(parameterizedTypeImpl0);
      
      long long0 = TypeUtils.fnv1a_64_lower("Ghf}wmv0e'&!k=O");
      assertEquals(6592310187447408969L, long0);
      
      long long1 = TypeUtils.fnv1a_64("Ix\"U.2d8TwVN+w");
      assertFalse(long1 == long0);
      assertEquals((-5639507945255787302L), long1);
      
      Type type0 = TypeUtils.unwrapOptional(parameterizedTypeImpl0);
      assertNotNull(type0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-CtO9gsib~3Hai");
      assertFalse(boolean0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      JSONObject jSONObject0 = new JSONObject(false);
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble("no<-5mM];Mr3^|z/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      Class<LinkageError> class0 = LinkageError.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0, true);
      assertNotNull(serializeBeanInfo0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      assertNotNull(javaObjectDeserializer0);
      assertEquals(12, javaObjectDeserializer0.getFastMatchToken());
      
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("rLL&X_|");
      assertNotNull(negativeArraySizeException0);
      assertEquals("rLL&X_|", negativeArraySizeException0.getMessage());
      assertEquals("java.lang.NegativeArraySizeException: rLL&X_|", negativeArraySizeException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(negativeArraySizeException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.lang.NegativeArraySizeException: rLL&X_|
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<?> class0 = TypeUtils.loadClass("d-g0`0m5}bCv[");
      assertNull(class0);
      
      TreeMap<Float, SQLSyntaxErrorException> treeMap0 = new TreeMap<Float, SQLSyntaxErrorException>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      BiFunction<Object, SQLNonTransientException, SQLSyntaxErrorException> biFunction0 = (BiFunction<Object, SQLNonTransientException, SQLSyntaxErrorException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any(java.sql.SQLNonTransientException.class));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = treeMap0.compute(float0, biFunction0);
      assertNull(sQLSyntaxErrorException0);
      assertEquals(0, treeMap0.size());
      
      TreeMap<Float, SQLSyntaxErrorException> treeMap1 = new TreeMap<Float, SQLSyntaxErrorException>();
      assertNotNull(treeMap1);
      assertTrue(treeMap1.equals((Object)treeMap0));
      assertEquals(0, treeMap1.size());
      
      treeMap0.putAll(treeMap1);
      assertTrue(treeMap0.equals((Object)treeMap1));
      assertTrue(treeMap1.equals((Object)treeMap0));
      assertEquals(0, treeMap0.size());
      assertEquals(0, treeMap1.size());
      assertNotSame(treeMap0, treeMap1);
      assertNotSame(treeMap1, treeMap0);
      
      Map.Entry<Float, SQLSyntaxErrorException> map_Entry0 = treeMap1.pollFirstEntry();
      assertNull(map_Entry0);
      assertTrue(treeMap1.equals((Object)treeMap0));
      assertEquals(0, treeMap1.size());
      assertNotSame(treeMap1, treeMap0);
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
      
      Class<SQLTimeoutException> class1 = SQLTimeoutException.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class1, (Map<String, String>) null, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      
      Hashtable<NoSuchMethodException, Point> hashtable0 = new Hashtable<NoSuchMethodException, Point>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      StackTraceElementDeserializer stackTraceElementDeserializer0 = new StackTraceElementDeserializer();
      assertNotNull(stackTraceElementDeserializer0);
      assertEquals(12, stackTraceElementDeserializer0.getFastMatchToken());
      
      Class<MockSimpleDateFormat> class2 = MockSimpleDateFormat.class;
      MockSimpleDateFormat mockSimpleDateFormat0 = TypeUtils.cast((Object) treeMap1, class2, parserConfig0);
      assertNotNull(mockSimpleDateFormat0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(treeMap1.equals((Object)treeMap0));
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertEquals(0, treeMap1.size());
      assertNotSame(treeMap1, treeMap0);
      assertSame(classLoader0, classLoader1);
      
      Boolean boolean1 = Boolean.valueOf(false);
      assertNotNull(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(classLoader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : sun.misc.Launcher$AppClassLoader@6bc7c054
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      assertNotNull(javaObjectDeserializer0);
      assertEquals(12, javaObjectDeserializer0.getFastMatchToken());
      
      Class<Rectangle> class0 = Rectangle.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      Hashtable<NoSuchMethodException, Point> hashtable0 = new Hashtable<NoSuchMethodException, Point>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("b8$9WA<(^Q!gi\"XCyg");
      assertNotNull(threadGroup0);
      assertEquals("b8$9WA<(^Q!gi\"XCyg", threadGroup0.getName());
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, (String) null);
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("b8$9WA<(^Q!gi\"XCyg", threadGroup0.getName());
      assertNull(threadGroup1.getName());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) map0, (Type) class0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not get javaBeanDeserializer. java.awt.Rectangle
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      assertNotNull(negativeArraySizeException0);
      assertEquals("java.lang.NegativeArraySizeException", negativeArraySizeException0.toString());
      assertNull(negativeArraySizeException0.getMessage());
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      InterruptedException interruptedException0 = new InterruptedException();
      assertNotNull(interruptedException0);
      assertEquals("java.lang.InterruptedException", interruptedException0.toString());
      assertNull(interruptedException0.getMessage());
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.lang.AutoCloseable");
      assertNull(class0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort("parseBoolean error, field : ");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"parseBoolean error, field : \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "Ghf\\}wmv0e'&!k=O";
      Type[] typeArray0 = new Type[6];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], typeArray0[2]);
      assertNotNull(parameterizedTypeImpl0);
      
      String string1 = parameterizedTypeImpl0.getTypeName();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = Byte.compare((byte)32, (byte)32);
      assertEquals(0, int0);
      
      int int1 = Byte.toUnsignedInt((byte)32);
      assertFalse(int1 == int0);
      assertEquals(32, int1);
      
      boolean boolean0 = TypeUtils.isGenericParamType(parameterizedTypeImpl0);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBigInteger("Ghf}wmv0e'&!k=O");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("o");
      assertNull(class0);
      
      Class<JSONPDeserializer> class1 = JSONPDeserializer.class;
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      long long0 = TypeUtils.fnv1a_64_lower("Ljava.util.concurrent.ConcurrentSkipListMap");
      assertEquals((-4437036994051610544L), long0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized("o");
      assertTrue(boolean0);
      
      boolean boolean1 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter((Class<?>) null, stringArray0);
      assertNotNull(simplePropertyPreFilter0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5!R3T6I,keUs");
      assertNotNull(mockPrintWriter0);
      
      SerializeWriter serializeWriter0 = new SerializeWriter(mockPrintWriter0);
      assertNotNull(serializeWriter0);
      assertEquals(0, serializeWriter0.size());
      assertFalse(serializeWriter0.isNotWriteDefaultValue());
      assertTrue(serializeWriter0.isSortField());
      assertEquals(2048, serializeWriter0.getBufferLength());
      assertEquals((-1), serializeWriter0.getMaxBufSize());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setPackageAssertionStatus("getMessage", true);
      String[] stringArray1 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray1);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      Class<ClassLoader> class2 = ClassLoader.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) hashtable0, false);
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      List<FieldInfo> list1 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) hashtable0, false);
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotSame(list1, list0);
      
      Class<?> class3 = TypeUtils.loadClass("6r]VJO3QHyN;#>w%3");
      assertNull(class3);
      
      boolean boolean2 = TypeUtils.isNumber("getMessage");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        TypeUtils.getClass((Type) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Class<Field> class0 = Field.class;
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertEquals(0, linkedHashMap0.size());
      assertTrue(linkedHashMap0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = linkedHashMap0.put("fl", "fl");
      assertNull(string0);
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals(1, linkedHashMap0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      String string1 = linkedHashMap0.replace((String) null, (String) null);
      assertNull(string1);
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals(1, linkedHashMap0.size());
      
      String string2 = linkedHashMap0.put("\"-9223372036854775808\"", (String) null);
      assertNull(string2);
      assertEquals(2, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      
      String string3 = "yyyy-MM-dd HH:mm:ss.SSS";
      String string4 = linkedHashMap0.put("9lb`&Fm^7>", "\"-9223372036854775808\"");
      assertNull(string4);
      assertEquals(3, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = linkedHashMap0.computeIfPresent("yyyy-MM-dd HH:mm:ss.SSS", biFunction0);
      assertNull(string5);
      assertEquals(3, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) linkedHashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
      assertEquals(3, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      
      String string6 = TypeUtils.castToString("yyyy-MM-dd HH:mm:ss.SSS");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      
      Constructor<String>[] constructorArray0 = (Constructor<String>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Boolean boolean0 = new Boolean("</");
      assertNotNull(boolean0);
      assertFalse(boolean0);
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(class1);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertEquals("boolean", class0.toString());
      assertEquals("class [Z", class1.toString());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertTrue(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      
      ThreadGroup threadGroup0 = new ThreadGroup("</");
      assertNotNull(threadGroup0);
      assertEquals("</", threadGroup0.getName());
      
      LongBinaryOperator longBinaryOperator0 = mock(LongBinaryOperator.class, new ViolatedAssumptionAnswer());
      Class<Object> class2 = Object.class;
      ThreadGroup threadGroup1 = (ThreadGroup)TypeUtils.castToJavaBean((Object) threadGroup0, class2);
      assertNotNull(threadGroup1);
      assertEquals("</", threadGroup0.getName());
      assertEquals("</", threadGroup1.getName());
      assertSame(threadGroup0, threadGroup1);
      assertSame(threadGroup1, threadGroup0);
      
      Locale locale0 = Locale.forLanguageTag("next");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("next", locale0.toString());
      assertEquals("next", locale0.getLanguage());
      
      ThreadGroup threadGroup2 = new ThreadGroup((String) null);
      assertNotNull(threadGroup2);
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertNull(threadGroup2.getName());
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      Type[] typeArray0 = new Type[8];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class2;
      typeArray0[2] = (Type) class2;
      typeArray0[3] = (Type) class2;
      JSONArray jSONArray0 = new JSONArray();
      assertNotNull(jSONArray0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      Type type0 = jSONArray0.getComponentType();
      assertNull(type0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertTrue(jSONArray0.isEmpty());
      assertEquals(0, jSONArray0.size());
      
      typeArray0[4] = null;
      typeArray0[5] = (Type) class0;
      typeArray0[6] = (Type) class2;
      typeArray0[7] = (Type) class1;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class2, typeArray0[7]);
      assertNotNull(parameterizedTypeImpl0);
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "</", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Class<?> class0 = TypeUtils.getCollectionItemClass(parameterizedTypeImpl0);
      assertNotNull(class0);
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("class java.lang.String", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isPrimitive());
      
      Class class1 = (Class)TypeUtils.unwrapOptional(class0);
      assertNotNull(class1);
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("class java.lang.String", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isPrimitive());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      
      Character character0 = Character.valueOf('J');
      assertNotNull(character0);
      assertEquals('J', (char)character0);
      
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      assertNotNull(mockDateFormat0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("Ljava.util.concurrent.ConcurrentSkipListMap");
      assertNotNull(threadGroup0);
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", threadGroup0.getName());
      
      ThreadGroup threadGroup1 = new ThreadGroup("null");
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("null", threadGroup1.getName());
      
      ThreadGroup threadGroup2 = new ThreadGroup(threadGroup0, "getSuppressed");
      assertNotNull(threadGroup2);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", threadGroup0.getName());
      assertEquals("getSuppressed", threadGroup2.getName());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("]3Kq>o${*kR*]:c_?");
      assertNotNull(sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("]3Kq>o${*kR*]:c_?", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ]3Kq>o${*kR*]:c_?", sQLSyntaxErrorException0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      JSONObject jSONObject0 = (JSONObject)JSON.toJSON((Object) threadGroup2, serializeConfig0);
      assertNotNull(jSONObject0);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertFalse(threadGroup0.equals((Object)threadGroup2));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertEquals("Ljava.util.concurrent.ConcurrentSkipListMap", threadGroup0.getName());
      assertEquals("getSuppressed", threadGroup2.getName());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertEquals(5, jSONObject0.size());
      assertFalse(jSONObject0.isEmpty());
      assertNotSame(threadGroup0, threadGroup2);
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup2, threadGroup1);
      assertNotSame(threadGroup2, threadGroup0);
      
      MockThread mockThread0 = new MockThread(threadGroup1, "getSuppressed");
      assertNotNull(mockThread0);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertEquals("null", threadGroup1.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      MockThread mockThread1 = new MockThread(threadGroup1, "yyyy-MM-dd HH:mm:ss");
      assertNotNull(mockThread1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("null", threadGroup1.getName());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      
      ClassLoader classLoader0 = mockThread1.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("null", threadGroup1.getName());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(threadGroup1, threadGroup2);
      assertNotSame(mockThread1, mockThread0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("null", threadGroup1.getName());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      
      aSMDeserializerFactory0.classLoader.setClassAssertionStatus("Ljava.util.concurrent.ConcurrentSkipListMap", true);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup1.equals((Object)threadGroup2));
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals("null", threadGroup1.getName());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      assertFalse(mockThread1.isInterrupted());
      assertNotSame(threadGroup1, threadGroup0);
      assertNotSame(threadGroup1, threadGroup2);
      assertNotSame(mockThread1, mockThread0);
      
      InterruptedException interruptedException0 = new InterruptedException("java.util.Optional");
      assertNotNull(interruptedException0);
      assertEquals("java.lang.InterruptedException: java.util.Optional", interruptedException0.toString());
      assertEquals("java.util.Optional", interruptedException0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) serializeConfig0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // exepct '[', but {, pos 1, json : {\"asmEnable\":true,\"typeKey\":\"@type\"}
         //
         verifyException("com.alibaba.fastjson.parser.DefaultJSONParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1971, ".{");
      assertNotNull(simpleTimeZone0);
      assertEquals(1971, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(".{", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=.{,offset=1971,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      simpleTimeZone0.setDSTSavings(1971);
      assertEquals(1971, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(".{", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=.{,offset=1971,dstSavings=1971,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      String string0 = TypeUtils.castToString(simpleTimeZone0);
      assertNotNull(string0);
      assertEquals(1971, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(".{", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=.{,offset=1971,dstSavings=1971,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      Collection collection0 = TypeUtils.createCollection(parameterizedTypeImpl0);
      assertNotNull(collection0);
      
      boolean boolean0 = TypeUtils.isNumber("9");
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-687);
      intArray0[1] = (-687);
      intArray0[2] = (-687);
      intArray0[3] = 1971;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("java.util.SimpleTimeZone@0000000001", intArray0);
      assertNotNull(batchUpdateException0);
      assertArrayEquals(new int[] {(-687), (-687), (-687), 1971}, intArray0);
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToInt(identityHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to int, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      LinkedHashMap linkedHashMap1 = (LinkedHashMap)linkedHashMap0.clone();
      assertNotNull(linkedHashMap1);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertEquals(0, linkedHashMap1.size());
      assertTrue(linkedHashMap1.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ClassLoader classLoader0 = aSMClassLoader0.getParent();
      assertNull(classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMDeserializerFactory0.classLoader);
      assertNotNull(aSMDeserializerFactory1);
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      
      ASMClassLoader aSMClassLoader1 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader1);
      assertSame(aSMClassLoader1, aSMClassLoader0);
      
      String string0 = linkedHashMap0.put("fl", "x.[ )5`.GBuIQ{~m;K");
      assertNull(string0);
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals(1, linkedHashMap0.size());
      
      Class<?> class0 = TypeUtils.loadClass("can not cast to long, value : ", (ClassLoader) null, true);
      assertNull(class0);
      
      Class<SQLDataException> class1 = SQLDataException.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class1).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("&E@CWkG.8=aog06EI");
      assertNotNull(threadGroup0);
      assertEquals("&E@CWkG.8=aog06EI", threadGroup0.getName());
      
      ThreadGroup threadGroup1 = threadGroup0.getParent();
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("&E@CWkG.8=aog06EI", threadGroup0.getName());
      assertEquals("Test_Execution_Group", threadGroup1.getName());
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      
      ThreadGroup threadGroup2 = new ThreadGroup(threadGroup0, "boole");
      assertNotNull(threadGroup2);
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertEquals("boole", threadGroup2.getName());
      assertEquals("&E@CWkG.8=aog06EI", threadGroup0.getName());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "4.auOzV>wg)9Mk#Ct", (Type) null, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Class<java.sql.Date> class0 = java.sql.Date.class;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.WriteMapNullValue;
      serializerFeatureArray0[0] = serializerFeature0;
      ThreadGroup threadGroup0 = new ThreadGroup("ident");
      assertNotNull(threadGroup0);
      assertEquals("ident", threadGroup0.getName());
      
      MockThread mockThread0 = new MockThread(threadGroup0, "java.util.Optional");
      assertNotNull(mockThread0);
      assertEquals("ident", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertEquals("ident", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertEquals("ident", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      StackTraceElement[] stackTraceElementArray0 = mockThread0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertEquals("ident", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      Class<?> class1 = TypeUtils.loadClass("java.util.Optional", (ClassLoader) aSMClassLoader0, false);
      assertNotNull(class1);
      assertEquals("ident", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertEquals("class java.util.Optional", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNotNull(noSuchMethodException0);
      assertNull(noSuchMethodException0.getMessage());
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "java.util.Optional", (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.util.Optional
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@lja=9ly|Gc");
      assertFalse(boolean0);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
      
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      assertNotNull(javaObjectDeserializer0);
      assertEquals(12, javaObjectDeserializer0.getFastMatchToken());
      
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("rLL&X_|");
      assertNotNull(negativeArraySizeException0);
      assertEquals("rLL&X_|", negativeArraySizeException0.getMessage());
      assertEquals("java.lang.NegativeArraySizeException: rLL&X_|", negativeArraySizeException0.toString());
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException0.forEach(consumer0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToSqlDate(sQLNonTransientConnectionException0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : java.sql.SQLNonTransientConnectionException
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@lja=9ly|Gc");
      assertFalse(boolean0);
      
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      assertNotNull(propertyProcessableDeserializer0);
      assertEquals(12, propertyProcessableDeserializer0.getFastMatchToken());
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      Class<Short> class1 = Short.class;
      Vector<FieldInfo> vector0 = new Vector<FieldInfo>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Class<TimeZone> class2 = TimeZone.class;
      Class<DataTruncation> class3 = DataTruncation.class;
      int int0 = TypeUtils.getSerializeFeatures(class3);
      assertEquals(0, int0);
      
      Type[] typeArray0 = new Type[1];
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      classLoader1.setClassAssertionStatus((String) null, false);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      InterruptedException interruptedException0 = new InterruptedException((String) null);
      assertNotNull(interruptedException0);
      assertNull(interruptedException0.getMessage());
      assertEquals("java.lang.InterruptedException", interruptedException0.toString());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(interruptedException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertNull(interruptedException0.getMessage());
      assertEquals("java.lang.InterruptedException", interruptedException0.toString());
      assertEquals("java.lang.InterruptedException", sQLTransactionRollbackException0.getMessage());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertNull(sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: java.lang.InterruptedException", sQLTransactionRollbackException0.toString());
      
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class2, class1);
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) sQLTransactionRollbackException0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.lang.Short
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(15, false);
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature0;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      assertNotNull(propertyProcessableDeserializer0);
      assertEquals(12, propertyProcessableDeserializer0.getFastMatchToken());
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      Class<Short> class1 = Short.class;
      Class<MessageFormat> class2 = MessageFormat.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) identityHashMap0, true);
      assertNotNull(list0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Class<StackTraceElement> class3 = StackTraceElement.class;
      int int0 = TypeUtils.getSerializeFeatures(class3);
      assertEquals(0, int0);
      
      Type[] typeArray0 = new Type[3];
      typeArray0[0] = (Type) propertyProcessableDeserializer0.type;
      Class<?> class4 = TypeUtils.getRawClass(class1);
      assertNotNull(class4);
      assertFalse(class4.isPrimitive());
      assertFalse(class4.isInterface());
      assertEquals(17, class4.getModifiers());
      assertEquals("class java.lang.Short", class4.toString());
      assertFalse(class4.isEnum());
      assertFalse(class4.isSynthetic());
      assertFalse(class4.isArray());
      assertFalse(class4.isAnnotation());
      
      typeArray0[1] = (Type) class4;
      typeArray0[2] = (Type) class2;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[1], typeArray0[2]);
      assertNotNull(parameterizedTypeImpl0);
      
      String string0 = File.pathSeparator;
      assertNotNull(string0);
      assertEquals(":", string0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader1);
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) ":", (ParameterizedType) parameterizedTypeImpl0, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // default constructor not found. class java.text.MessageFormat
         //
         verifyException("com.alibaba.fastjson.util.JavaBeanInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)3;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[4] = (byte) (-117);
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Class<NoSuchMethodException> class0 = NoSuchMethodException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      Type[] typeArray0 = new Type[5];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[2], typeArray0[0]);
      assertNotNull(parameterizedTypeImpl0);
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) byteArray0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // create asm serializer error, class byte
         //
         verifyException("com.alibaba.fastjson.serializer.SerializeConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TreeMap<Float, SQLSyntaxErrorException> treeMap0 = new TreeMap<Float, SQLSyntaxErrorException>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      ConcurrentHashMap<Float, SQLSyntaxErrorException> concurrentHashMap0 = new ConcurrentHashMap<Float, SQLSyntaxErrorException>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      Float float0 = new Float((-1.0));
      assertNotNull(float0);
      assertEquals((-1.0F), (float)float0, 0.01F);
      
      BiFunction<Object, SQLException, SQLSyntaxErrorException> biFunction0 = (BiFunction<Object, SQLException, SQLSyntaxErrorException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any(java.sql.SQLException.class));
      SQLSyntaxErrorException sQLSyntaxErrorException0 = treeMap0.compute(float0, biFunction0);
      assertNull(sQLSyntaxErrorException0);
      assertEquals(0, treeMap0.size());
      
      treeMap0.putAll(concurrentHashMap0);
      assertEquals(0, treeMap0.size());
      assertTrue(concurrentHashMap0.isEmpty());
      
      Map.Entry<Float, SQLSyntaxErrorException> map_Entry0 = treeMap0.pollFirstEntry();
      assertNull(map_Entry0);
      assertEquals(0, treeMap0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong("(C)Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : (C)Z
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
      
      Class<Byte> class0 = Byte.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(class1);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class [B", class1.toString());
      assertTrue(class1.isArray());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory1 = new ASMDeserializerFactory(aSMClassLoader0);
      assertNotNull(aSMDeserializerFactory1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(aSMDeserializerFactory1.equals((Object)aSMDeserializerFactory0));
      
      byte[] byteArray0 = TypeUtils.castToBytes("t J.3Ga*5gR#*$azNR");
      assertNotNull(byteArray0);
      
      Class<Annotation> class2 = Annotation.class;
      Class<Annotation> class3 = Annotation.class;
      Annotation annotation0 = TypeUtils.getAnnotation((Class<?>) class0, class3);
      assertNull(annotation0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertSame(class3, class2);
      
      Class<NegativeArraySizeException> class4 = NegativeArraySizeException.class;
      int int0 = TypeUtils.getParserFeatures(class4);
      assertEquals(0, int0);
      
      Locale locale0 = TypeUtils.toLocale("kotlin.jvm.internal.DefaultConstructorMarker");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("kotlin.jvm.internal.defaultconstructormarker", locale0.toString());
      assertEquals("kotlin.jvm.internal.defaultconstructormarker", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      boolean boolean1 = TypeUtils.isGenericParamType(class2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(class2, class3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ParserConfig parserConfig0 = new ParserConfig(true);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Properties properties0 = TypeUtils.cast((Object) null, (Type) class2, parserConfig0);
      assertNull(properties0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertSame(class2, class3);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      assertNotNull(javaObjectDeserializer0);
      assertEquals(12, javaObjectDeserializer0.getFastMatchToken());
      
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 8);
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters(class0, map0);
      assertNotNull(list0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Locale locale0 = TypeUtils.toLocale("!&L<A0aWw");
      assertNotNull(locale0);
      assertEquals("!&l<a0aww", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("!&l<a0aww", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("!&l<a0aww", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("!&l<a0aww", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("!&l<a0aww", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("!&l<a0aww", locale1.toString());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      assertNotNull(imageCapabilities0);
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      
      ImageCapabilities imageCapabilities1 = (ImageCapabilities)imageCapabilities0.clone();
      assertNotNull(imageCapabilities1);
      assertFalse(imageCapabilities1.equals((Object)imageCapabilities0));
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities1.isTrueVolatile());
      assertFalse(imageCapabilities1.isAccelerated());
      assertNotSame(imageCapabilities0, imageCapabilities1);
      assertNotSame(imageCapabilities1, imageCapabilities0);
      
      ImageCapabilities imageCapabilities2 = (ImageCapabilities)imageCapabilities0.clone();
      assertNotNull(imageCapabilities2);
      assertFalse(imageCapabilities0.equals((Object)imageCapabilities1));
      assertFalse(imageCapabilities2.equals((Object)imageCapabilities0));
      assertFalse(imageCapabilities2.equals((Object)imageCapabilities1));
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities2.isTrueVolatile());
      assertFalse(imageCapabilities2.isAccelerated());
      assertNotSame(imageCapabilities0, imageCapabilities2);
      assertNotSame(imageCapabilities0, imageCapabilities1);
      assertNotSame(imageCapabilities2, imageCapabilities0);
      assertNotSame(imageCapabilities2, imageCapabilities1);
      
      TreeMap<DecimalFormat, DecimalFormatSymbols> treeMap0 = new TreeMap<DecimalFormat, DecimalFormatSymbols>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Date, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("Ljava.util.concurrent.ConcurrentSkipListMap");
      assertEquals((-4437036994051610544L), long0);
      
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
      
      Feature feature0 = Feature.OrderedField;
      Feature[] featureArray0 = new Feature[8];
      featureArray0[4] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      featureArray0[5] = feature0;
      featureArray0[7] = feature0;
      Locale locale0 = TypeUtils.toLocale("Rt_<(33MiGiE1");
      assertNotNull(locale0);
      assertEquals("<(33MIGIE1", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("rt_<(33MIGIE1", locale0.toString());
      assertEquals("rt", locale0.getLanguage());
      
      double double1 = Double.sum((-903.6), 3.0);
      assertEquals((-900.6), double1, 0.01);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("<(33MIGIE1", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("rt_<(33MIGIE1", locale0.toString());
      assertEquals("rt", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("<(33MIGIE1", locale1.getCountry());
      assertEquals("rt_<(33MIGIE1", locale1.toString());
      assertEquals("rt", locale1.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      
      Date date0 = TypeUtils.castToDate((Object) null);
      assertNull(date0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : rt_<(33MIGIE1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(class1);
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertTrue(class1.isArray());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("class [Z", class1.toString());
      
      ThreadGroup threadGroup0 = new ThreadGroup("</");
      assertNotNull(threadGroup0);
      assertEquals("</", threadGroup0.getName());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class2 = TypeUtils.loadClass("/Date(", (ClassLoader) aSMClassLoader0, false);
      assertNull(class2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      String string0 = TypeUtils.decapitalize("5_U.'te+c");
      assertNotNull(string0);
      assertEquals("5_U.'te+c", string0);
      
      Class<JavaBeanDeserializer> class3 = JavaBeanDeserializer.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class3);
      assertNull(stringArray0);
      
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn((Type) null).when(genericArrayType1).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType1);
      assertNotNull(type0);
      
      boolean boolean1 = TypeUtils.isNumber("5_U.'te+c");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      Class<MockThaiBuddhistDate> class4 = MockThaiBuddhistDate.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class4, (Map<String, String>) concurrentHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      Class<Time> class5 = Time.class;
      boolean boolean2 = TypeUtils.isPath(class5);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      long long0 = TypeUtils.fnv1a_64_lower("5_U.'te+c");
      assertEquals((-8375148278288208363L), long0);
      
      Class<?> class6 = TypeUtils.getClassFromMapping("</");
      assertNull(class6);
      
      Type type1 = TypeUtils.getGenericParamType((Type) null);
      assertNull(type1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithJavaBean;
      assertTrue(boolean0);
      
      ParserConfig parserConfig0 = new ParserConfig();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      boolean boolean1 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("boolean", class0.toString());
      assertFalse(class0.isAnnotation());
      
      ThreadGroup threadGroup0 = new ThreadGroup("fastjson.parser.deny");
      assertNotNull(threadGroup0);
      assertEquals("fastjson.parser.deny", threadGroup0.getName());
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, (String) null);
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("fastjson.parser.deny", threadGroup0.getName());
      assertNull(threadGroup1.getName());
      
      ParserConfig parserConfig1 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig1.fieldBased);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      assertNotSame(parserConfig1, parserConfig0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      Boolean boolean2 = TypeUtils.castToBoolean((Object) null);
      assertNull(boolean2);
      
      NumberDeserializer numberDeserializer0 = NumberDeserializer.instance;
      assertNotNull(numberDeserializer0);
      assertEquals(2, numberDeserializer0.getFastMatchToken());
      
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(340);
      assertNotNull(zoneOffset0);
      
      LocalTime localTime0 = MockLocalTime.now((ZoneId) zoneOffset0);
      assertNotNull(localTime0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TypeUtils.clearClassMapping();
      TreeMap<Float, SQLSyntaxErrorException> treeMap0 = new TreeMap<Float, SQLSyntaxErrorException>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      Float float0 = new Float(254.360653034);
      assertNotNull(float0);
      assertEquals(254.36066F, (float)float0, 0.01F);
      
      Map.Entry<Float, SQLSyntaxErrorException> map_Entry0 = treeMap0.pollFirstEntry();
      assertNull(map_Entry0);
      assertEquals(0, treeMap0.size());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-69);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-69), (byte) (-69), (byte) (-70), (byte) (-69), (byte) (-69)}, byteArray0);
      assertFalse(boolean0);
      
      int int0 = Byte.compare((byte) (-116), (byte) (-91));
      assertEquals((-25), int0);
      
      int int1 = Byte.toUnsignedInt((byte) (-69));
      assertFalse(int1 == int0);
      assertEquals(187, int1);
      
      boolean boolean1 = TypeUtils.compatibleWithJavaBean;
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      BigInteger bigInteger0 = TypeUtils.castToBigInteger(float0);
      assertNotNull(bigInteger0);
      assertEquals((byte) (-2), bigInteger0.byteValue());
      assertEquals((short)254, bigInteger0.shortValue());
      
      Locale locale0 = TypeUtils.toLocale("");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Class<MockHijrahDate> class0 = MockHijrahDate.class;
      boolean boolean2 = TypeUtils.isProxy(class0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      TimeDeserializer timeDeserializer0 = TimeDeserializer.instance;
      assertNotNull(timeDeserializer0);
      assertEquals(2, timeDeserializer0.getFastMatchToken());
      
      Class<?> class1 = TypeUtils.getClassFromMapping("");
      assertNull(class1);
      
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      assertNotNull(defaultJSONParser0);
      assertEquals(0, DefaultJSONParser.NONE);
      assertEquals(0, defaultJSONParser0.resolveStatus);
      assertEquals(1, DefaultJSONParser.NeedToResolve);
      assertEquals(2, DefaultJSONParser.TypeNameRedirect);
      assertEquals(0, defaultJSONParser0.getResolveStatus());
      assertEquals("yyyy-MM-dd HH:mm:ss", defaultJSONParser0.getDateFomartPattern());
      
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      Object object0 = null;
      DefaultJSONParser defaultJSONParser1 = null;
      try {
        defaultJSONParser1 = new DefaultJSONParser((Object) null, defaultJSONParser0.lexer, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // EOF error
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException("(C)Z");
      assertNotNull(negativeArraySizeException0);
      assertEquals("(C)Z", negativeArraySizeException0.getMessage());
      assertEquals("java.lang.NegativeArraySizeException: (C)Z", negativeArraySizeException0.toString());
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Float float0 = new Float(1367.137);
      assertNotNull(float0);
      assertEquals(1367.137F, (float)float0, 0.01F);
      
      TreeMap<Float, SQLSyntaxErrorException> treeMap0 = new TreeMap<Float, SQLSyntaxErrorException>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      TreeMap<Float, SQLSyntaxErrorException> treeMap1 = new TreeMap<Float, SQLSyntaxErrorException>((SortedMap<Float, ? extends SQLSyntaxErrorException>) treeMap0);
      assertNotNull(treeMap1);
      assertTrue(treeMap1.equals((Object)treeMap0));
      assertEquals(0, treeMap0.size());
      assertEquals(0, treeMap1.size());
      
      Map.Entry<Float, SQLSyntaxErrorException> map_Entry0 = treeMap1.pollFirstEntry();
      assertNull(map_Entry0);
      assertTrue(treeMap0.equals((Object)treeMap1));
      assertTrue(treeMap1.equals((Object)treeMap0));
      assertEquals(0, treeMap0.size());
      assertEquals(0, treeMap1.size());
      assertNotSame(treeMap0, treeMap1);
      assertNotSame(treeMap1, treeMap0);
      
      NavigableMap<Float, SQLSyntaxErrorException> navigableMap0 = treeMap0.headMap(float0, true);
      assertNotNull(navigableMap0);
      assertTrue(treeMap0.equals((Object)treeMap1));
      assertEquals(0, treeMap0.size());
      assertTrue(navigableMap0.isEmpty());
      assertEquals(0, navigableMap0.size());
      assertNotSame(treeMap0, treeMap1);
      
      Long long0 = TypeUtils.castToLong((Object) null);
      assertNull(long0);
      
      ConcurrentHashMap<SQLInvalidAuthorizationSpecException, java.sql.Date> concurrentHashMap0 = new ConcurrentHashMap<SQLInvalidAuthorizationSpecException, java.sql.Date>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToShort(concurrentHashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to short, value : {}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = TypeUtils.isAnnotationPresentManyToMany((Method) null);
      assertFalse(boolean0);
      
      Class<Byte> class0 = Byte.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertEquals(1041, class0.getModifiers());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertEquals("byte", class0.toString());
      assertFalse(class0.isSynthetic());
      
      Type[] typeArray0 = new Type[7];
      typeArray0[0] = (Type) class0;
      typeArray0[1] = (Type) class0;
      typeArray0[2] = (Type) class0;
      typeArray0[3] = (Type) class0;
      typeArray0[4] = (Type) class0;
      Class<Boolean> class1 = Boolean.TYPE;
      assertNotNull(class1);
      assertTrue(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertEquals("boolean", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      
      typeArray0[6] = (Type) class1;
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("I");
      assertNotNull(threadGroup0);
      assertEquals("I", threadGroup0.getName());
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, (String) null);
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("I", threadGroup0.getName());
      assertNull(threadGroup1.getName());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      MapDeserializer mapDeserializer0 = MapDeserializer.instance;
      assertNotNull(mapDeserializer0);
      assertEquals(12, mapDeserializer0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) mapDeserializer0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : com.alibaba.fastjson.parser.deserializer.MapDeserializer@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedHashMap<String, String> linkedHashMap0 = new LinkedHashMap<String, String>();
      assertNotNull(linkedHashMap0);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      
      LinkedHashMap linkedHashMap1 = (LinkedHashMap)linkedHashMap0.clone();
      assertNotNull(linkedHashMap1);
      assertTrue(linkedHashMap0.isEmpty());
      assertEquals(0, linkedHashMap0.size());
      assertEquals(0, linkedHashMap1.size());
      assertTrue(linkedHashMap1.isEmpty());
      
      String string0 = linkedHashMap0.put("fl", "fl");
      assertNull(string0);
      assertEquals(1, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      
      String string1 = TypeUtils.decapitalize((String) null);
      assertNull(string1);
      
      String string2 = linkedHashMap0.put("YZ:s{s(|.6crW_2y4", "_F");
      assertNull(string2);
      assertEquals(2, linkedHashMap0.size());
      assertFalse(linkedHashMap0.isEmpty());
      
      String string3 = linkedHashMap0.put("9lb`&Fm^7>", "\"-922337203685477588\"");
      assertNull(string3);
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals(3, linkedHashMap0.size());
      
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string4 = linkedHashMap0.computeIfPresent("yyyy-MM-dd HH:mm:ss.SSS", biFunction0);
      assertNull(string4);
      assertFalse(linkedHashMap0.isEmpty());
      assertEquals(3, linkedHashMap0.size());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<?> class0 = TypeUtils.loadClass((String) null);
      assertNull(class0);
      
      ParserConfig parserConfig1 = new ParserConfig();
      assertNotNull(parserConfig1);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig1.compatibleWithJavaBean);
      assertFalse(parserConfig1.fieldBased);
      assertFalse(parserConfig1.equals((Object)parserConfig0));
      assertFalse(parserConfig1.isAutoTypeSupport());
      assertTrue(parserConfig1.isAsmEnable());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "\"-922337203685477588\"", (Type) null, parserConfig1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : null
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("o");
      assertNull(class0);
      
      int int0 = AffineTransform.TYPE_QUADRANT_ROTATION;
      assertEquals(8, int0);
      
      String string0 = "Ljava.util.concurrent.ConcurrentSkipListMap";
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("Ljava.util.concurrent.ConcurrentSkipListMap");
      assertEquals((-4437036994051610544L), long0);
      
      boolean boolean1 = TypeUtils.isHibernateInitialized("o");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
      
      boolean boolean2 = TypeUtils.isGenericParamType((Type) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Feature feature0 = Feature.OrderedField;
      Feature[] featureArray0 = new Feature[8];
      featureArray0[4] = feature0;
      featureArray0[2] = feature0;
      featureArray0[3] = feature0;
      featureArray0[4] = feature0;
      Constructor<Long>[] constructorArray0 = (Constructor<Long>[]) Array.newInstance(Constructor.class, 0);
      Constructor constructor0 = TypeUtils.getKoltinConstructor(constructorArray0);
      assertNull(constructor0);
      
      // Undeclared exception!
      try { 
        TypeUtils.setAccessible((AccessibleObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Byte byte0 = TypeUtils.castToByte((Object) null);
      assertNull(byte0);
      
      int int0 = Opcodes.IOR;
      assertEquals(128, int0);
      
      long long0 = Byte.toUnsignedLong((byte) (-127));
      assertEquals(129L, long0);
      
      Object object0 = null;
      Time time0 = TypeUtils.castToSqlTime((Object) null);
      assertNull(time0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.setDefaultAssertionStatus(true);
      Class<?> class0 = TypeUtils.loadClass("[char", classLoader0);
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertTrue(class0.isArray());
      assertEquals("class [C", class0.toString());
      assertFalse(class0.isInterface());
      assertEquals(1041, class0.getModifiers());
      
      ThreadGroup threadGroup0 = new ThreadGroup("\"g\"oF~CiuVY");
      assertNotNull(threadGroup0);
      assertEquals("\"g\"oF~CiuVY", threadGroup0.getName());
      
      String string0 = "+|IA~(3";
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "+|IA~(3");
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("\"g\"oF~CiuVY", threadGroup0.getName());
      assertEquals("+|IA~(3", threadGroup1.getName());
      
      ParserConfig parserConfig0 = null;
      // Undeclared exception!
      try { 
        TimeUnit.valueOf("[char");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.concurrent.TimeUnit.[char
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = TypeUtils.compatibleWithFieldName;
      assertTrue(boolean0);
      
      Class<Boolean> class0 = Boolean.TYPE;
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("boolean", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Class class1 = (Class)TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(class1);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertTrue(class0.isPrimitive());
      assertEquals("boolean", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertTrue(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("class [Z", class1.toString());
      assertFalse(class1.isInterface());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      
      ThreadGroup threadGroup0 = new ThreadGroup("</");
      assertNotNull(threadGroup0);
      assertEquals("</", threadGroup0.getName());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader1);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class2 = TypeUtils.loadClass("/Date(", (ClassLoader) aSMClassLoader0, false);
      assertNull(class2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<JavaBeanDeserializer> class3 = JavaBeanDeserializer.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class3);
      assertNull(stringArray0);
      
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType1).toString();
      doReturn((Class<?>) null).when(genericArrayType1).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType1);
      assertNotNull(type0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "4.auOzV>wg)9Mk#Ct");
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("</", threadGroup0.getName());
      assertEquals("4.auOzV>wg)9Mk#Ct", threadGroup1.getName());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "/Date(", (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : [Z
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeUtils.castToTimestamp("(C)Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to Timestamp, value : (C)Z
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NegativeArraySizeException negativeArraySizeException0 = new NegativeArraySizeException();
      assertNotNull(negativeArraySizeException0);
      assertEquals("java.lang.NegativeArraySizeException", negativeArraySizeException0.toString());
      assertNull(negativeArraySizeException0.getMessage());
      
      Boolean boolean0 = Boolean.TRUE;
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      InterruptedException interruptedException0 = new InterruptedException("getSuppressed");
      assertNotNull(interruptedException0);
      assertEquals("getSuppressed", interruptedException0.getMessage());
      assertEquals("java.lang.InterruptedException: getSuppressed", interruptedException0.toString());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "getSuppressed");
      assertFalse(boolean1);
      
      Class<?> class0 = TypeUtils.loadClass("Ljava.lang.AutoCloseable");
      assertNull(class0);
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithFieldName);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      
      Character character0 = TypeUtils.castToChar((Object) null);
      assertNull(character0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(15, true);
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      
      Class<java.sql.Date> class0 = java.sql.Date.class;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[1] = serializerFeature1;
      ThreadGroup threadGroup0 = new ThreadGroup("ident");
      assertNotNull(threadGroup0);
      assertEquals("ident", threadGroup0.getName());
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "]3Kq>o${*kR*]:c_?");
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("ident", threadGroup0.getName());
      assertEquals("]3Kq>o${*kR*]:c_?", threadGroup1.getName());
      
      MockThread mockThread0 = new MockThread(threadGroup0, "java.util.Optional");
      assertNotNull(mockThread0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertEquals("ident", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertEquals("ident", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotSame(threadGroup0, threadGroup1);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertEquals("ident", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      MockThread mockThread1 = new MockThread();
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertFalse(mockThread1.isInterrupted());
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isDaemon());
      
      StackTraceElement[] stackTraceElementArray0 = mockThread0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertEquals("ident", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(mockThread0, mockThread1);
      
      Class<?> class1 = TypeUtils.loadClass("java.util.Optional", (ClassLoader) aSMClassLoader0, false);
      assertNotNull(class1);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertEquals("class java.util.Optional", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      assertEquals("ident", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(mockThread0, mockThread1);
      
      String string0 = TypeUtils.decapitalize("@type");
      assertNotNull(string0);
      assertEquals("@type", string0);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      Integer integer0 = new Integer(3089);
      assertNotNull(integer0);
      assertEquals(3089, (int)integer0);
      
      Float float0 = TypeUtils.castToFloat(integer0);
      assertNotNull(float0);
      assertEquals(3089.0F, (float)float0, 0.01F);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertTrue(identityHashMap0.isEmpty());
      assertEquals(0, identityHashMap0.size());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) hashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("@type");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : @type
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(15, true);
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      
      Class<java.sql.Date> class0 = java.sql.Date.class;
      SerializeConfig serializeConfig0 = SerializeConfig.globalInstance;
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[1] = serializerFeature1;
      ThreadGroup threadGroup0 = new ThreadGroup("ident");
      assertNotNull(threadGroup0);
      assertEquals("ident", threadGroup0.getName());
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "]3Kq>o${*kR*]:c_?");
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("ident", threadGroup0.getName());
      assertEquals("]3Kq>o${*kR*]:c_?", threadGroup1.getName());
      
      MockThread mockThread0 = new MockThread(threadGroup0, "java.util.Optional");
      assertNotNull(mockThread0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertEquals("ident", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertEquals("ident", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotSame(threadGroup0, threadGroup1);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertEquals("ident", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      MockThread mockThread1 = new MockThread();
      assertNotNull(mockThread1);
      assertFalse(mockThread1.equals((Object)mockThread0));
      assertEquals(0, mockThread1.countStackFrames());
      assertFalse(mockThread1.isInterrupted());
      assertFalse(mockThread1.isDaemon());
      
      StackTraceElement[] stackTraceElementArray0 = mockThread0.getStackTrace();
      assertNotNull(stackTraceElementArray0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertEquals("ident", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(mockThread0, mockThread1);
      
      Class<?> class1 = TypeUtils.loadClass("java.util.Optional", (ClassLoader) aSMClassLoader0, false);
      assertNotNull(class1);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(mockThread0.equals((Object)mockThread1));
      assertFalse(class1.isEnum());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertEquals("class java.util.Optional", class1.toString());
      assertEquals("ident", threadGroup0.getName());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isDaemon());
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(mockThread0, mockThread1);
      
      String string0 = TypeUtils.decapitalize("@type");
      assertNotNull(string0);
      assertEquals("@type", string0);
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      Float float0 = TypeUtils.castToFloat((Object) null);
      assertNull(float0);
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      Class<Long> class2 = Long.class;
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class2, (Map<String, String>) identityHashMap0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      RuleBasedCollator ruleBasedCollator0 = null;
      try {
        ruleBasedCollator0 = new RuleBasedCollator("yyyy-MM-dd HH:mm:ss");
        fail("Expecting exception: ParseException");
      
      } catch(Throwable e) {
         //
         // missing char (=,;<&) : yyyy-MM-dd
         //
         verifyException("java.text.PatternEntry$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)3;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)55;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-27), (byte)3, (byte) (-117), (byte)55}, byteArray0);
      assertEquals((byte)55, bigInteger0.byteValue());
      assertEquals((short) (-29897), bigInteger0.shortValue());
      
      long long0 = bigInteger0.longValueExact();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-27), (byte)3, (byte) (-117), (byte)55}, byteArray0);
      assertEquals(3842214711L, long0);
      assertEquals((byte)55, bigInteger0.byteValue());
      assertEquals((short) (-29897), bigInteger0.shortValue());
      
      BigInteger bigInteger1 = bigInteger0.setBit(200);
      assertNotNull(bigInteger1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-27), (byte)3, (byte) (-117), (byte)55}, byteArray0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)55, bigInteger0.byteValue());
      assertEquals((short) (-29897), bigInteger0.shortValue());
      assertEquals((byte)55, bigInteger1.byteValue());
      assertEquals((short) (-29897), bigInteger1.shortValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      
      IllegalThreadStateException illegalThreadStateException0 = new IllegalThreadStateException("QhFk8S");
      assertNotNull(illegalThreadStateException0);
      assertEquals("java.lang.IllegalThreadStateException: QhFk8S", illegalThreadStateException0.toString());
      assertEquals("QhFk8S", illegalThreadStateException0.getMessage());
      
      BigInteger bigInteger2 = TypeUtils.castToBigInteger(bigInteger0);
      assertNotNull(bigInteger2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-27), (byte)3, (byte) (-117), (byte)55}, byteArray0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigInteger2.equals((Object)bigInteger1));
      assertEquals((byte)55, bigInteger0.byteValue());
      assertEquals((short) (-29897), bigInteger0.shortValue());
      assertEquals((short) (-29897), bigInteger2.shortValue());
      assertEquals((byte)55, bigInteger2.byteValue());
      assertNotSame(bigInteger0, bigInteger1);
      assertSame(bigInteger0, bigInteger2);
      assertNotSame(bigInteger2, bigInteger1);
      assertSame(bigInteger2, bigInteger0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TreeMap<Float, SQLSyntaxErrorException> treeMap0 = new TreeMap<Float, SQLSyntaxErrorException>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      Float float0 = new Float(254.360653034);
      assertNotNull(float0);
      assertEquals(254.36066F, (float)float0, 0.01F);
      
      Map.Entry<Float, SQLSyntaxErrorException> map_Entry0 = treeMap0.pollFirstEntry();
      assertNull(map_Entry0);
      assertEquals(0, treeMap0.size());
      
      NavigableMap<Float, SQLSyntaxErrorException> navigableMap0 = treeMap0.headMap(float0, true);
      assertNotNull(navigableMap0);
      assertEquals(0, treeMap0.size());
      assertEquals(0, navigableMap0.size());
      assertTrue(navigableMap0.isEmpty());
      
      BiFunction<Object, SQLException, SQLSyntaxErrorException> biFunction0 = (BiFunction<Object, SQLException, SQLSyntaxErrorException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      treeMap0.replaceAll(biFunction0);
      assertEquals(0, treeMap0.size());
      
      ConcurrentHashMap<SQLInvalidAuthorizationSpecException, java.sql.Date> concurrentHashMap0 = new ConcurrentHashMap<SQLInvalidAuthorizationSpecException, java.sql.Date>();
      assertNotNull(concurrentHashMap0);
      assertTrue(concurrentHashMap0.isEmpty());
      
      Short short0 = TypeUtils.castToShort((Object) null);
      assertNull(short0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Timestamp timestamp0 = TypeUtils.castToTimestamp(float0);
      assertNotNull(timestamp0);
      assertEquals("1970-01-01 00:00:00.254", timestamp0.toString());
      assertEquals(254000000, timestamp0.getNanos());
      
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      JSONPDeserializer jSONPDeserializer0 = new JSONPDeserializer();
      assertNotNull(jSONPDeserializer0);
      assertEquals(0, jSONPDeserializer0.getFastMatchToken());
      
      NumberFormatException numberFormatException0 = new NumberFormatException();
      assertNotNull(numberFormatException0);
      assertEquals("java.lang.NumberFormatException", numberFormatException0.toString());
      assertNull(numberFormatException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@lja=9ly|Gc");
      assertFalse(boolean0);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      assertNotNull(javaObjectDeserializer0);
      assertEquals(12, javaObjectDeserializer0.getFastMatchToken());
      
      Class<Double> class1 = Double.TYPE;
      assertNotNull(class1);
      assertTrue(class1.isPrimitive());
      assertEquals(1041, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isAnnotation());
      assertEquals("double", class1.toString());
      
      Class<SqlDateDeserializer> class2 = SqlDateDeserializer.class;
      Class<HttpCookie> class3 = HttpCookie.class;
      int int0 = TypeUtils.getParserFeatures(class3);
      assertEquals(0, int0);
      
      TypeUtils.clearClassMapping();
      Boolean boolean1 = new Boolean(false);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertFalse(boolean1);
      
      int int1 = TypeUtils.getSerializeFeatures(class0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Type[] typeArray0 = new Type[0];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, class3, class2);
      assertNotNull(parameterizedTypeImpl0);
      
      String string0 = parameterizedTypeImpl0.getTypeName();
      assertNotNull(string0);
      
      InstantiationException instantiationException0 = new InstantiationException("@lja=9ly|Gc");
      assertNotNull(instantiationException0);
      assertEquals("@lja=9ly|Gc", instantiationException0.getMessage());
      assertEquals("java.lang.InstantiationException: @lja=9ly|Gc", instantiationException0.toString());
      
      SecurityException securityException0 = new SecurityException("@lja=9ly|Gc", instantiationException0);
      assertNotNull(securityException0);
      assertEquals("@lja=9ly|Gc", instantiationException0.getMessage());
      assertEquals("java.lang.InstantiationException: @lja=9ly|Gc", instantiationException0.toString());
      assertEquals("java.lang.SecurityException: @lja=9ly|Gc", securityException0.toString());
      assertEquals("@lja=9ly|Gc", securityException0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) securityException0, (ParameterizedType) parameterizedTypeImpl0, (ParserConfig) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // type not match. java.lang.SecurityException -> com.alibaba.fastjson.parser.deserializer.SqlDateDeserializer
         //
         verifyException("com.alibaba.fastjson.parser.ParserConfig", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject(15, false);
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertEquals(0, jSONObject0.size());
      assertTrue(jSONObject0.isEmpty());
      
      SerializeConfig serializeConfig0 = new SerializeConfig(false);
      assertNotNull(serializeConfig0);
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals("@type", serializeConfig0.getTypeKey());
      
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.NotWriteDefaultValue;
      serializerFeatureArray0[1] = serializerFeature1;
      ThreadGroup threadGroup0 = new ThreadGroup("ident");
      assertNotNull(threadGroup0);
      assertEquals("ident", threadGroup0.getName());
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "]3Kq>o${*kR*]:c_?");
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("ident", threadGroup0.getName());
      assertEquals("]3Kq>o${*kR*]:c_?", threadGroup1.getName());
      
      MockThread mockThread0 = new MockThread(threadGroup0, "java.util.Optional");
      assertNotNull(mockThread0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertEquals("ident", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertEquals("ident", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotSame(threadGroup0, threadGroup1);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertEquals("ident", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      
      aSMDeserializerFactory0.classLoader.setClassAssertionStatus("yyyy-MM-dd HH:mm:ss", true);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertEquals("ident", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(mockThread0.isInterrupted());
      assertNotSame(threadGroup0, threadGroup1);
      
      InterruptedException interruptedException0 = new InterruptedException("1.2.46");
      assertNotNull(interruptedException0);
      assertEquals("java.lang.InterruptedException: 1.2.46", interruptedException0.toString());
      assertEquals("1.2.46", interruptedException0.getMessage());
      
      Class<?> class0 = TypeUtils.loadClass((String) null);
      assertNull(class0);
      
      UUID uUID0 = MockUUID.fromString((String) null);
      assertNotNull(uUID0);
      assertEquals("00000000-0100-4000-8200-000003000000", uUID0.toString());
      assertEquals((-9079256848728588288L), uUID0.getLeastSignificantBits());
      assertEquals(16793600L, uUID0.getMostSignificantBits());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToBoolean("Ljava.lang.AutoCloseable");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : Ljava.lang.AutoCloseable
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@lja=9ly|Gc");
      assertFalse(boolean0);
      
      Class<PropertyProcessable> class0 = PropertyProcessable.class;
      PropertyProcessableDeserializer propertyProcessableDeserializer0 = new PropertyProcessableDeserializer(class0);
      assertNotNull(propertyProcessableDeserializer0);
      assertEquals(12, propertyProcessableDeserializer0.getFastMatchToken());
      
      java.util.IdentityHashMap<String, String> identityHashMap0 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap0);
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      
      java.util.IdentityHashMap<String, String> identityHashMap1 = new java.util.IdentityHashMap<String, String>();
      assertNotNull(identityHashMap1);
      assertTrue(identityHashMap1.equals((Object)identityHashMap0));
      assertEquals(0, identityHashMap1.size());
      assertTrue(identityHashMap1.isEmpty());
      
      Class<Short> class1 = Short.class;
      List<FieldInfo> list0 = TypeUtils.computeGetters((Class<?>) class1, (Map<String, String>) identityHashMap0, true);
      assertNotNull(list0);
      assertTrue(identityHashMap0.equals((Object)identityHashMap1));
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(identityHashMap0, identityHashMap1);
      
      Class<TimeZone> class2 = TimeZone.class;
      List<FieldInfo> list1 = TypeUtils.computeGetters((Class<?>) class2, (Map<String, String>) identityHashMap1, true);
      assertNotNull(list1);
      assertTrue(identityHashMap1.equals((Object)identityHashMap0));
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, identityHashMap1.size());
      assertTrue(identityHashMap1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(identityHashMap1, identityHashMap0);
      assertNotSame(list1, list0);
      
      String string0 = TypeUtils.castToString((Object) null);
      assertNull(string0);
      
      long long0 = TypeUtils.fnv1a_64("'Zr@R");
      assertEquals(3583136500726438124L, long0);
      
      Class<JavaBeanDeserializer> class3 = JavaBeanDeserializer.class;
      JSONType jSONType0 = mock(JSONType.class, new ViolatedAssumptionAnswer());
      java.util.IdentityHashMap<String, Field> identityHashMap2 = new java.util.IdentityHashMap<String, Field>();
      assertNotNull(identityHashMap2);
      assertTrue(identityHashMap2.isEmpty());
      assertEquals(0, identityHashMap2.size());
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.PascalCase;
      List<FieldInfo> list2 = TypeUtils.computeGetters((Class<?>) class3, jSONType0, (Map<String, String>) identityHashMap0, (Map<String, Field>) identityHashMap2, false, propertyNamingStrategy0);
      assertNotNull(list2);
      assertTrue(identityHashMap0.equals((Object)identityHashMap1));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertEquals(0, identityHashMap0.size());
      assertTrue(identityHashMap0.isEmpty());
      assertTrue(identityHashMap2.isEmpty());
      assertEquals(0, identityHashMap2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotSame(identityHashMap0, identityHashMap1);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      int int0 = zoneOffset0.getTotalSeconds();
      assertEquals((-64800), int0);
      
      ZoneOffset zoneOffset1 = ZoneOffset.ofTotalSeconds(6);
      assertNotNull(zoneOffset1);
      assertFalse(zoneOffset1.equals((Object)zoneOffset0));
      assertNotSame(zoneOffset1, zoneOffset0);
      
      JapaneseDate japaneseDate0 = MockJapaneseDate.now((ZoneId) zoneOffset0);
      assertNotNull(japaneseDate0);
      assertFalse(zoneOffset0.equals((Object)zoneOffset1));
      assertNotSame(zoneOffset0, zoneOffset1);
      
      JapaneseDate japaneseDate1 = MockJapaneseDate.now();
      assertNotNull(japaneseDate1);
      assertTrue(japaneseDate1.equals((Object)japaneseDate0));
      assertNotSame(japaneseDate1, japaneseDate0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(mockJapaneseDate0);
      assertTrue(boolean0);
      
      Class<AtomicLong> class0 = AtomicLong.class;
      boolean boolean1 = TypeUtils.isKotlin(class0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, (Map<String, String>) null, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte)6;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte) (-57), (byte)6}, byteArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      boolean boolean3 = TypeUtils.isGenericParamType(type0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class1 = TypeUtils.loadClass("L\"%c`xh)45Y`]E^\"_", classLoader0);
      assertNull(class1);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte(mockSimpleDateFormat0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to byte, value : org.evosuite.runtime.mock.java.text.MockSimpleDateFormat@a9427c06
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@lja=9ly|Gc");
      assertFalse(boolean0);
      
      Class<ChronoLocalDate> class0 = ChronoLocalDate.class;
      WeakHashMap<String, String> weakHashMap0 = new WeakHashMap<String, String>();
      assertNotNull(weakHashMap0);
      
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo((Class<?>) class0, (Map<String, String>) weakHashMap0, propertyNamingStrategy0, false);
      assertNotNull(serializeBeanInfo0);
      
      Class<SQLNonTransientException> class1 = SQLNonTransientException.class;
      PropertyNamingStrategy propertyNamingStrategy1 = PropertyNamingStrategy.KebabCase;
      SerializeBeanInfo serializeBeanInfo1 = TypeUtils.buildBeanInfo((Class<?>) class1, (Map<String, String>) weakHashMap0, propertyNamingStrategy1, false);
      assertNotNull(serializeBeanInfo1);
      assertFalse(propertyNamingStrategy1.equals((Object)propertyNamingStrategy0));
      assertFalse(serializeBeanInfo1.equals((Object)serializeBeanInfo0));
      assertNotSame(propertyNamingStrategy1, propertyNamingStrategy0);
      assertNotSame(serializeBeanInfo1, serializeBeanInfo0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)9, (byte)6, (byte)6, (byte)6, (byte)6}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      boolean boolean2 = TypeUtils.isGenericParamType(class0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class2 = TypeUtils.loadClass("L\"%c`xh)45Y`]E^\"_", classLoader0);
      assertNull(class2);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToByte("L\"%c`xh)45Y`]E^\"_");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"L\"%c`xh)45Y`]E^\"_\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PropertyNamingStrategy propertyNamingStrategy0 = PropertyNamingStrategy.CamelCase;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      JavaObjectDeserializer javaObjectDeserializer0 = JavaObjectDeserializer.instance;
      assertNotNull(javaObjectDeserializer0);
      assertEquals(12, javaObjectDeserializer0.getFastMatchToken());
      
      Class<Rectangle> class0 = Rectangle.class;
      SerializeBeanInfo serializeBeanInfo0 = TypeUtils.buildBeanInfo(class0, map0, propertyNamingStrategy0);
      assertNotNull(serializeBeanInfo0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      Hashtable<NoSuchMethodException, Point> hashtable0 = new Hashtable<NoSuchMethodException, Point>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn(class0).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Locale locale0 = TypeUtils.toLocale("islongValue");
      assertNotNull(locale0);
      assertEquals("islongvalue", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("islongvalue", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      double double0 = Double.sum(0.0, 918.63441125);
      assertEquals(918.63441125, double0, 0.01);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("islongvalue", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("islongvalue", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("islongvalue", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("islongvalue", locale1.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      assertNotNull(imageCapabilities0);
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities0.isAccelerated());
      
      ImageCapabilities imageCapabilities1 = (ImageCapabilities)imageCapabilities0.clone();
      assertNotNull(imageCapabilities1);
      assertFalse(imageCapabilities1.equals((Object)imageCapabilities0));
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities1.isTrueVolatile());
      assertFalse(imageCapabilities1.isAccelerated());
      assertNotSame(imageCapabilities0, imageCapabilities1);
      assertNotSame(imageCapabilities1, imageCapabilities0);
      
      ImageCapabilities imageCapabilities2 = (ImageCapabilities)imageCapabilities0.clone();
      assertNotNull(imageCapabilities2);
      assertFalse(imageCapabilities0.equals((Object)imageCapabilities1));
      assertFalse(imageCapabilities2.equals((Object)imageCapabilities1));
      assertFalse(imageCapabilities2.equals((Object)imageCapabilities0));
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities2.isAccelerated());
      assertFalse(imageCapabilities2.isTrueVolatile());
      assertNotSame(imageCapabilities0, imageCapabilities1);
      assertNotSame(imageCapabilities0, imageCapabilities2);
      assertNotSame(imageCapabilities2, imageCapabilities1);
      assertNotSame(imageCapabilities2, imageCapabilities0);
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDate("islongValue");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"islongValue\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TypeUtils.clearClassMapping();
      TreeMap<Float, SQLSyntaxErrorException> treeMap0 = new TreeMap<Float, SQLSyntaxErrorException>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      Map.Entry<Float, SQLSyntaxErrorException> map_Entry0 = treeMap0.pollFirstEntry();
      assertNull(map_Entry0);
      assertEquals(0, treeMap0.size());
      
      Float float0 = new Float(1.0F);
      assertNotNull(float0);
      assertEquals(1.0F, (float)float0, 0.01F);
      
      Map.Entry<Float, SQLSyntaxErrorException> map_Entry1 = treeMap0.higherEntry(float0);
      assertNull(map_Entry1);
      assertEquals(0, treeMap0.size());
      
      BiFunction<Object, SQLException, SQLSyntaxErrorException> biFunction0 = (BiFunction<Object, SQLException, SQLSyntaxErrorException>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((SQLSyntaxErrorException) null).when(biFunction0).apply(any() , any(java.sql.SQLException.class));
      Float float1 = new Float(1514.07133551);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1514.0713F, (float)float1, 0.01F);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("getJSONObject", "getJSONObject", 35);
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(35, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: getJSONObject", sQLSyntaxErrorException0.toString());
      assertEquals("getJSONObject", sQLSyntaxErrorException0.getSQLState());
      assertEquals("getJSONObject", sQLSyntaxErrorException0.getMessage());
      
      SQLSyntaxErrorException sQLSyntaxErrorException1 = treeMap0.put(float1, sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1, treeMap0.size());
      assertEquals(35, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: getJSONObject", sQLSyntaxErrorException0.toString());
      assertEquals("getJSONObject", sQLSyntaxErrorException0.getSQLState());
      assertEquals("getJSONObject", sQLSyntaxErrorException0.getMessage());
      
      treeMap0.replaceAll(biFunction0);
      assertEquals(1, treeMap0.size());
      
      Float float2 = new Float((-423.679F));
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-423.679F), (float)float2, 0.01F);
      
      SQLSyntaxErrorException sQLSyntaxErrorException2 = treeMap0.put(float2, sQLSyntaxErrorException0);
      assertNull(sQLSyntaxErrorException2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(2, treeMap0.size());
      assertEquals(35, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: getJSONObject", sQLSyntaxErrorException0.toString());
      assertEquals("getJSONObject", sQLSyntaxErrorException0.getSQLState());
      assertEquals("getJSONObject", sQLSyntaxErrorException0.getMessage());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToLong(treeMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to long, value : {-423.679=java.sql.SQLSyntaxErrorException: getJSONObject, 1514.0713=null}
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertEquals(28, map0.size());
      assertFalse(map0.isEmpty());
      
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      assertNotNull(javaObjectDeserializer0);
      assertEquals(12, javaObjectDeserializer0.getFastMatchToken());
      
      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 8);
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertEquals("double", class0.toString());
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isEnum());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      
      classArray0[0] = class0;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ParserConfig parserConfig0 = new ParserConfig(classLoader0);
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      Class<MockSimpleDateFormat> class1 = MockSimpleDateFormat.class;
      MockSimpleDateFormat mockSimpleDateFormat0 = TypeUtils.cast((Object) null, class1, parserConfig0);
      assertNull(mockSimpleDateFormat0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      try { 
        Long.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = AffineTransform.TYPE_QUADRANT_ROTATION;
      assertEquals(8, int0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      long long0 = TypeUtils.fnv1a_64_lower("Ljava.util.concurrent.ConcurrentSkipListMap");
      assertEquals((-4437036994051610544L), long0);
      
      Double double0 = TypeUtils.castToDouble((Object) null);
      assertNull(double0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)9;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)6, (byte)9, (byte)6, (byte)9}, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      Constructor<SQLRecoverableException>[] constructorArray0 = (Constructor<SQLRecoverableException>[]) Array.newInstance(Constructor.class, 4);
      constructorArray0[1] = constructorArray0[0];
      constructorArray0[2] = constructorArray0[1];
      constructorArray0[3] = constructorArray0[2];
      // Undeclared exception!
      try { 
        TypeUtils.getKoltinConstructor(constructorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TypeUtils.clearClassMapping();
      NoClassDefFoundError noClassDefFoundError0 = new NoClassDefFoundError("java.beans.Transient");
      assertNotNull(noClassDefFoundError0);
      assertEquals("java.beans.Transient", noClassDefFoundError0.getMessage());
      assertEquals("java.lang.NoClassDefFoundError: java.beans.Transient", noClassDefFoundError0.toString());
      
      boolean boolean0 = TypeUtils.isHibernateInitialized(noClassDefFoundError0);
      assertTrue(boolean0);
      assertEquals("java.beans.Transient", noClassDefFoundError0.getMessage());
      assertEquals("java.lang.NoClassDefFoundError: java.beans.Transient", noClassDefFoundError0.toString());
      
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      assertNotNull(treeMap0);
      assertEquals(0, treeMap0.size());
      
      TypeUtils typeUtils0 = new TypeUtils();
      assertNotNull(typeUtils0);
      assertTrue(TypeUtils.compatibleWithJavaBean);
      assertTrue(TypeUtils.compatibleWithFieldName);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("java.beans.Transient", classLoader0, true);
      assertNotNull(class0);
      assertTrue(class0.isInterface());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertTrue(class0.isAnnotation());
      assertEquals("interface java.beans.Transient", class0.toString());
      assertEquals(9729, class0.getModifiers());
      
      AtomicInteger atomicInteger0 = new AtomicInteger(51068);
      assertNotNull(atomicInteger0);
      assertEquals("51068", atomicInteger0.toString());
      assertEquals(51068.0, atomicInteger0.doubleValue(), 0.01);
      assertEquals(51068L, atomicInteger0.longValue());
      assertEquals(51068, atomicInteger0.intValue());
      assertEquals(51068.0F, atomicInteger0.floatValue(), 0.01F);
      assertEquals((byte)124, atomicInteger0.byteValue());
      assertEquals(51068, atomicInteger0.get());
      assertEquals((short) (-14468), atomicInteger0.shortValue());
      
      Class<Object> class1 = Object.class;
      ParserConfig parserConfig0 = ParserConfig.global;
      assertNotNull(parserConfig0);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.isAutoTypeSupport());
      assertTrue(parserConfig0.isAsmEnable());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToEnum((Object) treeMap0, class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to : java.lang.Object
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Class<?> class0 = TypeUtils.loadClass("o");
      assertNull(class0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      assertEquals(1, int0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, (int)integer0);
      
      boolean boolean0 = TypeUtils.isHibernateInitialized("o");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[0];
      SimplePropertyPreFilter simplePropertyPreFilter0 = new SimplePropertyPreFilter((Class<?>) null, stringArray0);
      assertNotNull(simplePropertyPreFilter0);
      assertEquals(0, simplePropertyPreFilter0.getMaxLevel());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5!R3T6I,keUs");
      assertNotNull(mockPrintWriter0);
      
      SerializeWriter serializeWriter0 = new SerializeWriter(1);
      assertNotNull(serializeWriter0);
      assertEquals((-1), serializeWriter0.getMaxBufSize());
      assertFalse(serializeWriter0.isSortField());
      assertEquals(1, serializeWriter0.getBufferLength());
      assertFalse(serializeWriter0.isNotWriteDefaultValue());
      assertEquals(0, serializeWriter0.size());
      
      SerializeConfig serializeConfig0 = new SerializeConfig(96);
      assertNotNull(serializeConfig0);
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0, serializeConfig0);
      assertNotNull(jSONSerializer0);
      assertEquals((-1), serializeWriter0.getMaxBufSize());
      assertFalse(serializeWriter0.isSortField());
      assertEquals(1, serializeWriter0.getBufferLength());
      assertFalse(serializeWriter0.isNotWriteDefaultValue());
      assertEquals(0, serializeWriter0.size());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals(0, jSONSerializer0.getIndentCount());
      assertNull(jSONSerializer0.getDateFormatPattern());
      
      JSONSerializer jSONSerializer1 = new JSONSerializer(serializeWriter0, serializeConfig0);
      assertNotNull(jSONSerializer1);
      assertFalse(jSONSerializer1.equals((Object)jSONSerializer0));
      assertEquals((-1), serializeWriter0.getMaxBufSize());
      assertFalse(serializeWriter0.isSortField());
      assertEquals(1, serializeWriter0.getBufferLength());
      assertFalse(serializeWriter0.isNotWriteDefaultValue());
      assertEquals(0, serializeWriter0.size());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertNull(jSONSerializer1.getDateFormatPattern());
      assertEquals(0, jSONSerializer1.getIndentCount());
      
      boolean boolean1 = jSONSerializer0.applyName(jSONSerializer1, "o", "5!R3T6I,keUs");
      assertFalse(jSONSerializer0.equals((Object)jSONSerializer1));
      assertFalse(jSONSerializer1.equals((Object)jSONSerializer0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals((-1), serializeWriter0.getMaxBufSize());
      assertFalse(serializeWriter0.isSortField());
      assertEquals(1, serializeWriter0.getBufferLength());
      assertFalse(serializeWriter0.isNotWriteDefaultValue());
      assertEquals(0, serializeWriter0.size());
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      assertEquals(0, jSONSerializer0.getIndentCount());
      assertNull(jSONSerializer0.getDateFormatPattern());
      assertNull(jSONSerializer1.getDateFormatPattern());
      assertEquals(0, jSONSerializer1.getIndentCount());
      assertNotSame(jSONSerializer0, jSONSerializer1);
      assertNotSame(jSONSerializer1, jSONSerializer0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      serializeConfig0.clearSerializers();
      assertEquals("@type", serializeConfig0.getTypeKey());
      assertTrue(serializeConfig0.isAsmEnable());
      
      Locale locale1 = Locale.GERMANY;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("DEU", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      
      String string0 = locale0.getDisplayLanguage(locale1);
      assertNotNull(string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("Chinesisch", string0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("de_DE", locale1.toString());
      assertEquals("DE", locale1.getCountry());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("DEU", locale1.getISO3Country());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(true);
      assertNotNull(imageCapabilities0);
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertTrue(imageCapabilities0.isAccelerated());
      
      ImageCapabilities imageCapabilities1 = (ImageCapabilities)imageCapabilities0.clone();
      assertNotNull(imageCapabilities1);
      assertFalse(imageCapabilities1.equals((Object)imageCapabilities0));
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertTrue(imageCapabilities0.isAccelerated());
      assertTrue(imageCapabilities1.isAccelerated());
      assertFalse(imageCapabilities1.isTrueVolatile());
      assertNotSame(imageCapabilities0, imageCapabilities1);
      assertNotSame(imageCapabilities1, imageCapabilities0);
      
      ImageCapabilities imageCapabilities2 = (ImageCapabilities)imageCapabilities0.clone();
      assertNotNull(imageCapabilities2);
      assertFalse(imageCapabilities0.equals((Object)imageCapabilities1));
      assertFalse(imageCapabilities2.equals((Object)imageCapabilities0));
      assertFalse(imageCapabilities2.equals((Object)imageCapabilities1));
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertTrue(imageCapabilities0.isAccelerated());
      assertTrue(imageCapabilities2.isAccelerated());
      assertFalse(imageCapabilities2.isTrueVolatile());
      assertNotSame(imageCapabilities0, imageCapabilities1);
      assertNotSame(imageCapabilities0, imageCapabilities2);
      assertNotSame(imageCapabilities2, imageCapabilities0);
      assertNotSame(imageCapabilities2, imageCapabilities1);
      
      Long long0 = new Long((-1645L));
      assertNotNull(long0);
      assertEquals((-1645L), (long)long0);
      
      MockDate mockDate0 = (MockDate)TypeUtils.castToDate(long0);
      assertNotNull(mockDate0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      
      JSONObject jSONObject0 = new JSONObject(true);
      assertNotNull(jSONObject0);
      assertEquals(3089, JSON.DEFAULT_GENERATE_FEATURE);
      assertEquals(989, JSON.DEFAULT_PARSER_FEATURE);
      assertTrue(jSONObject0.isEmpty());
      assertEquals(0, jSONObject0.size());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToDouble(simplePropertyPreFilter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to double, value : com.alibaba.fastjson.serializer.SimplePropertyPreFilter@1
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      GenericArrayType genericArrayType0 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(genericArrayType0).toString();
      doReturn((Type) null).when(genericArrayType0).getGenericComponentType();
      Type type0 = TypeUtils.checkPrimitiveArray(genericArrayType0);
      assertNotNull(type0);
      
      ThreadGroup threadGroup0 = new ThreadGroup((String) null);
      assertNotNull(threadGroup0);
      assertNull(threadGroup0.getName());
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader1);
      assertSame(classLoader1, classLoader0);
      
      ClassLoader classLoader2 = classLoader1.getParent();
      assertNotNull(classLoader2);
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertSame(classLoader1, classLoader0);
      
      ClassLoader classLoader3 = classLoader2.getParent();
      assertNull(classLoader3);
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertSame(classLoader1, classLoader0);
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory((ClassLoader) null);
      assertNotNull(aSMDeserializerFactory0);
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class0 = TypeUtils.loadClass("/tgate(", classLoader2, false);
      assertNull(class0);
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertSame(classLoader1, classLoader0);
      
      Class<Boolean> class1 = Boolean.class;
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class1);
      assertNull(stringArray0);
      
      GenericArrayType genericArrayType1 = mock(GenericArrayType.class, new ViolatedAssumptionAnswer());
      sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl parameterizedTypeImpl0 = (sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl)TypeReference.LIST_STRING;
      assertNotNull(parameterizedTypeImpl0);
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "/tgate(");
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertNull(threadGroup0.getName());
      assertEquals("/tgate(", threadGroup1.getName());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertFalse(parserConfig0.fieldBased);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      InstantiationException instantiationException0 = new InstantiationException("AllowISO8601DateFormat");
      assertNotNull(instantiationException0);
      assertEquals("AllowISO8601DateFormat", instantiationException0.getMessage());
      assertEquals("java.lang.InstantiationException: AllowISO8601DateFormat", instantiationException0.toString());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) instantiationException0, (Type) class1, parserConfig0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to boolean, value : java.lang.InstantiationException: AllowISO8601DateFormat
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Class<java.sql.Date> class0 = java.sql.Date.class;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[3];
      SerializerFeature serializerFeature0 = SerializerFeature.UseSingleQuotes;
      serializerFeatureArray0[0] = serializerFeature0;
      ThreadGroup threadGroup0 = new ThreadGroup("ident");
      assertNotNull(threadGroup0);
      assertEquals("ident", threadGroup0.getName());
      
      MockThread mockThread0 = new MockThread(threadGroup0, "java.util.Optional");
      assertNotNull(mockThread0);
      assertEquals("ident", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      ClassLoader classLoader0 = mockThread0.getContextClassLoader();
      assertNotNull(classLoader0);
      assertEquals("ident", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      ASMDeserializerFactory aSMDeserializerFactory0 = new ASMDeserializerFactory(classLoader0);
      assertNotNull(aSMDeserializerFactory0);
      assertEquals("ident", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      
      ASMClassLoader aSMClassLoader0 = aSMDeserializerFactory0.classLoader;
      assertNotNull(aSMClassLoader0);
      
      Class<?> class1 = TypeUtils.loadClass("java.util.Optional", (ClassLoader) aSMClassLoader0, false);
      assertNotNull(class1);
      assertEquals("ident", threadGroup0.getName());
      assertFalse(mockThread0.isDaemon());
      assertFalse(mockThread0.isInterrupted());
      assertEquals(0, mockThread0.countStackFrames());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("class java.util.Optional", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      
      String[] stringArray0 = TypeUtils.getKoltinConstructorParameters(class0);
      assertNull(stringArray0);
      
      NoSuchMethodException noSuchMethodException0 = new NoSuchMethodException();
      assertNotNull(noSuchMethodException0);
      assertEquals("java.lang.NoSuchMethodException", noSuchMethodException0.toString());
      assertNull(noSuchMethodException0.getMessage());
      
      Locale locale0 = TypeUtils.toLocale("SUPPRESSED_CAPTION");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("suppressed", locale0.getLanguage());
      assertEquals("CAPTION", locale0.getCountry());
      assertEquals("suppressed_CAPTION", locale0.toString());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("suppressed", locale0.getLanguage());
      assertEquals("CAPTION", locale0.getCountry());
      assertEquals("suppressed_CAPTION", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CAPTION", locale1.getCountry());
      assertEquals("suppressed_CAPTION", locale1.toString());
      assertEquals("suppressed", locale1.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      
      String string0 = locale0.getDisplayLanguage(locale1);
      assertNotNull(string0);
      assertEquals("suppressed", string0);
      assertEquals("", locale0.getVariant());
      assertEquals("suppressed", locale0.getLanguage());
      assertEquals("CAPTION", locale0.getCountry());
      assertEquals("suppressed_CAPTION", locale0.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CAPTION", locale1.getCountry());
      assertEquals("suppressed_CAPTION", locale1.toString());
      assertEquals("suppressed", locale1.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      ImageCapabilities imageCapabilities0 = new ImageCapabilities(false);
      assertNotNull(imageCapabilities0);
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities0.isAccelerated());
      
      ImageCapabilities imageCapabilities1 = (ImageCapabilities)imageCapabilities0.clone();
      assertNotNull(imageCapabilities1);
      assertFalse(imageCapabilities1.equals((Object)imageCapabilities0));
      assertFalse(imageCapabilities0.isTrueVolatile());
      assertFalse(imageCapabilities0.isAccelerated());
      assertFalse(imageCapabilities1.isTrueVolatile());
      assertFalse(imageCapabilities1.isAccelerated());
      assertNotSame(imageCapabilities0, imageCapabilities1);
      assertNotSame(imageCapabilities1, imageCapabilities0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      assertNotNull(mockSimpleDateFormat0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toLocalizedPattern());
      assertEquals("M/d/yy h:mm a", mockSimpleDateFormat0.toPattern());
      
      AtomicLong atomicLong0 = new AtomicLong(15);
      assertNotNull(atomicLong0);
      assertEquals((short)15, atomicLong0.shortValue());
      assertEquals(15, atomicLong0.intValue());
      assertEquals(15L, atomicLong0.longValue());
      assertEquals(15.0, atomicLong0.doubleValue(), 0.01);
      assertEquals((byte)15, atomicLong0.byteValue());
      assertEquals("15", atomicLong0.toString());
      assertEquals(15L, atomicLong0.get());
      assertEquals(15.0F, atomicLong0.floatValue(), 0.01F);
      
      Boolean boolean0 = TypeUtils.castToBoolean(atomicLong0);
      assertNotNull(boolean0);
      assertFalse(boolean0);
      assertEquals((short)15, atomicLong0.shortValue());
      assertEquals(15, atomicLong0.intValue());
      assertEquals(15L, atomicLong0.longValue());
      assertEquals(15.0, atomicLong0.doubleValue(), 0.01);
      assertEquals((byte)15, atomicLong0.byteValue());
      assertEquals("15", atomicLong0.toString());
      assertEquals(15L, atomicLong0.get());
      assertEquals(15.0F, atomicLong0.floatValue(), 0.01F);
      
      Locale locale2 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale2);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zho", locale2.getISO3Language());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      
      Locale locale3 = Locale.GERMANY;
      assertNotNull(locale3);
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertEquals("DE", locale3.getCountry());
      assertEquals("", locale3.getVariant());
      assertEquals("de_DE", locale3.toString());
      assertEquals("deu", locale3.getISO3Language());
      assertEquals("de", locale3.getLanguage());
      assertEquals("DEU", locale3.getISO3Country());
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getNumberInstance();
      assertNotNull(decimalFormat0);
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VY_");
      assertFalse(boolean0);
      
      Type[] typeArray0 = new Type[6];
      ParameterizedTypeImpl parameterizedTypeImpl0 = new ParameterizedTypeImpl(typeArray0, typeArray0[5], typeArray0[2]);
      assertNotNull(parameterizedTypeImpl0);
      
      String string0 = parameterizedTypeImpl0.getTypeName();
      assertNotNull(string0);
      
      long long0 = TypeUtils.fnv1a_64_lower("Ghf}wmv0e'&!k=O");
      assertEquals(6592310187447408969L, long0);
      
      Long long1 = new Long(224146807618824437L);
      assertNotNull(long1);
      assertFalse(long1.equals((Object)long0));
      assertEquals(224146807618824437L, (long)long1);
      
      Type type0 = TypeUtils.getGenericParamType(parameterizedTypeImpl0);
      assertNotNull(type0);
      assertSame(parameterizedTypeImpl0, type0);
      assertSame(type0, parameterizedTypeImpl0);
      
      Class<SQLTransactionRollbackException> class0 = SQLTransactionRollbackException.class;
      int int0 = TypeUtils.getSerializeFeatures(class0);
      assertEquals(0, int0);
      
      HashMap<BigInteger, InstantiationException> hashMap0 = new HashMap<BigInteger, InstantiationException>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)57;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)57}, byteArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      LinkedHashSet<MockThaiBuddhistDate> linkedHashSet0 = new LinkedHashSet<MockThaiBuddhistDate>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JobAttributes jobAttributes0 = new JobAttributes();
      assertNotNull(jobAttributes0);
      assertNull(jobAttributes0.getPrinter());
      assertEquals(1, jobAttributes0.getCopies());
      assertEquals(1, jobAttributes0.getFromPage());
      assertEquals(Integer.MAX_VALUE, jobAttributes0.getMaxPage());
      assertEquals(1, jobAttributes0.getToPage());
      assertEquals(1, jobAttributes0.getMinPage());
      assertNull(jobAttributes0.getFileName());
      
      Jdk8DateCodec jdk8DateCodec0 = Jdk8DateCodec.instance;
      assertNotNull(jdk8DateCodec0);
      assertEquals(4, jdk8DateCodec0.getFastMatchToken());
      
      // Undeclared exception!
      try { 
        TypeUtils.castToChar(long1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // can not cast to char, value : 224146807618824437
         //
         verifyException("com.alibaba.fastjson.util.TypeUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(28, map0.size());
      
      JavaObjectDeserializer javaObjectDeserializer0 = new JavaObjectDeserializer();
      assertNotNull(javaObjectDeserializer0);
      assertEquals(12, javaObjectDeserializer0.getFastMatchToken());
      
      Class<Double> class0 = Double.TYPE;
      assertNotNull(class0);
      assertTrue(class0.isPrimitive());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      assertFalse(class0.isAnnotation());
      assertEquals("double", class0.toString());
      assertEquals(1041, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      int int0 = Calendar.MONDAY;
      assertEquals(2, int0);
      
      ThreadGroup threadGroup0 = new ThreadGroup("4.auOzV>wg)9Mk#Ct");
      assertNotNull(threadGroup0);
      assertEquals("4.auOzV>wg)9Mk#Ct", threadGroup0.getName());
      
      ThreadGroup threadGroup1 = new ThreadGroup(threadGroup0, "ge");
      assertNotNull(threadGroup1);
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("4.auOzV>wg)9Mk#Ct", threadGroup0.getName());
      assertEquals("ge", threadGroup1.getName());
      
      threadGroup1.interrupt();
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertEquals("4.auOzV>wg)9Mk#Ct", threadGroup0.getName());
      assertEquals("ge", threadGroup1.getName());
      assertNotSame(threadGroup0, threadGroup1);
      assertNotSame(threadGroup1, threadGroup0);
      
      ThreadGroup threadGroup2 = new ThreadGroup(threadGroup1, "ge");
      assertNotNull(threadGroup2);
      assertFalse(threadGroup0.equals((Object)threadGroup1));
      assertFalse(threadGroup1.equals((Object)threadGroup0));
      assertFalse(threadGroup2.equals((Object)threadGroup1));
      assertFalse(threadGroup2.equals((Object)threadGroup0));
      assertEquals("4.auOzV>wg)9Mk#Ct", threadGroup0.getName());
      assertEquals("ge", threadGroup1.getName());
      assertEquals("ge", threadGroup2.getName());
      
      ParserConfig parserConfig0 = ParserConfig.getGlobalInstance();
      assertNotNull(parserConfig0);
      assertFalse(parserConfig0.fieldBased);
      assertFalse(ParserConfig.AUTO_SUPPORT);
      assertTrue(parserConfig0.compatibleWithJavaBean);
      assertTrue(parserConfig0.isAsmEnable());
      assertFalse(parserConfig0.isAutoTypeSupport());
      
      // Undeclared exception!
      try { 
        TypeUtils.cast((Object) "4.auOzV>wg)9Mk#Ct", (Type) class0, parserConfig0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }
}
