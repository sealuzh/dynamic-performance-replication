/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 24 07:59:05 GMT 2019
 */

package org.apache.bcel.classfile;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Locale;
import java.util.zip.ZipException;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Attribute;
import org.apache.bcel.classfile.Code;
import org.apache.bcel.classfile.CodeException;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantClass;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantFieldref;
import org.apache.bcel.classfile.ConstantFloat;
import org.apache.bcel.classfile.ConstantInteger;
import org.apache.bcel.classfile.ConstantInterfaceMethodref;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodHandle;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantMethodref;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.classfile.LocalVariable;
import org.apache.bcel.classfile.LocalVariableTable;
import org.apache.bcel.classfile.Utility;
import org.apache.bcel.util.BCELComparator;
import org.apache.bcel.util.ByteSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Utility_ESTest extends Utility_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Utility.replace(")R??I;H|M8d(Gu", ")R??I;H|M8d(Gu", ")R??I;H|M8d(Gu");
      try { 
        Utility.typeOfMethodSignature(")R??I;H|M8d(Gu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )R??I;H|M8d(Gu
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Utility.clearBit(98, 98);
      // Undeclared exception!
      try { 
        Utility.signatureToString("XH{C", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `XH{C'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = Utility.replace("anewarray", "anewarray", "anewarray");
      assertEquals("anewarray", string0);
      
      boolean boolean0 = Utility.isJavaIdentifierPart('}');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = Utility.getSignature("\t\t%");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.reset();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readUnsignedByte();
      String string1 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ConstantString constantString0 = new ConstantString(48);
      constantString0.setStringIndex(48);
      constantString0.copy();
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)123;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Utility.signatureToString("Vwh6;idW=Jz_T");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Vwh6;idW=Jz_T", "Vwh6;idW=Jz_T", "/E#sa~ktn{oDIoi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Vwh6;idW=Jz_T
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)75;
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte)86;
      byteArray0[7] = (byte)42;
      byteArray0[8] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("drem", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Utility.methodTypeToSignature("iK_e3EhYeS/kawX", (String[]) null);
      String string0 = Utility.getSignature("G");
      assertEquals("LG;", string0);
      
      String string1 = Utility.signatureToString("LG;", true);
      assertEquals("G", string1);
      
      Utility.printArray((Object[]) null, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)88;
      String string2 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
      
      Utility.printArray((Object[]) null);
      int int0 = Utility.setBit((byte)73, (byte)73);
      assertEquals(585, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Utility.isJavaIdentifierPart('3');
      try { 
        Utility.typeOfSignature("&.02dwg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: &.02dwg
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte) (-84));
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("lrem", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `lrem'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong(3056L);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantLong0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[3] = (Constant) constantInvokeDynamic0;
      constantArray0[4] = (Constant) constantLong0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("java.lang.");
      constantArray0[5] = (Constant) constantUtf8_0;
      constantArray0[6] = (Constant) constantLong0;
      constantArray0[7] = (Constant) constantLong0;
      constantArray0[8] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("istore_0", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("[8Nh9*py/@ q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal type: [8Nh9*py/@ q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("java.lang.", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("fneg", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte)108;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.signatureToString("S~", false);
      boolean boolean0 = false;
      String string0 = Utility.encode(byteArray0, boolean0);
      assertEquals("R$ad$O$a0$A$3c$b8l", string0);
      
      boolean boolean1 = false;
      String string1 = "9\"lT7U5\\H/q}.";
      String string2 = "\t<";
      String string3 = Utility.compactClassName(string1, string2, boolean1);
      assertEquals("9\"lT7U5\\H.q}.", string3);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Utility.methodSignatureReturnType("F1`");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "RnY3=]Bt-~Ba|0A l7";
      stringArray0[1] = "float";
      Utility.classOrInterface(39);
      Utility.setBit(978, 696);
      try { 
        Utility.methodSignatureReturnType("MNT{kw@KC}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MNT{kw@KC}'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("BbXypK5g6G");
      assertEquals("byte", string0);
      
      short short0 = Utility.searchOpcode("areturn");
      assertEquals((short)176, short0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-123);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("fstore\t\t%56", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      try { 
        Utility.typeOfSignature(":N}&6o %Bd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :N}&6o %Bd
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('X');
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Utility.printArray(objectArray0, false, false);
      String[] stringArray0 = new String[0];
      String string0 = Utility.methodTypeToSignature("putfield", stringArray0);
      assertEquals("()Lputfield;", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-73);
      byteArray0[4] = (byte) (-73);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "Unreachable default case reached!";
      Utility.getSignature("Unreachable default case reached!");
      int int0 = 93;
      char char0 = '\\';
      Utility.format(93, 93, false, '\\');
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Unreachable default case reached!";
      objectArray0[1] = (Object) "\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\93";
      boolean boolean0 = true;
      Utility.printArray(objectArray0, true, true);
      String string1 = "}mr#b=ZO!\\F";
      Utility.compactClassName("}mr#b=ZO!F");
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = Utility.clearBit((-85), (-85));
      assertEquals((-2133), int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("&)P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = Utility.classOrInterface(90);
      assertEquals("class", string0);
      
      short short0 = Utility.searchOpcode("ifnonnull");
      assertEquals((short)199, short0);
      
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("class", (String) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.accessToString(3987);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2439, (int) (byte)0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("CONSTANT_Methodref");
      assertEquals((byte)5, byte0);
      
      String string0 = Utility.classOrInterface((-1569));
      assertEquals("class", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)5;
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("05 05", string1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Utility.typeOfSignature("LT-P/%/6vV;V");
      Utility.searchOpcode("boolean");
      try { 
        Utility.typeOfSignature(")\"nbMNK%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\"nbMNK%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-116);
      byte byte0 = (byte)34;
      byteArray0[1] = (byte)34;
      byte byte1 = (byte)111;
      byteArray0[2] = (byte)111;
      byte byte2 = (byte)5;
      byteArray0[3] = (byte)5;
      byte byte3 = (byte) (-51);
      byteArray0[4] = (byte) (-51);
      ConstantPool constantPool0 = null;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      int int0 = 90;
      int int1 = 4125;
      int int2 = (-856);
      CodeException[] codeExceptionArray0 = new CodeException[4];
      CodeException codeException0 = null;
      try {
        codeException0 = new CodeException(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte) (-14);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-96);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName("swap", true);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.convertString("(vHBx(e{<,");
      assertEquals("(vHBx(e{<,", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)19;
      Constant[] constantArray0 = new Constant[8];
      MockFile mockFile0 = new MockFile((String) null, "org.apache.commons.io.filefilter.RegexFileFilter");
      ConstantMethodType constantMethodType0 = new ConstantMethodType((byte)19);
      ConstantMethodType constantMethodType1 = new ConstantMethodType(constantMethodType0);
      constantArray0[1] = (Constant) constantMethodType1;
      ConstantDouble constantDouble0 = new ConstantDouble((byte)19);
      constantArray0[2] = (Constant) constantDouble0;
      ConstantMethodType constantMethodType2 = new ConstantMethodType(constantMethodType1);
      constantArray0[4] = (Constant) constantMethodType2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 149, 901);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)37, (-2227));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-75);
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureReturnType((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-4057));
      Constant[] constantArray0 = new Constant[8];
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-57);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lload_3";
      stringArray0[1] = "";
      stringArray0[2] = "lload_3";
      stringArray0[3] = "lload_3";
      stringArray0[4] = "lload_3";
      String string0 = Utility.methodTypeToSignature("lload_3", stringArray0);
      assertEquals("(Llload_3;L;Llload_3;Llload_3;Llload_3;)Llload_3;", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = false;
      Utility.compactClassName("TU", false);
      Utility.replace("TU", "float", "?:KSIBu]oi|");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("java.lang.", "m:6est", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-4057));
      Constant[] constantArray0 = new Constant[8];
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantString0;
      constantArray0[5] = (Constant) constantString0;
      constantArray0[6] = (Constant) constantString0;
      constantArray0[7] = (Constant) constantString0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)85;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte)101;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      Utility.methodTypeToSignature("dup_x1", (String[]) null);
      Utility.compactClassName("()Ldup_x1;");
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)85, 805, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Utility.printArray((Object[]) null);
      String string0 = Utility.classOrInterface(0);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Utility.accessToString(89);
      Utility.compactClassName("public static final volatile", false);
      File file0 = MockFile.createTempFile("public static final volatile", "public static final volatile");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) mockFileOutputStream0;
      objectArray0[1] = (Object) mockPrintWriter0;
      objectArray0[2] = (Object) mockFileOutputStream0;
      objectArray0[3] = (Object) file0;
      objectArray0[4] = (Object) mockPrintWriter0;
      objectArray0[5] = (Object) mockFileOutputStream0;
      objectArray0[6] = (Object) mockPrintWriter0;
      objectArray0[7] = (Object) mockFileOutputStream0;
      objectArray0[8] = (Object) "public static final volatile";
      PrintWriter printWriter0 = mockPrintWriter0.format("public static final volatile", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      try { 
        Utility.decode("38E@nD", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Utility.typeOfSignature("D");
      // Undeclared exception!
      try { 
        Utility.signatureToString(" ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: ` '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-39);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_acmpne\t\t#5299", string0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = Utility.classOrInterface(90);
      assertEquals("class", string0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "class";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "class";
      objectArray0[3] = (Object) "class";
      objectArray0[4] = (Object) "class";
      objectArray0[5] = (Object) "class";
      objectArray0[6] = (Object) "class";
      objectArray0[7] = (Object) "class";
      objectArray0[8] = (Object) "class";
      Utility.printArray(objectArray0, false, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-103);
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("01 99", string1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Utility.getSignature("");
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.searchOpcode("");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(983);
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) "", 228, 195);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("ifeq\t\t#0", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-119);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte) (-80);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.markSupported();
      byteSequence0.skipBytes((byte)2);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("l2f", string0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)92;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, true);
      MockFileWriter mockFileWriter0 = new MockFileWriter("idiv");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) constantArray0);
      assertEquals(0, constantArray0.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = Utility.format((-997), (-997), true, '\'');
      assertEquals("-997", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(byteSequence0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = Utility.compactClassName("java.lang.");
      assertEquals("", string0);
      
      String string1 = Utility.classOrInterface(8);
      assertEquals("class", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte) (-72);
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-27);
      byteArray0[6] = (byte)40;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 2226, (int) (byte) (-80));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 39141. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      Utility.printArray(objectArray0, true, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null);
      assertEquals("isub", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-4057));
      Constant[] constantArray0 = new Constant[8];
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantString0;
      constantArray0[5] = (Constant) constantString0;
      constantArray0[6] = (Constant) constantString0;
      constantArray0[7] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantString constantString1 = new ConstantString((-4057));
      constantString0.copy();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-60);
      byteArray0[4] = (byte) (-60);
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("wide\t(wide)", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)104;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.methodSignatureToString("dastore", "dastore", "dastore", false, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: dastore
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("caload", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.accessToString((int) (byte)86);
      Utility.accessToString((int) (byte)86);
      Utility.fillup("", (-419), true, 's');
      try { 
        Utility.methodSignatureReturnType("NH=>I:;!VI~2f#ht,", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `NH=>I:;!VI~2f#ht,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = Utility.convertString("4%\"ml%t");
      assertEquals("4%\\\"ml%t", string0);
      
      String string1 = Utility.getSignature("iDm");
      assertEquals("LiDm;", string1);
      
      byte byte0 = Utility.typeOfSignature("Byte code error: ");
      assertEquals((byte)8, byte0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      try { 
        Utility.typeOfSignature("=oYwj~X5*aF");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: =oYwj~X5*aF
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.skipBytes((-773));
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string0 = Utility.replace("fcmpg", "lstore_0", "pop");
      assertEquals("fcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.accessToString(0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)86;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte) (-121);
      byteArray0[7] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Utility.convertString("");
      String string0 = Utility.compactClassName("DZ7am;D", "DZ7am;D", false);
      assertEquals("DZ7am;D", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(");
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) "(";
      objectArray0[2] = (Object) "(";
      PrintWriter printWriter0 = mockPrintWriter0.printf("o1\"ib1#fK6L}Z<", objectArray0);
      Utility.printArray(printWriter0, objectArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(";
      stringArray0[1] = "o1\"ib1#fK6L}Z<";
      stringArray0[2] = "DZ7am;D";
      String string1 = Utility.methodTypeToSignature("", stringArray0);
      assertEquals("(L(;Lo1\"ib1#fK6L}Z<;LDZ7am;D;)L;", string1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("org.apache.bcel.classfile.AnnotationDefault", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `org.apache.bcel.classfile.AnnotationDefault'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("if_icmpne\t\t#2993", string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)81;
      Utility.encode(byteArray0, true);
      String string0 = "3gH~$3gH~$";
      try { 
        Utility.typeOfSignature("3gH~$3gH~$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 3gH~$3gH~$
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Utility.convertString("");
      String string0 = Utility.accessToString((-928), false);
      assertEquals("synchronized volatile abstract strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte) (-14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iadd", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.compactClassName("tM2:gXf.;R%9WHlv2", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-71);
      byteArray0[0] = (byte) (-71);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "";
      String string1 = "Unreachable default case reached!";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", "Unreachable default case reached!", "Unreachable default case reached!", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "NMGIds(4+D#", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("java.lang.", "java.lang.", "invokestatic");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: java.lang.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(']');
      assertFalse(boolean0);
      
      try { 
        Utility.typeOfSignature("0Za%oF`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0Za%oF`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("D<9,");
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-66);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_3", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      try { 
        Utility.typeOfSignature("1*_@kOX]zj!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1*_@kOX]zj!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Utility.searchOpcode("astore_1");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Utility.typeOfSignature("LT-P/%/6vV;V");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "boolean";
      stringArray0[1] = "ifnull";
      String string0 = Utility.methodTypeToSignature("org.apache.bcel.classfile.SourceFile", stringArray0);
      assertEquals("(ZLifnull;)Lorg/apache/bcel/classfile/SourceFile;", string0);
      
      byte byte0 = Utility.typeOfMethodSignature("(ZLifnull;)Lorg/apache/bcel/classfile/SourceFile;");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)65;
      byteArray0[0] = (byte) (-53);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)65;
      byteArray1[1] = (byte) (-74);
      byteArray1[2] = (byte) (-53);
      byteArray1[3] = (byte) (-53);
      byteArray1[4] = (byte)0;
      Utility.toHexString(byteArray1);
      try { 
        Utility.typeOfSignature("41 b6 cb cb 00");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 41 b6 cb cb 00
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte) (-50);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.classOrInterface(2108);
      // Undeclared exception!
      try { 
        Utility.signatureToString("class", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `class'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Utility.searchOpcode("astore_1");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(130, 65);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)109;
      Constant.setComparator((BCELComparator) null);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-13);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      byteSequence1.available();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("aload_3", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `aload_3'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("k[WB~zw(3", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dmul", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Utility.getSignature("D<9,");
      try { 
        Utility.methodSignatureArgumentTypes("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-13);
      byteArray0[3] = (byte) (-72);
      Utility.encode(byteArray0, false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("F}e^N4,.5`n", "$a5B$f3$b8", "transient");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: F}e^N4,.5`n
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Utility.typeOfSignature("LT-P/%/6vV;V");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      Utility.methodTypeToSignature("", (String[]) null);
      String[] stringArray0 = Utility.methodSignatureArgumentTypes("()L;");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-122);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte) (-69);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.methodTypeToSignature(", stack items={", (String[]) null);
      assertEquals("()L,;", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence1, constantPool0, false);
      assertEquals("if_icmpgt\t\t#13878", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Utility.typeOfSignature("LT-P/%/6vV;V");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)14;
      byteArray0[0] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(178);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byteSequence0.reset();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      short short0 = Utility.searchOpcode("sastore");
      assertEquals((short)86, short0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Utility.decode("38E@nD", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("goto_w", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `goto_w'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Utility.signatureToString("E", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `E'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = Utility.getSignature("_");
      assertEquals("L_;", string0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('7');
      assertTrue(boolean0);
      
      short short0 = Utility.searchOpcode("\t\t");
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = false;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.accessToString(1710);
      // Undeclared exception!
      try { 
        Utility.signatureToString("MQ-[_ER{", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `MQ-[_ER{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)93;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("ifeq\t\t#23961");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ifeq\t\t#23961'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = (-3);
      Utility.classOrInterface((-3));
      try { 
        Utility.methodSignatureToString("interface", "interface", "interface", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore\t\t%0", string0);
      
      String string1 = Utility.classOrInterface((byte)54);
      assertEquals("class", string1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((byte) (-125));
      ConstantInteger constantInteger0 = new ConstantInteger((byte)0);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantLong1;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantInteger0;
      constantArray0[3] = (Constant) constantInteger0;
      constantArray0[4] = (Constant) constantLong1;
      constantArray0[5] = (Constant) constantInteger0;
      constantArray0[6] = (Constant) constantLong1;
      constantArray0[7] = (Constant) constantInteger0;
      constantArray0[8] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 119, (int) (byte) (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("astore_2", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-88);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)76;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("astore_1", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Utility.setBit(256, 121);
      boolean boolean0 = true;
      Utility.format(43, 43, true, 'd');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-102);
      Utility.equals(byteArray0, byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("YGS/Qlql&5R8@J>@{", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YGS/Qlql&5R8@J>@{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-89);
      byte byte0 = (byte) (-32);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)13;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.decode("bipush\t\t6", false);
      try { 
        Utility.decode("bipush\t\t6", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("<illegg}Sal opcode>", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.getSignature("goto");
      assertEquals("Lgoto;", string0);
      
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("istore_1", string1);
      assertEquals(19, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-100);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = Utility.getSignature("breakpoint");
      assertEquals("Lbreakpoint;", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte) (-89);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-89);
      byteArray1[1] = (byte) (-89);
      byteSequence0.read(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.compactClassName("saload");
      assertEquals("saload", string1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("java.lang.", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("monitorenter", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("if_acmpeq", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `if_acmpeq'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-91);
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = "HPcUzc43NONq,aZ=nb?";
      Utility.compactClassName("HPcUzc43NONq,aZ=nb?", false);
      Writer writer0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      Utility.printArray(objectArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Utility.classOrInterface(90);
      Utility.searchOpcode("ifnonnull");
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, "class", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("*9~P|q9", false);
      assertArrayEquals(new byte[] {(byte)42, (byte)57, (byte)126, (byte)80, (byte)124, (byte)113, (byte)57}, byteArray0);
      
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)18;
      byteArray1[1] = (byte)65;
      byteArray1[2] = (byte)93;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)16;
      String string0 = Utility.toHexString(byteArray1);
      assertEquals("12 41 5d 00 10", string0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\"";
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Utility.printArray((Object[]) stringArray0, true, true);
      ByteSequence byteSequence0 = null;
      try {
        byteSequence0 = new ByteSequence((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool0, true);
      try { 
        Utility.typeOfSignature("lload\t\t%22");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: lload\t\t%22
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)106;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iand", string0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "1";
      stringArray0[1] = "1";
      stringArray0[2] = "1";
      stringArray0[3] = "1";
      String string0 = Utility.methodTypeToSignature("1", stringArray0);
      assertEquals("(L1;L1;L1;L1;)L1;", string0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("<illegal opcode>", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.mark(2313);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 575;
      Utility.classOrInterface(575);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "interface";
      objectArray0[1] = (Object) "interface";
      objectArray0[2] = (Object) "interface";
      objectArray0[3] = (Object) "interface";
      objectArray0[4] = (Object) "interface";
      Utility.printArray(objectArray0, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `interface'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)33;
      byte[] byteArray1 = new byte[0];
      Utility.equals(byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Nnb0u=_S|B(Qb~_<T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Nnb0u=_S|B(Qb~_<T'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      try { 
        Utility.typeOfSignature(">\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: >\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte) (-1);
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[0] = (Constant) constantLong0;
      ConstantInteger constantInteger0 = new ConstantInteger(2219);
      constantArray0[1] = (Constant) constantInteger0;
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      constantArray0[2] = (Constant) constantLong1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-1), 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 131. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = Utility.convertString("J|Yd<Lvn@)/'a7u");
      assertEquals("J|Yd<Lvn@)/\\'a7u", string0);
      
      String string1 = Utility.compactClassName("Vc/7Y", "", false);
      assertEquals("Vc.7Y", string1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aload_2", string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ifnonnull\t\t#4270", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("[]", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `]'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "w&&%h'%";
      boolean boolean0 = false;
      try { 
        Utility.methodSignatureReturnType("w&&%h'%", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `w&&%h'%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.mark((byte)33);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("lload_3", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Utility.clearBit(3301, 391);
      Utility.compactClassName("][2~.", "][2~.", false);
      Utility.searchOpcode("][2~.");
      Utility.setBit(1295, (-2317));
      Utility.searchOpcode("<J^<>?@n& g2");
      try { 
        Utility.methodSignatureArgumentTypes("][2~.", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ][2~.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte) (-90);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-124);
      byteArray0[6] = (byte) (-93);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = Utility.isJavaIdentifierPart('J');
      assertTrue(boolean0);
      
      String string0 = Utility.compactClassName("", true);
      assertEquals("", string0);
      
      String string1 = Utility.accessToString(2602, false);
      assertEquals("private static synchronized interface strictfp", string1);
      
      String string2 = Utility.format(2602, 103, false, 'J');
      assertEquals("JJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ2602", string2);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.equals(byteArray0, byteArray0);
      LocalVariable[] localVariableArray0 = new LocalVariable[0];
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      LocalVariableTable localVariableTable0 = new LocalVariableTable(3014, 3014, localVariableArray0, constantPool0);
      try { 
        Utility.methodSignatureToString("double", "double", "1C.-'&1!ESBGW0mQA9", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: double
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("LT-P/%/6vV;V", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-3334), 45);
      assertEquals("0:    astore_1\n1:    bastore\n2:    aload_3\n3:    lastore\n4:    laload\n5:    fload_3\n6:    laload\n7:    istore\t\t%118\n9:    sastore\n10:   istore_0\n11:   sastore\n", string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-110);
      byteArray0[4] = (byte)2;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = Utility.replace("jpmg", "jpmg", "jpmg");
      Utility.format((-173), (-1596), false, '=');
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("\t\t%", "", "", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \t\t%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-58);
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)4;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 198, 1930);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Utility.clearBit(3301, 391);
      Utility.compactClassName("][2~.", "][2~.", false);
      Utility.searchOpcode("][2~.");
      Utility.isJavaIdentifierPart('T');
      byte[] byteArray0 = new byte[0];
      Utility.encode(byteArray0, true);
      Utility.compactClassName("][2~.");
      Utility.printArray((Object[]) null, true, true);
      MockFile mockFile0 = new MockFile((String) null, ", ");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "jEb4@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"jEb4@\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Utility.convertString("\t");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Utility.compactClassName(" arg", false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.methodTypeToSignature("java.lang.", (String[]) null);
      Utility.methodSignatureReturnType("()Ljava/lang/;");
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "Q#:h,%";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Q#:h,%", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Q#:h,%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[21];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)111;
      byteArray0[18] = (byte) (-14);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte) (-14);
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.compactClassName("7ir*\"5pl.|a$~", false);
      assertEquals("7ir*\"5pl.|a$~", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Utility.decode("java.lang.", false);
      try { 
        Utility.typeOfSignature("WK(5_bWHoWICM.cE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: WK(5_bWHoWICM.cE
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      boolean boolean0 = true;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\t\t");
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = "/40";
      Utility.fillup("/40", (-30), false, 's');
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CiJ|Fqw]");
      try { 
        Utility.methodSignatureArgumentTypes("/40");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /40
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)59;
      byte[] byteArray1 = Utility.decode("''", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.getSignature("byte");
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_1", string0);
      
      String string1 = Utility.methodTypeToSignature("byte", (String[]) null);
      assertEquals("()B", string1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-122);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantLong constantLong0 = new ConstantLong((-688L));
      constantArray0[0] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{CONSTANT_Long[5](bytes = -688)}", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = Utility.clearBit(48, 48);
      assertEquals(48, int0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = Utility.signatureToString("Invalid method signature: ", true);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = Utility.replace("", "\n     Method Arguments:", "if_icmplt");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-31);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(", ".Qe0EFP.G^:=8", "I>:/)V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readShort();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.methodTypeToSignature("nop", (String[]) null);
      String string0 = Utility.methodSignatureToString("()Lnop;", ", ", ", ", false);
      assertEquals(",  nop , ()", string0);
      
      String string1 = Utility.methodTypeToSignature(", ", (String[]) null);
      assertEquals("()L,;", string1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Utility.clearBit(0, 2694);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-3113), false);
      Utility.setBit(0, (byte)0);
      String string0 = "'\"G| E?cMM+bk\"";
      try { 
        Utility.typeOfSignature("'\"G| E?cMM+bk\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '\"G| E?cMM+bk\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)107;
      byteArray0[5] = (byte) (-103);
      byteArray0[8] = (byte)39;
      byteArray0[8] = (byte) (-125);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)20;
      byteArray1[1] = (byte) (-125);
      byteArray1[2] = (byte) (-103);
      byteArray1[3] = (byte) (-103);
      byteArray1[4] = (byte)115;
      byteArray1[5] = (byte) (-54);
      byteArray1[6] = (byte) (-125);
      byteArray1[7] = (byte) (-119);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.read();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence2, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.convertString("YFB~WjD(}N!7bv");
      Utility.isSet((-3649), (-3649));
      // Undeclared exception!
      try { 
        Utility.signatureToString("TfF4=~\u0005Zce*wRst:d", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: TfF4=~\u0005Zce*wRst:d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte) (-122);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)119;
      byteArray0[7] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dcmpl", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Utility.methodTypeToSignature("iK_e3EhYeS/kawX", (String[]) null);
      Utility.getSignature("G");
      Utility.signatureToString("LG;", true);
      Utility.printArray((Object[]) null, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-34);
      byteArray0[5] = (byte) (-58);
      byteArray0[6] = (byte)111;
      byteArray0[7] = (byte)39;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid byte tag in constant pool: 88
         //
         verifyException("org.apache.bcel.classfile.Constant", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_0", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("saload", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace("nokestatc", (String) null, "nokestatc");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Utility.classOrInterface(16384);
      Utility.setBit(1862, 16384);
      try { 
        Utility.typeOfSignature("#wR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #wR
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("java.lang.", false);
      Constant[] constantArray0 = new Constant[5];
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[0] = (Constant) constantLong0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantUtf8.getCachedInstance("From\tTo\tHandler\tType\n");
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fneg", string0);
      
      String string1 = Utility.methodTypeToSignature("EoFz3;>}F", (String[]) null);
      assertEquals("()LEoFz3;>}F;", string1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("+0+s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `+0+s'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      boolean boolean0 = false;
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)103;
      byteArray0[3] = (byte) (-6);
      byteArray0[5] = (byte)49;
      String string0 = Utility.compactClassName("enum", false);
      assertEquals("enum", string0);
      
      String string1 = Utility.signatureToString("[I4^q#Z#i", false);
      assertEquals("int[]", string1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[0] = (Constant) constantClass0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("y4/[eIp$=-1}Y");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(byteSequence0);
      constantArray0[2] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantString constantString0 = new ConstantString((byte) (-46));
      ConstantString constantString1 = new ConstantString((byte) (-46));
      constantString1.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)32, 182, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 53863. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, true);
      String string0 = Utility.methodTypeToSignature("5", (String[]) null);
      assertEquals("()L5;", string0);
      
      String string1 = Utility.methodSignatureToString("()L5;", "aload_0", "aload_0", true);
      assertEquals("aload_0 5 aload_0()", string1);
      
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-124);
      byteArray0[0] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("Invalid signature: ");
      assertEquals("int", string0);
      
      byte byte0 = Utility.typeOfSignature("The magic number cannot be null");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      Utility.methodTypeToSignature("5", (String[]) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("istore_2", "istore_2", "n", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: istore_2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Utility.convertString("6!.xv\"?*wV}:-?56A|");
      Utility.getSignature("6!.xv\"?*wV}:-?56A|");
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte) (-74);
      byteArray0[2] = (byte) (-74);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-62);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)111;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "aload_1");
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fload\t\t%194", string0);
      
      byte byte0 = Utility.typeOfSignature("InitObject");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool0, false);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedWriter0);
      mockPrintWriter0.println("lload\t\t%22");
      Utility.printArray((PrintWriter) mockPrintWriter0, (Object[]) null);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Invalid signature: ");
      assertEquals((byte)10, byte0);
      
      String string0 = Utility.signatureToString("Invalid signature: ", true);
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fload_0", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte) (-88);
      byteArray0[5] = (byte) (-113);
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)46;
      byteArray0[8] = (byte)0;
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("$bdNh$9d$a8$8f$_$$$A", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("'l\"'St)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = Utility.compactClassName("DZ7am;D", "DZ7am;D", false);
      assertEquals("DZ7am;D", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0, false, false);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("cr1{s#~s5j{cONkvv", true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "cr1{s#~s5j{cONkvv";
      Utility.printArray(objectArray0);
      try { 
        Utility.methodSignatureReturnType("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('^');
      assertFalse(boolean0);
      
      String string0 = Utility.format(3465, 3, false, '6');
      assertEquals("3465", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-128);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("iflt\t\t#-23175", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)61;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = Utility.signatureToString("Could not create the directory ");
      assertEquals("char", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)65;
      byteArray0[5] = (byte)77;
      byteArray0[6] = (byte) (-99);
      try { 
        Utility.typeOfSignature("\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      try { 
        Utility.typeOfSignature("Xl4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Xl4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Utility.getSignature("ymO,M ga");
      try { 
        Utility.typeOfSignature("Q|`N%{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Q|`N%{
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature("i]S}fq1[`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Utility.getSignature("\t\t%");
      try { 
        Utility.methodSignatureArgumentTypes("L%;", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L%;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)37;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fload_3", string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = ":@";
      try { 
        Utility.typeOfSignature(":@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :@
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)94;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = Utility.getSignature("breakpoint");
      assertEquals("Lbreakpoint;", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)34;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.compactClassName("dm[]]$34;2: ", false);
      assertEquals("dm[]]$34;2: ", string1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("'1&18M{`J", "'1&18M{`J", "'1&18M{`J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '1&18M{`J
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.compactClassName("<:", true);
      Utility.methodTypeToSignature("<:", (String[]) null);
      Utility.compactClassName("3gH~$", "3gH~$", true);
      LocalVariable[] localVariableArray0 = new LocalVariable[5];
      Constant[] constantArray0 = new Constant[1];
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic((-4136), 199);
      constantArray0[0] = (Constant) constantInvokeDynamic0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      LocalVariable localVariable0 = new LocalVariable((byte)33, (-49), 183, (-49), (-4738), constantPool0);
      localVariableArray0[0] = localVariable0;
      LocalVariable localVariable1 = new LocalVariable(localVariable0);
      localVariableArray0[1] = localVariable1;
      LocalVariable localVariable2 = new LocalVariable(localVariable0);
      localVariableArray0[2] = localVariable2;
      LocalVariable localVariable3 = new LocalVariable(localVariable2);
      localVariableArray0[3] = localVariable3;
      LocalVariable localVariable4 = new LocalVariable((-945), (byte)33, 199, 97, 31, constantPool0);
      localVariableArray0[4] = localVariable4;
      LocalVariableTable localVariableTable0 = new LocalVariableTable((byte)33, (byte)95, localVariableArray0, constantPool0);
      try { 
        Utility.methodSignatureToString("?%IW&y'2", "3gH~$", "", false, localVariableTable0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ?%IW&y'2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(1L);
      String string0 = "YWg<B%[r/&W.";
      try { 
        Utility.typeOfSignature("YWg<B%[r/&W.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: YWg<B%[r/&W.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-113);
      byteArray0[2] = (byte) (-68);
      byteArray0[3] = (byte) (-76);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte) (-113);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString(" (", " (", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Utility.typeOfSignature("LT-P/%/6vV;V");
      String string0 = "pGL 2Tx5kX+r$(1$^G9";
      boolean boolean0 = true;
      try { 
        Utility.decode("pGL 2Tx5kX+r$(1$^G9", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Utility.replace("D<9,", "D<9,", "D<9,");
      Utility.typeOfSignature("D<9,");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte)81;
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)7;
      Utility.toHexString(byteArray0);
      try { 
        Utility.methodSignatureArgumentTypes("short");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: short
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-104);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dcmpg", string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-62);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("monitorenter", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "ww";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.signatureToString("ww", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `ww'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      // Undeclared exception!
      Utility.replace("", "", "");
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("dload\t\t%24", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Utility.convertString("4%\"ml%t");
      Utility.getSignature("iDm");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)55;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1993), (int) (byte) (-74));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.convertString("isub");
      assertEquals("isub", string0);
      
      String string1 = Utility.toHexString(byteArray0);
      assertEquals("b1 64", string1);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "boolean";
      Utility.convertString("boolean");
      try { 
        Utility.typeOfMethodSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[0] = (byte)9;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)9;
      byteArray0[7] = (byte)9;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readByte();
      byteSequence0.readShort();
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.signatureToString("S~", true);
      String string0 = Utility.encode(byteArray0, boolean0);
      String string1 = "java.lang.3t0V";
      boolean boolean1 = false;
      String string2 = Utility.compactClassName(string0, string1, boolean1);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string2);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte) (-125);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.mark((byte)23);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)88;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      ConstantPool constantPool0 = null;
      try {
        constantPool0 = new ConstantPool(byteSequence0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)74;
      byteArray0[7] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lsub", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.skipBytes((byte) (-127));
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (-3389), 0, true);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = ";rxgp6[):LF\\NCyb";
      // Undeclared exception!
      try { 
        Utility.getSignature(";rxgp6[):LFNCyb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[):LFNCyb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)1;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)23, (int) (byte) (-122));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)18;
      byteArray0[2] = (byte)103;
      byteArray0[4] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readUnsignedByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)100;
      byteArray0[4] = (byte)100;
      byteArray0[7] = (byte)78;
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte) (-18);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("astore_3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: astore_3
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)87;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)105;
      byteArray0[8] = (byte) (-67);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 23130. Constant pool size is: 0
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = Utility.classOrInterface(137);
      assertEquals("class", string0);
      
      String string1 = Utility.fillup("class", 137, true, ',');
      assertEquals("class,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,", string1);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-62);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dup2_x1", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)109;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)75;
      byteArray0[6] = (byte)11;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("istore\t\t%107", string0);
      
      String string1 = Utility.methodTypeToSignature("istore\t\t%107", (String[]) null);
      assertEquals("()Listore;", string1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iload_3", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = Utility.getSignature("\t\t%");
      assertEquals("L%;", string0);
      
      String string1 = Utility.methodSignatureReturnType("L%;");
      assertEquals("%", string1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, (String) null, "Lc^BYGj~", true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      // Undeclared exception!
      try { 
        Utility.signatureToString("P6+Hkp gU0S*!e/*=", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `P6+Hkp gU0S*!e/*='
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = Utility.convertString("4%\"ml%t");
      assertEquals("4%\\\"ml%t", string0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = Utility.printArray(objectArray0);
      assertEquals("{}", string1);
      assertNotNull(string1);
      
      String string2 = Utility.accessToString(0);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      String string0 = null;
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = ")M";
      stringArray0[2] = null;
      stringArray0[3] = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-108), 123, false);
      Utility.getSignature("0:    lcmp\n");
      Utility.compactClassName("0:    lcmp\n");
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readUnsignedByte();
      Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature((String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)60;
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte) (-11);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)60, 166, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Utility.convertString("4%\"ml%t");
      Utility.getSignature("iDm");
      ConstantPool constantPool0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      boolean boolean0 = true;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)62;
      byteArray0[4] = (byte)31;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte)45, (-398), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      try { 
        Utility.typeOfSignature("*fvT(S)7_I5;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: fvT(S)7_I5;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = "F1`";
      Utility.methodSignatureReturnType("F1`");
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-123);
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte) (-25);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2850, (int) (byte) (-93));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)21;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Utility.compactClassName("goto_w", "#x&-TtG=D>h_:", true);
      Utility.accessToString(59, true);
      try { 
        Utility.typeOfMethodSignature("#x&-TtG=D>h_:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: #x&-TtG=D>h_:
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte) (-49);
      byteArray0[6] = (byte) (-115);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.read(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 6, (-56), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.compactClassName("-F|r", true);
      Utility.replace("-F|r", "-F|r", "I0;w*T1L\"\"@:");
      Utility.compactClassName("ifne", "-R<0", true);
      try { 
        Utility.methodSignatureArgumentTypes("f2i", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: f2i
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = Utility.signatureToString("F`KE:J>bgwoSR*(/", false);
      assertEquals("float", string0);
      
      try { 
        Utility.methodSignatureArgumentTypes(")\t", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: )\t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)108;
      byteArray0[5] = (byte) (-94);
      byteArray0[6] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ishr", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = Utility.convertString("\"");
      assertEquals("\\\"", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Utility.fillup("0P%/ ", 21, false, '8');
      Utility.clearBit(13, 2694);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      ConstantPool constantPool0 = null;
      boolean boolean0 = false;
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (-3113), false);
      Utility.setBit(13, (byte)0);
      String string0 = "'\"G| E?cMM+bk\"";
      try { 
        Utility.typeOfSignature("'\"G| E?cMM+bk\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: '\"G| E?cMM+bk\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte) (-91);
      byteArray0[7] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)75;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)101;
      byteArray0[18] = (byte)1;
      byteArray1[4] = (byte)1;
      int int0 = Utility.setBit(2376, 2376);
      assertEquals(2376, int0);
      
      int int1 = Utility.setBit((-458), (byte)37);
      assertEquals((-458), int1);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Utility.getSignature("breakpoint");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      try { 
        Utility.typeOfSignature("(`XEt`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (`XEt`
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-68);
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte)9;
      Constant[] constantArray0 = new Constant[5];
      ConstantDouble constantDouble0 = new ConstantDouble((byte) (-119));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[0] = (Constant) constantDouble1;
      ConstantString constantString0 = new ConstantString((byte)125);
      constantArray0[1] = (Constant) constantString0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantMethodref constantMethodref0 = new ConstantMethodref(byteSequence0);
      constantArray0[2] = (Constant) constantMethodref0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte) (-119));
      ConstantInteger constantInteger1 = new ConstantInteger(constantInteger0);
      constantArray0[3] = (Constant) constantInteger1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getInstance("t&7vtz({r}");
      constantArray0[4] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-58), 1078);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    f2i
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Utility.getSignature("M.-1!}X");
      Utility.replace("M.-1!}X", "M.-1!}X", "dreturn");
      Utility.accessToString(186);
      Utility.getSignature("LM/-1!}X;");
      try { 
        Utility.typeOfSignature("!<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\n     Method Arguments:";
      stringArray0[1] = "i]S}fq1[`";
      String string0 = Utility.convertString("\n     Method Arguments:");
      assertEquals("\\n     Method Arguments:", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Utility.getSignature("l&t");
      PrintWriter printWriter0 = null;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Ll&t;";
      objectArray0[1] = (Object) "Ll&t;";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "Ll&t;";
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      int int0 = Utility.clearBit((-1), (-1));
      assertEquals(Integer.MAX_VALUE, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)105;
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Utility.isJavaIdentifierPart(';');
      Utility.searchOpcode("astore_1");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dreturn", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-46);
      byteArray0[4] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-72);
      byteArray1[1] = (byte) (-6);
      byteArray1[2] = (byte)32;
      byteArray1[3] = (byte) (-109);
      byteSequence0.read(byteArray1);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Utility.searchOpcode("astore_1");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte) (-125);
      byteArray0[7] = (byte) (-86);
      byteArray0[8] = (byte)4;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-86);
      byteArray0[7] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-64);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Utility.convertString("\n     Method Arguments:");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)104;
      Constant[] constantArray0 = new Constant[3];
      ConstantFloat constantFloat0 = new ConstantFloat((byte)104);
      constantArray0[0] = (Constant) constantFloat0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref((byte)104, (-1));
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[1] = (Constant) constantFieldref1;
      ConstantInteger constantInteger0 = new ConstantInteger(476);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool1, 476, 177);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, (int) (byte)9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte) (-112);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-51);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("d2f", string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) byteSequence0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) (byte) (-112);
      objectArray0[3] = (Object) (byte)5;
      objectArray0[4] = (Object) null;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintWriter) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "xu]-~,~+";
      stringArray0[1] = "invokedynamic";
      stringArray0[2] = "x(6<S&,v#[~2d[q";
      stringArray0[3] = "x(6<S&,v#[~2d[q";
      stringArray0[4] = "x(6<S&,v#[~2d[q";
      stringArray0[5] = "x(6<S&,v#[~2d[q";
      stringArray0[6] = "x(6<S&,v#[~2d[q";
      stringArray0[7] = "x(6<S&,v#[~2d[q";
      stringArray0[8] = "x(6<S&,v#[~2d[q";
      // Undeclared exception!
      try { 
        Utility.methodTypeToSignature("x(6<S&,v#[~2d[q", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegally nested brackets:[~2d[q
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\"";
      stringArray0[1] = ")M";
      stringArray0[2] = "\"";
      stringArray0[3] = "\"";
      stringArray0[4] = "\"";
      String string0 = Utility.methodTypeToSignature("\"", stringArray0);
      assertEquals("(L\";L)M;L\";L\";L\";)L\";", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      String string1 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string1);
      
      String string2 = Utility.printArray((Object[]) stringArray0);
      assertEquals("{\", )M, \", \", \"}", string2);
      
      int int0 = Utility.setBit(18, 0);
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("s2W.SG(vmp`~q2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: s2W.SG(vmp`~q2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      try { 
        Utility.methodSignatureArgumentTypes("(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("fstore_1", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      boolean boolean0 = true;
      Utility.getSignature("ymO,M ga");
      try { 
        Utility.typeOfSignature("MA+0t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: MA+0t
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      byte[] byteArray0 = new byte[16];
      byteArray0[1] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("swap");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: swap
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = "org.apache.bcel.classfile.Utility$1";
      // Undeclared exception!
      try { 
        Utility.replace((String) null, "org.apache.bcel.classfile.Utility$1", "if_icmplt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = "boolean";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "boolean");
      Utility.setBit(2, (-4186));
      Utility.accessToString((-71), true);
      String string1 = ";";
      try { 
        Utility.typeOfMethodSignature(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("invokeinterface");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)64;
      String string0 = Utility.toHexString(byteArray0);
      assertEquals("31 5a 4c 2d 0a 40", string0);
      
      Object[] objectArray0 = new Object[0];
      Utility.printArray((PrintStream) mockPrintStream0, objectArray0);
      String string1 = Utility.compactClassName("ACC_SUPER flag\t\t", "invokeinterface", true);
      assertEquals("ACC_SUPER flag\t\t", string1);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      try { 
        Utility.typeOfSignature(", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: , 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-18);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)89;
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)111;
      byteArray0[6] = (byte) (-14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iadd", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)103;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("monitorexit", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)32;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[0];
      byteSequence0.read(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.compactClassName("ahc.yDRB=qPI");
      assertEquals("ahc.yDRB=qPI", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)98;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 12, (-3068));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Utility.typeOfSignature("Z");
      try { 
        Utility.typeOfSignature("Unreachable default case reached!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Unreachable default case reached!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-60);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = Utility.replace("int", "int", "int");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, (ConstantPool) null, 194, (int) (byte)70);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('a');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)84;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      try { 
        Utility.typeOfSignature("ifnonnull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ifnonnull
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Utility.methodSignatureReturnType("Invalid signature: ");
      String[] stringArray0 = new String[9];
      stringArray0[2] = "Invalid signature: ";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-79);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-80);
      byteArray0[7] = (byte) (-91);
      byte byte0 = (byte)39;
      byteArray0[8] = (byte)39;
      Constant[] constantArray0 = new Constant[2];
      ConstantInteger constantInteger0 = new ConstantInteger(97);
      constantArray0[0] = (Constant) constantInteger0;
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("Invalid signature: ");
      constantArray0[1] = (Constant) constantUtf8_0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-91), 165);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    arraylength
         // 1:    iastore
         // 2:    return
         // 3:    return
         // 4:    <illegal opcode>
         // 5:    impdep2
         // 6:    areturn
         // 7:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("daload", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      try { 
        Utility.typeOfSignature(" (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature:  (
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-109);
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("[8Nh9*py/@ q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `8Nh9*py/@ q'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("isub", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)62;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.signatureToString("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("multianewarray", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("ldiv", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Utility.getSignature("breakpoint");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte) (-89);
      byteArray0[6] = (byte)98;
      Utility.encode(byteArray0, false);
      Utility.compactClassName("^':[", false);
      try { 
        Utility.typeOfSignature("5$A$81$PF$a7$81");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 5$A$81$PF$a7$81
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      boolean boolean0 = false;
      Utility.convertString("w&&%h'%");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-93);
      byteArray0[6] = (byte)44;
      Utility.encode(byteArray0, false);
      Utility.classOrInterface((-2495));
      Utility.isJavaIdentifierPart('Q');
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)48;
      Utility.encode(byteArray1, true);
      Utility.compactClassName("Byte code error: ");
      Utility.printArray((Object[]) null, false, true);
      MockFile mockFile0 = new MockFile("w&&%h'%", "fconst_0");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "fconst_0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"fconst_0\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("%->GyT3", true);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      int int0 = 0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(11, 0);
      constantArray0[0] = (Constant) constantMethodref0;
      byteSequence0.available();
      constantMethodref0.setNameAndTypeIndex((-2733));
      constantMethodref0.copy();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        Utility.codeToString(byteSequence0, constantPool0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = "(vHBx(e{<,";
      Utility.convertString("(vHBx(e{<,");
      try { 
        Utility.typeOfMethodSignature("(vHBx(e{<,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (vHBx(e{<,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Utility.setBit(1862, 162);
      // Undeclared exception!
      try { 
        Utility.toHexString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-67);
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-55);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong(1162L);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-95);
      byteArray0[6] = (byte) (-95);
      byteArray0[7] = (byte) (-80);
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-82), (int) (byte) (-51));
      assertEquals("0:    dup2_x1\n1:    <illegal opcode>\n2:    freturn\n3:    <illegal opcode>\n4:    fload_0\n5:    if_icmplt\t\t#-24139\n", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("up.W]D{", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("lneg", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = "@z@En.E})^ NR";
      Utility.searchOpcode("@z@En.E})^ NR");
      try { 
        Utility.typeOfSignature("long");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: long
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Utility.clearBit(63, 0);
      String string0 = "'r>$NkD";
      // Undeclared exception!
      Utility.replace("'r>$NkD", "", "");
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("l2i", string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readBoolean();
      byteSequence0.read();
      byteSequence0.close();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-70);
      byteArray1[1] = (byte) (-70);
      byteArray1[2] = (byte)78;
      byteArray1[3] = (byte) (-89);
      byteArray1[4] = (byte) (-89);
      byteArray1[5] = (byte)78;
      byteArray1[6] = (byte) (-70);
      byteArray1[7] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray1, (ConstantPool) null, 198, (int) (byte)78);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Utility.methodSignatureReturnType("LT-P/%/6v';V");
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      byte byte0 = (byte)43;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)43;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = "/h#3wBj";
      try { 
        Utility.typeOfSignature("/h#3wBj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: /h#3wBj
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Utility.isSet(1048, 3710);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)19;
      Utility.isJavaIdentifierPart('=');
      // Undeclared exception!
      try { 
        Utility.signatureToString("O", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("KKtOz& Q*Zyx*(yK", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `KKtOz& Q*Zyx*(yK'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      ConstantLong constantLong0 = new ConstantLong((-2006L));
      ConstantInteger constantInteger0 = new ConstantInteger(74);
      ConstantLong constantLong1 = new ConstantLong(constantLong0);
      Constant[] constantArray0 = new Constant[4];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2103, 84);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = "CNSTANTMethodref";
      Utility.typeOfSignature("CNSTANTMethodref");
      Utility.signatureToString("CNSTANTMethodref", true);
      File file0 = null;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null, "char");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // char
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.signatureToString("Lh:J7\"0TB\"", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lh:J7\"0TB\"
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)11;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1381), (-1381));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aload\t\t%211
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      int int0 = Utility.clearBit(41, 41);
      assertEquals(41, int0);
      
      String string0 = Utility.accessToString(82, true);
      assertEquals("private final volatile", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-29);
      byteArray1[1] = (byte)80;
      byteArray1[2] = (byte)118;
      byteArray1[3] = (byte) (-10);
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = Utility.printArray(objectArray0, false, false);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      try { 
        Utility.typeOfSignature("P,olw3*J'5{m~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: P,olw3*J'5{m~
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("+nt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: nt
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)68;
      byteArray0[6] = (byte) (-103);
      byteArray0[7] = (byte)14;
      byteArray0[8] = (byte) (-11);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("idiv", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte)7;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Utility.convertString("");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("interface", "", "interface");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: interface
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Utility.replace("\n     Method Arguments:", "\n     Method Arguments:", "\n     Method Arguments:");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-85);
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)89;
      Constant[] constantArray0 = new Constant[2];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(171, 237);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantFloat constantFloat0 = new ConstantFloat((byte) (-69));
      constantArray0[1] = (Constant) constantFloat0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (-1448), (int) (byte) (-67));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aload_0
         // 1:    swap
         // 2:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("^F3G$@J#F", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType(129, 129);
      constantArray0[0] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertArrayEquals(new byte[] {(byte)94, (byte)70, (byte)51, (byte)71, (byte)0, (byte)74, (byte)35, (byte)70}, byteArray0);
      assertEquals("dup2_x2", string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Utility.accessToString(16384);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte) (-74);
      byteArray0[0] = (byte)55;
      byteArray0[7] = (byte) (-74);
      byteArray0[8] = (byte) (-74);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 3971, (int) (byte)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("multianewarray", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      byteSequence0.readFloat();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals(7, byteSequence0.getIndex());
      
      String string0 = Utility.classOrInterface(109);
      assertEquals("class", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = "G|Iwtk,k";
      boolean boolean0 = true;
      try { 
        Utility.methodSignatureReturnType("G|Iwtk,k", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `G|Iwtk,k'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Utility.printArray(objectArray0, false);
      char char0 = 'o';
      Utility.isJavaIdentifierPart('o');
      Utility.printArray(objectArray0);
      try { 
        Utility.methodSignatureReturnType("java.lang.Object@143e7c46, java.lang.Object@5be5635e, java.lang.Object@592dd25c, java.lang.Object@2ac6e0ec");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `java.lang.Object@143e7c46, java.lang.Object@5be5635e, java.lang.Object@592dd25c, java.lang.Object@2ac6e0ec'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Utility.printArray((Object[]) null);
      // Undeclared exception!
      try { 
        Utility.convertString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Utility.setBit(256, 121);
      char char0 = 'd';
      Utility.format(43, 43, true, 'd');
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)47;
      byteArray0[0] = (byte)47;
      byte byte1 = (byte)65;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-19);
      byteArray0[3] = (byte) (-102);
      Utility.equals(byteArray0, byteArray0);
      String string0 = "YGS/Qlql&5R8@J>@{";
      // Undeclared exception!
      try { 
        Utility.signatureToString("YGS/Qlql&5R8@J>@{", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `YGS/Qlql&5R8@J>@{'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.getSignature("Nh#t3Q1~GM,=`aB61}]");
      assertEquals("LNh#t3Q1~GM,=`aB61}];", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      boolean boolean0 = false;
      Utility.printArray(objectArray0, false, false);
      String string0 = null;
      String string1 = "f`OA5";
      int int0 = 207;
      int int1 = 0;
      String string2 = "org.apache.bcel.classfile.LocalVariableTypeTable";
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("f`OA5", "org.apache.bcel.classfile.LocalVariableTypeTable");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"org.apache.bcel.classfile.LocalVariableTypeTable\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte) (-91);
      ConstantString constantString0 = new ConstantString((byte) (-91));
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.compactClassName("if_acmpeq\t\t#-23296", ";Q*6;.?'b#H8o|jQJ", false);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)39;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)84;
      byteArray1[1] = (byte)55;
      byteArray1[2] = (byte)84;
      byteArray1[3] = (byte)55;
      byteArray1[4] = (byte)84;
      boolean boolean0 = Utility.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dload_3", string0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)99;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dadd", string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)79;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      try { 
        Utility.typeOfSignature("org.apahe.bcel.classfile.BootstrapMethod");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: org.apahe.bcel.classfile.BootstrapMethod
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('`');
      assertFalse(boolean0);
      
      byte byte0 = Utility.typeOfSignature("J2@D(.E*SXCo0");
      assertEquals((byte)11, byte0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "multianewarray");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "multianewarray");
      // Undeclared exception!
      try { 
        Utility.signatureToString("LD<9,;V", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LD<9,;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("lcmp", string0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Utility.isJavaIdentifierPart('\\');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      Object object0 = new Object();
      objectArray0[2] = object0;
      // Undeclared exception!
      try { 
        Utility.printArray((PrintStream) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Utility.convertString("4%\"ml%t");
      Utility.getSignature("iDm");
      try { 
        Utility.methodSignatureArgumentTypes("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("V", false);
      assertArrayEquals(new byte[] {(byte)86}, byteArray0);
      
      Utility.signatureToString("V", true);
      boolean boolean0 = Utility.isJavaIdentifierPart('D');
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte)97;
      byteArray1[2] = (byte)125;
      byteArray1[3] = (byte) (-22);
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte)35;
      byteArray2[1] = (byte)125;
      byteArray2[2] = (byte)97;
      byteArray2[3] = (byte) (-22);
      byteArray2[4] = (byte)35;
      byteArray2[5] = (byte)35;
      boolean boolean1 = Utility.equals(byteArray1, byteArray2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)73;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-96);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte) (-96);
      byteArray0[2] = (byte) (-20);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("if_icmpne\t\t#-4884", string0);
      
      String string1 = Utility.methodTypeToSignature("if_icmpne\t\t#-4884", (String[]) null);
      assertEquals("()Lif_icmpne;", string1);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Utility.getSignature("?82lA~/u-*yI!Z'@E");
      Utility.accessToString((-1486), false);
      try { 
        Utility.typeOfSignature(".b!i'.K1g{47Ak67l_8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: .b!i'.K1g{47Ak67l_8
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('A');
      assertTrue(boolean0);
      
      int int0 = Utility.clearBit(4442, 4442);
      assertEquals(4442, int0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = "(vHBx(e{<,";
      Utility.compactClassName("(vHBx(e{<,");
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("(vHBx(e{<,", "(vHBx(e{<,", "(vHBx(e{<,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `vHBx(e{<,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Utility.compactClassName("", "m", true);
      try { 
        Utility.methodSignatureReturnType("", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)12;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)46, (int) (byte)69);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte) (-33);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("i2l", string0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte)15;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("idiv", string0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[3];
      ConstantLong constantLong0 = new ConstantLong((byte) (-62));
      constantArray0[0] = (Constant) constantLong0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((-1747), 931);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[1] = (Constant) constantMethodref1;
      ConstantClass constantClass0 = new ConstantClass(byteSequence0);
      constantArray0[2] = (Constant) constantClass0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantPool0.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 64194. Constant pool size is: 3
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      try { 
        Utility.typeOfSignature("H; @");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: H; @
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readChar();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.encode(byteArray0, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      int int0 = 1057;
      Utility.classOrInterface(1057);
      try { 
        Utility.typeOfMethodSignature("class");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      MockFile mockFile0 = new MockFile("g");
      MockFile mockFile1 = new MockFile(mockFile0, "g");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      Locale locale0 = Locale.KOREA;
      Object[] objectArray0 = new Object[9];
      mockFile0.setReadable(true, true);
      objectArray0[0] = (Object) "g";
      objectArray0[1] = (Object) locale0;
      objectArray0[2] = (Object) locale0;
      objectArray0[3] = (Object) mockFile1;
      objectArray0[4] = (Object) mockPrintStream0;
      objectArray0[5] = (Object) mockPrintStream0;
      objectArray0[6] = (Object) "g";
      objectArray0[7] = (Object) locale0;
      objectArray0[8] = (Object) locale0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "g", objectArray0);
      Utility.printArray(printStream0, objectArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString("g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `g'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-51);
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte) (-90);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-31);
      byteArray1[1] = (byte)26;
      byteArray1[3] = (byte) (-31);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("frem", string0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-124);
      byteArray0[0] = (byte) (-113);
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte) (-76);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("d2l", string0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("O05Q4<SL6>NI:ak<%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: O05Q4<SL6>NI:ak<%
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('9');
      assertTrue(boolean0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Am;RETxp");
      int int0 = Utility.setBit((-668), 193);
      assertEquals((-666), int0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.equals(byteArray0, byteArray0);
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.fillup((String) null, 7, true, 'B');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Utility.getSignature(";{X");
      byte[] byteArray0 = new byte[11];
      byte byte0 = (byte)53;
      byteArray0[10] = (byte)53;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Utility.isJavaIdentifierPart('^');
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString((String) null, "^e~Kz$amN", "org.apache.bcel.classfile.LocalVariableTable", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool0, true);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2711, (int) (byte)1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Utility.clearBit(3301, 391);
      String string0 = "][2~.";
      Utility.compactClassName("][2~.", "][2~.", false);
      Utility.searchOpcode("][2~.");
      Utility.setBit(1295, (-2317));
      String string1 = "<J^<>?@n& g2";
      Utility.searchOpcode("<J^<>?@n& g2");
      try { 
        Utility.methodSignatureArgumentTypes("][2~.", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ][2~.
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Utility.getSignature("breakpoint");
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)25;
      byteArray0[0] = (byte)50;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantLong constantLong0 = new ConstantLong((byte)25);
      Constant[] constantArray0 = new Constant[7];
      constantArray0[0] = (Constant) constantLong0;
      constantArray0[1] = (Constant) constantLong0;
      constantArray0[2] = (Constant) constantLong0;
      constantArray0[3] = (Constant) constantLong0;
      constantArray0[4] = (Constant) constantLong0;
      constantArray0[5] = (Constant) constantLong0;
      constantArray0[6] = (Constant) constantLong0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, false);
      assertEquals("aaload", string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte) (-101);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("aastore", string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      Utility.compactClassName("/", "/", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("WN`#;l:mLb$o':ue", ".", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte) (-105);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Utility.clearBit(63, (-35));
      String string0 = "'r>$NkD";
      // Undeclared exception!
      Utility.replace("'r>$NkD", "", "");
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      int int0 = (-3);
      Utility.accessToString((-3));
      try { 
        Utility.methodSignatureToString("public protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", "public protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", "public protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: public protected static final synchronized volatile transient native interface abstract strictfp synthetic annotation enum
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Utility.decode("pGL 2Tx5kX+r$(1$^G9", false);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("=R8^(uk)$u", "=R8^(uk)$u", (String) null, true, (LocalVariableTable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("", (String) null, "VEx8@\"HSvH%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)89;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("dup", string0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfMethodSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = Utility.convertString("char");
      assertEquals("char", string0);
      
      String string1 = Utility.getSignature("char");
      assertEquals("C", string1);
      
      String string2 = Utility.classOrInterface(490);
      assertEquals("class", string2);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("FV");
      assertEquals((byte)6, byte0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Utility.compactClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-49);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('^');
      assertFalse(boolean0);
      
      byte[] byteArray0 = Utility.decode("interface", false);
      assertArrayEquals(new byte[] {(byte)105, (byte)110, (byte)116, (byte)101, (byte)114, (byte)102, (byte)97, (byte)99, (byte)101}, byteArray0);
      
      String string0 = Utility.compactClassName("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)78;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)0, 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      int int0 = (-879);
      Utility.classOrInterface((-879));
      boolean boolean0 = true;
      Utility.accessToString((-879), true);
      String string0 = "w+j`LK>IX<L)/";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("class", "public final transient abstract strictfp synthetic annotation enum", "w+j`LK>IX<L)/", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: class
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = Utility.convertString("4X1zTFzjaI{d{FZe");
      assertEquals("4X1zTFzjaI{d{FZe", string0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-78);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedShort();
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      short short0 = Utility.searchOpcode("nop");
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-55);
      // Undeclared exception!
      try { 
        Utility.signatureToString("Warning: Padding byte != 0 in ", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Warning: Padding byte != 0 in '
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = object0;
      objectArray0[1] = object3;
      objectArray0[2] = object2;
      objectArray0[3] = object3;
      objectArray0[4] = object0;
      objectArray0[5] = object1;
      objectArray0[6] = object4;
      Utility.printArray(objectArray0, true, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[0];
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-76), 5376, false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)70;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.replace("lstore_1", "void", "lstore_1");
      assertEquals("lstore_1", string0);
      
      String string1 = Utility.accessToString((int) (byte)64);
      assertEquals("volatile", string1);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-22);
      byteArray0[5] = (byte)9;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte) (-53);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-53);
      byteArray1[1] = (byte)122;
      byteArray1[2] = (byte)39;
      byteArray1[3] = (byte)77;
      Utility.equals(byteArray0, byteArray1);
      // Undeclared exception!
      try { 
        Utility.signatureToString("H", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `H'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)39;
      byteArray0[3] = (byte) (-14);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lload_0", string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Utility.fillup("class", (byte)73, true, 'x');
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)122;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 2234, (-2254), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-71);
      byte byte0 = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-113);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 1679, 118);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-93), (int) (byte) (-94));
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("L$l$8b$I$A$A$A$A$A$A$A;V", "V,)GL}_dINjrRPs", "Could not create the directory ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: L$l$8b$I$A$A$A$A$A$A$A;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('-');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("F1`");
      assertEquals("float", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "RnY3=]Bt-~Ba|0A l7";
      stringArray0[1] = "float";
      stringArray0[2] = "|Jr+!:<4w!l]6FE'\"";
      stringArray0[3] = "F1`";
      stringArray0[4] = "F1`";
      stringArray0[5] = "F1`";
      stringArray0[6] = "htN ?d(Nb!E!Gw(oN;";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-99);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte) (-25);
      byteArray0[7] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("if_icmpge\t\t#7331", string1);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[4];
      ConstantInterfaceMethodref constantInterfaceMethodref0 = new ConstantInterfaceMethodref((byte) (-78), (byte) (-78));
      constantArray0[0] = (Constant) constantInterfaceMethodref0;
      ConstantDouble constantDouble0 = new ConstantDouble((-3098.22));
      ConstantDouble constantDouble1 = new ConstantDouble(constantDouble0);
      constantArray0[1] = (Constant) constantDouble1;
      ConstantMethodHandle constantMethodHandle0 = new ConstantMethodHandle((byte) (-78), 288);
      constantArray0[2] = (Constant) constantMethodHandle0;
      ConstantDouble constantDouble2 = new ConstantDouble(constantDouble1);
      constantArray0[3] = (Constant) constantDouble2;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: 178. Constant pool size is: 4
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = Utility.decode("<ilCegalPopcod>", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("istore_1", string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)16;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)12;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)46;
      byteArray1[1] = (byte)7;
      byteArray1[2] = (byte) (-68);
      byteArray1[3] = (byte)14;
      byteArray1[4] = (byte)46;
      byteArray1[5] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      byteSequence0.available();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("iaload", string0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte) (-86);
      byteArray0[4] = (byte) (-86);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-86), (int) (byte) (-86));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("R|5QlKC{~sboO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `R|5QlKC{~sboO'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)73;
      Utility.encode(byteArray0, false);
      try { 
        Utility.methodSignatureArgumentTypes("$E$A$e2I", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $E$A$e2I
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      Constant[] constantArray0 = new Constant[2];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte) (-49);
      byteArray0[8] = (byte)127;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantFloat constantFloat0 = new ConstantFloat(byteSequence0);
      ConstantFloat constantFloat1 = new ConstantFloat(constantFloat0);
      constantArray0[0] = (Constant) constantFloat1;
      ConstantString constantString0 = new ConstantString(130);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 90, 2234, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = Utility.replace("", "iaload", "Ke~K[^w +");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-103);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lshl", string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      Utility.compactClassName("(2NF+%y&b+A$*5S2Fc");
      Utility.accessToString(82, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)5;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 250, 250);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string1 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      ConstantString constantString0 = new ConstantString((-4057));
      Constant[] constantArray0 = new Constant[8];
      constantArray0[1] = (Constant) constantString0;
      constantArray0[2] = (Constant) constantString0;
      constantArray0[3] = (Constant) constantString0;
      constantArray0[4] = (Constant) constantString0;
      constantArray0[5] = (Constant) constantString0;
      constantArray0[6] = (Constant) constantString0;
      constantArray0[7] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte) (-70);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool(constantArray0);
      Utility.codeToString(byteSequence0, constantPool1, true);
      String string0 = Utility.convertString("(vHBx(e{<,");
      assertEquals("(vHBx(e{<,", string0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      byte byte0 = (byte)41;
      int int0 = 1992;
      Utility.clearBit(13, 1992);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ", ";
      Utility.printArray(objectArray0, false, true);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-76);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-1), (int) (byte) (-1), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      Utility.isSet(1928, 1928);
      Utility.isSet(1048, 3710);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)32;
      Utility.encode(byteArray0, false);
      Utility.isJavaIdentifierPart('=');
      String string0 = "O";
      // Undeclared exception!
      try { 
        Utility.signatureToString("O", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `O'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      int int0 = Utility.setBit((-69), 213);
      assertEquals((-69), int0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.getSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String string0 = Utility.format(170, (-997), true, 'a');
      assertEquals("170", string0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      char char0 = '4';
      Utility.isJavaIdentifierPart('4');
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String string0 = "5";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte) (-76);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-76), 690);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    laload
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      Utility.classOrInterface(132);
      // Undeclared exception!
      try { 
        Utility.searchOpcode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\n     Method Arguments:";
      stringArray0[1] = "i]S}fq1[`";
      stringArray0[2] = "\n     Method Arguments:";
      stringArray0[3] = "\n     Method Arguments:";
      stringArray0[4] = "i]S}fq1[`";
      stringArray0[5] = "i]S}fq1[`";
      stringArray0[6] = "i]S}fq1[`";
      stringArray0[7] = "i]S}fq1[`";
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-65);
      try { 
        Utility.typeOfSignature("8{3.0d5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 8{3.0d5
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-84);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("ireturn", string0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String string0 = Utility.convertString("areturn");
      assertEquals("areturn", string0);
      
      String string1 = Utility.compactClassName("38E@nD", "DZ7am;D", false);
      assertEquals("38E@nD", string1);
      
      String string2 = Utility.signatureToString("Illegal type: ");
      assertEquals("int", string2);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Utility.fillup("9CyG9u'${", 0, false, 'z');
      // Undeclared exception!
      try { 
        Utility.signatureToString("", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = "LrB]EL@#g'dH";
      try { 
        Utility.methodSignatureReturnType("LrB]EL@#g'dH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: LrB]EL@#g'dH
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "RnY3=]Bt-~Ba|0A l7";
      stringArray0[1] = "\t\t<";
      stringArray0[2] = "void";
      stringArray0[3] = "getstatic";
      stringArray0[4] = "htN ?d(Nb!E!Gw(oN;";
      stringArray0[5] = "|Jr+!:<4w!l]6FE'\"";
      try { 
        Utility.methodTypeToSignature("void", stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid type: void
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{}y7hU%th");
      byteArray0[0] = (byte)116;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("ineg", string0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)82;
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)75;
      byteArray0[8] = (byte) (-106);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.compactClassName("invokespecial", false);
      assertEquals("invokespecial", string0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      String string0 = Utility.format(914, 3, false, '6');
      assertEquals("914", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "instanceof";
      stringArray0[1] = "914";
      stringArray0[2] = "instanceof";
      stringArray0[3] = "914";
      stringArray0[4] = "instanceof";
      stringArray0[5] = "instanceof";
      stringArray0[6] = "";
      String string1 = Utility.methodTypeToSignature("instanceof", stringArray0);
      assertEquals("(Linstanceof;L914;Linstanceof;L914;Linstanceof;Linstanceof;L;)Linstanceof;", string1);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString("Rxnk1U2g&", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `Rxnk1U2g&'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      short short0 = Utility.searchOpcode("astore_1");
      assertEquals((short)76, short0);
      
      ConstantFieldref constantFieldref0 = new ConstantFieldref(130, 65);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-55);
      byteArray0[2] = (byte)109;
      Constant.setComparator((BCELComparator) null);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-62);
      byteArray0[5] = (byte) (-13);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[8];
      constantArray0[0] = (Constant) constantFieldref0;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref0;
      constantArray0[3] = (Constant) constantFieldref0;
      constantArray0[4] = (Constant) constantFieldref0;
      constantArray0[5] = (Constant) constantFieldref0;
      constantArray0[6] = (Constant) constantFieldref0;
      constantArray0[7] = (Constant) constantFieldref0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      Utility.codeToString(byteSequence0, constantPool1, false);
      Utility.codeToString(byteSequence0, constantPool1);
      String string0 = Utility.printArray((Object[]) constantArray0);
      assertEquals("{CONSTANT_Fieldref[9](class_index = 130, name_and_type_index = 65), CONSTANT_Fieldref[9](class_index = 130, name_and_type_index = 65), CONSTANT_Fieldref[9](class_index = 130, name_and_type_index = 65), CONSTANT_Fieldref[9](class_index = 130, name_and_type_index = 65), CONSTANT_Fieldref[9](class_index = 130, name_and_type_index = 65), CONSTANT_Fieldref[9](class_index = 130, name_and_type_index = 65), CONSTANT_Fieldref[9](class_index = 130, name_and_type_index = 65), CONSTANT_Fieldref[9](class_index = 130, name_and_type_index = 65)}", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String string0 = "%yC)?9:Ogj<;:Su.";
      try { 
        Utility.decode("%yC)?9:Ogj<;:Su.", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-54);
      byteArray0[6] = (byte)108;
      byteArray0[7] = (byte)45;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 2415, 403);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-103);
      try { 
        Utility.typeOfSignature("<_(Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: <_(Z
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?Sk6?I$p?ED@DvUI");
      Utility.getSignature("");
      // Undeclared exception!
      try { 
        Utility.signatureToString("Lo1\"ib1#fK6L}Z<;V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: Lo1\"ib1#fK6L}Z<;V
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Utility.convertString("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)61;
      Utility.equals(byteArray0, byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)123;
      byteArray1[1] = (byte)57;
      byteArray1[2] = (byte) (-73);
      byte byte0 = (byte)112;
      byteArray1[3] = (byte)112;
      byteArray1[4] = (byte)46;
      byteArray1[5] = (byte)57;
      Utility.equals(byteArray1, byteArray1);
      String string0 = ":Rz";
      try { 
        Utility.methodSignatureArgumentTypes(":Rz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: :Rz
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-109);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.read(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-109);
      byteArray1[1] = (byte) (-109);
      byteArray1[2] = (byte) (-109);
      byteArray1[3] = (byte) (-117);
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      String string0 = Utility.compactClassName("i2s");
      assertEquals("i2s", string0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)62;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, 74, (int) (byte) (-61));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('0');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      try { 
        Utility.typeOfSignature("EnID6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: EnID6
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-89);
      byteArray1[1] = (byte) (-55);
      byteArray1[2] = (byte)7;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-30);
      byteArray0[6] = (byte) (-56);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      byteSequence2.skipBytes((byte)2);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, true);
      assertEquals("l2f", string0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-99);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      Utility.classOrInterface(190);
      Object[] objectArray0 = new Object[0];
      Utility.printArray(objectArray0, false);
      try { 
        Utility.typeOfSignature("\\");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: \\
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String[] stringArray0 = Constants.ACCESS_NAMES;
      try { 
        Utility.typeOfSignature("-jdB?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: -jdB?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte) (-91);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence2, (ConstantPool) null, false);
      assertEquals("lastore", string0);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      try { 
        Utility.typeOfSignature("2(vj\"ew=+p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 2(vj\"ew=+p
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      // Undeclared exception!
      try { 
        Utility.replace("i]S}fq1[`", (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-98);
      byteArray1[1] = (byte) (-55);
      byteArray1[2] = (byte)7;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      try { 
        Utility.methodSignatureReturnType("=q.*ts!0B'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `=q.*ts!0B''
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte) (-61);
      byteArray0[8] = (byte)15;
      String string0 = Utility.signatureToString("JR#.5t", true);
      assertEquals("long", string0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      Utility.convertString("4%\"ml%t");
      Utility.getSignature("iDm");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)55;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (-1993), (int) (byte)50);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 0:    aaload
         // 1:    
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte) (-34);
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte) (-19);
      byteArray0[8] = (byte)34;
      Constant[] constantArray0 = new Constant[0];
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (int) (byte) (-19), 234);
      assertEquals("0:    iconst_m1\n1:    frem\n2:    frem\n3:    areturn\n4:    lshr\n5:    <illegal opcode>\n6:    iushr\n7:    <illegal opcode>\n8:    fload_0\n", string0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String string0 = Utility.convertString(")FE@?3K");
      assertEquals(")FE@?3K", string0);
      
      String string1 = Utility.getSignature("iDm");
      assertEquals("LiDm;", string1);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WaL9sQF3+");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)50;
      String string2 = Utility.codeToString(byteArray0, (ConstantPool) null, (-2845), (-1993));
      assertEquals("0:    aaload\n", string2);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      Utility.compactClassName("F]_9", true);
      Utility.compactClassName("F]_9", "F]_9", false);
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        Utility.equals((byte[]) null, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence1, constantPool0, true);
      try { 
        Utility.typeOfSignature("checkcast");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: checkcast
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      short short0 = Utility.searchOpcode("}Y;hs+RP!E@6");
      assertEquals((short) (-1), short0);
      
      String string0 = Utility.compactClassName("}Y;hs+RP!E@6", "}Y;hs+RP!E@6", true);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.signatureToString("S7\")TLGXjdXhOMLV=#", true);
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte)87;
      byteArray0[4] = (byte)65;
      byteArray0[6] = (byte)105;
      byteArray0[8] = (byte)65;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      String string0 = "F1`";
      Utility.methodSignatureReturnType("F1`");
      try { 
        Utility.typeOfSignature("KI\"J#pFy");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: KI\"J#pFy
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)86;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("sastore", string0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      Utility.signatureToString("F`KE:J>bgwoSR*(/", false);
      Utility.isJavaIdentifierPart('=');
      try { 
        Utility.typeOfSignature("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte) (-70);
      byteArray0[8] = (byte)40;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = null;
      boolean boolean0 = true;
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      String string0 = "~9] }DgiD{";
      Code code0 = null;
      try {
        code0 = new Code(103, (byte)23, byteSequence0, (ConstantPool) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Code", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Utility.equals(byteArray0, byteArray0);
      try { 
        Utility.methodSignatureToString("", "7R&tWJ#", "ifnull", true, (LocalVariableTable) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      int int0 = 0;
      Utility.isSet(0, 0);
      String string0 = "Anb=bOLJ4";
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("Anb=bOLJ4", "d=unR}-*CMJ", "Anb=bOLJ4", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Anb=bOLJ4
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Utility.setBit(13, 8);
      Utility.compactClassName("n,6iY/F");
      Utility.accessToString(719);
      Utility.accessToString(840);
      byte[] byteArray0 = new byte[0];
      Utility.toHexString(byteArray0);
      // Undeclared exception!
      try { 
        Utility.signatureToString((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)76;
      byteArray0[8] = (byte)44;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("sipush\t\t-27162", string0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)56;
      byteArray0[3] = (byte)56;
      byteArray0[2] = (byte)56;
      byteArray0[5] = (byte)56;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("fload_2", string0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)18;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.available();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("castore", string0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)59;
      byte[] byteArray1 = Utility.decode("''", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray1, constantPool0, (-1262), (int) (byte) (-84), false);
      assertEquals("0:    dload_1\n1:    dload_1\n", string0);
      
      String string1 = Utility.getSignature("byte");
      assertEquals("B", string1);
      
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-84);
      byteArray2[1] = (byte)59;
      byteArray2[2] = (byte) (-84);
      byteArray2[3] = (byte) (-84);
      byteArray2[4] = (byte)59;
      byteArray2[5] = (byte) (-84);
      byteArray2[6] = (byte) (-84);
      byteArray2[7] = (byte) (-84);
      byteArray2[8] = (byte)59;
      ByteSequence byteSequence0 = new ByteSequence(byteArray2);
      Utility.codeToString(byteSequence0, constantPool0);
      String string2 = Utility.toHexString(byteArray1);
      assertEquals("27 27", string2);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-121);
      byteArray0[4] = (byte)91;
      String string0 = Utility.signatureToString("Z!v{\"w%RJAQd", false);
      assertEquals("boolean", string0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-116);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("f2l", string0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      String string0 = Utility.replace("areturn", "checkcast", ")");
      String string1 = Utility.compactClassName("areturn", "org.apache.bcel.classfile.ConstantFloat", false);
      assertTrue(string1.equals((Object)string0));
      
      byte byte0 = Utility.typeOfSignature("Sx]X0\"r`I'?");
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)121;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.compactClassName("dstore_2", "dstore_0", true);
      assertEquals("dstore_2", string0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      Utility.convertString("double");
      // Undeclared exception!
      try { 
        Utility.methodSignatureArgumentTypes((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-127);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, constantPool0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      String string0 = Utility.convertString("4%\"ml%t");
      assertEquals("4%\\\"ml%t", string0);
      
      String string1 = Utility.getSignature("iDm");
      assertEquals("LiDm;", string1);
      
      byte[] byteArray0 = Utility.decode("<$zR", false);
      assertArrayEquals(new byte[] {(byte)60, (byte)45, (byte)82}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      ConstantUtf8.getCachedInstance("4%\"ml%t");
      ConstantFieldref constantFieldref0 = new ConstantFieldref(1792, 199);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      Constant[] constantArray0 = new Constant[9];
      constantArray0[0] = (Constant) constantFieldref1;
      constantArray0[1] = (Constant) constantFieldref0;
      constantArray0[2] = (Constant) constantFieldref1;
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantUtf8.getInstance("4%\"ml%t");
      constantArray0[5] = (Constant) constantFieldref1;
      constantArray0[6] = (Constant) constantFieldref0;
      constantArray0[7] = (Constant) constantFieldref0;
      ConstantString constantString0 = new ConstantString(90);
      constantArray0[8] = (Constant) constantString0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantString constantString1 = new ConstantString(46);
      constantString1.copy();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-60);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-319), 1792, true);
      assertEquals("0:    wide\t(wide)\n", string0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      ByteSequence byteSequence2 = new ByteSequence(byteArray0);
      ByteSequence byteSequence3 = new ByteSequence(byteArray0);
      byteSequence2.available();
      try { 
        Utility.codeToString(byteSequence1, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-87);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-23);
      byteArray0[7] = (byte) (-81);
      byteArray0[8] = (byte) (-85);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte) (-81), (int) (byte) (-78));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('z');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)103;
      Utility.equals(byteArray0, byteArray0);
      String string0 = "\\*]fc|<vF0&jX)7>$";
      try { 
        Utility.decode("*]fc|<vF0&jX)7>$", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("nop", string0);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      boolean boolean0 = true;
      Utility.compactClassName("%->GyT3", true);
      byte[] byteArray0 = new byte[0];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[1];
      int int0 = 0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref(11, 0);
      constantArray0[0] = (Constant) constantMethodref0;
      byteSequence0.available();
      constantMethodref0.setNameAndTypeIndex((-2733));
      constantMethodref0.copy();
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      try { 
        constantPool0.getConstantString((-2377), (byte)19);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid constant pool reference: -2377. Constant pool size is: 1
         //
         verifyException("org.apache.bcel.classfile.ConstantPool", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)115;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteArray0, constantPool0, (-679), 1293, true);
      assertEquals("0:    drem\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n", string0);
      
      String string1 = Utility.getSignature("0:    drem\n1:    nop\n2:    nop\n3:    nop\n4:    nop\n5:    nop\n6:    nop\n7:    nop\n8:    nop\n");
      assertEquals("L0:;", string1);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      boolean boolean0 = true;
      try { 
        Utility.decode("", true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      int int0 = Utility.clearBit(98, 98);
      assertEquals(98, int0);
      
      byte byte0 = Utility.typeOfSignature("[Nh9*k<py.");
      assertEquals((byte)13, byte0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)13;
      boolean boolean0 = Utility.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      String string0 = Utility.getSignature("");
      assertEquals("L;", string0);
      
      Object object0 = new Object();
      byte byte0 = Utility.typeOfSignature("L;");
      assertEquals((byte)14, byte0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-38);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)14;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Constant[] constantArray0 = new Constant[6];
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("}y;hs+rp!e@6");
      constantArray0[0] = (Constant) constantUtf8_0;
      Constant constant0 = constantUtf8_0.copy();
      constantArray0[1] = constant0;
      ConstantInteger constantInteger0 = new ConstantInteger((byte)14);
      constantArray0[2] = (Constant) constantInteger0;
      ConstantMethodref constantMethodref0 = new ConstantMethodref((byte) (-38), 2231);
      ConstantMethodref constantMethodref1 = new ConstantMethodref(constantMethodref0);
      constantArray0[3] = (Constant) constantMethodref1;
      ConstantUtf8 constantUtf8_1 = ConstantUtf8.getInstance("d2l");
      constantArray0[4] = (Constant) constantUtf8_1;
      ConstantNameAndType constantNameAndType0 = new ConstantNameAndType((byte) (-38), (byte)14);
      constantArray0[5] = (Constant) constantNameAndType0;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      ConstantPool constantPool1 = constantPool0.copy();
      String string1 = Utility.codeToString(byteSequence0, constantPool1, true);
      assertEquals("dconst_0", string1);
      
      String string2 = Utility.compactClassName("[]", "dconst_0", true);
      assertEquals("[]", string2);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("LT-P\f%/6vV';V");
      assertEquals((byte)14, byte0);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      String string0 = "(vHBx(e{<,";
      Utility.compactClassName("(vHBx(e{<,");
      try { 
        Utility.methodSignatureArgumentTypes("(vHBx(e{<,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `vHBx(e{<,'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      String string0 = "/40";
      Utility.fillup("/40", 0, false, 's');
      String string1 = "1/jp=P?i3g";
      try { 
        Utility.methodSignatureArgumentTypes("1/jp=P?i3g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 1/jp=P?i3g
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      Utility.decode("java.lang.", false);
      ConstantLong constantLong0 = new ConstantLong(0L);
      try { 
        Utility.typeOfSignature("RWt)$jde8-V@&7+'!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: RWt)$jde8-V@&7+'!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      Utility.fillup(", ", (-1590), true, 'Q');
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        Utility.codeToString((byte[]) null, constantPool0, (-3469), (int) (byte)76, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      Utility.convertString("4%\"ml%t");
      Utility.getSignature("iDm");
      try { 
        Utility.typeOfSignature("G-XM)!XGX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: G-XM)!XGX
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-120);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("l2i", string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "l2i";
      String string1 = Utility.printArray(objectArray0, true, false);
      assertEquals("{null, l2i}", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-51);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, false);
      assertEquals("d2f", string0);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)41;
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-101);
      Utility.equals(byteArray0, byteArray0);
      int int0 = 1992;
      Utility.clearBit(13, 1992);
      // Undeclared exception!
      try { 
        Utility.signatureToString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Utility.convertString("");
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("~`{$]VI)I0o?", (String) null, "4qnyI58", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ~`{$]VI)I0o?
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fload_0", string0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-79);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("return", string0);
      
      String string1 = Utility.methodTypeToSignature("null", (String[]) null);
      assertEquals("()Lnull;", string1);
      
      String string2 = Utility.compactClassName("iaload");
      assertEquals("iaload", string2);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-122);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)15;
      byteArray0[6] = (byte)95;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("i2f", string0);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("Z<8w");
      assertEquals((byte)4, byte0);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Utility.getSignature("");
      // Undeclared exception!
      try { 
        Utility.encode((byte[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-6);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)19, 195);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("java.lang.", false);
      Constant[] constantArray0 = new Constant[5];
      ConstantLong constantLong0 = new ConstantLong(0L);
      constantArray0[0] = (Constant) constantLong0;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantString constantString0 = new ConstantString(byteSequence0);
      ConstantString constantString1 = new ConstantString(constantString0);
      constantArray0[1] = (Constant) constantString1;
      ConstantUtf8 constantUtf8_0 = ConstantUtf8.getCachedInstance("From\tTo\tHandler\tType\n");
      constantArray0[2] = (Constant) constantUtf8_0;
      ConstantFieldref constantFieldref0 = new ConstantFieldref(130, 90);
      constantArray0[3] = (Constant) constantFieldref0;
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      constantArray0[4] = (Constant) constantFieldref1;
      ConstantPool constantPool0 = new ConstantPool(constantArray0);
      constantString1.copy();
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, constantPool0, 633, (-319), false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-68);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lshl", string0);
      
      String string1 = Utility.accessToString(1492, false);
      assertEquals("protected final volatile transient native abstract", string1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) (byte)22;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) (byte)121;
      objectArray0[3] = (Object) "lload\t\t%71";
      String string2 = Utility.printArray(objectArray0);
      assertEquals("{22, null, 121, lload\t\t%71}", string2);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-110);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Utility.isJavaIdentifierPart(';');
      Utility.searchOpcode("astore_1");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      ConstantFieldref constantFieldref0 = new ConstantFieldref(130, 130);
      ConstantFieldref constantFieldref1 = new ConstantFieldref(constantFieldref0);
      try { 
        Utility.typeOfSignature("? super ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ? super 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Utility.isJavaIdentifierPart('d');
      String string0 = null;
      // Undeclared exception!
      try { 
        Utility.typeOfSignature((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      String string0 = Utility.accessToString((-1444));
      assertEquals("protected static final volatile interface strictfp synthetic annotation enum", string0);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)19;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteSequence0, (ConstantPool) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      ConstantString constantString0 = new ConstantString((byte) (-84));
      constantString0.copy();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      // Undeclared exception!
      try { 
        Utility.signatureToString("UJM", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `UJM'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      String string0 = Utility.format(43, 43, true, 'u');
      assertEquals("43uuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-108);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("lcmp", string1);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart('y');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      String string0 = Utility.methodSignatureReturnType("DR9,");
      assertEquals("double", string0);
      
      String string1 = Utility.signatureToString("DR9,", true);
      assertEquals("double", string1);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Utility.convertString("\t\t%");
      Utility.getSignature("&Sa");
      boolean boolean0 = false;
      Utility.decode("", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("<A{2ei5X%WlSx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `<A{2ei5X%WlSx'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      int int0 = (-161);
      int int1 = 32;
      boolean boolean0 = true;
      Utility.format((-161), 32, true, '0');
      Utility.compactClassName("S9_S{]ag ");
      String string0 = "";
      String string1 = "|72^";
      int int2 = 111;
      LocalVariable[] localVariableArray0 = new LocalVariable[9];
      int int3 = 2104;
      int int4 = 1353;
      Attribute[] attributeArray0 = new Attribute[9];
      int int5 = (-240);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-240));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      String string0 = Utility.getSignature("int");
      assertEquals("I", string0);
      
      String string1 = Utility.methodSignatureReturnType("I", false);
      assertEquals("int", string1);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      Utility.clearBit(63, 0);
      String string0 = "'r>NkD";
      Utility.convertString("=gF)%5<R;wG4");
      String string1 = null;
      // Undeclared exception!
      try { 
        Utility.decode((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      String string0 = Utility.signatureToString("F`KE:J>bgwoSR*(/", false);
      assertEquals("float", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte) (-56);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string1 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lstore_2", string1);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-62);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte)33;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("fload_2", string0);
      
      byte byte0 = Utility.typeOfSignature("InitObject");
      assertEquals((byte)10, byte0);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-68);
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)12;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)46;
      byteArray1[1] = (byte)7;
      byteArray1[2] = (byte) (-68);
      byteArray1[3] = (byte)14;
      byteArray1[4] = (byte)46;
      ByteSequence byteSequence0 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("iaload", string0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      String string0 = Utility.getSignature("iconst_m1");
      assertEquals("Liconst_m1;", string0);
      
      boolean boolean0 = Utility.isSet((-2617), (-2617));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)91;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("pop", string0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      Utility.codeToString(byteSequence0, constantPool0, false);
      String string0 = "(vHBx(e{<,";
      Utility.convertString("(vHBx(e{<,");
      try { 
        Utility.typeOfMethodSignature("(vHBx(e{<,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: (vHBx(e{<,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Utility.getSignature("java.lang.");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[5] = (byte) (-89);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte)53;
      byteArray0[8] = (byte)15;
      Utility.encode(byteArray0, true);
      Utility.signatureToString("Ljava/lang/;", true);
      // Undeclared exception!
      try { 
        Utility.methodSignatureToString("N yzu!", "fstore_2", ")");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: N yzu!
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)19, 97);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("java.lang.", false);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool1 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool1, false);
      assertEquals("fmul", string0);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-72);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("dsub", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "dsub";
      stringArray0[1] = "org.apache.bcel.classfile.Utility$JavaWriter";
      stringArray0[2] = "org.apache.bcel.classfile.Utility$JavaWriter";
      stringArray0[3] = "org.apache.bcel.classfile.Utility$JavaWriter";
      stringArray0[4] = "dsub";
      stringArray0[5] = "org.apache.bcel.classfile.Utility$JavaWriter";
      stringArray0[6] = "org.apache.bcel.classfile.Utility$JavaWriter";
      stringArray0[7] = "}\"2\"kS%my U.C";
      String string1 = Utility.methodTypeToSignature("org.apache.bcel.classfile.Utility$JavaWriter", stringArray0);
      assertEquals("(Ldsub;Lorg/apache/bcel/classfile/Utility$JavaWriter;Lorg/apache/bcel/classfile/Utility$JavaWriter;Lorg/apache/bcel/classfile/Utility$JavaWriter;Ldsub;Lorg/apache/bcel/classfile/Utility$JavaWriter;Lorg/apache/bcel/classfile/Utility$JavaWriter;L}\"2\"kS%my;)Lorg/apache/bcel/classfile/Utility$JavaWriter;", string1);
      
      String string2 = Utility.printArray((Object[]) stringArray0);
      assertEquals("{dsub, org.apache.bcel.classfile.Utility$JavaWriter, org.apache.bcel.classfile.Utility$JavaWriter, org.apache.bcel.classfile.Utility$JavaWriter, dsub, org.apache.bcel.classfile.Utility$JavaWriter, org.apache.bcel.classfile.Utility$JavaWriter, }\"2\"kS%my U.C}", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)125;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("lushr", string0);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      Utility.getSignature("breakpoint");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)74;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      byteSequence1.readUnsignedByte();
      Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, true);
      assertEquals("<illegal opcode>", string0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      String string0 = "+N8)vtGk|cD=]";
      Utility.getSignature("+N8)vtGk|cD=]");
      try { 
        Utility.typeOfSignature(";rxgp6[):LFNCyb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: ;rxgp6[):LFNCyb
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      String string0 = "%>p,&m";
      try { 
        Utility.typeOfSignature("%>p,&m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: %>p,&m
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)48;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals("faload", string0);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Utility.signatureToString("F`KE:J>bgwoSR*(/", false);
      Utility.decode("^F3G$@J#F", false);
      try { 
        Utility.methodSignatureArgumentTypes("float", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: float
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)91;
      // Undeclared exception!
      try { 
        Utility.signatureToString("N8-=qzV%", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `N8-=qzV%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      Utility.signatureToString("B LWLBh<$wYD(%", false);
      // Undeclared exception!
      try { 
        Utility.replace("B LWLBh<$wYD(%", (String) null, "Invalid signature: `");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte) (-98);
      String string0 = Utility.encode(byteArray0, true);
      assertEquals("$l$8b$I$A$A$A$A$A$A$A", string0);
      
      String string1 = Utility.methodSignatureToString("()Ldup_x1;", ":", "$l$8b$I$A$A$A$A$A$A$A");
      assertEquals("$l$8b$I$A$A$A$A$A$A$A dup_x1 :()", string1);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      Utility.replace("", "\n     Method Arguments:", "if_icmplt");
      Utility.format(518, 171, true, '7');
      try { 
        Utility.decode("org.apache.bcel.classfile.Utility$1", true);
        fail("Expecting exception: ZipException");
      
      } catch(ZipException e) {
         //
         // Not in GZIP format
         //
         verifyException("java.util.zip.GZIPInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      short short0 = Utility.searchOpcode("astore_1");
      assertEquals((short)76, short0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)94;
      String string0 = Utility.codeToString(byteArray0, (ConstantPool) null, (-1085), (-664));
      assertEquals("0:    dup2_x2\n1:    ishl\n2:    dup2_x2\n", string0);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      try { 
        Utility.typeOfSignature("7oYDj~X5X&F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 7oYDj~X5X&F
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      byte byte0 = Utility.typeOfSignature("V");
      assertEquals((byte)12, byte0);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte) (-1);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      Utility.compactClassName("-kp%Tg", false);
      // Undeclared exception!
      try { 
        Utility.signatureToString("\t\t%", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `\t\t%'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      boolean boolean0 = Utility.isJavaIdentifierPart(';');
      assertFalse(boolean0);
      
      short short0 = Utility.searchOpcode("astore_1");
      assertEquals((short)76, short0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-81);
      byteArray0[1] = (byte)100;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byteSequence0.readUnsignedByte();
      Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      String string0 = Utility.methodTypeToSignature("astore_1", (String[]) null);
      assertEquals("()Lastore_1;", string0);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      int int0 = 3729;
      int int1 = 4266;
      Utility.setBit(3729, 4266);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char char0 = '_';
      Utility.isJavaIdentifierPart('_');
      try { 
        Utility.methodSignatureReturnType("L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: L
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      byte[] byteArray0 = Utility.decode("O05Q4<SL6>NI:ak%", false);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      String string0 = Utility.codeToString(byteSequence0, constantPool0, true);
      assertEquals("iastore", string0);
      assertEquals(16, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      byte byte0 = (byte) (-84);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-84);
      String string0 = "$vJ_e0Et_DKbK}*d";
      try { 
        Utility.typeOfSignature("$vJ_e0Et_DKbK}*d");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: $vJ_e0Et_DKbK}*d
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      String string0 = Utility.signatureToString("Synthetic");
      assertEquals("short", string0);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)11;
      byteArray0[4] = (byte) (-5);
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-128);
      byteArray1[1] = (byte) (-110);
      byteArray1[2] = (byte) (-5);
      byteArray1[3] = (byte) (-128);
      byteArray1[4] = (byte) (-128);
      byteArray1[5] = (byte)11;
      ByteSequence byteSequence1 = new ByteSequence(byteArray1);
      String string0 = Utility.codeToString(byteSequence1, (ConstantPool) null, true);
      assertEquals("ior", string0);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-103);
      byteArray0[4] = (byte)68;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      try { 
        Utility.typeOfSignature("Ab<_ZM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: Ab<_ZM
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      try { 
        Utility.typeOfSignature("9nt{WpBT-B>T*]ZFF,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 9nt{WpBT-B>T*]ZFF,
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      String string0 = "0r/FrYEi-\\$IQ{n~g\"2";
      try { 
        Utility.methodSignatureArgumentTypes("0r/FrYEi-$IQ{n~g\"2", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid method signature: 0r/FrYEi-$IQ{n~g\"2
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      Utility.compactClassName("Type of ConstValue invalid: ", "Type of ConstValue invalid: ", true);
      // Undeclared exception!
      try { 
        Utility.codeToString((ByteSequence) null, (ConstantPool) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      try { 
        Utility.methodSignatureReturnType("K$YFvo<wTp:G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid signature: `K$YFvo<wTp:G'
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      String string0 = Utility.getSignature("Cy[#]_vy%t>:aR");
      assertEquals("[LCy;", string0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-1);
      String string1 = Utility.codeToString(byteArray0, (ConstantPool) null, (-756), 73);
      assertEquals("0:    fload_0\n1:    fload_0\n2:    impdep2\n", string1);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-123);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte)85;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      String string0 = Utility.codeToString(byteSequence0, (ConstantPool) null, false);
      assertEquals(2, byteSequence0.getIndex());
      assertEquals("aload\t\t%5", string0);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      Utility.getSignature("breakpoint");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte) (-89);
      // Undeclared exception!
      try { 
        Utility.codeToString(byteArray0, (ConstantPool) null, (int) (byte)34, (int) (byte) (-127));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Byte code error: 
         //
         verifyException("org.apache.bcel.classfile.Utility", e);
      }
  }
}
