/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 17:11:43 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.ObjectStreamConstants;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Enumeration;
import java.util.Locale;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1253);
      bufferedInputStream0.mark((-1530));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 0, 0, 2);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-2555), 59);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("W", token0.toString());
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '^';
      charArray0[1] = '^';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager0.getNextToken();
      charArrayReader0.reset();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      charArrayReader0.ready();
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fC0/X)");
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'y';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      try { 
        charArrayReader1.ready();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("hV-h,1uJgl0 B~");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      StringReader stringReader1 = new StringReader("j]=.");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 26, (-1));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 74. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = 'Q';
      charArray0[2] = '=';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 95, 95);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      assertEquals(96, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 28, 1244);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      StringBuffer stringBuffer0 = new StringBuffer();
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(13);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 13. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|,(_");
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      bufferedReader0.lines();
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, (byte)123, (byte)4);
      charArrayReader0.ready();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginLine);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = 'm';
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      charArray0[3] = '-';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 7, 7);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      CharArrayReader charArrayReader1 = null;
      try {
        charArrayReader1 = new CharArrayReader(charArray0, 7, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1253);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      bufferedInputStream0.mark((-1530));
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'F';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'F', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'F', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-1530), (-2319));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'F', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'F', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2319), token0.endColumn);
      assertEquals((-1530), token0.beginLine);
      assertEquals((-2319), token0.beginColumn);
      assertEquals((-1530), token0.endLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertEquals((-2319), javaCharStream0.getBeginColumn());
      assertEquals((-2319), javaCharStream0.getEndColumn());
      assertEquals((-1530), javaCharStream0.getEndLine());
      assertEquals((-1530), javaCharStream0.getBeginLine());
      assertEquals((-1530), javaCharStream0.getLine());
      assertEquals((-2319), javaCharStream0.getColumn());
      assertEquals("F", token0.toString());
      assertArrayEquals(new char[] {'F', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedInputStream pipedInputStream1 = new PipedInputStream(56);
      assertNotNull(pipedInputStream1);
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertEquals(0, pipedInputStream1.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 56);
      assertNotNull(bufferedInputStream0);
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertEquals(0, pipedInputStream0.available());
      
      bufferedInputStream0.mark(56);
      assertNotSame(pipedInputStream0, pipedInputStream1);
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'A';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'A'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-1307), (-3404));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'A'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'A'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-3404), token0.endColumn);
      assertEquals((-1307), token0.beginLine);
      assertEquals((-1307), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-3404), token0.beginColumn);
      assertNotNull(token0);
      assertEquals((-3404), javaCharStream0.getColumn());
      assertEquals((-1307), javaCharStream0.getEndLine());
      assertEquals((-1307), javaCharStream0.getLine());
      assertEquals((-1307), javaCharStream0.getBeginLine());
      assertEquals((-3404), javaCharStream0.getEndColumn());
      assertEquals((-3404), javaCharStream0.getBeginColumn());
      assertEquals("A", token0.toString());
      assertArrayEquals(new char[] {'A'}, charArray0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1307), token1.beginLine);
      assertEquals((-1307), token1.endLine);
      assertEquals((-3404), token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals((-3404), token1.beginColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals((-3404), javaCharStream0.getColumn());
      assertEquals((-1307), javaCharStream0.getEndLine());
      assertEquals((-1307), javaCharStream0.getLine());
      assertEquals((-1307), javaCharStream0.getBeginLine());
      assertEquals((-3404), javaCharStream0.getEndColumn());
      assertEquals((-3404), javaCharStream0.getBeginColumn());
      assertEquals("A", token1.toString());
      assertArrayEquals(new char[] {'A'}, charArray0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-3404), token2.beginColumn);
      assertEquals((-1307), token2.endLine);
      assertEquals((-1307), token2.beginLine);
      assertEquals(74, token2.kind);
      assertEquals((-3404), token2.endColumn);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals((-3404), javaCharStream0.getColumn());
      assertEquals((-1307), javaCharStream0.getEndLine());
      assertEquals((-1307), javaCharStream0.getLine());
      assertEquals((-1307), javaCharStream0.getBeginLine());
      assertEquals((-3404), javaCharStream0.getEndColumn());
      assertEquals((-3404), javaCharStream0.getBeginColumn());
      assertEquals("A", token2.toString());
      assertArrayEquals(new char[] {'A'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {' ', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = charArrayReader0.markSupported();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {' ', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 95, 95);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {' ', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {' ', '\u0000', '\u0000'}, charArray0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      javaParserTokenManager0.image = stringBuffer0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, javaParserTokenManager0.image.length());
      assertEquals("", javaParserTokenManager0.image.toString());
      
      javaParserTokenManager0.jjnewStateCnt = 95;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 95, column 96.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[12];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[3] = 'Z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-2958), (-2958));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((Reader) charArrayReader0, (-2958), (-2958));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      String string0 = javaCharStream0.GetImage();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2957), token0.endColumn);
      assertEquals((-2958), token0.beginColumn);
      assertEquals(98, token0.kind);
      assertEquals((-2958), token0.beginLine);
      assertEquals((-2958), token0.endLine);
      assertNotNull(token0);
      assertEquals((-2957), javaCharStream0.getEndColumn());
      assertEquals((-2957), javaCharStream0.getColumn());
      assertEquals((-2958), javaCharStream0.getLine());
      assertEquals((-2958), javaCharStream0.getEndLine());
      assertEquals((-2958), javaCharStream0.getBeginColumn());
      assertEquals((-2958), javaCharStream0.getBeginLine());
      assertEquals("&&", token0.toString());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = charArrayReader0.ready();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-544), 4460);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(81, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals("[", token0.toString());
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "[");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {''}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, '', '');
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {''}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {''}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 127, column 128.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1828, 2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1828, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      PipedInputStream pipedInputStream1 = new PipedInputStream(56);
      assertNotNull(pipedInputStream1);
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertEquals(0, pipedInputStream1.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 56);
      assertNotNull(bufferedInputStream0);
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertEquals(0, pipedInputStream0.available());
      
      bufferedInputStream0.mark(56);
      assertNotSame(pipedInputStream0, pipedInputStream1);
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'T'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'T'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 56, 56);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'T'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'T'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(56, token0.endLine);
      assertEquals(56, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(56, token0.beginLine);
      assertEquals(56, token0.endColumn);
      assertNotNull(token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(56, javaCharStream0.getLine());
      assertEquals(56, javaCharStream0.getEndColumn());
      assertEquals(56, javaCharStream0.getBeginColumn());
      assertEquals(56, javaCharStream0.getBeginLine());
      assertEquals(56, javaCharStream0.getEndLine());
      assertEquals(56, javaCharStream0.getColumn());
      assertEquals("T", token0.toString());
      assertArrayEquals(new char[] {'T'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(56, token1.endLine);
      assertEquals(56, token1.beginLine);
      assertEquals(56, token1.beginColumn);
      assertEquals(56, token1.endColumn);
      assertEquals(0, token1.kind);
      assertNotNull(token1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(56, javaCharStream0.getLine());
      assertEquals(56, javaCharStream0.getEndColumn());
      assertEquals(56, javaCharStream0.getBeginColumn());
      assertEquals(56, javaCharStream0.getBeginLine());
      assertEquals(56, javaCharStream0.getEndLine());
      assertEquals(56, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertArrayEquals(new char[] {'T'}, charArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token0, token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(56, token0.endLine);
      assertEquals(56, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(56, token0.beginLine);
      assertEquals(56, token0.endColumn);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token0.equals((Object)token1));
      assertEquals(56, javaCharStream0.getLine());
      assertEquals(56, javaCharStream0.getEndColumn());
      assertEquals(56, javaCharStream0.getBeginColumn());
      assertEquals(56, javaCharStream0.getBeginLine());
      assertEquals(56, javaCharStream0.getEndLine());
      assertEquals(56, javaCharStream0.getColumn());
      assertEquals("T", token0.toString());
      assertArrayEquals(new char[] {'T'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      charArray0[3] = '/';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'/', '/', '/', '/'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-1242), 38);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'/', '/', '/', '/'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'/', '/', '/', '/'}, charArray0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1242, column 42.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'M'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 2324, (byte)68);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'M'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'M'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2324, token0.endLine);
      assertEquals(2324, token0.beginLine);
      assertEquals(68, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(68, token0.endColumn);
      assertNotNull(token0);
      assertEquals(2324, javaCharStream0.getEndLine());
      assertEquals(2324, javaCharStream0.getLine());
      assertEquals(68, javaCharStream0.getEndColumn());
      assertEquals(68, javaCharStream0.getColumn());
      assertEquals(2324, javaCharStream0.getBeginLine());
      assertEquals(68, javaCharStream0.getBeginColumn());
      assertEquals("M", token0.toString());
      assertArrayEquals(new char[] {'M'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2324, token1.endLine);
      assertEquals(68, token1.beginColumn);
      assertEquals(68, token1.endColumn);
      assertEquals(2324, token1.beginLine);
      assertEquals(0, token1.kind);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(2324, javaCharStream0.getEndLine());
      assertEquals(2324, javaCharStream0.getLine());
      assertEquals(68, javaCharStream0.getEndColumn());
      assertEquals(68, javaCharStream0.getColumn());
      assertEquals(2324, javaCharStream0.getBeginLine());
      assertEquals(68, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertArrayEquals(new char[] {'M'}, charArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(mockPrintStream0);
      assertEquals(2324, javaCharStream0.getEndLine());
      assertEquals(2324, javaCharStream0.getLine());
      assertEquals(68, javaCharStream0.getEndColumn());
      assertEquals(68, javaCharStream0.getColumn());
      assertEquals(2324, javaCharStream0.getBeginLine());
      assertEquals(68, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'M'}, charArray0);
      
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "M", 68, (-2516));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("hV-h,1uJgl0 B~");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = '5';
      charArray0[2] = ',';
      charArray0[3] = 'S';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {',', '5', ',', 'S'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 32, 53);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {',', '5', ',', 'S'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {',', '5', ',', 'S'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(32, token0.endLine);
      assertEquals(53, token0.endColumn);
      assertEquals(84, token0.kind);
      assertEquals(32, token0.beginLine);
      assertEquals(53, token0.beginColumn);
      assertNotNull(token0);
      assertEquals(32, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getEndLine());
      assertEquals(32, javaCharStream0.getLine());
      assertEquals(53, javaCharStream0.getColumn());
      assertEquals(53, javaCharStream0.getBeginColumn());
      assertEquals(53, javaCharStream0.getEndColumn());
      assertEquals(",", token0.toString());
      assertArrayEquals(new char[] {',', '5', ',', 'S'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(84);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 84. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)82;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-116);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)82, (byte)0, (byte)0, (byte)2, (byte) (-116), (byte)0}, byteArray0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertNotNull(inputStreamReader0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)82, (byte)0, (byte)0, (byte)2, (byte) (-116), (byte)0}, byteArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(inputStreamReader0);
      assertNotNull(bufferedReader0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)82, (byte)0, (byte)0, (byte)2, (byte) (-116), (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(inputStreamReader0, 28, (byte) (-116));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)82, (byte)0, (byte)0, (byte)2, (byte) (-116), (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)82, (byte)0, (byte)0, (byte)2, (byte) (-116), (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-116), token0.beginColumn);
      assertEquals((-116), token0.endColumn);
      assertEquals(28, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(28, token0.endLine);
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-116), javaCharStream0.getBeginColumn());
      assertEquals((-116), javaCharStream0.getEndColumn());
      assertEquals((-116), javaCharStream0.getColumn());
      assertEquals(28, javaCharStream0.getLine());
      assertEquals(28, javaCharStream0.getBeginLine());
      assertEquals(28, javaCharStream0.getEndLine());
      assertEquals("R", token0.toString());
      assertArrayEquals(new byte[] {(byte)82, (byte)0, (byte)0, (byte)2, (byte) (-116), (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 341);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 341. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = '.';
      charArray0[2] = '(';
      charArray0[3] = 'Z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'Z', '.', '(', 'Z'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)33, 68);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'Z', '.', '(', 'Z'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'Z', '.', '(', 'Z'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(33, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(68, token0.beginColumn);
      assertEquals(68, token0.endColumn);
      assertEquals(33, token0.beginLine);
      assertNotNull(token0);
      assertEquals(33, javaCharStream0.getBeginLine());
      assertEquals(33, javaCharStream0.getEndLine());
      assertEquals(68, javaCharStream0.getColumn());
      assertEquals(68, javaCharStream0.getBeginColumn());
      assertEquals(33, javaCharStream0.getLine());
      assertEquals(68, javaCharStream0.getEndColumn());
      assertEquals("Z", token0.toString());
      assertArrayEquals(new char[] {'Z', '.', '(', 'Z'}, charArray0);
      
      Token token1 = Token.newToken('(');
      assertNotSame(token1, token0);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(33, token2.beginLine);
      assertEquals(69, token2.beginColumn);
      assertEquals(33, token2.endLine);
      assertEquals(85, token2.kind);
      assertEquals(69, token2.endColumn);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(69, javaCharStream0.getColumn());
      assertEquals(69, javaCharStream0.getBeginColumn());
      assertEquals(33, javaCharStream0.getBeginLine());
      assertEquals(33, javaCharStream0.getEndLine());
      assertEquals(33, javaCharStream0.getLine());
      assertEquals(69, javaCharStream0.getEndColumn());
      assertEquals(".", token2.toString());
      assertArrayEquals(new char[] {'Z', '.', '(', 'Z'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = 'Z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'%', 'Z', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'%', 'Z', '\u0000'}, charArray0);
      
      byte[] byteArray0 = new byte[8];
      charArrayReader1.reset();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'%', 'Z', '\u0000'}, charArray0);
      
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-62);
      Token token0 = Token.newToken((byte) (-62));
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      token0.endColumn = (int) (byte)91;
      assertNull(token0.toString());
      
      token0.image = "";
      assertEquals("", token0.toString());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'%', 'Z', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'%', 'Z', '\u0000'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endColumn);
      assertEquals(108, token1.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals("%", token1.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'%', 'Z', '\u0000'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'%', 'Z', '\u0000'}, charArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'1'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)6, 20);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'1'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'1'}, charArray0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals(6, token0.endLine);
      assertEquals(20, token0.endColumn);
      assertEquals(6, token0.beginLine);
      assertEquals(20, token0.beginColumn);
      assertNotNull(token0);
      assertEquals(6, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getColumn());
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getEndLine());
      assertEquals("1", token0.toString());
      assertArrayEquals(new char[] {'1'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getColumn());
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'1'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = 'l';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'6', 'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 26, 50);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'6', 'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'6', 'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token_GTToken0.toString());
      assertArrayEquals(new char[] {'6', 'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(51, token0.endColumn);
      assertEquals(26, token0.endLine);
      assertEquals(26, token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals(50, token0.beginColumn);
      assertNotNull(token0);
      assertEquals(26, javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(26, javaCharStream0.getBeginLine());
      assertEquals(26, javaCharStream0.getEndLine());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals("6l", token0.toString());
      assertArrayEquals(new char[] {'6', 'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(1263);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1263. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lh!");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '0';
      charArray0[1] = 'Z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'0', 'Z', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 2347, 2347);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'0', 'Z', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = javaCharStream0.prevCharIsCR;
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'0', 'Z', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'0', 'Z', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'0', 'Z', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2347, token0.beginColumn);
      assertEquals(2347, token0.beginLine);
      assertEquals(2347, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(2347, token0.endColumn);
      assertNotNull(token0);
      assertEquals(2347, javaCharStream0.getLine());
      assertEquals(2347, javaCharStream0.getEndColumn());
      assertEquals(2347, javaCharStream0.getBeginColumn());
      assertEquals(2347, javaCharStream0.getColumn());
      assertEquals(2347, javaCharStream0.getBeginLine());
      assertEquals(2347, javaCharStream0.getEndLine());
      assertEquals("0", token0.toString());
      assertArrayEquals(new char[] {'0', 'Z', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(2480);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2480. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L'Z B)H^");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1528, (byte)18);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 109, 1512);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1512, token0.beginColumn);
      assertEquals(109, token0.endLine);
      assertEquals(109, token0.beginLine);
      assertEquals(1512, token0.endColumn);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(109, javaCharStream1.getBeginLine());
      assertEquals(1512, javaCharStream1.getColumn());
      assertEquals(109, javaCharStream1.getLine());
      assertEquals(1512, javaCharStream1.getEndColumn());
      assertEquals(1512, javaCharStream1.getBeginColumn());
      assertEquals(109, javaCharStream1.getEndLine());
      assertEquals("L", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 109, column 1515.  Encountered: \" \" (32), after : \"\\'Z\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[2] = 'Z';
      charArray0[5] = '4';
      charArray0[6] = '4';
      charArray0[7] = '';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'4', '\u0000', 'Z', '\u0000', '\u0000', '4', '4', ''}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte) (-116), (byte) (-116));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'4', '\u0000', 'Z', '\u0000', '\u0000', '4', '4', ''}, charArray0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'4', '\u0000', 'Z', '\u0000', '\u0000', '4', '4', ''}, charArray0);
      
      boolean boolean0 = javaCharStream0.prevCharIsCR;
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'4', '\u0000', 'Z', '\u0000', '\u0000', '4', '4', ''}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'4', '\u0000', 'Z', '\u0000', '\u0000', '4', '4', ''}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals((-116), token0.endColumn);
      assertEquals((-116), token0.beginLine);
      assertEquals((-116), token0.endLine);
      assertEquals((-116), token0.beginColumn);
      assertNotNull(token0);
      assertEquals((-116), javaCharStream0.getLine());
      assertEquals((-116), javaCharStream0.getEndLine());
      assertEquals((-116), javaCharStream0.getColumn());
      assertEquals((-116), javaCharStream0.getEndColumn());
      assertEquals((-116), javaCharStream0.getBeginColumn());
      assertEquals((-116), javaCharStream0.getBeginLine());
      assertEquals("4", token0.toString());
      assertArrayEquals(new char[] {'4', '\u0000', 'Z', '\u0000', '\u0000', '4', '4', ''}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((byte) (-116));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -116. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\'';
      charArray0[1] = '&';
      charArray0[2] = 'M';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)58;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '&', 'M', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 43, 43);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\'', '&', 'M', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\'', '&', 'M', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 43, column 45.  Encountered: \"M\" (77), after : \"\\'&\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)33;
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-1314), (byte)33);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)33, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertNotNull(inputStreamReader0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)33, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedReader0, (byte)33, 14);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 33, column 14.  Encountered: \"\\\\\" (92), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[0] = (byte)68;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte)29;
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = '6';
      charArray0[2] = 'g';
      charArray0[3] = ',';
      charArray0[4] = ':';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'l', '6', 'g', ',', ':'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 13, 34);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'l', '6', 'g', ',', ':'}, charArray0);
      
      javaCharStream0.tokenBegin = (int) ':';
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'l', '6', 'g', ',', ':'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'l', '6', 'g', ',', ':'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(74, token0.kind);
      assertEquals(36, token0.endColumn);
      assertEquals(13, token0.beginLine);
      assertEquals(34, token0.beginColumn);
      assertEquals(13, token0.endLine);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token0);
      assertEquals("l6g", token0.toString());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(34, javaCharStream0.getBeginColumn());
      assertEquals(36, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(36, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'l', '6', 'g', ',', ':'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((byte)68);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 68. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-9);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)18, (byte)18, (byte)18, (byte) (-9)}, byteArray0);
      
      charArray0[1] = '0';
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'d', '0', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)18, (byte)18);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'d', '0', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'d', '0', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(19, token0.endColumn);
      assertEquals(18, token0.beginColumn);
      assertEquals(18, token0.beginLine);
      assertEquals(18, token0.endLine);
      assertNotNull(token0);
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals("d0", token0.toString());
      assertArrayEquals(new char[] {'d', '0', '\u0000'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader0 = new StringReader("static");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, '%', '%');
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      javaCharStream0.bufpos = 116;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 116, (-31));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(116, javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.jjFillToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(116, javaCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertNotNull(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals("", token0.toString());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FRA", locale1.getISO3Country());
      
      String string0 = javaCharStream1.GetImage();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(37, token1.beginColumn);
      assertEquals(37, token1.beginLine);
      assertEquals(52, token1.kind);
      assertEquals(37, token1.endLine);
      assertEquals(42, token1.endColumn);
      assertNotNull(token1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals(37, javaCharStream0.getBeginColumn());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals("static", token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token0, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token0.equals((Object)token1));
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals(37, javaCharStream0.getBeginColumn());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals("", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream1, Integer.MAX_VALUE);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2147483647. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "catch");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', '>', '>', '>', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'>', '>', '>', '>', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 616, 616);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'>', '>', '>', '>', '\u0000', '\u0000'}, charArray0);
      
      charArrayReader1.reset();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'>', '>', '>', '>', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean3 = charArrayReader1.ready();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertArrayEquals(new char[] {'>', '>', '>', '>', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'>', '>', '>', '>', '\u0000', '\u0000'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'>', '>', '>', '>', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(616, token0.endLine);
      assertEquals(618, token0.endColumn);
      assertEquals(124, token0.kind);
      assertEquals(616, token0.beginColumn);
      assertEquals(616, token0.beginLine);
      assertNotNull(token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(616, javaCharStream0.getEndLine());
      assertEquals(616, javaCharStream0.getEndColumn());
      assertEquals(616, javaCharStream0.getBeginColumn());
      assertEquals(616, javaCharStream0.getLine());
      assertEquals(616, javaCharStream0.getBeginLine());
      assertEquals(616, javaCharStream0.getColumn());
      assertEquals(">>>", token0.toString());
      assertArrayEquals(new char[] {'>', '>', '>', '>', '\u0000', '\u0000'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(616, javaCharStream0.getEndLine());
      assertEquals(616, javaCharStream0.getEndColumn());
      assertEquals(616, javaCharStream0.getBeginColumn());
      assertEquals(616, javaCharStream0.getLine());
      assertEquals(616, javaCharStream0.getBeginLine());
      assertEquals(616, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'>', '>', '>', '>', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)68;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)29;
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '.';
      charArray0[2] = '.';
      charArray0[3] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'(', '.', '.', '('}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte) (-116), 67);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'(', '.', '.', '('}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'(', '.', '.', '('}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'(', '.', '.', '('}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(67, token0.endColumn);
      assertEquals(67, token0.beginColumn);
      assertEquals((-116), token0.endLine);
      assertEquals(77, token0.kind);
      assertEquals((-116), token0.beginLine);
      assertNotNull(token0);
      assertEquals((-116), javaCharStream0.getBeginLine());
      assertEquals(67, javaCharStream0.getColumn());
      assertEquals(67, javaCharStream0.getEndColumn());
      assertEquals((-116), javaCharStream0.getEndLine());
      assertEquals((-116), javaCharStream0.getLine());
      assertEquals(67, javaCharStream0.getBeginColumn());
      assertEquals("(", token0.toString());
      assertArrayEquals(new char[] {'(', '.', '.', '('}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-1846));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1846. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      assertNotNull(pipedInputStream1);
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertEquals(0, pipedInputStream1.available());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '+';
      charArray0[1] = ';';
      charArray0[2] = '+';
      charArray0[3] = 'Q';
      charArray0[4] = 'j';
      charArray0[5] = 'Q';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'+', ';', '+', 'Q', 'j', 'Q'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte) (-116), (-331));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'+', ';', '+', 'Q', 'j', 'Q'}, charArray0);
      
      boolean boolean1 = charArrayReader0.ready();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'+', ';', '+', 'Q', 'j', 'Q'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'+', ';', '+', 'Q', 'j', 'Q'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-116), token0.beginLine);
      assertEquals((-331), token0.endColumn);
      assertEquals((-116), token0.endLine);
      assertEquals((-331), token0.beginColumn);
      assertEquals(101, token0.kind);
      assertNotNull(token0);
      assertEquals((-331), javaCharStream0.getBeginColumn());
      assertEquals((-116), javaCharStream0.getLine());
      assertEquals((-331), javaCharStream0.getColumn());
      assertEquals((-116), javaCharStream0.getBeginLine());
      assertEquals((-331), javaCharStream0.getEndColumn());
      assertEquals((-116), javaCharStream0.getEndLine());
      assertEquals("+", token0.toString());
      assertArrayEquals(new char[] {'+', ';', '+', 'Q', 'j', 'Q'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-116), token1.beginLine);
      assertEquals((-330), token1.beginColumn);
      assertEquals((-330), token1.endColumn);
      assertEquals(83, token1.kind);
      assertEquals((-116), token1.endLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals((-116), javaCharStream0.getLine());
      assertEquals((-330), javaCharStream0.getColumn());
      assertEquals((-116), javaCharStream0.getBeginLine());
      assertEquals((-330), javaCharStream0.getBeginColumn());
      assertEquals((-330), javaCharStream0.getEndColumn());
      assertEquals((-116), javaCharStream0.getEndLine());
      assertEquals(";", token1.toString());
      assertArrayEquals(new char[] {'+', ';', '+', 'Q', 'j', 'Q'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-116), javaCharStream0.getLine());
      assertEquals((-330), javaCharStream0.getColumn());
      assertEquals((-116), javaCharStream0.getBeginLine());
      assertEquals((-330), javaCharStream0.getBeginColumn());
      assertEquals((-330), javaCharStream0.getEndColumn());
      assertEquals((-116), javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'+', ';', '+', 'Q', 'j', 'Q'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'a';
      charArray0[1] = 'L';
      charArray0[3] = 'A';
      charArray0[3] = 'L';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'a', 'L', '\u0000', 'L', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-2958), (-2958));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'a', 'L', '\u0000', 'L', '\u0000'}, charArray0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0, (-2958), (-2958));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'a', 'L', '\u0000', 'L', '\u0000'}, charArray0);
      
      javaCharStream0.available = (-2958);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufpos = 38;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(38, javaCharStream0.bufpos);
      assertNotNull(string0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
      assertArrayEquals(new char[] {'a', 'L', '\u0000', 'L', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(38, javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'a', 'L', '\u0000', 'L', '\u0000'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(38, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'a', 'L', '\u0000', 'L', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-2958), token0.beginColumn);
      assertEquals((-2958), token0.beginLine);
      assertEquals((-2957), token0.endColumn);
      assertEquals((-2958), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token0);
      assertEquals("aL", token0.toString());
      assertEquals((-2958), javaCharStream0.getBeginColumn());
      assertEquals((-2958), javaCharStream0.getLine());
      assertEquals((-2957), javaCharStream0.getEndColumn());
      assertEquals((-2958), javaCharStream0.getBeginLine());
      assertEquals((-2958), javaCharStream0.getEndLine());
      assertEquals((-2957), javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'a', 'L', '\u0000', 'L', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'%', 'Z', 'Z'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "I");
      assertFalse(boolean0);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '8';
      charArray1[1] = ',';
      charArray1[2] = ',';
      charArray1[3] = 'Z';
      charArray1[4] = 'Z';
      charArray1[5] = 'Z';
      charArray1[6] = 'F';
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      assertNotNull(charArrayReader1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'8', ',', ',', 'Z', 'Z', 'Z', 'F'}, charArray1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'8', ',', ',', 'Z', 'Z', 'Z', 'F'}, charArray1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'8', ',', ',', 'Z', 'Z', 'Z', 'F'}, charArray1);
      
      charArrayReader1.mark((-1));
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'8', ',', ',', 'Z', 'Z', 'Z', 'F'}, charArray1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("8", token0.toString());
      assertArrayEquals(new char[] {'8', ',', ',', 'Z', 'Z', 'Z', 'F'}, charArray1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'8', ',', ',', 'Z', 'Z', 'Z', 'F'}, charArray1);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, (-1227));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1227. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'l';
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      bufferedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      bufferedInputStream0.mark((-2368));
      assertEquals(0, pipedInputStream0.available());
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'l', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader0 = new StringReader("+=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 699, 699);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 699, (-1), 699);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(699, token0.endLine);
      assertEquals(699, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals((-1), token0.beginColumn);
      assertEquals(110, token0.kind);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(699, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals(699, javaCharStream1.getLine());
      assertEquals(699, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals("+=", token0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(699, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals(699, javaCharStream1.getLine());
      assertEquals(699, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertNull(token_GTToken0.toString());
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i=,y._");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 95, 68);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(68, token0.endColumn);
      assertEquals(95, token0.endLine);
      assertEquals(95, token0.beginLine);
      assertEquals(68, token0.beginColumn);
      assertNotNull(token0);
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(68, javaCharStream0.getEndColumn());
      assertEquals(68, javaCharStream0.getColumn());
      assertEquals(68, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals("i", token0.toString());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayReader charArrayReader0 = null;
      try {
        charArrayReader0 = new CharArrayReader((char[]) null, 95, 95);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*,1X>lsh!P-%jW<C*p");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, (-2021), (-2958));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0, (-1), (-2021));
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(103, token0.kind);
      assertEquals((-2021), token0.beginColumn);
      assertEquals((-1), token0.beginLine);
      assertEquals((-2021), token0.endColumn);
      assertEquals((-1), token0.endLine);
      assertNotNull(token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-2021), javaCharStream0.getBeginColumn());
      assertEquals((-2021), javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-2021), javaCharStream0.getEndColumn());
      assertEquals("*", token0.toString());
      assertArrayEquals(new char[] {'*', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)33;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      StringReader stringReader0 = new StringReader("}q*=Go@`_hSmgx8o");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 29, 40);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = charArrayReader0.ready();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(29, token0.beginLine);
      assertEquals(40, token0.endColumn);
      assertEquals(40, token0.beginColumn);
      assertEquals(80, token0.kind);
      assertEquals(29, token0.endLine);
      assertNotNull(token0);
      assertEquals(29, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getBeginColumn());
      assertEquals(29, javaCharStream0.getEndLine());
      assertEquals("}", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(41, token1.beginColumn);
      assertEquals(29, token1.endLine);
      assertEquals(29, token1.beginLine);
      assertEquals(41, token1.endColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(29, javaCharStream0.getLine());
      assertEquals(29, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals("q", token1.toString());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(token0, token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(29, token0.beginLine);
      assertEquals(40, token0.endColumn);
      assertEquals(40, token0.beginColumn);
      assertEquals(80, token0.kind);
      assertEquals(29, token0.endLine);
      assertFalse(token0.equals((Object)token1));
      assertEquals(29, javaCharStream0.getLine());
      assertEquals(29, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals("}", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(29, javaCharStream0.getLine());
      assertEquals(29, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getBeginColumn());
      
      Token token2 = javaParserTokenManager1.jjFillToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, token2.kind);
      assertEquals(29, token2.endLine);
      assertEquals(41, token2.beginColumn);
      assertEquals(29, token2.beginLine);
      assertEquals(41, token2.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals("", token2.toString());
      assertEquals(29, javaCharStream0.getLine());
      assertEquals(29, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager1.SkipLexicalActions(token1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token2);
      assertNotSame(token1, token0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(41, token1.beginColumn);
      assertEquals(29, token1.endLine);
      assertEquals(29, token1.beginLine);
      assertEquals(41, token1.endColumn);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(29, javaCharStream0.getLine());
      assertEquals(29, javaCharStream0.getBeginLine());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals("q", token1.toString());
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(43, token3.endColumn);
      assertEquals(29, token3.beginLine);
      assertEquals(29, token3.endLine);
      assertEquals(42, token3.beginColumn);
      assertEquals(112, token3.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertNotNull(token3);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals("*=", token3.toString());
      assertEquals(29, javaCharStream0.getLine());
      assertEquals(29, javaCharStream0.getBeginLine());
      assertEquals(42, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getEndColumn());
      assertEquals(43, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndLine());
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(29, token4.endLine);
      assertEquals(45, token4.endColumn);
      assertEquals(44, token4.beginColumn);
      assertEquals(29, token4.beginLine);
      assertEquals(74, token4.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotNull(token4);
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals("Go", token4.toString());
      assertEquals(29, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getEndColumn());
      assertEquals(29, javaCharStream0.getBeginLine());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndLine());
      
      Token token5 = javaParserTokenManager1.jjFillToken();
      assertNotSame(token5, token1);
      assertNotSame(token5, token3);
      assertNotSame(token5, token0);
      assertNotSame(token5, token4);
      assertNotSame(token5, token2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(44, token5.beginColumn);
      assertEquals(45, token5.endColumn);
      assertEquals(29, token5.endLine);
      assertEquals(112, token5.kind);
      assertEquals(29, token5.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotNull(token5);
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals("*=", token5.toString());
      assertEquals(29, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getEndColumn());
      assertEquals(29, javaCharStream0.getBeginLine());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)68;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)2;
      char[] charArray0 = new char[6];
      charArray0[0] = 'q';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = 'Z';
      charArray0[4] = '!';
      charArray0[5] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'q', '(', '(', 'Z', '!', '('}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 52, (-258));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'q', '(', '(', 'Z', '!', '('}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'q', '(', '(', 'Z', '!', '('}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'q', '(', '(', 'Z', '!', '('}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(52, token0.beginLine);
      assertEquals((-258), token0.endColumn);
      assertEquals((-258), token0.beginColumn);
      assertEquals(52, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertEquals((-258), javaCharStream0.getEndColumn());
      assertEquals(52, javaCharStream0.getEndLine());
      assertEquals((-258), javaCharStream0.getBeginColumn());
      assertEquals(52, javaCharStream0.getLine());
      assertEquals(52, javaCharStream0.getBeginLine());
      assertEquals((-258), javaCharStream0.getColumn());
      assertEquals("q", token0.toString());
      assertArrayEquals(new char[] {'q', '(', '(', 'Z', '!', '('}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals((-257), token1.endColumn);
      assertEquals(52, token1.beginLine);
      assertEquals((-257), token1.beginColumn);
      assertEquals(52, token1.endLine);
      assertEquals(77, token1.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals("(", token1.toString());
      assertEquals((-257), javaCharStream0.getBeginColumn());
      assertEquals(52, javaCharStream0.getEndLine());
      assertEquals((-257), javaCharStream0.getEndColumn());
      assertEquals((-257), javaCharStream0.getColumn());
      assertEquals(52, javaCharStream0.getLine());
      assertEquals(52, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'q', '(', '(', 'Z', '!', '('}, charArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("}q*=Go@`_hSmgx8o");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("#|qb57LA}LOU\"S");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      boolean boolean1 = stringReader1.ready();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "62l:e");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      charArray0[1] = 'S';
      charArray0[2] = 'S';
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'd';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray1);
      assertNotNull(charArrayReader0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'d'}, charArray1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      assertNotNull(charArrayReader1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'d'}, charArray1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2987), 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertEquals((-2987), token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals((-2987), token0.endLine);
      assertEquals(80, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals("}", token0.toString());
      assertEquals((-2987), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals((-2987), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-2987), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      boolean boolean3 = charArrayReader1.ready();
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertTrue(boolean3);
      assertArrayEquals(new char[] {'d'}, charArray1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-2987), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals((-2987), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-2987), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(stringReader0, stringReader1);
      assertEquals((-2987), token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals((-2987), token0.endLine);
      assertEquals(80, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals("}", token0.toString());
      assertEquals((-2987), javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals((-2987), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-2987), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 19);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 19. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(101);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'s', ',', ',', '.'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 101, 685);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'s', ',', ',', '.'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'s', ',', ',', '.'}, charArray0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      charArrayReader0.mark(101);
      assertArrayEquals(new char[] {'s', ',', ',', '.'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'s', ',', ',', '.'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(685, token0.beginColumn);
      assertEquals(685, token0.endColumn);
      assertEquals(101, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(101, token0.endLine);
      assertNotNull(token0);
      assertEquals(101, javaCharStream0.getLine());
      assertEquals(101, javaCharStream0.getEndLine());
      assertEquals(101, javaCharStream0.getBeginLine());
      assertEquals(685, javaCharStream0.getColumn());
      assertEquals(685, javaCharStream0.getEndColumn());
      assertEquals(685, javaCharStream0.getBeginColumn());
      assertEquals("s", token0.toString());
      assertArrayEquals(new char[] {'s', ',', ',', '.'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(101, javaCharStream0.getLine());
      assertEquals(101, javaCharStream0.getEndLine());
      assertEquals(101, javaCharStream0.getBeginLine());
      assertEquals(685, javaCharStream0.getColumn());
      assertEquals(685, javaCharStream0.getEndColumn());
      assertEquals(685, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'s', ',', ',', '.'}, charArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("s");
      assertNotNull(mockPrintStream0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca/s");
      javaParserTokenManager0.debugStream = (PrintStream) mockPrintStream0;
      assertEquals(101, javaCharStream0.getLine());
      assertEquals(101, javaCharStream0.getEndLine());
      assertEquals(101, javaCharStream0.getBeginLine());
      assertEquals(685, javaCharStream0.getColumn());
      assertEquals(685, javaCharStream0.getEndColumn());
      assertEquals(685, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      assertTrue(boolean0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(101, javaCharStream0.getLine());
      assertEquals(101, javaCharStream0.getEndLine());
      assertEquals(101, javaCharStream0.getBeginLine());
      assertEquals(685, javaCharStream0.getColumn());
      assertEquals(685, javaCharStream0.getEndColumn());
      assertEquals(685, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'s', ',', ',', '.'}, charArray0);
      
      int int0 = charArrayReader0.read(charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'s', ',', ',', '.'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(101, javaCharStream0.getLine());
      assertEquals(101, javaCharStream0.getEndLine());
      assertEquals(101, javaCharStream0.getBeginLine());
      assertEquals(685, javaCharStream0.getColumn());
      assertEquals(685, javaCharStream0.getEndColumn());
      assertEquals(685, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'s', ',', ',', '.'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[12];
      charArray0[0] = '\'';
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3B,3mHP&%8cK");
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      int int0 = 60;
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 2596, 60);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 2596, column 62.  Encountered: \"\" (0), after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = 'm';
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      charArray0[3] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.', '.', 'm', '.'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 7, Integer.MAX_VALUE);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'.', '.', 'm', '.'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new char[] {'.', '.', 'm', '.'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'.', '.', 'm', '.'}, charArray0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(85, token0.kind);
      assertEquals(7, token0.beginLine);
      assertEquals(Integer.MAX_VALUE, token0.endColumn);
      assertEquals(Integer.MAX_VALUE, token0.beginColumn);
      assertEquals(7, token0.endLine);
      assertNotNull(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(7, javaCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getBeginLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndColumn());
      assertEquals(".", token0.toString());
      assertArrayEquals(new char[] {'.', '.', 'm', '.'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(7, javaCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getBeginLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'.', '.', 'm', '.'}, charArray0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)68;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte) (-116);
      byteArray0[5] = (byte)29;
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '.';
      charArray0[2] = '.';
      charArray0[3] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'(', '.', '.', '('}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte) (-116), 67);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'(', '.', '.', '('}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'(', '.', '.', '('}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'(', '.', '.', '('}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(67, token0.beginColumn);
      assertEquals(67, token0.endColumn);
      assertEquals(77, token0.kind);
      assertEquals((-116), token0.beginLine);
      assertEquals((-116), token0.endLine);
      assertNotNull(token0);
      assertEquals((-116), javaCharStream0.getBeginLine());
      assertEquals(67, javaCharStream0.getColumn());
      assertEquals((-116), javaCharStream0.getEndLine());
      assertEquals((-116), javaCharStream0.getLine());
      assertEquals(67, javaCharStream0.getEndColumn());
      assertEquals(67, javaCharStream0.getBeginColumn());
      assertEquals("(", token0.toString());
      assertArrayEquals(new char[] {'(', '.', '.', '('}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(85, token1.kind);
      assertEquals((-116), token1.endLine);
      assertEquals(68, token1.beginColumn);
      assertEquals((-116), token1.beginLine);
      assertEquals(68, token1.endColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals((-116), javaCharStream0.getBeginLine());
      assertEquals(68, javaCharStream0.getColumn());
      assertEquals((-116), javaCharStream0.getEndLine());
      assertEquals((-116), javaCharStream0.getLine());
      assertEquals(68, javaCharStream0.getBeginColumn());
      assertEquals(68, javaCharStream0.getEndColumn());
      assertEquals(".", token1.toString());
      assertArrayEquals(new char[] {'(', '.', '.', '('}, charArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)16;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = 119;
      StringReader stringReader0 = new StringReader(" column ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)16, 85);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(91, token0.endColumn);
      assertEquals(16, token0.beginLine);
      assertEquals(86, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(16, token0.endLine);
      assertNotNull(token0);
      assertEquals(86, javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals("column", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-2834));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2834. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = '@';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'%', '@'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0, 37);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'%', '@'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, (-3263), 48);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'%', '@'}, charArray0);
      
      charArrayReader0.mark(56);
      assertArrayEquals(new char[] {'%', '@'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedReader0, (-3263), 26);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'%', '@'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'%', '@'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3263), token0.beginLine);
      assertEquals((-3263), token0.endLine);
      assertEquals(26, token0.beginColumn);
      assertEquals(108, token0.kind);
      assertEquals(26, token0.endColumn);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-3263), javaCharStream1.getBeginLine());
      assertEquals(26, javaCharStream1.getBeginColumn());
      assertEquals((-3263), javaCharStream1.getLine());
      assertEquals(26, javaCharStream1.getEndColumn());
      assertEquals((-3263), javaCharStream1.getEndLine());
      assertEquals(26, javaCharStream1.getColumn());
      assertEquals("%", token0.toString());
      assertArrayEquals(new char[] {'%', '@'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'%', '@'}, charArray0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(charArrayReader0, 108, (-3263));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertNotNull(javaCharStream2);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertArrayEquals(new char[] {'%', '@'}, charArray0);
      
      JavaCharStream javaCharStream3 = new JavaCharStream(pipedInputStream0, 3324, 108, (-3263));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream3.bufpos);
      assertNotNull(javaCharStream3);
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream3.getBeginColumn());
      assertEquals(0, javaCharStream3.getBeginLine());
      
      JavaCharStream javaCharStream4 = new JavaCharStream(charArrayReader0, 37, 51);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream4.bufpos);
      assertNotNull(javaCharStream4);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream4.equals((Object)javaCharStream1));
      assertFalse(javaCharStream4.equals((Object)javaCharStream3));
      assertFalse(javaCharStream4.equals((Object)javaCharStream2));
      assertFalse(javaCharStream4.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream4.getBeginLine());
      assertEquals(0, javaCharStream4.getBeginColumn());
      assertArrayEquals(new char[] {'%', '@'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream3.bufpos);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream3.equals((Object)javaCharStream4));
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream3.getBeginColumn());
      assertEquals(0, javaCharStream3.getBeginLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream1, javaCharStream4);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream3);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream4));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream3));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals((-3263), javaCharStream1.getBeginLine());
      assertEquals(26, javaCharStream1.getBeginColumn());
      assertEquals((-3263), javaCharStream1.getLine());
      assertEquals(26, javaCharStream1.getEndColumn());
      assertEquals((-3263), javaCharStream1.getEndLine());
      assertEquals(26, javaCharStream1.getColumn());
      assertArrayEquals(new char[] {'%', '@'}, charArray0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream3, javaCharStream4);
      assertNotSame(javaCharStream3, javaCharStream0);
      assertNotSame(javaCharStream3, javaCharStream2);
      assertNotSame(javaCharStream3, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(107, token1.beginColumn);
      assertEquals(3324, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(107, token1.endColumn);
      assertEquals(3324, token1.endLine);
      assertEquals(0, javaCharStream3.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream4));
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals("", token1.toString());
      assertEquals(3324, javaCharStream3.getBeginLine());
      assertEquals(107, javaCharStream3.getBeginColumn());
      assertEquals(107, javaCharStream3.getEndColumn());
      assertEquals(3324, javaCharStream3.getLine());
      assertEquals(3324, javaCharStream3.getEndLine());
      assertEquals(107, javaCharStream3.getColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.SwitchTo((-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 122);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, 122);
      assertNotNull(bufferedInputStream1);
      assertFalse(bufferedInputStream1.equals((Object)bufferedInputStream0));
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = 'u';
      charArray0[2] = '@';
      charArray0[3] = 'P';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'@', 'u', '@', 'P'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 17, 68);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'@', 'u', '@', 'P'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'@', 'u', '@', 'P'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'@', 'u', '@', 'P'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 68, (-1));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new char[] {'@', 'u', '@', 'P'}, charArray0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(charArrayReader0, (-1), 122);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream2);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertArrayEquals(new char[] {'@', 'u', '@', 'P'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertArrayEquals(new char[] {'@', 'u', '@', 'P'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNull(token_GTToken0.toString());
      assertArrayEquals(new char[] {'@', 'u', '@', 'P'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertEquals(122, token0.endColumn);
      assertEquals(122, token0.beginColumn);
      assertEquals((-1), token0.beginLine);
      assertEquals(86, token0.kind);
      assertEquals((-1), token0.endLine);
      assertEquals(0, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals("@", token0.toString());
      assertEquals(122, javaCharStream2.getColumn());
      assertEquals(122, javaCharStream2.getBeginColumn());
      assertEquals((-1), javaCharStream2.getLine());
      assertEquals((-1), javaCharStream2.getBeginLine());
      assertEquals((-1), javaCharStream2.getEndLine());
      assertEquals(122, javaCharStream2.getEndColumn());
      assertArrayEquals(new char[] {'@', 'u', '@', 'P'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertEquals(0, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(122, javaCharStream2.getColumn());
      assertEquals(122, javaCharStream2.getBeginColumn());
      assertEquals((-1), javaCharStream2.getLine());
      assertEquals((-1), javaCharStream2.getBeginLine());
      assertEquals((-1), javaCharStream2.getEndLine());
      assertEquals(122, javaCharStream2.getEndColumn());
      assertArrayEquals(new char[] {'@', 'u', '@', 'P'}, charArray0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertEquals((-1), token1.beginLine);
      assertEquals(122, token1.endColumn);
      assertEquals((-1), token1.endLine);
      assertEquals(122, token1.beginColumn);
      assertEquals(86, token1.kind);
      assertEquals(0, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals("@", token1.toString());
      assertEquals(122, javaCharStream2.getColumn());
      assertEquals(122, javaCharStream2.getBeginColumn());
      assertEquals((-1), javaCharStream2.getLine());
      assertEquals((-1), javaCharStream2.getBeginLine());
      assertEquals((-1), javaCharStream2.getEndLine());
      assertEquals(122, javaCharStream2.getEndColumn());
      assertArrayEquals(new char[] {'@', 'u', '@', 'P'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(101);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1358);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      bufferedInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      
      bufferedInputStream0.mark(56);
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 's';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'s', '\'', '\'', '.'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 101, 699);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'s', '\'', '\'', '.'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'s', '\'', '\'', '.'}, charArray0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(699, token0.beginColumn);
      assertEquals(699, token0.endColumn);
      assertEquals(101, token0.beginLine);
      assertEquals(101, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertEquals(101, javaCharStream0.getLine());
      assertEquals(101, javaCharStream0.getEndLine());
      assertEquals(699, javaCharStream0.getColumn());
      assertEquals(101, javaCharStream0.getBeginLine());
      assertEquals(699, javaCharStream0.getBeginColumn());
      assertEquals(699, javaCharStream0.getEndColumn());
      assertEquals("s", token0.toString());
      assertArrayEquals(new char[] {'s', '\'', '\'', '.'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      char[] charArray0 = new char[3];
      StringReader stringReader0 = new StringReader("`U; |");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(stringReader0, 42);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 28, 28);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      Token token0 = null;
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 28, column 28.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1798);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[1] = 'P';
      charArray0[2] = 'F';
      charArray0[3] = '`';
      charArray0[4] = 'I';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'m', 'P', 'F', '`', 'I'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 48, (-988));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'m', 'P', 'F', '`', 'I'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'m', 'P', 'F', '`', 'I'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'m', 'P', 'F', '`', 'I'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(48, token0.endLine);
      assertEquals(48, token0.beginLine);
      assertEquals((-986), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-988), token0.beginColumn);
      assertNotNull(token0);
      assertEquals((-986), javaCharStream0.getColumn());
      assertEquals((-986), javaCharStream0.getEndColumn());
      assertEquals((-988), javaCharStream0.getBeginColumn());
      assertEquals(48, javaCharStream0.getEndLine());
      assertEquals(48, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getLine());
      assertEquals("mPF", token0.toString());
      assertArrayEquals(new char[] {'m', 'P', 'F', '`', 'I'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 48, column -985.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[0] = (byte)68;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-116);
      char[] charArray0 = new char[6];
      charArray0[0] = 'S';
      charArray0[1] = 'U';
      charArray0[2] = 'T';
      charArray0[1] = '!';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "catch");
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'S', '!', 'T', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'S', '!', 'T', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)2, 1140);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'S', '!', 'T', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'S', '!', 'T', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(1140, token0.beginColumn);
      assertEquals(2, token0.beginLine);
      assertEquals(2, token0.endLine);
      assertEquals(1140, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals("S", token0.toString());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(1140, javaCharStream0.getEndColumn());
      assertEquals(1140, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(1140, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'S', '!', 'T', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = new Token();
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(89, token2.kind);
      assertEquals(2, token2.endLine);
      assertEquals(1141, token2.endColumn);
      assertEquals(1141, token2.beginColumn);
      assertEquals(2, token2.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals("!", token2.toString());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(1141, javaCharStream0.getEndColumn());
      assertEquals(1141, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(1141, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'S', '!', 'T', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(1141, javaCharStream0.getEndColumn());
      assertEquals(1141, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(1141, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'S', '!', 'T', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-35);
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = 'y';
      charArray0[2] = ' ';
      StringReader stringReader0 = new StringReader("S<9V/M-QLU");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 226, 65);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', 'y', ' ', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'>', 'y', ' ', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("S", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(56);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 56. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      charArray0[3] = 'Q';
      charArray0[1] = '+';
      charArray0[5] = 'Q';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'Z', '+', 'Q', 'Q', '\u0000', 'Q'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-363), (byte) (-116));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'Z', '+', 'Q', 'Q', '\u0000', 'Q'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'Z', '+', 'Q', 'Q', '\u0000', 'Q'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'Z', '+', 'Q', 'Q', '\u0000', 'Q'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-116), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-363), token0.endLine);
      assertEquals((-363), token0.beginLine);
      assertEquals((-116), token0.endColumn);
      assertNotNull(token0);
      assertEquals((-116), javaCharStream0.getBeginColumn());
      assertEquals((-363), javaCharStream0.getBeginLine());
      assertEquals((-116), javaCharStream0.getColumn());
      assertEquals((-116), javaCharStream0.getEndColumn());
      assertEquals((-363), javaCharStream0.getEndLine());
      assertEquals((-363), javaCharStream0.getLine());
      assertEquals("Z", token0.toString());
      assertArrayEquals(new char[] {'Z', '+', 'Q', 'Q', '\u0000', 'Q'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(101, token1.kind);
      assertEquals((-363), token1.beginLine);
      assertEquals((-115), token1.endColumn);
      assertEquals((-363), token1.endLine);
      assertEquals((-115), token1.beginColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals((-363), javaCharStream0.getBeginLine());
      assertEquals((-115), javaCharStream0.getColumn());
      assertEquals((-115), javaCharStream0.getBeginColumn());
      assertEquals((-363), javaCharStream0.getEndLine());
      assertEquals((-115), javaCharStream0.getEndColumn());
      assertEquals((-363), javaCharStream0.getLine());
      assertEquals("+", token1.toString());
      assertArrayEquals(new char[] {'Z', '+', 'Q', 'Q', '\u0000', 'Q'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-363), javaCharStream0.getBeginLine());
      assertEquals((-115), javaCharStream0.getColumn());
      assertEquals((-115), javaCharStream0.getBeginColumn());
      assertEquals((-363), javaCharStream0.getEndLine());
      assertEquals((-115), javaCharStream0.getEndColumn());
      assertEquals((-363), javaCharStream0.getLine());
      assertArrayEquals(new char[] {'Z', '+', 'Q', 'Q', '\u0000', 'Q'}, charArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(101, token1.kind);
      assertEquals((-363), token1.beginLine);
      assertEquals((-115), token1.endColumn);
      assertEquals((-363), token1.endLine);
      assertEquals((-115), token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertEquals((-363), javaCharStream0.getBeginLine());
      assertEquals((-115), javaCharStream0.getColumn());
      assertEquals((-115), javaCharStream0.getBeginColumn());
      assertEquals((-363), javaCharStream0.getEndLine());
      assertEquals((-115), javaCharStream0.getEndColumn());
      assertEquals((-363), javaCharStream0.getLine());
      assertEquals("+", token1.toString());
      assertArrayEquals(new char[] {'Z', '+', 'Q', 'Q', '\u0000', 'Q'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'u', 'u'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'u', 'u'}, charArray0);
      
      int int0 = charArrayReader1.read();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(117, int0);
      assertArrayEquals(new char[] {'u', 'u'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'u', 'u'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'u', 'u'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("u", token0.toString());
      assertArrayEquals(new char[] {'u', 'u'}, charArray0);
      
      Token token1 = new Token();
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertNotNull(token2);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("", token2.toString());
      assertArrayEquals(new char[] {'u', 'u'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertArrayEquals(new char[] {'u', 'u'}, charArray0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginColumn);
      assertEquals(1, token3.endColumn);
      assertEquals(0, token3.kind);
      assertEquals(1, token3.beginLine);
      assertNotNull(token3);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("", token3.toString());
      assertArrayEquals(new char[] {'u', 'u'}, charArray0);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
      assertNotSame(token1, token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token3));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertNull(token1.toString());
      assertArrayEquals(new char[] {'u', 'u'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)33;
      byteArray0[0] = (byte)33;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1086, (byte)33);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)33, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertNotNull(inputStreamReader0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)33, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      StringReader stringReader0 = new StringReader("I4TR?A2M-?;W");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(inputStreamReader0, 523, (-1314));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)33, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)33, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(89, token0.kind);
      assertEquals(523, token0.endLine);
      assertEquals(523, token0.beginLine);
      assertEquals((-1314), token0.beginColumn);
      assertEquals((-1314), token0.endColumn);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(523, javaCharStream1.getBeginLine());
      assertEquals((-1314), javaCharStream1.getEndColumn());
      assertEquals(523, javaCharStream1.getLine());
      assertEquals((-1314), javaCharStream1.getBeginColumn());
      assertEquals(523, javaCharStream1.getEndLine());
      assertEquals((-1314), javaCharStream1.getColumn());
      assertEquals("!", token0.toString());
      assertArrayEquals(new byte[] {(byte)33, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1314));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1314. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("hV-h,1uJgl0 B~");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)39, (byte)39);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[7];
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      charArray0[0] = 'P';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'P', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'P', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'P', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (byte)39, (byte)39);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'P', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      javaCharStream0.ReInit((Reader) stringReader0, (-1), (int) (byte)39);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      String string0 = javaCharStream0.GetImage();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'P', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'P', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(39, token0.beginLine);
      assertEquals(39, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(39, token0.endColumn);
      assertEquals(39, token0.endLine);
      assertNotNull(token0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(39, javaCharStream1.getBeginColumn());
      assertEquals(39, javaCharStream1.getLine());
      assertEquals(39, javaCharStream1.getEndLine());
      assertEquals(39, javaCharStream1.getColumn());
      assertEquals(39, javaCharStream1.getBeginLine());
      assertEquals(39, javaCharStream1.getEndColumn());
      assertEquals("P", token0.toString());
      assertArrayEquals(new char[] {'P', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      javaParserTokenManager0.jjimageLen = 1866;
      assertEquals(39, javaCharStream1.getBeginColumn());
      assertEquals(39, javaCharStream1.getLine());
      assertEquals(39, javaCharStream1.getEndLine());
      assertEquals(39, javaCharStream1.getColumn());
      assertEquals(39, javaCharStream1.getBeginLine());
      assertEquals(39, javaCharStream1.getEndColumn());
      
      javaParserTokenManager0.ReInit(javaCharStream1, 2);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(39, javaCharStream1.getBeginColumn());
      assertEquals(39, javaCharStream1.getLine());
      assertEquals(39, javaCharStream1.getEndLine());
      assertEquals(39, javaCharStream1.getColumn());
      assertEquals(39, javaCharStream1.getBeginLine());
      assertEquals(39, javaCharStream1.getEndColumn());
      assertArrayEquals(new char[] {'P', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)82;
      byteArray0[2] = (byte)0;
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[3] = '4';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'4', '4', '\u0000', '4'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 6724, (byte)0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'4', '4', '\u0000', '4'}, charArray0);
      
      javaCharStream0.column = (int) (byte)0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'4', '4', '\u0000', '4'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(6724, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(6724, token0.beginLine);
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(6724, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(6724, javaCharStream0.getLine());
      assertEquals(6724, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("44", token0.toString());
      assertArrayEquals(new char[] {'4', '4', '\u0000', '4'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 6724, column 3.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = 'd';
      charArray0[3] = 'd';
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'0', '0', 'd', 'd', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'0', '0', 'd', 'd', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'0', '0', 'd', 'd', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(70, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("00d", token0.toString());
      assertArrayEquals(new char[] {'0', '0', 'd', 'd', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (int) (byte) (-9));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -9. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = 'F';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'%', 'F'}, charArray0);
      
      StringReader stringReader0 = new StringReader("static");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-9);
      byteArray0[4] = (byte) (-9);
      byteArray0[5] = (byte) (-9);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-9), (byte) (-9), (byte) (-9), (byte) (-9), (byte) (-9), (byte) (-9)}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'%', 'F'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, (byte) (-9), 898);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'%', 'F'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'%', 'F'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-9), token0.endLine);
      assertEquals(108, token0.kind);
      assertEquals(898, token0.beginColumn);
      assertEquals((-9), token0.beginLine);
      assertEquals(898, token0.endColumn);
      assertNotNull(token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals((-9), javaCharStream0.getEndLine());
      assertEquals(898, javaCharStream0.getEndColumn());
      assertEquals(898, javaCharStream0.getColumn());
      assertEquals(898, javaCharStream0.getBeginColumn());
      assertEquals((-9), javaCharStream0.getLine());
      assertEquals((-9), javaCharStream0.getBeginLine());
      assertEquals("%", token0.toString());
      assertArrayEquals(new char[] {'%', 'F'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      assertNotNull(pipedInputStream1);
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertEquals(0, pipedInputStream1.available());
      
      char[] charArray0 = new char[6];
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      charArray0[0] = '+';
      charArray0[1] = ';';
      charArray0[2] = '+';
      charArray0[3] = 'Q';
      charArray0[4] = 'j';
      charArray0[5] = 'Q';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'+', ';', '+', 'Q', 'j', 'Q'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte) (-116), (-331));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'+', ';', '+', 'Q', 'j', 'Q'}, charArray0);
      
      boolean boolean2 = charArrayReader0.ready();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new char[] {'+', ';', '+', 'Q', 'j', 'Q'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'+', ';', '+', 'Q', 'j', 'Q'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-116), token0.beginLine);
      assertEquals(101, token0.kind);
      assertEquals((-331), token0.beginColumn);
      assertEquals((-331), token0.endColumn);
      assertEquals((-116), token0.endLine);
      assertNotNull(token0);
      assertEquals((-331), javaCharStream0.getColumn());
      assertEquals((-116), javaCharStream0.getBeginLine());
      assertEquals((-331), javaCharStream0.getEndColumn());
      assertEquals((-331), javaCharStream0.getBeginColumn());
      assertEquals((-116), javaCharStream0.getLine());
      assertEquals((-116), javaCharStream0.getEndLine());
      assertEquals("+", token0.toString());
      assertArrayEquals(new char[] {'+', ';', '+', 'Q', 'j', 'Q'}, charArray0);
      
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 26);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 26. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte) (-8);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)29;
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = '6';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)68, (byte) (-8), (byte)0, (byte)0, (byte) (-8), (byte)29}, byteArray0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertNotNull(inputStreamReader0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)68, (byte) (-8), (byte)0, (byte)0, (byte) (-8), (byte)29}, byteArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(inputStreamReader0);
      assertNotNull(bufferedReader0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)68, (byte) (-8), (byte)0, (byte)0, (byte) (-8), (byte)29}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, 14, (byte)68);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)68, (byte) (-8), (byte)0, (byte)0, (byte) (-8), (byte)29}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)68, (byte) (-8), (byte)0, (byte)0, (byte) (-8), (byte)29}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(14, token0.endLine);
      assertEquals(68, token0.beginColumn);
      assertEquals(68, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(14, token0.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertEquals("D", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(14, javaCharStream0.getLine());
      assertEquals(68, javaCharStream0.getColumn());
      assertEquals(14, javaCharStream0.getEndLine());
      assertEquals(14, javaCharStream0.getBeginLine());
      assertEquals(68, javaCharStream0.getEndColumn());
      assertEquals(68, javaCharStream0.getBeginColumn());
      assertArrayEquals(new byte[] {(byte)68, (byte) (-8), (byte)0, (byte)0, (byte) (-8), (byte)29}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      char[] charArray0 = new char[8];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = 'U';
      charArray0[4] = 'U';
      charArray0[6] = 'U';
      charArray0[7] = '&';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'U', 'U', 'U', 'U', 'U', '\u0000', 'U', '&'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 'U', 103);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'U', 'U', 'U', 'U', 'U', '\u0000', 'U', '&'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'U', 'U', 'U', 'U', 'U', '\u0000', 'U', '&'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(103, token0.beginColumn);
      assertEquals(85, token0.endLine);
      assertEquals(107, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(85, token0.beginLine);
      assertNotNull(token0);
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(107, javaCharStream0.getColumn());
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(107, javaCharStream0.getEndColumn());
      assertEquals("UUUUU", token0.toString());
      assertArrayEquals(new char[] {'U', 'U', 'U', 'U', 'U', '\u0000', 'U', '&'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 85, column 108.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)33;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[7] = '\\';
      StringReader stringReader0 = new StringReader("L'Z B)H^");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 29, (byte)33);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\\'}, charArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      
      ByteBuffer byteBuffer0 = charset0.encode("L'Z B)H^");
      assertNotNull(byteBuffer0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(8, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(8, byteBuffer0.limit());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=8 lim=8 cap=8]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(8, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(8, byteBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("L'Z B)H^", charBuffer0.toString());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(8, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(8, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(8, charBuffer0.limit());
      
      int int0 = charArrayReader0.read(charBuffer0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=8 lim=8 cap=8]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(8, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(8, byteBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(8, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(8, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.limit());
      assertEquals(8, int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\\'}, charArray0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(29, token0.endLine);
      assertEquals(29, token0.beginLine);
      assertEquals(33, token0.beginColumn);
      assertEquals(33, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertEquals(29, javaCharStream0.getLine());
      assertEquals(29, javaCharStream0.getBeginLine());
      assertEquals(33, javaCharStream0.getEndColumn());
      assertEquals(33, javaCharStream0.getColumn());
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals(29, javaCharStream0.getEndLine());
      assertEquals("L", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(29, javaCharStream0.getLine());
      assertEquals(29, javaCharStream0.getBeginLine());
      assertEquals(33, javaCharStream0.getEndColumn());
      assertEquals(33, javaCharStream0.getColumn());
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals(29, javaCharStream0.getEndLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 16. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'y';
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'y', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 'y', 'y');
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'y', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = charArrayReader0.ready();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'y', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'y', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(121, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(121, token0.beginLine);
      assertEquals(121, token0.beginColumn);
      assertEquals(121, token0.endColumn);
      assertNotNull(token0);
      assertEquals(121, javaCharStream0.getBeginColumn());
      assertEquals(121, javaCharStream0.getBeginLine());
      assertEquals(121, javaCharStream0.getEndColumn());
      assertEquals(121, javaCharStream0.getLine());
      assertEquals(121, javaCharStream0.getEndLine());
      assertEquals(121, javaCharStream0.getColumn());
      assertEquals("y", token0.toString());
      assertArrayEquals(new char[] {'y', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 121, column 122.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[1] = 'A';
      charArray0[2] = 'M';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'d', 'A', 'M'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'d', 'A', 'M'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 26, 122);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'d', 'A', 'M'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'d', 'A', 'M'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token_GTToken0.toString());
      assertArrayEquals(new char[] {'d', 'A', 'M'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(124, token0.endColumn);
      assertEquals(26, token0.endLine);
      assertEquals(122, token0.beginColumn);
      assertEquals(26, token0.beginLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals(124, javaCharStream0.getEndColumn());
      assertEquals(26, javaCharStream0.getLine());
      assertEquals(26, javaCharStream0.getBeginLine());
      assertEquals(124, javaCharStream0.getColumn());
      assertEquals(26, javaCharStream0.getEndLine());
      assertEquals("dAM", token0.toString());
      assertArrayEquals(new char[] {'d', 'A', 'M'}, charArray0);
      
      int int0 = 482;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(482);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 482. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)18;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'d', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1897, (byte) (-9));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'d', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'d', '\u0000', '\u0000'}, charArray0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1897, token0.beginLine);
      assertEquals((-9), token0.endColumn);
      assertEquals((-9), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1897, token0.endLine);
      assertNotNull(token0);
      assertEquals(1897, javaCharStream0.getEndLine());
      assertEquals((-9), javaCharStream0.getColumn());
      assertEquals((-9), javaCharStream0.getBeginColumn());
      assertEquals(1897, javaCharStream0.getBeginLine());
      assertEquals(1897, javaCharStream0.getLine());
      assertEquals((-9), javaCharStream0.getEndColumn());
      assertEquals("d", token0.toString());
      assertArrayEquals(new char[] {'d', '\u0000', '\u0000'}, charArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(1897, javaCharStream0.getEndLine());
      assertEquals((-9), javaCharStream0.getColumn());
      assertEquals((-9), javaCharStream0.getBeginColumn());
      assertEquals(1897, javaCharStream0.getBeginLine());
      assertEquals(1897, javaCharStream0.getLine());
      assertEquals((-9), javaCharStream0.getEndColumn());
      assertNull(token_GTToken0.toString());
      assertArrayEquals(new char[] {'d', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-116);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-116), (byte)0, (byte) (-116)}, byteArray0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertNotNull(inputStreamReader0);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-116), (byte)0, (byte) (-116)}, byteArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = '$';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'e', '$'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-338), 3219);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'e', '$'}, charArray0);
      
      boolean boolean2 = charArrayReader0.ready();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new char[] {'e', '$'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'e', '$'}, charArray0);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3219, token0.beginColumn);
      assertEquals((-338), token0.beginLine);
      assertEquals((-338), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(3220, token0.endColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token0);
      assertEquals("e$", token0.toString());
      assertEquals((-338), javaCharStream0.getLine());
      assertEquals((-338), javaCharStream0.getEndLine());
      assertEquals(3220, javaCharStream0.getColumn());
      assertEquals(3219, javaCharStream0.getBeginColumn());
      assertEquals((-338), javaCharStream0.getBeginLine());
      assertEquals(3220, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'e', '$'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(0, token1.kind);
      assertEquals((-338), token1.beginLine);
      assertEquals(3220, token1.beginColumn);
      assertEquals(3220, token1.endColumn);
      assertEquals((-338), token1.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals("", token1.toString());
      assertEquals((-338), javaCharStream0.getLine());
      assertEquals((-338), javaCharStream0.getEndLine());
      assertEquals(3220, javaCharStream0.getBeginColumn());
      assertEquals(3220, javaCharStream0.getColumn());
      assertEquals((-338), javaCharStream0.getBeginLine());
      assertEquals(3220, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'e', '$'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-338), javaCharStream0.getLine());
      assertEquals((-338), javaCharStream0.getEndLine());
      assertEquals(3220, javaCharStream0.getBeginColumn());
      assertEquals(3220, javaCharStream0.getColumn());
      assertEquals((-338), javaCharStream0.getBeginLine());
      assertEquals(3220, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'e', '$'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("hV-h,1uJgl0 B~");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = '.';
      charArray0[2] = '\\';
      charArray0[3] = '.';
      charArray0[4] = '(';
      charArray0[5] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'(', '.', '\\', '.', '(', '\\'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-1), (-1));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new char[] {'(', '.', '\\', '.', '(', '\\'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new char[] {'(', '.', '\\', '.', '(', '\\'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), token0.endLine);
      assertEquals((-1), token0.endColumn);
      assertEquals((-1), token0.beginColumn);
      assertEquals((-1), token0.beginLine);
      assertEquals(77, token0.kind);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.getColumn());
      assertEquals("(", token0.toString());
      assertArrayEquals(new char[] {'(', '.', '\\', '.', '(', '\\'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), token1.endLine);
      assertEquals(85, token1.kind);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals((-1), token1.beginLine);
      assertNotNull(token1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(".", token1.toString());
      assertArrayEquals(new char[] {'(', '.', '\\', '.', '(', '\\'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(45);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 45. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = 'm';
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      charArray0[3] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.', '.', 'm', '.'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 7, Integer.MAX_VALUE);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'.', '.', 'm', '.'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertEquals(46, int0);
      assertArrayEquals(new char[] {'.', '.', 'm', '.'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'.', '.', 'm', '.'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader1, 23, 23);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'.', '.', 'm', '.'}, charArray0);
      
      charArrayReader1.mark(Integer.MAX_VALUE);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'.', '.', 'm', '.'}, charArray0);
      
      javaCharStream1.ReInit((Reader) charArrayReader0, 82, 43);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'.', '.', 'm', '.'}, charArray0);
      
      String string0 = javaCharStream0.GetImage();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(string0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'.', '.', 'm', '.'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'.', '.', 'm', '.'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'.', '.', 'm', '.'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(43, token0.beginColumn);
      assertEquals(43, token0.endColumn);
      assertEquals(82, token0.beginLine);
      assertEquals(85, token0.kind);
      assertEquals(82, token0.endLine);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(".", token0.toString());
      assertEquals(82, javaCharStream1.getEndLine());
      assertEquals(82, javaCharStream1.getLine());
      assertEquals(43, javaCharStream1.getBeginColumn());
      assertEquals(43, javaCharStream1.getColumn());
      assertEquals(82, javaCharStream1.getBeginLine());
      assertEquals(43, javaCharStream1.getEndColumn());
      assertArrayEquals(new char[] {'.', '.', 'm', '.'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '/';
      charArray0[1] = 'Q';
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      charArray0[2] = 'a';
      charArray0[3] = 'Q';
      charArray0[4] = 'a';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "enum");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'/', 'Q', 'a', 'Q', 'a', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 'Q', 52);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'/', 'Q', 'a', 'Q', 'a', '\u0000'}, charArray0);
      
      javaCharStream0.line = 18;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'/', 'Q', 'a', 'Q', 'a', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(18, token0.endLine);
      assertEquals(18, token0.beginLine);
      assertEquals(104, token0.kind);
      assertEquals(52, token0.beginColumn);
      assertEquals(52, token0.endColumn);
      assertNotNull(token0);
      assertEquals(52, javaCharStream0.getEndColumn());
      assertEquals(52, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals("/", token0.toString());
      assertArrayEquals(new char[] {'/', 'Q', 'a', 'Q', 'a', '\u0000'}, charArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(18, token0.endLine);
      assertEquals(18, token0.beginLine);
      assertEquals(104, token0.kind);
      assertEquals(52, token0.beginColumn);
      assertEquals(52, token0.endColumn);
      assertEquals(52, javaCharStream0.getEndColumn());
      assertEquals(52, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals("/", token0.toString());
      assertArrayEquals(new char[] {'/', 'Q', 'a', 'Q', 'a', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, '/');
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 47. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = ',';
      charArray0[2] = 'l';
      charArray0[3] = '5';
      charArray0[4] = 'l';
      charArray0[5] = ',';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {':', ',', 'l', '5', 'l', ','}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-3151), (-3353));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {':', ',', 'l', '5', 'l', ','}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {':', ',', 'l', '5', 'l', ','}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-3151), token0.beginLine);
      assertEquals((-3151), token0.endLine);
      assertEquals(92, token0.kind);
      assertEquals((-3353), token0.endColumn);
      assertEquals((-3353), token0.beginColumn);
      assertNotNull(token0);
      assertEquals((-3151), javaCharStream0.getLine());
      assertEquals((-3151), javaCharStream0.getEndLine());
      assertEquals((-3353), javaCharStream0.getEndColumn());
      assertEquals((-3151), javaCharStream0.getBeginLine());
      assertEquals((-3353), javaCharStream0.getColumn());
      assertEquals((-3353), javaCharStream0.getBeginColumn());
      assertEquals(":", token0.toString());
      assertArrayEquals(new char[] {':', ',', 'l', '5', 'l', ','}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-3151), javaCharStream0.getLine());
      assertEquals((-3151), javaCharStream0.getEndLine());
      assertEquals((-3353), javaCharStream0.getEndColumn());
      assertEquals((-3151), javaCharStream0.getBeginLine());
      assertEquals((-3353), javaCharStream0.getColumn());
      assertEquals((-3353), javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {':', ',', 'l', '5', 'l', ','}, charArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = ' ';
      charArray0[2] = ' ';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'n', ' ', ' '}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)18, (byte)18);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'n', ' ', ' '}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'n', ' ', ' '}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(18, token0.endLine);
      assertEquals(18, token0.beginLine);
      assertEquals(18, token0.beginColumn);
      assertEquals(18, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals("n", token0.toString());
      assertArrayEquals(new char[] {'n', ' ', ' '}, charArray0);
      
      Token token1 = Token.newToken('n');
      assertNotSame(token1, token0);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      
      javaParserTokenManager0.SwitchTo(0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getLine());
      assertArrayEquals(new char[] {'n', ' ', ' '}, charArray0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(18, token2.endLine);
      assertEquals(18, token2.beginLine);
      assertEquals(18, token2.endColumn);
      assertEquals(18, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals("n", token2.toString());
      assertArrayEquals(new char[] {'n', ' ', ' '}, charArray0);
      
      charArrayReader0.close();
      assertArrayEquals(new char[] {'n', ' ', ' '}, charArray0);
      
      javaParserTokenManager0.jjround = 66;
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getLine());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(18, token3.beginLine);
      assertEquals(20, token3.beginColumn);
      assertEquals(18, token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals(20, token3.endColumn);
      assertNotNull(token3);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(20, javaCharStream0.getColumn());
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals("", token3.toString());
      assertArrayEquals(new char[] {'n', ' ', ' '}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(20, javaCharStream0.getColumn());
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getLine());
      assertArrayEquals(new char[] {'n', ' ', ' '}, charArray0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(20, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(20, javaCharStream0.getColumn());
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getLine());
      assertArrayEquals(new char[] {'n', ' ', ' '}, charArray0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '\u0083';
      charArray0[1] = '\u0083';
      charArray0[3] = '\u0083';
      charArray0[4] = '\u0083';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0083', '\u0083', '\u0000', '\u0083', '\u0083', '\u0000', '\u0000'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader0, 26);
      assertNotNull(lineNumberReader0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertArrayEquals(new char[] {'\u0083', '\u0083', '\u0000', '\u0083', '\u0083', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 14, 14);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'\u0083', '\u0083', '\u0000', '\u0083', '\u0083', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'\u0083', '\u0083', '\u0000', '\u0083', '\u0083', '\u0000', '\u0000'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertEquals(131, int0);
      assertArrayEquals(new char[] {'\u0083', '\u0083', '\u0000', '\u0083', '\u0083', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 14, column 14.  Encountered: \"\\u0083\" (131), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)33;
      char[] charArray0 = new char[8];
      charArray0[0] = '\\';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-1314), (byte)33);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'\\', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)33, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertNotNull(inputStreamReader0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)33, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      StringReader stringReader0 = new StringReader("\"^\"");
      assertNotNull(stringReader0);
      
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      assertNotNull(bufferedReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 65);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(67, token0.endColumn);
      assertEquals(65, token0.beginColumn);
      assertEquals((-1), token0.endLine);
      assertEquals((-1), token0.beginLine);
      assertEquals(73, token0.kind);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(67, javaCharStream1.getEndColumn());
      assertEquals(65, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(67, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals("\"^\"", token0.toString());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-35);
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'>', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Stream<String> stream0 = bufferedReader0.lines();
      assertNotNull(stream0);
      assertArrayEquals(new char[] {'>', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, 128, 128);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'>', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'>', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(128, token0.endColumn);
      assertEquals(124, token0.kind);
      assertEquals(128, token0.endLine);
      assertEquals(128, token0.beginLine);
      assertEquals(128, token0.beginColumn);
      assertNotNull(token0);
      assertEquals(128, javaCharStream0.getLine());
      assertEquals(128, javaCharStream0.getBeginLine());
      assertEquals(128, javaCharStream0.getEndColumn());
      assertEquals(128, javaCharStream0.getBeginColumn());
      assertEquals(128, javaCharStream0.getEndLine());
      assertEquals(128, javaCharStream0.getColumn());
      assertEquals(">", token0.toString());
      assertArrayEquals(new char[] {'>', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNotNull(token_GTToken0);
      assertFalse(token_GTToken0.equals((Object)token0));
      assertNull(token_GTToken0.toString());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'y';
      charArray0[1] = 'y';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      StringReader stringReader0 = new StringReader("?NP`hsp2+5Gy");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3407, 3407);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'y', 'y', 'l', 'l', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      ByteBuffer byteBuffer0 = charset0.encode("");
      assertNotNull(byteBuffer0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      
      int int0 = charArrayReader0.read(charBuffer0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'y', 'y', 'l', 'l', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'y', 'y', 'l', 'l', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3407, token0.endColumn);
      assertEquals(3407, token0.endLine);
      assertEquals(91, token0.kind);
      assertEquals(3407, token0.beginLine);
      assertEquals(3407, token0.beginColumn);
      assertNotNull(token0);
      assertEquals(3407, javaCharStream0.getColumn());
      assertEquals(3407, javaCharStream0.getLine());
      assertEquals(3407, javaCharStream0.getEndLine());
      assertEquals(3407, javaCharStream0.getBeginColumn());
      assertEquals(3407, javaCharStream0.getBeginLine());
      assertEquals(3407, javaCharStream0.getEndColumn());
      assertEquals("?", token0.toString());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertEquals(91, token1.kind);
      assertEquals(3407, token1.beginLine);
      assertEquals(3407, token1.beginColumn);
      assertEquals(3407, token1.endColumn);
      assertEquals(3407, token1.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals("?", token1.toString());
      assertEquals(3407, javaCharStream0.getColumn());
      assertEquals(3407, javaCharStream0.getLine());
      assertEquals(3407, javaCharStream0.getEndLine());
      assertEquals(3407, javaCharStream0.getBeginColumn());
      assertEquals(3407, javaCharStream0.getBeginLine());
      assertEquals(3407, javaCharStream0.getEndColumn());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(token0, token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3407, token0.endColumn);
      assertEquals(3407, token0.endLine);
      assertEquals(91, token0.kind);
      assertEquals(3407, token0.beginLine);
      assertEquals(3407, token0.beginColumn);
      assertFalse(token0.equals((Object)token1));
      assertEquals(3407, javaCharStream0.getColumn());
      assertEquals(3407, javaCharStream0.getLine());
      assertEquals(3407, javaCharStream0.getEndLine());
      assertEquals(3407, javaCharStream0.getBeginColumn());
      assertEquals(3407, javaCharStream0.getBeginLine());
      assertEquals(3407, javaCharStream0.getEndColumn());
      assertEquals("?", token0.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(3407, token2.endLine);
      assertEquals(3408, token2.beginColumn);
      assertEquals(3407, token2.beginLine);
      assertEquals(3408, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals("N", token2.toString());
      assertEquals(3408, javaCharStream0.getColumn());
      assertEquals(3408, javaCharStream0.getEndColumn());
      assertEquals(3407, javaCharStream0.getLine());
      assertEquals(3407, javaCharStream0.getEndLine());
      assertEquals(3407, javaCharStream0.getBeginLine());
      assertEquals(3408, javaCharStream0.getBeginColumn());
      
      Token token3 = token_GTToken0.specialToken;
      assertNull(token3);
      
      Token token4 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertEquals(3408, token4.endColumn);
      assertEquals(74, token4.kind);
      assertEquals(3407, token4.beginLine);
      assertEquals(3407, token4.endLine);
      assertEquals(3408, token4.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token4);
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertEquals("N", token4.toString());
      assertEquals(3408, javaCharStream0.getColumn());
      assertEquals(3408, javaCharStream0.getEndColumn());
      assertEquals(3407, javaCharStream0.getLine());
      assertEquals(3407, javaCharStream0.getEndLine());
      assertEquals(3407, javaCharStream0.getBeginLine());
      assertEquals(3408, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.SkipLexicalActions(token4);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertEquals(3408, token4.endColumn);
      assertEquals(74, token4.kind);
      assertEquals(3407, token4.beginLine);
      assertEquals(3407, token4.endLine);
      assertEquals(3408, token4.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertEquals("N", token4.toString());
      assertEquals(3408, javaCharStream0.getColumn());
      assertEquals(3408, javaCharStream0.getEndColumn());
      assertEquals(3407, javaCharStream0.getLine());
      assertEquals(3407, javaCharStream0.getEndLine());
      assertEquals(3407, javaCharStream0.getBeginLine());
      assertEquals(3408, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nWl+P");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = '(';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'7', '(', '\u0000'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertEquals(55, int0);
      assertArrayEquals(new char[] {'7', '(', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new char[] {'7', '(', '\u0000'}, charArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)34;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)45, (byte)34}, byteArray0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertArrayEquals(new char[] {'7', '(', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)45, (byte)34}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("nWl", token0.toString());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertEquals("nWl", token1.toString());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(4, token2.endColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(4, token2.beginColumn);
      assertEquals(101, token2.kind);
      assertNotNull(token2);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("+", token2.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertArrayEquals(new char[] {'7', '(', '\u0000'}, charArray0);
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertEquals(77, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.beginColumn);
      assertEquals(1, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(0, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token3);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals("(", token3.toString());
      assertEquals(1, javaCharStream2.getColumn());
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals(1, javaCharStream2.getBeginColumn());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(1, javaCharStream2.getEndColumn());
      assertArrayEquals(new char[] {'7', '(', '\u0000'}, charArray0);
      
      javaParserTokenManager0.SwitchTo(1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 7.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = '.';
      charArray0[2] = '.';
      charArray0[3] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'4', '.', '.', '.'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 23, (byte) (-116));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'4', '.', '.', '.'}, charArray0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'4', '.', '.', '.'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'4', '.', '.', '.'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (byte)2, 6724, 74);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new char[] {'4', '.', '.', '.'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'4', '.', '.', '.'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(23, token0.beginLine);
      assertEquals(23, token0.endLine);
      assertEquals((-116), token0.beginColumn);
      assertEquals((-115), token0.endColumn);
      assertEquals(70, token0.kind);
      assertNotNull(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(23, javaCharStream0.getLine());
      assertEquals((-116), javaCharStream0.getBeginColumn());
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals((-115), javaCharStream0.getEndColumn());
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals((-115), javaCharStream0.getColumn());
      assertEquals("4.", token0.toString());
      assertArrayEquals(new char[] {'4', '.', '.', '.'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)82;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-116);
      char[] charArray0 = new char[4];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '.';
      charArray0[3] = '4';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'4', '4', '.', '4'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 6724, (byte)0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'4', '4', '.', '4'}, charArray0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'4', '4', '.', '4'}, charArray0);
      
      javaCharStream0.column = 46;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'4', '4', '.', '4'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'4', '4', '.', '4'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'4', '4', '.', '4'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      Token token0 = token_GTToken0.specialToken;
      assertNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'4', '4', '.', '4'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertEquals(52, int0);
      assertArrayEquals(new char[] {'4', '4', '.', '4'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'4', '4', '.', '4'}, charArray0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(47, token1.beginColumn);
      assertEquals(6724, token1.beginLine);
      assertEquals(6724, token1.endLine);
      assertEquals(70, token1.kind);
      assertEquals(49, token1.endColumn);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals("4.4", token1.toString());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(6724, javaCharStream0.getBeginLine());
      assertEquals(6724, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(6724, javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'4', '4', '.', '4'}, charArray0);
      
      javaParserTokenManager1.TokenLexicalActions(token_GTToken0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNull(token_GTToken0.toString());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(6724, javaCharStream0.getBeginLine());
      assertEquals(6724, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(6724, javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'4', '4', '.', '4'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tru8me");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 94, (byte)2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = stringReader0.ready();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = new Token();
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(94, token1.endLine);
      assertEquals(94, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(7, token1.endColumn);
      assertNotNull(token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(94, javaCharStream0.getBeginLine());
      assertEquals(94, javaCharStream0.getLine());
      assertEquals("tru8me", token1.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(94, javaCharStream0.getBeginLine());
      assertEquals(94, javaCharStream0.getLine());
      
      javaParserTokenManager1.MoreLexicalActions();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(94, javaCharStream0.getBeginLine());
      assertEquals(94, javaCharStream0.getLine());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', '>', '>', '>', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'>', '>', '>', '>', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'>', '>', '>', '>', '\u0000', '\u0000'}, charArray0);
      
      charArrayReader2.reset();
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'>', '>', '>', '>', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 13, 13);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'>', '>', '>', '>', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean3 = charArrayReader1.ready();
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertArrayEquals(new char[] {'>', '>', '>', '>', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'>', '>', '>', '>', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, token0.beginColumn);
      assertEquals(15, token0.endColumn);
      assertEquals(13, token0.endLine);
      assertEquals(13, token0.beginLine);
      assertEquals(124, token0.kind);
      assertNotNull(token0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(">>>", token0.toString());
      assertArrayEquals(new char[] {'>', '>', '>', '>', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.TokenLexicalActions((Token) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[10];
      charArray0[0] = 'H';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-639), (-639));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0, (int) (byte)40, (int) (byte)40);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(40, token0.beginColumn);
      assertEquals(40, token0.endColumn);
      assertEquals(40, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(40, token0.endLine);
      assertNotNull(token0);
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getBeginColumn());
      assertEquals(40, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals("H", token0.toString());
      assertArrayEquals(new char[] {'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 40, column 41.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f.9mR5H)#hdz\"{:{@tq");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8j|7hzQ>F");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '_';
      charArray0[1] = 'W';
      charArray0[2] = '_';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'_', 'W', '_'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 89, 2470);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'_', 'W', '_'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'_', 'W', '_'}, charArray0);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(89, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(89, token0.beginLine);
      assertEquals(2472, token0.endColumn);
      assertEquals(2470, token0.beginColumn);
      assertNotNull(token0);
      assertEquals(2470, javaCharStream0.getBeginColumn());
      assertEquals(89, javaCharStream0.getLine());
      assertEquals(2472, javaCharStream0.getColumn());
      assertEquals(89, javaCharStream0.getBeginLine());
      assertEquals(89, javaCharStream0.getEndLine());
      assertEquals(2472, javaCharStream0.getEndColumn());
      assertEquals("_W_", token0.toString());
      assertArrayEquals(new char[] {'_', 'W', '_'}, charArray0);
      
      try { 
        charArrayReader0.read(charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = 'S';
      charArray0[2] = '!';
      charArray0[3] = 'T';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'!', 'S', '!', 'T'}, charArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'!', 'S', '!', 'T'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'!', 'S', '!', 'T'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 48, 83);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'!', 'S', '!', 'T'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'!', 'S', '!', 'T'}, charArray0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(48, token0.endLine);
      assertEquals(48, token0.beginLine);
      assertEquals(89, token0.kind);
      assertEquals(83, token0.beginColumn);
      assertEquals(83, token0.endColumn);
      assertNotNull(token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(48, javaCharStream0.getLine());
      assertEquals(48, javaCharStream0.getEndLine());
      assertEquals(83, javaCharStream0.getColumn());
      assertEquals(83, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getBeginLine());
      assertEquals(83, javaCharStream0.getBeginColumn());
      assertEquals("!", token0.toString());
      assertArrayEquals(new char[] {'!', 'S', '!', 'T'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(48, token1.beginLine);
      assertEquals(84, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(84, token1.endColumn);
      assertEquals(48, token1.endLine);
      assertNotNull(token1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(48, javaCharStream0.getLine());
      assertEquals(48, javaCharStream0.getEndLine());
      assertEquals(84, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getBeginColumn());
      assertEquals("S", token1.toString());
      assertArrayEquals(new char[] {'!', 'S', '!', 'T'}, charArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token0, token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(48, token0.endLine);
      assertEquals(48, token0.beginLine);
      assertEquals(89, token0.kind);
      assertEquals(83, token0.beginColumn);
      assertEquals(83, token0.endColumn);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token0.equals((Object)token1));
      assertEquals(48, javaCharStream0.getLine());
      assertEquals(48, javaCharStream0.getEndLine());
      assertEquals(84, javaCharStream0.getColumn());
      assertEquals(84, javaCharStream0.getEndColumn());
      assertEquals(48, javaCharStream0.getBeginLine());
      assertEquals(84, javaCharStream0.getBeginColumn());
      assertEquals("!", token0.toString());
      assertArrayEquals(new char[] {'!', 'S', '!', 'T'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '%';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'%', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|,(_");
      assertFalse(boolean0);
      
      char[] charArray1 = new char[7];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '*';
      charArray1[1] = '>';
      charArray1[2] = '>';
      charArray1[4] = 'd';
      charArray1[6] = 'F';
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      assertNotNull(charArrayReader1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'*', '>', '>', '\u0000', 'd', '\u0000', 'F'}, charArray1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader2);
      assertFalse(charArray0.equals((Object)charArray1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'%', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, (byte)4, (byte)4);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'*', '>', '>', '\u0000', 'd', '\u0000', 'F'}, charArray1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'*', '>', '>', '\u0000', 'd', '\u0000', 'F'}, charArray1);
      
      int int0 = charArrayReader1.read();
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(42, int0);
      assertArrayEquals(new char[] {'*', '>', '>', '\u0000', 'd', '\u0000', 'F'}, charArray1);
      
      javaParserTokenManager0.defaultLexState = (-1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(5, token0.endColumn);
      assertEquals(124, token0.kind);
      assertEquals(4, token0.endLine);
      assertEquals(4, token0.beginColumn);
      assertEquals(4, token0.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(">>", token0.toString());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'*', '>', '>', '\u0000', 'd', '\u0000', 'F'}, charArray1);
      
      token0.beginLine = 0;
      assertEquals(">>", token0.toString());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getBeginLine());
      
      boolean boolean1 = charArrayReader1.ready();
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertTrue(boolean1 == boolean0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'*', '>', '>', '\u0000', 'd', '\u0000', 'F'}, charArray1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'*', '>', '>', '\u0000', 'd', '\u0000', 'F'}, charArray1);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(5, token0.endColumn);
      assertEquals(124, token0.kind);
      assertEquals(4, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(4, token0.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(">>", token0.toString());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'*', '>', '>', '\u0000', 'd', '\u0000', 'F'}, charArray1);
      
      // Undeclared exception!
      try { 
        charArrayReader1.read(charArray0, 14, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("public");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(6, token0.endColumn);
      assertEquals(49, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("public", token0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 35);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 35. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "catch");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = '<';
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'j', 'j', '<', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 49, 49);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'j', 'j', '<', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'j', 'j', '<', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(50, token0.endColumn);
      assertEquals(49, token0.endLine);
      assertEquals(49, token0.beginLine);
      assertEquals(49, token0.beginColumn);
      assertNotNull(token0);
      assertEquals(49, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals("jj", token0.toString());
      assertArrayEquals(new char[] {'j', 'j', '<', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(51, token1.beginColumn);
      assertEquals(88, token1.kind);
      assertEquals(51, token1.endColumn);
      assertEquals(49, token1.endLine);
      assertEquals(49, token1.beginLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(49, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals("<", token1.toString());
      assertArrayEquals(new char[] {'j', 'j', '<', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 49. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("hV-h,1uJgl0 B~");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringReader stringReader1 = new StringReader("hV-h,1uJgl0 B~");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      stringReader1.reset();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean1 = stringReader1.ready();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = 'n';
      charArray0[2] = '<';
      charArray0[3] = 'R';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', 'n', '<', 'R'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 4261, 50);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new char[] {'>', 'n', '<', 'R'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new char[] {'>', 'n', '<', 'R'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(124, token0.kind);
      assertEquals(4261, token0.endLine);
      assertEquals(4261, token0.beginLine);
      assertEquals(50, token0.beginColumn);
      assertEquals(50, token0.endColumn);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(4261, javaCharStream1.getEndLine());
      assertEquals(4261, javaCharStream1.getBeginLine());
      assertEquals(4261, javaCharStream1.getLine());
      assertEquals(50, javaCharStream1.getEndColumn());
      assertEquals(50, javaCharStream1.getColumn());
      assertEquals(50, javaCharStream1.getBeginColumn());
      assertEquals(">", token0.toString());
      assertArrayEquals(new char[] {'>', 'n', '<', 'R'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(4261, javaCharStream1.getEndLine());
      assertEquals(4261, javaCharStream1.getBeginLine());
      assertEquals(4261, javaCharStream1.getLine());
      assertEquals(50, javaCharStream1.getEndColumn());
      assertEquals(50, javaCharStream1.getColumn());
      assertEquals(50, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'>', 'n', '<', 'R'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = ':';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'g', ':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'g', ':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Stream<String> stream0 = bufferedReader0.lines();
      assertNotNull(stream0);
      assertArrayEquals(new char[] {'g', ':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)123, 919);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'g', ':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'g', ':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'g', ':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(123, token0.beginLine);
      assertEquals(919, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(919, token0.beginColumn);
      assertEquals(123, token0.endLine);
      assertNotNull(token0);
      assertEquals(919, javaCharStream0.getEndColumn());
      assertEquals(123, javaCharStream0.getEndLine());
      assertEquals(919, javaCharStream0.getBeginColumn());
      assertEquals(123, javaCharStream0.getLine());
      assertEquals(919, javaCharStream0.getColumn());
      assertEquals(123, javaCharStream0.getBeginLine());
      assertEquals("g", token0.toString());
      assertArrayEquals(new char[] {'g', ':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '%';
      charArray0[1] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'%', '5', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, '5', 13);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'%', '5', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'%', '5', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, token0.beginColumn);
      assertEquals(13, token0.endColumn);
      assertEquals(108, token0.kind);
      assertEquals(53, token0.endLine);
      assertEquals(53, token0.beginLine);
      assertNotNull(token0);
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals(53, javaCharStream0.getEndLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(53, javaCharStream0.getBeginLine());
      assertEquals(53, javaCharStream0.getLine());
      assertEquals("%", token0.toString());
      assertArrayEquals(new char[] {'%', '5', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 108);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 108. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[5] = (byte) (-35);
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = 'y';
      charArray0[2] = ' ';
      StringReader stringReader0 = new StringReader("S<9V/M-QLU");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 29, (byte) (-35));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', 'y', ' ', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      ByteBuffer byteBuffer0 = charset0.encode("L'Z B)H^");
      assertNotNull(byteBuffer0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(8, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertEquals(8, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      
      javaCharStream0.column = 44;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(8, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(8, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(8, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=8 lim=8 cap=8]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(8, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(8, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(8, charBuffer0.limit());
      assertEquals("L'Z B)H^", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      
      int int0 = charArrayReader0.read(charBuffer0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(8, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(8, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(8, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=8 lim=8 cap=8]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("H^", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(2, charBuffer0.length());
      assertEquals(6, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(8, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(6, int0);
      assertArrayEquals(new char[] {'>', 'y', ' ', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(45, token0.endColumn);
      assertEquals(45, token0.beginColumn);
      assertEquals(29, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(29, token0.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token0);
      assertEquals("S", token0.toString());
      assertEquals(29, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getColumn());
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertEquals(29, javaCharStream0.getEndLine());
      assertEquals(29, javaCharStream0.getBeginLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(46, token1.beginColumn);
      assertEquals(46, token1.endColumn);
      assertEquals(88, token1.kind);
      assertEquals(29, token1.endLine);
      assertEquals(29, token1.beginLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals("<", token1.toString());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(29, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndLine());
      assertEquals(29, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getEndColumn());
      
      Token token2 = Token.newToken('>');
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNull(token2.toString());
      
      javaParserTokenManager0.SwitchTo(0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(29, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndLine());
      assertEquals(29, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getEndColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(29, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndLine());
      assertEquals(29, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+9Y0E)G");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = 'S';
      charArray0[2] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'3', 'S', '1'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'3', 'S', '1'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, '1', (-1685));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedReader0, 44, (-1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new char[] {'3', 'S', '1'}, charArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      StringBuffer stringBuffer0 = new StringBuffer("Prn-Z|g c%");
      assertNotNull(stringBuffer0);
      assertEquals(10, stringBuffer0.length());
      assertEquals("Prn-Z|g c%", stringBuffer0.toString());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      Token token0 = token_GTToken0.next;
      assertNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1685), token1.endColumn);
      assertEquals(49, token1.endLine);
      assertEquals((-1685), token1.beginColumn);
      assertEquals(49, token1.beginLine);
      assertEquals(101, token1.kind);
      assertNotNull(token1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1685), javaCharStream0.getBeginColumn());
      assertEquals((-1685), javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getBeginLine());
      assertEquals((-1685), javaCharStream0.getColumn());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals("+", token1.toString());
      
      Token token2 = new Token();
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertNull(token2.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(49, token3.endLine);
      assertEquals((-1684), token3.beginColumn);
      assertEquals((-1684), token3.endColumn);
      assertEquals(66, token3.kind);
      assertEquals(49, token3.beginLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token3);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals("9", token3.toString());
      assertEquals((-1684), javaCharStream0.getColumn());
      assertEquals((-1684), javaCharStream0.getBeginColumn());
      assertEquals(49, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals((-1684), javaCharStream0.getEndColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1684), javaCharStream0.getColumn());
      assertEquals((-1684), javaCharStream0.getBeginColumn());
      assertEquals(49, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals((-1684), javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"[mTC}~");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[1] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'~', '.', '\u0000', '\u0000'}, charArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'~', '.', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, '~', 111);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'~', '.', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'~', '.', '\u0000', '\u0000'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'~', '.', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(90, token0.kind);
      assertEquals(111, token0.endColumn);
      assertEquals(126, token0.endLine);
      assertEquals(126, token0.beginLine);
      assertEquals(111, token0.beginColumn);
      assertNotNull(token0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(126, javaCharStream0.getEndLine());
      assertEquals(111, javaCharStream0.getColumn());
      assertEquals(126, javaCharStream0.getBeginLine());
      assertEquals(111, javaCharStream0.getBeginColumn());
      assertEquals(126, javaCharStream0.getLine());
      assertEquals(111, javaCharStream0.getEndColumn());
      assertEquals("~", token0.toString());
      assertArrayEquals(new char[] {'~', '.', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(85, token1.kind);
      assertEquals(112, token1.endColumn);
      assertEquals(112, token1.beginColumn);
      assertEquals(126, token1.beginLine);
      assertEquals(126, token1.endLine);
      assertNotNull(token1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(126, javaCharStream0.getEndLine());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(126, javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getBeginColumn());
      assertEquals(126, javaCharStream0.getLine());
      assertEquals(".", token1.toString());
      assertArrayEquals(new char[] {'~', '.', '\u0000', '\u0000'}, charArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(85, token1.kind);
      assertEquals(112, token1.endColumn);
      assertEquals(112, token1.beginColumn);
      assertEquals(126, token1.beginLine);
      assertEquals(126, token1.endLine);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(126, javaCharStream0.getEndLine());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(126, javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getBeginColumn());
      assertEquals(126, javaCharStream0.getLine());
      assertEquals(".", token1.toString());
      assertArrayEquals(new char[] {'~', '.', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 126, column 113.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      charArray0[2] = 'K';
      charArray0[3] = 'p';
      charArray0[4] = 'p';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'p', 'p', 'K', 'p', 'p'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1052, 1052);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'p', 'p', 'K', 'p', 'p'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'p', 'p', 'K', 'p', 'p'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(1052, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1052, token0.beginColumn);
      assertEquals(1052, token0.beginLine);
      assertEquals(1056, token0.endColumn);
      assertNotNull(token0);
      assertEquals(1052, javaCharStream0.getEndLine());
      assertEquals(1056, javaCharStream0.getColumn());
      assertEquals(1056, javaCharStream0.getEndColumn());
      assertEquals(1052, javaCharStream0.getBeginColumn());
      assertEquals(1052, javaCharStream0.getBeginLine());
      assertEquals(1052, javaCharStream0.getLine());
      assertEquals("ppKpp", token0.toString());
      assertArrayEquals(new char[] {'p', 'p', 'K', 'p', 'p'}, charArray0);
      
      CharArrayReader charArrayReader1 = null;
      try {
        charArrayReader1 = new CharArrayReader(charArray0, (-587), (-587));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = '.';
      charArray0[3] = '\u0083';
      charArray0[4] = '.';
      charArray0[6] = '.';
      charArray0[7] = '9';
      charArray0[8] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.', '.', '.', '\u0083', '.', '\u0000', '.', '9', '.'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, '\u0083', (-587));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'.', '.', '.', '\u0083', '.', '\u0000', '.', '9', '.'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'.', '.', '.', '\u0083', '.', '\u0000', '.', '9', '.'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(131, token0.endLine);
      assertEquals((-585), token0.endColumn);
      assertEquals(121, token0.kind);
      assertEquals((-587), token0.beginColumn);
      assertEquals(131, token0.beginLine);
      assertNotNull(token0);
      assertEquals(131, javaCharStream0.getEndLine());
      assertEquals((-585), javaCharStream0.getColumn());
      assertEquals((-587), javaCharStream0.getBeginColumn());
      assertEquals(131, javaCharStream0.getLine());
      assertEquals(131, javaCharStream0.getBeginLine());
      assertEquals((-585), javaCharStream0.getEndColumn());
      assertEquals("...", token0.toString());
      assertArrayEquals(new char[] {'.', '.', '.', '\u0083', '.', '\u0000', '.', '9', '.'}, charArray0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(131, token1.beginLine);
      assertEquals(121, token1.kind);
      assertEquals((-585), token1.endColumn);
      assertEquals((-587), token1.beginColumn);
      assertEquals(131, token1.endLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(131, javaCharStream0.getEndLine());
      assertEquals((-585), javaCharStream0.getColumn());
      assertEquals((-587), javaCharStream0.getBeginColumn());
      assertEquals(131, javaCharStream0.getLine());
      assertEquals(131, javaCharStream0.getBeginLine());
      assertEquals((-585), javaCharStream0.getEndColumn());
      assertEquals("...", token1.toString());
      assertArrayEquals(new char[] {'.', '.', '.', '\u0083', '.', '\u0000', '.', '9', '.'}, charArray0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      
      Locale locale1 = Locale.US;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("US", locale1.getCountry());
      
      String string0 = javaCharStream0.GetImage();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(string0);
      assertEquals(131, javaCharStream0.getEndLine());
      assertEquals((-585), javaCharStream0.getColumn());
      assertEquals((-587), javaCharStream0.getBeginColumn());
      assertEquals(131, javaCharStream0.getLine());
      assertEquals(131, javaCharStream0.getBeginLine());
      assertEquals((-585), javaCharStream0.getEndColumn());
      assertEquals("...", string0);
      assertArrayEquals(new char[] {'.', '.', '.', '\u0083', '.', '\u0000', '.', '9', '.'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 131);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 131. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '5';
      charArray0[3] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      charArray0[4] = '5';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'5', '\u0000', '5', '5', '5'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'5', '\u0000', '5', '5', '5'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 119, (byte)4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'5', '\u0000', '5', '5', '5'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'5', '\u0000', '5', '5', '5'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'5', '\u0000', '5', '5', '5'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(119, token0.endLine);
      assertEquals(119, token0.beginLine);
      assertEquals(4, token0.endColumn);
      assertEquals(4, token0.beginColumn);
      assertNotNull(token0);
      assertEquals(119, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(119, javaCharStream0.getLine());
      assertEquals(119, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("5", token0.toString());
      assertArrayEquals(new char[] {'5', '\u0000', '5', '5', '5'}, charArray0);
      
      Stream<String> stream0 = bufferedReader0.lines();
      assertNotNull(stream0);
      assertArrayEquals(new char[] {'5', '\u0000', '5', '5', '5'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (byte)4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = '';
      charArray0[3] = 's';
      charArray0[4] = '&';
      charArray0[5] = '4';
      charArray0[6] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'a', 'a', '', 's', '&', '4', '.'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 43, 577);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'a', 'a', '', 's', '&', '4', '.'}, charArray0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'a', 'a', '', 's', '&', '4', '.'}, charArray0);
      
      boolean boolean1 = javaCharStream0.prevCharIsCR;
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'a', 'a', '', 's', '&', '4', '.'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'a', 'a', '', 's', '&', '4', '.'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'a', 'a', '', 's', '&', '4', '.'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(578, token0.endColumn);
      assertEquals(43, token0.endLine);
      assertEquals(577, token0.beginColumn);
      assertEquals(43, token0.beginLine);
      assertNotNull(token0);
      assertEquals(43, javaCharStream0.getEndLine());
      assertEquals(43, javaCharStream0.getLine());
      assertEquals(577, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getBeginLine());
      assertEquals(578, javaCharStream0.getColumn());
      assertEquals(578, javaCharStream0.getEndColumn());
      assertEquals("aa", token0.toString());
      assertArrayEquals(new char[] {'a', 'a', '', 's', '&', '4', '.'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(578);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 578. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'>', '>', '>', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'>', '>', '>', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, Integer.MIN_VALUE, 669);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'>', '>', '>', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'>', '>', '>', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(671, token0.endColumn);
      assertEquals(669, token0.beginColumn);
      assertEquals(Integer.MIN_VALUE, token0.endLine);
      assertEquals(Integer.MIN_VALUE, token0.beginLine);
      assertEquals(124, token0.kind);
      assertNotNull(token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(Integer.MIN_VALUE, javaCharStream0.getEndLine());
      assertEquals(Integer.MIN_VALUE, javaCharStream0.getLine());
      assertEquals(Integer.MIN_VALUE, javaCharStream0.getBeginLine());
      assertEquals(669, javaCharStream0.getEndColumn());
      assertEquals(669, javaCharStream0.getBeginColumn());
      assertEquals(669, javaCharStream0.getColumn());
      assertEquals(">>>", token0.toString());
      assertArrayEquals(new char[] {'>', '>', '>', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = new Token();
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertNotNull(token1);
      assertNull(token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token2, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(Integer.MIN_VALUE, token2.endLine);
      assertEquals(124, token2.kind);
      assertEquals(Integer.MIN_VALUE, token2.beginLine);
      assertEquals(670, token2.beginColumn);
      assertEquals(671, token2.endColumn);
      assertNotNull(token2);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token2.equals((Object)token0));
      assertEquals(Integer.MIN_VALUE, javaCharStream0.getEndLine());
      assertEquals(Integer.MIN_VALUE, javaCharStream0.getLine());
      assertEquals(670, javaCharStream0.getEndColumn());
      assertEquals(Integer.MIN_VALUE, javaCharStream0.getBeginLine());
      assertEquals(670, javaCharStream0.getBeginColumn());
      assertEquals(670, javaCharStream0.getColumn());
      assertEquals(">>", token2.toString());
      assertArrayEquals(new char[] {'>', '>', '>', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(Integer.MIN_VALUE, javaCharStream0.getEndLine());
      assertEquals(Integer.MIN_VALUE, javaCharStream0.getLine());
      assertEquals(670, javaCharStream0.getEndColumn());
      assertEquals(Integer.MIN_VALUE, javaCharStream0.getBeginLine());
      assertEquals(670, javaCharStream0.getBeginColumn());
      assertEquals(670, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'>', '>', '>', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.TokenLexicalActions(token1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.soops.CEN4010.JMCA.JParser.Token cannot be cast to com.soops.CEN4010.JMCA.JParser.Token$GTToken
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[3] = 'g';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'g', 'g', '\u0000', 'g', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'g', 'g', '\u0000', 'g', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-1967), 1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'g', 'g', '\u0000', 'g', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'g', 'g', '\u0000', 'g', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals((-1967), token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1967), token0.endLine);
      assertNotNull(token0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals((-1967), javaCharStream0.getBeginLine());
      assertEquals((-1967), javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals((-1967), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals("gg", token0.toString());
      assertArrayEquals(new char[] {'g', 'g', '\u0000', 'g', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = new Token();
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1967, column 3.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'d', 'M', 'M'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'d', 'M', 'M'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'d', 'M', 'M'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 34, (-39));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'d', 'M', 'M'}, charArray0);
      
      CharArrayReader charArrayReader3 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader3);
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'d', 'M', 'M'}, charArray0);
      
      boolean boolean0 = charArrayReader3.ready();
      assertNotSame(charArrayReader3, charArrayReader2);
      assertNotSame(charArrayReader3, charArrayReader0);
      assertNotSame(charArrayReader3, charArrayReader1);
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'d', 'M', 'M'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader3));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'d', 'M', 'M'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertNotSame(charArrayReader1, charArrayReader3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-39), token0.beginColumn);
      assertEquals((-37), token0.endColumn);
      assertEquals(34, token0.endLine);
      assertEquals(34, token0.beginLine);
      assertNotNull(token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader3));
      assertEquals((-37), javaCharStream0.getEndColumn());
      assertEquals((-37), javaCharStream0.getColumn());
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals((-39), javaCharStream0.getBeginColumn());
      assertEquals("dMM", token0.toString());
      assertArrayEquals(new char[] {'d', 'M', 'M'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-39));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -39. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}q*=Go@`_hSmgx8o");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("#|qb57LA}LOU\"S");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      stringReader1.reset();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      stringReader1.reset();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'S';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-Z");
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 73, 2488);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.jjnewStateCnt = (-1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      StringBuffer stringBuffer0 = new StringBuffer(63);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = new StringBuffer();
      assertNotNull(stringBuffer1);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 73, column 2488.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[6];
      StringReader stringReader0 = new StringReader("VZq|V");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(86, int0);
      
      stringReader0.reset();
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2090), 1894);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1894, token0.beginColumn);
      assertEquals((-2090), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-2090), token0.endLine);
      assertEquals(1896, token0.endColumn);
      assertNotNull(token0);
      assertEquals(1896, javaCharStream0.getEndColumn());
      assertEquals((-2090), javaCharStream0.getBeginLine());
      assertEquals((-2090), javaCharStream0.getEndLine());
      assertEquals(1894, javaCharStream0.getBeginColumn());
      assertEquals((-2090), javaCharStream0.getLine());
      assertEquals(1896, javaCharStream0.getColumn());
      assertEquals("VZq", token0.toString());
      
      Token token1 = Token.newToken((-2090));
      assertNotSame(token1, token0);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2090), token2.endLine);
      assertEquals(106, token2.kind);
      assertEquals((-2090), token2.beginLine);
      assertEquals(1897, token2.beginColumn);
      assertEquals(1897, token2.endColumn);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1897, javaCharStream0.getEndColumn());
      assertEquals(1897, javaCharStream0.getColumn());
      assertEquals((-2090), javaCharStream0.getBeginLine());
      assertEquals((-2090), javaCharStream0.getEndLine());
      assertEquals((-2090), javaCharStream0.getLine());
      assertEquals(1897, javaCharStream0.getBeginColumn());
      assertEquals("|", token2.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1897, javaCharStream0.getEndColumn());
      assertEquals(1897, javaCharStream0.getColumn());
      assertEquals((-2090), javaCharStream0.getBeginLine());
      assertEquals((-2090), javaCharStream0.getEndLine());
      assertEquals((-2090), javaCharStream0.getLine());
      assertEquals(1897, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1897, javaCharStream0.getEndColumn());
      assertEquals(1897, javaCharStream0.getColumn());
      assertEquals((-2090), javaCharStream0.getBeginLine());
      assertEquals((-2090), javaCharStream0.getEndLine());
      assertEquals((-2090), javaCharStream0.getLine());
      assertEquals(1897, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("lzsX^s*/n+3x@h");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'2'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-2090), (-2090));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'2'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'2'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token_GTToken0.toString());
      assertArrayEquals(new char[] {'2'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2090), token0.beginColumn);
      assertEquals((-2090), token0.endColumn);
      assertEquals((-2090), token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals((-2090), token0.beginLine);
      assertNotNull(token0);
      assertEquals((-2090), javaCharStream0.getBeginColumn());
      assertEquals((-2090), javaCharStream0.getColumn());
      assertEquals((-2090), javaCharStream0.getEndLine());
      assertEquals((-2090), javaCharStream0.getEndColumn());
      assertEquals((-2090), javaCharStream0.getLine());
      assertEquals((-2090), javaCharStream0.getBeginLine());
      assertEquals("2", token0.toString());
      assertArrayEquals(new char[] {'2'}, charArray0);
      
      Token token1 = Token.newToken(94);
      assertNotSame(token1, token0);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      
      Token token2 = Token.newToken((-2560));
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNull(token2.toString());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2090), token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals((-2090), token3.endColumn);
      assertEquals((-2090), token3.beginLine);
      assertEquals((-2090), token3.beginColumn);
      assertNotNull(token3);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertEquals((-2090), javaCharStream0.getBeginColumn());
      assertEquals((-2090), javaCharStream0.getColumn());
      assertEquals((-2090), javaCharStream0.getEndLine());
      assertEquals((-2090), javaCharStream0.getEndColumn());
      assertEquals((-2090), javaCharStream0.getLine());
      assertEquals((-2090), javaCharStream0.getBeginLine());
      assertEquals("", token3.toString());
      assertArrayEquals(new char[] {'2'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2090), javaCharStream0.getBeginColumn());
      assertEquals((-2090), javaCharStream0.getColumn());
      assertEquals((-2090), javaCharStream0.getEndLine());
      assertEquals((-2090), javaCharStream0.getEndColumn());
      assertEquals((-2090), javaCharStream0.getLine());
      assertEquals((-2090), javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'2'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-2090));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2090. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'M';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'d', 'd', 'M'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'d', 'd', 'M'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 34, 'd');
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'d', 'd', 'M'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'d', 'd', 'M'}, charArray0);
      
      boolean boolean0 = charArrayReader2.ready();
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'d', 'd', 'M'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'d', 'd', 'M'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(34, token0.beginLine);
      assertEquals(34, token0.endLine);
      assertEquals(100, token0.beginColumn);
      assertEquals(102, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertEquals(34, javaCharStream0.getLine());
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(102, javaCharStream0.getColumn());
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertEquals("ddM", token0.toString());
      assertArrayEquals(new char[] {'d', 'd', 'M'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(100);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 100. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)16;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = '|';
      charArray0[2] = 'B';
      charArray0[3] = '$';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'|', '|', 'B', '$'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'|', '|', 'B', '$'}, charArray0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'|', '|', 'B', '$'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'|', '|', 'B', '$'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(97, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("||", token0.toString());
      assertArrayEquals(new char[] {'|', '|', 'B', '$'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (int) (byte)16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 16. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '0';
      charArray0[1] = '&';
      charArray0[2] = 'M';
      charArray0[3] = 'M';
      charArray0[4] = '_';
      charArray0[5] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'0', '&', 'M', 'M', '_', 'W'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 89, 2470);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'0', '&', 'M', 'M', '_', 'W'}, charArray0);
      
      StringBuffer stringBuffer0 = new StringBuffer(29);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = new StringBuffer();
      assertNotNull(stringBuffer1);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      
      Token token0 = new Token();
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'0', '&', 'M', 'M', '_', 'W'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token1.kind);
      assertEquals(2470, token1.endColumn);
      assertEquals(89, token1.endLine);
      assertEquals(89, token1.beginLine);
      assertEquals(2470, token1.beginColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(89, javaCharStream0.getEndLine());
      assertEquals(2470, javaCharStream0.getEndColumn());
      assertEquals(2470, javaCharStream0.getBeginColumn());
      assertEquals(89, javaCharStream0.getLine());
      assertEquals(89, javaCharStream0.getBeginLine());
      assertEquals(2470, javaCharStream0.getColumn());
      assertEquals("0", token1.toString());
      assertArrayEquals(new char[] {'0', '&', 'M', 'M', '_', 'W'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(89, javaCharStream0.getEndLine());
      assertEquals(2470, javaCharStream0.getEndColumn());
      assertEquals(2470, javaCharStream0.getBeginColumn());
      assertEquals(89, javaCharStream0.getLine());
      assertEquals(89, javaCharStream0.getBeginLine());
      assertEquals(2470, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'0', '&', 'M', 'M', '_', 'W'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(89, javaCharStream0.getEndLine());
      assertEquals(2470, javaCharStream0.getEndColumn());
      assertEquals(2470, javaCharStream0.getBeginColumn());
      assertEquals(89, javaCharStream0.getLine());
      assertEquals(89, javaCharStream0.getBeginLine());
      assertEquals(2470, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'0', '&', 'M', 'M', '_', 'W'}, charArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token1.kind);
      assertEquals(2470, token1.endColumn);
      assertEquals(89, token1.endLine);
      assertEquals(89, token1.beginLine);
      assertEquals(2470, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertEquals(89, javaCharStream0.getEndLine());
      assertEquals(2470, javaCharStream0.getEndColumn());
      assertEquals(2470, javaCharStream0.getBeginColumn());
      assertEquals(89, javaCharStream0.getLine());
      assertEquals(89, javaCharStream0.getBeginLine());
      assertEquals(2470, javaCharStream0.getColumn());
      assertEquals("0", token1.toString());
      assertArrayEquals(new char[] {'0', '&', 'M', 'M', '_', 'W'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'c';
      charArray0[2] = 'a';
      charArray0[3] = 'M';
      charArray0[4] = 'a';
      charArray0[5] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'3', 'c', 'a', 'M', 'a', 'a'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'3', 'c', 'a', 'M', 'a', 'a'}, charArray0);
      
      StringReader stringReader0 = new StringReader(" column ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 119, 23);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'3', 'c', 'a', 'M', 'a', 'a'}, charArray0);
      
      boolean boolean2 = charArrayReader0.ready();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertArrayEquals(new char[] {'3', 'c', 'a', 'M', 'a', 'a'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'3', 'c', 'a', 'M', 'a', 'a'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(23, token0.beginColumn);
      assertEquals(23, token0.endColumn);
      assertEquals(119, token0.endLine);
      assertEquals(119, token0.beginLine);
      assertEquals(66, token0.kind);
      assertNotNull(token0);
      assertEquals(119, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals(23, javaCharStream0.getBeginColumn());
      assertEquals(23, javaCharStream0.getColumn());
      assertEquals(119, javaCharStream0.getLine());
      assertEquals(119, javaCharStream0.getEndLine());
      assertEquals("3", token0.toString());
      assertArrayEquals(new char[] {'3', 'c', 'a', 'M', 'a', 'a'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(119, token1.endLine);
      assertEquals(28, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(24, token1.beginColumn);
      assertEquals(119, token1.beginLine);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals("caMaa", token1.toString());
      assertEquals(119, javaCharStream0.getBeginLine());
      assertEquals(28, javaCharStream0.getEndColumn());
      assertEquals(28, javaCharStream0.getColumn());
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals(119, javaCharStream0.getLine());
      assertEquals(119, javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'3', 'c', 'a', 'M', 'a', 'a'}, charArray0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(119, javaCharStream0.getBeginLine());
      assertEquals(28, javaCharStream0.getEndColumn());
      assertEquals(28, javaCharStream0.getColumn());
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals(119, javaCharStream0.getLine());
      assertEquals(119, javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'3', 'c', 'a', 'M', 'a', 'a'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(119, javaCharStream0.getBeginLine());
      assertEquals(28, javaCharStream0.getEndColumn());
      assertEquals(28, javaCharStream0.getColumn());
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals(119, javaCharStream0.getLine());
      assertEquals(119, javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'3', 'c', 'a', 'M', 'a', 'a'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-144));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -144. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Q';
      charArray0[1] = '&';
      charArray0[2] = '[';
      charArray0[3] = '9';
      charArray0[4] = 'M';
      charArray0[5] = '9';
      charArray0[6] = 'L';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'Q', '&', '[', '9', 'M', '9', 'L'}, charArray0);
      
      int int0 = 26;
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte) (-116), 24);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'Q', '&', '[', '9', 'M', '9', 'L'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'Q', '&', '[', '9', 'M', '9', 'L'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token_GTToken0.toString());
      assertArrayEquals(new char[] {'Q', '&', '[', '9', 'M', '9', 'L'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(24, token0.beginColumn);
      assertEquals((-116), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-116), token0.beginLine);
      assertEquals(24, token0.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token0);
      assertEquals("Q", token0.toString());
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals(24, javaCharStream0.getEndColumn());
      assertEquals((-116), javaCharStream0.getEndLine());
      assertEquals((-116), javaCharStream0.getBeginLine());
      assertEquals((-116), javaCharStream0.getLine());
      assertEquals(24, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'Q', '&', '[', '9', 'M', '9', 'L'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals((-116), token1.beginLine);
      assertEquals(25, token1.endColumn);
      assertEquals(25, token1.beginColumn);
      assertEquals((-116), token1.endLine);
      assertEquals(105, token1.kind);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals("&", token1.toString());
      assertEquals(25, javaCharStream0.getEndColumn());
      assertEquals(25, javaCharStream0.getBeginColumn());
      assertEquals((-116), javaCharStream0.getEndLine());
      assertEquals((-116), javaCharStream0.getBeginLine());
      assertEquals((-116), javaCharStream0.getLine());
      assertEquals(25, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'Q', '&', '[', '9', 'M', '9', 'L'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(23);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 23. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'o';
      charArray0[3] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'3', 'o', '\u0000', 'W', '\u0000', '\u0000'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'3', 'o', '\u0000', 'W', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader0 = new StringReader(" column ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, 95, 95);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'3', 'o', '\u0000', 'W', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean2 = javaCharStream0.prevCharIsCR;
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'3', 'o', '\u0000', 'W', '\u0000', '\u0000'}, charArray0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'3', 'o', '\u0000', 'W', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'3', 'o', '\u0000', 'W', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(95, token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals(95, token0.beginColumn);
      assertEquals(95, token0.endColumn);
      assertEquals(95, token0.endLine);
      assertNotNull(token0);
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(95, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(95, javaCharStream0.getEndColumn());
      assertEquals("3", token0.toString());
      assertArrayEquals(new char[] {'3', 'o', '\u0000', 'W', '\u0000', '\u0000'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      Token token1 = token_GTToken0.next;
      assertNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertEquals(96, token2.beginColumn);
      assertEquals(96, token2.endColumn);
      assertEquals(95, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(95, token2.beginLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertEquals("o", token2.toString());
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'3', 'o', '\u0000', 'W', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 95, column 97.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = '>';
      charArray0[2] = 'd';
      charArray0[3] = '>';
      charArray0[4] = '>';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'d', '>', 'd', '>', '>', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'d', '>', 'd', '>', '>', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, (-26), 42);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'d', '>', 'd', '>', '>', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'d', '>', 'd', '>', '>', '\u0000'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'d', '>', 'd', '>', '>', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'d', '>', 'd', '>', '>', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(charArrayReader1, charArrayReader2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-26), token0.beginLine);
      assertEquals(42, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-26), token0.endLine);
      assertEquals(42, token0.endColumn);
      assertNotNull(token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertEquals((-26), javaCharStream0.getLine());
      assertEquals((-26), javaCharStream0.getEndLine());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(42, javaCharStream0.getBeginColumn());
      assertEquals((-26), javaCharStream0.getBeginLine());
      assertEquals("d", token0.toString());
      assertArrayEquals(new char[] {'d', '>', 'd', '>', '>', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-26));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -26. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[0] = (byte)68;
      byteArray0[2] = (byte)68;
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte)29;
      char[] charArray0 = new char[15];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = 'z';
      charArray0[4] = ':';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 13, 34);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-1), 35, (byte)29);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(13, token0.endLine);
      assertEquals(13, token0.beginLine);
      assertEquals(34, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(37, token0.endColumn);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals("zzzz", token0.toString());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals(34, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 47);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 47. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = 'M';
      charArray0[5] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'C', 'C', 'M', '\u0000', '\u0000', 'W'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 89, 2470);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'C', 'C', 'M', '\u0000', '\u0000', 'W'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new char[] {'C', 'C', 'M', '\u0000', '\u0000', 'W'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'C', 'C', 'M', '\u0000', '\u0000', 'W'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2472, token0.endColumn);
      assertEquals(89, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(2470, token0.beginColumn);
      assertEquals(89, token0.endLine);
      assertNotNull(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(2470, javaCharStream0.getBeginColumn());
      assertEquals(2472, javaCharStream0.getColumn());
      assertEquals(2472, javaCharStream0.getEndColumn());
      assertEquals(89, javaCharStream0.getEndLine());
      assertEquals(89, javaCharStream0.getBeginLine());
      assertEquals(89, javaCharStream0.getLine());
      assertEquals("CCM", token0.toString());
      assertArrayEquals(new char[] {'C', 'C', 'M', '\u0000', '\u0000', 'W'}, charArray0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(89, token1.beginLine);
      assertEquals(2470, token1.beginColumn);
      assertEquals(89, token1.endLine);
      assertEquals(2472, token1.endColumn);
      assertNotNull(token1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(2470, javaCharStream0.getBeginColumn());
      assertEquals(2472, javaCharStream0.getColumn());
      assertEquals(2472, javaCharStream0.getEndColumn());
      assertEquals(89, javaCharStream0.getEndLine());
      assertEquals(89, javaCharStream0.getBeginLine());
      assertEquals(89, javaCharStream0.getLine());
      assertEquals("CCM", token1.toString());
      assertArrayEquals(new char[] {'C', 'C', 'M', '\u0000', '\u0000', 'W'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 89, column 2473.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lh!");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = '\'';
      charArray0[3] = 'a';
      charArray0[4] = 'a';
      charArray0[5] = '\'';
      charArray0[6] = '&';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\'', '\'', '\'', 'a', 'a', '\'', '&'}, charArray0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lh!");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'\'', '\'', '\'', 'a', 'a', '\'', '&'}, charArray0);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"<<=\"");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader1);
      assertNotNull(pushbackReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'\'', '\'', '\'', 'a', 'a', '\'', '&'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\'', '\'', '\'', 'a', 'a', '\'', '&'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\'', '\'', '\'', 'a', 'a', '\'', '&'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\'\" (39), after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-9);
      byteArray0[3] = (byte) (-9);
      char[] charArray0 = new char[4];
      charArray0[0] = 'v';
      charArray0[2] = '0';
      charArray0[3] = '0';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'v', '\u0000', '0', '0'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte) (-9), (byte) (-9));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'v', '\u0000', '0', '0'}, charArray0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'v', '\u0000', '0', '0'}, charArray0);
      
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'v', '\u0000', '0', '0'}, charArray0);
      
      charArrayReader0.mark((byte) (-9));
      assertArrayEquals(new char[] {'v', '\u0000', '0', '0'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'v', '\u0000', '0', '0'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-9), token0.endLine);
      assertEquals((-9), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-9), token0.beginColumn);
      assertEquals((-9), token0.beginLine);
      assertNotNull(token0);
      assertEquals((-9), javaCharStream0.getEndLine());
      assertEquals((-9), javaCharStream0.getColumn());
      assertEquals((-9), javaCharStream0.getBeginColumn());
      assertEquals((-9), javaCharStream0.getLine());
      assertEquals((-9), javaCharStream0.getEndColumn());
      assertEquals((-9), javaCharStream0.getBeginLine());
      assertEquals("v", token0.toString());
      assertArrayEquals(new char[] {'v', '\u0000', '0', '0'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -9, column -8.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = '-';
      charArray0[1] = 'B';
      charArray0[3] = '$';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'|', 'B', '\u0000', '$'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'|', 'B', '\u0000', '$'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'|', 'B', '\u0000', '$'}, charArray0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      CharArrayReader charArrayReader3 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader3);
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'|', 'B', '\u0000', '$'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader3));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'|', 'B', '\u0000', '$'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader3));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'|', 'B', '\u0000', '$'}, charArray0);
      
      javaParserTokenManager0.input_stream = javaCharStream0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaParserTokenManager0.input_stream.getBeginColumn());
      assertEquals(0, javaParserTokenManager0.input_stream.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(106, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader3));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("|", token0.toString());
      assertArrayEquals(new char[] {'|', 'B', '\u0000', '$'}, charArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(106, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader3));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("|", token0.toString());
      assertArrayEquals(new char[] {'|', 'B', '\u0000', '$'}, charArray0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(106, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader3));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("|", token0.toString());
      assertArrayEquals(new char[] {'|', 'B', '\u0000', '$'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (int) (byte)16);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 16. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)16;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = '-';
      charArray0[1] = 'B';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'|', 'B', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 2812, (-2161));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'|', 'B', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'|', 'B', '\u0000', '\u0000'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'|', 'B', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2161), token0.endColumn);
      assertEquals((-2161), token0.beginColumn);
      assertEquals(2812, token0.endLine);
      assertEquals(106, token0.kind);
      assertEquals(2812, token0.beginLine);
      assertNotNull(token0);
      assertEquals(2812, javaCharStream0.getBeginLine());
      assertEquals((-2161), javaCharStream0.getBeginColumn());
      assertEquals(2812, javaCharStream0.getLine());
      assertEquals((-2161), javaCharStream0.getEndColumn());
      assertEquals(2812, javaCharStream0.getEndLine());
      assertEquals((-2161), javaCharStream0.getColumn());
      assertEquals("|", token0.toString());
      assertArrayEquals(new char[] {'|', 'B', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-2160), token1.endColumn);
      assertEquals(2812, token1.endLine);
      assertEquals(2812, token1.beginLine);
      assertEquals((-2160), token1.beginColumn);
      assertEquals(74, token1.kind);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(2812, javaCharStream0.getBeginLine());
      assertEquals((-2160), javaCharStream0.getBeginColumn());
      assertEquals((-2160), javaCharStream0.getEndColumn());
      assertEquals((-2160), javaCharStream0.getColumn());
      assertEquals(2812, javaCharStream0.getLine());
      assertEquals(2812, javaCharStream0.getEndLine());
      assertEquals("B", token1.toString());
      assertArrayEquals(new char[] {'|', 'B', '\u0000', '\u0000'}, charArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(token0, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-2161), token0.endColumn);
      assertEquals((-2161), token0.beginColumn);
      assertEquals(2812, token0.endLine);
      assertEquals(106, token0.kind);
      assertEquals(2812, token0.beginLine);
      assertFalse(token0.equals((Object)token1));
      assertEquals(2812, javaCharStream0.getBeginLine());
      assertEquals((-2160), javaCharStream0.getBeginColumn());
      assertEquals((-2160), javaCharStream0.getEndColumn());
      assertEquals((-2160), javaCharStream0.getColumn());
      assertEquals(2812, javaCharStream0.getLine());
      assertEquals(2812, javaCharStream0.getEndLine());
      assertEquals("|", token0.toString());
      assertArrayEquals(new char[] {'|', 'B', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 2812, column -2159.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "catch");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = '<';
      charArray0[3] = 'j';
      charArray0[4] = '9';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'j', 'j', '<', 'j', '9'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'j', 'j', '<', 'j', '9'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 'j', 567);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'j', 'j', '<', 'j', '9'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'j', 'j', '<', 'j', '9'}, charArray0);
      
      StringBuffer stringBuffer0 = new StringBuffer('9');
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(106, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(567, token0.beginColumn);
      assertEquals(568, token0.endColumn);
      assertEquals(106, token0.endLine);
      assertNotNull(token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals(568, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals(568, javaCharStream0.getEndColumn());
      assertEquals(567, javaCharStream0.getBeginColumn());
      assertEquals("jj", token0.toString());
      assertArrayEquals(new char[] {'j', 'j', '<', 'j', '9'}, charArray0);
      
      Token token1 = new Token();
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      
      javaParserTokenManager0.setDebugStream(javaParserTokenManager0.debugStream);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals(568, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals(568, javaCharStream0.getEndColumn());
      assertEquals(567, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'j', 'j', '<', 'j', '9'}, charArray0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(106, token2.beginLine);
      assertEquals(569, token2.endColumn);
      assertEquals(569, token2.beginColumn);
      assertEquals(106, token2.endLine);
      assertEquals(88, token2.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals("<", token2.toString());
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(569, javaCharStream0.getEndColumn());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals(569, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals(569, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'j', 'j', '<', 'j', '9'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(569, javaCharStream0.getEndColumn());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals(569, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals(569, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'j', 'j', '<', 'j', '9'}, charArray0);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token1, token2);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token0));
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(569, javaCharStream0.getEndColumn());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals(569, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals(569, javaCharStream0.getBeginColumn());
      assertNull(token1.toString());
      assertArrayEquals(new char[] {'j', 'j', '<', 'j', '9'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte byte0 = (byte)2;
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 94, (byte)2);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'd';
      charArray0[1] = 's';
      charArray0[2] = 's';
      charArray0[3] = 'Q';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'d', 's', 's', 'Q'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, (-1), 403);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'d', 's', 's', 'Q'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'d', 's', 's', 'Q'}, charArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, 40, 31);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream2);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'d', 's', 's', 'Q'}, charArray0);
      
      StringBuffer stringBuffer1 = new StringBuffer();
      assertNotNull(stringBuffer1);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals((-1), token0.endLine);
      assertEquals(406, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(403, token0.beginColumn);
      assertEquals((-1), token0.beginLine);
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals("dssQ", token0.toString());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals(403, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(406, javaCharStream1.getEndColumn());
      assertEquals(406, javaCharStream1.getColumn());
      assertArrayEquals(new char[] {'d', 's', 's', 'Q'}, charArray0);
      
      try { 
        charArrayReader0.ready();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 94, (byte)2);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = stringReader0.ready();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '5';
      charArray0[1] = ' ';
      charArray0[2] = '&';
      charArray0[3] = 'O';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'5', ' ', '&', 'O'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 4261, (-2548));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'5', ' ', '&', 'O'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'5', ' ', '&', 'O'}, charArray0);
      
      Token token0 = Token.newToken((-1));
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(4261, token1.endLine);
      assertEquals(66, token1.kind);
      assertEquals((-2548), token1.endColumn);
      assertEquals(4261, token1.beginLine);
      assertEquals((-2548), token1.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals("5", token1.toString());
      assertEquals(4261, javaCharStream1.getLine());
      assertEquals((-2548), javaCharStream1.getColumn());
      assertEquals(4261, javaCharStream1.getBeginLine());
      assertEquals((-2548), javaCharStream1.getBeginColumn());
      assertEquals((-2548), javaCharStream1.getEndColumn());
      assertEquals(4261, javaCharStream1.getEndLine());
      assertArrayEquals(new char[] {'5', ' ', '&', 'O'}, charArray0);
      
      Token token2 = new Token();
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNull(token2.toString());
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(105, token3.kind);
      assertEquals(4261, token3.endLine);
      assertEquals((-2546), token3.endColumn);
      assertEquals(4261, token3.beginLine);
      assertEquals((-2546), token3.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertNotNull(token3);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals("&", token3.toString());
      assertEquals(4261, javaCharStream1.getLine());
      assertEquals(4261, javaCharStream1.getBeginLine());
      assertEquals((-2546), javaCharStream1.getColumn());
      assertEquals((-2546), javaCharStream1.getEndColumn());
      assertEquals(4261, javaCharStream1.getEndLine());
      assertEquals((-2546), javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'5', ' ', '&', 'O'}, charArray0);
      
      Token token4 = javaParserTokenManager2.getNextToken();
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(94, token4.beginLine);
      assertEquals(2, token4.beginColumn);
      assertEquals(94, token4.endLine);
      assertEquals(5, token4.endColumn);
      assertEquals(61, token4.kind);
      assertNotNull(token4);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(94, javaCharStream0.getBeginLine());
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(94, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals("true", token4.toString());
      
      javaParserTokenManager2.MoreLexicalActions();
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(94, javaCharStream0.getBeginLine());
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(94, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = '.';
      charArray0[2] = 'Z';
      charArray0[5] = '4';
      charArray0[6] = '4';
      charArray0[7] = '';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'4', '.', 'Z', '\u0000', '\u0000', '4', '4', ''}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte) (-116), (byte) (-116));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'4', '.', 'Z', '\u0000', '\u0000', '4', '4', ''}, charArray0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'4', '.', 'Z', '\u0000', '\u0000', '4', '4', ''}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'4', '.', 'Z', '\u0000', '\u0000', '4', '4', ''}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'4', '.', 'Z', '\u0000', '\u0000', '4', '4', ''}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'4', '.', 'Z', '\u0000', '\u0000', '4', '4', ''}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-116), token0.beginColumn);
      assertEquals((-116), token0.beginLine);
      assertEquals((-116), token0.endLine);
      assertEquals((-115), token0.endColumn);
      assertEquals(70, token0.kind);
      assertNotNull(token0);
      assertEquals((-116), javaCharStream0.getEndLine());
      assertEquals((-115), javaCharStream0.getColumn());
      assertEquals((-116), javaCharStream0.getBeginColumn());
      assertEquals((-115), javaCharStream0.getEndColumn());
      assertEquals((-116), javaCharStream0.getLine());
      assertEquals((-116), javaCharStream0.getBeginLine());
      assertEquals("4.", token0.toString());
      assertArrayEquals(new char[] {'4', '.', 'Z', '\u0000', '\u0000', '4', '4', ''}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((byte) (-116));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -116. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '.';
      charArray0[1] = ')';
      charArray0[2] = '.';
      charArray0[3] = '4';
      charArray0[4] = '4';
      charArray0[6] = 'v';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.', ')', '.', '4', '4', '\u0000', 'v', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)0, 6724);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'.', ')', '.', '4', '4', '\u0000', 'v', '\u0000'}, charArray0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'.', ')', '.', '4', '4', '\u0000', 'v', '\u0000'}, charArray0);
      
      boolean boolean0 = javaCharStream0.prevCharIsLF;
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'.', ')', '.', '4', '4', '\u0000', 'v', '\u0000'}, charArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'.', ')', '.', '4', '4', '\u0000', 'v', '\u0000'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(85, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(6724, token0.beginColumn);
      assertEquals(6724, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token0);
      assertEquals(".", token0.toString());
      assertEquals(6724, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(6724, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(6724, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'.', ')', '.', '4', '4', '\u0000', 'v', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '.';
      charArray0[1] = '4';
      charArray0[2] = '4';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.', '4', '4'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)0, 109);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'.', '4', '4'}, charArray0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'.', '4', '4'}, charArray0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'.', '4', '4'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'.', '4', '4'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'.', '4', '4'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(0, token0.beginLine);
      assertEquals(109, token0.beginColumn);
      assertEquals(70, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(111, token0.endColumn);
      assertNotNull(token0);
      assertEquals(109, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(111, javaCharStream0.getEndColumn());
      assertEquals(111, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(".44", token0.toString());
      assertArrayEquals(new char[] {'.', '4', '4'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(111, token1.beginColumn);
      assertEquals(111, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(111, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(111, javaCharStream0.getEndColumn());
      assertEquals(111, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertArrayEquals(new char[] {'.', '4', '4'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(111, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(111, javaCharStream0.getEndColumn());
      assertEquals(111, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      assertArrayEquals(new char[] {'.', '4', '4'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int1 = charArrayReader0.read(charArray0);
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringReader stringReader0 = new StringReader("i=,y._");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 95, 68);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = javaCharStream0.prevCharIsCR;
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals('i', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(68, token0.endColumn);
      assertEquals(95, token0.endLine);
      assertEquals(87, token0.kind);
      assertEquals(68, token0.beginColumn);
      assertEquals(95, token0.beginLine);
      assertNotNull(token0);
      assertEquals(68, javaCharStream0.getBeginColumn());
      assertEquals(68, javaCharStream0.getEndColumn());
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(68, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals("=", token0.toString());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(69, token1.endColumn);
      assertEquals(69, token1.beginColumn);
      assertEquals(95, token1.endLine);
      assertEquals(84, token1.kind);
      assertEquals(95, token1.beginLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(69, javaCharStream0.getColumn());
      assertEquals(69, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(69, javaCharStream0.getEndColumn());
      assertEquals(",", token1.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(69, javaCharStream0.getColumn());
      assertEquals(69, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(69, javaCharStream0.getEndColumn());
      
      Token token2 = Token.newToken(84);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endColumn);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNull(token2.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(68, token0.endColumn);
      assertEquals(95, token0.endLine);
      assertEquals(87, token0.kind);
      assertEquals(68, token0.beginColumn);
      assertEquals(95, token0.beginLine);
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(69, javaCharStream0.getColumn());
      assertEquals(69, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(69, javaCharStream0.getEndColumn());
      assertEquals("=", token0.toString());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-3781));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -3781. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)12;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)39, (byte)12}, byteArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'c';
      charArray0[2] = 'a';
      charArray0[3] = 'W';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'3', 'c', 'a', 'W', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)12, (byte)12);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'3', 'c', 'a', 'W', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'3', 'c', 'a', 'W', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(12, token0.endLine);
      assertEquals(12, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(12, token0.beginColumn);
      assertEquals(12, token0.beginLine);
      assertNotNull(token0);
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(12, javaCharStream0.getBeginColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getEndColumn());
      assertEquals(12, javaCharStream0.getColumn());
      assertEquals("3", token0.toString());
      assertArrayEquals(new char[] {'3', 'c', 'a', 'W', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(15, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(13, token1.beginColumn);
      assertEquals(12, token1.beginLine);
      assertEquals(12, token1.endLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals("caW", token1.toString());
      assertArrayEquals(new char[] {'3', 'c', 'a', 'W', '\u0000', '\u0000'}, charArray0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("FR", locale1.getCountry());
      
      String string0 = javaCharStream0.GetImage();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertNotNull(string0);
      assertEquals(12, javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals(12, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(12, javaCharStream0.getBeginLine());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals("caW", string0);
      assertArrayEquals(new char[] {'3', 'c', 'a', 'W', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'3', 'c', 'a', 'W', '\u0000', '\u0000'}, charArray0);
      
      int int0 = charArrayReader1.read(charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(6, int0);
      assertArrayEquals(new char[] {'3', 'c', 'a', 'W', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 12, column 16.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)6;
      char[] charArray0 = new char[5];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      
      charArray0[0] = 'v';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      charArray0[1] = 'v';
      charArray0[2] = '4';
      charArray0[3] = ')';
      charArray0[4] = 'v';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'v', 'v', '4', ')', 'v'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)6, (-1959));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'v', 'v', '4', ')', 'v'}, charArray0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'v', 'v', '4', ')', 'v'}, charArray0);
      
      boolean boolean1 = charArrayReader0.ready();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'v', 'v', '4', ')', 'v'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'v', 'v', '4', ')', 'v'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'v', 'v', '4', ')', 'v'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(74, token0.kind);
      assertEquals((-1959), token0.beginColumn);
      assertEquals(6, token0.endLine);
      assertEquals((-1957), token0.endColumn);
      assertEquals(6, token0.beginLine);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token0);
      assertEquals("vv4", token0.toString());
      assertEquals(6, javaCharStream0.getBeginLine());
      assertEquals((-1957), javaCharStream0.getColumn());
      assertEquals((-1959), javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getEndLine());
      assertEquals((-1957), javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'v', 'v', '4', ')', 'v'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(6, token1.endLine);
      assertEquals(6, token1.beginLine);
      assertEquals((-1956), token1.beginColumn);
      assertEquals((-1956), token1.endColumn);
      assertEquals(78, token1.kind);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(")", token1.toString());
      assertEquals(6, javaCharStream0.getBeginLine());
      assertEquals((-1956), javaCharStream0.getColumn());
      assertEquals((-1956), javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getEndLine());
      assertEquals((-1956), javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'v', 'v', '4', ')', 'v'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.getBeginLine());
      assertEquals((-1956), javaCharStream0.getColumn());
      assertEquals((-1956), javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getEndLine());
      assertEquals((-1956), javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'v', 'v', '4', ')', 'v'}, charArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, false);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(mockPrintStream0);
      assertEquals(6, javaCharStream0.getBeginLine());
      assertEquals((-1956), javaCharStream0.getColumn());
      assertEquals((-1956), javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getEndLine());
      assertEquals((-1956), javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'v', 'v', '4', ')', 'v'}, charArray0);
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.getBeginLine());
      assertEquals((-1956), javaCharStream0.getColumn());
      assertEquals((-1956), javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getEndLine());
      assertEquals((-1956), javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'v', 'v', '4', ')', 'v'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(6);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 6. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^Ej,`qAQQRtvj<moPZu");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = '<';
      charArray0[2] = '<';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'l', '<', '<'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 329, (-2543));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'l', '<', '<'}, charArray0);
      
      boolean boolean3 = charArrayReader0.ready();
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertArrayEquals(new char[] {'l', '<', '<'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'l', '<', '<'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(329, token0.beginLine);
      assertEquals(329, token0.endLine);
      assertEquals((-2543), token0.endColumn);
      assertEquals((-2543), token0.beginColumn);
      assertNotNull(token0);
      assertEquals(329, javaCharStream0.getLine());
      assertEquals((-2543), javaCharStream0.getBeginColumn());
      assertEquals((-2543), javaCharStream0.getEndColumn());
      assertEquals(329, javaCharStream0.getBeginLine());
      assertEquals((-2543), javaCharStream0.getColumn());
      assertEquals(329, javaCharStream0.getEndLine());
      assertEquals("l", token0.toString());
      assertArrayEquals(new char[] {'l', '<', '<'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-2542), token1.beginColumn);
      assertEquals(329, token1.beginLine);
      assertEquals(109, token1.kind);
      assertEquals(329, token1.endLine);
      assertEquals((-2541), token1.endColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(329, javaCharStream0.getLine());
      assertEquals((-2541), javaCharStream0.getColumn());
      assertEquals(329, javaCharStream0.getBeginLine());
      assertEquals((-2542), javaCharStream0.getBeginColumn());
      assertEquals(329, javaCharStream0.getEndLine());
      assertEquals((-2541), javaCharStream0.getEndColumn());
      assertEquals("<<", token1.toString());
      assertArrayEquals(new char[] {'l', '<', '<'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-2543));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2543. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)16;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader(" column ");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = 'k';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'k', 'k', 'k', 'k'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      Token.GTToken token_GTToken1 = new Token.GTToken();
      assertEquals(0, token_GTToken1.endLine);
      assertEquals(0, token_GTToken1.kind);
      assertEquals(0, token_GTToken1.beginLine);
      assertEquals(0, token_GTToken1.beginColumn);
      assertEquals(0, token_GTToken1.endColumn);
      assertNotNull(token_GTToken1);
      assertFalse(token_GTToken1.equals((Object)token_GTToken0));
      assertNull(token_GTToken1.toString());
      
      Token token0 = Token.newToken(0);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'k', 'k', 'k', 'k'}, charArray0);
      
      javaCharStream0.ExpandBuff(false);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'k', 'k', 'k', 'k'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'k', 'k', 'k', 'k'}, charArray0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(4, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertNotNull(token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("kkkk", token1.toString());
      assertArrayEquals(new char[] {'k', 'k', 'k', 'k'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 2724);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 2724. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = '+';
      charArray0[2] = '+';
      charArray0[3] = '+';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'Q', '+', '+', '+'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'Q', '+', '+', '+'}, charArray0);
      
      int int0 = 1052;
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 1052, (-2784));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'Q', '+', '+', '+'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'Q', '+', '+', '+'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1052, token0.endLine);
      assertEquals((-2784), token0.endColumn);
      assertEquals((-2784), token0.beginColumn);
      assertEquals(1052, token0.beginLine);
      assertNotNull(token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals((-2784), javaCharStream0.getBeginColumn());
      assertEquals((-2784), javaCharStream0.getEndColumn());
      assertEquals((-2784), javaCharStream0.getColumn());
      assertEquals(1052, javaCharStream0.getEndLine());
      assertEquals(1052, javaCharStream0.getLine());
      assertEquals(1052, javaCharStream0.getBeginLine());
      assertEquals("Q", token0.toString());
      assertArrayEquals(new char[] {'Q', '+', '+', '+'}, charArray0);
      
      token0.endLine = 1052;
      assertEquals((-2784), javaCharStream0.getBeginColumn());
      assertEquals((-2784), javaCharStream0.getEndColumn());
      assertEquals((-2784), javaCharStream0.getColumn());
      assertEquals(1052, javaCharStream0.getEndLine());
      assertEquals(1052, javaCharStream0.getLine());
      assertEquals(1052, javaCharStream0.getBeginLine());
      assertEquals("Q", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(99, token1.kind);
      assertEquals((-2783), token1.beginColumn);
      assertEquals((-2782), token1.endColumn);
      assertEquals(1052, token1.beginLine);
      assertEquals(1052, token1.endLine);
      assertNotNull(token1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-2783), javaCharStream0.getBeginColumn());
      assertEquals((-2782), javaCharStream0.getEndColumn());
      assertEquals(1052, javaCharStream0.getEndLine());
      assertEquals((-2782), javaCharStream0.getColumn());
      assertEquals(1052, javaCharStream0.getLine());
      assertEquals(1052, javaCharStream0.getBeginLine());
      assertEquals("++", token1.toString());
      assertArrayEquals(new char[] {'Q', '+', '+', '+'}, charArray0);
      
      CharArrayReader charArrayReader2 = null;
      try {
        charArrayReader2 = new CharArrayReader((char[]) null, 20, 986);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      char[] charArray0 = new char[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      charArray0[0] = '+';
      charArray0[1] = 'g';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "catch");
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'+', 'g', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'g';
      charArray1[1] = '+';
      charArray1[2] = '+';
      charArray1[3] = '+';
      charArray1[4] = '|';
      charArray1[5] = '+';
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      assertNotNull(charArrayReader1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'g', '+', '+', '+', '|', '+'}, charArray1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 4235, 1140);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'g', '+', '+', '+', '|', '+'}, charArray1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'g', '+', '+', '+', '|', '+'}, charArray1);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      char[] charArray2 = new char[0];
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      
      int int0 = charArrayReader1.read(charArray2);
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, int0);
      assertArrayEquals(new char[] {}, charArray2);
      assertArrayEquals(new char[] {'g', '+', '+', '+', '|', '+'}, charArray1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(4235, token0.endLine);
      assertEquals(1140, token0.beginColumn);
      assertEquals(1140, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(4235, token0.beginLine);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals("g", token0.toString());
      assertEquals(4235, javaCharStream0.getLine());
      assertEquals(4235, javaCharStream0.getBeginLine());
      assertEquals(4235, javaCharStream0.getEndLine());
      assertEquals(1140, javaCharStream0.getColumn());
      assertEquals(1140, javaCharStream0.getEndColumn());
      assertEquals(1140, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'g', '+', '+', '+', '|', '+'}, charArray1);
      
      Token token1 = new Token();
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(4235, javaCharStream0.getLine());
      assertEquals(4235, javaCharStream0.getBeginLine());
      assertEquals(4235, javaCharStream0.getEndLine());
      assertEquals(1140, javaCharStream0.getColumn());
      assertEquals(1140, javaCharStream0.getEndColumn());
      assertEquals(1140, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'g', '+', '+', '+', '|', '+'}, charArray1);
      
      javaParserTokenManager1.setDebugStream(javaParserTokenManager0.debugStream);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(4235, javaCharStream0.getLine());
      assertEquals(4235, javaCharStream0.getBeginLine());
      assertEquals(4235, javaCharStream0.getEndLine());
      assertEquals(1140, javaCharStream0.getColumn());
      assertEquals(1140, javaCharStream0.getEndColumn());
      assertEquals(1140, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'g', '+', '+', '+', '|', '+'}, charArray1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(1141, token2.beginColumn);
      assertEquals(4235, token2.endLine);
      assertEquals(4235, token2.beginLine);
      assertEquals(1142, token2.endColumn);
      assertEquals(99, token2.kind);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token2);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals("++", token2.toString());
      assertEquals(4235, javaCharStream0.getLine());
      assertEquals(1142, javaCharStream0.getEndColumn());
      assertEquals(4235, javaCharStream0.getBeginLine());
      assertEquals(4235, javaCharStream0.getEndLine());
      assertEquals(1142, javaCharStream0.getColumn());
      assertEquals(1141, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'g', '+', '+', '+', '|', '+'}, charArray1);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray1, charArray2);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray1.equals((Object)charArray2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(4235, javaCharStream0.getLine());
      assertEquals(1142, javaCharStream0.getEndColumn());
      assertEquals(4235, javaCharStream0.getBeginLine());
      assertEquals(4235, javaCharStream0.getEndLine());
      assertEquals(1142, javaCharStream0.getColumn());
      assertEquals(1141, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'g', '+', '+', '+', '|', '+'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[3] = '7';
      charArray0[4] = 'b';
      charArray0[5] = '7';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'7', '7', '\u0000', '7', 'b', '7'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertEquals(55, int0);
      assertArrayEquals(new char[] {'7', '7', '\u0000', '7', 'b', '7'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'7', '7', '\u0000', '7', 'b', '7'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'7', '7', '\u0000', '7', 'b', '7'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'7', '7', '\u0000', '7', 'b', '7'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals("7", token0.toString());
      assertArrayEquals(new char[] {'7', '7', '\u0000', '7', 'b', '7'}, charArray0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Token token1 = new Token();
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      charArray0[1] = 'Z';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'%', 'Z'}, charArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'%', 'Z'}, charArray0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      char[] charArray1 = new char[4];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '%';
      charArray1[1] = '7';
      charArray1[2] = '%';
      charArray1[3] = 'M';
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray1);
      assertNotNull(charArrayReader2);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'%', '7', '%', 'M'}, charArray1);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader(charArrayReader2, 46);
      assertNotNull(lineNumberReader0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertArrayEquals(new char[] {'%', '7', '%', 'M'}, charArray1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(lineNumberReader0, 1004, 46);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'%', '7', '%', 'M'}, charArray1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader2);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'%', '7', '%', 'M'}, charArray1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'%', '7', '%', 'M'}, charArray1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertNotSame(charArrayReader2, charArrayReader1);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(108, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("%", token0.toString());
      assertArrayEquals(new char[] {'%', '7', '%', 'M'}, charArray1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertArrayEquals(new char[] {'%', '7', '%', 'M'}, charArray1);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1, 1119);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1119. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'K';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[4] = 'h';
      charArray0[5] = 'K';
      charArray0[6] = '4';
      charArray0[7] = 'K';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'K', '\u0000', '4', '4', 'h', 'K', '4', 'K'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-645), 4185);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'K', '\u0000', '4', '4', 'h', 'K', '4', 'K'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'K', '\u0000', '4', '4', 'h', 'K', '4', 'K'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-645), token0.endLine);
      assertEquals(4185, token0.beginColumn);
      assertEquals((-645), token0.beginLine);
      assertEquals(4185, token0.endColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertEquals((-645), javaCharStream0.getBeginLine());
      assertEquals((-645), javaCharStream0.getEndLine());
      assertEquals(4185, javaCharStream0.getEndColumn());
      assertEquals(4185, javaCharStream0.getBeginColumn());
      assertEquals((-645), javaCharStream0.getLine());
      assertEquals(4185, javaCharStream0.getColumn());
      assertEquals("K", token0.toString());
      assertArrayEquals(new char[] {'K', '\u0000', '4', '4', 'h', 'K', '4', 'K'}, charArray0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(mockPrintStream0);
      assertEquals((-645), javaCharStream0.getBeginLine());
      assertEquals((-645), javaCharStream0.getEndLine());
      assertEquals(4185, javaCharStream0.getEndColumn());
      assertEquals(4185, javaCharStream0.getBeginColumn());
      assertEquals((-645), javaCharStream0.getLine());
      assertEquals(4185, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'K', '\u0000', '4', '4', 'h', 'K', '4', 'K'}, charArray0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale1, locale0);
      assertSame(locale0, locale1);
      assertNotNull(locale1);
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      
      Locale locale2 = locale1.stripExtensions();
      assertSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertSame(locale2, locale1);
      assertSame(locale2, locale0);
      assertSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertNotNull(locale2);
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("FR", locale1.getCountry());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FRA", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("FR", locale2.getCountry());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("fr_FR", locale2.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      
      int int0 = charArrayReader0.read(charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'K', '\u0000', '4', '4', 'h', 'K', '4', 'K'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -645, column 4186.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}q*=Go@`_hSmgx8o");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("continue");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = stringReader1.markSupported();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(boolean0);
      
      int int0 = (-906);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-906), (-906));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 2);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 17.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)16;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = '-';
      charArray0[2] = 'B';
      charArray0[3] = '$';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'|', '-', 'B', '$'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'|', '-', 'B', '$'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'|', '-', 'B', '$'}, charArray0);
      
      CharArrayReader charArrayReader3 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader3);
      assertFalse(charArrayReader3.equals((Object)charArrayReader1));
      assertFalse(charArrayReader3.equals((Object)charArrayReader0));
      assertFalse(charArrayReader3.equals((Object)charArrayReader2));
      assertArrayEquals(new char[] {'|', '-', 'B', '$'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)16, (-2242));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader3));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'|', '-', 'B', '$'}, charArray0);
      
      CharArrayReader charArrayReader4 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader4);
      assertFalse(charArrayReader4.equals((Object)charArrayReader0));
      assertFalse(charArrayReader4.equals((Object)charArrayReader2));
      assertFalse(charArrayReader4.equals((Object)charArrayReader1));
      assertFalse(charArrayReader4.equals((Object)charArrayReader3));
      assertArrayEquals(new char[] {'|', '-', 'B', '$'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader4));
      assertFalse(charArrayReader0.equals((Object)charArrayReader3));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'|', '-', 'B', '$'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(charArrayReader0, charArrayReader4);
      assertNotSame(charArrayReader0, charArrayReader3);
      assertEquals(106, token0.kind);
      assertEquals((-2242), token0.beginColumn);
      assertEquals(16, token0.endLine);
      assertEquals((-2242), token0.endColumn);
      assertEquals(16, token0.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader4));
      assertFalse(charArrayReader0.equals((Object)charArrayReader3));
      assertEquals("|", token0.toString());
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals((-2242), javaCharStream0.getBeginColumn());
      assertEquals((-2242), javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals((-2242), javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'|', '-', 'B', '$'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(charArrayReader0, charArrayReader4);
      assertNotSame(charArrayReader0, charArrayReader3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader4));
      assertFalse(charArrayReader0.equals((Object)charArrayReader3));
      assertEquals(16, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getEndLine());
      assertEquals((-2242), javaCharStream0.getBeginColumn());
      assertEquals((-2242), javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getBeginLine());
      assertEquals((-2242), javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'|', '-', 'B', '$'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+9Y0E)G");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = 'S';
      charArray0[2] = '1';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'3', 'S', '1'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'3', 'S', '1'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, '1', (-1685));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1685), token0.beginColumn);
      assertEquals(49, token0.endLine);
      assertEquals(101, token0.kind);
      assertEquals((-1685), token0.endColumn);
      assertEquals(49, token0.beginLine);
      assertNotNull(token0);
      assertEquals((-1685), javaCharStream0.getBeginColumn());
      assertEquals((-1685), javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getBeginLine());
      assertEquals((-1685), javaCharStream0.getColumn());
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals("+", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1684), token1.endColumn);
      assertEquals(49, token1.endLine);
      assertEquals((-1684), token1.beginColumn);
      assertEquals(66, token1.kind);
      assertEquals(49, token1.beginLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals((-1684), javaCharStream0.getEndColumn());
      assertEquals((-1684), javaCharStream0.getColumn());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getBeginLine());
      assertEquals((-1684), javaCharStream0.getBeginColumn());
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals("9", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(49, token2.beginLine);
      assertEquals(49, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals((-1683), token2.beginColumn);
      assertEquals((-1681), token2.endColumn);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals((-1681), javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getBeginLine());
      assertEquals((-1681), javaCharStream0.getColumn());
      assertEquals((-1683), javaCharStream0.getBeginColumn());
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals("Y0E", token2.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 49. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'c';
      charArray0[2] = 'a';
      charArray0[3] = '3';
      charArray0[5] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'3', 'c', 'a', '3', '\u0000', 'a'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new char[] {'3', 'c', 'a', '3', '\u0000', 'a'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedReader0, 95, 95);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'3', 'c', 'a', '3', '\u0000', 'a'}, charArray0);
      
      boolean boolean2 = javaCharStream0.prevCharIsCR;
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'3', 'c', 'a', '3', '\u0000', 'a'}, charArray0);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'3', 'c', 'a', '3', '\u0000', 'a'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(95, token0.endLine);
      assertEquals(95, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(95, token0.beginColumn);
      assertEquals(95, token0.beginLine);
      assertNotNull(token0);
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(95, javaCharStream0.getEndColumn());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals("3", token0.toString());
      assertArrayEquals(new char[] {'3', 'c', 'a', '3', '\u0000', 'a'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(74, token1.kind);
      assertEquals(95, token1.beginLine);
      assertEquals(98, token1.endColumn);
      assertEquals(95, token1.endLine);
      assertEquals(96, token1.beginColumn);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals("ca3", token1.toString());
      assertEquals(95, javaCharStream0.getLine());
      assertEquals(95, javaCharStream0.getBeginLine());
      assertEquals(98, javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getEndLine());
      assertEquals(98, javaCharStream0.getColumn());
      assertArrayEquals(new char[] {'3', 'c', 'a', '3', '\u0000', 'a'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'3', 'c', 'a', '3', '\u0000', 'a'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 95, column 99.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[0] = (byte)68;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-116);
      char[] charArray0 = new char[6];
      charArray0[0] = 'S';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[1] = '!';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "catch");
      assertFalse(boolean0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'S', '!', 'U', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'S', '!', 'U', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)2, 1140);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'S', '!', 'U', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'S', '!', 'U', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(2, token0.beginLine);
      assertEquals(2, token0.endLine);
      assertEquals(1140, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1140, token0.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals("S", token0.toString());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(1140, javaCharStream0.getColumn());
      assertEquals(1140, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(1140, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'S', '!', 'U', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      javaParserTokenManager0.image = stringBuffer0;
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", javaParserTokenManager0.image.toString());
      assertEquals(0, javaParserTokenManager0.image.length());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(1140, javaCharStream0.getColumn());
      assertEquals(1140, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(1140, javaCharStream0.getEndColumn());
      
      javaCharStream0.bufline = javaParserTokenManager0.jjnewLexState;
      assertEquals(1140, javaCharStream0.getColumn());
      assertEquals(1140, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(1140, javaCharStream0.getEndColumn());
      
      Token token1 = new Token();
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(89, token2.kind);
      assertEquals(1141, token2.beginColumn);
      assertEquals(1141, token2.endColumn);
      assertEquals((-1), token2.beginLine);
      assertEquals((-1), token2.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals("!", token2.toString());
      assertEquals(1141, javaCharStream0.getColumn());
      assertEquals(1141, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals(1141, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'S', '!', 'U', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-3279));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -3279. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '{';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f'8%%S*fOJK2ff");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'{', 'a', 'a', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'{', 'a', 'a', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (-2958), 88);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'{', 'a', 'a', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      javaCharStream0.ReInit((Reader) charArrayReader0, 88, (-2958));
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'{', 'a', 'a', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'{', 'a', 'a', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'{', 'a', 'a', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(88, token0.beginLine);
      assertEquals(79, token0.kind);
      assertEquals(88, token0.endLine);
      assertEquals((-2958), token0.endColumn);
      assertEquals((-2958), token0.beginColumn);
      assertNotNull(token0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals((-2958), javaCharStream0.getEndColumn());
      assertEquals((-2958), javaCharStream0.getColumn());
      assertEquals(88, javaCharStream0.getEndLine());
      assertEquals((-2958), javaCharStream0.getBeginColumn());
      assertEquals(88, javaCharStream0.getLine());
      assertEquals(88, javaCharStream0.getBeginLine());
      assertEquals("{", token0.toString());
      assertArrayEquals(new char[] {'{', 'a', 'a', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(88, token1.endLine);
      assertEquals((-2956), token1.endColumn);
      assertEquals(88, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals((-2957), token1.beginColumn);
      assertNotNull(token1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-2957), javaCharStream0.getBeginColumn());
      assertEquals((-2956), javaCharStream0.getEndColumn());
      assertEquals((-2956), javaCharStream0.getColumn());
      assertEquals(88, javaCharStream0.getEndLine());
      assertEquals(88, javaCharStream0.getLine());
      assertEquals(88, javaCharStream0.getBeginLine());
      assertEquals("aa", token1.toString());
      assertArrayEquals(new char[] {'{', 'a', 'a', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(88, token1.endLine);
      assertEquals((-2956), token1.endColumn);
      assertEquals(88, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals((-2957), token1.beginColumn);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-2957), javaCharStream0.getBeginColumn());
      assertEquals((-2956), javaCharStream0.getEndColumn());
      assertEquals((-2956), javaCharStream0.getColumn());
      assertEquals(88, javaCharStream0.getEndLine());
      assertEquals(88, javaCharStream0.getLine());
      assertEquals(88, javaCharStream0.getBeginLine());
      assertEquals("aa", token1.toString());
      assertArrayEquals(new char[] {'{', 'a', 'a', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("aa");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals((-2957), javaCharStream0.getBeginColumn());
      assertEquals((-2956), javaCharStream0.getEndColumn());
      assertEquals((-2956), javaCharStream0.getColumn());
      assertEquals(88, javaCharStream0.getEndLine());
      assertEquals(88, javaCharStream0.getLine());
      assertEquals(88, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'{', 'a', 'a', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-2958));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2958. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-9);
      byteArray0[3] = (byte) (-9);
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[4] = 'd';
      charArray0[7] = 'j';
      charArray0[7] = 'd';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'0', 'd', 'd', '\u0000', 'd', '\u0000', '\u0000', 'd'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'0', 'd', 'd', '\u0000', 'd', '\u0000', '\u0000', 'd'}, charArray0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\\");
      assertFalse(boolean0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      assertNotNull(pushbackReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'0', 'd', 'd', '\u0000', 'd', '\u0000', '\u0000', 'd'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'0', 'd', 'd', '\u0000', 'd', '\u0000', '\u0000', 'd'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'0', 'd', 'd', '\u0000', 'd', '\u0000', '\u0000', 'd'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(70, token0.kind);
      assertEquals(2, token0.endColumn);
      assertNotNull(token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("0d", token0.toString());
      assertArrayEquals(new char[] {'0', 'd', 'd', '\u0000', 'd', '\u0000', '\u0000', 'd'}, charArray0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(70, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("0d", token1.toString());
      assertArrayEquals(new char[] {'0', 'd', 'd', '\u0000', 'd', '\u0000', '\u0000', 'd'}, charArray0);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertNotSame(token1, token0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(70, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("0d", token1.toString());
      assertArrayEquals(new char[] {'0', 'd', 'd', '\u0000', 'd', '\u0000', '\u0000', 'd'}, charArray0);
      
      token1.beginLine = 2;
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("0d", token1.toString());
      
      BufferedOutputStream bufferedOutputStream0 = null;
      try {
        bufferedOutputStream0 = new BufferedOutputStream(javaParserTokenManager0.debugStream, (-1051));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'M'}, charArray0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'c';
      charArray1[1] = '3';
      charArray1[3] = '^';
      charArray1[4] = 'z';
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray1);
      assertNotNull(charArrayReader1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'c', '3', '\u0000', '^', 'z'}, charArray1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, (-911), 1140);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'c', '3', '\u0000', '^', 'z'}, charArray1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'c', '3', '\u0000', '^', 'z'}, charArray1);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertEquals((-911), token0.endLine);
      assertEquals((-911), token0.beginLine);
      assertEquals(1140, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1141, token0.endColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals("c3", token0.toString());
      assertEquals(1141, javaCharStream0.getColumn());
      assertEquals(1140, javaCharStream0.getBeginColumn());
      assertEquals(1141, javaCharStream0.getEndColumn());
      assertEquals((-911), javaCharStream0.getEndLine());
      assertEquals((-911), javaCharStream0.getLine());
      assertEquals((-911), javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'c', '3', '\u0000', '^', 'z'}, charArray1);
      
      Token token1 = new Token();
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -911, column 1142.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      charArray0[1] = 'c';
      charArray0[2] = 'a';
      charArray0[3] = 'Q';
      charArray0[4] = '*';
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'*', 'c', 'a', 'Q', '*', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 26, 14);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'*', 'c', 'a', 'Q', '*', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'*', 'c', 'a', 'Q', '*', '\u0000'}, charArray0);
      
      int int0 = charArrayReader0.read();
      assertEquals(42, int0);
      assertArrayEquals(new char[] {'*', 'c', 'a', 'Q', '*', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(16, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(26, token0.beginLine);
      assertEquals(14, token0.beginColumn);
      assertEquals(26, token0.endLine);
      assertNotNull(token0);
      assertEquals(26, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getColumn());
      assertEquals(14, javaCharStream0.getBeginColumn());
      assertEquals(26, javaCharStream0.getBeginLine());
      assertEquals(26, javaCharStream0.getEndLine());
      assertEquals("caQ", token0.toString());
      assertArrayEquals(new char[] {'*', 'c', 'a', 'Q', '*', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(26, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getColumn());
      assertEquals(14, javaCharStream0.getBeginColumn());
      assertEquals(26, javaCharStream0.getBeginLine());
      assertEquals(26, javaCharStream0.getEndLine());
      assertArrayEquals(new char[] {'*', 'c', 'a', 'Q', '*', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.ReInit(javaCharStream0, 42);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 42. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader("!=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-4292), 21);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(22, token0.endColumn);
      assertEquals(96, token0.kind);
      assertEquals((-4292), token0.beginLine);
      assertEquals(21, token0.beginColumn);
      assertEquals((-4292), token0.endLine);
      assertNotNull(token0);
      assertEquals((-4292), javaCharStream0.getLine());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals((-4292), javaCharStream0.getBeginLine());
      assertEquals(21, javaCharStream0.getBeginColumn());
      assertEquals((-4292), javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals("!=", token0.toString());
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 122);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 122. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}q*=Go@`_hSmgx8o");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("#|qb57LA}LOU\"S");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      stringReader1.reset();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      stringReader1.reset();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char[] charArray0 = new char[5];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#|qb57LA}LOU\"S");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-4643), 63);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.curLexState = 42;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-4643), token0.endLine);
      assertEquals(63, token0.endColumn);
      assertEquals(63, token0.beginColumn);
      assertEquals((-4643), token0.beginLine);
      assertEquals(0, token0.kind);
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-4643), javaCharStream0.getLine());
      assertEquals((-4643), javaCharStream0.getBeginLine());
      assertEquals(63, javaCharStream0.getEndColumn());
      assertEquals(63, javaCharStream0.getBeginColumn());
      assertEquals(63, javaCharStream0.getColumn());
      assertEquals((-4643), javaCharStream0.getEndLine());
      assertEquals("", token0.toString());
      
      int int0 = 99;
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 99);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 99. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      charArray0[1] = 'c';
      charArray0[2] = 'a';
      charArray0[3] = 'Q';
      charArray0[4] = 'a';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)21;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'*', 'c', 'a', 'Q', 'a', '\u0000'}, charArray0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader0);
      assertNotNull(pushbackReader0);
      assertArrayEquals(new char[] {'*', 'c', 'a', 'Q', 'a', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte)21, 49);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'*', 'c', 'a', 'Q', 'a', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'*', 'c', 'a', 'Q', 'a', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(21, token0.beginLine);
      assertEquals(49, token0.endColumn);
      assertEquals(21, token0.endLine);
      assertEquals(49, token0.beginColumn);
      assertEquals(103, token0.kind);
      assertNotNull(token0);
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(21, javaCharStream0.getEndLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getLine());
      assertEquals(21, javaCharStream0.getBeginLine());
      assertEquals("*", token0.toString());
      assertArrayEquals(new char[] {'*', 'c', 'a', 'Q', 'a', '\u0000'}, charArray0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(21, token0.beginLine);
      assertEquals(49, token0.endColumn);
      assertEquals(21, token0.endLine);
      assertEquals(49, token0.beginColumn);
      assertEquals(103, token0.kind);
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(21, javaCharStream0.getEndLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getLine());
      assertEquals(21, javaCharStream0.getBeginLine());
      assertEquals("*", token0.toString());
      assertArrayEquals(new char[] {'*', 'c', 'a', 'Q', 'a', '\u0000'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(21, javaCharStream0.getEndLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getLine());
      assertEquals(21, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'*', 'c', 'a', 'Q', 'a', '\u0000'}, charArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(21, token0.beginLine);
      assertEquals(49, token0.endColumn);
      assertEquals(21, token0.endLine);
      assertEquals(49, token0.beginColumn);
      assertEquals(103, token0.kind);
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(21, javaCharStream0.getEndLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getLine());
      assertEquals(21, javaCharStream0.getBeginLine());
      assertEquals("*", token0.toString());
      assertArrayEquals(new char[] {'*', 'c', 'a', 'Q', 'a', '\u0000'}, charArray0);
      
      MockFile mockFile0 = new MockFile("*", "com.soops.CEN4010.JMCA.JParser.JavaParserConstants");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canExecute());
      assertEquals("com.soops.CEN4010.JMCA.JParser.JavaParserConstants", mockFile0.getName());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca/*", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca/*/com.soops.CEN4010.JMCA.JParser.JavaParserConstants", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("com.soops.CEN4010.JMCA.JParser.JavaParserConstants", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca/*", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca/*/com.soops.CEN4010.JMCA.JParser.JavaParserConstants", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("com.soops.CEN4010.JMCA.JParser.JavaParserConstants", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca/*", mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/10_jmca/*/com.soops.CEN4010.JMCA.JParser.JavaParserConstants", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(21, javaCharStream0.getEndLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getLine());
      assertEquals(21, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'*', 'c', 'a', 'Q', 'a', '\u0000'}, charArray0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(21, token0.beginLine);
      assertEquals(49, token0.endColumn);
      assertEquals(21, token0.endLine);
      assertEquals(49, token0.beginColumn);
      assertEquals(103, token0.kind);
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(21, javaCharStream0.getEndLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getLine());
      assertEquals(21, javaCharStream0.getBeginLine());
      assertEquals("*", token0.toString());
      assertArrayEquals(new char[] {'*', 'c', 'a', 'Q', 'a', '\u0000'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      Token token1 = token_GTToken0.specialToken;
      assertNull(token1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '-';
      charArray0[1] = 'I';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'-', 'I', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'-', 'I', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      assertNotNull(bufferedReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'-', 'I', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = 95;
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader1, 95, 95);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'-', 'I', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader1, 105, 1934, 105);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new char[] {'-', 'I', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = javaCharStream1.prevCharIsCR;
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'-', 'I', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new char[] {'-', 'I', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1934, token0.endColumn);
      assertEquals(1934, token0.beginColumn);
      assertEquals(105, token0.endLine);
      assertEquals(105, token0.beginLine);
      assertEquals(102, token0.kind);
      assertNotNull(token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(1934, javaCharStream1.getBeginColumn());
      assertEquals(1934, javaCharStream1.getEndColumn());
      assertEquals(105, javaCharStream1.getBeginLine());
      assertEquals(105, javaCharStream1.getLine());
      assertEquals(1934, javaCharStream1.getColumn());
      assertEquals(105, javaCharStream1.getEndLine());
      assertEquals("-", token0.toString());
      assertArrayEquals(new char[] {'-', 'I', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1935, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(105, token1.beginLine);
      assertEquals(105, token1.endLine);
      assertEquals(1935, token1.endColumn);
      assertNotNull(token1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1935, javaCharStream1.getEndColumn());
      assertEquals(105, javaCharStream1.getBeginLine());
      assertEquals(1935, javaCharStream1.getBeginColumn());
      assertEquals(105, javaCharStream1.getLine());
      assertEquals(1935, javaCharStream1.getColumn());
      assertEquals(105, javaCharStream1.getEndLine());
      assertEquals("I", token1.toString());
      assertArrayEquals(new char[] {'-', 'I', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'-', 'I', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 105);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      InputStreamReader inputStreamReader0 = null;
      try {
        inputStreamReader0 = new InputStreamReader(pipedInputStream0, "W/");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'c';
      charArray0[2] = 'P';
      charArray0[3] = 'M';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4Xo6");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'3', 'c', 'P', 'M', '\u0000', '\u0000'}, charArray0);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertNotNull(fileSystemHandling1);
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'3', 'c', 'P', 'M', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 64, 23);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'3', 'c', 'P', 'M', '\u0000', '\u0000'}, charArray0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'3', 'c', 'P', 'M', '\u0000', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(23, token0.endColumn);
      assertEquals(64, token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals(23, token0.beginColumn);
      assertEquals(64, token0.endLine);
      assertNotNull(token0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(23, javaCharStream0.getColumn());
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals(64, javaCharStream0.getEndLine());
      assertEquals(64, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getBeginColumn());
      assertEquals(64, javaCharStream0.getLine());
      assertEquals("3", token0.toString());
      assertArrayEquals(new char[] {'3', 'c', 'P', 'M', '\u0000', '\u0000'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertEquals(74, token1.kind);
      assertEquals(26, token1.endColumn);
      assertEquals(24, token1.beginColumn);
      assertEquals(64, token1.beginLine);
      assertEquals(64, token1.endLine);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals("cPM", token1.toString());
      assertEquals(26, javaCharStream0.getEndColumn());
      assertEquals(64, javaCharStream0.getEndLine());
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals(64, javaCharStream0.getBeginLine());
      assertEquals(26, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getLine());
      assertArrayEquals(new char[] {'3', 'c', 'P', 'M', '\u0000', '\u0000'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'3', 'c', 'P', 'M', '\u0000', '\u0000'}, charArray0);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader1);
      assertNotNull(pushbackReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'3', 'c', 'P', 'M', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(pushbackReader0, 35, 11);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader2));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new char[] {'3', 'c', 'P', 'M', '\u0000', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(26, javaCharStream0.getEndColumn());
      assertEquals(64, javaCharStream0.getEndLine());
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals(64, javaCharStream0.getBeginLine());
      assertEquals(26, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getLine());
      assertArrayEquals(new char[] {'3', 'c', 'P', 'M', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 64, column 27.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'c';
      charArray0[2] = 'a';
      charArray0[3] = 'L';
      charArray0[4] = 'a';
      charArray0[5] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'3', 'c', 'a', 'L', 'a', 'a'}, charArray0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'3', 'c', 'a', 'L', 'a', 'a'}, charArray0);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'3', 'c', 'a', 'L', 'a', 'a'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'3', 'c', 'a', 'L', 'a', 'a'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'3', 'c', 'a', 'L', 'a', 'a'}, charArray0);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("3", token0.toString());
      assertArrayEquals(new char[] {'3', 'c', 'a', 'L', 'a', 'a'}, charArray0);
      
      javaParserTokenManager0.ReInit(javaCharStream0, 1);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'3', 'c', 'a', 'L', 'a', 'a'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader(charArrayReader0);
      assertNotNull(bufferedReader0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertArrayEquals(new char[] {'3', 'c', 'a', 'L', 'a', 'a'}, charArray0);
      
      CharArrayReader charArrayReader2 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'3', 'c', 'a', 'L', 'a', 'a'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader2, 307, 66);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new char[] {'3', 'c', 'a', 'L', 'a', 'a'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager2);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new char[] {'3', 'c', 'a', 'L', 'a', 'a'}, charArray0);
      
      charArrayReader2.reset();
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertArrayEquals(new char[] {'3', 'c', 'a', 'L', 'a', 'a'}, charArray0);
      
      long long0 = charArrayReader2.skip((-228L));
      assertNotSame(charArrayReader2, charArrayReader1);
      assertNotSame(charArrayReader2, charArrayReader0);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'3', 'c', 'a', 'L', 'a', 'a'}, charArray0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(token1, token0);
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertEquals(2, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(6, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertEquals("caLaa", token1.toString());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'3', 'c', 'a', 'L', 'a', 'a'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager3);
      assertFalse(charArrayReader2.equals((Object)charArrayReader1));
      assertFalse(charArrayReader2.equals((Object)charArrayReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new char[] {'3', 'c', 'a', 'L', 'a', 'a'}, charArray0);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertNotSame(charArrayReader0, charArrayReader2);
      assertNotSame(charArrayReader0, charArrayReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager3);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(charArrayReader0.equals((Object)charArrayReader2));
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'3', 'c', 'a', 'L', 'a', 'a'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L\"Z L^");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1575, (byte)18);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 109, 1512);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(109, token0.endLine);
      assertEquals(1512, token0.beginColumn);
      assertEquals(109, token0.beginLine);
      assertEquals(1512, token0.endColumn);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(109, javaCharStream1.getLine());
      assertEquals(109, javaCharStream1.getEndLine());
      assertEquals(1512, javaCharStream1.getEndColumn());
      assertEquals(109, javaCharStream1.getBeginLine());
      assertEquals(1512, javaCharStream1.getColumn());
      assertEquals(1512, javaCharStream1.getBeginColumn());
      assertEquals("L", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 109, column 1518.  Encountered: <EOF> after : \"\\\"Z L^\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"w4");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      char[] charArray0 = new char[5];
      charArray0[0] = '0';
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'0', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 73, '0');
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.jjnewStateCnt = (-1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 73, column 51.  Encountered: <EOF> after : \"\\\"w4\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-8);
      byteArray0[5] = (byte)29;
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)38, (byte) (-8), (byte)0, (byte)0, (byte)0, (byte)29}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)6, (-14), 42);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)38, (byte) (-8), (byte)0, (byte)0, (byte)0, (byte)29}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)38, (byte) (-8), (byte)0, (byte)0, (byte)0, (byte)29}, byteArray0);
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new byte[] {(byte)38, (byte) (-8), (byte)0, (byte)0, (byte)0, (byte)29}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, token0.endLine);
      assertEquals(6, token0.beginLine);
      assertEquals(105, token0.kind);
      assertEquals((-14), token0.endColumn);
      assertEquals((-14), token0.beginColumn);
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(6, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getLine());
      assertEquals((-14), javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndLine());
      assertEquals((-14), javaCharStream0.getBeginColumn());
      assertEquals((-14), javaCharStream0.getEndColumn());
      assertEquals("&", token0.toString());
      assertArrayEquals(new byte[] {(byte)38, (byte) (-8), (byte)0, (byte)0, (byte)0, (byte)29}, byteArray0);
      
      Token token1 = new Token();
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      
      Token token2 = new Token();
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNull(token2.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 113);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 113. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)42;
      byteArray0[3] = (byte)0;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)42, (byte)0, (byte)0}, byteArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '\u0083';
      charArray0[4] = ';';
      charArray0[6] = '4';
      charArray0[8] = ';';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'4', '4', '4', '\u0083', ';', '\u0000', '4', '\u0000', ';'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 1052, ';');
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'4', '4', '4', '\u0083', ';', '\u0000', '4', '\u0000', ';'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'4', '4', '4', '\u0083', ';', '\u0000', '4', '\u0000', ';'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1052, token0.endLine);
      assertEquals(1052, token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals(61, token0.endColumn);
      assertEquals(59, token0.beginColumn);
      assertNotNull(token0);
      assertEquals(1052, javaCharStream0.getBeginLine());
      assertEquals(1052, javaCharStream0.getLine());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals(1052, javaCharStream0.getEndLine());
      assertEquals(59, javaCharStream0.getBeginColumn());
      assertEquals("444", token0.toString());
      assertArrayEquals(new char[] {'4', '4', '4', '\u0083', ';', '\u0000', '4', '\u0000', ';'}, charArray0);
      
      CharArrayReader charArrayReader1 = null;
      try {
        charArrayReader1 = new CharArrayReader(charArray0, 1052, 1052);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      char[] charArray0 = new char[12];
      charArray0[0] = '\'';
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lh!");
      assertFalse(boolean0);
      
      charArray0[1] = '&';
      charArray0[2] = '\'';
      charArray0[3] = 'Z';
      charArray0[4] = '&';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lh!");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      PushbackReader pushbackReader0 = new PushbackReader(charArrayReader1);
      assertNotNull(pushbackReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "public");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      PushbackReader pushbackReader1 = new PushbackReader(pushbackReader0);
      assertNotNull(pushbackReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(pushbackReader1.equals((Object)pushbackReader0));
      
      BufferedReader bufferedReader0 = new BufferedReader(pushbackReader1);
      assertNotNull(bufferedReader0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(pushbackReader0.equals((Object)pushbackReader1));
      assertFalse(pushbackReader1.equals((Object)pushbackReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(bufferedReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(pushbackReader0.equals((Object)pushbackReader1));
      assertFalse(pushbackReader1.equals((Object)pushbackReader0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(pushbackReader0.equals((Object)pushbackReader1));
      assertFalse(pushbackReader1.equals((Object)pushbackReader0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(pushbackReader0, pushbackReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(72, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token0);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(pushbackReader0.equals((Object)pushbackReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals("'&'", token0.toString());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertNotSame(charArrayReader1, charArrayReader0);
      assertNotSame(pushbackReader0, pushbackReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(72, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      assertFalse(pushbackReader0.equals((Object)pushbackReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals("'&'", token1.toString());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = 'k';
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      charArray0[3] = '.';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'.', '.', 'k', '.'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 7, (-1426));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'.', '.', 'k', '.'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'.', '.', 'k', '.'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1426), token0.beginColumn);
      assertEquals((-1426), token0.endColumn);
      assertEquals(7, token0.beginLine);
      assertEquals(85, token0.kind);
      assertEquals(7, token0.endLine);
      assertNotNull(token0);
      assertEquals(7, javaCharStream0.getLine());
      assertEquals((-1426), javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getEndLine());
      assertEquals((-1426), javaCharStream0.getColumn());
      assertEquals((-1426), javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getBeginLine());
      assertEquals(".", token0.toString());
      assertArrayEquals(new char[] {'.', '.', 'k', '.'}, charArray0);
      
      int int0 = 45;
      CharArrayReader charArrayReader1 = null;
      try {
        charArrayReader1 = new CharArrayReader(charArray0, (-151), 45);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = 'a';
      charArray0[3] = 'Q';
      charArray0[4] = 'a';
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-110);
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte) (-1);
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'*', '*', 'a', 'Q', 'a', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 26, 14);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'*', '*', 'a', 'Q', 'a', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'*', '*', 'a', 'Q', 'a', '\u0000'}, charArray0);
      
      long long0 = charArrayReader0.skip(0L);
      assertEquals(0L, long0);
      assertArrayEquals(new char[] {'*', '*', 'a', 'Q', 'a', '\u0000'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(26, token0.beginLine);
      assertEquals(26, token0.endLine);
      assertEquals(103, token0.kind);
      assertEquals(14, token0.beginColumn);
      assertEquals(14, token0.endColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token0);
      assertEquals("*", token0.toString());
      assertEquals(26, javaCharStream0.getEndLine());
      assertEquals(14, javaCharStream0.getBeginColumn());
      assertEquals(14, javaCharStream0.getColumn());
      assertEquals(26, javaCharStream0.getBeginLine());
      assertEquals(26, javaCharStream0.getLine());
      assertEquals(14, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'*', '*', 'a', 'Q', 'a', '\u0000'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(26, javaCharStream0.getEndLine());
      assertEquals(14, javaCharStream0.getBeginColumn());
      assertEquals(14, javaCharStream0.getColumn());
      assertEquals(26, javaCharStream0.getBeginLine());
      assertEquals(26, javaCharStream0.getLine());
      assertEquals(14, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'*', '*', 'a', 'Q', 'a', '\u0000'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(26, javaCharStream0.getEndLine());
      assertEquals(14, javaCharStream0.getBeginColumn());
      assertEquals(14, javaCharStream0.getColumn());
      assertEquals(26, javaCharStream0.getBeginLine());
      assertEquals(26, javaCharStream0.getLine());
      assertEquals(14, javaCharStream0.getEndColumn());
      assertArrayEquals(new char[] {'*', '*', 'a', 'Q', 'a', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      byte byte0 = (byte) (-116);
      char[] charArray0 = new char[8];
      charArray0[0] = '4';
      charArray0[1] = '.';
      charArray0[2] = 'Z';
      charArray0[5] = '4';
      charArray0[6] = '4';
      charArray0[7] = '';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'4', '.', 'Z', '\u0000', '\u0000', '4', '4', ''}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, (byte) (-116), (byte) (-116));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'4', '.', 'Z', '\u0000', '\u0000', '4', '4', ''}, charArray0);
      
      charArrayReader0.reset();
      assertArrayEquals(new char[] {'4', '.', 'Z', '\u0000', '\u0000', '4', '4', ''}, charArray0);
      
      boolean boolean0 = javaCharStream0.prevCharIsCR;
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'4', '.', 'Z', '\u0000', '\u0000', '4', '4', ''}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'4', '.', 'Z', '\u0000', '\u0000', '4', '4', ''}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'4', '.', 'Z', '\u0000', '\u0000', '4', '4', ''}, charArray0);
      
      javaParserTokenManager0.jjround = (-1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-116), token0.endLine);
      assertEquals((-116), token0.beginLine);
      assertEquals((-116), token0.beginColumn);
      assertEquals((-116), token0.endColumn);
      assertEquals(66, token0.kind);
      assertNotNull(token0);
      assertEquals((-116), javaCharStream0.getBeginLine());
      assertEquals((-116), javaCharStream0.getBeginColumn());
      assertEquals((-116), javaCharStream0.getEndColumn());
      assertEquals((-116), javaCharStream0.getLine());
      assertEquals((-116), javaCharStream0.getEndLine());
      assertEquals((-116), javaCharStream0.getColumn());
      assertEquals("4", token0.toString());
      assertArrayEquals(new char[] {'4', '.', 'Z', '\u0000', '\u0000', '4', '4', ''}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-116));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -116. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'J';
      charArray0[1] = '0';
      charArray0[2] = 'W';
      charArray0[3] = 'W';
      charArray0[4] = 'D';
      charArray0[5] = 'D';
      charArray0[6] = 'W';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'J', '0', 'W', 'W', 'D', 'D', 'W'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'J', '0', 'W', 'W', 'D', 'D', 'W'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertArrayEquals(new char[] {'J', '0', 'W', 'W', 'D', 'D', 'W'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(7, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals("J0WWDDW", token0.toString());
      assertArrayEquals(new char[] {'J', '0', 'W', 'W', 'D', 'D', 'W'}, charArray0);
      
      token0.beginColumn = 2150;
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals("J0WWDDW", token0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotSame(token1, token0);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals("J0WWDDW", token1.toString());
      assertArrayEquals(new char[] {'J', '0', 'W', 'W', 'D', 'D', 'W'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 7. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = JavaCharStream.staticFlag;
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "enum");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(charArrayReader0, 118, 4036);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)2;
      byteArray0[0] = (byte)12;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)12, (byte)36, (byte)2, (byte)0, (byte)36, (byte) (-5)}, byteArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)12, (byte)36, (byte)2, (byte)0, (byte)36, (byte) (-5)}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new byte[] {(byte)12, (byte)36, (byte)2, (byte)0, (byte)36, (byte) (-5)}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals("$", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertArrayEquals(new byte[] {(byte)12, (byte)36, (byte)2, (byte)0, (byte)36, (byte) (-5)}, byteArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals("$", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertArrayEquals(new byte[] {(byte)12, (byte)36, (byte)2, (byte)0, (byte)36, (byte) (-5)}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, (byte)49);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 49. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("hV-h,1uJgl0 B~");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringReader stringReader1 = new StringReader("hV-h,1uJgl0 B~");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      stringReader1.reset();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean1 = stringReader1.ready();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'O';
      charArray0[1] = 'n';
      charArray0[2] = '<';
      charArray0[3] = 'R';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'O', 'n', '<', 'R'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(charArrayReader0, 4261, 50);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new char[] {'O', 'n', '<', 'R'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new char[] {'O', 'n', '<', 'R'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertArrayEquals(new char[] {'O', 'n', '<', 'R'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(51, token0.endColumn);
      assertEquals(4261, token0.beginLine);
      assertEquals(50, token0.beginColumn);
      assertEquals(4261, token0.endLine);
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(4261, javaCharStream1.getEndLine());
      assertEquals(4261, javaCharStream1.getLine());
      assertEquals(4261, javaCharStream1.getBeginLine());
      assertEquals(51, javaCharStream1.getColumn());
      assertEquals(51, javaCharStream1.getEndColumn());
      assertEquals(50, javaCharStream1.getBeginColumn());
      assertEquals("On", token0.toString());
      assertArrayEquals(new char[] {'O', 'n', '<', 'R'}, charArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(4261, javaCharStream1.getEndLine());
      assertEquals(4261, javaCharStream1.getLine());
      assertEquals(4261, javaCharStream1.getBeginLine());
      assertEquals(51, javaCharStream1.getColumn());
      assertEquals(51, javaCharStream1.getEndColumn());
      assertEquals(50, javaCharStream1.getBeginColumn());
      assertArrayEquals(new char[] {'O', 'n', '<', 'R'}, charArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }
}
