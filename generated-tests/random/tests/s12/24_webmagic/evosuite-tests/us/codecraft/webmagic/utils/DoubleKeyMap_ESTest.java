/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 20:24:30 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<HashMap<String, Integer>, Map<Map<Integer, Object>, Object>> hashMap0 = new HashMap<HashMap<String, Integer>, Map<Map<Integer, Object>, Object>>();
      DoubleKeyMap<HashMap<String, Integer>, Map<Integer, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, Map<Integer, Object>, Object>(hashMap0);
      HashMap<HashMap<Object, String>, Map<Object, Object>> hashMap1 = new HashMap<HashMap<Object, String>, Map<Object, Object>>();
      DoubleKeyMap<HashMap<Object, String>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, String>, Object, Object>(hashMap1);
      HashMap<Object, String> hashMap2 = new HashMap<Object, String>();
      Object object0 = doubleKeyMap1.remove(hashMap2, (Object) doubleKeyMap0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<String, HashMap<Object, Object>, Integer> doubleKeyMap0 = new DoubleKeyMap<String, HashMap<Object, Object>, Integer>();
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, HashMap<Integer, Object>, HashMap<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<Integer, HashMap<Integer, Object>, HashMap<Object, Object>>(class0);
      Map<Object, Map<String, Object>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, String, Object> doubleKeyMap2 = new DoubleKeyMap<Object, String, Object>(map0);
      Map<String, Map<Object, String>> map1 = doubleKeyMap2.newMap();
      DoubleKeyMap<String, Object, String> doubleKeyMap3 = new DoubleKeyMap<String, Object, String>(map1, class0);
      String string0 = doubleKeyMap3.put("", (Object) doubleKeyMap0, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>();
      Map<Object, Map<String, HashMap<Object, Object>>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, String, HashMap<Object, Object>> doubleKeyMap1 = new DoubleKeyMap<Object, String, HashMap<Object, Object>>(map0);
      HashMap<Object, Object> hashMap0 = doubleKeyMap1.get((Object) doubleKeyMap0, "mVh?#0");
      assertNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Integer>(class0);
      Map<Integer, Integer> map0 = doubleKeyMap0.get((String) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<Integer, Map<Integer, Map<Object, String>>> hashMap0 = new HashMap<Integer, Map<Integer, Map<Object, String>>>();
      DoubleKeyMap<Integer, Integer, Map<Object, String>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Map<Object, String>>(hashMap0);
      Integer integer0 = new Integer(5827);
      HashMap<Integer, Map<Object, String>> hashMap1 = new HashMap<Integer, Map<Object, String>>();
      hashMap0.put(integer0, hashMap1);
      doubleKeyMap0.remove(integer0, integer0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoubleKeyMap<Object, String, String> doubleKeyMap0 = new DoubleKeyMap<Object, String, String>();
      doubleKeyMap0.put((Object) null, "", "");
      String string0 = doubleKeyMap0.remove((Object) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, Map<Integer, Object>> hashMap0 = new HashMap<String, Map<Integer, Object>>();
      DoubleKeyMap<String, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<String, Integer, Object>(hashMap0);
      Integer integer0 = new Integer(0);
      doubleKeyMap0.put("", integer0, (Object) "us.codecraft.webmagic.utils.DoubleKeyMap");
      Object object0 = doubleKeyMap0.put("", integer0, (Object) null);
      assertNotNull(object0);
      assertEquals("us.codecraft.webmagic.utils.DoubleKeyMap", object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, HashMap<Integer, Object>, HashMap<Object, Object>> doubleKeyMap0 = new DoubleKeyMap<Integer, HashMap<Integer, Object>, HashMap<Object, Object>>(class0);
      Map<Object, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, String, Object> doubleKeyMap1 = new DoubleKeyMap<Object, String, Object>(map0);
      Map<String, Map<Object, String>> map1 = doubleKeyMap1.newMap();
      DoubleKeyMap<String, Object, String> doubleKeyMap2 = new DoubleKeyMap<String, Object, String>(map1, class0);
      String string0 = doubleKeyMap2.get(".b24c4", (Object) doubleKeyMap1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<HashMap<String, Integer>, Map<Map<Integer, Object>, Object>> hashMap0 = new HashMap<HashMap<String, Integer>, Map<Map<Integer, Object>, Object>>();
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      HashMap<Map<Integer, Object>, Object> hashMap2 = new HashMap<Map<Integer, Object>, Object>();
      hashMap0.put(hashMap1, hashMap2);
      DoubleKeyMap<HashMap<String, Integer>, Map<Integer, Object>, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Integer>, Map<Integer, Object>, Object>(hashMap0);
      HashMap<HashMap<Object, String>, Map<Object, Object>> hashMap3 = new HashMap<HashMap<Object, String>, Map<Object, Object>>();
      DoubleKeyMap<HashMap<Object, String>, Object, Object> doubleKeyMap1 = new DoubleKeyMap<HashMap<Object, String>, Object, Object>(hashMap3);
      Map<Integer, Object> map0 = doubleKeyMap1.newMap();
      Object object0 = doubleKeyMap0.get(hashMap1, map0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Map<Integer, Map<Map<HashMap<Object, String>, Map<Integer, Map<Integer, Object>>>, Integer>>> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Map<Integer, Map<Map<HashMap<Object, String>, Map<Integer, Map<Integer, Object>>>, Integer>>>();
      Integer integer0 = new Integer(1);
      Map<Integer, Map<Integer, Map<Map<HashMap<Object, String>, Map<Integer, Map<Integer, Object>>>, Integer>>> map0 = doubleKeyMap0.remove(integer0);
      assertNull(map0);
  }
}
