/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:33:17 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.BorderLayout;
import java.awt.Canvas;
import java.awt.DefaultFocusTraversalPolicy;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.awt.RenderingHints;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.InputMethodListener;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.beans.EventSetDescriptor;
import java.beans.PropertyChangeListener;
import java.io.IOException;
import java.time.ZoneOffset;
import java.util.ArrayList;
import java.util.Locale;
import javax.swing.Icon;
import javax.swing.InputVerifier;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLayeredPane;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTextArea;
import javax.swing.MenuElement;
import javax.swing.ScrollPaneConstants;
import javax.swing.plaf.synth.SynthTableUI;
import javax.swing.plaf.synth.SynthTreeUI;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.associations.Apriori;
import weka.classifiers.bayes.BayesNet;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instances;
import weka.core.ListOptions;
import weka.core.ManhattanDistance;
import weka.core.TechnicalInformationHandlerJavadoc;
import weka.core.TestInstances;
import weka.core.converters.AbstractFileSaver;
import weka.core.converters.ArffSaver;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.PerformanceStats;
import weka.filters.AllFilter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.supervised.attribute.NominalToBinary;
import weka.gui.Logger;
import weka.gui.beans.Appender;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Classifier;
import weka.gui.beans.ClassifierPerformanceEvaluator;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ClustererPerformanceEvaluator;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CostBenefitAnalysis;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataVisualizer;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.GraphViewer;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceStreamToBatchMaker;
import weka.gui.beans.ModelPerformanceChart;
import weka.gui.beans.PredictionAppender;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.Sorter;
import weka.gui.beans.StripChart;
import weka.gui.beans.SubstringReplacer;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainTestSplitMaker;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetMaker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      filter0.addTestSetListener(saver0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      Appender appender0 = new Appender();
      filter0.removeDataSourceListener(appender0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      Canvas canvas0 = new Canvas();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(canvas0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class java.awt.Canvas : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("AllFilter", beanVisual0.getText());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      boolean boolean0 = filter0.isBusy();
      assertFalse(boolean0);
      
      filter0.getWrappedAlgorithm();
      TrainTestSplitMaker trainTestSplitMaker0 = new TrainTestSplitMaker();
      filter0.addTrainingSetListener(trainTestSplitMaker0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.notifyInstanceListeners((InstanceEvent) null);
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      BeanVisual beanVisual0 = costBenefitAnalysis0.m_visual;
      filter0.setVisual(beanVisual0);
      assertEquals("CostBenefitAnalysis", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      filter0.getInputVerifier();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      filter0.getFilter();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      classifierPerformanceEvaluator0.setToolTipText("");
      filter0.connectionNotification("", classifierPerformanceEvaluator0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0, instances0);
      filter0.acceptInstance(instanceEvent0);
      ManhattanDistance manhattanDistance0 = new ManhattanDistance(instances0);
      PerformanceStats performanceStats0 = new PerformanceStats();
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame((String) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.m_filterThread = null;
      filter0.removeInstanceListener(flowByExpression0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      Appender appender0 = new Appender();
      filter0.addTrainingSetListener(appender0);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      CostBenefitAnalysis costBenefitAnalysis0 = new CostBenefitAnalysis();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(technicalInformationHandlerJavadoc0, instances0, (-1), 114);
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~B_VfS[[xj~2sJVdp");
      filter0.setCustomName("~B_VfS[[xj~2sJVdp");
      filter0.getWrappedAlgorithm();
      assertEquals("~B_VfS[[xj~2sJVdp", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setComponentPopupMenu((JPopupMenu) null);
      filter0.acceptDataSet((DataSetEvent) null);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      filter0.addInstanceListener(substringReplacer0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.remove((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      filter0.removeMouseMotionListener((MouseMotionListener) null);
      filter0.setAlignmentY((-639.683F));
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.toString();
      ListOptions listOptions0 = new ListOptions();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      MultiFilter multiFilter0 = new MultiFilter();
      AttributeSelection attributeSelection0 = new AttributeSelection();
      filter0.setWrappedAlgorithm(attributeSelection0);
      filter0.stop();
      assertEquals("AttributeSelection", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      Appender appender0 = new Appender();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      Filter filter0 = new Filter();
      MockMinguoDate mockMinguoDate0 = new MockMinguoDate();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("[UN0NMyrjSgV!", arrayList0, 1);
      DataSetEvent dataSetEvent0 = new DataSetEvent(mockMinguoDate0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.useDefaultVisual();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Filter filter0 = new Filter();
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9G,%wI>F62");
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      Instances instances0 = attributeSummarizer0.m_visualizeDataSet;
      DataSetEvent dataSetEvent0 = new DataSetEvent(mockThaiBuddhistDate0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.useDefaultVisual();
      filter0.stop();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Filter filter0 = new Filter();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.removeTestSetListener(scatterPlotMatrix0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      TechnicalInformationHandlerJavadoc technicalInformationHandlerJavadoc0 = new TechnicalInformationHandlerJavadoc();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      TestSetEvent testSetEvent0 = new TestSetEvent(technicalInformationHandlerJavadoc0, (Instances) null, 1, 383, 3971, 383);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MockHijrahDate.now();
      filter0.connectionNotification("No output for serialization.", classValuePicker0);
      AllFilter allFilter0 = new AllFilter();
      GraphViewer graphViewer0 = new GraphViewer();
      graphViewer0.setVisible(true);
      filter0.eventGeneratable("No output for serialization.");
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      Appender appender0 = new Appender();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      NominalToBinary nominalToBinary1 = new NominalToBinary();
      assertFalse(nominalToBinary1.equals((Object)nominalToBinary0));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      filter0.getInputVerifier();
      classValuePicker0.setInputVerifier((InputVerifier) null);
      classValuePicker0.setOpaque(false);
      filter0.getFilter();
      ClassifierPerformanceEvaluator classifierPerformanceEvaluator0 = new ClassifierPerformanceEvaluator();
      classifierPerformanceEvaluator0.setToolTipText("");
      filter0.connectionNotification("!T", "");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      InstanceEvent instanceEvent0 = new InstanceEvent(classifierPerformanceEvaluator0, instances0);
      filter0.acceptInstance(instanceEvent0);
      ManhattanDistance manhattanDistance0 = new ManhattanDistance(instances0);
      PerformanceStats performanceStats0 = new PerformanceStats();
      JDialog jDialog0 = null;
      try {
        jDialog0 = new JDialog();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      MockHijrahDate.now();
      filter0.connectionNotification("integer", multiFilter0);
      SubstringReplacer substringReplacer0 = new SubstringReplacer();
      filter0.connectionNotification("integer", substringReplacer0);
      AllFilter allFilter0 = new AllFilter();
      GraphViewer graphViewer0 = new GraphViewer();
      graphViewer0.setVisible(true);
      GraphViewer graphViewer1 = new GraphViewer();
      boolean boolean0 = filter0.eventGeneratable("integer");
      assertTrue(boolean0);
      
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      Appender appender0 = new Appender();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      NominalToBinary nominalToBinary1 = new NominalToBinary();
      filter0.removeConfigurationListener((ConfigurationListener) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      InstanceEvent instanceEvent0 = new InstanceEvent(filter0, instances0);
      Instances instances1 = new Instances(instances0, 0);
      instanceEvent0.setStructure(instances1);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      Instances instances2 = new Instances(instances1, 2);
      AttributeSelection attributeSelection0 = new AttributeSelection();
      TestSetEvent testSetEvent0 = new TestSetEvent(predictionAppender0, instances0);
      filter0.acceptTestSet(testSetEvent0);
      RenderingHints.Key renderingHints_Key0 = mock(RenderingHints.Key.class, new ViolatedAssumptionAnswer());
      String string0 = filter0.getCustomName();
      assertEquals("AllFilter", string0);
      
      boolean boolean0 = filter0.connectionAllowed("@data");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getInputVerifier();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MockHijrahDate.now();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ArffSaver arffSaver0 = new ArffSaver();
      String string0 = BorderLayout.LINE_START;
      arffSaver0.getOptions();
      Classifier classifier0 = new Classifier();
      classifier0.m_block = true;
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.remove((MouseListener) defaultCaret0, (MouseListener) defaultCaret0);
      DefaultCaret defaultCaret1 = new DefaultCaret();
      filter0.removeMouseMotionListener(defaultCaret1);
      boolean boolean0 = filter0.eventGeneratable("configuration");
      assertTrue(boolean0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(defaultCaret1, instances0, 0, (-71));
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.removeConfigurationListener((ConfigurationListener) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      filter0.getInputVerifier();
      classValuePicker0.setInputVerifier((InputVerifier) null);
      Logger logger0 = classValuePicker0.m_logger;
      ClassValuePicker classValuePicker1 = new ClassValuePicker();
      filter0.getHierarchyListeners();
      JComponent.isLightweightComponent(classValuePicker0);
      Logger logger1 = classValuePicker0.m_logger;
      filter0.setLog((Logger) null);
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      instanceEvent0.setStatus(0);
      instanceEvent0.setStatus(0);
      boolean boolean0 = filter0.eventGeneratable("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>");
      assertFalse(boolean0);
      
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      filter0.addInstanceListener(instanceStreamToBatchMaker0);
      filter0.notifyInstanceListeners(instanceEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Filter filter0 = new Filter();
      Appender appender0 = new Appender();
      filter0.getMouseMotionListeners();
      appender0.repaint(1204L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.getCustomName();
      filter0.addDataSourceListener(appender0);
      BayesNet bayesNet0 = new BayesNet();
      DataSetEvent dataSetEvent0 = new DataSetEvent(appender0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      GraphViewer graphViewer0 = new GraphViewer();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      Clusterer clusterer0 = new Clusterer();
      JComponent.getDefaultLocale();
      filter0.disconnectionNotification(".arff", (Object) null);
      filter0.globalInfo();
      filter0.isBusy();
      filter0.enumerateRequests();
      filter0.useDefaultVisual();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      Apriori apriori0 = new Apriori();
      apriori0.getAssociationRules();
      apriori0.getInstancesOnlyClass();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      filter0.eventGeneratable("@data");
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      try { 
        sVMLightLoader0.getNextInstance((Instances) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // SVMLightLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.SVMLightLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getHierarchyListeners();
      MultiFilter multiFilter0 = new MultiFilter();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      filter0.setWrappedAlgorithm(multiFilter0);
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      filter0.removeTrainingSetListener(scatterPlotMatrix0);
      filter0.isPaintingTile();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getHierarchyListeners();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextArea jTextArea0 = new JTextArea(defaultStyledDocument0, "GR", 83, 83);
      jTextArea0.getPreferredSize();
      weka.gui.LogPanel logPanel0 = new weka.gui.LogPanel();
      AllFilter allFilter0 = new AllFilter();
      filter0.setLog(logPanel0);
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      flowByExpression0.getCursor();
      filter0.acceptInstance(instanceEvent0);
      GraphViewer graphViewer0 = new GraphViewer();
      // Undeclared exception!
      try { 
        graphViewer0.getInputMap((-1306));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition must be one of JComponent.WHEN_IN_FOCUSED_WINDOW, JComponent.WHEN_FOCUSED or JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ",@7[6!:");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      filter0.connectionAllowed("instance");
      try { 
        filter0.getMousePosition();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getInputVerifier();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      MockHijrahDate.now();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ArffSaver arffSaver0 = new ArffSaver();
      arffSaver0.getRevision();
      arffSaver0.getOptions();
      Classifier classifier0 = new Classifier();
      classifier0.m_block = true;
      filter0.addTrainingSetListener(classifier0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.remove((MouseListener) defaultCaret0, (MouseListener) defaultCaret0);
      DefaultCaret defaultCaret1 = new DefaultCaret();
      filter0.removeMouseMotionListener(defaultCaret1);
      boolean boolean0 = filter0.eventGeneratable("configuration");
      assertTrue(boolean0);
      
      Instances instances0 = textDirectoryLoader0.getDataSet();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(defaultCaret1, instances0, 0, (-71));
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.removeConfigurationListener((ConfigurationListener) null);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getHierarchyListeners();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setWrappedAlgorithm(multiFilter0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MenuElement[] menuElementArray0 = new MenuElement[14];
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("instance");
      menuElementArray0[0] = (MenuElement) jCheckBoxMenuItem0;
      SynthTreeUI synthTreeUI0 = new SynthTreeUI();
      Icon icon0 = synthTreeUI0.getExpandedIcon();
      JCheckBoxMenuItem jCheckBoxMenuItem1 = new JCheckBoxMenuItem("instance", false);
      menuElementArray0[1] = (MenuElement) jCheckBoxMenuItem1;
      JCheckBoxMenuItem jCheckBoxMenuItem2 = new JCheckBoxMenuItem("instance", icon0);
      menuElementArray0[2] = (MenuElement) jCheckBoxMenuItem2;
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem(icon0);
      menuElementArray0[4] = (MenuElement) jRadioButtonMenuItem0;
      DefaultEditorKit.CopyAction defaultEditorKit_CopyAction0 = new DefaultEditorKit.CopyAction();
      JMenuItem jMenuItem0 = new JMenuItem(defaultEditorKit_CopyAction0);
      menuElementArray0[5] = (MenuElement) jMenuItem0;
      jCheckBoxMenuItem2.setHideActionText(false);
      JRadioButtonMenuItem jRadioButtonMenuItem1 = new JRadioButtonMenuItem(icon0);
      menuElementArray0[6] = (MenuElement) jRadioButtonMenuItem1;
      String string0 = DefaultEditorKit.pageUpAction;
      filter0.connectionAllowed("instance");
      try { 
        filter0.getMousePosition();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Component", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getHierarchyListeners();
      MultiFilter multiFilter0 = new MultiFilter();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      filter0.setWrappedAlgorithm(multiFilter0);
      ArffSaver arffSaver0 = new ArffSaver();
      String[] stringArray0 = Locale.getISOLanguages();
      arffSaver0.getInstances();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      flowByExpression0.getCursor();
      instanceEvent0.setStatus(1);
      AbstractFileSaver.runFileSaver(arffSaver0, stringArray0);
      filter0.acceptInstance(instanceEvent0);
      filter0.eventGeneratable(".bsi");
      filter0.updateUI();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        filter0.performRequest(".arff");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // .arff not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getHierarchyListeners();
      MultiFilter multiFilter0 = new MultiFilter();
      weka.filters.Filter.makeCopies(multiFilter0, 146);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      multiFilter0.getRevision();
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster0);
      filter0.setWrappedAlgorithm(multiFilter0);
      ArffSaver arffSaver0 = new ArffSaver();
      Locale.getISOLanguages();
      arffSaver0.getInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.remove((MouseListener) aWTEventMulticaster0, (MouseListener) defaultCaret0);
      DefaultCaret defaultCaret1 = new DefaultCaret();
      AWTEventMulticaster.remove((MouseMotionListener) defaultCaret1, (MouseMotionListener) aWTEventMulticaster0);
      filter0.eventGeneratable("@relation");
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      filter0.disconnectionNotification("8034", (Object) null);
      Appender appender0 = new Appender();
      SynthTableUI synthTableUI0 = new SynthTableUI();
      appender0.addPropertyChangeListener("<KIJzBr~`\"", (PropertyChangeListener) synthTableUI0);
      InstanceEvent instanceEvent0 = appender0.m_ie;
      filter0.acceptInstance(instanceEvent0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      filter0.removeMouseMotionListener(defaultCaret0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      String string0 = ScrollPaneConstants.LOWER_RIGHT_CORNER;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ListOptions listOptions0 = new ListOptions();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      filter0.connectionNotification("jrCRk:177.oEIuB", instances0);
      Saver saver0 = new Saver();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      Apriori apriori0 = new Apriori();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(modelPerformanceChart0, instances0, 0, 223);
      trainingSetEvent0.m_maxSetNumber = 0;
      filter0.addTrainingSetListener(saver0);
      trainingSetEvent0.m_trainingSet = instances1;
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.addTrainingSetListener(saver0);
      MouseMotionListener mouseMotionListener0 = AWTEventMulticaster.add((MouseMotionListener) defaultCaret0, (MouseMotionListener) null);
      AWTEventMulticaster.remove((MouseMotionListener) defaultCaret0, mouseMotionListener0);
      filter0.removeMouseMotionListener(mouseMotionListener0);
      filter0.eventGeneratable(".arff");
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      dataVisualizer0.setFocusTraversalPolicy(defaultFocusTraversalPolicy0);
      filter0.addDataSourceListener(dataVisualizer0);
      DataSetEvent dataSetEvent0 = new DataSetEvent(listOptions0, instances0);
      filter0.acceptDataSet(dataSetEvent0);
      ClassAssigner classAssigner0 = new ClassAssigner();
      BeanVisual beanVisual0 = classAssigner0.getVisual();
      filter0.setVisual(beanVisual0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getHierarchyListeners();
      MultiFilter multiFilter0 = new MultiFilter();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      filter0.setWrappedAlgorithm(multiFilter0);
      ArffSaver arffSaver0 = new ArffSaver();
      arffSaver0.getOptions();
      arffSaver0.getInstances();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      instanceEvent0.setStructure((Instances) null);
      instanceEvent0.setStatus((-2142));
      instanceEvent0.setStatus(2);
      filter0.acceptInstance(instanceEvent0);
      filter0.updateUI();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Apriori apriori0 = new Apriori();
      PredictionAppender predictionAppender0 = new PredictionAppender();
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getHierarchyListeners();
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.getFilters();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      multiFilter0.getRevision();
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e|@sg&OCXd8");
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      filter0.setWrappedAlgorithm(multiFilter0);
      filter0.connectionNotification("e|@sg&OCXd8", multiFilter0);
      Saver saver0 = new Saver();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      Apriori apriori0 = new Apriori();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      ModelPerformanceChart modelPerformanceChart0 = new ModelPerformanceChart();
      ClustererPerformanceEvaluator clustererPerformanceEvaluator0 = new ClustererPerformanceEvaluator();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(clustererPerformanceEvaluator0, instances0, 223, 223);
      filter0.addTrainingSetListener(attributeSummarizer0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      Apriori apriori1 = new Apriori();
      apriori1.getAssociationRules();
      // Undeclared exception!
      try { 
        filter0.performRequest("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getHierarchyListeners();
      MultiFilter multiFilter0 = new MultiFilter();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      filter0.setWrappedAlgorithm(multiFilter0);
      ArffSaver arffSaver0 = new ArffSaver();
      String[] stringArray0 = Locale.getISOLanguages();
      arffSaver0.getInstances();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      flowByExpression0.getCursor();
      instanceEvent0.setStatus(3);
      AbstractFileSaver.runFileSaver(arffSaver0, stringArray0);
      filter0.acceptInstance(instanceEvent0);
      PredictionAppender predictionAppender0 = new PredictionAppender();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      instanceEvent0.setInstance(binarySparseInstance0);
      filter0.acceptInstance(instanceEvent0);
      filter0.isBusy();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      trainingSetMaker0.resetKeyboardActions();
      Logger logger0 = trainingSetMaker0.m_logger;
      filter0.removeTrainingSetListener(flowByExpression0);
  }
}
