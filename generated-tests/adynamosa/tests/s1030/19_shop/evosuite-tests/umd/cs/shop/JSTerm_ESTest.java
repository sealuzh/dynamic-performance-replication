/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 24 00:49:18 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("OB{HJ*YxjL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSSubstitution0.add((Object) jSTerm3);
      jSSubstitution0.retainAll(jSTerm0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      jSTerm0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm2, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "zeaQis9ng");
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.toStr();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addElement(jSTerm1);
      jSSubstitution2.add((Object) null);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.isGround();
      jSTerm1.print();
      jSTerm1.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution2);
      jSTerm0.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2 >= 2
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "reaQisng");
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.clonePF();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.toStr();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<JSTerm, Object> function0 = (Function<JSTerm, Object>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super JSTerm, ?>) function0);
      jSTerm1.addElement(jSTerm0);
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm1, jSSubstitution1);
      jSTerm0.isGround();
      jSTerm1.matches(jSTerm1, jSSubstitution3);
      StringReader stringReader0 = new StringReader("reaQisng");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(1701, (-2));
      streamTokenizer0.ordinaryChar(63);
      jSTerm1.isFunction();
      stringReader0.ready();
      jSTerm0.isConstant();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isGround();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      jSTerm3.equals(jSTerm1);
      jSTerm1.toStr();
      // Undeclared exception!
      try { 
        jSTerm3.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "reaQisng");
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.clonePF();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(11, stringBuffer0.length());
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<JSTerm, Object> function0 = (Function<JSTerm, Object>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super JSTerm, ?>) function0);
      jSTerm1.addElement(jSTerm2);
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm1, jSSubstitution1);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution4 = jSTerm1.matches(jSTerm2, jSSubstitution3);
      assertFalse(jSSubstitution3.fail());
      assertTrue(jSSubstitution4.fail());
      
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("is");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm2.applySubstitutionT(jSSubstitution2);
      jSTerm3.makeEval(true);
      JSTerm jSTerm4 = jSTerm0.call();
      assertTrue(jSTerm4.isFunction());
      
      JSTerm jSTerm5 = jSTerm3.standardizerTerm();
      jSTerm3.isGround();
      jSTerm5.isGround();
      assertTrue(jSTerm5.isConstant());
      assertTrue(jSTerm5.isEval());
      assertFalse(jSTerm5.isFunction());
      assertNotSame(jSTerm5, jSTerm3);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "reading");
      jSTerm0.isVariable();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.isEmpty();
      StringReader stringReader0 = new StringReader("- ");
      jSTerm0.print();
      StringReader stringReader1 = new StringReader("d#m)|eidPppGm5w;v(]");
      stringReader1.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.ordinaryChars((-582), (-582));
      JSTerm jSTerm4 = jSTerm2.parseList(streamTokenizer0);
      jSTerm4.removeElement(jSTerm0);
      streamTokenizer0.wordChars((-1612416909), 313);
      streamTokenizer0.ordinaryChar((-4271));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      jSTerm4.equals(jSTerm3);
      JSJshopVars.dot = 2;
      jSTerm1.isGround();
      JSTerm jSTerm5 = jSTerm4.standardizerTerm();
      jSTerm5.equals(jSTerm4);
      JSTerm jSTerm6 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm6.isVariable());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "reaQisng";
      jSTerm0.add((Object) "reaQisng");
      JSJshopVars.minus = 1292;
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.dot = (-3);
      jSTerm1.isGround();
      jSTerm0.makeEval(true);
      jSTerm0.makeEval(false);
      JSTerm jSTerm2 = new JSTerm();
      StringReader stringReader0 = new StringReader("Undefined function to be evaluated  in Call statement");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm4.equals(jSTerm5);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm5, jSSubstitution0);
      JSTerm jSTerm7 = new JSTerm(streamTokenizer0);
      jSTerm4.matches(jSTerm7);
      // Undeclared exception!
      try { 
        jSTerm4.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "reaQisng");
      JSJshopVars.minus = 1292;
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.dot = (-3);
      jSTerm1.isGround();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.removeAllElements();
      StringReader stringReader0 = new StringReader("(- ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("z[2kwL^877GQo5X>/;m");
      stringReader0.reset();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "reaQisng");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isGround();
      JSTerm jSTerm2 = new JSTerm();
      StringReader stringReader0 = new StringReader("(- ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm();
      JSJshopVars.slash = 252;
      stringReader0.skip((-4));
      jSTerm0.makeEval(true);
      streamTokenizer0.quoteChar(793);
      jSTerm2.makeEval(true);
      streamTokenizer0.quoteChar((-1010));
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.equals(jSTerm3);
      jSSubstitution0.spliterator();
      streamTokenizer0.ordinaryChar(1);
      jSTerm2.matches(jSTerm3, jSSubstitution0);
      jSTerm0.cloneT();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "reaQisng";
      jSTerm0.add((Object) "reaQisng");
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.call();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.toStr();
      jSTerm2.equals(jSTerm1);
      StringReader stringReader0 = new StringReader("(<|n*Oas_`X|L{+~gu8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSJshopVars.minus = 1758;
      StringReader stringReader0 = new StringReader("(<-");
      SystemInUtil.addInputLine("(<-");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.toStr();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) ".");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = new JSTerm();
      StringReader stringReader0 = new StringReader("(- ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "reading");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.isGround();
      jSTerm0.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.isVariable();
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSTerm jSTerm3 = jSTerm2.call();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm0.equals(jSTerm3);
      StringReader stringReader1 = new StringReader("- ");
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm2.forEach(consumer0);
      jSTerm2.print();
      JSTerm jSTerm5 = new JSTerm();
      StringReader stringReader2 = new StringReader("d#m)|eidPYpGm5w;v(]");
      stringReader1.reset();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      jSTerm0.parseList(streamTokenizer0);
      stringReader1.skip((-48L));
      JSTerm jSTerm6 = new JSTerm();
      jSTerm1.clonePF();
      JSTerm jSTerm7 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm7.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "reading");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isGround();
      jSTerm0.call();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.makeEval(true);
      String string0 = "(- ";
      StringReader stringReader0 = new StringReader("nil");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.print();
      StringReader stringReader1 = new StringReader("(- ");
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "reading");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = new JSTerm();
      StringReader stringReader0 = new StringReader("(- ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.forEach(consumer0);
      jSTerm1.print();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      streamTokenizer0.commentChar(0);
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm4.isFunction();
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "reading");
      jSTerm0.isVariable();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.equals(jSTerm1);
      StringReader stringReader0 = new StringReader("- ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.forEach(consumer0);
      jSTerm2.print();
      JSTerm jSTerm4 = new JSTerm();
      streamTokenizer0.nval = (double) 2925;
      JSJshopVars.rightBrac = (-4271);
      StringReader stringReader1 = new StringReader("d#m)|eidPYpGm5w;v(]");
      JSJshopVars.coma = (-4271);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm5 = jSTerm2.parseList(streamTokenizer1);
      stringReader0.skip(0L);
      JSTerm jSTerm6 = new JSTerm();
      streamTokenizer0.pushBack();
      jSTerm5.print();
      // Undeclared exception!
      try { 
        jSTerm4.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(@Z[pFf8# G,_");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      stringReader0.skip((-4));
      jSTerm1.makeEval(true);
      streamTokenizer0.quoteChar((-4));
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm1.isEval();
      streamTokenizer1.sval = ";)pxS$?|a";
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "reading");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.call();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm2.equals(jSTerm1);
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.addElement(jSTerm1);
      jSTerm3.equals(jSTerm1);
      jSTerm3.toStr();
      UnaryOperator.identity();
      JSJshopVars.dot = 1;
      jSTerm1.addElement(jSTerm3);
      jSTerm1.matches(jSTerm1, jSSubstitution2);
      JSTerm jSTerm4 = jSTerm2.cloneT();
      jSTerm0.equals(jSTerm2);
      jSTerm1.isGround();
      jSTerm2.isEval();
      jSTerm0.isEval();
      jSTerm4.isEval();
      jSTerm4.addAll((Collection) jSTerm0);
      JSTerm jSTerm5 = jSTerm2.standardizerTerm();
      jSTerm5.makeFunction();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm0.addAll((Collection) jSSubstitution0);
      jSTerm0.standardizerTerm();
      StringReader stringReader0 = new StringReader("JyN5X.i2_=<B");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm2.cloneT();
      assertEquals("[reading, [reading, [reading]]]", jSTerm2.toString());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("z8?)kb0UrLN[lQ~5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer0);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      streamTokenizer0.whitespaceChars(41, (-3160));
      StringReader stringReader1 = new StringReader("ceil");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.ordinaryChars(3269, (-3160));
      JSTerm jSTerm4 = new JSTerm(streamTokenizer1);
      jSTerm3.equals(jSTerm0);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm2.equals(jSTerm3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "reading");
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.call();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.addElement(jSTerm1);
      jSTerm1.toStr();
      UnaryOperator.identity();
      JSJshopVars.dot = 1;
      jSTerm1.addElement(jSTerm3);
      StringReader stringReader0 = new StringReader("reading");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      jSTerm0.toStr();
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "reading");
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isVariable();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.isEval();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.addElement(jSTerm0);
      jSTerm3.equals(jSTerm0);
      jSTerm0.toStr();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.addElement(jSTerm3);
      StringReader stringReader0 = new StringReader("(ff))u-Kei'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm4.replaceAll(unaryOperator0);
      jSTerm1.matches(jSTerm3, jSSubstitution0);
      JSTerm jSTerm5 = jSTerm1.cloneT();
      jSTerm5.equals(jSTerm3);
      jSTerm4.isGround();
      jSTerm1.isEval();
      jSTerm0.isEval();
      jSTerm2.isEval();
      jSTerm5.isEval();
      jSTerm0.parallelStream();
      JSTerm jSTerm6 = jSTerm2.standardizerTerm();
      jSTerm1.isEval();
      JSTerm jSTerm7 = jSTerm2.call();
      // Undeclared exception!
      try { 
        jSTerm6.matches(jSTerm7, jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.print();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.setSize(600);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.trimToSize();
      jSTerm0.equals(jSTerm1);
      StringReader stringReader0 = new StringReader("Line : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Integer integer0 = new Integer((-4));
      jSTerm1.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.cloneT();
      jSTerm1.equals(jSTerm2);
      jSTerm2.isGround();
      jSTerm0.isEval();
      jSTerm1.makeEval(true);
      jSTerm0.isEval();
      streamTokenizer0.slashSlashComments(true);
      jSTerm2.isEval();
      jSTerm0.isEval();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.remove((Object) jSSubstitution3);
      jSTerm1.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "reading");
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isVariable();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = new JSTerm();
      StringReader stringReader0 = new StringReader("reading");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.isEval();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution0);
      boolean boolean0 = jSTerm4.equals(jSTerm1);
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals("(reading )", stringBuffer0.toString());
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.addElement(jSTerm4);
      assertTrue(jSTerm4.isFunction());
      
      jSTerm2.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution4 = jSTerm1.matches(jSTerm1, jSSubstitution2);
      JSTerm jSTerm5 = jSTerm2.cloneT();
      jSTerm0.equals(jSTerm2);
      boolean boolean1 = jSTerm1.isGround();
      assertTrue(boolean1 == boolean0);
      
      streamTokenizer0.slashSlashComments(true);
      jSTerm3.isEval();
      jSTerm2.isEval();
      streamTokenizer0.slashSlashComments(false);
      jSTerm0.isEval();
      jSTerm5.isEval();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm5.parallelStream();
      JSTerm jSTerm6 = new JSTerm(streamTokenizer0);
      jSTerm6.addAll((Collection) jSSubstitution4);
      JSTerm jSTerm7 = jSTerm2.standardizerTerm();
      assertTrue(jSTerm7.isFunction());
      
      boolean boolean2 = jSTerm1.isEval();
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "reading");
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = jSTerm2.call();
      JSTerm jSTerm4 = new JSTerm();
      StringReader stringReader0 = new StringReader("reading");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      jSTerm5.removeAll(jSTerm0);
      jSTerm5.matches(jSTerm2, jSSubstitution0);
      jSTerm1.isEval();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm6 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm6.equals(jSTerm2);
      jSTerm1.toStr();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.addElement(jSTerm6);
      jSTerm3.replaceAll(unaryOperator0);
      jSTerm1.matches(jSTerm2, jSSubstitution1);
      jSTerm3.cloneT();
      jSTerm6.isFunction();
      jSTerm1.isGround();
      streamTokenizer0.slashSlashComments(true);
      jSTerm4.isEval();
      jSTerm3.isEval();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.parallelStream();
      jSTerm4.addAll((Collection) jSTerm1);
      jSTerm4.standardizerTerm();
      jSTerm4.print();
      assertFalse(jSTerm4.equals((Object)jSTerm6));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "reading");
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = jSTerm2.call();
      JSTerm jSTerm4 = new JSTerm();
      StringReader stringReader0 = new StringReader("reading");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.isEval();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm5 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm5.equals(jSTerm2);
      jSTerm1.toStr();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.addElement(jSTerm5);
      jSTerm3.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution4 = jSTerm1.matches(jSTerm2, jSSubstitution2);
      JSTerm jSTerm6 = jSTerm3.cloneT();
      jSTerm2.equals(jSTerm3);
      boolean boolean0 = jSTerm1.isGround();
      streamTokenizer0.slashSlashComments(true);
      jSTerm4.isEval();
      jSTerm3.isEval();
      JSTerm jSTerm7 = new JSTerm(streamTokenizer0);
      jSTerm6.matches(jSTerm4);
      JSTerm jSTerm8 = jSTerm2.standardizerTerm();
      jSTerm8.matches((JSPredicateForm) jSTerm7, jSSubstitution4);
      JSTerm jSTerm9 = new JSTerm();
      jSTerm1.call();
      jSTerm3.print();
      jSTerm1.applySubstitutionT(jSSubstitution3);
      assertEquals("[reading, [reading]]", jSTerm1.toString());
      
      boolean boolean1 = jSTerm4.isEval();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "reading");
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = jSTerm2.call();
      JSTerm jSTerm4 = new JSTerm();
      StringReader stringReader0 = new StringReader("reading");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      jSTerm5.matches(jSTerm2, jSSubstitution0);
      jSTerm1.isEval();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm6 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm6.equals(jSTerm2);
      jSTerm1.toStr();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.addElement(jSTerm6);
      jSTerm3.replaceAll(unaryOperator0);
      jSTerm1.matches(jSTerm2, jSSubstitution1);
      jSTerm3.cloneT();
      jSTerm6.isFunction();
      jSTerm1.isGround();
      streamTokenizer0.slashSlashComments(true);
      jSTerm4.isEval();
      jSTerm3.isEval();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.parallelStream();
      jSTerm4.addAll((Collection) jSTerm1);
      JSTerm jSTerm7 = jSTerm4.standardizerTerm();
      boolean boolean0 = jSTerm7.isEval();
      assertEquals("[reading, [reading]]", jSTerm4.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "reading");
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = jSTerm2.call();
      JSTerm jSTerm4 = new JSTerm();
      StringReader stringReader0 = new StringReader("reading");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      jSTerm5.matches(jSTerm2, jSSubstitution0);
      jSTerm1.isEval();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm6 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm6.equals(jSTerm2);
      jSTerm1.toStr();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.addElement(jSTerm6);
      jSTerm3.replaceAll(unaryOperator0);
      jSTerm1.matches(jSTerm2, jSSubstitution1);
      jSTerm3.cloneT();
      jSTerm6.isFunction();
      jSTerm1.isGround();
      streamTokenizer0.slashSlashComments(true);
      jSTerm4.isEval();
      jSTerm3.isEval();
      JSTerm jSTerm7 = null;
      try {
        jSTerm7 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SystemInUtil.addInputLine("{RNAr>}F1MHPUmu5f0x");
      SystemInUtil.addInputLine("7?)yP");
      StringReader stringReader0 = new StringReader("7?)yP");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertEquals(41, streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm1.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.stream();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.makeEval(true);
      StringReader stringReader0 = new StringReader(": ");
      StringReader stringReader1 = new StringReader("nil");
      jSTerm0.setSize(369);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "zeaQis9ng");
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSJshopVars.backquote = (-3);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.toStr();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm1.removeAll(jSSubstitution2);
      jSTerm0.addElement(jSTerm1);
      jSSubstitution2.add((Object) null);
      StringReader stringReader0 = new StringReader("zeaQis9ng");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.makeFunction();
      JSTerm jSTerm3 = jSTerm2.call();
      boolean boolean0 = jSTerm2.equals(jSTerm1);
      assertFalse(jSTerm2.isConstant());
      assertFalse(boolean0);
      
      JSSubstitution jSSubstitution3 = jSTerm2.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm4 = jSTerm1.cloneT();
      jSTerm1.matches(jSTerm3);
      jSTerm1.matches(jSTerm4, jSSubstitution3);
      assertTrue(jSTerm2.isFunction());
      assertNotSame(jSTerm2, jSTerm3);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "9]x6 R|@%e]QrocaVi[");
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.call();
      JSTerm jSTerm3 = jSTerm2.call();
      JSTerm jSTerm4 = new JSTerm();
      StringReader stringReader0 = new StringReader("9]x6 R|@%e]QrocaVi[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm5.matches(jSTerm2, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      
      jSTerm4.isGround();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm6 = jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm5.isEval();
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals("(9]x6 R|@%e]QrocaVi[ )", stringBuffer0.toString());
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm3.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution4 = jSTerm1.matches(jSTerm2, jSSubstitution2);
      assertFalse(jSSubstitution4.fail());
      
      jSTerm3.cloneT();
      jSTerm6.isFunction();
      jSTerm1.isGround();
      jSTerm4.isEval();
      jSTerm3.isEval();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm2.cloneT();
      boolean boolean0 = jSTerm3.equals(jSTerm6);
      assertTrue(boolean0);
      
      JSTerm jSTerm7 = jSTerm0.applySubstitutionT(jSSubstitution2);
      assertFalse(jSTerm0.isFunction());
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm7.isEval());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "9]x6 R|@%e]1rocaVi[");
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      jSTerm0.isEval();
      jSSubstitution0.add((Object) jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.isFunction();
      jSTerm0.clone();
      jSTerm2.isEval();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      boolean boolean0 = jSTerm0.equals(jSTerm3);
      assertFalse(jSTerm3.isConstant());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3?Nco &W");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSJshopVars.coma = (-2);
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.clonePF();
      jSTerm1.standarizerPredicateForm();
      jSTerm0.equals(jSTerm1);
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(boolean0);
      
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      jSTerm1.matches(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      jSTerm1.matches(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      boolean boolean1 = jSTerm0.isVariable();
      jSTerm1.isGround();
      JSTerm jSTerm3 = new JSTerm();
      boolean boolean2 = jSTerm1.isGround();
      assertTrue(boolean2 == boolean1);
      
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm3, jSSubstitution2);
      assertEquals("[?Nco]", jSTerm1.toString());
      assertTrue(jSSubstitution3.fail());
      assertFalse(jSTerm1.isFunction());
      
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isFunction());
      assertEquals(4, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3?Nco &W");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSJshopVars.coma = (-2);
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.clonePF();
      jSTerm1.standarizerPredicateForm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.isEval();
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm1.matches(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isVariable();
      jSTerm1.isGround();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3?Nco &W");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSJshopVars.coma = (-2);
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      stringReader0.mark(32);
      jSTerm1.clonePF();
      jSTerm1.standarizerPredicateForm();
      jSTerm0.equals(jSTerm1);
      boolean boolean0 = jSTerm0.isEval();
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isVariable();
      boolean boolean1 = jSTerm1.isGround();
      assertTrue(boolean1 == boolean0);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSSubstitution1.isEmpty());
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSSubstitution1.fail());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[?Nco]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "(Z['G mG,_");
      jSTerm0.toStr();
      StringReader stringReader0 = new StringReader("(Z['G mG,_");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?O_g!Nu_z47w3M\"@_T");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm0);
      jSTerm0.isGround();
      jSTerm0.isFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      StringReader stringReader1 = new StringReader("`");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.matches(jSTerm1, jSSubstitution2);
      jSTerm1.isFunction();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution3);
      StringReader stringReader2 = new StringReader("T");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?O_g!Nu_z47w3M\"@_T");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm0);
      jSTerm0.isGround();
      jSTerm0.isEval();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.setSize(1711);
      jSTerm0.isGround();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSTerm) null, jSSubstitution0);
      jSTerm2.isFunction();
      jSTerm2.isEval();
      jSTerm0.isEval();
      jSTerm2.standardizerTerm();
      StringReader stringReader1 = new StringReader("@yUxgj&Ias #E(de");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm1.print();
      jSSubstitution1.ensureCapacity(600);
      jSTerm2.matches(jSTerm1, jSSubstitution1);
      jSTerm2.matches((JSTerm) null, jSSubstitution0);
      System.setCurrentTimeMillis(1711);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?O_g!Nu_z47w3M\"@_T");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.equals(jSTerm0);
      jSTerm0.isGround();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?O_g!Nu_z47w3M\"@_T");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.equals(jSTerm0);
      jSTerm0.isGround();
      jSTerm0.isFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      jSTerm1.matches(jSTerm0, jSSubstitution1);
      jSTerm1.isFunction();
      jSTerm0.isEval();
      jSTerm1.standardizerTerm();
      StringReader stringReader1 = new StringReader("?O_g!Nu_z47w3M\"@_T");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer2);
      boolean boolean0 = jSTerm1.isGround();
      assertEquals("[?%%%, (this Collection)]", jSTerm0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "5W`UJ:p8#3IP0m";
      StringReader stringReader0 = new StringReader("5W`UJ:p8#3IP0m");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.slashStarComments(true);
      jSTerm0.add((Object) stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      jSTerm0.isFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      jSTerm0.isFunction();
      jSTerm0.isEval();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.print();
      jSTerm0.isEval();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.setSize(600);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?O_g!Nu_z47w3M\"@_T");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.add((Object) jSTerm2);
      jSTerm0.equals(jSTerm2);
      jSTerm0.isGround();
      jSTerm1.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm2, jSSubstitution1);
      jSTerm2.isFunction();
      jSTerm1.isEval();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm1.cloneT();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm4.isFunction();
      jSTerm3.cloneT();
      StringReader stringReader1 = new StringReader("|`UY/U");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm6 = null;
      try {
        jSTerm6 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Reading Predicate");
      stringReader0.mark(33);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      int int0 = 2748;
      streamTokenizer0.whitespaceChars(2748, 33);
      streamTokenizer0.whitespaceChars((-781), 33);
      streamTokenizer0.commentChar(33);
      jSTerm0.makeEval(true);
      jSTerm0.print();
      jSTerm0.ensureCapacity(1753);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      jSTerm0.call();
      JSJshopVars.coma = (-781);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) stringReader0;
      objectArray0[1] = (Object) streamTokenizer0;
      objectArray0[2] = (Object) jSSubstitution0;
      objectArray0[3] = (Object) jSTerm1;
      objectArray0[4] = (Object) "Reading Predicate";
      // Undeclared exception!
      try { 
        jSTerm1.remove((-1619));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1619
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Kf(56:|8BOC1f7(c");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.sval = "%%%";
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.stream();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?O_g!Nu_z47w3M\"@_T");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.add((Object) jSTerm2);
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?O_g!Nu_z47w3M\"@_T");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.equals(jSTerm0);
      jSTerm0.isGround();
      jSTerm0.isFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm0, jSSubstitution1);
      jSTerm0.isFunction();
      jSTerm0.isEval();
      jSTerm0.standardizerTerm();
      StringReader stringReader1 = new StringReader("JSTerm: Error reading control parameters: ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.print();
      jSTerm0.isEval();
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.call();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.matches(jSTerm1, jSSubstitution1);
      jSTerm2.print();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("OB{HJ*YxjL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.eolIsSignificant(true);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm1.isVariable());
      
      jSTerm1.makeVariable();
      stringReader0.read();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.equals(jSTerm1);
      jSTerm1.standardizerTerm();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      assertFalse(jSTerm2.isFunction());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?O_g!Nu_z47w3M\"@_T");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.add((Object) jSTerm2);
      jSTerm0.equals(jSTerm2);
      jSTerm0.isGround();
      jSTerm0.isFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm2, jSSubstitution1);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?O_g!Nu_z47w3M\"@_T");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.call();
      streamTokenizer0.quoteChar(40);
      stringReader0.skip((-1L));
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?O_g!Nu_z47w3M\"@_T");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.call();
      streamTokenizer0.quoteChar(40);
      stringReader0.skip((-1L));
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(@Z[pFf8# G,_");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.setSize(921);
      jSTerm0.isFunction();
      jSTerm0.isEval();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.leftPar = 93;
      StringReader stringReader0 = new StringReader("9]x6 R|@%e]1rocaVi[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.removeElement(stringReader0);
      jSTerm1.makeFunction();
      jSTerm0.equals(jSTerm1);
      jSTerm1.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 93;
      JSJshopVars.leftPar = 93;
      StringReader stringReader0 = new StringReader("9]x6 R|@%e]1rocaVi[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.removeElement(stringReader0);
      jSTerm1.makeFunction();
      jSTerm0.equals(jSTerm1);
      jSTerm1.makeConstant();
      jSTerm0.makeVariable();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("OB{HJ*YxjL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.makeVariable();
      stringReader0.read();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.listIterator();
      jSTerm0.removeAllElements();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.toStr();
      jSTerm1.equals(jSTerm0);
      jSTerm1.isGround();
      jSTerm1.isEmpty();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.call();
      JSTerm jSTerm3 = jSTerm0.call();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm3, jSSubstitution0);
      jSTerm0.isFunction();
      jSTerm1.isEval();
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.print();
      jSTerm0.isEval();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.setSize(600);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution2);
      jSTerm1.equals(jSTerm0);
      jSTerm1.isGround();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.listIterator();
      jSTerm0.removeAllElements();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.toStr();
      jSTerm1.equals(jSTerm0);
      jSTerm1.isGround();
      jSTerm1.isEmpty();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm0.isGround();
      jSTerm1.isFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm3.matches(jSTerm2, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.listIterator();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(5, stringBuffer0.length());
      
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertFalse(boolean0);
      
      boolean boolean1 = jSTerm1.isGround();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSJshopVars.colon = (-1720);
      JSTerm jSTerm3 = jSTerm2.call();
      JSTerm jSTerm4 = jSTerm0.call();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm4.sort(comparator0);
      boolean boolean2 = jSTerm2.isFunction();
      assertTrue(boolean2 == boolean1);
      
      jSTerm2.cloneT();
      JSTerm jSTerm5 = jSTerm0.call();
      assertTrue(jSTerm5.isFunction());
      
      JSTerm jSTerm6 = jSTerm3.standardizerTerm();
      assertTrue(jSTerm6.isFunction());
      assertNotSame(jSTerm3, jSTerm6);
      assertFalse(jSTerm6.isEval());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.retainAll(jSPredicateForm0);
      jSTerm0.listIterator();
      jSTerm0.removeAllElements();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      boolean boolean1 = jSTerm0.isGround();
      assertFalse(boolean1 == boolean0);
      
      jSTerm0.isFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      jSTerm1.isFunction();
      jSTerm0.isEval();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      assertNotSame(jSSubstitution0, jSSubstitution2);
      assertTrue(jSTerm3.isFunction());
      assertNotSame(jSTerm2, jSTerm3);
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isFunction());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3?Nco &W");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSJshopVars.coma = (-2);
      stringReader0.markSupported();
      streamTokenizer0.pushBack();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.clonePF();
      jSTerm1.standarizerPredicateForm();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      jSTerm1.isFunction();
      jSTerm0.isEval();
      System.setCurrentTimeMillis((-2));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3?Nco &W");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSJshopVars.coma = (-2);
      stringReader0.markSupported();
      streamTokenizer0.pushBack();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.clonePF();
      jSTerm1.standarizerPredicateForm();
      JSTerm jSTerm2 = new JSTerm();
      boolean boolean0 = jSTerm2.isGround();
      jSTerm0.isFunction();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertTrue(jSTerm3.isConstant());
      assertNotSame(jSTerm3, jSTerm0);
      assertEquals("[3.0]", jSTerm3.toString());
      
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm4.print();
      boolean boolean1 = jSTerm4.isVariable();
      assertFalse(jSTerm4.isFunction());
      assertFalse(jSTerm4.isEval());
      assertTrue(boolean1 == boolean0);
      assertEquals("[?Nco]", jSTerm4.toString());
      assertFalse(jSTerm4.isConstant());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.retainAll(jSPredicateForm0);
      jSTerm0.listIterator();
      jSTerm0.removeAllElements();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("([] )", stringBuffer0.toString());
      
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      boolean boolean1 = jSTerm0.isGround();
      assertFalse(boolean1 == boolean0);
      
      jSTerm0.isFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm2.isVariable());
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSSubstitution2.fail());
      assertTrue(jSTerm2.isFunction());
      
      jSTerm1.isFunction();
      boolean boolean2 = jSTerm0.isEval();
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3?Nco &W");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSJshopVars.coma = (-2);
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.clonePF();
      jSTerm1.standarizerPredicateForm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      boolean boolean1 = jSTerm0.isEval();
      assertTrue(boolean1 == boolean0);
      
      JSJshopVars.flagLevel = 32;
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertEquals("[?Nco]", jSTerm1.toString());
      assertTrue(jSTerm0.isConstant());
      assertEquals(1, jSSubstitution0.size());
      
      JSTerm jSTerm2 = new JSTerm();
      boolean boolean2 = jSTerm2.isVariable();
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3?Nco &W");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeConstant();
      JSJshopVars.coma = (-2);
      stringReader0.markSupported();
      streamTokenizer0.pushBack();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.clonePF();
      jSTerm1.standarizerPredicateForm();
      jSTerm0.equals(jSTerm1);
      boolean boolean0 = jSTerm0.isEval();
      JSJshopVars.flagLevel = (-2);
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      assertFalse(jSSubstitution0.fail());
      
      boolean boolean1 = jSTerm0.isVariable();
      assertFalse(jSTerm0.isFunction());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.retainAll(jSPredicateForm0);
      jSTerm0.listIterator();
      jSTerm0.removeAllElements();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("([] )", stringBuffer0.toString());
      
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      boolean boolean1 = jSTerm0.isGround();
      assertFalse(boolean1 == boolean0);
      
      jSTerm0.isFunction();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.print();
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.verticalL = (-2);
      StringReader stringReader0 = new StringReader("DcEVq fo.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution0.fail());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.clonePF();
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.listIterator();
      jSTerm0.removeAllElements();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("([] )", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
      
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      boolean boolean1 = jSTerm0.isGround();
      assertFalse(boolean1 == boolean0);
      
      jSTerm0.isFunction();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isConstant());
      
      JSTerm jSTerm3 = jSTerm2.call();
      assertTrue(jSTerm3.isFunction());
      assertEquals(10, jSTerm3.capacity());
      assertTrue(jSTerm2.isFunction());
      assertNotSame(jSTerm3, jSTerm2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.semicolon = 146;
      jSTerm0.makeConstant();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(jSTerm0.isConstant());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      jSTerm0.makeVariable();
      jSTerm0.setSize(2193);
      assertTrue(jSTerm0.isVariable());
      
      jSTerm0.toStr();
      assertFalse(jSTerm0.isFunction());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("LO|--2h-xip");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSTerm2.size());
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm2.isEval());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 110;
      jSTerm0.setSize(110);
      String string0 = "` ";
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?");
      StringReader stringReader1 = new StringReader("*#ZN(=GN;}J");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader2 = new StringReader("Undefined function to be evaluated  in Call statement");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(92);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.spliterator();
      jSTerm0.setSize(92);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clear();
      jSTerm0.setSize(92);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("7I2jde]i{e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals("7.0 ", stringBuffer0.toString());
      
      jSTerm1.equals(jSTerm1);
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      Integer integer0 = new Integer(1423);
      jSTerm1.add((Object) integer0);
      jSTerm0.isFunction();
      StringReader stringReader0 = new StringReader("=It%c|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clear();
      jSTerm0.isConstant();
      StringReader stringReader0 = new StringReader("9J>GaYZfw9RD?k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution0.fail());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("7I2jde]i{e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals("7.0 ", stringBuffer0.toString());
      
      boolean boolean0 = jSTerm1.isEval();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.VarCounter = (-1463);
      jSTerm0.clear();
      boolean boolean0 = jSTerm0.isVariable();
      boolean boolean1 = jSTerm0.isVariable();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clear();
      StringReader stringReader0 = new StringReader("GusAv&;");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertFalse(boolean0);
      assertFalse(jSTerm1.isEval());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%Bm&`dXto[1|~2<TBX");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.lessT = 1041;
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.isConstant();
      // Undeclared exception!
      try { 
        jSTerm2.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GqIQ'J=K");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isFunction());
      assertNotSame(jSTerm2, jSTerm1);
      assertTrue(jSTerm2.isConstant());
      assertEquals("[%%%]", jSTerm2.toString());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      jSTerm0.call();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeFunction();
      jSTerm1.makeFunction();
      assertTrue(jSTerm1.isFunction());
      
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.makeEval(true);
      JSTerm jSTerm3 = new JSTerm();
      boolean boolean0 = jSTerm2.equals(jSTerm0);
      assertTrue(jSTerm0.isEval());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clear();
      jSTerm0.setSize(3619);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeVariable();
      jSTerm1.makeVariable();
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&UqhE+[;l#&\"1");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("R");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(1303);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution0.fail());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("([] )", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&UqhE}[xl#Z&\"1");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      assertFalse(jSTerm0.isEval());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&UqhE+[;l#Z&\"1");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clear();
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(jSTerm0.isEval());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      boolean boolean0 = jSTerm0.isFunction();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" Expected (");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(false);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.isEval();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      jSTerm0.isConstant();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      StringReader stringReader0 = new StringReader("Q'hFo.Q?1P;P$0UW");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C&]qnME");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeEval(false);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSTerm) null);
      // Undeclared exception!
      try { 
        jSSubstitution0.addAll((-1), (Collection) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      JSJshopVars.astherisk = 0;
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Integer integer0 = new Integer(0);
      UnaryOperator.identity();
      unaryOperator0.apply(integer0);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator.identity();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = true;
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.parallelStream();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clear();
      jSTerm0.isConstant();
      StringReader stringReader0 = new StringReader("9J>GaYZfw9RD?k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals((-2), streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      assertFalse(jSTerm3.isFunction());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" Expected (");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar(34);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.add((Object) streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.matches(jSTerm3, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.lessT = 0;
      jSTerm0.spliterator();
      jSTerm0.makeEval(false);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isConstant();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.removeAll(jSSubstitution0);
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7Iz(0#2s|FZ[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertEquals(7.0, streamTokenizer0.nval, 0.01);
      assertTrue(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clear();
      jSTerm0.setSize(92);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("P5MLZf>hZbm6o^");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      streamTokenizer0.nval = (-1707.209564061);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&UqhE}[xl#Z&\"1");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6RDe-p[/U");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.skip(0L);
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.sval = "";
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
