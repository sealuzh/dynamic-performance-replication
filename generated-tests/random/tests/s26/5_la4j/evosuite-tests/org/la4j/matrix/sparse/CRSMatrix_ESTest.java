/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 11:00:04 GMT 2019
 */

package org.la4j.matrix.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.text.NumberFormat;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.LinearAlgebra;
import org.la4j.Matrix;
import org.la4j.Vector;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.RowMajorSparseMatrix;
import org.la4j.matrix.SparseMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.matrix.functor.MatrixPredicate;
import org.la4j.matrix.functor.MatrixProcedure;
import org.la4j.matrix.sparse.CRSMatrix;
import org.la4j.operation.ooplace.OoPlaceMatricesMultiplication;
import org.la4j.operation.ooplace.OoPlaceOuterProduct;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;
import org.la4j.vector.functor.VectorProcedure;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CRSMatrix_ESTest extends CRSMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(1, 1);
      SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      cRSMatrix0.toColumnMajorSparseMatrix();
      cRSMatrix0.nonZeroRowMajorIterator();
      Random.setNextRandom(1);
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      cRSMatrix0.mkString(numberFormat0, "      ", "");
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("org.la4j.Matrices$22");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(0, 0);
      cRSMatrix0.setRow(0, (double) 0);
      int int1 = (-1);
      double double0 = (-0.4375);
      cRSMatrix0.subtract((-0.4375));
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        cRSMatrix0.updateAt(0, (-1), matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.min();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(4459, 4459, 986.0, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 18;
      double double0 = Double.POSITIVE_INFINITY;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(18, Double.POSITIVE_INFINITY);
      int int1 = 3;
      cRSMatrix0.copyOfShape(18, 3);
      int int2 = 6;
      cRSMatrix0.sliceBottomRight(3, 6);
      int int3 = (-1492);
      int int4 = (-1);
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfShape((-1492), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -1492x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 2456;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(2456, 2456);
      cRSMatrix0.nonZeroRowMajorIterator();
      int int1 = 5;
      cRSMatrix0.maxInRow(5);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2457' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(671, 671);
      Matrix matrix0 = cRSMatrix0.copyOfShape(671, 17);
      assertEquals(17, matrix0.columns());
      assertEquals(671, matrix0.rows());
      assertEquals(671, cRSMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(1187, 1187, 1187);
      cRSMatrix0.subtract((double) 1187);
      double double0 = cRSMatrix0.maxInRow(35);
      assertEquals(0.0, double0, 0.01);
      
      Vector vector0 = cRSMatrix0.getColumn(933);
      assertEquals(1187, vector0.length());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1948, 1948, 1948);
      int int0 = 1933;
      cRSMatrix0.multiplyByItsTranspose();
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(1948, 1933);
      cRSMatrix0.iteratorOfNonZeroRows();
      int int1 = 3590;
      cRSMatrix1.toDenseMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix1.maxInRow(3590);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3590
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 37;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(37, 37);
      int int1 = 9;
      MatrixPredicate matrixPredicate0 = mock(MatrixPredicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(matrixPredicate0).test(anyInt() , anyInt());
      cRSMatrix0.non(matrixPredicate0);
      cRSMatrix0.minInRow(9);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)1;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 60;
      double double0 = 1.0;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(60, 1.0);
      cRSMatrix0.iteratorOfColumn(60);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      cRSMatrix0.euclideanNorm();
      // Undeclared exception!
      try { 
        cRSMatrix0.nonZeroIteratorOfRow(2446);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 2;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2279.862738442342);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (-1083.5597);
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      CRSMatrix cRSMatrix0 = CRSMatrix.from1DArray(2, 2, doubleArray0);
      cRSMatrix0.iteratorOfColumn(2);
      int int1 = (-1603);
      // Undeclared exception!
      try { 
        cRSMatrix0.set(2, (-1603), 1714.964315);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(1936);
      int int0 = 13;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachInRow(13, vectorProcedure0);
      double[][] doubleArray0 = new double[6][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 13;
      doubleArray1[1] = (double) 13;
      doubleArray1[2] = (double) 1936;
      doubleArray1[3] = (double) 13;
      doubleArray1[4] = (double) 13;
      doubleArray1[5] = (double) 1936;
      doubleArray1[6] = (double) 13;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 13;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (double) 1936;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (double) 13;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = (double) 13;
      doubleArray0[5] = doubleArray6;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 4359.39396411547;
      doubleArray1[1] = (-52.0);
      doubleArray1[2] = 1073.8325828005443;
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      cRSMatrix0.rank();
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.fromMatrixMarket("The density value should be between 0 and 1.0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 3154;
      int int1 = 9;
      CRSMatrix cRSMatrix0 = new CRSMatrix(3154, 9, 3154);
      int int2 = 13;
      Matrix.diagonal(13, 9);
      cRSMatrix0.max();
      cRSMatrix0.copyOfShape(9, 9);
      double double0 = (-52.0);
      DenseVector denseVector0 = DenseVector.constant(2, 2);
      // Undeclared exception!
      try { 
        cRSMatrix0.setColumn(9, (Vector) denseVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: 2. Should be: 3154.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 3;
      int int1 = 0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = (double) 4;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 4;
      intArray0[2] = 3;
      CRSMatrix cRSMatrix0 = new CRSMatrix(4, 3, 0, doubleArray0, intArray0, intArray0);
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      cRSMatrix0.toRowMajorSparseMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.update(matrixFunction0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OoPlaceMatricesMultiplication ooPlaceMatricesMultiplication0 = new OoPlaceMatricesMultiplication();
      DenseMatrix denseMatrix0 = DenseMatrix.identity(1);
      MockRandom mockRandom0 = new MockRandom();
      denseMatrix0.toString();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(1, (double) 1, (java.util.Random) mockRandom0);
      Matrix matrix0 = ooPlaceMatricesMultiplication0.apply(denseMatrix0, (RowMajorSparseMatrix) cRSMatrix0);
      assertEquals(1, matrix0.columns());
      
      CRSMatrix cRSMatrix1 = CRSMatrix.block(matrix0, cRSMatrix0, denseMatrix0, cRSMatrix0);
      cRSMatrix1.rowMajorIterator();
      assertEquals(2, cRSMatrix1.rows());
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZeroInColumn(2, vectorProcedure0);
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix1.eachInRow(1, vectorProcedure1);
      assertEquals(2, cRSMatrix1.columns());
      assertEquals(0.0, cRSMatrix1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      int int0 = 2208;
      SparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2208;
      doubleArray0[1] = (double) 2208;
      doubleArray0[2] = (double) 2208;
      doubleArray0[3] = (double) 2208;
      doubleArray0[4] = (double) 2208;
      doubleArray0[5] = (double) 2208;
      // Undeclared exception!
      RowMajorSparseMatrix.from1DArray(2208, 2208, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2427);
      cRSMatrix0.min();
      CRSMatrix cRSMatrix1 = CRSMatrix.identity(1353);
      int int0 = (-2219);
      cRSMatrix1.trace();
      int int1 = (-175);
      // Undeclared exception!
      try { 
        cRSMatrix1.set((-2219), (-175), 2427);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-2219' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3225, 3225);
      cRSMatrix0.getColumn(13);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 62.0;
      doubleArray0[1] = (double) (-1298);
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(13, (-1298), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 13x-1298
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 3;
      double double0 = (-548.3);
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(3, (-548.3));
      LinearAlgebra.InverterFactory linearAlgebra_InverterFactory0 = LinearAlgebra.InverterFactory.GAUSS_JORDAN;
      cRSMatrix0.multiplyByItsTranspose();
      MockRandom mockRandom0 = new MockRandom(3309L);
      // Undeclared exception!
      try { 
        Matrix.random(3, (-3144), mockRandom0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic2DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[][] doubleArray0 = new double[1][4];
      double[] doubleArray1 = new double[5];
      double double0 = 0.0;
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-3711.4532767478286);
      doubleArray1[2] = (-735.739);
      doubleArray1[3] = (-185.6539);
      doubleArray1[4] = (-2028.942);
      doubleArray0[0] = doubleArray1;
      CRSMatrix cRSMatrix0 = CRSMatrix.from2DArray(doubleArray0);
      Matrix matrix0 = cRSMatrix0.shuffle();
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom(1);
      long long0 = 1906L;
      mockRandom0.longs((long) 1, 1906L);
      mockRandom0.nextInt(1);
      CRSMatrix cRSMatrix0 = CRSMatrix.random(1, 1, (double) 1, (java.util.Random) mockRandom0);
      mockRandom0.doubles();
      int int1 = 2087;
      cRSMatrix0.toColumnMajorSparseMatrix();
      cRSMatrix0.nonZeroIterator();
      int int2 = (-1082);
      cRSMatrix0.setAll((-1.0));
      // Undeclared exception!
      try { 
        CRSMatrix.zero(0, (-1082), (-1671));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 0x-1082
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.fromCSV("");
      Matrix matrix0 = Matrix.unit(3, 3);
      // Undeclared exception!
      try { 
        CRSMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(565, 565, 269);
      double double0 = cRSMatrix0.max();
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(269, 3125, 3125);
      assertEquals(269, cRSMatrix1.rows());
      assertEquals(3125, cRSMatrix1.columns());
      
      cRSMatrix0.rowMajorIterator();
      double double1 = cRSMatrix0.minInRow(269);
      assertEquals(565, cRSMatrix0.columns());
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.zero(5, 1931);
      columnMajorSparseMatrix0.transpose();
      SparseMatrix.identity(1931);
      Matrix matrix0 = columnMajorSparseMatrix0.transpose();
      matrix0.copy();
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, columnMajorSparseMatrix0, matrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(2307);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0).when(vectorAccumulator0).accumulate();
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 2307;
      doubleArray1[1] = (double) 2307;
      doubleArray1[2] = (double) 2307;
      doubleArray1[3] = (double) 2307;
      doubleArray1[4] = (double) 2307;
      doubleArray1[5] = (double) 2307;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 2307;
      doubleArray2[1] = (double) 2307;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 2307;
      doubleArray3[1] = (double) 2307;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (double) 2307;
      doubleArray4[1] = (double) 2307;
      doubleArray4[2] = (double) 2307;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (double) 2307;
      doubleArray5[1] = (double) 2307;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = (double) 2307;
      doubleArray6[1] = (double) 2307;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = (double) 2307;
      doubleArray7[1] = (double) 2307;
      doubleArray7[2] = (double) 2307;
      doubleArray7[3] = (double) 2307;
      doubleArray7[4] = (double) 2307;
      doubleArray7[5] = (double) 2307;
      doubleArray0[6] = doubleArray7;
      Matrix.from2DArray(doubleArray0);
      // Undeclared exception!
      cRSMatrix0.foldNonZeroInColumns(vectorAccumulator0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)16;
      byte byte0 = (byte)28;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte)7;
      byte byte1 = (byte)42;
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)38;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 17;
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(17);
      int int1 = 2347;
      int int2 = 2345;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 17;
      doubleArray0[1] = (double) 9;
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInRow(1, vectorAccumulator0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.from1DArray(2345, 9, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 13;
      CRSMatrix cRSMatrix0 = new CRSMatrix(13, 3);
      Matrix matrix0 = cRSMatrix0.blankOfColumns(0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(5, 5, 0);
      Matrix.diagonal(5, 5);
      cRSMatrix0.removeLastColumn();
      cRSMatrix0.eachNonZeroInColumn(0, (VectorProcedure) null);
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2803;
      doubleArray0[1] = (double) 2803;
      doubleArray0[2] = (double) 2803;
      doubleArray0[3] = (double) 1;
      // Undeclared exception!
      CRSMatrix.from1DArray(2803, 1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 62;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(62, 62);
      cRSMatrix0.nonZeroColumnMajorIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 9;
      MockRandom mockRandom0 = new MockRandom(9);
      mockRandom0.nextInt();
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(9, 1.0, (java.util.Random) mockRandom0);
      int int1 = 1240;
      // Undeclared exception!
      try { 
        cRSMatrix0.getRow(1240);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1241
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OoPlaceOuterProduct ooPlaceOuterProduct0 = new OoPlaceOuterProduct();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2202.828592954571;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 3562);
      DenseVector denseVector0 = DenseVector.constant(3562, 1848.5676790638);
      ooPlaceOuterProduct0.apply(sparseVector0, denseVector0);
      doubleArray0[1] = 2262.767;
      doubleArray0[2] = 4066.1953333682;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-3537.2);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = Double.POSITIVE_INFINITY;
      DenseVector denseVector1 = DenseVector.fromArray(doubleArray0);
      Matrix matrix0 = ooPlaceOuterProduct0.apply(denseVector1, denseVector1);
      // Undeclared exception!
      try { 
        CRSMatrix.block(matrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 1298;
      MockRandom mockRandom0 = new MockRandom(50L);
      mockRandom0.nextInt();
      // Undeclared exception!
      CRSMatrix.random(1298, 90, 1.0, (java.util.Random) mockRandom0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 6;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(6, 6, 6);
      int int1 = 13;
      // Undeclared exception!
      try { 
        cRSMatrix0.swapRows(13, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 32;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(32, 32);
      String string0 = "Sides of blocks are incompatible!";
      // Undeclared exception!
      cRSMatrix0.determinant();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(3297L);
      CRSMatrix cRSMatrix0 = CRSMatrix.randomSymmetric(0, (-436.0), (java.util.Random) mockRandom0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No rows or columns selected.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      double double0 = 767.32185;
      cRSMatrix0.euclideanNorm();
      cRSMatrix0.divide(767.32185);
      double double1 = (-1.0);
      cRSMatrix0.add((-1.0));
      int int0 = (-1694);
      // Undeclared exception!
      try { 
        cRSMatrix0.set((-1694), (-1694), (-1694));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '-1694' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 4;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(4, 4);
      // Undeclared exception!
      try { 
        cRSMatrix0.each((MatrixProcedure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 30;
      int[] intArray0 = new int[7];
      intArray0[0] = 30;
      intArray0[1] = 30;
      intArray0[2] = 30;
      intArray0[3] = 1986;
      intArray0[4] = 30;
      intArray0[5] = 30;
      intArray0[6] = 30;
      int[] intArray1 = new int[8];
      intArray1[0] = 30;
      intArray1[1] = 30;
      intArray1[2] = 1986;
      intArray1[3] = 30;
      intArray1[4] = 1986;
      intArray1[5] = 30;
      intArray1[6] = 30;
      intArray1[7] = 30;
      CRSMatrix cRSMatrix0 = new CRSMatrix(30, 30, 30, doubleArray0, intArray0, intArray1);
      // Undeclared exception!
      try { 
        cRSMatrix0.product();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 3035;
      CRSMatrix cRSMatrix0 = new CRSMatrix(3035, 3035);
      cRSMatrix0.copyOfShape(3035, 3035);
      int int1 = 482;
      SparseMatrix.zero(3035, 482);
      // Undeclared exception!
      cRSMatrix0.setRow(482, (double) 3035);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1948, 1948, 1948);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(1948, 1933);
      cRSMatrix0.iteratorOfNonZeroRows();
      int int0 = 3590;
      cRSMatrix1.toDenseMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix1.maxInRow(3590);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3590
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 65;
      int int1 = 13;
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 13;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(65, 13, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 1916;
      int int1 = 5;
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(1916, 5);
      VectorAccumulator vectorAccumulator0 = mock(VectorAccumulator.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorAccumulator0).accumulate();
      cRSMatrix0.foldNonZeroInRow(1894, vectorAccumulator0);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.block(cRSMatrix0, cRSMatrix0, cRSMatrix0, cRSMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '6' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 1018;
      double double0 = 0.0;
      MockRandom mockRandom0 = new MockRandom(1018);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.randomSymmetric(1018, 0.0, (java.util.Random) mockRandom0);
      // Undeclared exception!
      try { 
        CRSMatrix.block(columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0, columnMajorSparseMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '1019' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[][] doubleArray0 = new double[7][8];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-3108.068752967);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 2303.393179;
      doubleArray1[3] = 1038.5559115;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 13.0;
      doubleArray1[6] = 2934.0;
      doubleArray1[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 13.0;
      doubleArray2[1] = 1.0;
      doubleArray2[2] = 13.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (-981.378378958943);
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 2303.393179;
      doubleArray3[3] = (-716.143163336066);
      doubleArray3[4] = 2934.0;
      doubleArray3[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[0];
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[7];
      doubleArray5[0] = Double.NEGATIVE_INFINITY;
      doubleArray5[1] = 2934.0;
      doubleArray5[2] = (-3108.068752967);
      doubleArray5[3] = (-716.143163336066);
      doubleArray5[4] = (-3108.068752967);
      doubleArray5[5] = (-716.143163336066);
      doubleArray5[6] = (-716.143163336066);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 13.0;
      doubleArray6[1] = 2303.393179;
      doubleArray6[2] = (-981.378378958943);
      doubleArray6[3] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = 1.0;
      doubleArray7[1] = (-2281.0);
      doubleArray7[2] = 2303.393179;
      doubleArray7[3] = 1038.5559115;
      doubleArray7[4] = 13.0;
      doubleArray0[6] = doubleArray7;
      // Undeclared exception!
      try { 
        CRSMatrix.from2DArray(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 65;
      int int1 = 13;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 13;
      doubleArray0[1] = (double) 13;
      // Undeclared exception!
      try { 
        CRSMatrix.from1DArray(65, 13, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(63, 63);
      double double0 = cRSMatrix0.max();
      assertEquals(63, cRSMatrix0.cardinality());
      assertEquals(63.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      cRSMatrix0.toCSV((NumberFormat) null);
      int int0 = 809;
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs(0L);
      // Undeclared exception!
      try { 
        RowMajorSparseMatrix.random(809, 809, 957.3033732937, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 367;
      int int1 = (-1982);
      // Undeclared exception!
      try { 
        CRSMatrix.zero(367, 367, (-1982));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -1982.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "$9jL+L?ag-j'6A";
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket("$9jL+L?ag-j'6A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 13;
      intArray0[2] = (-2134);
      intArray0[3] = 32;
      intArray0[4] = (-641);
      intArray0[5] = 0;
      intArray0[6] = (-2778);
      intArray0[7] = 1670;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '0' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = (-640);
      int int1 = (-701);
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random((-640), (-701), (double) (-701), (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 6;
      cRSMatrix0.toRowMajorSparseMatrix();
      // Undeclared exception!
      try { 
        cRSMatrix0.minInRow(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-116), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -116x0
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = (-1659);
      // Undeclared exception!
      try { 
        CRSMatrix.identity((-1659));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)67;
      // Undeclared exception!
      try { 
        CRSMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CRSMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = (double) 4;
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 4;
      intArray0[2] = 3;
      CRSMatrix cRSMatrix0 = new CRSMatrix(4, 3, 0, doubleArray0, intArray0, intArray0);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      cRSMatrix0.eachNonZero(matrixProcedure0);
      assertEquals(3, cRSMatrix0.columns());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 1;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        CRSMatrix.random(1, 1, 735.05832472589, (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(7);
      cRSMatrix0.copyOfShape(7, 7);
      MockRandom mockRandom0 = new MockRandom(7);
      // Undeclared exception!
      try { 
        CRSMatrix.random(7, 7, (-680.5785251), (java.util.Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.matrix.sparse.CRSMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.identity(72);
      cRSMatrix0.toBinary();
      int int0 = 74;
      cRSMatrix0.copyOfShape(72, 74);
      int int1 = (-4316);
      int int2 = 71;
      cRSMatrix0.power(1);
      int int3 = (-1149);
      // Undeclared exception!
      try { 
        cRSMatrix0.copyOfShape(72, (-1149));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 72x-1149
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix();
      int int0 = 1318;
      int int1 = (-4005);
      // Undeclared exception!
      try { 
        cRSMatrix0.blankOfShape(1318, (-4005));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1318x-4005
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Random.setNextRandom(1339);
      int int0 = (-103);
      // Undeclared exception!
      try { 
        CRSMatrix.zero(1339, (-103));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: 1339x-103
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = 62;
      CRSMatrix cRSMatrix0 = CRSMatrix.diagonal(62, 62);
      cRSMatrix0.nonZeroColumnMajorIterator();
      MatrixFunction matrixFunction0 = mock(MatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, 1919.25793197, 86.98425291990094, Double.NEGATIVE_INFINITY, 1434.049).when(matrixFunction0).evaluate(anyInt() , anyInt() , anyDouble());
      // Undeclared exception!
      cRSMatrix0.update(matrixFunction0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromMatrixMarket((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      int int0 = 3;
      int int1 = 3200;
      CRSMatrix cRSMatrix0 = new CRSMatrix(3, 3200);
      int[] intArray0 = new int[4];
      cRSMatrix0.copy();
      intArray0[0] = 3;
      intArray0[1] = 3200;
      cRSMatrix0.toRowMajorSparseMatrix();
      double double0 = Double.NEGATIVE_INFINITY;
      cRSMatrix0.setAll(Double.NEGATIVE_INFINITY);
      // Undeclared exception!
      cRSMatrix0.power(3);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 8;
      int int1 = 0;
      CRSMatrix cRSMatrix0 = new CRSMatrix(8, 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 8;
      intArray0[1] = 0;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        cRSMatrix0.removeLastColumn();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Illegal row number, must be 0..-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        CRSMatrix.fromCSV("This system can not be solved: coefficient matrix is rank deficient.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = (-2352);
      // Undeclared exception!
      try { 
        CRSMatrix.zero((-2352), (-1), 89);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong matrix dimensions: -2352x-1
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CRSMatrix cRSMatrix0 = new CRSMatrix(3174, 3174);
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 3174;
      doubleArray1[1] = (double) 3174;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 3174;
      doubleArray2[1] = (double) 3174;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (double) 3174;
      doubleArray3[1] = (double) 3174;
      doubleArray3[2] = (double) 3174;
      doubleArray3[3] = (double) 3174;
      doubleArray3[4] = (double) 3174;
      doubleArray3[5] = (double) 3174;
      doubleArray3[6] = Double.POSITIVE_INFINITY;
      doubleArray3[7] = (double) 3174;
      doubleArray3[8] = 1.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 2430.32835242;
      doubleArray4[1] = (double) 3174;
      doubleArray3[4] = (double) 3174;
      doubleArray0[3] = doubleArray4;
      CRSMatrix.from2DArray(doubleArray0);
      CRSMatrix cRSMatrix1 = CRSMatrix.zero(3174, 1330, 1330);
      MatrixProcedure matrixProcedure0 = mock(MatrixProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      cRSMatrix1.each(matrixProcedure0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CRSMatrix cRSMatrix0 = CRSMatrix.zero(2001, 2001);
      cRSMatrix0.toMatrixMarket();
      cRSMatrix0.iteratorOfNonZeroRows();
      cRSMatrix0.max();
      cRSMatrix0.setAll(0.0);
      cRSMatrix0.min();
      cRSMatrix0.copyOfShape(4291, 4291);
      cRSMatrix0.getColumn(1260);
      CRSMatrix.fromCSV("");
      double[] doubleArray0 = new double[0];
      CRSMatrix.diagonal(2001, 2001);
      int[] intArray0 = new int[3];
      intArray0[0] = 5;
      intArray0[1] = 1260;
      intArray0[2] = 2001;
      // Undeclared exception!
      try { 
        cRSMatrix0.select(intArray0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '2001' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }
}
