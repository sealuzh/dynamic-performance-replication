/*
 * This file was automatically generated by EvoSuite
 * Tue Jul 17 10:55:43 GMT 2018
 */

package org.la4j.matrix.dense;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Matrix;
import org.la4j.matrix.ColumnMajorSparseMatrix;
import org.la4j.matrix.DenseMatrix;
import org.la4j.matrix.MatrixFactory;
import org.la4j.matrix.dense.Basic1DMatrix;
import org.la4j.matrix.functor.MatrixFunction;
import org.la4j.operation.MatrixVectorOperation;
import org.la4j.operation.ooplace.OoPlaceVectorHadamardProduct;
import org.la4j.vector.SparseVector;
import org.la4j.vector.functor.VectorAccumulator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Basic1DMatrix_ESTest extends Basic1DMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(0L);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte)16;
      mockRandom0.nextBytes(byteArray0);
      mockRandom0.doubles((-1.0), 0.0);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.random(1163, 8, mockRandom0);
      assertEquals(8, basic1DMatrix0.columns());
      assertEquals(1163, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.random(1, 1, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      // Undeclared exception!
      try { 
        basic1DMatrix0.set(2864, 895, 2864);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '2864' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      int int0 = (-1260);
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapColumns(0, (-1260));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1260
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.fromCSV("");
      Matrix matrix0 = columnMajorSparseMatrix0.add(268.1383618346);
      matrix0.toString();
      matrix0.multiply((Matrix) columnMajorSparseMatrix0);
      matrix0.toBinary();
      int int0 = 0;
      Matrix.diagonal(0, 0);
      Basic1DMatrix.block(matrix0, matrix0, columnMajorSparseMatrix0, matrix0);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.fromCSV("");
      basic1DMatrix0.spliterator();
      int int1 = 1955;
      DenseMatrix.identity(1955);
      basic1DMatrix0.copyOfShape(0, 0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[4];
      org.evosuite.runtime.Random.setNextRandom(9);
      doubleArray1[0] = (double) 9;
      doubleArray1[1] = (double) 9;
      doubleArray1[2] = (double) 9;
      doubleArray1[3] = (double) 9;
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix(9, 9, doubleArray1);
      // Undeclared exception!
      try { 
        basic1DMatrix0.copyOfShape(9, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      Basic1DMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromMatrixMarket("$<D\\!b0BD\"vNTSyu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2034.1837339068;
      doubleArray1[2] = (-1.0);
      doubleArray0[0] = doubleArray1;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      int int0 = 0;
      basic1DMatrix0.sum();
      basic1DMatrix0.getRow(0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Column '4' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(0);
      MockRandom mockRandom0 = new MockRandom(0);
      basic1DMatrix0.toArray();
      Matrix matrix0 = basic1DMatrix0.blankOfShape(0, 1805);
      assertEquals(1805, matrix0.columns());
      assertEquals(0, basic1DMatrix0.columns());
      assertEquals(0, matrix0.rows());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      basic1DMatrix0.toBinary();
      double[][] doubleArray1 = basic1DMatrix0.toArray();
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Basic1DMatrix.identity(0);
      MockRandom mockRandom0 = new MockRandom(0);
      Matrix.randomSymmetric(0, mockRandom0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-24);
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        basic1DMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom(212L);
      mockRandom0.nextLong();
      mockRandom0.longs(212L);
      mockRandom0.longs();
      Basic1DMatrix.randomSymmetric(0, mockRandom0);
      MatrixVectorOperation<String> matrixVectorOperation0 = (MatrixVectorOperation<String>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      SparseVector sparseVector0 = SparseVector.zero(52);
      sparseVector0.product();
      ooPlaceVectorHadamardProduct0.ensureApplicableTo(sparseVector0, sparseVector0);
      Basic1DMatrix.fromCSV("");
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = 0.0;
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from1DArray(3, 3, doubleArray0);
      MatrixFactory<Matrix> matrixFactory0 = (MatrixFactory<Matrix>) mock(MatrixFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Matrix) null).when(matrixFactory0).apply(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        basic1DMatrix0.to(matrixFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.DenseMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2034.1837339068;
      doubleArray1[2] = (-1.0);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      basic1DMatrix0.sum();
      basic1DMatrix0.getRow(0);
      Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, basic1DMatrix0);
      MockRandom mockRandom0 = new MockRandom(0L);
      DenseMatrix.random(1547, 0, mockRandom0);
      Basic1DMatrix.identity(17);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-57);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)79;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.unit(44, 44);
      // Undeclared exception!
      try { 
        basic1DMatrix0.swapRows((-1680), 37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -73920
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.identity(0);
      MockRandom mockRandom0 = new MockRandom(0);
      Matrix.randomSymmetric(0, mockRandom0);
      basic1DMatrix0.swapRows(0, 0);
      basic1DMatrix0.swapRows((-1039), 0);
      basic1DMatrix0.setAll(2161.268858372781);
      assertEquals(0, basic1DMatrix0.rows());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.swapColumns(9266, 9266);
      // Undeclared exception!
      try { 
        basic1DMatrix0.get(16, 16);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '16' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      basic1DMatrix0.swapColumns(9266, 9266);
      int int0 = 13;
      basic1DMatrix0.copyOfShape(13, 9);
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromCSV("){CqF*\"GEu`(QX[$^n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom(212L);
      mockRandom0.nextLong();
      mockRandom0.longs(212L);
      mockRandom0.longs();
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.randomSymmetric(0, mockRandom0);
      MatrixVectorOperation<String> matrixVectorOperation0 = (MatrixVectorOperation<String>) mock(MatrixVectorOperation.class, new ViolatedAssumptionAnswer());
      OoPlaceVectorHadamardProduct ooPlaceVectorHadamardProduct0 = new OoPlaceVectorHadamardProduct();
      SparseVector.zero(46);
      Matrix matrix0 = Matrix.diagonal(46, (-3347.30486077));
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(matrix0, matrix0, basic1DMatrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      Basic1DMatrix basic1DMatrix0 = new Basic1DMatrix();
      byte[] byteArray1 = basic1DMatrix0.toBinary();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 29;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        Basic1DMatrix.randomSymmetric(29, (Random) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[][] doubleArray0 = new double[5][1];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      basic1DMatrix0.swapColumns(515, 515);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 80.14831173564563;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 9;
      doubleArray1[3] = (double) 515;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 515;
      Matrix matrix0 = Matrix.from1DArray(32, 9, doubleArray1);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, matrix0, matrix0, matrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      MockRandom mockRandom0 = new MockRandom();
      Basic1DMatrix basic1DMatrix1 = Basic1DMatrix.randomSymmetric(0, mockRandom0);
      basic1DMatrix1.swapColumns(0, 107);
      // Undeclared exception!
      try { 
        basic1DMatrix0.get(307, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Row '307' is invalid.
         //
         verifyException("org.la4j.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      Basic1DMatrix.fromBinary(byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)56;
      byteArray1[1] = (byte)54;
      byteArray1[2] = (byte)7;
      byteArray1[3] = (byte)102;
      byteArray1[4] = (byte) (-108);
      byteArray1[5] = (byte)9;
      // Undeclared exception!
      try { 
        Basic1DMatrix.fromBinary(byteArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode Basic1DMatrix from the given byte array.
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[][] doubleArray0 = new double[1][1];
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.from2DArray(doubleArray0);
      DenseMatrix denseMatrix0 = DenseMatrix.unit(481, 481);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(basic1DMatrix0, basic1DMatrix0, basic1DMatrix0, denseMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Sides of blocks are incompatible!
         //
         verifyException("org.la4j.matrix.dense.Basic1DMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray0);
      // Undeclared exception!
      try { 
        Basic1DMatrix.block(denseMatrix0, denseMatrix0, denseMatrix0, denseMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[][] doubleArray0 = new double[2][1];
      double[][] doubleArray1 = new double[2][8];
      double[] doubleArray2 = new double[0];
      doubleArray1[0] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray1[1] = doubleArray3;
      DenseMatrix denseMatrix0 = DenseMatrix.from2DArray(doubleArray1);
      ColumnMajorSparseMatrix columnMajorSparseMatrix0 = ColumnMajorSparseMatrix.from2DArray(doubleArray0);
      Basic1DMatrix basic1DMatrix0 = Basic1DMatrix.block(denseMatrix0, columnMajorSparseMatrix0, denseMatrix0, columnMajorSparseMatrix0);
      assertEquals(1, basic1DMatrix0.columns());
      assertEquals(4, basic1DMatrix0.rows());
  }
}
