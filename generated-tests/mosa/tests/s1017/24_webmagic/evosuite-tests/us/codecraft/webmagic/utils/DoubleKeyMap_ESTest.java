/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 08:37:08 GMT 2018
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
      Object object0 = doubleKeyMap0.get((Object) class0, (String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Object, Object>();
      doubleKeyMap0.remove((Integer) null);
      Integer integer0 = new Integer((-93));
      doubleKeyMap0.put(integer0, (Object) "", (Object) integer0);
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>();
      // Undeclared exception!
      try { 
        doubleKeyMap1.put((Object) "", (Map<Object, Object>) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DoubleKeyMap<Object, Object, String> doubleKeyMap0 = new DoubleKeyMap<Object, Object, String>();
      Map<String, Map<String, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, String, Object> doubleKeyMap1 = new DoubleKeyMap<String, String, Object>(map0);
      HashMap<String, Map<Object, String>> hashMap0 = new HashMap<String, Map<Object, String>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap2 = new DoubleKeyMap<String, Object, String>(hashMap0, class0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        doubleKeyMap2.put("", object0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DoubleKeyMap<Integer, Map<Object, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, String>, Integer>();
      doubleKeyMap0.newMap();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      doubleKeyMap0.put((Integer) null, (Map<Object, String>) hashMap0, (Integer) null);
      HashMap<Map<Object, String>, Integer> hashMap1 = new HashMap<Map<Object, String>, Integer>();
      hashMap1.putIfAbsent(hashMap0, (Integer) null);
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>();
      Map<Object, String> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.remove((Integer) null, map0);
      Integer integer0 = hashMap1.put(hashMap0, (Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DoubleKeyMap<Integer, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Integer, Integer, Object>();
      DoubleKeyMap<String, Object, String> doubleKeyMap1 = new DoubleKeyMap<String, Object, String>();
      doubleKeyMap1.put("%kFi)~du8%Puh2t^I#R", (Object) "%kFi)~du8%Puh2t^I#R", "%kFi)~du8%Puh2t^I#R");
      doubleKeyMap1.put("%kFi)~du8%Puh2t^I#R", (Object) "%kFi)~du8%Puh2t^I#R", "5Y(1Tc/]");
      doubleKeyMap1.put((String) null, (Object) null, (String) null);
      HashMap<Map<Object, String>, Map<Object, Integer>> hashMap0 = new HashMap<Map<Object, String>, Map<Object, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Map<Object, String>, Object, Integer> doubleKeyMap2 = new DoubleKeyMap<Map<Object, String>, Object, Integer>(hashMap0, class0);
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      doubleKeyMap2.remove((Map<Object, String>) hashMap1, (Object) null);
      DoubleKeyMap<Object, String, Integer> doubleKeyMap3 = null;
      try {
        doubleKeyMap3 = new DoubleKeyMap<Object, String, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
      doubleKeyMap0.put((Object) class0, "d{Nv1n&(f", (Object) null);
      doubleKeyMap0.get((Object) class0, (String) null);
      DoubleKeyMap<Object, Map<Object, String>, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Map<Object, String>, Object>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap2 = new DoubleKeyMap<String, Object, Object>((Map<String, Map<Object, Object>>) null, class0);
      Map<Object, String> map0 = doubleKeyMap2.newMap();
      Object object0 = doubleKeyMap1.remove((Object) "d{Nv1n&(f", map0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DoubleKeyMap<Integer, Map<Object, String>, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, Map<Object, String>, Integer>();
      doubleKeyMap0.newMap();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      doubleKeyMap0.put((Integer) null, (Map<Object, String>) hashMap0, (Integer) null);
      hashMap0.putIfAbsent((Object) null, "0k>8");
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>();
      Map<Object, String> map0 = doubleKeyMap1.newMap();
      doubleKeyMap0.remove((Integer) null, map0);
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, String, Map<Object, String>> doubleKeyMap2 = null;
      try {
        doubleKeyMap2 = new DoubleKeyMap<String, String, Map<Object, String>>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }
}
