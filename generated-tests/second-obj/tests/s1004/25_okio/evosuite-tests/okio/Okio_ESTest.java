/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:30:54 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketException;
import java.nio.file.NoSuchFileException;
import java.nio.file.OpenOption;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import okio.Buffer;
import okio.BufferedSink;
import okio.ByteString;
import okio.GzipSink;
import okio.Okio;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Sink;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Okio_ESTest extends Okio_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Path path0 = mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[1];
      // Undeclared exception!
      try { 
        Okio.sink(path0, openOptionArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      try { 
        Okio.sink((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      try { 
        Okio.sink((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      MockException mockException0 = new MockException();
      AssertionError assertionError0 = new AssertionError("v'xLh!idw2", mockException0);
      boolean boolean0 = Okio.isAndroidGetsocknameError(assertionError0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OpenOption[] openOptionArray0 = new OpenOption[0];
      // Undeclared exception!
      try { 
        Okio.source((Path) null, openOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Okio.blackhole();
      // Undeclared exception!
      try { 
        Okio.sink((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<!", "<!");
      Path path0 = mockFile0.toPath();
      OpenOption[] openOptionArray0 = new OpenOption[0];
      try { 
        Okio.source(path0, openOptionArray0);
        fail("Expecting exception: NoSuchFileException");
      
      } catch(NoSuchFileException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        Okio.source((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AssertionError assertionError0 = new AssertionError();
      Object object0 = new Object();
      AssertionError assertionError1 = new AssertionError(object0);
      assertionError0.initCause(assertionError1);
      Okio.isAndroidGetsocknameError(assertionError0);
      StandardOpenOption standardOpenOption0 = StandardOpenOption.DSYNC;
      assertEquals(StandardOpenOption.DSYNC, standardOpenOption0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Okio.sink((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.appendingSink((File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // file == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.sink((Socket) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // socket == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Okio.source((Socket) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // socket == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Okio.blackhole();
      // Undeclared exception!
      try { 
        Okio.source((InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OpenOption[] openOptionArray0 = new OpenOption[0];
      // Undeclared exception!
      try { 
        Okio.sink((Path) null, openOptionArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // path == null
         //
         verifyException("okio.Okio", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio/08EUvx");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "08EUvx");
      MockFile mockFile0 = new MockFile("08EUvx");
      Source source0 = Okio.source((File) mockFile0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      byte[] byteArray0 = new byte[2];
      realBufferedSource0.readFully(byteArray0);
      AssertionError assertionError0 = new AssertionError(object0);
      StandardOpenOption standardOpenOption0 = StandardOpenOption.DSYNC;
      StandardOpenOption standardOpenOption1 = StandardOpenOption.SPARSE;
      boolean boolean0 = Okio.isAndroidGetsocknameError(assertionError0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Okio.blackhole();
      MockFile mockFile0 = new MockFile("VnnEaFb ^8?-");
      mockFile0.toPath();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("VnnEaFb ^8?-");
      mockFile0.setReadOnly();
      Source source0 = Okio.source((File) mockFile0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      realBufferedSource0.toString();
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0, byteString0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("A\"Wu", "A\"Wu");
      mockFile0.toPath();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      AssertionError assertionError0 = new AssertionError();
      mockFile0.mkdir();
      Sink sink0 = Okio.appendingSink(mockFile0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Failed to close timed out socket ");
      GzipSink gzipSink0 = new GzipSink(sink0);
      GzipSink gzipSink1 = new GzipSink(gzipSink0);
      gzipSink1.close();
      BufferedSink bufferedSink0 = Okio.buffer((Sink) gzipSink1);
      MockInetAddress.getLocalHost();
      ((RealBufferedSink) bufferedSink0).timeout();
      AssertionError assertionError1 = new AssertionError(608L);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "A\"Wu");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Sink sink0 = Okio.sink((OutputStream) pipedOutputStream0);
      AssertionError assertionError0 = new AssertionError(sink0);
      Sink sink1 = Okio.blackhole();
      assertFalse(sink1.equals((Object)sink0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("nEaFb ^8?-");
      mockFile0.toPath();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Source source0 = Okio.source((File) mockFile0);
      mockFile0.toPath();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio");
      FileSystemHandling.createFolder(evoSuiteFile0);
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      realBufferedSource0.close();
      System.setCurrentTimeMillis(6L);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("d");
      mockFile0.toPath();
      MockFile mockFile1 = new MockFile("d");
      MockFile mockFile2 = new MockFile("d");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Okio.source((File) mockFile1);
      Sink sink0 = Okio.appendingSink(mockFile2);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/mnt/gaiagpfs/users/homedirs/apanichella/Evosuite_performance/Dataset/gordon_script_sum/projects/25_okio");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "d");
      StandardOpenOption standardOpenOption0 = StandardOpenOption.TRUNCATE_EXISTING;
      AssertionError assertionError0 = new AssertionError((long) (-17));
      realBufferedSink0.flush();
      Object object0 = new Object();
      StandardOpenOption standardOpenOption1 = StandardOpenOption.DSYNC;
      StandardOpenOption standardOpenOption2 = StandardOpenOption.DSYNC;
      assertFalse(standardOpenOption2.equals((Object)standardOpenOption0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StandardOpenOption standardOpenOption0 = StandardOpenOption.SYNC;
      AssertionError assertionError0 = new AssertionError((long) (-17));
      Object object0 = new Object();
      StandardOpenOption standardOpenOption1 = StandardOpenOption.DSYNC;
      MockFile mockFile0 = new MockFile("");
      StandardOpenOption standardOpenOption2 = StandardOpenOption.CREATE;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Sink sink0 = Okio.sink((OutputStream) pipedOutputStream0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      realBufferedSink0.close();
      Buffer buffer0 = realBufferedSink0.buffer();
      Okio.buffer((Source) buffer0);
      Okio.buffer(sink0);
      try { 
        Okio.appendingSink(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Sink sink0 = Okio.blackhole();
      GzipSink gzipSink0 = new GzipSink(sink0);
      gzipSink0.close();
      Okio.buffer((Sink) gzipSink0);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      assertTrue(inetAddress0.isSiteLocalAddress());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("A\"Wu");
      mockFile0.toPath();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      AssertionError assertionError0 = new AssertionError();
      File file0 = mockFile0.getCanonicalFile();
      Okio.source((File) mockFile0);
      mockFile0.mkdir();
      Sink sink0 = Okio.appendingSink(mockFile0);
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(sink0);
      GzipSink gzipSink0 = new GzipSink(realBufferedSink0);
      gzipSink0.close();
      MockSocket mockSocket0 = new MockSocket();
      AssertionError assertionError1 = new AssertionError(false);
      assertionError1.printStackTrace();
      file0.toPath();
      StandardOpenOption standardOpenOption0 = StandardOpenOption.CREATE;
      try { 
        Okio.source((Socket) mockSocket0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Socket is not connected
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Sink sink0 = Okio.blackhole();
      GzipSink gzipSink0 = new GzipSink(sink0);
      gzipSink0.flush();
      gzipSink0.timeout();
      Okio.buffer((Sink) gzipSink0);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, 0, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@645a56e6
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }
}
