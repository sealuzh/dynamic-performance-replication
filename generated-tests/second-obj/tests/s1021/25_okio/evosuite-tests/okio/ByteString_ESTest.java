/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:40:45 GMT 2018
 */

package okio;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.InputStream;
import java.io.ObjectStreamConstants;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.URISyntaxException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.zip.Inflater;
import okio.Buffer;
import okio.BufferedSource;
import okio.ByteString;
import okio.GzipSource;
import okio.HashingSink;
import okio.HashingSource;
import okio.InflaterSource;
import okio.Pipe;
import okio.RealBufferedSink;
import okio.RealBufferedSource;
import okio.Source;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteString_ESTest extends ByteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Charset.defaultCharset();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      // Undeclared exception!
      try { 
        byteString0.substring(51);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RE\"D6cHZ)/$U)k#/");
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)11;
      ByteString byteString0 = ByteString.of(byteArray0);
      byte byte0 = ObjectStreamConstants.TC_ARRAY;
      byteString0.asByteBuffer();
      byte[] byteArray1 = byteString0.internalArray();
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      buffer0.readAndWriteUnsafe(buffer_UnsafeCursor0);
      HashingSink hashingSink0 = HashingSink.sha1(buffer_UnsafeCursor0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      ByteString byteString1 = byteString0.md5();
      byteString1.indexOf(byteString0);
      byteString1.internalArray();
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.indexOf(byteString0, (int) (byte)0);
      ByteString byteString1 = byteString0.toAsciiUppercase();
      byteString0.base64();
      byteString0.toString();
      byteString1.lastIndexOf(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2616), 490);
      byteArrayInputStream0.close();
      // Undeclared exception!
      try { 
        ByteString.read(byteArrayInputStream0, 59);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      byteString1.indexOf(byteString0, (int) (byte)103);
      ByteString byteString2 = byteString1.toAsciiUppercase();
      byteString0.base64();
      byteString0.equals("ZwAAAA==");
      byteString2.startsWith(byteArray0);
      // Undeclared exception!
      try { 
        byteString2.substring((int) (byte)103);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex < beginIndex
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Pipe pipe0 = new Pipe(1L);
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(pipe_PipeSource0);
      HashingSink hashingSink0 = HashingSink.sha1(realBufferedSource0.buffer);
      ByteString byteString0 = hashingSink0.hash();
      byteString0.asByteBuffer();
      // Undeclared exception!
      try { 
        byteString0.startsWith((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-37);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.asByteBuffer();
      int int0 = byteString0.indexOf(byteArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      boolean boolean0 = byteString0.rangeEquals(1, byteArray0, 56, 505);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      byteString0.startsWith(byteString1);
      // Undeclared exception!
      try { 
        byteString0.getByte(110);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 110
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("\u2026]", charset0);
      byteString0.toString();
      byteString0.sha512();
      int int0 = byteString0.size();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ByteString.decodeHex("r;!;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex string: r;!;
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        ByteString.decodeHex("r;8!;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: 
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)4;
      ByteString.decodeHex("");
      // Undeclared exception!
      try { 
        ByteString.of(byteArray0, (int) (byte)4, (-866));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=4 offset=4 byteCount=-866
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)5;
      byteArray0[1] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray1 = new byte[3];
      byteArray1[1] = (byte)5;
      byteString0.lastIndexOf(byteArray1);
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      byteString0.toString();
      byteString0.string(charset0);
      ByteString.codePointIndexToCharIndex("[hex=000005]", (byte)5);
      byteString0.base64();
      byteString0.asByteBuffer();
      // Undeclared exception!
      try { 
        Charset.forName("[hex=000005]");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // [hex=000005]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      int int0 = ObjectStreamConstants.baseWireHandle;
      Charset.defaultCharset();
      Pipe pipe0 = new Pipe(8257536);
      Pipe.PipeSink pipe_PipeSink0 = pipe0.new PipeSink();
      HashingSink hashingSink0 = HashingSink.md5(pipe_PipeSink0);
      ByteString byteString1 = hashingSink0.hash();
      boolean boolean0 = byteString0.endsWith(byteString1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.EMPTY.rangeEquals((-601), byteArray0, 1440, (int) (byte)19);
      // Undeclared exception!
      try { 
        byteString0.substring(1969, 372);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endIndex > length(8)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-34);
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.hex();
      // Undeclared exception!
      try { 
        byteString0.substring((int) (byte) (-34), 1825);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // beginIndex < 0
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteString byteString0 = ByteString.encodeUtf8("f>{~<c");
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)121;
      byteArray1[1] = (byte) (-35);
      byteArray1[2] = (byte)121;
      byteArray1[3] = (byte)121;
      ByteString byteString1 = new ByteString(byteArray1);
      int int0 = byteString0.EMPTY.lastIndexOf(byteString1, (int) (byte) (-35));
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte) (-35);
      int int1 = byteString0.indexOf(byteArray0);
      assertTrue(int1 == int0);
      assertEquals(6, byteString0.size());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      ByteString byteString0 = realBufferedSource0.readByteString();
      byteString0.utf8();
      Object object0 = new Object();
      boolean boolean0 = byteString0.equals(object0);
      assertFalse(boolean0);
      
      ByteString byteString1 = byteString0.sha256();
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.read((InputStream) null, 257);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // in == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.lastIndexOf(byteArray0, (int) (byte)0);
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString1 = ByteString.encodeString("", charset0);
      byteString0.utf8();
      // Undeclared exception!
      try { 
        byteString0.hmacSha512(byteString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)122;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("}_%tcW,z+)OIu<zKC");
      Charset charset0 = Charset.defaultCharset();
      ByteString byteString0 = ByteString.encodeString("}_%tcW,z+)OIu<zKC", charset0);
      ByteString byteString1 = byteString0.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.hmacSha1(byteString0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString2.indexOf(byteArray0);
      byteString1.toString();
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_1;
      byteString0.lastIndexOf(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)18, (-1));
      byteArrayInputStream0.close();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ByteString byteString3 = ByteString.read(dataInputStream0, 0);
      assertNotSame(byteString3, byteString1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.sha512();
      Charset charset0 = Charset.defaultCharset();
      byteString0.EMPTY.indexOf(byteArray0, 57);
      ByteString byteString1 = ByteString.encodeString("inflater == null", charset0);
      byte[] byteArray1 = new byte[0];
      byteString1.endsWith(byteArray1);
      byteString1.lastIndexOf(byteArray1, (-83));
      ByteString byteString2 = byteString0.toAsciiLowercase();
      byteString2.indexOf(byteString1, (-1));
      byteString2.toAsciiUppercase();
      byteString0.base64();
      byteString0.equals(byteString0);
      Inflater inflater0 = new Inflater(false);
      InflaterSource inflaterSource0 = null;
      try {
        inflaterSource0 = new InflaterSource((BufferedSource) null, inflater0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // source == null
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = null;
      ByteString byteString0 = new ByteString((byte[]) null);
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      ByteString byteString0 = new ByteString(byteArray0);
      Pipe pipe0 = new Pipe((byte)100);
      Source source0 = pipe0.source();
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(source0);
      ByteString byteString1 = realBufferedSource0.readByteString(0L);
      boolean boolean0 = byteString1.startsWith(byteString0);
      assertFalse(boolean0);
      
      String string0 = byteString0.toString();
      assertEquals("[text=d]", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte)97;
      ByteString byteString0 = new ByteString(byteArray0);
      byteString0.toString();
      Buffer buffer0 = new Buffer();
      InflaterSource inflaterSource0 = null;
      try {
        inflaterSource0 = new InflaterSource((BufferedSource) buffer0, (Inflater) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // inflater == null
         //
         verifyException("okio.InflaterSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Pipe pipe0 = new Pipe(1L);
      pipe0.sinkClosed = false;
      Pipe.PipeSource pipe_PipeSource0 = pipe0.new PipeSource();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        ByteString.read(pipedInputStream0, (-635));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -635
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)110;
      Charset.defaultCharset();
      Charset.defaultCharset();
      ByteString.encodeUtf8("j.TQ^w_*[");
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteString.encodeString((String) null, charset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      ByteString byteString1 = new ByteString(byteArray0);
      ByteString byteString2 = byteString1.hmacSha1(byteString0);
      byteString2.toAsciiUppercase();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteString2.indexOf(byteArray0);
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte) (-55);
      byteString2.toString();
      byteString1.hashCode();
      byteString0.lastIndexOf(byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (byte)0, 0);
      byteArrayInputStream0.close();
      // Undeclared exception!
      try { 
        ByteString.read(byteArrayInputStream0, (-2616));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // byteCount < 0: -2616
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-3);
      ByteString byteString0 = ByteString.of(byteArray0);
      assertEquals(3, byteString0.size());
      assertArrayEquals(new byte[] {(byte)105, (byte)5, (byte) (-3)}, byteArray0);
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        ByteString.decodeHex((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hex == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeHex(".inputStream()");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: .
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertNotNull(buffer_UnsafeCursor0);
      
      Buffer buffer1 = buffer_UnsafeCursor0.buffer;
      assertNull(buffer1);
      
      HashingSource hashingSource0 = HashingSource.sha1(buffer0);
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(hashingSource0);
      
      // Undeclared exception!
      try { 
        ByteString.of((byte[]) null, (-1), 57);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      ByteString byteString0 = ByteString.encodeString("", charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.toAsciiUppercase();
      assertSame(byteString0, byteString1);
      assertSame(byteString1, byteString0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0, byteString0.size());
      assertEquals(0, byteString1.size());
      assertNotNull(byteString1);
      
      int int0 = byteString1.lastIndexOf(byteString0);
      assertSame(byteString0, byteString1);
      assertSame(byteString1, byteString0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0, byteString0.size());
      assertEquals(0, byteString1.size());
      assertEquals(0, int0);
      
      ByteString byteString2 = byteString1.md5();
      assertSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(0, byteString0.size());
      assertEquals(0, byteString1.size());
      assertEquals(16, byteString2.size());
      assertNotNull(byteString2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 83, (byte)11);
      assertEquals((-81), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)11, (byte)11}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      try { 
        ByteString.read(byteArrayInputStream0, (byte)11);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)123;
      ByteString byteString0 = ByteString.encodeUtf8("<*-C");
      assertEquals(4, byteString0.size());
      assertNotNull(byteString0);
      
      String string0 = byteString0.hex();
      assertEquals(4, byteString0.size());
      assertEquals("fbfafdff", string0);
      assertNotNull(string0);
      
      String string1 = byteString0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals(4, byteString0.size());
      assertEquals("[text=<*-C]", string1);
      assertNotNull(string1);
      
      RealBufferedSource realBufferedSource0 = null;
      try {
        realBufferedSource0 = new RealBufferedSource((Source) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // source == null
         //
         verifyException("okio.RealBufferedSource", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("");
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.decodeBase64((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // base64 == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Eh/zD<: bmYj:Y0)ff");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        ByteString.decodeHex("Eh/zD<: bmYj:Y0)ff");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: h
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)11;
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      ByteString byteString0 = ByteString.encodeString("inflater == null", charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString byteString1 = ByteString.encodeString("inflater == null", charset0);
      assertNotSame(byteString1, byteString0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(16, byteString1.size());
      assertNotNull(byteString1);
      
      String string0 = byteString1.toString();
      assertNotSame(byteString1, byteString0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(16, byteString1.size());
      assertEquals("[text=inflater == null]", string0);
      assertNotNull(string0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)11, (byte)105);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.close();
      assertEquals(7, byteArrayInputStream0.available());
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(dataInputStream0);
      
      try { 
        ByteString.read(byteArrayInputStream0, 87);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode(" < ");
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3, byteBuffer0.limit());
      assertEquals(3, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(3, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3 cap=3]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertNotNull(byteBuffer0);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString0 = realBufferedSource0.readByteString();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      assertNotNull(byteString0);
      
      String string0 = byteString0.toString();
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteString0.size());
      assertEquals("[size=0]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ByteString byteString0 = ByteString.decodeBase64("SHA-1");
      assertNull(byteString0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte)35;
      byteArray0[7] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(8, byteString0.size());
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-65), (byte) (-31), (byte)36, (byte)52, (byte) (-73), (byte)35, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      byteString0.hashCode();
      assertEquals(8, byteString0.size());
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-65), (byte) (-31), (byte)36, (byte)52, (byte) (-73), (byte)35, (byte)0}, byteArray0);
      
      byteString0.hashCode();
      assertEquals(8, byteString0.size());
      assertArrayEquals(new byte[] {(byte) (-73), (byte) (-65), (byte) (-31), (byte)36, (byte)52, (byte) (-73), (byte)35, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        ByteString.codePointIndexToCharIndex((String) null, 365);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      byteString0.hashCode();
      assertEquals(3, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        ByteString.decodeHex("already attached to a buffer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unexpected hex digit: l
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      Buffer buffer0 = new Buffer();
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      assertEquals(3, byteString0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(hashingSource0);
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(3, byteString0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString1);
      
      ByteString byteString2 = byteString0.substring((int) (byte)0, (int) (byte)0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(3, byteString0.size());
      assertEquals(0, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString2);
      
      int int0 = byteString1.compareTo(byteString0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(3, byteString0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString1);
      
      ByteString byteString2 = byteString1.hmacSha1(byteString0);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertTrue(byteString0.equals((Object)byteString1));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(1, byteString0.size());
      assertEquals(1, byteString1.size());
      assertEquals(20, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString2);
      
      boolean boolean0 = byteString1.endsWith(byteArray0);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertFalse(byteString1.equals((Object)byteString2));
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(boolean0);
      
      ByteBuffer byteBuffer0 = byteString2.asByteBuffer();
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString2));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(1, byteString0.size());
      assertEquals(1, byteString1.size());
      assertEquals(20, byteString2.size());
      assertTrue(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(20, byteBuffer0.capacity());
      assertEquals(20, byteBuffer0.remaining());
      assertEquals(20, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBufferR[pos=0 lim=20 cap=20]", byteBuffer0.toString());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteBuffer0);
      
      ByteString byteString3 = ByteString.of(byteBuffer0);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString1);
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString2));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertTrue(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertEquals(1, byteString0.size());
      assertEquals(1, byteString1.size());
      assertEquals(20, byteString2.size());
      assertTrue(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBufferR[pos=20 lim=20 cap=20]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(20, byteBuffer0.capacity());
      assertEquals(20, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(20, byteBuffer0.position());
      assertEquals(20, byteString3.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString3);
      
      ByteString byteString4 = byteString1.toAsciiLowercase();
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertSame(byteString1, byteString4);
      assertNotSame(byteString1, byteString3);
      assertSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString2);
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString3));
      assertTrue(byteString1.equals((Object)byteString0));
      assertTrue(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString2));
      assertEquals(1, byteString1.size());
      assertEquals(1, byteString4.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString4);
      
      ByteString byteString5 = byteString4.EMPTY.toAsciiLowercase();
      assertNotSame(byteString1, byteString5);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertSame(byteString1, byteString4);
      assertNotSame(byteString1, byteString3);
      assertSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString5);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString2);
      assertNotSame(byteString5, byteString1);
      assertNotSame(byteString5, byteString2);
      assertNotSame(byteString5, byteString4);
      assertNotSame(byteString5, byteString0);
      assertNotSame(byteString5, byteString3);
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString3));
      assertTrue(byteString1.equals((Object)byteString0));
      assertTrue(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString2));
      assertFalse(byteString5.equals((Object)byteString1));
      assertFalse(byteString5.equals((Object)byteString2));
      assertFalse(byteString5.equals((Object)byteString4));
      assertFalse(byteString5.equals((Object)byteString0));
      assertFalse(byteString5.equals((Object)byteString3));
      assertEquals(1, byteString1.size());
      assertEquals(1, byteString4.size());
      assertEquals(0, byteString5.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString5);
      
      ByteString byteString6 = byteString3.sha512();
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString5);
      assertNotSame(byteString0, byteString6);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString5);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertSame(byteString1, byteString4);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString6);
      assertNotSame(byteString2, byteString5);
      assertNotSame(byteString2, byteString6);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString4);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString3, byteString5);
      assertNotSame(byteString3, byteString6);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString4);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString6, byteString1);
      assertNotSame(byteString6, byteString2);
      assertNotSame(byteString6, byteString3);
      assertNotSame(byteString6, byteString5);
      assertNotSame(byteString6, byteString0);
      assertNotSame(byteString6, byteString4);
      assertTrue(byteString0.equals((Object)byteString4));
      assertFalse(byteString0.equals((Object)byteString3));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString5));
      assertFalse(byteString1.equals((Object)byteString5));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString3));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString5));
      assertTrue(byteString2.equals((Object)byteString3));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString4));
      assertFalse(byteString2.equals((Object)byteString1));
      assertTrue(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString5));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString4));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString6.equals((Object)byteString1));
      assertFalse(byteString6.equals((Object)byteString2));
      assertFalse(byteString6.equals((Object)byteString3));
      assertFalse(byteString6.equals((Object)byteString5));
      assertFalse(byteString6.equals((Object)byteString0));
      assertFalse(byteString6.equals((Object)byteString4));
      assertEquals(1, byteString0.size());
      assertEquals(1, byteString1.size());
      assertEquals(20, byteString2.size());
      assertTrue(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBufferR[pos=20 lim=20 cap=20]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(20, byteBuffer0.capacity());
      assertEquals(20, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(20, byteBuffer0.position());
      assertEquals(20, byteString3.size());
      assertEquals(64, byteString6.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString6);
      
      int int0 = byteString3.lastIndexOf(byteArray0, 70);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString5);
      assertNotSame(byteString0, byteString6);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString5);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertSame(byteString1, byteString4);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString6);
      assertNotSame(byteString2, byteString5);
      assertNotSame(byteString2, byteString6);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString4);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString3, byteString5);
      assertNotSame(byteString3, byteString6);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString4);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString1);
      assertTrue(byteString0.equals((Object)byteString4));
      assertFalse(byteString0.equals((Object)byteString3));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString5));
      assertFalse(byteString0.equals((Object)byteString6));
      assertFalse(byteString1.equals((Object)byteString5));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString3));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString6));
      assertFalse(byteString2.equals((Object)byteString5));
      assertFalse(byteString2.equals((Object)byteString6));
      assertTrue(byteString2.equals((Object)byteString3));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString4));
      assertFalse(byteString2.equals((Object)byteString1));
      assertTrue(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString5));
      assertFalse(byteString3.equals((Object)byteString6));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString4));
      assertFalse(byteString3.equals((Object)byteString1));
      assertEquals(1, byteString0.size());
      assertEquals(1, byteString1.size());
      assertEquals(20, byteString2.size());
      assertTrue(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBufferR[pos=20 lim=20 cap=20]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(20, byteBuffer0.capacity());
      assertEquals(20, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(20, byteBuffer0.position());
      assertEquals(20, byteString3.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      int int1 = byteString0.compareTo(byteString3);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString5);
      assertNotSame(byteString0, byteString6);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString5);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertSame(byteString1, byteString4);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString6);
      assertNotSame(byteString2, byteString5);
      assertNotSame(byteString2, byteString6);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString4);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString3, byteString5);
      assertNotSame(byteString3, byteString6);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString4);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString1);
      assertTrue(byteString0.equals((Object)byteString4));
      assertFalse(byteString0.equals((Object)byteString3));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString5));
      assertFalse(byteString0.equals((Object)byteString6));
      assertFalse(byteString1.equals((Object)byteString5));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString3));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString6));
      assertFalse(byteString2.equals((Object)byteString5));
      assertFalse(byteString2.equals((Object)byteString6));
      assertTrue(byteString2.equals((Object)byteString3));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString4));
      assertFalse(byteString2.equals((Object)byteString1));
      assertTrue(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString5));
      assertFalse(byteString3.equals((Object)byteString6));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString4));
      assertFalse(byteString3.equals((Object)byteString1));
      assertTrue(int1 == int0);
      assertEquals(1, byteString0.size());
      assertEquals(1, byteString1.size());
      assertEquals(20, byteString2.size());
      assertTrue(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBufferR[pos=20 lim=20 cap=20]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(20, byteBuffer0.capacity());
      assertEquals(20, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(20, byteBuffer0.position());
      assertEquals(20, byteString3.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        ByteString.encodeString("0lGg", (Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(5, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)76, (byte) (-7), (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      // Undeclared exception!
      try { 
        byteString0.EMPTY.write((OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // out == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      assertEquals(3, byteString0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(hashingSource0);
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(3, byteString0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString1);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString2 = realBufferedSource0.readByteString();
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString2.size());
      assertNotNull(byteString2);
      
      ByteString byteString3 = byteString0.toAsciiLowercase();
      assertNotSame(byteString0, byteString1);
      assertSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString1);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString1));
      assertEquals(3, byteString0.size());
      assertEquals(3, byteString3.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString3);
      
      ByteString byteString4 = byteString2.toAsciiLowercase();
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString3);
      assertSame(byteString2, byteString4);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString0);
      assertSame(byteString4, byteString2);
      assertNotSame(byteString4, byteString1);
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString3));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString1));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString2.size());
      assertEquals(0, byteString4.size());
      assertNotNull(byteString4);
      
      ByteString byteString5 = byteString2.sha512();
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString5);
      assertSame(byteString2, byteString4);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString5, byteString1);
      assertNotSame(byteString5, byteString3);
      assertNotSame(byteString5, byteString4);
      assertNotSame(byteString5, byteString2);
      assertNotSame(byteString5, byteString0);
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString3));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString5.equals((Object)byteString1));
      assertFalse(byteString5.equals((Object)byteString3));
      assertFalse(byteString5.equals((Object)byteString4));
      assertFalse(byteString5.equals((Object)byteString2));
      assertFalse(byteString5.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString2.size());
      assertEquals(64, byteString5.size());
      assertNotNull(byteString5);
      
      int int0 = byteString2.lastIndexOf(byteArray0, 5);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString5);
      assertSame(byteString2, byteString4);
      assertNotSame(byteString2, byteString0);
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString3));
      assertFalse(byteString2.equals((Object)byteString5));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      int int1 = byteString5.compareTo(byteString2);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString5);
      assertSame(byteString2, byteString4);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString5, byteString1);
      assertNotSame(byteString5, byteString3);
      assertNotSame(byteString5, byteString4);
      assertNotSame(byteString5, byteString2);
      assertNotSame(byteString5, byteString0);
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString3));
      assertFalse(byteString2.equals((Object)byteString5));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString5.equals((Object)byteString1));
      assertFalse(byteString5.equals((Object)byteString3));
      assertFalse(byteString5.equals((Object)byteString4));
      assertFalse(byteString5.equals((Object)byteString2));
      assertFalse(byteString5.equals((Object)byteString0));
      assertFalse(int1 == int0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertEquals(0, byteString2.size());
      assertEquals(64, byteString5.size());
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteString byteString0 = ByteString.of(byteArray0);
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      boolean boolean0 = byteString0.endsWith(byteArray0);
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = byteString0.endsWith(byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = byteString0.compareTo(byteString0);
      assertEquals(1, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, int0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.size());
      assertNotNull(buffer0);
      
      ByteString byteString1 = new ByteString(byteArray0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(1, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(byteString1);
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      ByteString byteString1 = byteString0.substring((int) (byte)0, (int) (byte)0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(3, byteString0.size());
      assertEquals(0, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString1);
      
      boolean boolean0 = byteString1.EMPTY.equals(byteString0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(3, byteString0.size());
      assertEquals(0, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      ByteString byteString2 = byteString0.substring((int) (byte)0);
      assertSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(3, byteString0.size());
      assertEquals(3, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.hmacSha1(byteString0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString1);
      
      boolean boolean0 = byteString1.endsWith(byteArray0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      ByteString byteString2 = byteString0.EMPTY.sha256();
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(2, byteString0.size());
      assertEquals(32, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString2);
      
      String string0 = byteString1.base64Url();
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals("MQNUZhpZYtW4y3YDLVqX6K7Xz58=", string0);
      assertNotNull(string0);
      
      boolean boolean1 = byteString1.rangeEquals(511, byteString0, 511, 13);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, byteString0.size());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertFalse(boolean1);
      
      String string1 = byteString0.hex();
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals("aaaa", string1);
      assertNotNull(string1);
      
      ByteString byteString3 = new ByteString(byteArray0);
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString2));
      assertTrue(byteString3.equals((Object)byteString0));
      assertEquals(2, byteString3.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString3);
      
      byteString0.hashCode();
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString3);
      assertFalse(byteString0.equals((Object)byteString2));
      assertTrue(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      ByteString byteString4 = ByteString.decodeHex("0000");
      assertNotSame(byteString4, byteString2);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString1);
      assertFalse(byteString4.equals((Object)byteString2));
      assertTrue(byteString4.equals((Object)byteString0));
      assertTrue(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString1));
      assertEquals(2, byteString4.size());
      assertNotNull(byteString4);
      
      String string2 = null;
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.hmacSha1(buffer0, byteString0);
      assertEquals(3, byteString0.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(hashingSource0);
      
      ByteString byteString1 = hashingSource0.hash();
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(3, byteString0.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString1);
      
      ByteString[] byteStringArray0 = new ByteString[2];
      byteStringArray0[0] = byteString0;
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals(3, byteString0.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(realBufferedSource0);
      
      ByteString byteString2 = realBufferedSource0.readByteString();
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(3, byteString0.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString2);
      
      ByteString byteString3 = byteString2.toAsciiLowercase();
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertSame(byteString2, byteString3);
      assertNotSame(byteString3, byteString0);
      assertSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString1);
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertEquals(3, byteString0.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString2.size());
      assertEquals(0, byteString3.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString3);
      
      ByteString byteString4 = byteString3.toAsciiLowercase();
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertSame(byteString2, byteString3);
      assertSame(byteString2, byteString4);
      assertNotSame(byteString3, byteString0);
      assertSame(byteString3, byteString2);
      assertSame(byteString3, byteString4);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString0);
      assertSame(byteString4, byteString2);
      assertSame(byteString4, byteString3);
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString0));
      assertEquals(3, byteString0.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString2.size());
      assertEquals(0, byteString3.size());
      assertEquals(0, byteString4.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString4);
      
      ByteString byteString5 = byteString1.sha512();
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString5);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString4);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString5);
      assertNotSame(byteString5, byteString0);
      assertNotSame(byteString5, byteString3);
      assertNotSame(byteString5, byteString2);
      assertNotSame(byteString5, byteString4);
      assertNotSame(byteString5, byteString1);
      assertFalse(byteString0.equals((Object)byteString4));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString3));
      assertFalse(byteString1.equals((Object)byteString4));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString5.equals((Object)byteString0));
      assertFalse(byteString5.equals((Object)byteString3));
      assertFalse(byteString5.equals((Object)byteString2));
      assertFalse(byteString5.equals((Object)byteString4));
      assertFalse(byteString5.equals((Object)byteString1));
      assertEquals(3, byteString0.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(20, byteString1.size());
      assertEquals(64, byteString5.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteString5);
      
      int int0 = byteString2.lastIndexOf(byteArray0, (int) (byte)0);
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString5);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString2, byteString5);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertSame(byteString2, byteString3);
      assertSame(byteString2, byteString4);
      assertFalse(byteString0.equals((Object)byteString4));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString5));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString5));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(3, byteString0.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int0);
      
      int int1 = byteString4.compareTo(byteString0);
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString5);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString2, byteString5);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertSame(byteString2, byteString3);
      assertSame(byteString2, byteString4);
      assertNotSame(byteString3, byteString5);
      assertNotSame(byteString3, byteString0);
      assertSame(byteString3, byteString2);
      assertSame(byteString3, byteString4);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString5);
      assertSame(byteString4, byteString2);
      assertSame(byteString4, byteString3);
      assertFalse(byteString0.equals((Object)byteString4));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString5));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString5));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString5));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString5));
      assertTrue(int1 == int0);
      assertEquals(3, byteString0.size());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0, byteString2.size());
      assertEquals(0, byteString3.size());
      assertEquals(0, byteString4.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)5;
      byteArray0[1] = (byte)5;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)5;
      int int0 = byteString0.lastIndexOf(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte)0}, byteArray1);
      assertEquals(0, int0);
      
      String string0 = byteString0.toString();
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(3, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte)0}, byteArray0);
      assertEquals("[hex=aaa5aa]", string0);
      assertNotNull(string0);
      
      int int1 = ByteString.codePointIndexToCharIndex("[hex=000500]", (byte)0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = byteString0.base64();
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte)0}, byteArray0);
      assertEquals("AAUA", string1);
      assertNotNull(string1);
      
      ByteBuffer byteBuffer0 = byteString0.asByteBuffer();
      assertNotSame(byteArray0, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(3, byteString0.size());
      assertEquals("java.nio.HeapByteBufferR[pos=0 lim=3 cap=3]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(3, byteBuffer0.capacity());
      assertEquals(3, byteBuffer0.remaining());
      assertEquals(3, byteBuffer0.limit());
      assertTrue(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte)0}, byteArray0);
      assertNotNull(byteBuffer0);
      
      // Undeclared exception!
      try { 
        Charset.forName("AAUA");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // AAUA
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(18, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.EMPTY.sha512();
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(18, byteString0.size());
      assertEquals(64, byteString1.size());
      assertNotNull(byteString1);
      
      ByteString byteString2 = byteString0.sha512();
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(18, byteString0.size());
      assertEquals(64, byteString2.size());
      assertNotNull(byteString2);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      ByteString byteString3 = byteString2.toAsciiUppercase();
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString2);
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString2));
      assertEquals(18, byteString0.size());
      assertEquals(64, byteString2.size());
      assertEquals(64, byteString3.size());
      assertNotNull(byteString3);
      
      String string0 = byteString3.base64();
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString2);
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString3));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString2));
      assertEquals(18, byteString0.size());
      assertEquals(64, byteString2.size());
      assertEquals(64, byteString3.size());
      assertEquals("R1gn5EFXfJU14eiMnD8AmfdEfP4s31KR2Oqdh05au7frPZ76Bgo42hNCqHuoJ1jV2rZLj6XLmwjyeysFG7lGrg==", string0);
      assertNotNull(string0);
      
      boolean boolean0 = byteString1.startsWith(byteArray0);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString2);
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString3));
      assertFalse(byteString1.equals((Object)byteString2));
      assertEquals(18, byteString0.size());
      assertEquals(64, byteString1.size());
      assertFalse(boolean0);
      
      boolean boolean1 = byteString1.rangeEquals((int) (byte)11, byteString3, (-1219), 116);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString2);
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString3));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString3));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString2));
      assertTrue(boolean1 == boolean0);
      assertEquals(18, byteString0.size());
      assertEquals(64, byteString1.size());
      assertEquals(64, byteString2.size());
      assertEquals(64, byteString3.size());
      assertFalse(boolean1);
      
      boolean boolean2 = byteString0.equals(charset0);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString3);
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString3));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(18, byteString0.size());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(boolean2);
      
      boolean boolean3 = byteString1.startsWith(byteArray0);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString2);
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString3));
      assertFalse(byteString1.equals((Object)byteString2));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(18, byteString0.size());
      assertEquals(64, byteString1.size());
      assertFalse(boolean3);
      
      ByteString byteString4 = byteString0.substring((int) (byte)11);
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString2);
      assertNotSame(byteString4, byteString1);
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString2));
      assertFalse(byteString4.equals((Object)byteString1));
      assertEquals(18, byteString0.size());
      assertEquals(7, byteString4.size());
      assertNotNull(byteString4);
      
      int int0 = ObjectStreamConstants.baseWireHandle;
      assertEquals(8257536, int0);
      
      Pipe pipe0 = new Pipe((byte)11);
      assertNotNull(pipe0);
      
      Buffer buffer0 = pipe0.buffer;
      assertEquals(0L, buffer0.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      byteString4.write(buffer0);
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString4, byteString2);
      assertNotSame(byteString4, byteString1);
      assertFalse(byteString0.equals((Object)byteString4));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString4.equals((Object)byteString2));
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(buffer0.exhausted());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(7L, buffer0.size());
      assertEquals(18, byteString0.size());
      assertEquals(7, byteString4.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      ByteString byteString0 = new ByteString((byte[]) null);
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        ByteString.encodeUtf8((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // s == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)0;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      byteString0.write(byteArrayOutputStream0);
      assertEquals(3, byteString0.size());
      assertEquals(3, byteArrayOutputStream0.size());
      assertEquals("\u0000\u0005\u0000", byteArrayOutputStream0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte)0}, byteArray0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[1] = (byte)5;
      int int0 = byteString0.lastIndexOf(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteString0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte)0}, byteArray1);
      assertEquals(0, int0);
      
      ByteString byteString1 = ByteString.of(byteArray0);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals(3, byteString1.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte)0}, byteArray0);
      assertNotNull(byteString1);
      
      ByteString byteString2 = byteString0.hmacSha256(byteString1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(byteString0.equals((Object)byteString1));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(3, byteString0.size());
      assertEquals(3, byteString1.size());
      assertEquals(32, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte)0}, byteArray0);
      assertNotNull(byteString2);
      
      ByteString byteString3 = byteString2.toAsciiUppercase();
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertSame(byteString2, byteString3);
      assertSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertEquals(3, byteString0.size());
      assertEquals(3, byteString1.size());
      assertEquals(32, byteString2.size());
      assertEquals(32, byteString3.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte)0}, byteArray0);
      assertNotNull(byteString3);
      
      ByteString byteString4 = byteString3.toAsciiLowercase();
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString4);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString4);
      assertSame(byteString2, byteString3);
      assertNotSame(byteString3, byteString4);
      assertSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString2);
      assertNotSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString3));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString2));
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString3));
      assertEquals(3, byteString0.size());
      assertEquals(3, byteString1.size());
      assertEquals(32, byteString2.size());
      assertEquals(32, byteString3.size());
      assertEquals(32, byteString4.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte)0}, byteArray0);
      assertNotNull(byteString4);
      
      int int1 = byteString2.indexOf(byteString1, 8);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString4);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString4);
      assertSame(byteString2, byteString3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString4));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString3));
      assertFalse(byteString1.equals((Object)byteString4));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString4));
      assertFalse(int1 == int0);
      assertEquals(3, byteString0.size());
      assertEquals(3, byteString1.size());
      assertEquals(32, byteString2.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte)0}, byteArray0);
      assertEquals((-1), int1);
      
      ByteString byteString5 = byteString4.toAsciiUppercase();
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString5);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString4);
      assertNotSame(byteString1, byteString5);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString5);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString4);
      assertSame(byteString2, byteString3);
      assertNotSame(byteString3, byteString4);
      assertSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString5);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString2);
      assertNotSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString5);
      assertNotSame(byteString4, byteString3);
      assertNotSame(byteString5, byteString3);
      assertNotSame(byteString5, byteString1);
      assertNotSame(byteString5, byteString4);
      assertNotSame(byteString5, byteString2);
      assertNotSame(byteString5, byteString0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString4));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString3));
      assertFalse(byteString1.equals((Object)byteString4));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString4));
      assertFalse(byteString3.equals((Object)byteString4));
      assertFalse(byteString3.equals((Object)byteString1));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString2));
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString3));
      assertFalse(byteString5.equals((Object)byteString1));
      assertTrue(byteString5.equals((Object)byteString2));
      assertFalse(byteString5.equals((Object)byteString4));
      assertFalse(byteString5.equals((Object)byteString0));
      assertTrue(byteString5.equals((Object)byteString3));
      assertEquals(3, byteString0.size());
      assertEquals(3, byteString1.size());
      assertEquals(32, byteString2.size());
      assertEquals(32, byteString3.size());
      assertEquals(32, byteString4.size());
      assertEquals(32, byteString5.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte)0}, byteArray0);
      assertNotNull(byteString5);
      
      String string0 = byteString4.base64();
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString5);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString4);
      assertNotSame(byteString1, byteString5);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString5);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString4);
      assertSame(byteString2, byteString3);
      assertNotSame(byteString3, byteString4);
      assertSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString5);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString2);
      assertNotSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString5);
      assertNotSame(byteString4, byteString3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString5));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString4));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString3));
      assertFalse(byteString1.equals((Object)byteString4));
      assertFalse(byteString1.equals((Object)byteString5));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertTrue(byteString2.equals((Object)byteString5));
      assertFalse(byteString2.equals((Object)byteString4));
      assertFalse(byteString3.equals((Object)byteString4));
      assertFalse(byteString3.equals((Object)byteString1));
      assertTrue(byteString3.equals((Object)byteString5));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString2));
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString5));
      assertFalse(byteString4.equals((Object)byteString3));
      assertEquals(3, byteString0.size());
      assertEquals(3, byteString1.size());
      assertEquals(32, byteString2.size());
      assertEquals(32, byteString3.size());
      assertEquals(32, byteString4.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte)0}, byteArray0);
      assertEquals("e83EHYCLaQ18KZC8wbTDqNKEcHzhJoe5Hmvh08sOLOo=", string0);
      assertNotNull(string0);
      
      boolean boolean0 = byteString4.equals(byteString2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString5);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString1, byteString4);
      assertNotSame(byteString1, byteString5);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString5);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString4);
      assertSame(byteString2, byteString3);
      assertNotSame(byteString3, byteString4);
      assertSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString5);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString2);
      assertNotSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString5);
      assertNotSame(byteString4, byteString3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertTrue(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString5));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString4));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString3));
      assertFalse(byteString1.equals((Object)byteString4));
      assertFalse(byteString1.equals((Object)byteString5));
      assertTrue(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertTrue(byteString2.equals((Object)byteString5));
      assertFalse(byteString2.equals((Object)byteString4));
      assertFalse(byteString3.equals((Object)byteString4));
      assertFalse(byteString3.equals((Object)byteString1));
      assertTrue(byteString3.equals((Object)byteString5));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString2));
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString5));
      assertFalse(byteString4.equals((Object)byteString3));
      assertEquals(3, byteString0.size());
      assertEquals(3, byteString1.size());
      assertEquals(32, byteString2.size());
      assertEquals(32, byteString3.size());
      assertEquals(32, byteString4.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)5, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      Pipe pipe0 = new Pipe(586);
      assertNotNull(pipe0);
      
      RealBufferedSink realBufferedSink0 = new RealBufferedSink(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSink0);
      
      Buffer buffer1 = realBufferedSink0.buffer;
      assertNotSame(buffer1, buffer0);
      assertTrue(buffer1.equals((Object)buffer0));
      assertEquals(0L, buffer1.completeSegmentByteCount());
      assertEquals(0L, buffer1.size());
      assertTrue(buffer1.exhausted());
      assertNotNull(buffer1);
      
      // Undeclared exception!
      try { 
        buffer1.readUtf8((long) 586);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // size=0 offset=0 byteCount=586
         //
         verifyException("okio.Util", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)105;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)105, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.sha512();
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(2, byteString0.size());
      assertEquals(64, byteString1.size());
      assertArrayEquals(new byte[] {(byte)105, (byte)0}, byteArray0);
      assertNotNull(byteString1);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertNotNull(charset0);
      
      ByteString byteString2 = ByteString.encodeString("inflater == null", charset0);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(16, byteString2.size());
      assertNotNull(byteString2);
      
      byte[] byteArray1 = new byte[10];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      ByteString byteString3 = ByteString.encodeString("inflater == null", charset0);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertNotSame(byteString3, byteString2);
      assertFalse(byteString3.equals((Object)byteString0));
      assertTrue(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString1));
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(16, byteString3.size());
      assertNotNull(byteString3);
      
      String string0 = byteString0.toString();
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString3);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString3));
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)105, (byte)0}, byteArray0);
      assertEquals("[hex=f9aa]", string0);
      assertNotNull(string0);
      
      Buffer buffer0 = new Buffer();
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(buffer0);
      
      HashingSource hashingSource0 = HashingSource.md5(buffer0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(hashingSource0);
      
      ByteString byteString4 = hashingSource0.hash();
      assertNotSame(byteString4, byteString2);
      assertNotSame(byteString4, byteString0);
      assertNotSame(byteString4, byteString1);
      assertNotSame(byteString4, byteString3);
      assertFalse(byteString4.equals((Object)byteString2));
      assertFalse(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString3));
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(16, byteString4.size());
      assertNotNull(byteString4);
      
      String string1 = byteString0.toString();
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString4);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString4));
      assertTrue(string1.equals((Object)string0));
      assertEquals(2, byteString0.size());
      assertArrayEquals(new byte[] {(byte)105, (byte)0}, byteArray0);
      assertEquals("[hex=f9aa]", string1);
      assertNotNull(string1);
      
      byte[] byteArray2 = new byte[8];
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[0] = (byte)105;
      byteArray2[1] = (byte)105;
      ByteString byteString5 = hashingSource0.hash();
      assertNotSame(byteString5, byteString0);
      assertNotSame(byteString5, byteString4);
      assertNotSame(byteString5, byteString2);
      assertNotSame(byteString5, byteString1);
      assertNotSame(byteString5, byteString3);
      assertFalse(byteString5.equals((Object)byteString0));
      assertFalse(byteString5.equals((Object)byteString2));
      assertTrue(byteString5.equals((Object)byteString4));
      assertFalse(byteString5.equals((Object)byteString1));
      assertFalse(byteString5.equals((Object)byteString3));
      assertEquals(16, byteString5.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(byteString5);
      
      MockFile mockFile0 = new MockFile((String) null, "[hex=6900]");
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("[hex=6900]", mockFile0.toString());
      assertEquals("[hex=6900]", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("[hex=6900]", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals("[hex=6900]", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertNotNull(mockFileOutputStream0);
      
      byteString1.write(mockFileOutputStream0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString5);
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString1, byteString5);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString4);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString3);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString5));
      assertFalse(byteString0.equals((Object)byteString4));
      assertFalse(byteString1.equals((Object)byteString5));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString4));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString3));
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(64L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("[hex=6900]", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertEquals("[hex=6900]", mockFile0.getName());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals(2, byteString0.size());
      assertEquals(64, byteString1.size());
      assertArrayEquals(new byte[] {(byte)105, (byte)0}, byteArray0);
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertTrue(charset1.isRegistered());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.toString());
      assertEquals("US-ASCII", charset1.displayName());
      assertEquals("US-ASCII", charset1.name());
      assertNotNull(charset1);
      
      ByteString byteString6 = byteString1.toAsciiLowercase();
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString5);
      assertNotSame(byteString0, byteString6);
      assertNotSame(byteString0, byteString4);
      assertNotSame(byteString1, byteString5);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString4);
      assertNotSame(byteString1, byteString6);
      assertNotSame(byteString1, byteString0);
      assertNotSame(byteString1, byteString3);
      assertNotSame(byteString6, byteString3);
      assertNotSame(byteString6, byteString1);
      assertNotSame(byteString6, byteString2);
      assertNotSame(byteString6, byteString4);
      assertNotSame(byteString6, byteString0);
      assertNotSame(byteString6, byteString5);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString5));
      assertFalse(byteString0.equals((Object)byteString4));
      assertFalse(byteString1.equals((Object)byteString5));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString4));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(byteString1.equals((Object)byteString3));
      assertFalse(byteString6.equals((Object)byteString3));
      assertFalse(byteString6.equals((Object)byteString1));
      assertFalse(byteString6.equals((Object)byteString2));
      assertFalse(byteString6.equals((Object)byteString4));
      assertFalse(byteString6.equals((Object)byteString0));
      assertFalse(byteString6.equals((Object)byteString5));
      assertEquals(2, byteString0.size());
      assertEquals(64, byteString1.size());
      assertEquals(64, byteString6.size());
      assertArrayEquals(new byte[] {(byte)105, (byte)0}, byteArray0);
      assertNotNull(byteString6);
      
      RealBufferedSource realBufferedSource0 = new RealBufferedSource(hashingSource0);
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(realBufferedSource0);
      
      ByteString byteString7 = realBufferedSource0.readByteString();
      assertNotSame(byteString7, byteString5);
      assertNotSame(byteString7, byteString2);
      assertNotSame(byteString7, byteString1);
      assertNotSame(byteString7, byteString3);
      assertNotSame(byteString7, byteString0);
      assertNotSame(byteString7, byteString6);
      assertNotSame(byteString7, byteString4);
      assertFalse(byteString7.equals((Object)byteString5));
      assertFalse(byteString7.equals((Object)byteString2));
      assertFalse(byteString7.equals((Object)byteString1));
      assertFalse(byteString7.equals((Object)byteString3));
      assertFalse(byteString7.equals((Object)byteString0));
      assertFalse(byteString7.equals((Object)byteString6));
      assertFalse(byteString7.equals((Object)byteString4));
      assertEquals(0, byteString7.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(byteString7);
      
      ByteString byteString8 = realBufferedSource0.readByteString();
      assertNotSame(byteString8, byteString5);
      assertNotSame(byteString8, byteString7);
      assertNotSame(byteString8, byteString3);
      assertNotSame(byteString8, byteString2);
      assertNotSame(byteString8, byteString6);
      assertNotSame(byteString8, byteString1);
      assertNotSame(byteString8, byteString0);
      assertNotSame(byteString8, byteString4);
      assertFalse(byteString8.equals((Object)byteString5));
      assertFalse(byteString8.equals((Object)byteString3));
      assertFalse(byteString8.equals((Object)byteString2));
      assertFalse(byteString8.equals((Object)byteString6));
      assertFalse(byteString8.equals((Object)byteString1));
      assertFalse(byteString8.equals((Object)byteString0));
      assertTrue(byteString8.equals((Object)byteString7));
      assertFalse(byteString8.equals((Object)byteString4));
      assertEquals(0, byteString8.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertNotNull(byteString8);
      
      boolean boolean0 = byteString7.equals(byteString8);
      assertNotSame(byteString7, byteString5);
      assertNotSame(byteString7, byteString2);
      assertNotSame(byteString7, byteString1);
      assertNotSame(byteString7, byteString3);
      assertNotSame(byteString7, byteString8);
      assertNotSame(byteString7, byteString0);
      assertNotSame(byteString7, byteString6);
      assertNotSame(byteString7, byteString4);
      assertNotSame(byteString8, byteString5);
      assertNotSame(byteString8, byteString7);
      assertNotSame(byteString8, byteString3);
      assertNotSame(byteString8, byteString2);
      assertNotSame(byteString8, byteString6);
      assertNotSame(byteString8, byteString1);
      assertNotSame(byteString8, byteString0);
      assertNotSame(byteString8, byteString4);
      assertFalse(byteString7.equals((Object)byteString5));
      assertTrue(byteString7.equals((Object)byteString8));
      assertFalse(byteString7.equals((Object)byteString2));
      assertFalse(byteString7.equals((Object)byteString1));
      assertFalse(byteString7.equals((Object)byteString3));
      assertFalse(byteString7.equals((Object)byteString0));
      assertFalse(byteString7.equals((Object)byteString6));
      assertFalse(byteString7.equals((Object)byteString4));
      assertFalse(byteString8.equals((Object)byteString5));
      assertFalse(byteString8.equals((Object)byteString3));
      assertFalse(byteString8.equals((Object)byteString2));
      assertFalse(byteString8.equals((Object)byteString6));
      assertFalse(byteString8.equals((Object)byteString1));
      assertFalse(byteString8.equals((Object)byteString0));
      assertTrue(byteString8.equals((Object)byteString7));
      assertFalse(byteString8.equals((Object)byteString4));
      assertEquals(0, byteString7.size());
      assertEquals(0, byteString8.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertTrue(boolean0);
      
      ByteString byteString9 = ByteString.encodeUtf8("O/G oIx2mA z");
      assertNotSame(byteString9, byteString3);
      assertNotSame(byteString9, byteString6);
      assertNotSame(byteString9, byteString0);
      assertNotSame(byteString9, byteString5);
      assertNotSame(byteString9, byteString1);
      assertNotSame(byteString9, byteString2);
      assertNotSame(byteString9, byteString4);
      assertNotSame(byteString9, byteString7);
      assertNotSame(byteString9, byteString8);
      assertFalse(byteString9.equals((Object)byteString3));
      assertFalse(byteString9.equals((Object)byteString6));
      assertFalse(byteString9.equals((Object)byteString0));
      assertFalse(byteString9.equals((Object)byteString5));
      assertFalse(byteString9.equals((Object)byteString1));
      assertFalse(byteString9.equals((Object)byteString2));
      assertFalse(byteString9.equals((Object)byteString4));
      assertFalse(byteString9.equals((Object)byteString7));
      assertFalse(byteString9.equals((Object)byteString8));
      assertEquals(12, byteString9.size());
      assertNotNull(byteString9);
      
      ByteString byteString10 = byteString2.sha1();
      assertSame(charset0, charset1);
      assertNotSame(byteString2, byteString4);
      assertNotSame(byteString2, byteString6);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString7);
      assertNotSame(byteString2, byteString8);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString9);
      assertNotSame(byteString2, byteString5);
      assertNotSame(byteString2, byteString10);
      assertNotSame(byteString10, byteString7);
      assertNotSame(byteString10, byteString2);
      assertNotSame(byteString10, byteString9);
      assertNotSame(byteString10, byteString1);
      assertNotSame(byteString10, byteString8);
      assertNotSame(byteString10, byteString3);
      assertNotSame(byteString10, byteString0);
      assertNotSame(byteString10, byteString4);
      assertNotSame(byteString10, byteString5);
      assertNotSame(byteString10, byteString6);
      assertFalse(byteString2.equals((Object)byteString4));
      assertFalse(byteString2.equals((Object)byteString6));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString7));
      assertFalse(byteString2.equals((Object)byteString8));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString9));
      assertFalse(byteString2.equals((Object)byteString5));
      assertTrue(byteString2.equals((Object)byteString3));
      assertFalse(byteString10.equals((Object)byteString7));
      assertFalse(byteString10.equals((Object)byteString2));
      assertFalse(byteString10.equals((Object)byteString9));
      assertFalse(byteString10.equals((Object)byteString1));
      assertFalse(byteString10.equals((Object)byteString8));
      assertFalse(byteString10.equals((Object)byteString3));
      assertFalse(byteString10.equals((Object)byteString0));
      assertFalse(byteString10.equals((Object)byteString4));
      assertFalse(byteString10.equals((Object)byteString5));
      assertFalse(byteString10.equals((Object)byteString6));
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(16, byteString2.size());
      assertEquals(20, byteString10.size());
      assertNotNull(byteString10);
      
      ByteBuffer byteBuffer0 = byteString8.asByteBuffer();
      assertNotSame(byteString8, byteString10);
      assertNotSame(byteString8, byteString5);
      assertNotSame(byteString8, byteString7);
      assertNotSame(byteString8, byteString3);
      assertNotSame(byteString8, byteString2);
      assertNotSame(byteString8, byteString9);
      assertNotSame(byteString8, byteString6);
      assertNotSame(byteString8, byteString1);
      assertNotSame(byteString8, byteString0);
      assertNotSame(byteString8, byteString4);
      assertFalse(byteString8.equals((Object)byteString10));
      assertFalse(byteString8.equals((Object)byteString5));
      assertFalse(byteString8.equals((Object)byteString3));
      assertFalse(byteString8.equals((Object)byteString2));
      assertFalse(byteString8.equals((Object)byteString9));
      assertFalse(byteString8.equals((Object)byteString6));
      assertFalse(byteString8.equals((Object)byteString1));
      assertFalse(byteString8.equals((Object)byteString0));
      assertTrue(byteString8.equals((Object)byteString7));
      assertFalse(byteString8.equals((Object)byteString4));
      assertEquals(0, byteString8.size());
      assertEquals(0L, buffer0.completeSegmentByteCount());
      assertEquals(0L, buffer0.size());
      assertTrue(buffer0.exhausted());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBufferR[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.capacity());
      assertNotNull(byteBuffer0);
      
      // Undeclared exception!
      try { 
        byteString9.hmacSha256(byteString8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Empty key
         //
         verifyException("javax.crypto.spec.SecretKeySpec", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      ByteString byteString0 = ByteString.encodeString("inflater == null", charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals(16, byteString0.size());
      assertNotNull(byteString0);
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertEquals("US-ASCII", charset1.name());
      assertEquals("US-ASCII", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.toString());
      assertNotNull(charset1);
      
      ByteString byteString1 = ByteString.encodeString("inflater == null", charset0);
      assertSame(charset0, charset1);
      assertNotSame(byteString1, byteString0);
      assertTrue(byteString1.equals((Object)byteString0));
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals(16, byteString1.size());
      assertNotNull(byteString1);
      
      String string0 = byteString0.base64Url();
      assertSame(charset0, charset1);
      assertNotSame(byteString0, byteString1);
      assertTrue(byteString0.equals((Object)byteString1));
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals(16, byteString0.size());
      assertEquals("aW5mbGF0ZXIgPT0gbnVsbA==", string0);
      assertNotNull(string0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteBuffer byteBuffer0 = charset1.encode("yQp");
      assertSame(charset1, charset0);
      assertEquals("US-ASCII", charset1.name());
      assertEquals("US-ASCII", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(3, byteBuffer0.capacity());
      assertEquals(3, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3 cap=3]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertNotNull(byteBuffer0);
      
      CharBuffer charBuffer0 = charset1.decode(byteBuffer0);
      assertSame(charset1, charset0);
      assertEquals("US-ASCII", charset1.name());
      assertEquals("US-ASCII", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertTrue(charset1.isRegistered());
      assertEquals("US-ASCII", charset1.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(3, byteBuffer0.position());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(3, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=3 lim=3 cap=3]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(3, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("yQp", charBuffer0.toString());
      assertEquals(3, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        ByteString.of((ByteBuffer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // data == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(3, byteString0.size());
      assertArrayEquals(new byte[] {(byte)112, (byte)112, (byte)0}, byteArray0);
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.EMPTY.sha512();
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(3, byteString0.size());
      assertEquals(64, byteString1.size());
      assertArrayEquals(new byte[] {(byte)112, (byte)112, (byte)0}, byteArray0);
      assertNotNull(byteString1);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 466, 1523);
      assertEquals((-463), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)112, (byte)112, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertEquals((-463), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)112, (byte)112, (byte)0}, byteArray0);
      assertNotNull(dataInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      assertEquals((-463), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)112, (byte)112, (byte)0}, byteArray0);
      assertNotNull(bufferedInputStream0);
      
      boolean boolean0 = byteString1.equals(bufferedInputStream0);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(3, byteString0.size());
      assertEquals(64, byteString1.size());
      assertEquals((-463), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)112, (byte)112, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      ByteString byteString2 = byteString0.sha512();
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertEquals(3, byteString0.size());
      assertEquals(64, byteString2.size());
      assertArrayEquals(new byte[] {(byte)112, (byte)112, (byte)0}, byteArray0);
      assertNotNull(byteString2);
      
      byte[] byteArray1 = new byte[0];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      ByteString byteString3 = ByteString.encodeString("inflater == null", charset0);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(16, byteString3.size());
      assertNotNull(byteString3);
      
      String string0 = byteString3.toString();
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(16, byteString3.size());
      assertEquals("[text=inflater == null]", string0);
      assertNotNull(string0);
      
      boolean boolean1 = byteString3.rangeEquals((int) (byte)112, byteArray1, (-1252), (int) (byte)112);
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteString3, byteString2);
      assertNotSame(byteString3, byteString0);
      assertNotSame(byteString3, byteString1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteString3.equals((Object)byteString2));
      assertFalse(byteString3.equals((Object)byteString0));
      assertFalse(byteString3.equals((Object)byteString1));
      assertTrue(boolean1 == boolean0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(16, byteString3.size());
      assertArrayEquals(new byte[] {}, byteArray1);
      assertFalse(boolean1);
      
      String string1 = byteString2.toString();
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString2, byteString3);
      assertNotSame(byteString2, byteString0);
      assertNotSame(byteString2, byteString1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString3));
      assertFalse(byteString2.equals((Object)byteString0));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(3, byteString0.size());
      assertEquals(64, byteString2.size());
      assertArrayEquals(new byte[] {(byte)112, (byte)112, (byte)0}, byteArray0);
      assertEquals("[hex=adbb5ffbfbfaaffbf5bababbbfbb7bbffdb5ffbdbb55bf5affabb9fdf7ffaaf5ffadafdfbfdffaffbbff5f9f5bffbfabdbbbffff55babfbbbb5bbfbff9bb5afb]", string1);
      assertNotNull(string1);
      
      String string2 = byteString0.toString();
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteString0, byteString3);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteString0.equals((Object)byteString3));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals(3, byteString0.size());
      assertArrayEquals(new byte[] {(byte)112, (byte)112, (byte)0}, byteArray0);
      assertEquals("[hex=7a7aaa]", string2);
      assertNotNull(string2);
      
      byte[] byteArray2 = new byte[8];
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      ByteString byteString4 = new ByteString(byteArray2);
      assertFalse(byteArray2.equals((Object)byteArray0));
      assertFalse(byteArray2.equals((Object)byteArray1));
      assertFalse(byteString4.equals((Object)byteString1));
      assertFalse(byteString4.equals((Object)byteString0));
      assertFalse(byteString4.equals((Object)byteString2));
      assertFalse(byteString4.equals((Object)byteString3));
      assertEquals(8, byteString4.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray2);
      assertNotNull(byteString4);
      
      Buffer.UnsafeCursor buffer_UnsafeCursor0 = new Buffer.UnsafeCursor();
      assertEquals((-1), buffer_UnsafeCursor0.end);
      assertEquals((-1L), buffer_UnsafeCursor0.offset);
      assertFalse(buffer_UnsafeCursor0.readWrite);
      assertEquals((-1), buffer_UnsafeCursor0.start);
      assertNotNull(buffer_UnsafeCursor0);
      
      Buffer buffer0 = buffer_UnsafeCursor0.buffer;
      assertNull(buffer0);
      
      // Undeclared exception!
      try { 
        byteString4.write((Buffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)56;
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte)24;
      ByteString byteString0 = ByteString.of(byteArray0);
      assertEquals(8, byteString0.size());
      assertArrayEquals(new byte[] {(byte) (-119), (byte)32, (byte)39, (byte)56, (byte) (-28), (byte) (-64), (byte)55, (byte)24}, byteArray0);
      assertNotNull(byteString0);
      
      // Undeclared exception!
      try { 
        byteString0.string((Charset) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // charset == null
         //
         verifyException("okio.ByteString", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[31];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)11;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(31, byteString0.size());
      assertNotNull(byteString0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.toString());
      assertEquals("US-ASCII", charset1.displayName());
      assertEquals("US-ASCII", charset1.name());
      assertTrue(charset1.isRegistered());
      assertNotNull(charset1);
      
      String string0 = byteString0.toString();
      assertEquals(31, byteString0.size());
      assertEquals("[hex=fbabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]", string0);
      assertNotNull(string0);
      
      String string1 = byteString0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(31, byteString0.size());
      assertEquals("[hex=fbabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]", string1);
      assertNotNull(string1);
      
      ByteString byteString1 = ByteString.encodeUtf8("[hex=6e0b0000000000000000000000000000000000000000000000000000000000]");
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(68, byteString1.size());
      assertNotNull(byteString1);
      
      String string2 = byteString1.toString();
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(68, byteString1.size());
      assertEquals("[size=68 text=[hex=6e0b0000000000000000000000000000000000000000000000000000000\u2026]", string2);
      assertNotNull(string2);
      
      int int0 = ObjectStreamConstants.PROTOCOL_VERSION_2;
      assertEquals(2, int0);
      
      int int1 = byteString1.lastIndexOf(byteArray0, (int) (byte)110);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(int1 == int0);
      assertEquals(68, byteString1.size());
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)10;
      ByteString byteString0 = new ByteString(byteArray0);
      assertEquals(18, byteString0.size());
      assertNotNull(byteString0);
      
      ByteString byteString1 = byteString0.sha512();
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(18, byteString0.size());
      assertEquals(64, byteString1.size());
      assertNotNull(byteString1);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertEquals("US-ASCII", charset1.displayName());
      assertEquals("US-ASCII", charset1.name());
      assertTrue(charset1.isRegistered());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.toString());
      assertNotNull(charset1);
      
      byteString1.hashCode();
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString0));
      assertEquals(18, byteString0.size());
      assertEquals(64, byteString1.size());
      
      ByteString byteString2 = byteString0.toAsciiUppercase();
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(18, byteString0.size());
      assertEquals(18, byteString2.size());
      assertNotNull(byteString2);
      
      Charset charset2 = Charset.defaultCharset();
      assertSame(charset2, charset1);
      assertSame(charset2, charset0);
      assertTrue(charset2.isRegistered());
      assertEquals("US-ASCII", charset2.displayName());
      assertTrue(charset2.canEncode());
      assertEquals("US-ASCII", charset2.name());
      assertEquals("US-ASCII", charset2.toString());
      assertNotNull(charset2);
      
      ByteBuffer byteBuffer0 = charset2.encode("(8JQrG (>O8Oo");
      assertSame(charset2, charset1);
      assertSame(charset2, charset0);
      assertTrue(charset2.isRegistered());
      assertEquals("US-ASCII", charset2.displayName());
      assertTrue(charset2.canEncode());
      assertEquals("US-ASCII", charset2.name());
      assertEquals("US-ASCII", charset2.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(13, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=13 cap=13]", byteBuffer0.toString());
      assertEquals(13, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(13, byteBuffer0.limit());
      assertNotNull(byteBuffer0);
      
      CharBuffer charBuffer0 = charset1.decode(byteBuffer0);
      assertSame(charset1, charset2);
      assertSame(charset1, charset0);
      assertSame(charset2, charset1);
      assertSame(charset2, charset0);
      assertEquals("US-ASCII", charset1.displayName());
      assertEquals("US-ASCII", charset1.name());
      assertTrue(charset1.isRegistered());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.toString());
      assertTrue(charset2.isRegistered());
      assertEquals("US-ASCII", charset2.displayName());
      assertTrue(charset2.canEncode());
      assertEquals("US-ASCII", charset2.name());
      assertEquals("US-ASCII", charset2.toString());
      assertEquals(13, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(13, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=13 lim=13 cap=13]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(13, byteBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(13, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("(8JQrG (>O8Oo", charBuffer0.toString());
      assertEquals(13, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(13, charBuffer0.capacity());
      assertEquals(13, charBuffer0.length());
      assertNotNull(charBuffer0);
      
      String string0 = byteString0.toString();
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertEquals(18, byteString0.size());
      assertEquals("[hex=75aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]", string0);
      assertNotNull(string0);
      
      String string1 = byteString1.toString();
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertNotSame(byteString1, byteString2);
      assertNotSame(byteString1, byteString0);
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString1.equals((Object)byteString2));
      assertFalse(byteString1.equals((Object)byteString0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(18, byteString0.size());
      assertEquals(64, byteString1.size());
      assertEquals("[hex=bf5bbb9bffa5bfb7afba9b77affbbfa9bf9ffaff9f7f9dbbafbafabf5f7afaf9bdf7aa5d7fafbaffaff7f5bfabba5a75fbf5aff79bafba9bfff5b5ab5dbffafb]", string1);
      assertNotNull(string1);
      
      String string2 = byteString0.string(charset2);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertSame(charset2, charset1);
      assertSame(charset2, charset0);
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(18, byteString0.size());
      assertTrue(charset2.isRegistered());
      assertEquals("US-ASCII", charset2.displayName());
      assertTrue(charset2.canEncode());
      assertEquals("US-ASCII", charset2.name());
      assertEquals("US-ASCII", charset2.toString());
      assertEquals("u\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string2);
      assertNotNull(string2);
      
      int int0 = 90;
      String string3 = byteString2.string(charset1);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertSame(charset1, charset2);
      assertSame(charset1, charset0);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(18, byteString0.size());
      assertEquals("US-ASCII", charset1.displayName());
      assertEquals("US-ASCII", charset1.name());
      assertTrue(charset1.isRegistered());
      assertTrue(charset1.canEncode());
      assertEquals("US-ASCII", charset1.toString());
      assertEquals(18, byteString2.size());
      assertEquals("U\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string3);
      assertNotNull(string3);
      
      String string4 = byteString2.string(charset0);
      assertNotSame(byteString0, byteString2);
      assertNotSame(byteString0, byteString1);
      assertSame(charset0, charset2);
      assertSame(charset0, charset1);
      assertNotSame(byteString2, byteString1);
      assertNotSame(byteString2, byteString0);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(byteString0.equals((Object)byteString2));
      assertFalse(byteString0.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString1));
      assertFalse(byteString2.equals((Object)byteString0));
      assertEquals(18, byteString0.size());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(18, byteString2.size());
      assertEquals("U\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string4);
      assertNotNull(string4);
      
      try { 
        MockURI.URI("qOqBJ5vbQ3", "okio.Segment", "", 90, "", "", "qOqBJ5vbQ3");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected hostname at index 26: qOqBJ5vbQ3://okio.Segment@:90?#qOqBJ5vbQ3
         //
         verifyException("java.net.URI$Parser", e);
      }
  }
}
