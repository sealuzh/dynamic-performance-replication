/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 13:56:46 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Machine;
import com.google.re2j.RE2;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RE2_ESTest extends RE2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("UTF-8");
      String string0 = rE2_0.replaceFirst("UTF-8", "UTF-8");
      assertEquals("UTF-8", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      int[] intArray0 = rE2_0.findSubmatchIndex("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RE2 rE2_0 = new RE2("7zZmF&Hc^Z}$sNm47");
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 1933);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RE2 rE2_0 = new RE2("com.google.re2j.CharGroup");
      String string0 = rE2_0.find("com.google.re2j.CharGroup");
      assertEquals("com.google.re2j.CharGroup", string0);
      
      String string1 = rE2_0.toString();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      List<String[]> list0 = rE2_0.findAllSubmatch("", (-4));
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      List<int[]> list0 = rE2_0.findAllIndex("", 2450);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<String> list0 = rE2_0.findAll("", (-5090));
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RE2 rE2_0 = new RE2("WHH1$C!1jbxM>O");
      assertNotNull(rE2_0);
      assertEquals("WHH1$C!1jbxM>O", rE2_0.toString());
      
      List<String[]> list0 = rE2_0.findAllSubmatch("WHH1$C!1jbxM>O", 3169);
      assertNull(list0);
      assertEquals("WHH1$C!1jbxM>O", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      int[] intArray0 = rE2_0.findUTF8SubmatchIndex(byteArray0);
      assertNotNull(intArray0);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RE2 rE2_0 = new RE2("!'+E\"D#w}PNF_");
      assertNotNull(rE2_0);
      assertEquals("!'+E\"D#w}PNF_", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findSubmatchIndex("!'+E\"D#w}PNF_");
      assertNull(intArray0);
      assertEquals("!'+E\"D#w}PNF_", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("UTF-8");
      assertNotNull(rE2_0);
      assertEquals("UTF-8", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<int[]> list0 = rE2_0.findAllUTF8Index(byteArray0, 2);
      assertNull(list0);
      assertEquals("UTF-8", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RE2 rE2_0 = new RE2("P2^CVy6mzvd1wY~");
      assertNotNull(rE2_0);
      assertEquals("P2^CVy6mzvd1wY~", rE2_0.toString());
      
      rE2_0.reset();
      assertEquals("P2^CVy6mzvd1wY~", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findIndex("3%2`HF&x<~|6");
      assertNull(intArray0);
      assertEquals("P2^CVy6mzvd1wY~", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<String> list0 = rE2_0.findAll("", 9);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      List<int[]> list1 = rE2_0.findAllUTF8Index(byteArray0, 9);
      assertNotNull(list1);
      assertEquals("", rE2_0.toString());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[6];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNotNull(byteArray1);
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("H!nGf");
      assertNotNull(rE2_0);
      assertEquals("H!nGf", rE2_0.toString());
      
      int[] intArray0 = rE2_0.findIndex("H!nGf");
      assertNotNull(intArray0);
      assertEquals("H!nGf", rE2_0.toString());
      assertArrayEquals(new int[] {0, 5}, intArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)17;
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, 1);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertArrayEquals(new byte[] {(byte)0, (byte)17, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertEquals("", rE2_0.toString());
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RE2 rE2_0 = new RE2("Telugu");
      assertNotNull(rE2_0);
      assertEquals("Telugu", rE2_0.toString());
      
      boolean boolean0 = rE2_0.match("Telugu", 256, 64, 64, (int[]) null, 64);
      assertEquals("Telugu", rE2_0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, 257);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = RE2.POSIX;
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RE2 rE2_0 = new RE2("3=,U:");
      assertNotNull(rE2_0);
      assertEquals("3=,U:", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (-2710));
      assertNull(list0);
      assertEquals("3=,U:", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string0 = rE2_0.toString();
      assertNotNull(string0);
      assertEquals("3=,U:", rE2_0.toString());
      assertEquals("3=,U:", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals("", rE2_0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-127);
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte) (-127));
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertArrayEquals(new byte[] {(byte) (-127), (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = RE2.quoteMeta("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string1 = rE2_0.replaceAll("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", rE2_0.toString());
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RE2 rE2_0 = new RE2("L@JWLRny'Nq");
      assertNotNull(rE2_0);
      assertEquals("L@JWLRny'Nq", rE2_0.toString());
      
      String string0 = rE2_0.replaceFirst("_k}M+j\"%o|d&&_", "_k}M+j\"%o|d&&_");
      assertNotNull(string0);
      assertEquals("L@JWLRny'Nq", rE2_0.toString());
      assertEquals("_k}M+j\"%o|d&&_", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("3=,9:");
      assertNotNull(rE2_0);
      assertEquals("3=,9:", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("3=,9:", "3=,9:");
      assertNotNull(string0);
      assertEquals("3=,9:", rE2_0.toString());
      assertEquals("3=,9:", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("Mn");
      assertNotNull(rE2_0);
      assertEquals("Mn", rE2_0.toString());
      
      String[] stringArray0 = rE2_0.findSubmatch(">6>\"");
      assertNull(stringArray0);
      assertEquals("Mn", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("s]vwGvP}*PlBke");
      assertNotNull(rE2_0);
      assertEquals("s]vwGvP}*PlBke", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllIndex("ma`Z7sXBZu", 32);
      assertNull(list0);
      assertEquals("s]vwGvP}*PlBke", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = RE2.quoteMeta("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = rE2_0.match("");
      assertEquals("", rE2_0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      RE2 rE2_0 = new RE2("p");
      assertNotNull(rE2_0);
      assertEquals("p", rE2_0.toString());
      
      rE2_0.reset();
      assertEquals("p", rE2_0.toString());
      
      String string0 = RE2.quoteMeta("p");
      assertNotNull(string0);
      assertEquals("p", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("x&>_s!9^+SQW");
      assertNotNull(rE2_0);
      assertEquals("x&>_s!9^+SQW", rE2_0.toString());
      
      byte[] byteArray0 = new byte[2];
      List<int[]> list0 = rE2_0.findAllUTF8SubmatchIndex(byteArray0, (byte)0);
      assertNull(list0);
      assertEquals("x&>_s!9^+SQW", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      
      boolean boolean0 = rE2_0.matchUTF8(byteArray0);
      assertEquals("x&>_s!9^+SQW", rE2_0.toString());
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      rE2_0.reset();
      assertEquals("", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      RE2 rE2_0 = new RE2("com.google.re2j.CharGroup");
      assertNotNull(rE2_0);
      assertEquals("com.google.re2j.CharGroup", rE2_0.toString());
      
      String string0 = rE2_0.toString();
      assertNotNull(string0);
      assertEquals("com.google.re2j.CharGroup", rE2_0.toString());
      assertEquals("com.google.re2j.CharGroup", string0);
      
      byte[] byteArray0 = new byte[1];
      int[] intArray0 = rE2_0.findUTF8Index(byteArray0);
      assertNull(intArray0);
      assertEquals("com.google.re2j.CharGroup", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("EMPTY_MATCH");
      assertNotNull(rE2_0);
      assertEquals("EMPTY_MATCH", rE2_0.toString());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-51);
      List<byte[]> list0 = rE2_0.findAllUTF8(byteArray0, (byte) (-51));
      assertNull(list0);
      assertEquals("EMPTY_MATCH", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte) (-51)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = RE2.quoteMeta("om.google.^re2j.2");
      assertNotNull(string0);
      assertEquals("om\\.google\\.\\^re2j\\.2", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      RE2 rE2_0 = new RE2("can't happen");
      assertNotNull(rE2_0);
      assertEquals("can't happen", rE2_0.toString());
      
      byte[] byteArray0 = new byte[0];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
      assertEquals("can't happen", rE2_0.toString());
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("com.google.re2j.CharGroup");
      assertNotNull(rE2_0);
      assertEquals("com.google.re2j.CharGroup", rE2_0.toString());
      
      String string0 = rE2_0.toString();
      assertNotNull(string0);
      assertEquals("com.google.re2j.CharGroup", rE2_0.toString());
      assertEquals("com.google.re2j.CharGroup", string0);
      
      List<String[]> list0 = rE2_0.findAllSubmatch("com.google.re2j.CharGroup", (-1258));
      assertNotNull(list0);
      assertEquals("com.google.re2j.CharGroup", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RE2 rE2_0 = new RE2("}+9#\t3$HT~=`");
      assertNotNull(rE2_0);
      assertEquals("}+9#\t3$HT~=`", rE2_0.toString());
      
      List<String> list0 = rE2_0.findAll("#'}r%", 146);
      assertNull(list0);
      assertEquals("}+9#\t3$HT~=`", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      rE2_0.prefix = "";
      assertEquals("", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("", 128067);
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      int int0 = rE2_0.numberOfCapturingGroups();
      assertEquals("", rE2_0.toString());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RE2 rE2_0 = new RE2("com.google.re2j.CharGroup");
      assertNotNull(rE2_0);
      assertEquals("com.google.re2j.CharGroup", rE2_0.toString());
      
      String string0 = rE2_0.find("E81tffE;+");
      assertNotNull(string0);
      assertEquals("com.google.re2j.CharGroup", rE2_0.toString());
      assertEquals("", string0);
      
      String string1 = rE2_0.toString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("com.google.re2j.CharGroup", rE2_0.toString());
      assertEquals("com.google.re2j.CharGroup", string1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = RE2.match("^Lp", "^Lp");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RE2 rE2_0 = RE2.compileImpl("", (-6), false);
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      byte[] byteArray1 = rE2_0.findUTF8(byteArray0);
      assertNotNull(byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals("", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte) (-124), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RE2 rE2_0 = RE2.compilePOSIX("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      int[] intArray0 = new int[3];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      intArray0[1] = 4;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        rE2_0.match("", 0, 0, 4, intArray0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RE2 rE2_0 = RE2.compile(" > ");
      assertNotNull(rE2_0);
      assertEquals(" > ", rE2_0.toString());
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-2204);
      intArray0[1] = (-2204);
      intArray0[0] = (-180);
      boolean boolean0 = rE2_0.match(" > ", (-180), (-180), (-2204), intArray0, 1843);
      assertEquals(" > ", rE2_0.toString());
      assertFalse(boolean0);
      assertArrayEquals(new int[] {(-180), (-2204), 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RE2 rE2_0 = new RE2("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.replaceFirst("2", "2");
      assertNotNull(string0);
      assertEquals("", rE2_0.toString());
      assertEquals("22", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      RE2 rE2_0 = RE2.compile("z");
      assertNotNull(rE2_0);
      assertEquals("z", rE2_0.toString());
      
      List<int[]> list0 = rE2_0.findAllSubmatchIndex("ION;5QU`Fpoc", 128);
      assertNull(list0);
      assertEquals("z", rE2_0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.replaceAll("6_", (String) null);
      assertNotNull(string0);
      assertEquals("", rE2_0.toString());
      assertEquals("null6null_null", string0);
      
      // Undeclared exception!
      try { 
        rE2_0.findUTF8Submatch((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.MachineInput$UTF8Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("");
      assertNotNull(rE2_0);
      assertEquals("", rE2_0.toString());
      
      String string0 = rE2_0.replaceFirst("", "");
      assertNotNull(string0);
      assertEquals("", rE2_0.toString());
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[4];
      List<String> list0 = rE2_0.findAll("Me", (-3));
      assertNotNull(list0);
      assertEquals("", rE2_0.toString());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      RE2 rE2_1 = RE2.compile("Me");
      assertNotNull(rE2_1);
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("Me", rE2_1.toString());
      assertNotSame(rE2_1, rE2_0);
      
      byte[][] byteArray1 = rE2_1.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("Me", rE2_1.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(rE2_1, rE2_0);
      
      List<int[]> list1 = rE2_1.findAllIndex("", 0);
      assertNull(list1);
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("Me", rE2_1.toString());
      assertNotSame(rE2_1, rE2_0);
      
      int[] intArray0 = rE2_1.findIndex("(/{b}9b8Rn+m(w");
      assertNull(intArray0);
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("Me", rE2_1.toString());
      assertNotSame(rE2_1, rE2_0);
      
      Machine machine0 = new Machine(rE2_0);
      assertNotNull(machine0);
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertEquals("", rE2_0.toString());
      
      List<byte[][]> list2 = rE2_1.findAllUTF8Submatch(byteArray0, 0);
      assertNull(list2);
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("Me", rE2_1.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(rE2_1, rE2_0);
      
      boolean boolean0 = RE2.match("", "");
      assertTrue(boolean0);
      
      List<String[]> list3 = rE2_1.findAllSubmatch("UTF-8", 16);
      assertNull(list3);
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("Me", rE2_1.toString());
      assertNotSame(rE2_1, rE2_0);
      
      boolean boolean1 = rE2_0.match("", (byte)0, (byte)0, (byte)66, (int[]) null, (byte)66);
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertTrue(boolean1 == boolean0);
      assertEquals("", rE2_0.toString());
      assertTrue(boolean1);
      assertNotSame(rE2_0, rE2_1);
      
      RE2 rE2_2 = RE2.compile("");
      assertNotNull(rE2_2);
      assertFalse(rE2_2.equals((Object)rE2_1));
      assertFalse(rE2_2.equals((Object)rE2_0));
      assertEquals("", rE2_2.toString());
      assertNotSame(rE2_2, rE2_1);
      assertNotSame(rE2_2, rE2_0);
      
      byte[] byteArray2 = rE2_1.findUTF8(byteArray0);
      assertNull(byteArray2);
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertFalse(rE2_1.equals((Object)rE2_2));
      assertEquals("Me", rE2_1.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(rE2_1, rE2_0);
      assertNotSame(rE2_1, rE2_2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RE2 rE2_0 = RE2.compile("Lm");
      assertNotNull(rE2_0);
      assertEquals("Lm", rE2_0.toString());
      
      byte[] byteArray0 = new byte[3];
      byte[][] byteArray1 = rE2_0.findUTF8Submatch(byteArray0);
      assertNull(byteArray1);
      assertEquals("Lm", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      String[] stringArray0 = rE2_0.findSubmatch("Lm");
      assertNotNull(stringArray0);
      assertEquals("Lm", rE2_0.toString());
      
      byte[] byteArray2 = new byte[9];
      assertFalse(byteArray2.equals((Object)byteArray0));
      
      byteArray2[2] = (byte) (-119);
      RE2 rE2_1 = RE2.compilePOSIX("|cHT7;JszTU~zQQhkh9");
      assertNotNull(rE2_1);
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("|cHT7;JszTU~zQQhkh9", rE2_1.toString());
      assertNotSame(rE2_1, rE2_0);
      
      List<byte[][]> list0 = rE2_0.findAllUTF8Submatch(byteArray0, (-6));
      assertNull(list0);
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertEquals("Lm", rE2_0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotSame(rE2_0, rE2_1);
      assertNotSame(byteArray0, byteArray2);
      
      rE2_1.reset();
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("|cHT7;JszTU~zQQhkh9", rE2_1.toString());
      assertNotSame(rE2_1, rE2_0);
      
      Machine machine0 = rE2_0.get();
      assertNotNull(machine0);
      assertFalse(rE2_0.equals((Object)rE2_1));
      assertEquals("Lm", rE2_0.toString());
      assertNotSame(rE2_0, rE2_1);
      
      String string0 = rE2_1.replaceAll("|cHT7;JszTU~zQQhkh9", "Lm");
      assertNotNull(string0);
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("|cHT7;JszTU~zQQhkh9", rE2_1.toString());
      assertEquals("Lm|Lm", string0);
      assertNotSame(rE2_1, rE2_0);
      
      int[] intArray0 = rE2_1.findUTF8Index(byteArray0);
      assertNotNull(intArray0);
      assertFalse(byteArray0.equals((Object)byteArray2));
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertEquals("|cHT7;JszTU~zQQhkh9", rE2_1.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotSame(byteArray0, byteArray2);
      assertNotSame(rE2_1, rE2_0);
      
      RE2 rE2_2 = RE2.compile("Lm|Lm");
      assertNotNull(rE2_2);
      assertFalse(rE2_2.equals((Object)rE2_0));
      assertFalse(rE2_2.equals((Object)rE2_1));
      assertEquals("Lm|Lm", rE2_2.toString());
      assertNotSame(rE2_2, rE2_0);
      assertNotSame(rE2_2, rE2_1);
      
      String string1 = rE2_1.find("UTF-8");
      assertNotNull(string1);
      assertFalse(rE2_1.equals((Object)rE2_0));
      assertFalse(rE2_1.equals((Object)rE2_2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("|cHT7;JszTU~zQQhkh9", rE2_1.toString());
      assertEquals("", string1);
      assertNotSame(rE2_1, rE2_0);
      assertNotSame(rE2_1, rE2_2);
      
      RE2 rE2_3 = RE2.compile("Lm|Lm");
      assertNotNull(rE2_3);
      assertFalse(rE2_3.equals((Object)rE2_2));
      assertFalse(rE2_3.equals((Object)rE2_0));
      assertFalse(rE2_3.equals((Object)rE2_1));
      assertEquals("Lm|Lm", rE2_3.toString());
      assertNotSame(rE2_3, rE2_2);
      assertNotSame(rE2_3, rE2_0);
      assertNotSame(rE2_3, rE2_1);
  }
}
