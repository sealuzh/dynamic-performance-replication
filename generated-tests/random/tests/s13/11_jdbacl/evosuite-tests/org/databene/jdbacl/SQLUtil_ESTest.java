/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 22 22:01:37 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.LinkedList;
import java.util.List;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("ol.\"kn_");
      assertEquals(1, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM null WHERE ", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnListWithTableName("9L&]ouj,0;U", stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = SQLUtil.renderColumnListWithTableName((String) null, stringArray0);
      assertEquals("null.null, null.null", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.leftJoin("select into", stringArray0, (String) null, "select into", stringArray0);
      assertEquals("left join null as select into on ", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = SQLUtil.leftJoin("", stringArray0, "", "E", stringArray0);
      assertEquals("left join  as E on .null = E.null and .null = E.null and .null = E.null and .null = E.null and .null = E.null and .null = E.null", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.innerJoin("", stringArray0, " on ", (String) null, stringArray0);
      assertEquals(" on  as null on .null = null.null and .null = null.null and .null = null.null and .null = null.null and .null = null.null and .null = null.null and .null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("lG+v", dBSchema0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        SQLUtil.normalize(stringArray0[6], false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("SELECT * FROM ", (String[]) null, "Lj41w%-i5R0K", "create unique index", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "7.p;#7G3@u5u", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.join("+HpATQs}", "XSDBC.D", stringArray0, "+HpATQs}", (String) null, stringArray0);
      assertEquals("+HpATQs} join +HpATQs} as null on XSDBC.D.null = null.null and XSDBC.D.null = null.null and XSDBC.D.null = null.null", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("nclo");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("SELECT * FROM ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("sf$wV7~i/h");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("drop materialized view");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("dbex.lck");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("create unique indexupdatealter materialized view");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.firebirdsql.jca.FBLocalTransaction$FBLocalXid");
      String[] stringArray0 = new String[8];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.renderValue(dBPrimaryKeyConstraint0);
      assertEquals("PRIMARY KEY (, , , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND null = null AND null = null", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(99, "D{3!WmqYcn/^X:");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("-&k`/lWX:j&<ToUn.-&k`/lWX:j&<ToUn, -&k`/lWX:j&<ToUn.-&k`/lWX:j&<ToUn, -&k`/lWX:j&<ToUn.-&k`/lWX:j&<ToUn", (DBTable) null, dBDataType0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "-&k`/lWX:j&<ToUn");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("-&k`/lWX:j&<ToUnD{3!WMQYCN/^X:", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = SQLUtil.normalize("Sop\"UrH8 5b^u", true);
      assertEquals("Sop \"UrH8 5b^u\"", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = SQLUtil.normalize("wJB#b*y4", true);
      assertEquals("wJ  B # b * y4", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = SQLUtil.normalize("-- rollback ", false);
      assertEquals("-- rollback", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = SQLUtil.normalize("(<30YCXw'+Mc)", false);
      assertEquals("(< 30  YCXw '+Mc)'", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = SQLUtil.normalize(";<3tygtn,bV<3b1fY", true);
      assertEquals("; < 3tygtn, bV < 3b1  fY", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = SQLUtil.normalize("^95DOC)ha", false);
      assertEquals("^ 95DOC) ha", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = SQLUtil.normalize("@/!%%&Ox< tU:", true);
      assertEquals("@ / ! % % & Ox < tU :", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = SQLUtil.normalize("org.apache.derby.iapi.sql.execute.ExecIndexRow", false);
      assertEquals("org.apache.derby.iapi.sql.execute.ExecIndexRow", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = SQLUtil.removeComments(") )(0,0) NULL");
      assertEquals(") )(0,0) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "null as  on . = . and . = . and . = .", false, stringArray0);
      String string0 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertEquals("unique constraint null as  on . = . and . = . and . = .", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "rws", true, (String[]) null);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT rws ", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execute");
      String[] stringArray0 = new String[5];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "}60I2]w\"KI5Z|g5", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT }60I2]w\"KI5Z|g5 CONSTRAINT }60I2]w\"KI5Z|g5 ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.firebirdsql.jca.FBLocalTransaction$FBLocalXid");
      String[] stringArray0 = new String[8];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      assertNull(dBPrimaryKeyConstraint0.getName());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CLASS_NAME", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT CLASS_NAME ", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("truncatejh?-{zb#5'{|bp_0");
      DBPackage dBPackage0 = new DBPackage("truncatejh?-{zb#5'{|bp_0", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("truncatejh?-{zb#5'{|bp_0", dBPackage0);
      String string0 = SQLUtil.ownerDotComponent(dBProcedure0);
      assertEquals("truncatejh?-{zb#5'{|bp_0.truncatejh?-{zb#5'{|bp_0", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DBTrigger dBTrigger0 = new DBTrigger("dw", (DBSchema) null);
      String string0 = SQLUtil.ownerDotComponent(dBTrigger0);
      assertEquals("dw", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((-1568.322507347252));
      SQLUtil.addOptionalCondition("insert", stringBuilder1);
      assertEquals("-1568.322507347252 or insert", stringBuilder1.toString());
      assertEquals("-1568.322507347252 or insert", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "7.p;#7G3@u5u", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((-1568.322507347252));
      SQLUtil.addRequiredCondition("PRIMARY KEY (, , )", stringBuilder1);
      assertEquals("-1568.322507347252 and PRIMARY KEY (, , )", stringBuilder1.toString());
      assertEquals("-1568.322507347252 and PRIMARY KEY (, , )", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" NULL", false, defaultDBTable0, "columnBitMap");
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      SQLUtil.addRequiredCondition("alter session", stringBuilder0);
      assertEquals("alter session", stringBuilder0.toString());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = SQLUtil.join("", "", stringArray0, "", "org.apache.derby.iapi.types.SqlXmlUtil", stringArray0);
      assertEquals(" as org.apache.derby.iapi.types.SqlXmlUtil on .null = org.apache.derby.iapi.types.SqlXmlUtil.null", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("cKrkO");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create unique index", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"create unique index\" FOREIGN KEY (, , , ) REFERENCES cKrkO(, , , )", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Q38NYHe}}H", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , )", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "null as  on . = . and . = . and . = .", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , )", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("execgetcolumnfr");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectStatement");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized view");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("-&k`/lWX:j&<ToUn");
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Character character0 = Character.valueOf('r');
      String string0 = SQLUtil.substituteMarkers("\u022A\uFFFF}>", "cgs_n'&89G<4GdLBI", character0);
      assertEquals("\u022A\uFFFF}>", string0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("create tableorg.apache.derby.iapi.sql.execute.execindexrow", "delete", "delete");
      assertEquals("create tableorg.apache.derby.iapi.sql.execute.execindexrow", string0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(65, ")");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(")", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(") )(0,0) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-3), "KZ0i?KV>\"Gj#e");
      Integer integer0 = new Integer(6);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("KZ0i?KV>\"Gj#e", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("KZ0i?KV>\"Gj#e KZ0I?KV>\"GJ#E(6) NULL", string0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" as ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" as ", defaultDBTable0, 16777216, "+5A1 _6Pvun1)suO]j");
      defaultDBColumn0.setNullable(false);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" as  +5A1 _6PVUN1)SUO]J NOT NULL", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema(" or ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" or ", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" or ", defaultDBTable0, 539, " or ");
      defaultDBColumn0.setDefaultValue("eXh1P)n9YS.!Q->");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" or   OR  DEFAULT eXh1P)n9YS.!Q-> NULL", string0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("updateupdatealter materialized view", defaultDBTable0, 9, "updateupdatealter materialized view");
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("updateupdatealter materialized view", string0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DBDataType dBDataType0 = DBDataType.getInstance(99, "D{3!WmqYcn/^X:");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("-&k`/lWX:j&<ToUn.-&k`/lWX:j&<ToUn, -&k`/lWX:j&<ToUn.-&k`/lWX:j&<ToUn, -&k`/lWX:j&<ToUn.-&k`/lWX:j&<ToUn", (DBTable) null, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("-&k`/lWX:j&<ToUn.-&k`/lWX:j&<ToUn, -&k`/lWX:j&<ToUn.-&k`/lWX:j&<ToUn, -&k`/lWX:j&<ToUn.-&k`/lWX:j&<ToUn, -&k`/lWX:j&<ToUn.-&k`/lWX:j&<ToUn, -&k`/lWX:j&<ToUn.-&k`/lWX:j&<ToUn, -&k`/lWX:j&<ToUn.-&k`/lWX:j&<ToUn", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" NULL");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "}60I2]w\"KI5Z|g5", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("}60I2]w\"KI5Z|g5");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter session");
      String[] stringArray0 = new String[4];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter session", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alter session");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("alter session", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("g.xFYws3WoHTGKz");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("g.xFYws3WoHTGKz", defaultDBTable0, (-1575), "g.xFYws3WoHTGKz");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("g.xFYws3WoHTGKz", defaultDBTable0.getName());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("[|#;J?");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("(< 30  YCXw '+Mc)'", defaultDBTable0, 1419, "(< 30  YCXw '+Mc)'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"< 30  YCXw '+Mc\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("jkJ&(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: jkJ&(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("setBlob(String, Blob)", defaultDBTable0, 242, "setBlob(String, Blob)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, "Qh=yMT3tmx-N", "Qh=yMT3tmx-N");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK Qh=yMT3tmx-N", string0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("CLOB", string0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "null as  on . = . and . = . and . = .", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, , )", string0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.innerJoin("", stringArray0, (String) null, "", stringArray0);
      assertEquals("null as  on .null = .null and .null = .null and .null = .null", string0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = SQLUtil.leftJoin("!=E#V=z*", stringArray0, "{@?B", "!=E#V=z*", stringArray0);
      assertEquals("left join {@?B as !=E#V=z* on !=E#V=z*.null = !=E#V=z*.null and !=E#V=z*.null = !=E#V=z*.null and !=E#V=z*.null = !=E#V=z*.null and !=E#V=z*.null = !=E#V=z*.null and !=E#V=z*.null = !=E#V=z*.null and !=E#V=z*.null = !=E#V=z*.null and !=E#V=z*.null = !=E#V=z*.null and !=E#V=z*.null = !=E#V=z*.null and !=E#V=z*.null = !=E#V=z*.null", string0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("I{(VfC>8_G");
      String[] stringArray0 = new String[7];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "I{(VfC>8_G", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , , , , )", string0);
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }
}
