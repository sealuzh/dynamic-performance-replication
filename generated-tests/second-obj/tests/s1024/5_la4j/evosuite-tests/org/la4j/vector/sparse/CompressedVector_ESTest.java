/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 10:25:10 GMT 2018
 */

package org.la4j.vector.sparse;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Random;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;
import org.la4j.Vector;
import org.la4j.iterator.VectorIterator;
import org.la4j.operation.ooplace.OoPlaceVectorsAddition;
import org.la4j.vector.DenseVector;
import org.la4j.vector.SparseVector;
import org.la4j.vector.VectorFactory;
import org.la4j.vector.dense.BasicVector;
import org.la4j.vector.functor.VectorFunction;
import org.la4j.vector.functor.VectorProcedure;
import org.la4j.vector.sparse.CompressedVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CompressedVector_ESTest extends CompressedVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      boolean boolean0 = compressedVector0.nonZeroAt((-843));
      assertFalse(boolean0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-1171), 37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(9, 9);
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(9, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      compressedVector0.swapElements(37, 37);
      assertEquals(0, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(64);
      compressedVector0.setAll(64);
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(9953, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 64
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.random(0, (double) 0, (Random) null);
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.blankOfLength(0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(Double.NaN, compressedVector1.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) (-217);
      doubleArray0[2] = (double) (-217);
      doubleArray0[3] = (double) (-217);
      doubleArray0[4] = (double) (-217);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure1);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = new CompressedVector(0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int1 = 2147482784;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2147482784;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 486.7385;
      doubleArray0[4] = (double) 2147482784;
      doubleArray0[5] = 486.7385;
      doubleArray0[6] = (double) 2147482784;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      CompressedVector compressedVector1 = new CompressedVector(2147482784, 2147482784, doubleArray0, intArray0);
      // Undeclared exception!
      try { 
        compressedVector1.forEach(consumer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      CompressedVector compressedVector0 = CompressedVector.random(0, (double) 0, (Random) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1529.2;
      doubleArray0[2] = 0.0;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector1.forEach(consumer0);
      int int1 = 9;
      int int2 = (-42);
      // Undeclared exception!
      try { 
        compressedVector1.subtract((Vector) compressedVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Given vectors should have the same length: 3 does not equal to 0.
         //
         verifyException("org.la4j.operation.ooplace.OoPlaceVectorsSubtraction", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.fromCSV("3");
      compressedVector0.norm();
      compressedVector0.toRowMatrix();
      compressedVector0.toString();
      compressedVector0.iterator();
      // Undeclared exception!
      try { 
        CompressedVector.fromMatrixMarket("3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong input file format: can not read header '%%MatrixMarket'.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector0.forEach(consumer0);
      // Undeclared exception!
      try { 
        compressedVector0.copyOfLength((-2912));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2912
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)31;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        CompressedVector.zero(0, 2873);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be less then or equal to capacity: 2873.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      compressedVector0.setAll((-2301.240924358311));
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(48);
      compressedVector0.setAll(48);
      assertEquals(1.0, compressedVector0.density(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-14), vectorFunction0);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(2, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(3785);
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(3785, compressedVector1.length());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      // Undeclared exception!
      try { 
        compressedVector0.blankOfLength((-2142344057));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -2142344057
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector0 = CompressedVector.zero(37, 37);
      compressedVector0.swapElements((-1171), 37);
      assertEquals(37, compressedVector0.length());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(37);
      hashMap0.put(integer0, integer0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, (-1413));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float((-3059.8));
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer((-2101));
      hashMap0.put(integer0, float0);
      // Undeclared exception!
      try { 
        CompressedVector.fromMap(hashMap0, 2146080247);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Check your map: Index must be 0..n-1
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-114.0);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt((-14), vectorFunction0);
      assertEquals(2, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1078.786065274525;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {1078.786065274525}, doubleArray0, 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements((-68), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(3172);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(3172, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1.142479297746105).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(3172, vectorFunction0);
      assertEquals(3172, compressedVector0.length());
      assertEquals(3.1525851197982345E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(8);
      assertEquals(3172, compressedVector0.length());
      assertEquals(3.1525851197982345E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0, compressedVector1.cardinality());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(8, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 8;
      BasicVector basicVector0 = (BasicVector)Vector.fromArray(doubleArray0);
      assertEquals(1, basicVector0.length());
      assertNotNull(basicVector0);
      assertArrayEquals(new double[] {8.0}, doubleArray0, 0.01);
      
      compressedVector0.swapElements((-941), 2285);
      assertEquals(3172, compressedVector0.length());
      assertEquals(3.1525851197982345E-4, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      int int0 = (-2058);
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(-2058)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      // Undeclared exception!
      try { 
        compressedVector0.updateAt((-2058), vectorFunction0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // This vector can't grow up.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2090.87378154;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {2090.87378154}, doubleArray0, 0.01);
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.to(vectorFactory0);
      assertEquals(1, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(1, compressedVector1.length());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertArrayEquals(new double[] {2090.87378154}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1529.2;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 1529.2}, doubleArray0, 0.01);
      
      compressedVector0.swapElements(2, 2146080247);
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 1529.2}, doubleArray0, 0.01);
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      // Undeclared exception!
      try { 
        compressedVector0.to(vectorFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 64;
      CompressedVector compressedVector0 = CompressedVector.zero(64, 64);
      assertEquals(64, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(64);
      assertEquals(64, compressedVector0.length());
      assertEquals(64, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      int int1 = (-345);
      int int2 = 8;
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(1635, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector(182, 3);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(182, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(182, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      
      double double0 = compressedVector0.getOrElse(152, 1832.795548945206);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(182, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1832.795548945206, double0, 0.01);
      
      org.evosuite.runtime.Random.setNextRandom(3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      int int0 = 1;
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      String string0 = compressedVector0.toMatrixMarket();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertNotNull(string0);
      assertEquals("%%MatrixMarket vector coordinate real\n1 0\n", string0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)1).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      
      OoPlaceVectorsAddition ooPlaceVectorsAddition0 = new OoPlaceVectorsAddition();
      assertNotNull(ooPlaceVectorsAddition0);
      
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Stream<Byte> stream0 = linkedList0.stream();
      assertEquals(0, linkedList0.size());
      assertNotNull(stream0);
      
      Iterator<Byte> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      DenseVector denseVector0 = DenseVector.fromCollection(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, denseVector0.length());
      assertNotNull(denseVector0);
      
      // Undeclared exception!
      try { 
        SparseVector.fromCSV("Aj)jb&F(7sKF]|Ju");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      byte byte0 = (byte)34;
      Byte byte1 = new Byte((byte)34);
      assertNotNull(byte1);
      assertEquals((byte)34, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      boolean boolean0 = linkedList0.add(byte1);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(byte1.equals((Object)byte0));
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        CompressedVector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.random(0, (double) 0, (Random) null);
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = 4638.74134908;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1529.2;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.125, compressedVector1.density(), 0.01);
      assertEquals(2, compressedVector1.cardinality());
      assertEquals(16, compressedVector1.length());
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      CompressedVector compressedVector2 = CompressedVector.fromArray(doubleArray0);
      assertEquals(16, compressedVector2.length());
      assertEquals(2, compressedVector2.cardinality());
      assertEquals(0.125, compressedVector2.density(), 0.01);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotNull(compressedVector2);
      assertTrue(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      
      String string0 = compressedVector0.toMatrixMarket();
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotNull(string0);
      assertEquals("%%MatrixMarket vector coordinate real\n0 0\n", string0);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt(0, vectorFunction0);
      assertEquals(0.0625, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(16, compressedVector1.length());
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      // Undeclared exception!
      try { 
        CompressedVector.fromCSV((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 1);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(5.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.updateAt(2147482707, vectorFunction0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      boolean boolean0 = compressedVector0.nonZeroAt(6);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = 1648.271259;
      doubleArray0[2] = (double) 54;
      doubleArray0[3] = (double) 54;
      int[] intArray0 = new int[8];
      intArray0[0] = 16;
      intArray0[1] = 16;
      intArray0[2] = (-2);
      intArray0[3] = (-2);
      intArray0[4] = (-2);
      intArray0[5] = 54;
      intArray0[6] = 54;
      intArray0[7] = (-2);
      CompressedVector compressedVector0 = new CompressedVector(54, (-2), doubleArray0, intArray0);
      assertEquals(54, compressedVector0.length());
      assertEquals((-0.037037037037037035), compressedVector0.density(), 0.01);
      assertEquals((-2), compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {(-2.0), 1648.271259, 54.0, 54.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {16, 16, (-2), (-2), (-2), 54, 54, (-2)}, intArray0);
      
      compressedVector0.setAll(54.0);
      assertEquals(54, compressedVector0.cardinality());
      assertEquals(54, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {(-2.0), 1648.271259, 54.0, 54.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {16, 16, (-2), (-2), (-2), 54, 54, (-2)}, intArray0);
      
      compressedVector0.set(16, (-2.0));
      assertEquals(54, compressedVector0.cardinality());
      assertEquals(54, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertArrayEquals(new double[] {(-2.0), 1648.271259, 54.0, 54.0}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {16, 16, (-2), (-2), (-2), 54, 54, (-2)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1078.78606527;
      doubleArray0[2] = (-1.0);
      doubleArray0[4] = 1078.78606527;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(5, compressedVector0.length());
      assertEquals(0.6, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {1078.78606527, 0.0, (-1.0), 0.0, 1078.78606527}, doubleArray0, 0.01);
      
      Vector vector0 = compressedVector0.add((-1.0));
      assertEquals(5, compressedVector0.length());
      assertEquals(0.6, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(5, vector0.length());
      assertNotNull(vector0);
      assertArrayEquals(new double[] {1078.78606527, 0.0, (-1.0), 0.0, 1078.78606527}, doubleArray0, 0.01);
      
      compressedVector0.swapElements(32, 0);
      assertEquals(5, compressedVector0.length());
      assertEquals(0.6, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertArrayEquals(new double[] {1078.78606527, 0.0, (-1.0), 0.0, 1078.78606527}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      Integer integer1 = Integer.getInteger("", 2);
      assertNotNull(integer1);
      assertEquals(2, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = hashMap0.put(integer0, integer1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(integer2);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      
      CompressedVector compressedVector0 = CompressedVector.fromMap(hashMap0, 9);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0.1111111111111111, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertNotNull(compressedVector0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1529.2;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 1529.2}, doubleArray0, 0.01);
      
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(2, compressedVector1.cardinality());
      assertEquals(5, compressedVector1.length());
      assertEquals(0.4, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 1529.2}, doubleArray0, 0.01);
      
      String string0 = compressedVector0.toMatrixMarket();
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotNull(string0);
      assertEquals("%%MatrixMarket vector coordinate real\n5 2\n3 -1.000\n5 1529.200\n", string0);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 1529.2}, doubleArray0, 0.01);
      
      compressedVector0.swapElements((-330), 4);
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(2, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 1529.2}, doubleArray0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector1.eachNonZero(vectorProcedure0);
      assertEquals(2, compressedVector1.cardinality());
      assertEquals(5, compressedVector1.length());
      assertEquals(0.4, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {0.0, 0.0, (-1.0), 0.0, 1529.2}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      doubleArray0[0] = 1078.786065274525;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(16, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.0625, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      compressedVector0.swapElements((-68), 0);
      assertEquals(16, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.0625, compressedVector0.density(), 0.01);
      
      boolean boolean0 = compressedVector0.nonZeroAt(53);
      assertEquals(16, compressedVector0.length());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.0625, compressedVector0.density(), 0.01);
      assertFalse(boolean0);
      
      org.evosuite.runtime.Random.setNextRandom(53);
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      // Undeclared exception!
      try { 
        CompressedVector.random((-1152), (-836.0), (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      byte byte0 = (byte)34;
      Byte byte1 = new Byte((byte)34);
      assertNotNull(byte1);
      assertEquals((byte)34, (byte)byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      int int0 = Byte.compare((byte) (-38), (byte) (-38));
      assertEquals(0, int0);
      
      long long0 = Byte.toUnsignedLong((byte)4);
      assertEquals(4L, long0);
      
      boolean boolean0 = linkedList0.add(byte1);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(byte1.equals((Object)byte0));
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn((double)(byte)34).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        CompressedVector.fromArray((double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CompressedVector compressedVector0 = new CompressedVector();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertEquals(Double.NaN, sparseVector0.density(), 0.01);
      assertEquals(0, sparseVector0.length());
      assertEquals(0, sparseVector0.cardinality());
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertNotNull(sparseVector0);
      
      org.evosuite.runtime.Random.setNextRandom((-130));
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Vector) null).when(vectorFactory0).apply(anyInt());
      Vector vector0 = compressedVector0.to(vectorFactory0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertSame(compressedVector0, sparseVector0);
      assertNull(vector0);
      
      org.evosuite.runtime.Random.setNextRandom((-440));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.random(0, (double) 0, (Random) null);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      compressedVector0.forEach(consumer0);
      assertEquals(Double.NaN, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0, compressedVector0.length());
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 4638.74134908;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(6, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.16666666666666666, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {4638.74134908, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String string0 = compressedVector1.toMatrixMarket();
      assertEquals(6, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.16666666666666666, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(string0);
      assertEquals("%%MatrixMarket vector coordinate real\n6 1\n1 4638.741\n", string0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {4638.74134908, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      compressedVector1.swapElements(0, (-1457));
      assertEquals(6, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.16666666666666666, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {4638.74134908, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector1.eachNonZero(vectorProcedure0);
      assertEquals(6, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.16666666666666666, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {4638.74134908, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(4638.74134908).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector1.updateAt(0, vectorFunction0);
      assertEquals(6, compressedVector1.length());
      assertEquals(2, compressedVector1.cardinality());
      assertEquals(0.3333333333333333, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector1, compressedVector0);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {4638.74134908, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        CompressedVector.random((-1457), 1179.860872229, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The density value should be between 0 and 1.0
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1078.786065274525;
      doubleArray0[2] = (-33.72431841805073);
      doubleArray0[0] = 1078.786065274525;
      doubleArray0[4] = 1529.2;
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.6, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {1078.786065274525, 0.0, (-33.72431841805073), 0.0, 1529.2}, doubleArray0, 0.01);
      
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      int int0 = (-2284);
      double double0 = compressedVector0.get(0);
      assertEquals(0.6, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertEquals(1078.786065274525, double0, 0.01);
      assertArrayEquals(new double[] {1078.786065274525, 0.0, (-33.72431841805073), 0.0, 1529.2}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Collection<Double> collection0 = hashMap0.values();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(collection0);
      
      Integer integer0 = new Integer(8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      long long0 = Integer.toUnsignedLong(0);
      assertEquals(0L, long0);
      
      Double double0 = hashMap0.put(integer2, (Double) 0.0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(double0);
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 8);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, sparseVector0.cardinality());
      assertEquals(0.125, sparseVector0.density(), 0.01);
      assertEquals(8, sparseVector0.length());
      assertNotNull(sparseVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      ((CompressedVector) sparseVector0).updateAt(0, vectorFunction0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, sparseVector0.cardinality());
      assertEquals(0.0, sparseVector0.density(), 0.01);
      assertEquals(8, sparseVector0.length());
      
      CompressedVector compressedVector0 = CompressedVector.zero(9980, 8);
      assertEquals(9980, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotSame(compressedVector0, sparseVector0);
      assertNotNull(compressedVector0);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1106.2477288772195;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {1106.2477288772195, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertArrayEquals(new double[] {1106.2477288772195, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String string0 = compressedVector0.toMatrixMarket();
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertNotNull(string0);
      assertEquals("%%MatrixMarket vector coordinate real\n5 1\n1 1106.248\n", string0);
      assertArrayEquals(new double[] {1106.2477288772195, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertNotNull(byteArray0);
      assertArrayEquals(new double[] {1106.2477288772195, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copy();
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(0.2, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(5, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {1106.2477288772195, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector1.hadamardProduct(compressedVector1);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(0.2, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(5, compressedVector1.length());
      assertEquals(1, compressedVector2.cardinality());
      assertEquals(5, compressedVector2.length());
      assertEquals(0.2, compressedVector2.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotNull(compressedVector2);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {1106.2477288772195, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      compressedVector0.swapElements(51, 51);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertArrayEquals(new double[] {1106.2477288772195, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = compressedVector1.norm();
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(0.2, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(5, compressedVector1.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertEquals(1106.2477288772195, double0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertArrayEquals(new double[] {1106.2477288772195, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      VectorProcedure vectorProcedure1 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      VectorIterator vectorIterator0 = compressedVector2.nonZeroIterator();
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(0.2, compressedVector1.density(), 0.01);
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(5, compressedVector1.length());
      assertEquals(1, compressedVector2.cardinality());
      assertEquals(5, compressedVector2.length());
      assertEquals(0.2, compressedVector2.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector1, compressedVector2);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotNull(vectorIterator0);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector2));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {1106.2477288772195, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1529.2;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1529.2}, doubleArray0, 0.01);
      
      compressedVector0.swapElements(2, 2);
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1529.2}, doubleArray0, 0.01);
      
      VectorFactory<Vector> vectorFactory0 = (VectorFactory<Vector>) mock(VectorFactory.class, new ViolatedAssumptionAnswer());
      doReturn(compressedVector0).when(vectorFactory0).apply(anyInt());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.to(vectorFactory0);
      assertEquals(0.2, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertEquals(5, compressedVector1.length());
      assertEquals(1, compressedVector1.cardinality());
      assertEquals(0.2, compressedVector1.density(), 0.01);
      assertSame(compressedVector0, compressedVector1);
      assertSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1529.2}, doubleArray0, 0.01);
      
      compressedVector0.setAll((-1.0));
      assertEquals(5, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertSame(compressedVector0, compressedVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1529.2}, doubleArray0, 0.01);
      
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.copyOfLength(2);
      assertEquals(5, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(2, compressedVector2.length());
      assertEquals(2, compressedVector2.cardinality());
      assertEquals(1.0, compressedVector2.density(), 0.01);
      assertSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 1529.2}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector0.swapElements(2, (-637));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1078.786065274525;
      doubleArray0[2] = (-33.72431841805073);
      doubleArray0[3] = 1078.786065274525;
      doubleArray0[4] = (-33.72431841805073);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.8, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {1078.786065274525, 0.0, (-33.72431841805073), 1078.786065274525, (-33.72431841805073)}, doubleArray0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copy();
      assertEquals(0.8, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertEquals(0.8, compressedVector1.density(), 0.01);
      assertEquals(5, compressedVector1.length());
      assertEquals(4, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {1078.786065274525, 0.0, (-33.72431841805073), 1078.786065274525, (-33.72431841805073)}, doubleArray0, 0.01);
      
      compressedVector0.each(vectorProcedure0);
      assertEquals(0.8, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertArrayEquals(new double[] {1078.786065274525, 0.0, (-33.72431841805073), 1078.786065274525, (-33.72431841805073)}, doubleArray0, 0.01);
      
      CompressedVector compressedVector2 = CompressedVector.zero(0);
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      
      int int0 = 32;
      compressedVector0.swapElements(32, 32);
      assertEquals(0.8, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertArrayEquals(new double[] {1078.786065274525, 0.0, (-33.72431841805073), 1078.786065274525, (-33.72431841805073)}, doubleArray0, 0.01);
      
      Spliterator<Double> spliterator0 = compressedVector2.spliterator();
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotNull(spliterator0);
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      
      CompressedVector compressedVector3 = (CompressedVector)compressedVector0.shuffle();
      assertEquals(0.8, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertEquals(5, compressedVector3.length());
      assertEquals(4, compressedVector3.cardinality());
      assertEquals(0.8, compressedVector3.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotNull(compressedVector3);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector3.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertTrue(compressedVector3.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {1078.786065274525, 0.0, (-33.72431841805073), 1078.786065274525, (-33.72431841805073)}, doubleArray0, 0.01);
      
      BasicVector basicVector0 = (BasicVector)compressedVector2.add(1.0);
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.length());
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0, basicVector0.length());
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector3);
      assertNotNull(basicVector0);
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector3));
      
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      int int1 = (-2284);
      compressedVector0.swapElements((-2284), 0);
      assertEquals(0.8, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertArrayEquals(new double[] {1078.786065274525, 0.0, (-33.72431841805073), 1078.786065274525, (-33.72431841805073)}, doubleArray0, 0.01);
      
      double double0 = compressedVector0.get(0);
      assertEquals(0.8, compressedVector0.density(), 0.01);
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(5, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertEquals(0.0, double0, 0.01);
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertArrayEquals(new double[] {1078.786065274525, 0.0, (-33.72431841805073), 1078.786065274525, (-33.72431841805073)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Byte byte0 = new Byte((byte) (-89));
      assertNotNull(byte0);
      assertEquals((byte) (-89), (byte)byte0);
      
      boolean boolean0 = linkedList0.add(byte0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      CompressedVector compressedVector0 = CompressedVector.fromCollection(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(1, compressedVector0.cardinality());
      assertEquals(1, compressedVector0.length());
      assertNotNull(byteArray0);
      
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byteArray0[1] = (byte)25;
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector0 = CompressedVector.random((int) (byte)25, (double) (byte)0, (Random) mockRandom0);
      assertEquals(25, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll((byte)0);
      assertEquals(25, compressedVector0.length());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CompressedVector compressedVector0 = CompressedVector.zero(4807, 47);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4807, compressedVector0.length());
      assertNotNull(compressedVector0);
      
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copyOfLength(47);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(4807, compressedVector0.length());
      assertEquals(47, compressedVector1.length());
      assertEquals(0.0, compressedVector1.density(), 0.01);
      assertEquals(0, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)3;
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can not decode CompressedVector from the given byte array.
         //
         verifyException("org.la4j.vector.sparse.CompressedVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 64;
      CompressedVector compressedVector0 = CompressedVector.zero(64, 64);
      assertEquals(64, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      
      compressedVector0.setAll(64);
      assertEquals(64, compressedVector0.length());
      assertEquals(64, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      int int1 = 8;
      compressedVector0.swapElements(4, 8);
      assertEquals(64, compressedVector0.length());
      assertEquals(64, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertEquals(64, compressedVector0.length());
      assertEquals(64, compressedVector0.cardinality());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertEquals(64, sparseVector0.cardinality());
      assertEquals(64, sparseVector0.length());
      assertEquals(1.0, sparseVector0.density(), 0.01);
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertNotNull(sparseVector0);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        CompressedVector.zero(4, (-345));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cardinality should be positive: -345.
         //
         verifyException("org.la4j.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Collection<Double> collection0 = hashMap0.values();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(collection0);
      
      Integer integer0 = new Integer(8);
      assertNotNull(integer0);
      assertEquals(8, (int)integer0);
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(0);
      assertNotNull(integer2);
      assertEquals(0, (int)integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      long long0 = Integer.toUnsignedLong(0);
      assertEquals(0L, long0);
      
      Double double0 = hashMap0.put(integer2, (Double) 0.0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(double0);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      SparseVector sparseVector0 = SparseVector.fromMap(hashMap0, 8);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(8, sparseVector0.length());
      assertEquals(0.125, sparseVector0.density(), 0.01);
      assertEquals(1, sparseVector0.cardinality());
      assertNotNull(sparseVector0);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(8.634200135066286E7).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      ((CompressedVector) sparseVector0).updateAt(0, vectorFunction0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(8, sparseVector0.length());
      assertEquals(0.125, sparseVector0.density(), 0.01);
      assertEquals(1, sparseVector0.cardinality());
      
      CompressedVector compressedVector0 = CompressedVector.zero(9980, 8);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(0, compressedVector0.cardinality());
      assertEquals(9980, compressedVector0.length());
      assertNotSame(compressedVector0, sparseVector0);
      assertNotNull(compressedVector0);
      assertFalse(compressedVector0.equals((Object)sparseVector0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = 2423.8731;
      doubleArray0[2] = (-690.46761);
      doubleArray0[3] = 4638.74134908;
      doubleArray0[4] = 1179.860872229;
      doubleArray0[5] = (-1640.3343);
      doubleArray0[6] = 4618.185825276747;
      doubleArray0[7] = 598.688;
      doubleArray0[8] = 1028.73;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(9, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {2.0, 2423.8731, (-690.46761), 4638.74134908, 1179.860872229, (-1640.3343), 4618.185825276747, 598.688, 1028.73}, doubleArray0, 0.01);
      
      boolean boolean0 = compressedVector0.nonZeroAt(2);
      assertEquals(9, compressedVector0.cardinality());
      assertEquals(9, compressedVector0.length());
      assertEquals(1.0, compressedVector0.density(), 0.01);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {2.0, 2423.8731, (-690.46761), 4638.74134908, 1179.860872229, (-1640.3343), 4618.185825276747, 598.688, 1028.73}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (-33.72431841805073);
      doubleArray0[4] = (-33.72431841805073);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, (-33.72431841805073), 0.0, (-33.72431841805073)}, doubleArray0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector1 = (CompressedVector)compressedVector0.copy();
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(0.4, compressedVector1.density(), 0.01);
      assertEquals(5, compressedVector1.length());
      assertEquals(2, compressedVector1.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {0.0, 0.0, (-33.72431841805073), 0.0, (-33.72431841805073)}, doubleArray0, 0.01);
      
      compressedVector0.each(vectorProcedure0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertArrayEquals(new double[] {0.0, 0.0, (-33.72431841805073), 0.0, (-33.72431841805073)}, doubleArray0, 0.01);
      
      CompressedVector compressedVector2 = CompressedVector.zero(0);
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0, compressedVector2.length());
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      
      compressedVector0.swapElements(32, 32);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertArrayEquals(new double[] {0.0, 0.0, (-33.72431841805073), 0.0, (-33.72431841805073)}, doubleArray0, 0.01);
      
      Spliterator<Double> spliterator0 = compressedVector0.spliterator();
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotNull(spliterator0);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertArrayEquals(new double[] {0.0, 0.0, (-33.72431841805073), 0.0, (-33.72431841805073)}, doubleArray0, 0.01);
      
      CompressedVector compressedVector3 = (CompressedVector)compressedVector0.copyOfLength(32);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(2, compressedVector3.cardinality());
      assertEquals(0.0625, compressedVector3.density(), 0.01);
      assertEquals(32, compressedVector3.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotNull(compressedVector3);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertArrayEquals(new double[] {0.0, 0.0, (-33.72431841805073), 0.0, (-33.72431841805073)}, doubleArray0, 0.01);
      
      CompressedVector compressedVector4 = (CompressedVector)compressedVector3.shuffle();
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(2, compressedVector3.cardinality());
      assertEquals(0.0625, compressedVector3.density(), 0.01);
      assertEquals(32, compressedVector3.length());
      assertEquals(32, compressedVector4.length());
      assertEquals(2, compressedVector4.cardinality());
      assertEquals(0.0625, compressedVector4.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector4);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector3);
      assertNotSame(compressedVector3, compressedVector0);
      assertNotSame(compressedVector3, compressedVector4);
      assertNotSame(compressedVector3, compressedVector2);
      assertNotSame(compressedVector3, compressedVector1);
      assertNotSame(compressedVector4, compressedVector1);
      assertNotSame(compressedVector4, compressedVector3);
      assertNotSame(compressedVector4, compressedVector2);
      assertNotSame(compressedVector4, compressedVector0);
      assertNotNull(compressedVector4);
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector3.equals((Object)compressedVector0));
      assertFalse(compressedVector3.equals((Object)compressedVector2));
      assertFalse(compressedVector3.equals((Object)compressedVector1));
      assertFalse(compressedVector4.equals((Object)compressedVector1));
      assertTrue(compressedVector4.equals((Object)compressedVector3));
      assertFalse(compressedVector4.equals((Object)compressedVector2));
      assertFalse(compressedVector4.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {0.0, 0.0, (-33.72431841805073), 0.0, (-33.72431841805073)}, doubleArray0, 0.01);
      
      VectorIterator vectorIterator0 = compressedVector2.nonZeroIterator();
      assertEquals(Double.NaN, compressedVector2.density(), 0.01);
      assertEquals(0, compressedVector2.cardinality());
      assertEquals(0, compressedVector2.length());
      assertNotSame(compressedVector2, compressedVector0);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector4);
      assertNotSame(compressedVector2, compressedVector3);
      assertNotNull(vectorIterator0);
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector4));
      assertFalse(compressedVector2.equals((Object)compressedVector3));
      
      compressedVector0.swapElements((-2284), (-2284));
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector4);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector3);
      assertFalse(compressedVector0.equals((Object)compressedVector4));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertArrayEquals(new double[] {0.0, 0.0, (-33.72431841805073), 0.0, (-33.72431841805073)}, doubleArray0, 0.01);
      
      double double0 = new Double(0);
      assertEquals(0.0, double0, 0.01);
      
      compressedVector0.set(0, 0.0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector4);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector3);
      assertFalse(compressedVector0.equals((Object)compressedVector4));
      assertFalse(compressedVector0.equals((Object)compressedVector2));
      assertFalse(compressedVector0.equals((Object)compressedVector3));
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertArrayEquals(new double[] {0.0, 0.0, (-33.72431841805073), 0.0, (-33.72431841805073)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        CompressedVector.fromBinary((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(0.0, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(0, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom((-756L));
      assertNotNull(mockRandom0);
      
      CompressedVector compressedVector1 = CompressedVector.random(13, 1.0, (Random) mockRandom0);
      assertEquals(13, compressedVector1.cardinality());
      assertEquals(1.0, compressedVector1.density(), 0.01);
      assertEquals(13, compressedVector1.length());
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)compressedVector0));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1078.786065274525;
      doubleArray0[1] = 1078.786065274525;
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {1078.786065274525, 1078.786065274525, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      compressedVector0.each(vectorProcedure0);
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertArrayEquals(new double[] {1078.786065274525, 1078.786065274525, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      CompressedVector compressedVector1 = CompressedVector.fromArray(doubleArray0);
      assertEquals(2, compressedVector1.cardinality());
      assertEquals(0.4, compressedVector1.density(), 0.01);
      assertEquals(5, compressedVector1.length());
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertTrue(compressedVector1.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {1078.786065274525, 1078.786065274525, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String string0 = compressedVector0.toMatrixMarket();
      assertEquals(2, compressedVector0.cardinality());
      assertEquals(0.4, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertNotSame(compressedVector0, compressedVector1);
      assertNotNull(string0);
      assertEquals("%%MatrixMarket vector coordinate real\n5 2\n1 1078.786\n2 1078.786\n", string0);
      assertTrue(compressedVector0.equals((Object)compressedVector1));
      assertArrayEquals(new double[] {1078.786065274525, 1078.786065274525, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      VectorFunction vectorFunction0 = mock(VectorFunction.class, new ViolatedAssumptionAnswer());
      doReturn(1045.8011864692571, (-2868.06059741822), (double)0, 1078.786065274525, (-7.000603653491151)).when(vectorFunction0).evaluate(anyInt() , anyDouble());
      compressedVector0.update(vectorFunction0);
      assertEquals(0.8, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(4, compressedVector0.cardinality());
      assertNotSame(compressedVector0, compressedVector1);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertArrayEquals(new double[] {1078.786065274525, 1078.786065274525, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      CompressedVector compressedVector2 = (CompressedVector)compressedVector0.divide((-1127.2));
      assertEquals(0.8, compressedVector0.density(), 0.01);
      assertEquals(5, compressedVector0.length());
      assertEquals(4, compressedVector0.cardinality());
      assertEquals(0.4, compressedVector2.density(), 0.01);
      assertEquals(5, compressedVector2.length());
      assertEquals(2, compressedVector2.cardinality());
      assertNotSame(compressedVector0, compressedVector2);
      assertNotSame(compressedVector0, compressedVector1);
      assertNotSame(compressedVector2, compressedVector1);
      assertNotSame(compressedVector2, compressedVector0);
      assertNotNull(compressedVector2);
      assertFalse(compressedVector0.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector1));
      assertFalse(compressedVector2.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {1078.786065274525, 1078.786065274525, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        compressedVector1.getOrElse((-1), (-1127.2));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index '-1' is invalid.
         //
         verifyException("org.la4j.vector.SparseVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (-33.72431841805073);
      doubleArray0[0] = 1078.786065274525;
      doubleArray0[4] = (-33.72431841805073);
      CompressedVector compressedVector0 = CompressedVector.fromArray(doubleArray0);
      assertEquals(5, compressedVector0.length());
      assertEquals(0.6, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertNotNull(compressedVector0);
      assertArrayEquals(new double[] {1078.786065274525, 0.0, (-33.72431841805073), 0.0, (-33.72431841805073)}, doubleArray0, 0.01);
      
      VectorProcedure vectorProcedure0 = mock(VectorProcedure.class, new ViolatedAssumptionAnswer());
      String string0 = compressedVector0.toMatrixMarket();
      assertEquals(5, compressedVector0.length());
      assertEquals(0.6, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertNotNull(string0);
      assertEquals("%%MatrixMarket vector coordinate real\n5 3\n1 1078.786\n3 -33.724\n5 -33.724\n", string0);
      assertArrayEquals(new double[] {1078.786065274525, 0.0, (-33.72431841805073), 0.0, (-33.72431841805073)}, doubleArray0, 0.01);
      
      byte[] byteArray0 = compressedVector0.toBinary();
      assertEquals(5, compressedVector0.length());
      assertEquals(0.6, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertNotNull(byteArray0);
      assertArrayEquals(new double[] {1078.786065274525, 0.0, (-33.72431841805073), 0.0, (-33.72431841805073)}, doubleArray0, 0.01);
      
      SparseVector sparseVector0 = compressedVector0.toSparseVector();
      assertEquals(5, compressedVector0.length());
      assertEquals(0.6, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(0.6, sparseVector0.density(), 0.01);
      assertEquals(3, sparseVector0.cardinality());
      assertEquals(5, sparseVector0.length());
      assertSame(compressedVector0, sparseVector0);
      assertSame(sparseVector0, compressedVector0);
      assertNotNull(sparseVector0);
      assertArrayEquals(new double[] {1078.786065274525, 0.0, (-33.72431841805073), 0.0, (-33.72431841805073)}, doubleArray0, 0.01);
      
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      compressedVector0.swapElements(0, (-3111));
      assertEquals(5, compressedVector0.length());
      assertEquals(0.6, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertSame(compressedVector0, sparseVector0);
      assertArrayEquals(new double[] {1078.786065274525, 0.0, (-33.72431841805073), 0.0, (-33.72431841805073)}, doubleArray0, 0.01);
      
      Float float0 = new Float(1078.786065274525);
      assertNotNull(float0);
      assertEquals(1078.786F, (float)float0, 0.01F);
      
      CompressedVector compressedVector1 = CompressedVector.fromBinary(byteArray0);
      assertEquals(5, compressedVector0.length());
      assertEquals(0.6, compressedVector0.density(), 0.01);
      assertEquals(3, compressedVector0.cardinality());
      assertEquals(3, compressedVector1.cardinality());
      assertEquals(5, compressedVector1.length());
      assertEquals(0.6, compressedVector1.density(), 0.01);
      assertNotSame(compressedVector0, compressedVector1);
      assertSame(compressedVector0, sparseVector0);
      assertNotSame(compressedVector1, sparseVector0);
      assertNotSame(compressedVector1, compressedVector0);
      assertNotNull(compressedVector1);
      assertFalse(compressedVector1.equals((Object)sparseVector0));
      assertFalse(compressedVector1.equals((Object)compressedVector0));
      assertArrayEquals(new double[] {1078.786065274525, 0.0, (-33.72431841805073), 0.0, (-33.72431841805073)}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        CompressedVector.zero((-3111));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Wrong vector length: -3111
         //
         verifyException("org.la4j.Vector", e);
      }
  }
}
