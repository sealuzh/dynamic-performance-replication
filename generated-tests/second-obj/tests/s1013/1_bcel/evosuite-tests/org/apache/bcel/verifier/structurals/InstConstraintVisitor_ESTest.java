/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 01:24:40 GMT 2018
 */

package org.apache.bcel.verifier.structurals;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.regex.Pattern;
import org.apache.bcel.Constants;
import org.apache.bcel.classfile.Constant;
import org.apache.bcel.classfile.ConstantDouble;
import org.apache.bcel.classfile.ConstantInvokeDynamic;
import org.apache.bcel.classfile.ConstantLong;
import org.apache.bcel.classfile.ConstantMethodType;
import org.apache.bcel.classfile.ConstantNameAndType;
import org.apache.bcel.classfile.ConstantPool;
import org.apache.bcel.classfile.ConstantString;
import org.apache.bcel.classfile.ConstantUtf8;
import org.apache.bcel.generic.AALOAD;
import org.apache.bcel.generic.ACONST_NULL;
import org.apache.bcel.generic.ALOAD;
import org.apache.bcel.generic.ANEWARRAY;
import org.apache.bcel.generic.ARETURN;
import org.apache.bcel.generic.ARRAYLENGTH;
import org.apache.bcel.generic.ASTORE;
import org.apache.bcel.generic.ATHROW;
import org.apache.bcel.generic.BIPUSH;
import org.apache.bcel.generic.BREAKPOINT;
import org.apache.bcel.generic.BasicType;
import org.apache.bcel.generic.CALOAD;
import org.apache.bcel.generic.CASTORE;
import org.apache.bcel.generic.CHECKCAST;
import org.apache.bcel.generic.ConstantPoolGen;
import org.apache.bcel.generic.D2F;
import org.apache.bcel.generic.D2I;
import org.apache.bcel.generic.D2L;
import org.apache.bcel.generic.DADD;
import org.apache.bcel.generic.DALOAD;
import org.apache.bcel.generic.DASTORE;
import org.apache.bcel.generic.DCMPG;
import org.apache.bcel.generic.DCMPL;
import org.apache.bcel.generic.DCONST;
import org.apache.bcel.generic.DDIV;
import org.apache.bcel.generic.DLOAD;
import org.apache.bcel.generic.DMUL;
import org.apache.bcel.generic.DNEG;
import org.apache.bcel.generic.DREM;
import org.apache.bcel.generic.DRETURN;
import org.apache.bcel.generic.DSTORE;
import org.apache.bcel.generic.DSUB;
import org.apache.bcel.generic.DUP;
import org.apache.bcel.generic.DUP2;
import org.apache.bcel.generic.DUP2_X1;
import org.apache.bcel.generic.DUP2_X2;
import org.apache.bcel.generic.DUP_X1;
import org.apache.bcel.generic.DUP_X2;
import org.apache.bcel.generic.F2D;
import org.apache.bcel.generic.F2I;
import org.apache.bcel.generic.F2L;
import org.apache.bcel.generic.FADD;
import org.apache.bcel.generic.FASTORE;
import org.apache.bcel.generic.FCMPG;
import org.apache.bcel.generic.FCMPL;
import org.apache.bcel.generic.FCONST;
import org.apache.bcel.generic.FDIV;
import org.apache.bcel.generic.FLOAD;
import org.apache.bcel.generic.FMUL;
import org.apache.bcel.generic.FNEG;
import org.apache.bcel.generic.FREM;
import org.apache.bcel.generic.FRETURN;
import org.apache.bcel.generic.FSTORE;
import org.apache.bcel.generic.FSUB;
import org.apache.bcel.generic.GETFIELD;
import org.apache.bcel.generic.GETSTATIC;
import org.apache.bcel.generic.GOTO;
import org.apache.bcel.generic.GOTO_W;
import org.apache.bcel.generic.I2B;
import org.apache.bcel.generic.I2C;
import org.apache.bcel.generic.I2D;
import org.apache.bcel.generic.I2F;
import org.apache.bcel.generic.I2L;
import org.apache.bcel.generic.I2S;
import org.apache.bcel.generic.IADD;
import org.apache.bcel.generic.IALOAD;
import org.apache.bcel.generic.IAND;
import org.apache.bcel.generic.IASTORE;
import org.apache.bcel.generic.ICONST;
import org.apache.bcel.generic.IDIV;
import org.apache.bcel.generic.IFEQ;
import org.apache.bcel.generic.IFGT;
import org.apache.bcel.generic.IFLT;
import org.apache.bcel.generic.IFNE;
import org.apache.bcel.generic.IFNONNULL;
import org.apache.bcel.generic.IFNULL;
import org.apache.bcel.generic.IF_ACMPEQ;
import org.apache.bcel.generic.IF_ACMPNE;
import org.apache.bcel.generic.IF_ICMPEQ;
import org.apache.bcel.generic.IF_ICMPGE;
import org.apache.bcel.generic.IF_ICMPGT;
import org.apache.bcel.generic.IF_ICMPLE;
import org.apache.bcel.generic.IF_ICMPLT;
import org.apache.bcel.generic.IF_ICMPNE;
import org.apache.bcel.generic.IINC;
import org.apache.bcel.generic.ILOAD;
import org.apache.bcel.generic.IMPDEP1;
import org.apache.bcel.generic.IMPDEP2;
import org.apache.bcel.generic.IMUL;
import org.apache.bcel.generic.INEG;
import org.apache.bcel.generic.INSTANCEOF;
import org.apache.bcel.generic.INVOKEDYNAMIC;
import org.apache.bcel.generic.INVOKEINTERFACE;
import org.apache.bcel.generic.INVOKESPECIAL;
import org.apache.bcel.generic.INVOKESTATIC;
import org.apache.bcel.generic.INVOKEVIRTUAL;
import org.apache.bcel.generic.IOR;
import org.apache.bcel.generic.IREM;
import org.apache.bcel.generic.IRETURN;
import org.apache.bcel.generic.ISHL;
import org.apache.bcel.generic.ISHR;
import org.apache.bcel.generic.ISTORE;
import org.apache.bcel.generic.ISUB;
import org.apache.bcel.generic.IUSHR;
import org.apache.bcel.generic.IXOR;
import org.apache.bcel.generic.Instruction;
import org.apache.bcel.generic.InstructionConstants;
import org.apache.bcel.generic.InstructionHandle;
import org.apache.bcel.generic.InstructionList;
import org.apache.bcel.generic.JSR;
import org.apache.bcel.generic.JSR_W;
import org.apache.bcel.generic.L2D;
import org.apache.bcel.generic.L2F;
import org.apache.bcel.generic.L2I;
import org.apache.bcel.generic.LADD;
import org.apache.bcel.generic.LALOAD;
import org.apache.bcel.generic.LAND;
import org.apache.bcel.generic.LASTORE;
import org.apache.bcel.generic.LCMP;
import org.apache.bcel.generic.LCONST;
import org.apache.bcel.generic.LDC2_W;
import org.apache.bcel.generic.LDC_W;
import org.apache.bcel.generic.LDIV;
import org.apache.bcel.generic.LLOAD;
import org.apache.bcel.generic.LMUL;
import org.apache.bcel.generic.LNEG;
import org.apache.bcel.generic.LOOKUPSWITCH;
import org.apache.bcel.generic.LOR;
import org.apache.bcel.generic.LREM;
import org.apache.bcel.generic.LRETURN;
import org.apache.bcel.generic.LSHL;
import org.apache.bcel.generic.LSHR;
import org.apache.bcel.generic.LSTORE;
import org.apache.bcel.generic.LSUB;
import org.apache.bcel.generic.LUSHR;
import org.apache.bcel.generic.LXOR;
import org.apache.bcel.generic.MONITORENTER;
import org.apache.bcel.generic.MONITOREXIT;
import org.apache.bcel.generic.MULTIANEWARRAY;
import org.apache.bcel.generic.MethodGen;
import org.apache.bcel.generic.NEWARRAY;
import org.apache.bcel.generic.NOP;
import org.apache.bcel.generic.ObjectType;
import org.apache.bcel.generic.POP;
import org.apache.bcel.generic.POP2;
import org.apache.bcel.generic.PUSH;
import org.apache.bcel.generic.PUTFIELD;
import org.apache.bcel.generic.RET;
import org.apache.bcel.generic.RETURN;
import org.apache.bcel.generic.SALOAD;
import org.apache.bcel.generic.SASTORE;
import org.apache.bcel.generic.SIPUSH;
import org.apache.bcel.generic.SWAP;
import org.apache.bcel.generic.TABLESWITCH;
import org.apache.bcel.generic.Type;
import org.apache.bcel.util.ByteSequence;
import org.apache.bcel.verifier.structurals.Frame;
import org.apache.bcel.verifier.structurals.InstConstraintVisitor;
import org.apache.bcel.verifier.structurals.LocalVariables;
import org.apache.bcel.verifier.structurals.OperandStack;
import org.apache.bcel.verifier.structurals.UninitializedObjectType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InstConstraintVisitor_ESTest extends InstConstraintVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL(2338);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackConsumer(iNVOKESPECIAL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitBREAKPOINT(bREAKPOINT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as BREAKPOINT.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IMPDEP1 iMPDEP1_0 = new IMPDEP1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP1(iMPDEP1_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP1.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ISTORE iSTORE0 = new ISTORE((byte)74);
      instConstraintVisitor0.visitISTORE(iSTORE0);
      F2L f2L0 = new F2L();
      assertEquals((short)140, f2L0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      CALOAD cALOAD0 = new CALOAD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCALOAD((CALOAD) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      SIPUSH sIPUSH0 = new SIPUSH((short)135);
      instConstraintVisitor0.visitSIPUSH(sIPUSH0);
      assertEquals((short)17, sIPUSH0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitTABLESWITCH((TABLESWITCH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEVIRTUAL iNVOKEVIRTUAL0 = new INVOKEVIRTUAL(3225);
      instConstraintVisitor0.visitInvokeInstruction(iNVOKEVIRTUAL0);
      assertEquals(3225, iNVOKEVIRTUAL0.getIndex());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      BIPUSH bIPUSH0 = new BIPUSH((byte)91);
      instConstraintVisitor0.visitBIPUSH(bIPUSH0);
      assertEquals((short)16, bIPUSH0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DSTORE dSTORE0 = new DSTORE(2711);
      instConstraintVisitor0.visitDSTORE(dSTORE0);
      assertEquals(2711, dSTORE0.getIndex());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitFCONST((FCONST) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMPDEP2(iMPDEP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: In this JustIce verification pass there should not occur an illegal instruction such as IMPDEP2.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      InstructionList instructionList0 = new InstructionList();
      ISTORE iSTORE0 = new ISTORE(1);
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      INEG iNEG0 = (INEG)InstructionConstants.INEG;
      ARRAYLENGTH aRRAYLENGTH1 = new ARRAYLENGTH();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) aRRAYLENGTH0);
      JSR jSR0 = new JSR(instructionHandle0);
      instConstraintVisitor0.visitJSR(jSR0);
      assertEquals(0, jSR0.getIndex());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitICONST((ICONST) null);
      LUSHR lUSHR0 = new LUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLUSHR(lUSHR0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ALOAD aLOAD0 = new ALOAD(0);
      instConstraintVisitor0.visitALOAD(aLOAD0);
      assertEquals("aload_0", aLOAD0.getName());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      instConstraintVisitor0.visitACONST_NULL(aCONST_NULL0);
      assertEquals(1, aCONST_NULL0.getLength());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      JSR_W jSR_W0 = new JSR_W((InstructionHandle) null);
      instConstraintVisitor0.visitJSR_W(jSR_W0);
      DUP_X1 dUP_X1_0 = new DUP_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP_X1(dUP_X1_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEDYNAMIC iNVOKEDYNAMIC0 = new INVOKEDYNAMIC(2);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEDYNAMIC(iNVOKEDYNAMIC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INVOKEDYNAMIC instruction is not supported at this time
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      DCONST dCONST0 = new DCONST(0.0);
      instConstraintVisitor0.visitDCONST(dCONST0);
      assertEquals((short)14, dCONST0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(662, 662);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINVOKEINTERFACE(iNVOKEINTERFACE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(5, 1285);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      DUP2 dUP2_0 = (DUP2)InstructionConstants.DUP2;
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStackInstruction(dUP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DUP2 constraint violated: Cannot consume 2 stack slots: only 0 slot(s) left on stack!
         // Stack:
         // Slots used: 0 MaxStack: 1285.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FLOAD fLOAD0 = new FLOAD(1058);
      instConstraintVisitor0.visitFLOAD(fLOAD0);
      assertEquals(1058, fLOAD0.getIndex());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitLCONST((LCONST) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL(5);
      IFEQ iFEQ0 = new IFEQ((InstructionHandle) null);
      Frame frame0 = new Frame(5, 5);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      GOTO_W gOTO_W0 = new GOTO_W((InstructionHandle) null);
      instConstraintVisitor0.visitGOTO_W(gOTO_W0);
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE((InstructionHandle) null);
      ASTORE aSTORE0 = new ASTORE(5);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitASTORE(aSTORE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame0 = new Frame(1285, 1037);
      instConstraintVisitor0.setFrame(frame0);
      GETSTATIC gETSTATIC0 = new GETSTATIC(1285);
      instConstraintVisitor0.visitGETSTATIC(gETSTATIC0);
      assertEquals((short)178, gETSTATIC0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(452);
      OperandStack operandStack0 = new OperandStack(452);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IINC iINC0 = new IINC(2, 452);
      // Undeclared exception!
      try { 
        iINC0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not of type int but of type <unknown object>.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      SASTORE sASTORE0 = (SASTORE)InstructionConstants.SASTORE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Frame frame0 = new Frame(55, 1503);
      frame0.equals((Object) null);
      frame0.equals(sASTORE0);
      instConstraintVisitor0.setFrame(frame0);
      LSTORE lSTORE0 = new LSTORE(1503);
      lSTORE0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(lSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSTORE constraint violated: Cannot STORE: Stack to read from is empty.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DALOAD dALOAD0 = new DALOAD();
      dALOAD0.getExceptions();
      FSUB fSUB0 = new FSUB();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.visitGOTO((GOTO) null);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      LDIV lDIV0 = new LDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor1.visitLDIV(lDIV0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(1);
      operandStack0.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables(207);
      LocalVariables localVariables1 = new LocalVariables(1);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Frame frame1 = new Frame(207, 207);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FADD fADD0 = new FADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFADD(fADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FADD constraint violated: The value at the stack top is not of type 'float', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(257);
      localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(32, uninitializedObjectType0.STRING);
      Type.getMethodSignature(uninitializedObjectType0, objectType0.NO_ARGS);
      operandStack0.push(uninitializedObjectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = new OperandStack(3, uninitializedObjectType0.STRINGBUFFER);
      Frame frame2 = new Frame(localVariables0, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IINC iINC0 = new IINC(1024, 257);
      int int0 = 253;
      // Undeclared exception!
      try { 
        iINC0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      LocalVariables localVariables0 = new LocalVariables(1551);
      localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(1551, uninitializedObjectType0.STRING);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      Character.getName(3665);
      ISUB iSUB0 = new ISUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISUB(iSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISUB constraint violated: The value at the stack top is not of type 'int', but of type 'java.lang.String'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      uninitializedObjectType0.isCastableTo(objectType0);
      LocalVariables localVariables0 = new LocalVariables(511);
      OperandStack operandStack0 = new OperandStack(511, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      frame1.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      NEWARRAY nEWARRAY0 = new NEWARRAY(objectType0.SHORT);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitNEWARRAY(nEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction NEWARRAY constraint violated: The value at the stack top is not of type 'int', but of type 'java.lang.Object'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("vvd'5");
      LocalVariables localVariables0 = new LocalVariables(235);
      OperandStack operandStack0 = new OperandStack(235, objectType0);
      localVariables0.clone();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      LocalVariables localVariables1 = new LocalVariables(235);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame.setThis((UninitializedObjectType) null);
      LocalVariables localVariables2 = localVariables0.getClone();
      localVariables0.merge(localVariables2);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      F2D f2D0 = new F2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2D(f2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2D constraint violated: The value at the stack top is not of type 'float', but of type 'vvd'5'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      byte[] byteArray0 = new byte[9];
      ARETURN aRETURN0 = new ARETURN();
      LocalVariables localVariables0 = new LocalVariables((byte)0);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(42, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      operandStack0.clear();
      instConstraintVisitor0.setFrame(frame1);
      DRETURN dRETURN0 = new DRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDRETURN(dRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DRETURN constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(87);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance(";vRt1pYQQz-)R$s");
      LocalVariables localVariables2 = localVariables1.getClone();
      OperandStack operandStack0 = new OperandStack(87, objectType0);
      Frame frame0 = new Frame(localVariables2, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      FADD fADD0 = new FADD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      fADD0.consumeStack(constantPoolGen0);
      ILOAD iLOAD0 = new ILOAD(2);
      localVariables0.clone();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLoadInstruction(iLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ILOAD constraint violated: Read-Access on local variable 2 with unknown content.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(452);
      ObjectType objectType0 = new ObjectType("iconst_2");
      OperandStack operandStack0 = new OperandStack(452, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      frame0.toString();
      Frame.getThis();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      LRETURN lRETURN0 = new LRETURN();
      LRETURN lRETURN1 = new LRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLRETURN(lRETURN1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LRETURN constraint violated: The value at the stack top is not of type 'long', but of type 'iconst_2'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType.getInstance("r|ALF\"rvy");
      int int0 = 3;
      Frame frame0 = new Frame(3, 0);
      FNEG fNEG0 = new FNEG();
      LXOR lXOR0 = new LXOR();
      IMUL iMUL0 = new IMUL();
      frame0.equals(iMUL0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      DADD dADD0 = new DADD();
      dADD0.toString();
      ConstantUtf8 constantUtf8_0 = new ConstantUtf8("{D<+Kv857s#&");
      ConstantInvokeDynamic constantInvokeDynamic0 = new ConstantInvokeDynamic(3, 0);
      ConstantInvokeDynamic constantInvokeDynamic1 = new ConstantInvokeDynamic(146, 2011);
      FLOAD fLOAD0 = new FLOAD(146);
      FLOAD fLOAD1 = new FLOAD(0);
      // Undeclared exception!
      try { 
        fLOAD0.accept(instConstraintVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FLOAD constraint violated: Cannot produce 1 stack slots: only 0 free stack slot(s) left.
         // Stack:
         // Slots used: 0 MaxStack: 0.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      LocalVariables localVariables0 = new LocalVariables(235);
      OperandStack operandStack0 = new OperandStack(235);
      operandStack0.initializeObject((UninitializedObjectType) null);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIADD((IADD) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(239);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(239, uninitializedObjectType0.OBJECT);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables2 = new LocalVariables(239);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      OperandStack operandStack1 = new OperandStack(239);
      DCMPG dCMPG0 = new DCMPG();
      dCMPG0.getType(constantPoolGen0);
      ISHR iSHR0 = new ISHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHR(iSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHR constraint violated: The value at the stack top is not of type 'int', but of type 'H_ePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      Frame.getThis();
      LocalVariables localVariables0 = new LocalVariables(239);
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)43;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      OperandStack operandStack0 = new OperandStack(239);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      F2I f2I0 = new F2I();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      constantPoolGen0.addFieldref("H_ePLLk=m", "' upper stack types should be 'int' but aren't.", "H_ePLLk=m");
      f2I0.produceStack(constantPoolGen0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2I(f2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2I constraint violated: The value at the stack top is not of type 'float', but of type 'H_ePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)112);
      OperandStack operandStack0 = new OperandStack(1317);
      operandStack0.push(uninitializedObjectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      I2D i2D0 = new I2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2D(i2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2D constraint violated: The value at the stack top is not of type 'int', but of type '<UNINITIALIZED OBJECT OF TYPE ''>'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(239);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables1.clone();
      OperandStack operandStack0 = new OperandStack(239, uninitializedObjectType0.OBJECT);
      LocalVariables localVariables2 = new LocalVariables(239);
      Frame frame0 = new Frame(localVariables2, operandStack0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LAND lAND0 = new LAND();
      FCMPL fCMPL0 = new FCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPL(fCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPL constraint violated: The value at the stack top is not of type 'float', but of type 'java.lang.Object'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(202);
      OperandStack operandStack0 = new OperandStack(202, uninitializedObjectType0.STRINGBUFFER);
      operandStack0.push(objectType0);
      uninitializedObjectType0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      frame0.equals(fileSystemHandling0);
      Boolean boolean0 = new Boolean(true);
      Frame frame1 = new Frame(202, 202);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      Class<DSTORE> class0 = DSTORE.class;
      Type.getType(class0);
      FASTORE fASTORE0 = new FASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFASTORE(fASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FASTORE constraint violated: The value at the stack top is not of type 'float', but of type 'H_ePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      L2I l2I0 = new L2I();
      L2I l2I1 = new L2I();
      ObjectType objectType0 = ObjectType.getInstance("Expecting a class type (ObjectType) to work on. Found: '");
      OperandStack operandStack0 = new OperandStack(22, objectType0);
      LocalVariables localVariables0 = new LocalVariables(22);
      Frame frame0 = new Frame(22, 22);
      GETSTATIC gETSTATIC0 = new GETSTATIC(22);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LAND lAND0 = new LAND();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      localVariables0.clone();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      IRETURN iRETURN0 = new IRETURN();
      frame0.equals(frame1);
      localVariables0.getClone();
      frame0.toString();
      instConstraintVisitor0.setFrame(frame1);
      LXOR lXOR0 = new LXOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLXOR(lXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LXOR constraint violated: The value at the stack top is not of type 'long', but of type 'Expecting a class type (ObjectType) to work on. Found: ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      uninitializedObjectType0.isCastableTo(objectType0);
      LocalVariables localVariables0 = new LocalVariables(511);
      OperandStack operandStack0 = new OperandStack(511, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHR((LSHR) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      DDIV dDIV0 = new DDIV();
      FRETURN fRETURN0 = new FRETURN();
      L2I l2I0 = new L2I();
      L2I l2I1 = new L2I();
      ObjectType objectType0 = new ObjectType("synchronized");
      OperandStack operandStack0 = new OperandStack(3, objectType0);
      LocalVariables localVariables0 = new LocalVariables(804);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(804, 3);
      instConstraintVisitor0.setFrame(frame0);
      IINC iINC0 = new IINC(3, 3);
      FMUL fMUL0 = new FMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFMUL(fMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FMUL constraint violated: The value at the stack top is not of type 'float', but of type 'synchronized'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(239);
      OperandStack operandStack0 = new OperandStack(239);
      operandStack0.clear();
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IINC iINC0 = new IINC(135, 135);
      L2F l2F0 = new L2F();
      POP pOP0 = (POP)InstructionConstants.POP;
      FREM fREM0 = new FREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFREM(fREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FREM constraint violated: The value at the stack top is not of type 'float', but of type 'H_ePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("H_ePLLk=m");
      LocalVariables localVariables0 = new LocalVariables(207);
      OperandStack operandStack0 = new OperandStack(207);
      operandStack0.clear();
      operandStack0.push(objectType0);
      LocalVariables localVariables1 = new LocalVariables(207);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[19];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionList instructionList1 = new InstructionList();
      instructionList1.toString();
      DUP_X1 dUP_X1_0 = new DUP_X1();
      IUSHR iUSHR0 = new IUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIUSHR(iUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IUSHR constraint violated: The value at the stack top is not of type 'int', but of type 'H_ePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      LocalVariables localVariables0 = new LocalVariables(1551);
      localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(1551, uninitializedObjectType0.STRING);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      instConstraintVisitor0.setFrame(frame1);
      Pattern.quote("H_ePLLk=m");
      ISUB iSUB0 = new ISUB();
      LNEG lNEG0 = new LNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLNEG(lNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LNEG constraint violated: The value at the stack top is not of type 'long', but of type 'java.lang.String'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("5!BL`TwD>Yp O");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(226);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(226, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      LocalVariables localVariables2 = new LocalVariables(226);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      F2D f2D0 = new F2D();
      FCMPL fCMPL0 = new FCMPL();
      IASTORE iASTORE0 = new IASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIASTORE(iASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IASTORE constraint violated: The value at the stack top is not of type 'int', but of type '5!BL`TwD>Yp O'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(182);
      OperandStack operandStack0 = new OperandStack(182, objectType0);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.equals(localVariables0);
      localVariables0.getClone();
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      POP pOP0 = (POP)InstructionConstants.POP;
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      operandStack0.equals(bREAKPOINT0);
      Boolean boolean0 = new Boolean(false);
      String string0 = Constants.ILLEGAL_OPCODE;
      FADD fADD0 = new FADD();
      frame1.getClone();
      frame1.getClone();
      L2D l2D0 = new L2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2D(l2D0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2D constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(239);
      localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(239, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      Frame.setThis(uninitializedObjectType0);
      frame1.equals(frame0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      localVariables0.getClone();
      ConstantString constantString0 = new ConstantString(2937);
      ConstantString constantString1 = new ConstantString(constantString0);
      D2F d2F0 = new D2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2F(d2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2F constraint violated: The value at the stack top is not of type 'double', but of type 'java.lang.Object'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      byte[] byteArray0 = new byte[11];
      ARETURN aRETURN0 = new ARETURN();
      LocalVariables localVariables0 = new LocalVariables((byte)0);
      ObjectType objectType0 = new ObjectType("");
      localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack(2180, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack0.merge(operandStack1);
      frame0.getClone();
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      frame0.equals(aCONST_NULL0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LDIV lDIV0 = new LDIV();
      ByteSequence byteSequence1 = new ByteSequence(byteArray0);
      instConstraintVisitor0.setFrame(frame0);
      I2C i2C0 = new I2C();
      LADD lADD0 = new LADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLADD(lADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LADD constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectType objectType0 = new ObjectType("H_ePLLk=m");
      LocalVariables localVariables0 = new LocalVariables(239);
      OperandStack operandStack0 = new OperandStack(239);
      operandStack0.clone();
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Class<DCMPL>[] classArray0 = (Class<DCMPL>[]) Array.newInstance(Class.class, 4);
      Class<DCMPL> class0 = DCMPL.class;
      classArray0[0] = class0;
      Class<DCMPL> class1 = DCMPL.class;
      classArray0[1] = class1;
      Class<DCMPL> class2 = DCMPL.class;
      classArray0[2] = class2;
      Class<DCMPL> class3 = DCMPL.class;
      classArray0[3] = class3;
      Type.getTypes(classArray0);
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      Frame frame2 = new Frame(localVariables0, operandStack0);
      frame1.equals(objectType0);
      LLOAD lLOAD0 = new LLOAD(239);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLocalVariableInstruction(lLOAD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LLOAD constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(73);
      LocalVariables localVariables1 = localVariables0.getClone();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ObjectType objectType0 = new ObjectType(";vRt1\"YQQz-)R$s");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(2937, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      frame0.equals(";vRt1\"YQQz-)R$s");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LLOAD lLOAD0 = new LLOAD(2937);
      instConstraintVisitor0.visitLLOAD(lLOAD0);
      DADD dADD0 = new DADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDADD(dADD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DADD constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ARETURN aRETURN0 = new ARETURN();
      LocalVariables localVariables0 = new LocalVariables((byte)0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";vRt1\"YQQz-)R$s");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(42, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      operandStack0.clear();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      instConstraintVisitor0.setFrame(frame1);
      DRETURN dRETURN0 = new DRETURN();
      IMUL iMUL0 = new IMUL();
      IMUL iMUL1 = new IMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIMUL(iMUL1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IMUL constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(239);
      OperandStack operandStack0 = new OperandStack(239);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IINC iINC0 = new IINC(135, 135);
      L2F l2F0 = new L2F();
      FSTORE fSTORE0 = new FSTORE(135);
      instConstraintVisitor0.visitFSTORE(fSTORE0);
      DMUL dMUL0 = new DMUL();
      uninitializedObjectType0.toString();
      IFLT iFLT0 = new IFLT((InstructionHandle) null);
      LUSHR lUSHR0 = new LUSHR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLUSHR(lUSHR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LUSHR constraint violated: The value at the stack top is not of type 'int', but of type 'H_ePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(239);
      OperandStack operandStack0 = new OperandStack(239, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      frame1.getClone();
      ObjectType objectType1 = new ObjectType("Stack next-to-top must be of type int[] but is '");
      OperandStack operandStack1 = new OperandStack(239, objectType1);
      Frame frame2 = new Frame(localVariables0, operandStack0);
      String string0 = Constants.CONSTRUCTOR_NAME;
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      LSUB lSUB0 = new LSUB();
      LSUB lSUB1 = new LSUB();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSUB(lSUB0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSUB constraint violated: The value at the stack top is not of type 'long', but of type 'java.lang.Object'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      LocalVariables localVariables0 = new LocalVariables(237);
      OperandStack operandStack0 = new OperandStack(237);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      D2L d2L0 = new D2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2L(d2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2L constraint violated: The value at the stack top is not of type 'double', but of type 'H_ePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)112);
      OperandStack operandStack0 = new OperandStack(1317);
      operandStack0.push(uninitializedObjectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      I2D i2D0 = new I2D();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDDIV((DDIV) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(1567);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("M8_");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M8_");
      OperandStack operandStack0 = new OperandStack(87, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      localVariables1.merge(localVariables0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(53, (byte)1);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMULTIANEWARRAY(mULTIANEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction MULTIANEWARRAY constraint violated: The '1' upper stack types should be 'int' but aren't.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(181);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("1");
      OperandStack operandStack0 = new OperandStack(5505, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      instConstraintVisitor0.setFrame(frame0);
      byte[] byteArray0 = new byte[9];
      ARETURN aRETURN0 = new ARETURN();
      LocalVariables localVariables2 = new LocalVariables((byte)0);
      localVariables2.getClone();
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      instConstraintVisitor0.setMethodGen((MethodGen) null);
      L2I l2I0 = new L2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2I(l2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2I constraint violated: The value at the stack top is not of type 'long', but of type '1'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(207);
      OperandStack operandStack0 = new OperandStack(207);
      operandStack0.clear();
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Boolean boolean0 = new Boolean((String) null);
      frame0.clone();
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      Pattern.quote("H_ePLLk=m");
      ObjectType.getInstance("()LH_ePLLk=m;");
      F2D f2D0 = new F2D();
      DDIV dDIV0 = new DDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDSUB((DSUB) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(239);
      localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(239, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Frame.setThis(uninitializedObjectType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      localVariables0.getClone();
      ConstantString constantString0 = new ConstantString(2937);
      ConstantString constantString1 = new ConstantString(constantString0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLE((IF_ICMPLE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(239);
      localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(239, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      LocalVariables localVariables1 = new LocalVariables(239);
      ConstantString constantString0 = new ConstantString(239);
      I2C i2C0 = new I2C();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2C(i2C0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2C constraint violated: The value at the stack top is not of type 'int', but of type 'java.lang.Object'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(245);
      localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack(245, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(245, uninitializedObjectType0.STRING);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(245);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LAND lAND0 = new LAND();
      FREM fREM0 = new FREM();
      FDIV fDIV0 = new FDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFDIV(fDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FDIV constraint violated: The value at the stack top is not of type 'float', but of type 'H_ePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(207);
      OperandStack operandStack0 = new OperandStack(207, uninitializedObjectType0.THROWABLE);
      operandStack0.clear();
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      frame0.getClone();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H_ePLLk=m");
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      lDIV0.copy();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLDIV(lDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LDIV constraint violated: The value at the stack top is not of type 'long', but of type 'H_ePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(485);
      ObjectType objectType0 = new ObjectType("iconst_2");
      OperandStack operandStack0 = new OperandStack(485, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      localVariables0.toString();
      Frame frame1 = frame0.getClone();
      frame1.toString();
      instConstraintVisitor0.setFrame(frame1);
      SASTORE sASTORE0 = new SASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitSASTORE(sASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction SASTORE constraint violated: The value at the stack top is not of type 'int', but of type 'iconst_2'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(239);
      OperandStack operandStack0 = new OperandStack(239);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IINC iINC0 = new IINC(135, 135);
      L2F l2F0 = new L2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitL2F(l2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction L2F constraint violated: The value at the stack top is not of type 'long', but of type 'H_ePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(245);
      localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(245, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(245, uninitializedObjectType0.STRING);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(245);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LAND lAND0 = new LAND();
      FREM fREM0 = new FREM();
      PUTFIELD pUTFIELD0 = new PUTFIELD(2);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPUTFIELD(pUTFIELD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      DDIV dDIV0 = new DDIV();
      FRETURN fRETURN0 = new FRETURN();
      L2I l2I0 = new L2I();
      L2I l2I1 = new L2I();
      ObjectType objectType0 = new ObjectType("synchronized");
      OperandStack operandStack0 = new OperandStack(3, objectType0);
      LocalVariables localVariables0 = new LocalVariables(3);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.clone();
      Frame frame1 = new Frame(3, 3);
      instConstraintVisitor0.setFrame(frame0);
      FMUL fMUL0 = new FMUL();
      DSTORE dSTORE0 = new DSTORE(3);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitStoreInstruction(dSTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DSTORE constraint violated: Stack top type and STOREing Instruction type mismatch: Stack top: 'synchronized'; Instruction type: 'double'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(207);
      OperandStack operandStack0 = new OperandStack(207, objectType0);
      operandStack0.clear();
      operandStack0.push(uninitializedObjectType0.STRING);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      Frame frame2 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uninitializedObjectType0.getSignature();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H_ePLLk=m");
      Boolean boolean0 = new Boolean("H_ePLLk=m");
      operandStack0.toString();
      ASTORE aSTORE0 = new ASTORE(240);
      ARRAYLENGTH aRRAYLENGTH0 = new ARRAYLENGTH();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitARRAYLENGTH(aRRAYLENGTH0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ARRAYLENGTH constraint violated: The 'arrayref' does not refer to an array but is of type java.lang.String.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(87);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.getClone();
      ObjectType objectType0 = ObjectType.getInstance("wide");
      LocalVariables localVariables2 = localVariables1.getClone();
      OperandStack operandStack0 = new OperandStack(87, objectType0);
      Frame frame0 = new Frame(localVariables2, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      Pattern.quote("wide");
      FADD fADD0 = new FADD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      fADD0.consumeStack(constantPoolGen0);
      ILOAD iLOAD0 = new ILOAD(2);
      localVariables0.clone();
      D2F d2F0 = new D2F();
      DNEG dNEG0 = new DNEG();
      DNEG dNEG1 = new DNEG();
      IREM iREM0 = new IREM();
      DLOAD dLOAD0 = new DLOAD(4150);
      instConstraintVisitor0.visitDLOAD(dLOAD0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIREM(iREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IREM constraint violated: The value at the stack top is not of type 'int', but of type 'wide'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("");
      LocalVariables localVariables0 = new LocalVariables(182);
      OperandStack operandStack0 = new OperandStack(2122, objectType0);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.equals(localVariables0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FSTORE fSTORE0 = new FSTORE(182);
      instConstraintVisitor0.visitFSTORE(fSTORE0);
      DUP dUP0 = new DUP();
      instConstraintVisitor0.visitDUP(dUP0);
      assertEquals((short)89, dUP0.getOpcode());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      L2I l2I0 = new L2I();
      L2I l2I1 = new L2I();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(108, objectType0);
      LocalVariables localVariables0 = new LocalVariables(667);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      localVariables0.getClone();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      OperandStack operandStack1 = new OperandStack(667);
      operandStack0.clone();
      operandStack1.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      operandStack0.toString();
      AALOAD aALOAD0 = new AALOAD();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Slots used: 1 MaxStack: 108.\n (Size: 1)\n");
      DUP dUP0 = new DUP();
      POP2 pOP2_0 = new POP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPOP2(pOP2_0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction POP2 constraint violated: Stack top size should be 2 but stack top is '' of size '1'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("H_WePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(239);
      OperandStack operandStack0 = new OperandStack(239);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IINC iINC0 = new IINC(135, 135);
      L2F l2F0 = new L2F();
      FSTORE fSTORE0 = new FSTORE(135);
      instConstraintVisitor0.visitFSTORE(fSTORE0);
      DMUL dMUL0 = new DMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDMUL(dMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DMUL constraint violated: The value at the stack top is not of type 'double', but of type 'H_WePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("v|v'5");
      LocalVariables localVariables0 = new LocalVariables(1576);
      OperandStack operandStack0 = new OperandStack(1576);
      operandStack0.initializeObject((UninitializedObjectType) null);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FNEG fNEG0 = new FNEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFNEG(fNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FNEG constraint violated: The value at the stack top is not of type 'float', but of type 'v|v'5'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      L2I l2I0 = new L2I();
      L2I l2I1 = new L2I();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(108, objectType0);
      LocalVariables localVariables0 = new LocalVariables(108);
      localVariables0.getClone();
      OperandStack operandStack1 = new OperandStack(108);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      Frame frame1 = new Frame(108, 108);
      instConstraintVisitor0.setFrame(frame1);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      RET rET0 = new RET(5);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitRET(rET0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction RET constraint violated: Expecting a ReturnaddressType in local variable 5.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(239);
      OperandStack operandStack0 = new OperandStack(239);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IINC iINC0 = new IINC(135, 135);
      L2F l2F0 = new L2F();
      FSTORE fSTORE0 = new FSTORE(135);
      instConstraintVisitor0.visitFSTORE(fSTORE0);
      DMUL dMUL0 = new DMUL();
      uninitializedObjectType0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIOR((IOR) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("vvd'5");
      LocalVariables localVariables0 = new LocalVariables(235);
      OperandStack operandStack0 = new OperandStack(235);
      operandStack0.initializeObject((UninitializedObjectType) null);
      operandStack0.push(objectType0);
      RETURN rETURN0 = new RETURN();
      operandStack0.equals(rETURN0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      F2D f2D0 = new F2D();
      LSHL lSHL0 = new LSHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLSHL(lSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LSHL constraint violated: The value at the stack top is not of type 'int', but of type 'vvd'5'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      uninitializedObjectType0.isCastableTo(objectType0);
      LocalVariables localVariables0 = new LocalVariables(511);
      OperandStack operandStack0 = new OperandStack(511, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      frame1.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      IAND iAND0 = new IAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIAND(iAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IAND constraint violated: The value at the stack top is not of type 'int', but of type 'java.lang.Object'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("");
      LocalVariables localVariables0 = new LocalVariables(182);
      OperandStack operandStack0 = new OperandStack(182);
      localVariables0.merge(localVariables0);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.equals(localVariables0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FSTORE fSTORE0 = new FSTORE(182);
      instConstraintVisitor0.visitFSTORE(fSTORE0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFSUB((FSUB) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 235;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectType objectType0 = new ObjectType("H_ePLL-k=m");
      LocalVariables localVariables0 = new LocalVariables(235);
      OperandStack operandStack0 = new OperandStack(235, objectType0);
      localVariables0.getClone();
      operandStack0.initializeObject((UninitializedObjectType) null);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      LSTORE lSTORE0 = new LSTORE(235);
      instConstraintVisitor0.visitLSTORE(lSTORE0);
      FRETURN fRETURN0 = new FRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFRETURN(fRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FRETURN constraint violated: The value at the stack top is not of type 'float', but of type 'H_ePLL-k=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      LocalVariables localVariables0 = new LocalVariables(235);
      OperandStack operandStack0 = new OperandStack(235, objectType0);
      localVariables0.getClone();
      operandStack0.initializeObject((UninitializedObjectType) null);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      ARETURN aRETURN0 = new ARETURN();
      instConstraintVisitor0.visitARETURN(aRETURN0);
      IINC iINC0 = new IINC(235, (-2336));
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIINC(iINC0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IINC constraint violated: The 'index' is not a valid index into the local variable array.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(207);
      OperandStack operandStack0 = new OperandStack(207);
      operandStack0.clear();
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Boolean boolean0 = new Boolean((String) null);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      Pattern.quote("H_ePLLk=m");
      LDIV lDIV0 = new LDIV();
      uninitializedObjectType0.getSignature();
      FSTORE fSTORE0 = new FSTORE(207);
      F2I f2I0 = new F2I();
      IMUL iMUL0 = new IMUL();
      I2F i2F0 = new I2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2F(i2F0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2F constraint violated: The value at the stack top is not of type 'int', but of type 'H_ePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(239);
      OperandStack operandStack0 = new OperandStack(239);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IINC iINC0 = new IINC(135, 135);
      L2F l2F0 = new L2F();
      FSTORE fSTORE0 = new FSTORE(135);
      instConstraintVisitor0.visitFSTORE(fSTORE0);
      DMUL dMUL0 = new DMUL();
      uninitializedObjectType0.toString();
      IFLT iFLT0 = new IFLT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFLT(iFLT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFLT constraint violated: The value at the stack top is not of type 'int', but of type 'H_ePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ObjectType objectType0 = new ObjectType(" slot(s) left on stack!\nStack:\n");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)103);
      localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack(1083, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      Frame frame1 = frame0.getClone();
      frame0.equals(localVariables0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      ConstantString constantString0 = new ConstantString(1083);
      ConstantString constantString1 = new ConstantString(constantString0);
      D2F d2F0 = new D2F();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      d2F0.toString();
      IDIV iDIV0 = new IDIV();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIDIV(iDIV0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IDIV constraint violated: The value at the stack top is not of type 'int', but of type 'java.lang.Object'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = ObjectType.getInstance("1iFe2:*0MGK@p48");
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      LocalVariables localVariables0 = new LocalVariables(239);
      OperandStack operandStack0 = new OperandStack(239, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(239, 239);
      operandStack0.push(objectType0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      Frame frame2 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      frame1.equals(aCONST_NULL0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      LNEG lNEG0 = new LNEG();
      IINC iINC0 = new IINC(926, (-2021));
      InstructionList instructionList0 = new InstructionList(aCONST_NULL0);
      POP pOP0 = new POP();
      instConstraintVisitor0.visitPOP(pOP0);
      LRETURN lRETURN0 = new LRETURN();
      DMUL dMUL0 = new DMUL();
      CHECKCAST cHECKCAST0 = new CHECKCAST(926);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCPInstruction(cHECKCAST0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(239);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      localVariables1.clone();
      OperandStack operandStack0 = new OperandStack(239, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      operandStack0.getClone();
      frame1.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      POP pOP0 = (POP)InstructionConstants.POP;
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      BIPUSH bIPUSH0 = new BIPUSH((byte)50);
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY((byte)50);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitANEWARRAY(aNEWARRAY0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ANEWARRAY constraint violated: The 'count' at the stack top is not of type 'int' but of type 'H_ePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(198);
      OperandStack operandStack0 = new OperandStack(2122, objectType0);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      Frame frame0 = new Frame(localVariables0, operandStack0);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      INEG iNEG0 = new INEG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINEG(iNEG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction INEG constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 239;
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(239);
      localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(239);
      operandStack0.push(uninitializedObjectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      instConstraintVisitor1.setFrame(frame0);
      ConstantLong constantLong0 = new ConstantLong(239);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConstantPool constantPool0 = new ConstantPool((Constant[]) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor1.visitATHROW((ATHROW) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType1 = new ObjectType("");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(207);
      localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(2881, uninitializedObjectType0.CLASS);
      operandStack0.push(objectType1);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setFrame(frame0);
      localVariables0.getClone();
      ISHR iSHR0 = new ISHR();
      LOR lOR0 = new LOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOR(lOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LOR constraint violated: The value at the stack top is not of type 'long', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectType objectType0 = new ObjectType("H_ePLLk=m");
      LocalVariables localVariables0 = new LocalVariables(239);
      OperandStack operandStack0 = new OperandStack(239);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      frame1.clone();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFEQ((IFEQ) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(239);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(239, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      Frame frame2 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      LocalVariables localVariables2 = new LocalVariables(239);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      Character.getName(239);
      ISUB iSUB0 = new ISUB();
      FNEG fNEG0 = new FNEG();
      DREM dREM0 = new DREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDREM(dREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DREM constraint violated: The value at the stack top is not of type 'double', but of type 'H_ePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      LocalVariables localVariables0 = new LocalVariables(239);
      OperandStack operandStack0 = new OperandStack(239, uninitializedObjectType0.OBJECT);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H_ePLLk=m");
      operandStack0.clone();
      LocalVariables localVariables1 = new LocalVariables(239);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.toString();
      Frame frame1 = frame0.getClone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      frame0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      frame1.getClone();
      IXOR iXOR0 = new IXOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIXOR(iXOR0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IXOR constraint violated: The value at the stack top is not of type 'int', but of type 'java.lang.Object'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      int int0 = 2137;
      LocalVariables localVariables0 = new LocalVariables(2137);
      LocalVariables localVariables1 = localVariables0.getClone();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OperandStack operandStack0 = new OperandStack(239, uninitializedObjectType0.THROWABLE);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      DSUB dSUB0 = new DSUB();
      IOR iOR0 = new IOR();
      frame0.equals(iOR0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LDIV lDIV0 = new LDIV();
      MULTIANEWARRAY mULTIANEWARRAY0 = new MULTIANEWARRAY(523, (short)155);
      LASTORE lASTORE0 = new LASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLASTORE(lASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LASTORE constraint violated: The value at the stack top is not of type 'long', but of type 'java.lang.Throwable'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(239);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(239, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      Frame frame1 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables2 = new LocalVariables(239);
      FSTORE fSTORE0 = new FSTORE(512);
      I2D i2D0 = new I2D();
      ILOAD iLOAD0 = new ILOAD(30);
      instConstraintVisitor0.visitILOAD(iLOAD0);
      ANEWARRAY aNEWARRAY0 = new ANEWARRAY(512);
      LCMP lCMP0 = new LCMP();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLCMP(lCMP0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LCMP constraint violated: The value at the stack top is not of type 'long', but of type 'java.lang.Object'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      FileSystemHandling.shouldAllThrowIOExceptions();
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      LocalVariables localVariables0 = new LocalVariables(1551);
      localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(1551, uninitializedObjectType0.STRING);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = frame0.getClone();
      RET rET0 = new RET(1551);
      frame1.equals(rET0);
      instConstraintVisitor0.setFrame(frame1);
      Character.getName(3665);
      ISHL iSHL0 = new ISHL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitISHL(iSHL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ISHL constraint violated: The value at the stack top is not of type 'int', but of type 'java.lang.String'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(257);
      localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(32, uninitializedObjectType0.STRING);
      Type.getMethodSignature(uninitializedObjectType0, objectType0.NO_ARGS);
      operandStack0.push(uninitializedObjectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = new OperandStack(3, uninitializedObjectType0.STRINGBUFFER);
      Frame frame2 = new Frame(localVariables0, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      D2I d2I0 = new D2I();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitD2I(d2I0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction D2I constraint violated: The value at the stack top is not of type 'double', but of type '<UNINITIALIZED OBJECT OF TYPE ''>'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(198);
      OperandStack operandStack0 = new OperandStack(2122, objectType0);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      Frame frame0 = new Frame(localVariables0, operandStack0);
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCHECKCAST((CHECKCAST) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 245;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(245);
      LocalVariables localVariables1 = new LocalVariables(245);
      OperandStack operandStack0 = new OperandStack(245, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(245, uninitializedObjectType0.STRING);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(245);
      Frame frame1 = new Frame(localVariables1, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FCMPG fCMPG0 = new FCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitFCMPG(fCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction FCMPG constraint violated: The value at the stack top is not of type 'float', but of type 'H_ePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      LocalVariables localVariables0 = new LocalVariables(485);
      ObjectType objectType0 = new ObjectType("iconst_2");
      OperandStack operandStack0 = new OperandStack(485, objectType0);
      OperandStack operandStack1 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack1);
      operandStack0.pop();
      Pattern.quote("iconst_2");
      Frame frame1 = frame0.getClone();
      frame1.clone();
      instConstraintVisitor0.setFrame(frame1);
      IINC iINC0 = new IINC(485, 485);
      I2B i2B0 = new I2B();
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      instConstraintVisitor0.visitMONITORENTER(mONITORENTER0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2B(i2B0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2B constraint violated: The value at the stack top is not of type 'int', but of type 'iconst_2'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectType objectType0 = new ObjectType("H_ePLLk=m");
      LocalVariables localVariables0 = new LocalVariables(239);
      Class<IRETURN>[] classArray0 = (Class<IRETURN>[]) Array.newInstance(Class.class, 4);
      Class<IRETURN> class0 = IRETURN.class;
      classArray0[0] = class0;
      Class<IRETURN> class1 = IRETURN.class;
      classArray0[1] = class1;
      Class<IRETURN> class2 = IRETURN.class;
      classArray0[2] = class2;
      Class<IRETURN> class3 = IRETURN.class;
      classArray0[3] = class3;
      Type.getTypes(classArray0);
      OperandStack operandStack0 = new OperandStack(239);
      operandStack0.clone();
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      INVOKEINTERFACE iNVOKEINTERFACE0 = new INVOKEINTERFACE(239, 106);
      ATHROW aTHROW0 = new ATHROW();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitATHROW(aTHROW0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // INTERNAL ERROR: Missing class: java.lang.ClassNotFoundException: Exception while looking for class H_ePLLk=m: org.evosuite.runtime.mock.java.lang.MockThrowable: Couldn't find: H_ePLLk=m.class
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(233);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(233, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      Frame frame2 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      LocalVariables localVariables2 = new LocalVariables(233);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      OperandStack operandStack1 = new OperandStack(233);
      OperandStack operandStack2 = (OperandStack)operandStack0.clone();
      DCMPG dCMPG0 = new DCMPG();
      operandStack0.push(objectType0.DOUBLE);
      OperandStack operandStack3 = new OperandStack(79);
      operandStack2.toString();
      operandStack3.getClone();
      ObjectType objectType1 = new ObjectType("Slots used: 2 MaxStack: 233.\nH_ePLLk=m (Size: 1)\njava.lang.Object (Size: 1)\n");
      OperandStack operandStack4 = new OperandStack(1968, objectType1);
      uninitializedObjectType0.getSignature();
      AALOAD aALOAD0 = new AALOAD();
      DUP dUP0 = new DUP();
      POP2 pOP2_0 = new POP2();
      pOP2_0.copy();
      instConstraintVisitor0.visitPOP2(pOP2_0);
      LREM lREM0 = new LREM();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLREM(lREM0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LREM constraint violated: The value at the stack top is not of type 'long', but of type 'double'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("");
      LocalVariables localVariables0 = new LocalVariables(182);
      OperandStack operandStack0 = new OperandStack(2122, objectType0);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(182, objectType0);
      operandStack0.push(objectType0);
      OperandStack operandStack2 = operandStack0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack2);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IASTORE iASTORE0 = new IASTORE();
      GETFIELD gETFIELD0 = new GETFIELD(1942);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitGETFIELD(gETFIELD0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.generic.FieldOrMethod", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      LocalVariables localVariables0 = new LocalVariables(235);
      OperandStack operandStack0 = new OperandStack(235);
      operandStack0.getClone();
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      L2F l2F0 = new L2F();
      LAND lAND0 = new LAND();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLAND(lAND0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LAND constraint violated: The value at the stack top is not of type 'long', but of type 'H_ePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("");
      LocalVariables localVariables0 = new LocalVariables(164);
      OperandStack operandStack0 = new OperandStack(2122, objectType0);
      operandStack0.push(objectType0);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      instConstraintVisitor0.setFrame(frame0);
      F2D f2D0 = new F2D();
      FCMPG fCMPG0 = new FCMPG();
      I2S i2S0 = new I2S();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2S(i2S0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2S constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(194, objectType0);
      LocalVariables localVariables0 = new LocalVariables(194);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      operandStack0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.toString();
      AALOAD aALOAD0 = new AALOAD();
      ASTORE aSTORE0 = new ASTORE(1957);
      instConstraintVisitor0.visitASTORE(aSTORE0);
      IASTORE iASTORE0 = new IASTORE();
      FASTORE fASTORE0 = new FASTORE();
      DASTORE dASTORE0 = new DASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDASTORE(dASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DASTORE constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables((byte)112);
      OperandStack operandStack0 = new OperandStack((byte)112);
      operandStack0.push(uninitializedObjectType0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "tRv}");
      OperandStack operandStack1 = operandStack0.getClone();
      LocalVariables localVariables1 = new LocalVariables((byte)112);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "tRv}");
      localVariables0.merge(localVariables1);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      I2D i2D0 = new I2D();
      DUP dUP0 = new DUP();
      byte[] byteArray0 = new byte[9];
      byteArray0[5] = (byte)112;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      DUP dUP1 = new DUP();
      ARETURN aRETURN0 = new ARETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitARETURN(aRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction ARETURN constraint violated: Working on an uninitialized object '<UNINITIALIZED OBJECT OF TYPE ''>'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(182);
      OperandStack operandStack0 = new OperandStack(182, objectType0);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.equals(localVariables0);
      localVariables0.getClone();
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      POP pOP0 = (POP)InstructionConstants.POP;
      instConstraintVisitor0.visitStackInstruction(pOP0);
      FSTORE fSTORE0 = new FSTORE(182);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPNE((IF_ICMPNE) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LocalVariables localVariables0 = new LocalVariables(62);
      OperandStack operandStack0 = new OperandStack(102);
      LocalVariables localVariables1 = new LocalVariables(2537);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      BasicType basicType0 = Type.LONG;
      operandStack0.push(basicType0);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(62);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LOR lOR0 = new LOR();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOR(lOR0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(239);
      OperandStack operandStack0 = new OperandStack(239, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      uninitializedObjectType0.toString();
      operandStack0.getClone();
      Class<String> class0 = String.class;
      Type.getType(class0);
      OperandStack operandStack1 = new OperandStack(239, uninitializedObjectType0.STRING);
      operandStack0.push(objectType0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hhT78-m");
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FREM fREM0 = new FREM();
      PUTFIELD pUTFIELD0 = new PUTFIELD(239);
      int int0 = Pattern.CASE_INSENSITIVE;
      INSTANCEOF iNSTANCEOF0 = new INSTANCEOF(194);
      iNSTANCEOF0.toString(true);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINSTANCEOF(iNSTANCEOF0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(239);
      LocalVariables localVariables1 = new LocalVariables(239);
      OperandStack operandStack0 = new OperandStack(239, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      uninitializedObjectType0.toString();
      operandStack0.getClone();
      Class<String> class0 = String.class;
      Type.getType(class0);
      OperandStack operandStack1 = new OperandStack(239, uninitializedObjectType0.STRING);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hhT78-m");
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
      FREM fREM0 = new FREM();
      PUTFIELD pUTFIELD0 = new PUTFIELD(239);
      int int0 = Pattern.CASE_INSENSITIVE;
      PUSH pUSH0 = new PUSH((ConstantPoolGen) null, (Number) 2);
      InstructionList instructionList0 = pUSH0.getInstructionList();
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      InstructionHandle instructionHandle0 = instructionList0.append((Instruction) fREM0);
      IF_ICMPGE iF_ICMPGE0 = new IF_ICMPGE(instructionHandle0);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGE(iF_ICMPGE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPGE constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("The stack top should be of a ReferenceType, but is '");
      LocalVariables localVariables0 = new LocalVariables(68);
      OperandStack operandStack0 = new OperandStack(68, objectType0);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack0.merge(operandStack1);
      LocalVariables localVariables1 = localVariables0.getClone();
      Frame frame1 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      IINC iINC0 = new IINC(68, 1551);
      L2F l2F0 = new L2F();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDNEG((DNEG) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LocalVariables localVariables0 = new LocalVariables(182);
      OperandStack operandStack0 = new OperandStack(2122);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.equals(localVariables0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      POP pOP0 = (POP)InstructionConstants.POP;
      instConstraintVisitor0.visitStackInstruction(pOP0);
      FSTORE fSTORE0 = new FSTORE(182);
      instConstraintVisitor0.visitFSTORE(fSTORE0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)11;
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionList instructionList1 = new InstructionList(fSTORE0);
      DCMPL dCMPL0 = new DCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPL(dCMPL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPL constraint violated: The value at the stack top is not of type 'double', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(239);
      LocalVariables localVariables1 = new LocalVariables(239);
      OperandStack operandStack0 = new OperandStack(239, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      uninitializedObjectType0.toString();
      operandStack0.getClone();
      Class<String> class0 = String.class;
      Type.getType(class0);
      Frame frame1 = frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      FADD fADD0 = new FADD();
      localVariables1.clone();
      DCMPG dCMPG0 = new DCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPG(dCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPG constraint violated: The value at the stack top is not of type 'double', but of type 'java.lang.Object'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("H_ePLLk=m");
      Frame.getThis();
      LocalVariables localVariables0 = new LocalVariables(239);
      LocalVariables localVariables1 = new LocalVariables(239);
      OperandStack operandStack0 = new OperandStack(239, objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      localVariables0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      localVariables1.clone();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      instConstraintVisitor0.setFrame(frame0);
      localVariables0.getClone();
      IDIV iDIV0 = new IDIV();
      F2D f2D0 = new F2D();
      DUP2 dUP2_0 = new DUP2();
      dUP2_0.toString();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2(dUP2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(245);
      LocalVariables localVariables1 = new LocalVariables(245);
      OperandStack operandStack0 = new OperandStack(245, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      OperandStack operandStack1 = new OperandStack(245, uninitializedObjectType0.STRING);
      ConstantMethodType constantMethodType0 = new ConstantMethodType(245);
      operandStack0.push(uninitializedObjectType0);
      Frame frame1 = new Frame(localVariables1, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FCMPG fCMPG0 = new FCMPG();
      Type.getMethodSignature(uninitializedObjectType0, objectType0.NO_ARGS);
      SWAP sWAP0 = new SWAP();
      instConstraintVisitor0.visitSWAP(sWAP0);
      ICONST iCONST0 = null;
      try {
        iCONST0 = new ICONST(127);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ICONST can be used only for value between -1 and 5: 127
         //
         verifyException("org.apache.bcel.generic.ICONST", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ARETURN aRETURN0 = new ARETURN();
      LocalVariables localVariables0 = new LocalVariables((byte)0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";vRt1\"YQQz-)R$s");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      ObjectType objectType0 = new ObjectType("LocalVariableTypeTable");
      localVariables1.getClone();
      LocalVariables localVariables2 = new LocalVariables(3579);
      objectType0.toString();
      OperandStack operandStack0 = new OperandStack(89, objectType0);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Type.getMethodSignature(objectType0, objectType0.NO_ARGS);
      frame0.clone();
      frame0.toString();
      Frame frame1 = new Frame(localVariables2, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      frame1.toString();
      ISUB iSUB0 = new ISUB();
      DUP_X1 dUP_X1_0 = new DUP_X1();
      instConstraintVisitor0.visitDUP_X1(dUP_X1_0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      LocalVariables localVariables0 = new LocalVariables(239);
      OperandStack operandStack0 = new OperandStack(239, uninitializedObjectType0.CLASS);
      operandStack0.push(objectType0);
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      Boolean boolean0 = Boolean.FALSE;
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      ObjectType objectType1 = new ObjectType("H_ePLLk=m");
      frame0.getClone();
      IFGT iFGT0 = new IFGT((InstructionHandle) null);
      SALOAD sALOAD0 = new SALOAD();
      I2L i2L0 = new I2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitI2L(i2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction I2L constraint violated: The value at the stack top is not of type 'int', but of type 'H_ePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(63);
      OperandStack operandStack0 = new OperandStack(63);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(63, 63);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      String string0 = Constants.STATIC_INITIALIZER_NAME;
      LocalVariables localVariables1 = new LocalVariables(63);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)67;
      ByteSequence byteSequence0 = new ByteSequence(byteArray0);
      Instruction.readInstruction(byteSequence0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      instConstraintVisitor0.setConstantPoolGen(constantPoolGen0);
      ISHR iSHR0 = new ISHR();
      iSHR0.toString();
      ISHR iSHR1 = new ISHR();
      InstructionList instructionList0 = new InstructionList(iSHR1);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) iSHR0);
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      instConstraintVisitor0.visitIFNONNULL(iFNONNULL0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LocalVariables localVariables0 = new LocalVariables(87);
      LocalVariables localVariables1 = localVariables0.getClone();
      ObjectType objectType0 = new ObjectType("d;Te");
      LocalVariables localVariables2 = localVariables1.getClone();
      OperandStack operandStack0 = new OperandStack(87, objectType0);
      localVariables0.getClone();
      Frame frame0 = new Frame(localVariables2, operandStack0);
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      String string0 = Constants.ILLEGAL_OPCODE;
      FADD fADD0 = new FADD();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      FSTORE fSTORE0 = new FSTORE(844);
      fSTORE0.setIndex(87);
      InstructionList instructionList0 = new InstructionList();
      InstructionList instructionList1 = new InstructionList(fADD0);
      PUSH pUSH0 = new PUSH(constantPoolGen0, "\n     Method Arguments:");
      InstructionList instructionList2 = pUSH0.getInstructionList();
      InstructionList instructionList3 = instructionList2.copy();
      InstructionHandle instructionHandle0 = instructionList2.getStart();
      SWAP sWAP0 = new SWAP();
      InstructionList instructionList4 = new InstructionList();
      instructionList4.append(instructionList3);
      IF_ACMPNE iF_ACMPNE0 = new IF_ACMPNE(instructionHandle0);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ACMPNE(iF_ACMPNE0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 63;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(63);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(63);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.getClone();
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.toString();
      LocalVariables localVariables2 = new LocalVariables(63);
      NOP nOP0 = new NOP();
      instConstraintVisitor0.visitNOP(nOP0);
      IRETURN iRETURN0 = new IRETURN();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIRETURN(iRETURN0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IRETURN constraint violated: The value at the stack top is not of type 'int', but of type 'H_ePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(239);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(239, uninitializedObjectType0.OBJECT);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      frame0.getClone();
      frame0.getClone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      operandStack0.toString();
      LocalVariables localVariables2 = new LocalVariables(239);
      IDIV iDIV0 = new IDIV();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      F2D f2D0 = new F2D();
      IXOR iXOR0 = new IXOR();
      LLOAD lLOAD0 = new LLOAD(239);
      DUP2 dUP2_0 = new DUP2();
      instConstraintVisitor0.visitDUP2(dUP2_0);
      LMUL lMUL0 = new LMUL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLMUL(lMUL0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction LMUL constraint violated: The value at the stack top is not of type 'long', but of type 'H_ePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-108);
      byteArray0[3] = (byte)46;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(69);
      objectType0.toString();
      OperandStack operandStack0 = new OperandStack((byte)46, uninitializedObjectType0.CLASS);
      operandStack0.push(objectType0);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.getClone();
      Frame frame1 = new Frame(localVariables0, operandStack0);
      Frame.getThis();
      Frame.setThis((UninitializedObjectType) null);
      OperandStack operandStack1 = operandStack0.getClone();
      operandStack1.initializeObject((UninitializedObjectType) null);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      instConstraintVisitor0.setFrame(frame1);
      ConstantString constantString0 = new ConstantString((byte)46);
      MockFile mockFile0 = new MockFile("H_ePLLk=m", "H_ePLLk=m");
      DUP_X2 dUP_X2_0 = new DUP_X2();
      DUP_X2 dUP_X2_1 = new DUP_X2();
      instConstraintVisitor0.visitDUP_X2(dUP_X2_1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectType objectType0 = ObjectType.getInstance("1iFe2:*0MGK@p48");
      UninitializedObjectType uninitializedObjectType0 = Frame.getThis();
      LocalVariables localVariables0 = new LocalVariables(245);
      OperandStack operandStack0 = new OperandStack(245, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(245, 245);
      operandStack0.push(objectType0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      Frame frame2 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      ACONST_NULL aCONST_NULL0 = new ACONST_NULL();
      Frame frame3 = new Frame(245, 245);
      frame3.clone();
      frame3.equals(aCONST_NULL0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      LNEG lNEG0 = new LNEG();
      int int0 = 926;
      IINC iINC0 = new IINC(926, (-2021));
      InstructionList instructionList0 = new InstructionList(aCONST_NULL0);
      InstructionHandle instructionHandle0 = instructionList0.insert((Instruction) iINC0);
      instructionHandle0.setInstruction(iINC0);
      instructionHandle0.toString();
      IFNONNULL iFNONNULL0 = new IFNONNULL(instructionHandle0);
      DUP2_X1 dUP2_X1_0 = new DUP2_X1();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X1(dUP2_X1_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(239);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(239, uninitializedObjectType0.OBJECT);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables2 = new LocalVariables(239);
      OperandStack operandStack1 = new OperandStack(239);
      DCMPG dCMPG0 = new DCMPG();
      F2L f2L0 = new F2L();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitF2L(f2L0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction F2L constraint violated: The value at the stack top is not of type 'float', but of type 'H_ePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePwLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(233);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(233, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(233, 233);
      operandStack0.push(objectType0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      Frame frame2 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      LocalVariables localVariables2 = new LocalVariables(233);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      OperandStack operandStack1 = new OperandStack(233);
      DCMPG dCMPG0 = new DCMPG();
      I2D i2D0 = new I2D();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InstructionList instructionList0 = new InstructionList();
      instructionList0.findHandle(131);
      IF_ICMPEQ iF_ICMPEQ0 = new IF_ICMPEQ((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPEQ(iF_ICMPEQ0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPEQ constraint violated: The value at the stack top is not of type 'int', but of type 'H_ePwLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(207);
      OperandStack operandStack0 = new OperandStack(207);
      operandStack0.clear();
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      frame0.getClone();
      byte[] byteArray0 = new byte[1];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      instructionList0.copy();
      IFGT iFGT0 = new IFGT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFGT(iFGT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFGT constraint violated: The value at the stack top is not of type 'int', but of type 'H_ePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType objectType0 = new ObjectType("");
      OperandStack operandStack0 = new OperandStack(198);
      operandStack0.push(objectType0);
      LocalVariables localVariables0 = new LocalVariables(207);
      LocalVariables localVariables1 = new LocalVariables(198);
      operandStack0.push(objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Frame frame1 = new Frame(207, 207);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FADD fADD0 = new FADD();
      IFNE iFNE0 = new IFNE((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIFNE(iFNE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IFNE constraint violated: The value at the stack top is not of type 'int', but of type ''.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("H_ePLLk=m");
      LocalVariables localVariables0 = new LocalVariables(245);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectType.getInstance("H_ePLLk=m");
      OperandStack operandStack0 = new OperandStack(46, objectType0);
      DCMPL dCMPL0 = new DCMPL();
      BasicType basicType0 = Type.INT;
      operandStack0.push(basicType0);
      RETURN rETURN0 = new RETURN();
      Frame frame0 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      operandStack0.equals((Object) null);
      Frame frame1 = new Frame(3807, 2648);
      instConstraintVisitor0.setFrame(frame0);
      ObjectType.getInstance("");
      LALOAD lALOAD0 = new LALOAD();
      INEG iNEG0 = new INEG();
      instConstraintVisitor0.visitINEG(iNEG0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(239);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(239, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      Frame frame2 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      localVariables1.getClone();
      frame0.getClone();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_}_xE>:or");
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitLOOKUPSWITCH((LOOKUPSWITCH) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(257);
      localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(32, uninitializedObjectType0.STRING);
      Type.getMethodSignature(uninitializedObjectType0, objectType0.NO_ARGS);
      operandStack0.push(uninitializedObjectType0);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      OperandStack operandStack1 = new OperandStack(3, uninitializedObjectType0.STRINGBUFFER);
      Frame frame2 = new Frame(localVariables0, operandStack1);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      GETFIELD gETFIELD0 = new GETFIELD(3);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitGETFIELD(gETFIELD0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction GETFIELD constraint violated: Stack top should be an object reference that's not an array reference, but is '<UNINITIALIZED OBJECT OF TYPE ''>'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(239);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      localVariables1.clone();
      OperandStack operandStack0 = new OperandStack(239, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      Frame frame2 = new Frame(localVariables1, operandStack0);
      Frame frame3 = new Frame(239, 239);
      Frame frame4 = frame3.getClone();
      frame0.getClone();
      frame4.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      IAND iAND0 = new IAND();
      IAND iAND1 = new IAND();
      IAND iAND2 = new IAND();
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDUP2_X2(dUP2_X2_0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(239);
      LocalVariables localVariables1 = localVariables0.getClone();
      localVariables0.set(61, objectType0);
      localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack(239, objectType0);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      operandStack0.getClone();
      localVariables1.clone();
      operandStack0.getClone();
      ObjectType.getInstance("");
      operandStack0.equals(objectType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      I2B i2B0 = new I2B();
      IF_ICMPLT iF_ICMPLT0 = new IF_ICMPLT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPLT(iF_ICMPLT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPLT constraint violated: The value at the stack top is not of type 'int', but of type 'H_ePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(233);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(233, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      Frame frame2 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      LocalVariables localVariables2 = new LocalVariables(233);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      OperandStack operandStack1 = new OperandStack(233);
      DCMPG dCMPG0 = new DCMPG();
      operandStack0.push(objectType0.DOUBLE);
      OperandStack operandStack2 = new OperandStack(79);
      operandStack2.toString();
      operandStack2.getClone();
      OperandStack operandStack3 = new OperandStack(1968, objectType0);
      uninitializedObjectType0.getSignature();
      AALOAD aALOAD0 = new AALOAD();
      instConstraintVisitor0.setFrame(frame1);
      LDIV lDIV0 = new LDIV();
      Frame.setThis(uninitializedObjectType0);
      DASTORE dASTORE0 = new DASTORE();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDASTORE(dASTORE0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DASTORE constraint violated: The 'index' is not of type int but of type H_ePLLk=m.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int int0 = 207;
      ObjectType objectType0 = new ObjectType("H_ePLLk=m");
      LocalVariables localVariables0 = new LocalVariables(207);
      OperandStack operandStack0 = new OperandStack(207);
      operandStack0.clear();
      LocalVariables localVariables1 = new LocalVariables(207);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.clone();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      operandStack0.push(objectType0);
      instConstraintVisitor0.setFrame(frame0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      InstructionList instructionList0 = new InstructionList(byteArray0);
      InstructionList instructionList1 = new InstructionList();
      instructionList0.append(instructionList1);
      instructionList0.copy();
      IFGT iFGT0 = new IFGT((InstructionHandle) null);
      IF_ICMPGT iF_ICMPGT0 = new IF_ICMPGT((InstructionHandle) null);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ICMPGT(iF_ICMPGT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction IF_ICMPGT constraint violated: The value at the stack top is not of type 'int', but of type 'H_ePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(233);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(233, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      Frame frame2 = new Frame(localVariables1, operandStack0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      OperandStack operandStack1 = new OperandStack(233);
      DCMPG dCMPG0 = new DCMPG();
      operandStack0.push(objectType0.DOUBLE);
      OperandStack operandStack2 = new OperandStack(79);
      operandStack2.getClone();
      Frame frame3 = new Frame(79, 79);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      I2L i2L0 = new I2L();
      operandStack2.equals(operandStack1);
      instConstraintVisitor0.setFrame(frame1);
      String string0 = Constants.ILLEGAL_OPCODE;
      FADD fADD0 = new FADD();
      LocalVariables localVariables2 = new LocalVariables(39);
      localVariables0.clone();
      dCMPG0.produceStack(constantPoolGen0);
      DCMPG dCMPG1 = new DCMPG();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPG(dCMPG0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction DCMPG constraint violated: The value at the stack next-to-top is not of type 'double', but of type 'H_ePLLk=m'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(254);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      OperandStack operandStack0 = new OperandStack(254);
      operandStack0.push(objectType0);
      operandStack0.toString();
      Frame frame0 = new Frame(254, 254);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      localVariables0.getClone();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      OperandStack operandStack1 = new OperandStack(254);
      operandStack0.pop();
      operandStack0.push(objectType0.DOUBLE);
      instConstraintVisitor0.setFrame(frame1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      DADD dADD0 = new DADD();
      DADD dADD1 = new DADD();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDADD(dADD0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(233);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(233, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      Frame frame2 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      LocalVariables localVariables2 = new LocalVariables(233);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      OperandStack operandStack1 = new OperandStack(233);
      DCMPG dCMPG0 = new DCMPG();
      operandStack0.push(objectType0.DOUBLE);
      OperandStack operandStack2 = new OperandStack(79);
      operandStack2.toString();
      operandStack2.getClone();
      Frame frame3 = new Frame(79, 79);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      Frame frame4 = frame2.getClone();
      frame4.getClone();
      frame1.toString();
      instConstraintVisitor0.setFrame(frame1);
      IAND iAND0 = new IAND();
      IAND iAND1 = new IAND();
      IAND iAND2 = new IAND();
      DUP2_X2 dUP2_X2_0 = new DUP2_X2();
      instConstraintVisitor0.visitDUP2_X2(dUP2_X2_0);
      instConstraintVisitor0.visitDUP2((DUP2) null);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(233);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(233, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(localVariables0, operandStack0);
      operandStack0.push(objectType0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      Frame frame2 = new Frame(localVariables1, operandStack0);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      OperandStack operandStack1 = new OperandStack(233);
      DCMPG dCMPG0 = new DCMPG();
      operandStack0.push(objectType0.DOUBLE);
      OperandStack operandStack2 = new OperandStack(79);
      operandStack2.getClone();
      Frame frame3 = new Frame(79, 79);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      I2L i2L0 = new I2L();
      operandStack2.equals(operandStack1);
      instConstraintVisitor0.setFrame(frame1);
      String string0 = Constants.ILLEGAL_OPCODE;
      FADD fADD0 = new FADD();
      LocalVariables localVariables2 = new LocalVariables(39);
      MONITOREXIT mONITOREXIT0 = new MONITOREXIT();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMONITOREXIT(mONITOREXIT0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction MONITOREXIT constraint violated: The stack top should be of a ReferenceType, but is 'double'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(254);
      OperandStack operandStack0 = new OperandStack(254);
      operandStack0.push(objectType0);
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      localVariables0.getClone();
      operandStack0.pop();
      operandStack0.push(objectType0.DOUBLE);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DASTORE dASTORE0 = new DASTORE();
      DCMPL dCMPL0 = new DCMPL();
      DCMPL dCMPL1 = new DCMPL();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitDCMPL(dCMPL1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      LocalVariables localVariables0 = new LocalVariables(239);
      localVariables0.getClone();
      OperandStack operandStack0 = new OperandStack(239, objectType0);
      operandStack0.toString();
      OperandStack operandStack1 = new OperandStack(239);
      Frame frame0 = new Frame(localVariables0, operandStack1);
      operandStack1.push(objectType0);
      operandStack0.merge(operandStack1);
      Frame frame1 = new Frame(localVariables0, operandStack0);
      Frame frame2 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame2);
      POP pOP0 = new POP();
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BIPUSH bIPUSH0 = new BIPUSH((byte)50);
      operandStack0.toString();
      operandStack0.equals((Object) null);
      Boolean boolean0 = new Boolean(false);
      RETURN rETURN0 = new RETURN();
      LSTORE lSTORE0 = new LSTORE(239);
      instConstraintVisitor0.visitLSTORE(lSTORE0);
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL(239);
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ACMPEQ((IF_ACMPEQ) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(254);
      OperandStack operandStack0 = new OperandStack(254);
      operandStack0.push(objectType0);
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables1 = new LocalVariables(254);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      operandStack0.pop();
      DCMPG dCMPG0 = new DCMPG();
      operandStack0.push(objectType0.DOUBLE);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InstConstraintVisitor instConstraintVisitor1 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      L2I l2I0 = new L2I();
      L2F l2F0 = new L2F();
      MONITORENTER mONITORENTER0 = new MONITORENTER();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitMONITORENTER((MONITORENTER) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ARETURN aRETURN0 = new ARETURN();
      LocalVariables localVariables0 = new LocalVariables((byte)0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";vRt1\"YQQz-)R$s");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      ObjectType objectType0 = new ObjectType("LocalVariableTypeTable");
      objectType0.toString();
      OperandStack operandStack0 = new OperandStack(109, objectType0);
      OperandStack operandStack1 = new OperandStack(456, objectType0);
      operandStack0.merge(operandStack1);
      Frame frame0 = new Frame(localVariables1, operandStack0);
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Frame.setThis(uninitializedObjectType0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      FREM fREM0 = new FREM();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      OperandStack operandStack2 = new OperandStack(456);
      DCMPG dCMPG0 = new DCMPG();
      LocalVariables localVariables2 = new LocalVariables(72);
      DCMPG dCMPG1 = new DCMPG();
      IFNULL iFNULL0 = new IFNULL((InstructionHandle) null);
      instConstraintVisitor0.visitIFNULL(iFNULL0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ObjectType objectType0 = new ObjectType("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      Type.getMethodSignature(uninitializedObjectType0, objectType0.NO_ARGS);
      LocalVariables localVariables0 = new LocalVariables(254);
      OperandStack operandStack0 = new OperandStack(254);
      operandStack0.push(objectType0);
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      frame0.toString();
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables1 = new LocalVariables(254);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      operandStack0.pop();
      DCMPG dCMPG0 = new DCMPG();
      operandStack0.push(objectType0.DOUBLE);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = Constants.ILLEGAL_TYPE;
      CHECKCAST cHECKCAST0 = new CHECKCAST(254);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitCHECKCAST(cHECKCAST0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction CHECKCAST constraint violated: The 'objectref' is not of a ReferenceType but of type double.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 233;
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(233);
      LocalVariables localVariables1 = (LocalVariables)localVariables0.clone();
      OperandStack operandStack0 = new OperandStack(233, uninitializedObjectType0.OBJECT);
      Frame frame0 = new Frame(233, 233);
      operandStack0.push(objectType0);
      Frame frame1 = new Frame(localVariables1, operandStack0);
      Frame frame2 = new Frame(localVariables1, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame1);
      LocalVariables localVariables2 = new LocalVariables(233);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      OperandStack operandStack1 = new OperandStack(233);
      DCMPG dCMPG0 = new DCMPG();
      operandStack0.push(objectType0.DOUBLE);
      OperandStack operandStack2 = new OperandStack(233);
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitINSTANCEOF((INSTANCEOF) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(254);
      OperandStack operandStack0 = new OperandStack(254);
      operandStack0.push(objectType0);
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      LocalVariables localVariables1 = new LocalVariables(254);
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      operandStack0.pop();
      DCMPG dCMPG0 = new DCMPG();
      operandStack0.push(objectType0.DOUBLE);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      instConstraintVisitor0.setFrame(frame0);
      POP pOP0 = new POP();
      BREAKPOINT bREAKPOINT0 = new BREAKPOINT();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BIPUSH bIPUSH0 = new BIPUSH((byte) (-120));
      operandStack0.toString();
      operandStack0.equals(objectType0);
      Boolean boolean0 = new Boolean(false);
      RETURN rETURN0 = new RETURN();
      LSTORE lSTORE0 = new LSTORE(2262);
      instConstraintVisitor0.visitLSTORE(lSTORE0);
      INVOKESPECIAL iNVOKESPECIAL0 = new INVOKESPECIAL(104);
      IMPDEP2 iMPDEP2_0 = new IMPDEP2();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitIF_ACMPEQ((IF_ACMPEQ) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ObjectType objectType0 = ObjectType.getInstance("H_ePLLk=m");
      UninitializedObjectType uninitializedObjectType0 = new UninitializedObjectType(objectType0);
      LocalVariables localVariables0 = new LocalVariables(254);
      OperandStack operandStack0 = new OperandStack(254);
      operandStack0.push(objectType0);
      operandStack0.toString();
      Frame frame0 = new Frame(localVariables0, operandStack0);
      InstConstraintVisitor instConstraintVisitor0 = new InstConstraintVisitor();
      instConstraintVisitor0.setFrame(frame0);
      localVariables0.getClone();
      ConstantPoolGen constantPoolGen0 = new ConstantPoolGen();
      operandStack0.pop();
      DCMPG dCMPG0 = new DCMPG();
      operandStack0.push(objectType0.DOUBLE);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      localVariables0.toString();
      LNEG lNEG0 = new LNEG();
      int int0 = 500;
      IINC iINC0 = new IINC(500, 500);
      InstructionList instructionList0 = new InstructionList(iINC0);
      POP pOP0 = new POP();
      // Undeclared exception!
      try { 
        instConstraintVisitor0.visitPOP(pOP0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Instruction POP constraint violated: Stack top size should be 1 but stack top is 'double' of size '2'.
         //
         verifyException("org.apache.bcel.verifier.structurals.InstConstraintVisitor", e);
      }
  }
}
