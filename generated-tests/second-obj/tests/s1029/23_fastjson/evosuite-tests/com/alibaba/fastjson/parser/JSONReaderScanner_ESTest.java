/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 14:37:08 GMT 2018
 */

package com.alibaba.fastjson.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.SymbolTable;
import java.io.CharArrayReader;
import java.io.PipedInputStream;
import java.io.StringReader;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONReaderScanner_ESTest extends JSONReaderScanner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1641);
      assertTrue(jSONReaderScanner0.isEOF());
      
      jSONReaderScanner0.nextIdent();
      assertEquals('\u0000', jSONReaderScanner0.getCurrent());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 49);
      jSONReaderScanner0.stringVal();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M=#idEH4");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 33);
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.sub_chars(33, 33);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 49);
      jSONReaderScanner0.scanFieldUUID(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanNullOrNew();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // error parse null or new
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("");
      jSONReaderScanner0.skipWhitespace();
      jSONReaderScanner0.matchStat = jSONReaderScanner0.matchStat;
      jSONReaderScanner0.subString(57, 57);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("false");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("`xF");
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.subString(1401, 1401);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'p';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArrayReader0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("mkL)7v/*");
      jSONReaderScanner0.putChar('\\');
      jSONReaderScanner0.numberString();
      SymbolTable symbolTable0 = new SymbolTable(82);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.addSymbol(34, 65536, 4, symbolTable0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal stat, textLength is zero");
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      jSONReaderScanner0.charArrayCompare(charArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '\u0000', '\u0000');
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.putChar('D');
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.scanFieldLong(charArray0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      char[] charArray0 = new char[0];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 1641);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.arrayCopy(1641, charArray0, 1641, 1641);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'E';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 119);
      jSONReaderScanner0.isBlankInput();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("Tv5hR8KL]>(xR,[ch", ']');
      jSONReaderScanner0.putChar(']');
      jSONReaderScanner0.putChar('}');
      jSONReaderScanner0.numberString();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.subString(']', (-1625));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1625
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '>';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, '>', '>');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONReaderScanner0.nextIdent();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        jSONReaderScanner0.doubleValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("M{EDO$", 'K');
      MockDate mockDate0 = new MockDate('K', 'K', 0);
      jSONReaderScanner0.putChar('K');
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("utf8 decode error, ", (-1217));
      jSONReaderScanner0.putChar('K');
      jSONReaderScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0d8o(IB{hkZW:b!uQ!");
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.next();
      jSONReaderScanner0.indexOf('/', 125);
      jSONReaderScanner0.next();
      jSONReaderScanner0.close();
      System.setCurrentTimeMillis(2933L);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("com.alibaba.fastjson.parser.JSONReaderScanner", (-3744));
      // Undeclared exception!
      try { 
        jSONReaderScanner0.sub_chars(37, (-404));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -404
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("@", 2531);
      jSONReaderScanner0.pos = 2531;
      jSONReaderScanner0.close();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(938);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", (-322));
      jSONReaderScanner0.scanIdent();
      int int0 = Calendar.SHORT_STANDALONE;
      System.setCurrentTimeMillis((-2169L));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("", 10002);
      int int0 = Calendar.SHORT_STANDALONE;
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanString();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // unclosed string : \u001A
         //
         verifyException("com.alibaba.fastjson.parser.JSONLexerBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M=#idEH4");
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(stringReader0, 33);
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.sub_chars(0, 0);
      jSONReaderScanner0.bytesValue();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'D', 'D');
      jSONReaderScanner0.putChar('D');
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.bytesValue();
      char char0 = Locale.UNICODE_LOCALE_EXTENSION;
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.scanType("PsOAYb1I/.<w<f}");
      BigDecimal bigDecimal0 = new BigDecimal((int) 'D');
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("M{EDO$", (-932));
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = ';';
      charArray0[2] = 'K';
      charArray0[3] = ';';
      jSONReaderScanner0.indexOf('K', 34);
      jSONReaderScanner0.next();
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("#6aTx,,E");
      SymbolTable symbolTable0 = new SymbolTable(3);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      jSONReaderScanner0.scanEnum(class0, symbolTable0, '^');
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.copyTo(3, 3, charArray0);
      jSONReaderScanner0.close();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = "3";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("dRS=:b'");
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.sub_chars(1412, 2807);
      jSONReaderScanner0.nextToken();
      jSONReaderScanner0.tokenName();
      jSONReaderScanner0.indexOf('b', 1);
      jSONReaderScanner0.sub_chars(1, 2807);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.copyTo(5, 6238, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(charArray0, 'D', 'D');
      jSONReaderScanner0.bytesValue();
      jSONReaderScanner0.putChar('D');
      jSONReaderScanner0.isBlankInput();
      System.setCurrentTimeMillis(0);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[6];
      String string0 = "dRS=:b'";
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("dRS=:b'");
      boolean boolean0 = jSONReaderScanner0.hasSpecial;
      jSONReaderScanner0.nextIdent();
      char char0 = 'K';
      boolean boolean1 = jSONReaderScanner0.hasSpecial;
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(=7Z1ak9[0");
      Locale locale0 = Locale.JAPAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null);
      locale0.getDisplayScript();
      jSONReaderScanner0.setLocale(locale0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[4];
      charArray0[2] = '\u0000';
      jSONReaderScanner0.scanFieldString(charArray0);
      jSONReaderScanner0.bp = 16366;
      jSONReaderScanner0.isEOF();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charArrayCompare(charArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner(" - ");
      jSONReaderScanner0.matchStat = (int) 's';
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(115, 3678075, 3678075, 115, 40);
      boolean boolean0 = jSONReaderScanner0.hasSpecial;
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.stringVal();
      char char0 = jSONReaderScanner0.ch;
      jSONReaderScanner0.isEOF();
      SymbolTable symbolTable0 = new SymbolTable(3678075);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.numberString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[4];
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("dRS=:b'");
      jSONReaderScanner0.charArrayCompare(charArray0);
      jSONReaderScanner0.sub_chars(0, 2807);
      jSONReaderScanner0.nextToken();
      char char0 = '/';
      jSONReaderScanner0.nextToken(1);
      jSONReaderScanner0.indexOf('/', 1);
      jSONReaderScanner0.putChar('0');
      jSONReaderScanner0.numberString();
      System.setCurrentTimeMillis(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.next();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.bytesValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("illegal state, textLength is zero", 0);
      jSONReaderScanner0.nextIdent();
      char[] charArray0 = new char[8];
      charArray0[1] = 'K';
      jSONReaderScanner0.scanType("waaWiK[");
      charArray0[2] = '7';
      charArray0[3] = '9';
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.isBlankInput();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.stringVal();
      BigDecimal bigDecimal0 = new BigDecimal((int) '9');
      jSONReaderScanner0.subString(0, 15);
      jSONReaderScanner0.putChar('9');
      int int0 = 6;
      SymbolTable symbolTable0 = new SymbolTable(6);
      // Undeclared exception!
      try { 
        jSONReaderScanner0.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)22;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)22;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("L3dq;Y]43J", (byte)22);
      jSONReaderScanner0.scanDate('a');
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[3] = 'a';
      charArray0[4] = 'a';
      jSONReaderScanner0.scanFieldFloatArray(charArray0);
      jSONReaderScanner0.putChar('a');
      jSONReaderScanner0.numberString();
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.stringVal();
      jSONReaderScanner0.bytesValue();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.charAt((-4856));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4856
         //
         verifyException("com.alibaba.fastjson.parser.JSONReaderScanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 22;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("`@\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.scanIdent();
      String string0 = "1miv%j=u";
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.putChar('?');
      System.setCurrentTimeMillis(0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        jSONReaderScanner0.scanIdent();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 22;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("`@\"");
      jSONReaderScanner0.nextIdent();
      jSONReaderScanner0.isEOF();
      jSONReaderScanner0.scanIdent();
      String string0 = "1miv%j=u";
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.putChar('?');
      System.setCurrentTimeMillis(0);
      char[] charArray0 = new char[0];
      jSONReaderScanner0.scanIdent();
      jSONReaderScanner0.stringVal();
      // Undeclared exception!
      try { 
        jSONReaderScanner0.bytesValue();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.alibaba.fastjson.util.IOUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("(=7Z1ak9[0");
      JSONReaderScanner jSONReaderScanner1 = new JSONReaderScanner("EOF error");
      jSONReaderScanner0.nextToken();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jSONReaderScanner1.isEOF();
      int int0 = (-1094);
      JSONReaderScanner jSONReaderScanner2 = new JSONReaderScanner("", 2994);
      jSONReaderScanner1.scanIdent();
      jSONReaderScanner0.scanDouble('h');
      int int1 = Calendar.SHORT_STANDALONE;
      jSONReaderScanner0.scanIdent();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jSONReaderScanner1.numberString();
      jSONReaderScanner1.stringVal();
      jSONReaderScanner0.bytesValue();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      jSONReaderScanner0.charAt(3526);
      // Undeclared exception!
      try { 
        jSONReaderScanner1.decimalValue();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }
}
