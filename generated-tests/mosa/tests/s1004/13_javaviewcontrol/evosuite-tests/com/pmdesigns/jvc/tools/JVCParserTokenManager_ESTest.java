/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 19:49:34 GMT 2018
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.JVCParserTokenManager;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import com.pmdesigns.jvc.tools.Token;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.InputStreamReader;
import java.io.PipedInputStream;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JVCParserTokenManager_ESTest extends JVCParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(inputStreamReader0, (byte)0, (byte)0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0, (int) (byte)0);
      assertEquals(4095, simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 11, 1657);
      JVCParserTokenManager jVCParserTokenManager0 = null;
      try {
        jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      jVCParserTokenManager0.input_stream = null;
      jVCParserTokenManager0.SwitchTo(0);
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo(3626);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 3626. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager((SimpleCharStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(jVCParserTokenManager0.debugStream);
      jVCParserTokenManager0.setDebugStream(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 1324, 'u');
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(16, token0.kind);
      assertEquals(117, token0.endColumn);
      assertEquals(1324, token0.beginLine);
      assertEquals("u", token0.toString());
      assertEquals(1324, token0.endLine);
      assertEquals(117, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[2] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)14);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(inputStreamReader0, (byte)14, (-2559));
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.curLexState = (int) (byte)14;
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals((-2559), token0.endColumn);
      assertEquals(14, token0.beginLine);
      assertEquals("", token0.toString());
      assertEquals((-2559), token0.beginColumn);
      assertEquals(14, token0.endLine);
      assertEquals(0, token0.kind);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[10];
      charArray0[2] = '\u0000';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, (-2559), (-2291));
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.SwitchTo(1);
      jVCParserTokenManager0.getNextToken();
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals((-2559), token0.endLine);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[4] = 'X';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, (-2559), (byte)23);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.SwitchTo((byte)2);
      jVCParserTokenManager0.getNextToken();
      jVCParserTokenManager0.ReInit(simpleCharStream0, 1);
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(25, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)2);
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(inputStreamReader0, (-2559), (byte)0);
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 3);
      jVCParserTokenManager0.getNextToken();
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-2559), simpleCharStream0.getLine());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, (-3149), (-3149));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jVCParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(token0);
      assertEquals((-3149), simpleCharStream0.getColumn());
      assertEquals((-3149), simpleCharStream0.getBeginLine());
      assertEquals((-3149), simpleCharStream0.getEndLine());
      assertEquals((-3149), simpleCharStream0.getBeginColumn());
      assertEquals((-3149), simpleCharStream0.getLine());
      assertEquals((-3149), simpleCharStream0.getEndColumn());
      assertEquals("\u0000", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals((-3149), token0.endLine);
      assertEquals((-3149), token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals((-3149), token0.beginColumn);
      assertEquals((-3149), token0.beginLine);
      
      jVCParserTokenManager0.SwitchTo(0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-3149), simpleCharStream0.getColumn());
      assertEquals((-3149), simpleCharStream0.getBeginLine());
      assertEquals((-3149), simpleCharStream0.getEndLine());
      assertEquals((-3149), simpleCharStream0.getBeginColumn());
      assertEquals((-3149), simpleCharStream0.getLine());
      assertEquals((-3149), simpleCharStream0.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals((-3148), simpleCharStream0.getColumn());
      assertEquals((-3148), simpleCharStream0.getBeginColumn());
      assertEquals((-3149), simpleCharStream0.getBeginLine());
      assertEquals((-3149), simpleCharStream0.getEndLine());
      assertEquals((-3149), simpleCharStream0.getLine());
      assertEquals((-3148), simpleCharStream0.getEndColumn());
      assertEquals("\u0000", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals((-3149), token1.endLine);
      assertEquals((-3149), token1.beginLine);
      assertEquals((-3148), token1.beginColumn);
      assertEquals((-3148), token1.endColumn);
      assertEquals(16, token1.kind);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jVCParserTokenManager1);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals((-3148), simpleCharStream0.getColumn());
      assertEquals((-3148), simpleCharStream0.getBeginColumn());
      assertEquals((-3149), simpleCharStream0.getBeginLine());
      assertEquals((-3149), simpleCharStream0.getEndLine());
      assertEquals((-3149), simpleCharStream0.getLine());
      assertEquals((-3148), simpleCharStream0.getEndColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      
      Token token2 = jVCParserTokenManager0.getNextToken();
      assertNotSame(jVCParserTokenManager0, jVCParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(token2);
      assertFalse(jVCParserTokenManager0.equals((Object)jVCParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals((-3147), simpleCharStream0.getColumn());
      assertEquals((-3147), simpleCharStream0.getBeginColumn());
      assertEquals((-3149), simpleCharStream0.getBeginLine());
      assertEquals((-3149), simpleCharStream0.getEndLine());
      assertEquals((-3147), simpleCharStream0.getEndColumn());
      assertEquals((-3149), simpleCharStream0.getLine());
      assertEquals("\u0000", token2.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals((-3149), token2.endLine);
      assertEquals((-3147), token2.beginColumn);
      assertEquals((-3149), token2.beginLine);
      assertEquals((-3147), token2.endColumn);
      assertEquals(16, token2.kind);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      charArray0[4] = 'o';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'e', 'e', 'e', 'o'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, (byte)2, (byte)23);
      assertArrayEquals(new char[] {'\u0000', 'e', 'e', 'e', 'o'}, charArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new char[] {'\u0000', 'e', 'e', 'e', 'o'}, charArray0);
      assertNotNull(jVCParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'\u0000', 'e', 'e', 'e', 'o'}, charArray0);
      assertNotNull(token0);
      assertEquals(2, simpleCharStream0.getLine());
      assertEquals(23, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getBeginLine());
      assertEquals(23, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getEndLine());
      assertEquals(23, simpleCharStream0.getColumn());
      assertEquals("\u0000", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token0.kind);
      assertEquals(23, token0.endColumn);
      assertEquals(2, token0.beginLine);
      assertEquals(2, token0.endLine);
      assertEquals(23, token0.beginColumn);
      
      jVCParserTokenManager0.ReInit(simpleCharStream0, 0);
      assertArrayEquals(new char[] {'\u0000', 'e', 'e', 'e', 'o'}, charArray0);
      assertEquals(2, simpleCharStream0.getLine());
      assertEquals(23, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getBeginLine());
      assertEquals(23, simpleCharStream0.getEndColumn());
      assertEquals(2, simpleCharStream0.getEndLine());
      assertEquals(23, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'\u0000', 'e', 'e', 'e', 'o'}, charArray0);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, simpleCharStream0.getLine());
      assertEquals(24, simpleCharStream0.getColumn());
      assertEquals(24, simpleCharStream0.getBeginColumn());
      assertEquals(2, simpleCharStream0.getBeginLine());
      assertEquals(2, simpleCharStream0.getEndLine());
      assertEquals(24, simpleCharStream0.getEndColumn());
      assertEquals("e", token1.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token1.kind);
      assertEquals(24, token1.beginColumn);
      assertEquals(24, token1.endColumn);
      assertEquals(2, token1.endLine);
      assertEquals(2, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '[', 'a', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, '[', 'a');
      assertArrayEquals(new char[] {'[', '[', 'a', '\u0000', '\u0000'}, charArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertArrayEquals(new char[] {'[', '[', 'a', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jVCParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'[', '[', 'a', '\u0000', '\u0000'}, charArray0);
      assertNotNull(token0);
      assertEquals(97, simpleCharStream0.getBeginColumn());
      assertEquals(91, simpleCharStream0.getEndLine());
      assertEquals(98, simpleCharStream0.getEndColumn());
      assertEquals(91, simpleCharStream0.getLine());
      assertEquals(91, simpleCharStream0.getBeginLine());
      assertEquals(98, simpleCharStream0.getColumn());
      assertEquals("[[", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(98, token0.endColumn);
      assertEquals(97, token0.beginColumn);
      assertEquals(91, token0.beginLine);
      assertEquals(91, token0.endLine);
      assertEquals(1, token0.kind);
      
      Token token1 = jVCParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'[', '[', 'a', '\u0000', '\u0000'}, charArray0);
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(99, simpleCharStream0.getBeginColumn());
      assertEquals(99, simpleCharStream0.getEndColumn());
      assertEquals(91, simpleCharStream0.getEndLine());
      assertEquals(91, simpleCharStream0.getLine());
      assertEquals(91, simpleCharStream0.getBeginLine());
      assertEquals(99, simpleCharStream0.getColumn());
      assertEquals("a", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(2, simpleCharStream0.bufpos);
      assertEquals(91, token1.endLine);
      assertEquals(16, token1.kind);
      assertEquals(99, token1.beginColumn);
      assertEquals(99, token1.endColumn);
      assertEquals(91, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'s'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 128, 3);
      assertArrayEquals(new char[] {'s'}, charArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertArrayEquals(new char[] {'s'}, charArray0);
      assertNotNull(jVCParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'s'}, charArray0);
      assertNotNull(token0);
      assertEquals(3, simpleCharStream0.getColumn());
      assertEquals(128, simpleCharStream0.getEndLine());
      assertEquals(128, simpleCharStream0.getLine());
      assertEquals(128, simpleCharStream0.getBeginLine());
      assertEquals(3, simpleCharStream0.getEndColumn());
      assertEquals(3, simpleCharStream0.getBeginColumn());
      assertEquals("s", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(3, token0.endColumn);
      assertEquals(128, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(128, token0.beginLine);
      assertEquals(3, token0.beginColumn);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0, (byte)2, 44, 8);
      assertArrayEquals(new char[] {'s'}, charArray0);
      assertNotNull(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream1.bufpos);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 14, 14);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jVCParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(token0);
      assertEquals(14, simpleCharStream0.getColumn());
      assertEquals(14, simpleCharStream0.getLine());
      assertEquals(14, simpleCharStream0.getEndColumn());
      assertEquals(14, simpleCharStream0.getBeginLine());
      assertEquals(14, simpleCharStream0.getBeginColumn());
      assertEquals(14, simpleCharStream0.getEndLine());
      assertEquals("[", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(16, token0.kind);
      assertEquals(14, token0.endLine);
      assertEquals(14, token0.endColumn);
      assertEquals(14, token0.beginLine);
      assertEquals(14, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      boolean boolean0 = charArrayReader0.ready();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("\t");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 126, 116);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertNotNull(jVCParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(126, simpleCharStream0.getEndLine());
      assertEquals(126, simpleCharStream0.getLine());
      assertEquals(120, simpleCharStream0.getEndColumn());
      assertEquals(120, simpleCharStream0.getBeginColumn());
      assertEquals(120, simpleCharStream0.getColumn());
      assertEquals(126, simpleCharStream0.getBeginLine());
      assertEquals("\t", token0.toString());
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(16, token0.kind);
      assertEquals(120, token0.endColumn);
      assertEquals(120, token0.beginColumn);
      assertEquals(126, token0.endLine);
      assertEquals(126, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = 'a';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', 'a', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 9, 9);
      assertArrayEquals(new char[] {'[', 'a', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new char[] {'[', 'a', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jVCParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'[', 'a', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(token0);
      assertEquals(9, simpleCharStream0.getColumn());
      assertEquals(9, simpleCharStream0.getEndColumn());
      assertEquals(9, simpleCharStream0.getBeginColumn());
      assertEquals(9, simpleCharStream0.getLine());
      assertEquals(9, simpleCharStream0.getEndLine());
      assertEquals(9, simpleCharStream0.getBeginLine());
      assertEquals("[", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(16, token0.kind);
      assertEquals(9, token0.endColumn);
      assertEquals(9, token0.beginLine);
      assertEquals(9, token0.beginColumn);
      assertEquals(9, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 1119, 1119);
      assertArrayEquals(new char[] {'[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jVCParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'[', '[', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(token0);
      assertEquals(1120, simpleCharStream0.getColumn());
      assertEquals(1119, simpleCharStream0.getBeginLine());
      assertEquals(1119, simpleCharStream0.getLine());
      assertEquals(1119, simpleCharStream0.getBeginColumn());
      assertEquals(1120, simpleCharStream0.getEndColumn());
      assertEquals(1119, simpleCharStream0.getEndLine());
      assertEquals("[[", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      assertEquals(1120, token0.endColumn);
      assertEquals(1119, token0.endLine);
      assertEquals(1, token0.kind);
      assertEquals(1119, token0.beginLine);
      assertEquals(1119, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = '[';
      charArray0[2] = 's';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '[', 's', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 59, 22);
      assertArrayEquals(new char[] {'[', '[', 's', '\u0000', '\u0000'}, charArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new char[] {'[', '[', 's', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jVCParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'[', '[', 's', '\u0000', '\u0000'}, charArray0);
      assertNotNull(token0);
      assertEquals(59, simpleCharStream0.getBeginLine());
      assertEquals(59, simpleCharStream0.getEndLine());
      assertEquals(22, simpleCharStream0.getBeginColumn());
      assertEquals(23, simpleCharStream0.getColumn());
      assertEquals(23, simpleCharStream0.getEndColumn());
      assertEquals(59, simpleCharStream0.getLine());
      assertEquals("[[", token0.toString());
      assertEquals(1, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, token0.kind);
      assertEquals(23, token0.endColumn);
      assertEquals(22, token0.beginColumn);
      assertEquals(59, token0.beginLine);
      assertEquals(59, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[3];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 558, '\u0000');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(simpleCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 4);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(token0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(558, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(558, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(558, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals("\u0000", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(558, token0.beginLine);
      assertEquals(16, token0.kind);
      assertEquals(558, token0.endLine);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jVCParserTokenManager1);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(558, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(558, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(558, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager1.ReInit(simpleCharStream0, 1554);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1554. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 802, 802);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(jVCParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(token0);
      assertEquals(802, simpleCharStream0.getBeginColumn());
      assertEquals(802, simpleCharStream0.getLine());
      assertEquals(802, simpleCharStream0.getEndLine());
      assertEquals(802, simpleCharStream0.getBeginLine());
      assertEquals(802, simpleCharStream0.getColumn());
      assertEquals(802, simpleCharStream0.getEndColumn());
      assertEquals("[", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(802, token0.endColumn);
      assertEquals(802, token0.beginColumn);
      assertEquals(802, token0.endLine);
      assertEquals(16, token0.kind);
      assertEquals(802, token0.beginLine);
      
      JVCParserTokenManager jVCParserTokenManager1 = null;
      try {
        jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, 802);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 802. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = 'a';
      charArray0[2] = 'a';
      charArray0[4] = 'K';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'[', 'a', 'a', '\u0000', 'K'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 44, (-361));
      assertArrayEquals(new char[] {'[', 'a', 'a', '\u0000', 'K'}, charArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0, 3);
      assertArrayEquals(new char[] {'[', 'a', 'a', '\u0000', 'K'}, charArray0);
      assertNotNull(jVCParserTokenManager0);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertArrayEquals(new char[] {'[', 'a', 'a', '\u0000', 'K'}, charArray0);
      assertNotNull(token0);
      assertEquals((-361), simpleCharStream0.getEndColumn());
      assertEquals(44, simpleCharStream0.getBeginLine());
      assertEquals(44, simpleCharStream0.getEndLine());
      assertEquals(44, simpleCharStream0.getLine());
      assertEquals((-361), simpleCharStream0.getColumn());
      assertEquals((-361), simpleCharStream0.getBeginColumn());
      assertEquals("[", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(44, token0.beginLine);
      assertEquals(16, token0.kind);
      assertEquals((-361), token0.endColumn);
      assertEquals(44, token0.endLine);
      assertEquals((-361), token0.beginColumn);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0, 1533, 44, 0);
      assertArrayEquals(new char[] {'[', 'a', 'a', '\u0000', 'K'}, charArray0);
      assertNotNull(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 's';
      charArray0[2] = 'y';
      charArray0[4] = 'K';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'z', 'z', 'y', '\u0000', 'K'}, charArray0);
      assertNotNull(charArrayReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, 44, (-358));
      assertArrayEquals(new char[] {'z', 'z', 'y', '\u0000', 'K'}, charArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(charArrayReader0, 44, 44, 44);
      assertArrayEquals(new char[] {'z', 'z', 'y', '\u0000', 'K'}, charArray0);
      assertNotNull(simpleCharStream1);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream1, 4);
      assertArrayEquals(new char[] {'z', 'z', 'y', '\u0000', 'K'}, charArray0);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotSame(simpleCharStream1, simpleCharStream0);
      assertArrayEquals(new char[] {'z', 'z', 'y', '\u0000', 'K'}, charArray0);
      assertNotNull(token0);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals(44, simpleCharStream1.getBeginLine());
      assertEquals(44, simpleCharStream1.getBeginColumn());
      assertEquals(44, simpleCharStream1.getEndColumn());
      assertEquals(44, simpleCharStream1.getEndLine());
      assertEquals(44, simpleCharStream1.getColumn());
      assertEquals(44, simpleCharStream1.getLine());
      assertEquals("z", token0.toString());
      assertEquals(0, simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(44, token0.endLine);
      assertEquals(44, token0.endColumn);
      assertEquals(44, token0.beginColumn);
      assertEquals(44, token0.beginLine);
      assertEquals(16, token0.kind);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new char[] {'z', 'z', 'y', '\u0000', 'K'}, charArray0);
      assertNotNull(jVCParserTokenManager1);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertNotSame(simpleCharStream0, simpleCharStream1);
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token1, token0);
      assertArrayEquals(new char[] {'z', 'z', 'y', '\u0000', 'K'}, charArray0);
      assertNotNull(token1);
      assertFalse(simpleCharStream0.equals((Object)simpleCharStream1));
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(4095, simpleCharStream0.bufpos);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '\u0083';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0083'}, charArray0);
      assertNotNull(charArrayReader0);
      
      CharArrayReader charArrayReader1 = new CharArrayReader(charArray0);
      assertArrayEquals(new char[] {'\u0083'}, charArray0);
      assertNotNull(charArrayReader1);
      assertFalse(charArrayReader1.equals((Object)charArrayReader0));
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(charArrayReader0, (-3149), 23);
      assertArrayEquals(new char[] {'\u0083'}, charArray0);
      assertNotNull(simpleCharStream0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new char[] {'\u0083'}, charArray0);
      assertNotNull(jVCParserTokenManager0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager0.getNextToken();
      assertNotSame(charArrayReader0, charArrayReader1);
      assertArrayEquals(new char[] {'\u0083'}, charArray0);
      assertNotNull(token0);
      assertFalse(charArrayReader0.equals((Object)charArrayReader1));
      assertEquals((-3149), simpleCharStream0.getBeginLine());
      assertEquals((-3149), simpleCharStream0.getLine());
      assertEquals((-3149), simpleCharStream0.getEndLine());
      assertEquals(23, simpleCharStream0.getBeginColumn());
      assertEquals(23, simpleCharStream0.getColumn());
      assertEquals(23, simpleCharStream0.getEndColumn());
      assertEquals("\u0083", token0.toString());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(16, token0.kind);
      assertEquals(23, token0.endColumn);
      assertEquals((-3149), token0.endLine);
      assertEquals((-3149), token0.beginLine);
      assertEquals(23, token0.beginColumn);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager0.SwitchTo((-3149));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -3149. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte)2;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)2, (byte)2);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte) (-110), (byte)2}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte) (-110), (byte)2}, byteArray0);
      assertNotNull(inputStreamReader0);
      assertEquals(2, byteArrayInputStream0.available());
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(inputStreamReader0, 12, 1652, 55);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte) (-110), (byte)2}, byteArray0);
      assertNotNull(simpleCharStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      JVCParserTokenManager jVCParserTokenManager0 = new JVCParserTokenManager(simpleCharStream0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte) (-110), (byte)2}, byteArray0);
      assertNotNull(jVCParserTokenManager0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'B';
      charArray0[1] = 'e';
      charArray0[2] = '^';
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0, (byte)2, 5);
      assertArrayEquals(new char[] {'B', 'e', '^'}, charArray0);
      assertNotNull(charArrayReader0);
      
      int int0 = charArrayReader0.read();
      assertArrayEquals(new char[] {'B', 'e', '^'}, charArray0);
      assertEquals(94, int0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JVCParserTokenManager jVCParserTokenManager1 = new JVCParserTokenManager(simpleCharStream0, (byte)2);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte) (-110), (byte)2}, byteArray0);
      assertNotNull(jVCParserTokenManager1);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      
      Token token0 = jVCParserTokenManager1.getNextToken();
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte) (-110), (byte)2}, byteArray0);
      assertNotNull(token0);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertEquals("\uFFFD", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1652, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(1652, simpleCharStream0.getEndColumn());
      assertEquals(1652, simpleCharStream0.getColumn());
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(1652, token0.beginColumn);
      assertEquals(12, token0.endLine);
      assertEquals(1652, token0.endColumn);
      assertEquals(16, token0.kind);
      assertEquals(12, token0.beginLine);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      
      Token token1 = jVCParserTokenManager1.getNextToken();
      assertNotSame(jVCParserTokenManager1, jVCParserTokenManager0);
      assertNotSame(token1, token0);
      assertArrayEquals(new byte[] {(byte)2, (byte)2, (byte) (-110), (byte)2}, byteArray0);
      assertNotNull(token1);
      assertFalse(jVCParserTokenManager1.equals((Object)jVCParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals("\u0002", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1653, simpleCharStream0.getBeginColumn());
      assertEquals(12, simpleCharStream0.getEndLine());
      assertEquals(1653, simpleCharStream0.getEndColumn());
      assertEquals(12, simpleCharStream0.getBeginLine());
      assertEquals(12, simpleCharStream0.getLine());
      assertEquals(1653, simpleCharStream0.getColumn());
      assertEquals(16, token1.kind);
      assertEquals(12, token1.endLine);
      assertEquals(1653, token1.beginColumn);
      assertEquals(1653, token1.endColumn);
      assertEquals(12, token1.beginLine);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        jVCParserTokenManager1.ReInit(simpleCharStream0, 12);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 12. State unchanged.
         //
         verifyException("com.pmdesigns.jvc.tools.JVCParserTokenManager", e);
      }
  }
}
