/*
 * This file was automatically generated by EvoSuite
 * Wed Jul 18 00:28:36 GMT 2018
 */

package org.apache.commons.imaging.common;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.imaging.common.RationalNumber;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RationalNumber_ESTest extends RationalNumber_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf((-2.147483647E9));
      long long0 = rationalNumber0.longValue();
      assertEquals((-2147483647L), long0);
      
      rationalNumber0.doubleValue();
      RationalNumber.valueOf((-2147483647));
      rationalNumber0.toDisplayString();
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("-2147483647", string0);
      
      rationalNumber0.doubleValue();
      assertEquals((-2.147483647E9), rationalNumber0.doubleValue(), 0.01);
      
      RationalNumber.valueOf((-2.147483647E9));
      RationalNumber rationalNumber1 = RationalNumber.valueOf(1);
      assertEquals(1L, rationalNumber1.longValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.6074530978803523E-8);
      assertEquals(2.607453076078884E-8, rationalNumber0.doubleValue(), 0.01);
      assertEquals(38351601, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(0.0);
      rationalNumber0.toDisplayString();
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = rationalNumber1.negate();
      rationalNumber2.negate();
      RationalNumber rationalNumber3 = rationalNumber1.negate();
      rationalNumber3.negate();
      RationalNumber.valueOf(0.0);
      RationalNumber.factoryMethod(1L, 0L);
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod(0, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(1227L, 1227L);
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod((-9L), 1);
      assertEquals((-9.0F), rationalNumber2.floatValue(), 0.01F);
      
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("1", string0);
      
      RationalNumber rationalNumber3 = rationalNumber1.negate();
      long long0 = rationalNumber1.longValue();
      assertEquals((-1L), long0);
      
      int int0 = rationalNumber3.intValue();
      assertEquals(1, rationalNumber3.divisor);
      assertEquals(1L, rationalNumber3.longValue());
      assertEquals((byte) (-1), rationalNumber1.byteValue());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(3424L, 1L);
      float float0 = rationalNumber0.floatValue();
      assertEquals(3424.0F, float0, 0.01F);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-867), (-1));
      String string0 = rationalNumber0.toString();
      assertEquals("867", string0);
      
      int int0 = rationalNumber0.intValue();
      assertEquals(867, int0);
      
      long long0 = rationalNumber0.longValue();
      assertEquals(867L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RationalNumber rationalNumber0 = new RationalNumber((-334), 1735);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1735, 3808L);
      RationalNumber rationalNumber2 = rationalNumber0.negate();
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod(1735, 1735);
      rationalNumber2.negate();
      RationalNumber rationalNumber4 = rationalNumber3.negate();
      rationalNumber4.toString();
      RationalNumber rationalNumber5 = RationalNumber.factoryMethod((-1), 334);
      rationalNumber2.doubleValue();
      String string0 = rationalNumber5.toString();
      assertEquals("1/-334 (-0.003)", string0);
      
      rationalNumber3.negate();
      RationalNumber rationalNumber6 = rationalNumber1.negate();
      String string1 = rationalNumber6.toDisplayString();
      assertEquals("-0.456", string1);
      
      String string2 = rationalNumber6.toString();
      assertEquals("-1735/3808 (-0.456)", string2);
      
      rationalNumber5.intValue();
      rationalNumber4.toString();
      rationalNumber4.toDisplayString();
      RationalNumber.factoryMethod(2147483647L, 1);
      rationalNumber4.doubleValue();
      rationalNumber5.negate();
      RationalNumber.factoryMethod((-334), (-1));
      RationalNumber rationalNumber7 = RationalNumber.factoryMethod((-2338L), (-334));
      int int0 = rationalNumber1.intValue();
      assertEquals(0, int0);
      
      RationalNumber rationalNumber8 = RationalNumber.valueOf(334);
      String string3 = rationalNumber8.toDisplayString();
      assertEquals("334", string3);
      
      String string4 = rationalNumber7.toString();
      assertEquals(7L, rationalNumber7.longValue());
      assertEquals("7", string4);
      
      long long0 = rationalNumber1.longValue();
      assertEquals(0.45561974789915966, rationalNumber1.doubleValue(), 0.01);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(3.1362637355414336E-4);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals("0", string0);
      assertEquals(2, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.1474836260594594E9);
      String string0 = rationalNumber0.toDisplayString();
      assertEquals(2.147483626E9, rationalNumber0.doubleValue(), 0.01);
      assertEquals("2147483626", string0);
      assertEquals(1, rationalNumber0.divisor);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2022.5);
      String string0 = rationalNumber0.toString();
      assertEquals("4045/2 (2,022.5)", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1437.6855);
      int int0 = rationalNumber0.intValue();
      assertEquals(1437, int0);
      assertEquals(2875371, rationalNumber0.numerator);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(1044.989329);
      int int0 = rationalNumber0.intValue();
      assertEquals(1044, int0);
      
      String string0 = rationalNumber0.toString();
      assertEquals("685513/656 (1,044.989)", string0);
      
      rationalNumber0.toDisplayString();
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber rationalNumber2 = rationalNumber0.negate();
      RationalNumber rationalNumber3 = rationalNumber0.negate();
      rationalNumber1.toString();
      RationalNumber rationalNumber4 = RationalNumber.valueOf(685513);
      assertEquals(685513L, rationalNumber4.longValue());
      
      rationalNumber3.toString();
      String string1 = rationalNumber1.toString();
      assertEquals("-685513/656 (-1,044.989)", string1);
      
      rationalNumber2.longValue();
      String string2 = rationalNumber3.toDisplayString();
      assertEquals("-1,044.989", string2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(1L, (-3072L));
      RationalNumber rationalNumber1 = rationalNumber0.negate();
      RationalNumber.valueOf((-3072));
      RationalNumber rationalNumber2 = RationalNumber.valueOf((-4392.4));
      assertEquals((-21962), rationalNumber2.numerator);
      
      String string0 = rationalNumber1.toString();
      assertEquals("-1/-3072 (0)", string0);
      
      RationalNumber.valueOf((-21962));
      rationalNumber1.negate();
      RationalNumber rationalNumber3 = RationalNumber.valueOf(11.0);
      assertEquals(11, rationalNumber3.numerator);
      
      RationalNumber rationalNumber4 = RationalNumber.valueOf(3.248601387895178E-8);
      assertEquals(3.248601363412004E-8, rationalNumber4.doubleValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RationalNumber.factoryMethod((-2147483689L), 0L);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Invalid value, numerator: -2147483689, divisor: 0
         //
         verifyException("org.apache.commons.imaging.common.RationalNumber", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.valueOf(2.147483647E9);
      assertEquals(Integer.MAX_VALUE, rationalNumber0.numerator);
      
      RationalNumber.factoryMethod(1, 1);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod((-2147483683L), (-2147483683L));
      assertEquals(1, rationalNumber1.divisor);
      assertEquals(1.0F, rationalNumber1.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod((-2147483689L), (-2147483689L));
      int int0 = rationalNumber0.intValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483647L, 2147483647L);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(2147483651L, 2147483647L);
      assertEquals(1073741823, rationalNumber1.divisor);
      
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(3350L, 2147483651L);
      assertEquals(1.5599653110280956E-6, rationalNumber2.doubleValue(), 0.01);
      
      RationalNumber rationalNumber3 = RationalNumber.valueOf(2147483651L);
      assertEquals(2147483647L, rationalNumber3.longValue());
      
      RationalNumber.factoryMethod(3350L, 42949673);
      long long0 = rationalNumber0.longValue();
      assertEquals(1, rationalNumber0.divisor);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RationalNumber.factoryMethod(2147483647L, 2147483647L);
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(2147483651L, 2147483647L);
      assertEquals(1.0000000018626451, rationalNumber0.doubleValue(), 0.01);
      
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(2147483651L, (-1L));
      assertEquals(2147483645, rationalNumber1.numerator);
      
      RationalNumber rationalNumber2 = RationalNumber.valueOf((-2.147483647E9));
      assertEquals((-2147483647), rationalNumber2.numerator);
      
      RationalNumber.factoryMethod(1, 0L);
      RationalNumber rationalNumber3 = RationalNumber.factoryMethod((-1L), (-1097L));
      assertEquals(1, rationalNumber3.numerator);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RationalNumber rationalNumber0 = RationalNumber.factoryMethod(1L, 1582L);
      RationalNumber rationalNumber1 = RationalNumber.factoryMethod(1582L, 1582L);
      String string0 = rationalNumber0.toString();
      assertEquals("1/1582 (0.001)", string0);
      
      RationalNumber rationalNumber2 = RationalNumber.factoryMethod(1L, 2147483651L);
      assertEquals((-4.656612879582606E-10), rationalNumber2.doubleValue(), 0.01);
      
      RationalNumber rationalNumber3 = RationalNumber.valueOf(1.0E-8);
      RationalNumber rationalNumber4 = rationalNumber1.negate();
      assertEquals((-1L), rationalNumber4.longValue());
      
      RationalNumber rationalNumber5 = rationalNumber3.negate();
      assertEquals((-1.0E-8), rationalNumber5.doubleValue(), 0.01);
      
      RationalNumber rationalNumber6 = RationalNumber.factoryMethod(1629L, 1317L);
      assertEquals(1.2369020501138952, rationalNumber6.doubleValue(), 0.01);
      
      long long0 = rationalNumber3.longValue();
      assertEquals(0L, long0);
  }
}
