/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 06 18:37:31 GMT 2018
 */

package weka.gui.beans;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.TextField;
import java.awt.color.ColorSpace;
import java.awt.event.ComponentListener;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.beans.EventSetDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.text.AttributedCharacterIterator;
import java.util.ArrayList;
import java.util.Locale;
import javax.swing.JLayeredPane;
import javax.swing.plaf.synth.SynthComboBoxUI;
import javax.swing.plaf.synth.SynthOptionPaneUI;
import javax.swing.plaf.synth.SynthToolBarUI;
import javax.swing.text.AbstractDocument;
import javax.swing.text.PlainDocument;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.ChebyshevDistance;
import weka.core.CheckOptionHandler;
import weka.core.EuclideanDistance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.BallTree;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.AttributeSelection;
import weka.filters.supervised.attribute.ClassOrder;
import weka.filters.supervised.attribute.NominalToBinary;
import weka.filters.supervised.instance.SpreadSubsample;
import weka.filters.supervised.instance.StratifiedRemoveFolds;
import weka.gui.Logger;
import weka.gui.SysErrLog;
import weka.gui.beans.AttributeSummarizer;
import weka.gui.beans.BeanVisual;
import weka.gui.beans.ClassAssigner;
import weka.gui.beans.ClassValuePicker;
import weka.gui.beans.Clusterer;
import weka.gui.beans.ClustererPerformanceEvaluator;
import weka.gui.beans.ConfigurationListener;
import weka.gui.beans.CrossValidationFoldMaker;
import weka.gui.beans.DataSetEvent;
import weka.gui.beans.DataVisualizer;
import weka.gui.beans.Filter;
import weka.gui.beans.FlowByExpression;
import weka.gui.beans.GraphViewer;
import weka.gui.beans.ImageSaver;
import weka.gui.beans.InstanceEvent;
import weka.gui.beans.InstanceStreamToBatchMaker;
import weka.gui.beans.Loader;
import weka.gui.beans.MetaBean;
import weka.gui.beans.Saver;
import weka.gui.beans.ScatterPlotMatrix;
import weka.gui.beans.SerializedModelSaver;
import weka.gui.beans.Sorter;
import weka.gui.beans.SubstringLabeler;
import weka.gui.beans.TestSetEvent;
import weka.gui.beans.TestSetMaker;
import weka.gui.beans.TextViewer;
import weka.gui.beans.TrainingSetEvent;
import weka.gui.beans.TrainingSetMaker;
import weka.gui.explorer.ClassifierErrorsPlotInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Filter_ESTest extends Filter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = filter0.globalInfo();
      assertEquals("<html><font color=blue>An instance filter that passes all instances through unmodified</font><br><br> Primarily for testing purposes.<br></html>", string0);
      
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("AllFilter", beanVisual0.getText());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Filter filter0 = new Filter();
      TextViewer textViewer0 = new TextViewer();
      filter0.addDataSourceListener(textViewer0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassAssigner classAssigner0 = new ClassAssigner();
      filter0.removeTestSetListener(classAssigner0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.setLog((Logger) null);
      BeanVisual beanVisual0 = filter0.getVisual();
      assertEquals("weka/gui/beans/icons/DefaultFilter_animated.gif", beanVisual0.getAnimatedIconPath());
      assertEquals("weka/gui/beans/icons/DefaultFilter.gif", beanVisual0.getIconPath());
      assertEquals("AllFilter", beanVisual0.getText());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Filter filter0 = new Filter();
      DataSetEvent dataSetEvent0 = new DataSetEvent(filter0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Filter filter0 = new Filter();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(filter0, (Instances) null, (-100), (-437), (-100), (-760));
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = AbstractDocument.ElementNameAttribute;
      filter0.isBusy();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.addConfigurationListener(configurationListener0);
      TestSetMaker testSetMaker0 = new TestSetMaker();
      BeanVisual beanVisual0 = testSetMaker0.m_visual;
      assertEquals(0, BeanVisual.NORTH_CONNECTOR);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.getWrappedAlgorithm();
      boolean boolean0 = filter0.eventGeneratable("d[E8AdGZ8%");
      assertEquals("AllFilter", filter0.getCustomName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Filter filter0 = new Filter();
      ClassValuePicker classValuePicker0 = new ClassValuePicker();
      classValuePicker0.getConnectedFormat();
      TestSetEvent testSetEvent0 = new TestSetEvent(filter0, (Instances) null);
      filter0.acceptTestSet(testSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.list();
      filter0.setCustomName("'MJ%.");
      filter0.disconnectionNotification("'MJ%.", "'MJ%.");
      assertEquals("'MJ%.", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      filter0.removeInstanceListener(sorter0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Filter filter0 = new Filter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      filter0.stop();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      filter0.addTestSetListener(saver0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Filter filter0 = new Filter();
      // Undeclared exception!
      try { 
        filter0.connectionAllowed((EventSetDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Filter filter0 = new Filter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setFilter(multiFilter0);
      filter0.setLog((Logger) null);
      assertEquals("MultiFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SystemInUtil.addInputLine("5.0.1");
      Filter filter0 = new Filter();
      filter0.acceptDataSet((DataSetEvent) null);
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      Instances instances0 = attributeSummarizer0.m_visualizeDataSet;
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(mockThaiBuddhistDate0, (Instances) null, (-533), (-533));
      filter0.acceptTrainingSet(trainingSetEvent0);
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification(">49V8D_*t5$", ">49V8D_*t5$");
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances();
      filter0.stop();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(attributeSummarizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.AttributeSummarizer : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification("f>49V8D_*t5$", "f>49V8D_*t5$");
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      Instances instances0 = attributeSummarizer0.m_visualizeDataSet;
      DataSetEvent dataSetEvent0 = new DataSetEvent(stratifiedRemoveFolds0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.getBackground();
      filter0.disconnectionNotification("})EXK\u0000 @3g`JeNDx", sorter0);
      Sorter sorter1 = new Sorter();
      filter0.removeDataSourceListener(sorter1);
      Clusterer clusterer0 = new Clusterer();
      filter0.removeTrainingSetListener(clusterer0);
      // Undeclared exception!
      try { 
        filter0.performRequest("Global info...");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Global info... not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      SysErrLog sysErrLog0 = new SysErrLog();
      filter0.setLog(sysErrLog0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      filter0.globalInfo();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SystemInUtil.addInputLine("dRtHMLsvFDBBNL");
      Filter filter0 = new Filter();
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      filter0.removeConfigurationListener(configurationListener0);
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      crossValidationFoldMaker0.removeMouseWheelListener((MouseWheelListener) null);
      filter0.connectionNotification("dRtHMLsvFDBBNL", crossValidationFoldMaker0);
      boolean boolean0 = filter0.connectionAllowed("dRtHMLsvFDBBNL");
      assertFalse(boolean0);
      
      filter0.addTrainingSetListener(crossValidationFoldMaker0);
      filter0.removeTrainingSetListener(crossValidationFoldMaker0);
      filter0.getWrappedAlgorithm();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Filter filter0 = new Filter();
      String string0 = AbstractDocument.ElementNameAttribute;
      boolean boolean0 = filter0.eventGeneratable("configuration");
      assertTrue(boolean0);
      
      filter0.enumerateRequests();
      assertEquals("AllFilter", filter0.getCustomName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      Loader loader0 = new Loader();
      filter0.connectionNotification("l|&G <v", loader0);
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent0);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      flowByExpression0.getBackground();
      filter0.disconnectionNotification("Received ", saver0);
      Sorter sorter1 = new Sorter();
      filter0.removeDataSourceListener(flowByExpression0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Clusterer clusterer0 = new Clusterer();
      DataVisualizer dataVisualizer0 = new DataVisualizer();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      dataVisualizer0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      dataVisualizer0.getHierarchyListeners();
      TextField textField0 = null;
      try {
        textField0 = new TextField("Received ");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      SysErrLog sysErrLog0 = new SysErrLog();
      filter0.setLog(sysErrLog0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      filter0.getInputMethodListeners();
      MultiFilter multiFilter0 = new MultiFilter();
      ClassOrder classOrder0 = new ClassOrder();
      filter0.setWrappedAlgorithm(classOrder0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Instances instances0 = substringLabeler0.m_outputStructure;
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      instanceEvent0.setStatus(0);
      filter0.acceptInstance(instanceEvent0);
      // Undeclared exception!
      try { 
        multiFilter0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Filter filter0 = new Filter();
      String string0 = AbstractDocument.ElementNameAttribute;
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      AttributeSelection attributeSelection0 = new AttributeSelection();
      Instances instances0 = attributeSummarizer0.m_visualizeDataSet;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Locale locale0 = Locale.ITALIAN;
      DataSetEvent dataSetEvent0 = new DataSetEvent(attributeSummarizer0, (Instances) null);
      filter0.acceptDataSet(dataSetEvent0);
      filter0.eventGeneratable("configuration");
      FlowByExpression flowByExpression0 = new FlowByExpression();
      Logger logger0 = flowByExpression0.m_log;
      filter0.setLog((Logger) null);
      ClassAssigner classAssigner0 = new ClassAssigner();
      SynthComboBoxUI synthComboBoxUI0 = new SynthComboBoxUI();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      instanceEvent0.setInstance((Instance) null);
      filter0.acceptInstance(instanceEvent0);
      ClassAssigner classAssigner1 = new ClassAssigner();
      classAssigner0.getConnectedFormat();
      classAssigner0.firePropertyChange(".bsi", (byte)0, (byte)15);
      AlphabeticTokenizer alphabeticTokenizer1 = new AlphabeticTokenizer();
      // Undeclared exception!
      try { 
        filter0.performRequest("bt1Zc-+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // bt1Zc-+ not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      Sorter sorter0 = new Sorter();
      filter0.removeTrainingSetListener(sorter0);
      filter0.addInstanceListener(sorter0);
      SynthComboBoxUI synthComboBoxUI0 = new SynthComboBoxUI();
      synthComboBoxUI0.configureArrowButton();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Sorter sorter1 = new Sorter();
      SubstringLabeler substringLabeler1 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      // Undeclared exception!
      try { 
        filter0.notifyInstanceListeners(instanceEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.repaint();
      filter0.connectionAllowed("weka.filters.unsupervised.instance.RemoveWithValues");
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      Sorter sorter0 = new Sorter();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      filter0.addInstanceListener(flowByExpression0);
      SynthComboBoxUI synthComboBoxUI0 = new SynthComboBoxUI();
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      SerializedModelSaver serializedModelSaver0 = new SerializedModelSaver();
      Sorter sorter1 = new Sorter();
      filter0.eventGeneratable("h5GFEf[C5+[<");
      SubstringLabeler substringLabeler1 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler1.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      BeanVisual beanVisual0 = serializedModelSaver0.m_visual;
      assertTrue(beanVisual0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionNotification(">49V8D_*t5$", ">49V8D_*t5$");
      StratifiedRemoveFolds stratifiedRemoveFolds0 = new StratifiedRemoveFolds();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      filter0.eventGeneratable(">49V8D_*t5$");
      TrainingSetMaker trainingSetMaker0 = new TrainingSetMaker();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(mockHijrahDate0, instances0, 3135, 3135);
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.removeDataSourceListener(trainingSetMaker0);
      filter0.getWrappedAlgorithm();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Filter filter0 = new Filter();
      Clusterer clusterer0 = new Clusterer();
      weka.filters.Filter filter1 = filter0.getFilter();
      filter0.connectionAllowed("VGkKyX");
      filter0.disconnectionNotification("VGkKyX", filter1);
      MetaBean metaBean0 = new MetaBean();
      SynthOptionPaneUI synthOptionPaneUI0 = new SynthOptionPaneUI();
      metaBean0.addPropertyChangeListenersSubFlow(synthOptionPaneUI0);
      BeanVisual beanVisual0 = metaBean0.getVisual();
      beanVisual0.firePropertyChange("weka/gui/beans/icons/", (byte) (-43), (byte)38);
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.LANGUAGE;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("vXjz", arrayList0, (byte)38);
      TestSetEvent testSetEvent0 = new TestSetEvent(attributedCharacterIterator_Attribute0, instances0, 1, (byte) (-43), 78, 0);
      filter0.acceptTestSet(testSetEvent0);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(testSetEvent0, instances0, 0, (-1910703097));
      filter0.acceptTrainingSet(trainingSetEvent0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setWrappedAlgorithm(multiFilter0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      Loader loader0 = new Loader();
      filter0.acceptInstance(instanceEvent0);
      filter0.getGraphicsConfiguration();
      filter0.isBusy();
      // Undeclared exception!
      try { 
        filter0.performRequest("T~M@8\"#`xTT%BRD6I\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // T~M@8\"#`xTT%BRD6I\" not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Filter filter0 = new Filter();
      Clusterer clusterer0 = new Clusterer();
      filter0.addTrainingSetListener(clusterer0);
      weka.filters.Filter filter1 = filter0.getFilter();
      filter0.connectionAllowed("VGkKyX");
      filter0.disconnectionNotification("VGkKyX", filter1);
      MetaBean metaBean0 = new MetaBean();
      SynthOptionPaneUI synthOptionPaneUI0 = new SynthOptionPaneUI();
      BeanVisual beanVisual0 = metaBean0.getVisual();
      SystemInUtil.addInputLine("weka/gui/beans/icons/");
      beanVisual0.firePropertyChange("weka/gui/beans/icons/", (byte) (-43), (byte)38);
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.LANGUAGE;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("vXjz", arrayList0, (byte)38);
      TestSetEvent testSetEvent0 = new TestSetEvent(attributedCharacterIterator_Attribute0, instances0, 1, (byte) (-43), 78, 0);
      filter0.acceptTestSet(testSetEvent0);
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      BeanVisual beanVisual1 = instanceStreamToBatchMaker0.getVisual();
      filter0.setVisual(beanVisual0);
      DataSetEvent dataSetEvent0 = new DataSetEvent(beanVisual1, instances0);
      DataSetEvent dataSetEvent1 = new DataSetEvent(instanceStreamToBatchMaker0, instances0);
      filter0.acceptDataSet(dataSetEvent1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Filter filter0 = new Filter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Sorter sorter0 = new Sorter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setWrappedAlgorithm(multiFilter0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Instances instances0 = substringLabeler0.m_outputStructure;
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      int int0 = ColorSpace.TYPE_8CLR;
      Loader loader0 = new Loader();
      instanceEvent0.setStatus(18);
      filter0.acceptInstance(instanceEvent0);
      // Undeclared exception!
      try { 
        filter0.performRequest(">49T8D_*t5$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // >49T8D_*t5$ not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.connectionAllowed("h4/GEf[q5+[<");
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances();
      Sorter sorter0 = new Sorter();
      sorter0.getInputMethodListeners();
      MultiFilter multiFilter0 = new MultiFilter();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h4/GEf[q5+[<");
      filter0.setWrappedAlgorithm(multiFilter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      Loader loader0 = new Loader();
      instanceEvent0.setStatus(2);
      filter0.getCustomName();
      Loader loader1 = new Loader();
      filter0.acceptInstance(instanceEvent0);
      BeanVisual beanVisual0 = loader1.getVisual();
      filter0.setVisual(beanVisual0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Filter filter0 = new Filter();
      filter0.repaint();
      filter0.connectionAllowed("h4/GEf[q5+[<");
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      ClassifierErrorsPlotInstances classifierErrorsPlotInstances0 = new ClassifierErrorsPlotInstances();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setWrappedAlgorithm(multiFilter0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Instances instances0 = substringLabeler0.m_outputStructure;
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      instanceEvent0.setStatus((-941));
      SparseInstance sparseInstance0 = new SparseInstance(1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      instanceEvent0.setInstance(sparseInstance0);
      InstanceEvent instanceEvent1 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent1);
      // Undeclared exception!
      try { 
        multiFilter0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SynthComboBoxUI synthComboBoxUI0 = new SynthComboBoxUI();
      Sorter sorter0 = new Sorter();
      Sorter sorter1 = new Sorter();
      sorter1.paintImmediately((-1994091951), (-1994091951), 1, (-2121));
      InstanceEvent instanceEvent0 = sorter1.m_ie;
      sorter0.getMouseListeners();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      ClassAssigner classAssigner0 = new ClassAssigner();
      MultiFilter multiFilter0 = new MultiFilter();
      Filter filter0 = new Filter();
      filter0.connectionNotification("instance", sorter0);
      Sorter sorter2 = new Sorter();
      GraphViewer graphViewer0 = new GraphViewer();
      filter0.getLocale();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, (HierarchyListener) null);
      InstanceEvent instanceEvent1 = sorter1.m_ie;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      // Undeclared exception!
      try { 
        filter0.setWrappedAlgorithm(graphViewer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // class weka.gui.beans.GraphViewer : incorrect type of algorithm (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      Sorter sorter0 = new Sorter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setWrappedAlgorithm(multiFilter0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(mockHijrahDate0, instances0, 2, 0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      SystemInUtil.addInputLine(".arff");
      euclideanDistance0.setDontNormalize(false);
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter0.eventGeneratable(".bsi");
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      try { 
        textDirectoryLoader0.setSource((InputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Setting InputStream as source not supported
         //
         verifyException("weka.core.converters.AbstractLoader", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      Sorter sorter0 = new Sorter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setWrappedAlgorithm(multiFilter0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(mockHijrahDate0, instances0, 2, 0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      filter0.removeDataSourceListener(sorter0);
      SystemInUtil.addInputLine(".arff");
      Filter filter1 = new Filter();
      Sorter sorter1 = new Sorter();
      Sorter sorter2 = new Sorter();
      ImageSaver imageSaver0 = new ImageSaver();
      ClassAssigner classAssigner0 = new ClassAssigner();
      MultiFilter multiFilter1 = new MultiFilter();
      TestSetEvent testSetEvent0 = new TestSetEvent(sorter0, instances0);
      filter0.acceptTestSet(testSetEvent0);
      filter0.getFilter();
      filter0.acceptTestSet(testSetEvent0);
      filter1.stop();
      filter0.getVisual();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Filter filter0 = new Filter();
      Clusterer clusterer0 = new Clusterer();
      filter0.addTrainingSetListener(clusterer0);
      weka.filters.Filter filter1 = filter0.getFilter();
      filter0.connectionAllowed("VGkKyX");
      filter0.disconnectionNotification("VGkKyX", filter1);
      MetaBean metaBean0 = new MetaBean();
      SynthOptionPaneUI synthOptionPaneUI0 = new SynthOptionPaneUI();
      metaBean0.addPropertyChangeListenersSubFlow(synthOptionPaneUI0);
      BeanVisual beanVisual0 = metaBean0.getVisual();
      beanVisual0.firePropertyChange("weka/gui/beans/icons/", (byte) (-43), (byte)38);
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.LANGUAGE;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("vXjz", arrayList0, (byte)38);
      TestSetEvent testSetEvent0 = new TestSetEvent(attributedCharacterIterator_Attribute0, instances0, 1, (byte) (-43), 78, 0);
      filter0.acceptTestSet(testSetEvent0);
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(testSetEvent0, instances0, 0, (-1910703097));
      filter0.acceptTrainingSet(trainingSetEvent0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.setDebug(true);
      multiFilter0.getOptions();
      filter0.setWrappedAlgorithm(multiFilter0);
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.getGraphicsConfiguration();
      ArffLoader arffLoader0 = new ArffLoader();
      instanceEvent0.setStatus(2);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      sparseInstance0.toStringNoWeight(17);
      instanceEvent0.setInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      filter0.getCustomName();
      CrossValidationFoldMaker crossValidationFoldMaker0 = new CrossValidationFoldMaker();
      String string0 = PlainDocument.tabSizeAttribute;
      InstanceEvent instanceEvent1 = sorter0.m_ie;
      filter0.acceptInstance(instanceEvent1);
      ConfigurationListener configurationListener0 = mock(ConfigurationListener.class, new ViolatedAssumptionAnswer());
      ImageSaver imageSaver0 = new ImageSaver();
      BeanVisual beanVisual0 = imageSaver0.m_visual;
      filter0.setVisual(beanVisual0);
      filter0.removeTrainingSetListener(crossValidationFoldMaker0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Filter filter0 = new Filter();
      Saver saver0 = new Saver();
      SysErrLog sysErrLog0 = new SysErrLog();
      filter0.setLog(sysErrLog0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      SpreadSubsample spreadSubsample0 = new SpreadSubsample();
      filter0.getInputMethodListeners();
      MultiFilter multiFilter0 = new MultiFilter();
      ClassOrder classOrder0 = new ClassOrder();
      NominalToBinary nominalToBinary0 = new NominalToBinary();
      filter0.setWrappedAlgorithm(nominalToBinary0);
      weka.filters.Filter[] filterArray0 = new weka.filters.Filter[6];
      filterArray0[0] = (weka.filters.Filter) classOrder0;
      filterArray0[1] = (weka.filters.Filter) nominalToBinary0;
      filterArray0[2] = (weka.filters.Filter) classOrder0;
      filterArray0[3] = (weka.filters.Filter) multiFilter0;
      filterArray0[4] = (weka.filters.Filter) classOrder0;
      filterArray0[5] = (weka.filters.Filter) multiFilter0;
      multiFilter0.setFilters(filterArray0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      Color color0 = Color.green;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 2;
      floatArray0[3] = 1081.0F;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 1;
      color0.getComponents(floatArray0);
      substringLabeler0.setBackground(color0);
      Instances instances0 = substringLabeler0.m_outputStructure;
      Sorter sorter0 = new Sorter();
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      instanceEvent0.setStatus(1891);
      filter0.acceptInstance((InstanceEvent) null);
      // Undeclared exception!
      try { 
        multiFilter0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Filter filter0 = new Filter();
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      Sorter sorter0 = new Sorter();
      filter0.connectionNotification("", instanceStreamToBatchMaker0);
      instanceStreamToBatchMaker0.grabFocus();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter0.eventGeneratable("");
      filter0.addTrainingSetListener(sorter0);
      String string0 = PlainDocument.tabSizeAttribute;
      MultiFilter multiFilter0 = new MultiFilter();
      // Undeclared exception!
      try { 
        multiFilter0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Sorter sorter0 = new Sorter();
      MultiFilter multiFilter0 = new MultiFilter();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getData();
      Filter filter0 = new Filter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      filter0.connectionNotification("dataSet", "dataSet");
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(filter0, (-3379), 0L, (-1), (-3379), (-2), (-1421), (-2029324516), 24, true, (-2), (-3379), (-3379), 398.13093005465);
      filter0.isOpaque();
      filter0.connectionNotification("theres", testInstances0);
      SubstringLabeler substringLabeler0 = new SubstringLabeler();
      InstanceEvent instanceEvent0 = substringLabeler0.m_ie;
      filter0.notifyInstanceListeners(instanceEvent0);
      // Undeclared exception!
      try { 
        filter0.performRequest("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (Filter)
         //
         verifyException("weka.gui.beans.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      Sorter sorter1 = new Sorter();
      Clusterer clusterer0 = new Clusterer();
      filter0.connectionNotification("", clusterer0);
      InstanceStreamToBatchMaker instanceStreamToBatchMaker0 = new InstanceStreamToBatchMaker();
      instanceStreamToBatchMaker0.grabFocus();
      FlowByExpression flowByExpression0 = new FlowByExpression();
      InstanceEvent instanceEvent0 = flowByExpression0.m_ie;
      filter0.eventGeneratable("");
      filter0.addTrainingSetListener(sorter1);
      String string0 = PlainDocument.tabSizeAttribute;
      AttributeSummarizer attributeSummarizer0 = new AttributeSummarizer();
      Instances instances0 = attributeSummarizer0.m_visualizeDataSet;
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      MultiFilter multiFilter0 = new MultiFilter();
      filter0.setWrappedAlgorithm(multiFilter0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      textDirectoryLoader0.getDataSet();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      ScatterPlotMatrix scatterPlotMatrix0 = new ScatterPlotMatrix();
      TrainingSetEvent trainingSetEvent0 = new TrainingSetEvent(mockHijrahDate0, instances0, (-740), 0);
      filter0.acceptTrainingSet(trainingSetEvent0);
      Filter filter1 = new Filter();
      Sorter sorter1 = new Sorter();
      Saver saver0 = new Saver();
      BeanVisual beanVisual0 = saver0.getVisual();
      beanVisual0.firePropertyChange("@relation", (byte)87, (byte)38);
      AttributedCharacterIterator.Attribute attributedCharacterIterator_Attribute0 = AttributedCharacterIterator.Attribute.LANGUAGE;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances(".bsi", arrayList0, 1909);
      beanVisual0.paintImmediately((-519), (-740), (-1910910292), (-740));
      TestSetEvent testSetEvent0 = new TestSetEvent(mockHijrahDate0, instances1, 1, 0, 1909, (-2305));
      filter0.acceptTestSet(testSetEvent0);
      filter1.acceptTrainingSet(trainingSetEvent0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Filter filter0 = new Filter();
      Sorter sorter0 = new Sorter();
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.setDebug(true);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      multiFilter0.getOptions();
      filter0.setWrappedAlgorithm(multiFilter0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InstanceEvent instanceEvent0 = sorter0.m_ie;
      filter0.getGraphicsConfiguration();
      filter0.isBusy();
      ArffLoader arffLoader0 = new ArffLoader();
      instanceEvent0.setStatus(2);
      instanceEvent0.setStatus(1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      sparseInstance0.toStringNoWeight(17);
      instanceEvent0.setInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      instanceEvent0.setInstance(sparseInstance0);
      filter0.getCustomName();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MultiFilter multiFilter1 = new MultiFilter();
      Filter filter1 = new Filter();
      filter0.connectionNotification("instance", byteArray0);
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      filter0.removeComponentListener((ComponentListener) null);
      Sorter sorter1 = new Sorter();
      // Undeclared exception!
      try { 
        filter0.getInputMap(6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // condition must be one of JComponent.WHEN_IN_FOCUSED_WINDOW, JComponent.WHEN_FOCUSED or JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
         //
         verifyException("javax.swing.JComponent", e);
      }
  }
}
