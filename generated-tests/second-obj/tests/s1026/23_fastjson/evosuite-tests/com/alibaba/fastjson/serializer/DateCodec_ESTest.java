/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 11:52:08 GMT 2018
 */

package com.alibaba.fastjson.serializer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.parser.DefaultJSONParser;
import com.alibaba.fastjson.parser.JSONReaderScanner;
import com.alibaba.fastjson.parser.JSONScanner;
import com.alibaba.fastjson.parser.ParserConfig;
import com.alibaba.fastjson.serializer.DateCodec;
import com.alibaba.fastjson.serializer.JSONSerializer;
import com.alibaba.fastjson.serializer.SerializeWriter;
import com.alibaba.fastjson.serializer.SerializerFeature;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.Writer;
import java.lang.reflect.Type;
import java.net.URI;
import java.net.URISyntaxException;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.Locale;
import java.util.Properties;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateCodec_ESTest extends DateCodec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      dateCodec0.getFastMatchToken();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(",%'1)i}n8T%9");
      Class<Byte> class0 = Byte.TYPE;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) class0, (Object) ",%'1)i}n8T%9");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \",%'1)i}n8T%9\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Integer integer0 = new Integer(123);
      Class<Integer> class0 = Integer.TYPE;
      dateCodec0.write(jSONSerializer0, integer0, integer0, class0, 123);
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      ParserConfig parserConfig0 = ParserConfig.global;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("", parserConfig0);
      Class<Long> class0 = Long.TYPE;
      Long long0 = dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) "", (Object) null);
      assertNull(long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      SerializeWriter serializeWriter0 = new SerializeWriter(600);
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Class<Float> class0 = Float.TYPE;
      dateCodec0.write(jSONSerializer0, (Object) null, serializeWriter0, class0, 600);
      assertFalse(serializeWriter0.isSortField());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("MM/dd/yyyy HH:mm:ss");
      ParserConfig parserConfig0 = ParserConfig.global;
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      JSON.DEFAULT_TYPE_KEY = "0000-00-00";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser(jSONScanner0, parserConfig0);
      Class<MockCalendar> class0 = MockCalendar.class;
      Class<Short> class1 = Short.TYPE;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      System.setCurrentTimeMillis(0L);
      MockJapaneseDate mockJapaneseDate0 = dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) class0, (Object) "0000-00-00");
      assertNull(mockJapaneseDate0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      MockDate mockDate0 = new MockDate();
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      Class<Long> class0 = Long.TYPE;
      Integer integer0 = new Integer((short)29153);
      Short short0 = new Short((short)29153);
      dateCodec0.write(jSONSerializer0, mockDate0, short0, class0, (short)74);
      int int0 = dateCodec0.getFastMatchToken();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      JSON.DEFAULT_TYPE_KEY = "OY,$9N~+";
      Class<Long> class0 = Long.TYPE;
      ParserConfig parserConfig0 = new ParserConfig();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0001-01-01T00:00:00+08:00", parserConfig0, (short)33);
      dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) null, (Object) "0001-01-01T00:00:00+08:00");
      dateCodec0.getFastMatchToken();
      System.setCurrentTimeMillis(1220L);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DateCodec dateCodec0 = new DateCodec();
      Class<Long> class0 = Long.TYPE;
      JSON.DEFFAULT_DATE_FORMAT = "/Date(0000-00-00T00:00:00";
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("&@p[Bo");
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) "/Date(0000-00-00T00:00:00", (Object) "/Date(0000-00-00T00:00:00");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 't'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Long> class0 = Long.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("m<B?hvZCC|Lyy");
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) "/Date(0000-00-00T00:00:00", (Object) "/Date(0000-00-00T00:00:00");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/Date(0000-00-00T00:00:00\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("0000-00-00T00:00:00");
      ParserConfig parserConfig0 = ParserConfig.global;
      char[] charArray0 = new char[1];
      JSONScanner jSONScanner0 = new JSONScanner(charArray0, 0);
      Locale locale0 = Locale.CANADA_FRENCH;
      JSON.defaultLocale = locale0;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("0000-00-00T00:00:00", parserConfig0, 0);
      Class<Short> class0 = Short.TYPE;
      Byte byte0 = new Byte((byte)5);
      MockJapaneseDate mockJapaneseDate0 = dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) byte0, (Object) "0000-00-00T00:00:00");
      assertNull(mockJapaneseDate0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DateCodec dateCodec0 = new DateCodec();
      Class<Long> class0 = Long.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("m<B?hvZCC|Lyy");
      defaultJSONParser0.getFieldTypeResolver();
      ZoneId.systemDefault();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      SerializeWriter serializeWriter0 = new SerializeWriter((Writer) null, (-2057), serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      System.setCurrentTimeMillis(2);
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      dateCodec0.write(jSONSerializer0, calendar0, defaultJSONParser0, class0, 2);
      assertEquals(0, DefaultJSONParser.NONE);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Long> class0 = Long.TYPE;
      Properties properties0 = new Properties();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("");
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) class0, (Object) "");
      JSONSerializer jSONSerializer0 = new JSONSerializer((SerializeWriter) null);
      String string0 = "0001-01-01T00:00:00+08:00";
      try { 
        MockURI.URI("", "0001-01-01T00:00:00+08:00", "0001-01-01T00:00:00+08:00", 2, "0001-01-01T00:00:00+08:00", "0001-01-01T00:00:00+08:00", "0001-01-01T00:00:00+08:00");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://0001-01-01T00:00:00+08:00@[0001-01-01T00:00:00+08:00]:20001-01-01T00:00:00+08:00?0001-01-01T00:00:00+08:00#0001-01-01T00:00:00+08:00
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONReaderScanner jSONReaderScanner0 = new JSONReaderScanner("MM/dd/yEyyy HH:mm:ss");
      ParserConfig parserConfig0 = ParserConfig.global;
      char[] charArray0 = new char[1];
      JSON.setDefaultTypeKey("/Date(%53iC8%@");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("MM/dd/yEyyy HH:mm:ss", parserConfig0);
      SerializerFeature serializerFeature0 = SerializerFeature.BrowserCompatible;
      SerializerFeature serializerFeature1 = SerializerFeature.WriteClassName;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      serializerFeatureArray0[0] = serializerFeature0;
      serializerFeatureArray0[1] = serializerFeature0;
      serializerFeatureArray0[2] = serializerFeature0;
      serializerFeatureArray0[3] = serializerFeature0;
      serializerFeatureArray0[4] = serializerFeature1;
      SerializeWriter serializeWriter0 = new SerializeWriter((Writer) null, 0, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      DateCodec dateCodec0 = DateCodec.instance;
      Float float0 = new Float((double) (byte) (-1));
      Class<Double> class0 = Double.TYPE;
      System.setCurrentTimeMillis(0);
      // Undeclared exception!
      try { 
        dateCodec0.write(jSONSerializer0, float0, defaultJSONParser0, class0, 1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.util.Date
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Long> class0 = Long.TYPE;
      JSONSerializer jSONSerializer0 = new JSONSerializer();
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("8|H 5H=F0v/wfN,");
      boolean boolean0 = jSONSerializer0.out.useSingleQuotes;
      boolean boolean1 = jSONSerializer0.out.browserSecure;
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) "/Dfte00-p0-00T00:00:00", (Object) "/Dfte00-p0-00T00:00:00");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/Dfte00-p0-00T00:00:00\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DateCodec dateCodec0 = new DateCodec();
      Class<Long> class0 = Long.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("&@p[Bo");
      defaultJSONParser0.setDateFormat("&@p[Bo");
      // Undeclared exception!
      try { 
        dateCodec0.cast(defaultJSONParser0, (Type) class0, (Object) "/Date(00-00-00T0:0000)/", (Object) "/Date(00-00-00T0:0000)/");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"00-00-00T0:0000\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DateCodec dateCodec0 = DateCodec.instance;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Class<Long> class0 = Long.TYPE;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("8|HRP58=F0vv/wWf|9],");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[0];
      SerializeWriter serializeWriter0 = new SerializeWriter((Writer) null, 43, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      DateCodec dateCodec1 = DateCodec.instance;
      JSON.setDefaultTypeKey("8|HRP58=F0vv/wWf|9],");
      Class<Double> class1 = Double.TYPE;
      Short short0 = new Short((short)41);
      Short.compare((short)370, (short)41);
      dateCodec1.write(jSONSerializer0, short0, (Object) null, class0, (-1803673632));
      DateCodec dateCodec2 = DateCodec.instance;
      dateCodec2.getFastMatchToken();
      System.setCurrentTimeMillis(3730752432285826863L);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateCodec dateCodec0 = DateCodec.instance;
      Class<Long> class0 = Long.TYPE;
      JSON.setDefaultTypeKey("m<B?hvZCC|Lyy");
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("ITnXze.kF7cvl");
      defaultJSONParser0.getFieldTypeResolver();
      ZoneId.systemDefault();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Object object0 = new Object();
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[5];
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      serializerFeatureArray0[0] = serializerFeature0;
      SerializerFeature serializerFeature1 = SerializerFeature.DisableCircularReferenceDetect;
      serializerFeatureArray0[1] = serializerFeature1;
      SerializerFeature serializerFeature2 = SerializerFeature.BrowserCompatible;
      serializerFeatureArray0[2] = serializerFeature2;
      serializerFeatureArray0[3] = serializerFeature2;
      SerializerFeature serializerFeature3 = SerializerFeature.UseISO8601DateFormat;
      serializerFeatureArray0[4] = serializerFeature3;
      SerializeWriter serializeWriter0 = new SerializeWriter((Writer) null, 1, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      TimeZone timeZone0 = TimeZone.getTimeZone("m<B?hvZCC|Lyy");
      MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      dateCodec0.write(jSONSerializer0, mockGregorianCalendar0, (Object) null, class0, 2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      dateCodec0.getFastMatchToken();
      DateCodec dateCodec1 = new DateCodec();
      int int0 = Calendar.UNDECIMBER;
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateCodec dateCodec0 = new DateCodec();
      Locale locale0 = Locale.PRC;
      JSON.defaultLocale = locale0;
      DateCodec dateCodec1 = DateCodec.instance;
      Class<Long> class0 = Long.TYPE;
      DefaultJSONParser defaultJSONParser0 = new DefaultJSONParser("ITnXze.kF7cvl");
      defaultJSONParser0.getFieldTypeResolver();
      ZoneId zoneId0 = ZoneId.systemDefault();
      zoneId0.toString();
      zoneId0.getRules();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Object object0 = new Object();
      SerializerFeature serializerFeature0 = SerializerFeature.NotWriteRootClassName;
      SerializerFeature[] serializerFeatureArray0 = new SerializerFeature[1];
      serializerFeatureArray0[0] = serializerFeature0;
      SerializeWriter serializeWriter0 = new SerializeWriter((Writer) null, 3818, serializerFeatureArray0);
      JSONSerializer jSONSerializer0 = new JSONSerializer(serializeWriter0);
      TimeZone timeZone0 = TimeZone.getTimeZone("ITnXze.kF7cvl");
      MockCalendar.getInstance(timeZone0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Long long0 = Long.valueOf((long) 0);
      serializeWriter0.writeNull(serializerFeature0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1937233729), 2, 2);
      mockGregorianCalendar1.add(1, (-2594));
      dateCodec1.write(jSONSerializer0, long0, mockGregorianCalendar1, class0, 0);
      dateCodec1.getFastMatchToken();
      Long.remainderUnsigned(2, (-4987L));
      DateCodec dateCodec2 = DateCodec.instance;
      // Undeclared exception!
      try { 
        dateCodec2.cast(defaultJSONParser0, (Type) class0, (Object) long0, (Object) jSONSerializer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // parse error
         //
         verifyException("com.alibaba.fastjson.serializer.DateCodec", e);
      }
  }
}
