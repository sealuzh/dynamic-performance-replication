/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 02:21:11 GMT 2018
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ClassCache;
import weka.core.ClassDiscovery;
import weka.core.FindWithCapabilities;
import weka.core.GlobalInfoJavadoc;
import weka.core.Instances;
import weka.core.Range;
import weka.core.SingleIndex;
import weka.core.TestInstances;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FindWithCapabilities_ESTest extends FindWithCapabilities_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@:qbrmpce";
      stringArray0[1] = "LD<bIAF}'3m:G%}";
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Packages = vector0;
      stringArray0[2] = "-not-numeric-class";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      findWithCapabilities0.setFilename("string-atts");
      findWithCapabilities0.getOptions();
      assertEquals("string-atts", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      capabilities0.enableAllClasses();
      capabilities0.enableAllClassDependencies();
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      boolean boolean0 = findWithCapabilities0.handles(capabilities_Capability1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.m_Superclass = "\nFound ";
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = findWithCapabilities0.getFilename();
      assertEquals("", string0);
      
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.enableAllAttributes();
      findWithCapabilities0.getHandler();
      String string1 = findWithCapabilities0.getRevision();
      assertEquals("8034", string1);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom((-4049));
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "V6";
      stringArray0[2] = "";
      stringArray0[3] = "SSD{&`e";
      stringArray0[4] = "-relational-class";
      stringArray0[5] = "ny3RR~6\"rwF)!n>)";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enable(capabilities_Capability2);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.DATE_CLASS;
      findWithCapabilities0.disable(capabilities_Capability3);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.listOptions();
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      Vector<String> vector0 = new Vector<String>();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.BINARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getMisses();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.m_Filename = "],<^TBmMxpxw";
      findWithCapabilities0.getFilename();
      findWithCapabilities0.getOptions();
      assertEquals("],<^TBmMxpxw", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.enable(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.enableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getMisses();
      findWithCapabilities1.listOptions();
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.find();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.getAttributeCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.enableNot(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getMisses();
      findWithCapabilities1.listOptions();
      capabilities0.createMessage("t<zEeh4/V>-$aq");
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      Vector<String> vector1 = findWithCapabilities0.m_Misses;
      vector1.add("WB^Z=D6");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      vector0.containsAll(vector1);
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setClassIndex("l@Ls3ZC@$+V&-1[o");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      System.setCurrentTimeMillis((-1117L));
      findWithCapabilities0.getMatches();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.disableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      findWithCapabilities1.getFilename();
      findWithCapabilities1.getOptions();
      findWithCapabilities1.getNotCapabilities();
      findWithCapabilities1.handles(capabilities_Capability0);
      Random.setNextRandom(45);
      // Undeclared exception!
      try { 
        findWithCapabilities1.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.createMessage("weka/core/Capabilities.props");
      findWithCapabilities0.setNotCapabilities(capabilities0);
      capabilities0.toString();
      findWithCapabilities0.setFilename("weka.core.FindWithCapabilities: weka/core/Capabilities.props");
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getFilename();
      findWithCapabilities0.setClassIndex("lZ");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getNotCapabilities();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.m_RelationalClassFormat;
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities1.m_Capabilities;
      findWithCapabilities0.setNotCapabilities(capabilities0);
      Capabilities capabilities1 = new Capabilities(findWithCapabilities0);
      capabilities1.toString();
      capabilities1.toString();
      findWithCapabilities1.setFilename("Usage: java weka.core.Environment <string> <string> ...");
      findWithCapabilities1.getCapabilities();
      findWithCapabilities1.getHandler();
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities1.getRevision();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.handles(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.getFilename();
      findWithCapabilities0.setClassIndex("-1");
      findWithCapabilities0.getOptions();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getRevision();
      findWithCapabilities0.getOptions();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.setNotCapabilities(capabilities0);
      assertFalse(capabilities0.hasDependencies());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      boolean boolean0 = ClassCache.VERBOSE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[2] = (byte) (-91);
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Vector<String> vector0 = findWithCapabilities0.m_Packages;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      boolean boolean1 = ClassCache.VERBOSE;
      System.setCurrentTimeMillis(1653L);
      findWithCapabilities0.getMatches();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getMisses();
      findWithCapabilities1.m_Handler = (CapabilitiesHandler) findWithCapabilities0;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      Vector<String> vector1 = findWithCapabilities0.m_Misses;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability1);
      findWithCapabilities1.getFilename();
      findWithCapabilities1.getRevision();
      findWithCapabilities1.getOptions();
      findWithCapabilities0.getNotCapabilities();
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldAllThrowIOExceptions();
      findWithCapabilities0.m_Filename = "";
      SingleIndex singleIndex0 = new SingleIndex("");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.enableAllAttributes();
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getRevision();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom((-4049));
      findWithCapabilities0.getMisses();
      findWithCapabilities0.getOptions();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "-BS_V0X?R8$_zot54d");
      findWithCapabilities0.m_Filename = "";
      SingleIndex singleIndex0 = new SingleIndex("");
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.setCapabilities(capabilities0);
      findWithCapabilities0.getMisses();
      findWithCapabilities0.setClassIndex("weka/core/Capabilities.props");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NUMERIC_CLASS;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      System.setCurrentTimeMillis(1144L);
      boolean boolean0 = capabilities0.m_Test;
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities1.disableNot(capabilities_Capability0);
      findWithCapabilities1.getMatches();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities1.getFilename();
      String string0 = findWithCapabilities1.getRevision();
      assertEquals("8034", string0);
      
      findWithCapabilities0.getOptions();
      Capabilities capabilities1 = findWithCapabilities1.getNotCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.handles(capabilities_Capability2);
      Random.setNextRandom(1516);
      Random.setNextRandom(1516);
      String string1 = Capabilities.PROPERTIES_FILE;
      findWithCapabilities0.setCapabilities(capabilities1);
      findWithCapabilities0.getNotCapabilities();
      Vector<String> vector1 = findWithCapabilities1.find();
      assertTrue(vector1.equals((Object)vector0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      findWithCapabilities0.getHandler();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability2);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability3);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getMisses();
      findWithCapabilities1.listOptions();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities1.setClassIndex("");
      findWithCapabilities0.getMisses();
      FindWithCapabilities.main(stringArray1);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-2891.1997), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      capabilities0.enableAllAttributes();
      capabilities0.createMessage("weka/core/Capabilities.props");
      findWithCapabilities0.setNotCapabilities(capabilities0);
      capabilities0.toString();
      findWithCapabilities0.setFilename("weka.core.FindWithCapabilities: weka/core/Capabilities.props");
      findWithCapabilities0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getFilename();
      findWithCapabilities0.setClassIndex("lZ");
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.getNotCapabilities();
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.setFilename("S6&");
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Hashtable<String, Vector<String>> hashtable0 = new Hashtable<String, Vector<String>>();
      ClassDiscovery.m_Cache = hashtable0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      findWithCapabilities1.enableNot(capabilities_Capability0);
      findWithCapabilities1.getMisses();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities2.listOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities3.setHandler(findWithCapabilities1);
      findWithCapabilities2.setClassIndex("");
      findWithCapabilities3.getMisses();
      String[] stringArray1 = new String[9];
      stringArray1[0] = "S6&";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "";
      stringArray1[6] = "-string-class";
      stringArray1[7] = "";
      stringArray1[8] = "";
      FindWithCapabilities.main(stringArray1);
      findWithCapabilities1.find();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance(209.61160135, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = null;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "m";
      Range range0 = new Range("m");
      Vector vector0 = range0.m_RangeStrings;
      findWithCapabilities0.m_Matches = vector0;
      stringArray0[1] = "\tMust handle string classes.";
      stringArray0[2] = "-date-class";
      stringArray0[3] = "MAfD.UTv]5=";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.isEnabled(capabilities_Capability0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "`/'.BmdQ";
      stringArray0[1] = "-not-no-class";
      stringArray0[2] = "Usqv i{~)Zp";
      stringArray0[3] = "@Xv6";
      stringArray0[4] = "Ycv0=XK]e,VdJ";
      findWithCapabilities0.m_Filename = "-1";
      stringArray0[5] = "4\"+yK-";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.m_Superclass = "\nFound ";
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities1.listOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.setHandler(findWithCapabilities1);
      String[] stringArray0 = findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities2.m_Packages;
      findWithCapabilities4.m_Matches = vector0;
      findWithCapabilities1.setHandler(findWithCapabilities4);
      try { 
        findWithCapabilities2.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.listOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.find();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities5.getFilename();
      findWithCapabilities6.getRevision();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      findWithCapabilities3.find();
      ClassCache classCache0 = null;
      try {
        classCache0 = new ClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities2);
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disable(capabilities_Capability1);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities0.getRevision();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities1.enable(capabilities_Capability0);
      findWithCapabilities0.disableNot(capabilities_Capability0);
      findWithCapabilities4.getMatches();
      findWithCapabilities1.getFilename();
      findWithCapabilities0.getRevision();
      findWithCapabilities4.enableNot(capabilities_Capability0);
      String string0 = ClassCache.DEFAULT_PACKAGE;
      findWithCapabilities5.getRevision();
      findWithCapabilities1.getOptions();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      findWithCapabilities4.getNotCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.BINARY_ATTRIBUTES;
      boolean boolean0 = findWithCapabilities4.isEnabled(capabilities_Capability2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Random.setNextRandom(1024);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-not-date-atts";
      stringArray0[1] = ")FUs,H[6souQqew";
      stringArray0[2] = "-noprolog";
      stringArray0[3] = ")j";
      stringArray0[4] = "";
      stringArray0[5] = "uC@s<`";
      stringArray0[6] = "rp";
      FindWithCapabilities.main(stringArray0);
      String string0 = findWithCapabilities0.getRevision();
      assertEquals("8034", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SingleIndex singleIndex0 = new SingleIndex("");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getFilename();
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getRevision();
      Random.setNextRandom((-4049));
      findWithCapabilities0.getMisses();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability1);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = new Vector<String>();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability1);
      FindWithCapabilities.main(stringArray0);
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = new Capabilities(findWithCapabilities0);
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      capabilities0.enableAllClasses();
      capabilities0.enableAllClassDependencies();
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.getFilename();
      findWithCapabilities1.getRevision();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities1.disableNot(capabilities_Capability1);
      findWithCapabilities1.getMatches();
      String[] stringArray1 = new String[2];
      stringArray1[0] = "weka/core/Capabilities.props";
      stringArray1[1] = "8034";
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      findWithCapabilities2.find();
      // Undeclared exception!
      try { 
        findWithCapabilities4.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.m_Handler = (CapabilitiesHandler) findWithCapabilities1;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities0.getRevision();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      stringArray0[3] = "-not-relational-class";
      stringArray0[4] = "8034";
      stringArray0[5] = "8034";
      stringArray0[6] = "p`A}iZ]0>@w";
      stringArray0[7] = "8034";
      stringArray0[8] = "8034";
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-binary-atts";
      stringArray0[1] = "jMh69y";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities0.disable(capabilities_Capability0);
      Vector<String> vector0 = findWithCapabilities0.getMisses();
      findWithCapabilities0.m_Packages = vector0;
      findWithCapabilities0.setClassIndex("uSYcykIvQU");
      findWithCapabilities0.getMatches();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "z%L_";
      stringArray0[1] = "uSYcykIvQU";
      stringArray0[2] = "-numeric-atts";
      stringArray0[3] = " are compatible\n\n";
      stringArray0[4] = "uSYcykIvQU";
      stringArray0[5] = "last";
      stringArray0[6] = "uSYcykIvQU";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities1.listOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "8cl9W";
      stringArray0[1] = "SW94";
      stringArray0[2] = "MissingValuesTest";
      stringArray0[3] = "&h%\":fSPS*&;O";
      stringArray0[4] = "-not-relational-atts";
      try { 
        findWithCapabilities3.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      findWithCapabilities0.m_Superclass = "mo";
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      String[] stringArray0 = findWithCapabilities0.getOptions();
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.setFilename("weka/core/Capabilities.props");
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.MISSING_CLASS_VALUES;
      findWithCapabilities2.enable(capabilities_Capability2);
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      String string0 = Capabilities.PROPERTIES_FILE;
      assertEquals("weka/core/Capabilities.props", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_GenericPropertiesCreator = true;
      findWithCapabilities0.find();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.isEnabledNot(capabilities_Capability0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "not-string-class";
      stringArray0[1] = "R|qHx7-O#5clBK";
      stringArray0[2] = "#D)_Er?5A!n_PrK'_.X";
      stringArray0[3] = "yW 6mvQu<~;y";
      findWithCapabilities0.m_Misses = vector0;
      stringArray0[4] = "-missing-class-values";
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities0.getNotCapabilities();
      findWithCapabilities0.setFilename("hK,flDu");
      assertEquals("hK,flDu", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.m_Superclass = "\nFound ";
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities1.listOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.setHandler(findWithCapabilities1);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities5);
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\nFound ");
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      findWithCapabilities3.getFilename();
      FindWithCapabilities findWithCapabilities9 = new FindWithCapabilities();
      findWithCapabilities7.getRevision();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      Capabilities capabilities0 = findWithCapabilities4.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      findWithCapabilities8.enable(capabilities_Capability0);
      capabilities0.m_AttributeTest = true;
      findWithCapabilities2.setNotCapabilities(capabilities0);
      boolean boolean0 = capabilities0.m_AttributeTest;
      findWithCapabilities2.getCapabilities();
      FindWithCapabilities findWithCapabilities10 = new FindWithCapabilities();
      findWithCapabilities10.setFilename("Unknown attribute type");
      FindWithCapabilities findWithCapabilities11 = new FindWithCapabilities();
      findWithCapabilities5.disable(capabilities_Capability0);
      // Undeclared exception!
      try { 
        ClassDiscovery.clearClassCache();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.instrumentation.InstrumentingClassLoader cannot be cast to java.net.URLClassLoader
         //
         verifyException("weka.core.ClassCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.m_Superclass = "\nFound ";
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities1.listOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.setHandler(findWithCapabilities1);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities1.find();
      findWithCapabilities4.m_Packages = vector0;
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities5);
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/users/apanichella/wekafiles");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "\nFound ");
      SingleIndex singleIndex0 = new SingleIndex("a7)h?cRoYL'=bi-");
      findWithCapabilities0.find();
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities9 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities10 = new FindWithCapabilities();
      findWithCapabilities2.getRevision();
      findWithCapabilities9.getOptions();
      String[] stringArray0 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray0);
      findWithCapabilities2.setFilename("\nFound ");
      FindWithCapabilities findWithCapabilities11 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.UNARY_CLASS;
      Capabilities capabilities0 = findWithCapabilities4.m_NotCapabilities;
      findWithCapabilities1.enable(capabilities_Capability1);
      findWithCapabilities1.getCapabilities();
      FindWithCapabilities findWithCapabilities12 = new FindWithCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities5.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      TestInstances testInstances0 = new TestInstances();
      SingleIndex singleIndex0 = findWithCapabilities0.m_ClassIndex;
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = testInstances0.generate("0EN>EE");
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)94;
      singleIndex0.m_SelectedIndex = (int) (byte)94;
      byteArray0[2] = (byte)102;
      Instances instances1 = new Instances(instances0, (-2));
      Capabilities capabilities0 = Capabilities.forInstances(instances1, true);
      findWithCapabilities0.m_Capabilities = capabilities0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.setFilename(".arff");
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.getFilename();
      Capabilities capabilities1 = findWithCapabilities0.m_Capabilities;
      Capabilities capabilities2 = findWithCapabilities0.m_Capabilities.getClassCapabilities();
      findWithCapabilities0.setNotCapabilities(capabilities2);
      findWithCapabilities0.getCapabilities();
      // Undeclared exception!
      try { 
        findWithCapabilities0.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      System.setCurrentTimeMillis(0L);
      Random.setNextRandom(547);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "c/JpPQi";
      stringArray0[1] = "-not-date-atts";
      stringArray0[2] = "@\"dEBedc";
      stringArray0[3] = "-no-class";
      stringArray0[4] = ",%z7q^";
      stringArray0[5] = "c/JpPQi";
      stringArray0[6] = " S1=bmh@^4.wNX";
      stringArray0[7] = "num-instances";
      stringArray0[8] = "EigO,.om";
      FindWithCapabilities.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      findWithCapabilities0.m_Superclass = "\nFound ";
      findWithCapabilities0.getMisses();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities1.getRevision();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\nFound ";
      stringArray0[1] = "p`A}iZ]0>@w";
      stringArray0[2] = "\nFound ";
      stringArray0[3] = "\nFound ";
      stringArray0[4] = "8034";
      stringArray0[5] = "-not-relational-class";
      stringArray0[6] = "-not-relational-class";
      try { 
        findWithCapabilities1.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.DATE_ATTRIBUTES;
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      Capabilities capabilities0 = new Capabilities((CapabilitiesHandler) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      findWithCapabilities0.m_NotCapabilities = capabilities0;
      findWithCapabilities0.m_Superclass = "mo";
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.MISSING_VALUES;
      findWithCapabilities0.isEnabled(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      findWithCapabilities0.isEnabledNot(capabilities_Capability1);
      Capabilities.Capability capabilities_Capability2 = Capabilities.Capability.NOMINAL_CLASS;
      capabilities0.disableAllClasses();
      findWithCapabilities0.enable(capabilities_Capability2);
      Capabilities.Capability capabilities_Capability3 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disable(capabilities_Capability3);
      findWithCapabilities0.getHandler();
      findWithCapabilities0.setNotCapabilities(capabilities0);
      findWithCapabilities0.getOptions();
      assertEquals("", findWithCapabilities0.getFilename());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_ATTRIBUTES;
      findWithCapabilities0.m_Superclass = "\nFound ";
      findWithCapabilities0.enableNot(capabilities_Capability0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.listOptions();
      FindWithCapabilities findWithCapabilities2 = new FindWithCapabilities();
      findWithCapabilities1.setHandler(findWithCapabilities0);
      findWithCapabilities1.listOptions();
      FindWithCapabilities findWithCapabilities3 = new FindWithCapabilities();
      findWithCapabilities2.setHandler(findWithCapabilities1);
      FindWithCapabilities findWithCapabilities4 = new FindWithCapabilities();
      String[] stringArray0 = findWithCapabilities1.getOptions();
      findWithCapabilities4.getRevision();
      String[] stringArray1 = findWithCapabilities0.getOptions();
      String[] stringArray2 = findWithCapabilities0.getOptions();
      FindWithCapabilities.main(stringArray1);
      FindWithCapabilities.main(stringArray2);
      FindWithCapabilities findWithCapabilities5 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities6 = new FindWithCapabilities();
      findWithCapabilities0.setFilename("Yv(tZ");
      FindWithCapabilities findWithCapabilities7 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities8 = new FindWithCapabilities();
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities.main(stringArray2);
      FindWithCapabilities findWithCapabilities9 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities10 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities11 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities12 = new FindWithCapabilities();
      findWithCapabilities12.enable(capabilities_Capability0);
      // Undeclared exception!
      try { 
        findWithCapabilities9.getClassIndex();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No index set
         //
         verifyException("weka.core.SingleIndex", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.EMPTY_NOMINAL_CLASS;
      findWithCapabilities0.m_GenericPropertiesCreator = false;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities.Capability capabilities_Capability1 = Capabilities.Capability.RELATIONAL_CLASS;
      findWithCapabilities0.enable(capabilities_Capability1);
      findWithCapabilities0.getOptions();
      String string0 = "Ol";
      findWithCapabilities0.setClassIndex("Ol");
      CapabilitiesHandler capabilitiesHandler0 = findWithCapabilities0.m_Handler;
      findWithCapabilities0.m_Handler = null;
      // Undeclared exception!
      try { 
        findWithCapabilities0.setHandler((CapabilitiesHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      String[] stringArray0 = new String[7];
      stringArray0[0] = " -mH#`%XerQUG";
      stringArray0[1] = "The instance: ";
      stringArray0[2] = "x79N9s";
      stringArray0[3] = "67m}x4B>@/WGK>";
      stringArray0[4] = "v1q4OBFZz@'4l";
      stringArray0[5] = "\tDoesn't need a class.";
      stringArray0[6] = "-binary-class";
      try { 
        findWithCapabilities0.setOptions(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[0];
      FindWithCapabilities.main(stringArray0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SingleIndex singleIndex0 = new SingleIndex("");
      findWithCapabilities0.m_ClassIndex = singleIndex0;
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.UNARY_CLASS;
      findWithCapabilities0.enableNot(capabilities_Capability0);
      Capabilities capabilities0 = findWithCapabilities0.m_NotCapabilities;
      capabilities0.toSource("", 1337);
      findWithCapabilities0.setCapabilities(capabilities0);
      findWithCapabilities0.getCapabilities();
      findWithCapabilities0.getHandler();
      findWithCapabilities0.getRevision();
      Random.setNextRandom((-4049));
      findWithCapabilities0.getMisses();
      findWithCapabilities0.disableNot(capabilities_Capability0);
      String[] stringArray1 = findWithCapabilities0.getOptions();
      findWithCapabilities0.enableNot(capabilities_Capability0);
      try { 
        findWithCapabilities0.setOptions(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A superclass has to be specified!
         //
         verifyException("weka.core.FindWithCapabilities", e);
      }
  }
}
