/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 06 07:56:24 GMT 2019
 */

package us.codecraft.webmagic;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.ForkJoinTask;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.Page;
import us.codecraft.webmagic.Request;
import us.codecraft.webmagic.Spider;
import us.codecraft.webmagic.SpiderListener;
import us.codecraft.webmagic.downloader.Downloader;
import us.codecraft.webmagic.downloader.PhantomJSDownloader;
import us.codecraft.webmagic.monitor.SpiderMonitor;
import us.codecraft.webmagic.pipeline.CollectorPipeline;
import us.codecraft.webmagic.pipeline.ConsolePipeline;
import us.codecraft.webmagic.pipeline.FilePipeline;
import us.codecraft.webmagic.pipeline.JsonFilePipeline;
import us.codecraft.webmagic.pipeline.MultiPagePipeline;
import us.codecraft.webmagic.pipeline.Pipeline;
import us.codecraft.webmagic.pipeline.ResultItemsCollectorPipeline;
import us.codecraft.webmagic.processor.PageProcessor;
import us.codecraft.webmagic.processor.SimplePageProcessor;
import us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler;
import us.codecraft.webmagic.scheduler.FileCacheQueueScheduler;
import us.codecraft.webmagic.scheduler.PriorityScheduler;
import us.codecraft.webmagic.scheduler.QueueScheduler;
import us.codecraft.webmagic.scheduler.Scheduler;
import us.codecraft.webmagic.scheduler.component.DuplicateRemover;
import us.codecraft.webmagic.scheduler.component.HashSetDuplicateRemover;
import us.codecraft.webmagic.selector.AndSelector;
import us.codecraft.webmagic.selector.Json;
import us.codecraft.webmagic.selector.JsonPathSelector;
import us.codecraft.webmagic.selector.OrSelector;
import us.codecraft.webmagic.selector.ReplaceSelector;
import us.codecraft.webmagic.selector.Selector;
import us.codecraft.webmagic.selector.SmartContentSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Spider_ESTest extends Spider_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pro*cessrequest");
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      int int0 = 5;
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(5);
      spider0.downloader(phantomJSDownloader1);
      spider0.getCollectorPipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      spider1.getAll((Collection<String>) linkedHashSet0);
      spider0.getAll((Collection<String>) linkedBlockingDeque0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("DvQJMo$xxkU(T");
      HashSetDuplicateRemover hashSetDuplicateRemover0 = new HashSetDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(hashSetDuplicateRemover0);
      Spider spider2 = spider1.scheduler(duplicateRemovedScheduler0);
      // Undeclared exception!
      try { 
        spider2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "us.codecraft.webmagic.selector.HtmlNode";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.selector.HtmlNode");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getStartTime();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests((Page) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Spider.Status.fromValue(39);
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(39);
      Spider spider2 = spider0.downloader(phantomJSDownloader1);
      spider2.getCollectorPipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<String> list0 = spider1.getAll((Collection<String>) linkedBlockingDeque0);
      spider1.getAll((Collection<String>) list0);
      spider2.getThreadAlive();
      // Undeclared exception!
      try { 
        phantomJSDownloader0.download("invalid regex", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("UbNV%nAOTtpqlc");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.addUrl((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Spider.Status.fromValue(39);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("DNvTzz(U(wwi");
      Spider.create(simplePageProcessor0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider1.stop();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "-0r@zly4 <,R.}iZ}LO");
      // Undeclared exception!
      try { 
        spider0.get("");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("parse document error ");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.clearPipeline();
      Spider spider1 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        spider1.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "$";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider0.site = null;
      Spider spider1 = spider0.setUUID("$");
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(3, 159, 3, timeUnit0, linkedTransferQueue0);
      // Undeclared exception!
      try { 
        spider1.thread((ExecutorService) threadPoolExecutor0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("x7Pg]Q@^FRa");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("u`5'$Zp", ")Q");
      Spider spider1 = spider0.pipeline((Pipeline) null);
      spider1.downloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider1.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pro*cessdrequest");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread(1489);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      
      Spider spider2 = spider0.setPipelines((List<Pipeline>) null);
      assertTrue(spider2.isSpawnUrl());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider1.isSpawnUrl();
      String string0 = "y} tB9%)z~u!}e";
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("y} tB9%)z~u!}e", "Pfikvj6=~Q~#AVZ");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Pfikvj6=~Q~#AVZ";
      spider2.setUUID("Pfikvj6=~Q~#AVZ");
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request();
      // Undeclared exception!
      try { 
        spider0.onSuccess(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Spider spider2 = spider1.setExitWhenComplete(false);
      QueueScheduler queueScheduler1 = new QueueScheduler();
      queueScheduler1.poll(spider1);
      Request request0 = new Request();
      queueScheduler1.poll(spider2);
      Spider spider3 = spider0.scheduler(queueScheduler1);
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(5);
      Spider spider4 = spider3.setExecutorService(forkJoinPool0);
      Request[] requestArray0 = new Request[1];
      requestArray0[0] = null;
      // Undeclared exception!
      try { 
        spider4.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider1 = Spider.create(simplePageProcessor0);
      Spider spider2 = spider0.clearPipeline();
      spider2.executorService = (ExecutorService) forkJoinPool0;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("process request ", "y} tB9%)z~u!}e");
      spider1.setSpawnUrl(false);
      spider1.startRequest((List<Request>) null);
      spider2.setEmptySleepTime(8);
      assertTrue(spider2.isSpawnUrl());
      
      Spider spider3 = spider1.downloader(phantomJSDownloader0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider3.addPipeline(multiPagePipeline0);
      assertFalse(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cookies=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`+eK0~0", ", cookies=");
      spider0.downloader(phantomJSDownloader0);
      spider0.getCollectorPipeline();
      Spider spider1 = spider0.clearPipeline();
      spider1.setSpawnUrl(true);
      spider0.clearPipeline();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      spider1.setExecutorService(forkJoinPool0);
      Spider spider2 = spider0.startRequest((List<Request>) null);
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Spider spider2 = spider1.setUUID("+;a3#LR}!JO{Xz~");
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1025, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      scheduledThreadPoolExecutor0.getQueue();
      Spider spider3 = spider2.setExecutorService(scheduledThreadPoolExecutor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider4 = spider3.addPipeline(multiPagePipeline0);
      spider4.clearPipeline();
      MultiPagePipeline multiPagePipeline1 = new MultiPagePipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("|vQ{VVeW]u(KI4]", (String) null);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider5 = spider0.setPipelines(linkedList0);
      // Undeclared exception!
      try { 
        spider5.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Spider.Status spider_Status0 = Spider.Status.Running;
      int int0 = spider_Status0.getValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Spider.Status.fromValue(39);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("2!A]O`E");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = new Spider(simplePageProcessor1);
      Spider spider1 = spider0.clearPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      Spider spider2 = spider1.setUUID("");
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pro*cessdrequest");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      // Undeclared exception!
      try { 
        Spider.create((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Spider spider0 = null;
      try {
        spider0 = new Spider((PageProcessor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = Spider.create(simplePageProcessor0);
      spider1.pageProcessor = (PageProcessor) simplePageProcessor0;
      Spider spider2 = spider0.setExitWhenComplete(true);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("process request ", "y} tB9%)z~u!}e");
      spider2.spawnUrl = false;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "y} tB9%)z~u!}e";
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("y} tB9%)z~u!}e");
      Page page0 = new Page();
      Page page1 = page0.setSkip(true);
      Page page2 = page1.setSkip(true);
      // Undeclared exception!
      try { 
        spider2.extractAndAddRequests(page2, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Spider.Status.fromValue((-6851));
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Page page0 = Page.fail();
      int int0 = 1043;
      // Undeclared exception!
      try { 
        page0.addTargetRequests((List<String>) null, 2923L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      Request request0 = new Request();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("$", "_cycle_tried_times");
      phantomJSDownloader0.setRetryNum(1832);
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      ForkJoinTask.getPool();
      int int0 = 3698;
      Spider spider3 = spider0.thread((ExecutorService) null, 3698);
      spider3.getCollectorPipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider2.getAll((Collection<String>) linkedBlockingDeque0);
      Spider spider4 = spider2.setExecutorService((ExecutorService) null);
      spider4.getAll((Collection<String>) linkedBlockingDeque0);
      PhantomJSDownloader phantomJSDownloader1 = null;
      try {
        phantomJSDownloader1 = new PhantomJSDownloader("N-\"r~QzAeThI 3,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "process request");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.addPipeline(jsonFilePipeline0);
      Spider spider2 = spider1.setUUID("process request");
      Spider spider3 = spider2.setSpawnUrl(false);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>(linkedTransferQueue0);
      Spider spider4 = spider3.startUrls(linkedList0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "process request";
      stringArray0[2] = "";
      stringArray0[3] = "process request";
      // Undeclared exception!
      try { 
        spider4.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      Spider spider1 = spider0.setExecutorService((ExecutorService) null);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.setScheduler(queueScheduler0);
      // Undeclared exception!
      try { 
        spider2.addRequest((Request[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pro*cessdrequest");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "_cycle_tried_times";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("get a canddate url }");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("7dTyv|l");
      // Undeclared exception!
      try { 
        spider0.sleep((-714));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "get a candidate url {}";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("get a candidate url {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("get a candidate url {}");
      // Undeclared exception!
      try { 
        spider1.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("get a canddate url }");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getScheduler();
      // Undeclared exception!
      try { 
        Spider.Status.valueOf("get a canddate url }");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant us.codecraft.webmagic.Spider.Status.get a canddate url }
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Spider.Status.fromValue(39);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(39);
      Spider spider2 = spider0.downloader(phantomJSDownloader1);
      spider2.getCollectorPipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<String> list0 = spider1.getAll((Collection<String>) linkedBlockingDeque0);
      spider1.getAll((Collection<String>) list0);
      Spider spider3 = spider2.startRequest((List<Request>) null);
      spider3.startRequests = null;
      Spider.Status spider_Status0 = Spider.Status.fromValue(39);
      Spider spider4 = spider1.addPipeline(multiPagePipeline0);
      spider4.getStartTime();
      Request[] requestArray0 = new Request[4];
      Request request0 = new Request();
      requestArray0[0] = request0;
      Request request1 = request0.setPriority(63L);
      requestArray0[1] = request1;
      Request request2 = request0.putExtra("", spider_Status0);
      requestArray0[2] = request2;
      Request request3 = request0.addHeader("_cycle_tried_times", "jsrKaz_rFD");
      requestArray0[3] = request3;
      // Undeclared exception!
      try { 
        spider3.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cookies=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`+eK0~0", ", cookies=");
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider0.downloader(phantomJSDownloader0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      Spider spider3 = spider2.addPipeline(collectorPipeline0);
      spider3.setSpawnUrl(true);
      spider3.setScheduler(priorityScheduler0);
      Request[] requestArray0 = new Request[6];
      spider2.getUUID();
      requestArray0[0] = null;
      requestArray0[1] = null;
      requestArray0[2] = null;
      requestArray0[3] = null;
      spider3.sleep(5);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "pro*cessdrequest";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pro*cessdrequest");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      PriorityBlockingQueue<String> priorityBlockingQueue0 = new PriorityBlockingQueue<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) priorityBlockingQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cookies=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`+eK0~0", ", cookies=");
      spider0.setExitWhenComplete(false);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider0.getCollectorPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      // Undeclared exception!
      try { 
        spider1.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", url=");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.checkIfRunning();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cookies=");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setExecutorService((ExecutorService) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(", cookies=");
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = spider0.isSpawnUrl();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "$";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider1.exitWhenComplete = false;
      queueScheduler0.poll(spider0);
      Request request0 = new Request();
      queueScheduler0.poll(spider1);
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      Spider spider2 = spider1.clearPipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("<");
      Spider spider1 = spider0.addPipeline(filePipeline0);
      Spider spider2 = spider0.setUUID("<");
      spider0.clearPipeline();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      spider2.thread((ExecutorService) forkJoinPool0, 690);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("<", "<");
      spider1.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "<";
      stringArray0[2] = "VDM5l_\"jr";
      stringArray0[3] = "VDM5l_\"jr";
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      Request request0 = new Request();
      queueScheduler0.poll(spider1);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("$", "_cycle_tried_times");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(30000);
      Spider spider2 = spider0.downloader(phantomJSDownloader1);
      spider2.getCollectorPipeline();
      Spider spider3 = spider0.clearPipeline();
      spider3.setSpawnUrl(false);
      // Undeclared exception!
      try { 
        spider3.sleep((-997));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Spider.Status.fromValue(39);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(39);
      Spider spider2 = spider0.downloader(phantomJSDownloader1);
      spider2.getCollectorPipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<String> list0 = spider1.getAll((Collection<String>) linkedBlockingDeque0);
      spider1.getAll((Collection<String>) list0);
      PhantomJSDownloader phantomJSDownloader2 = null;
      try {
        phantomJSDownloader2 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("et a canddae url }");
      Spider spider0 = Spider.create(simplePageProcessor0);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("k");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "k";
      stringArray0[1] = "k";
      stringArray0[2] = "k";
      stringArray0[3] = "k";
      stringArray0[4] = "k";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fal!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.sleep(347);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Request[] requestArray0 = new Request[3];
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Request request0 = new Request();
      requestArray0[1] = request0;
      FilePipeline filePipeline0 = new FilePipeline();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("7[p0(<afe;");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.getSite();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cookies=");
      Spider spider0 = new Spider(simplePageProcessor0);
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      MockThread.getDefaultUncaughtExceptionHandler();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(4, forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, false);
      Spider spider1 = spider0.thread((ExecutorService) forkJoinPool0, 4);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler(", cookies=");
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = spider1.isSpawnUrl();
      assertTrue(boolean0);
      
      spider0.setUUID("");
      String string0 = spider0.getUUID();
      assertNotNull(string0);
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      ForkJoinTask.getPool();
      spider3.setExecutorService((ExecutorService) null);
      spider3.logger = null;
      spider2.executorService = (ExecutorService) null;
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      spider0.startRequests = (List<Request>) linkedList0;
      ReplaceSelector replaceSelector0 = new ReplaceSelector("process request ", "");
      // Undeclared exception!
      try { 
        replaceSelector0.selectList("process request ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.ReplaceSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = ", cookies=";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cookies=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`+eK0~0", ", cookies=");
      spider0.setExitWhenComplete(false);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      Spider spider2 = spider1.addPipeline(collectorPipeline0);
      Spider spider3 = spider2.setSpawnUrl(true);
      Spider spider4 = spider3.startRequest((List<Request>) null);
      Spider spider5 = spider2.setScheduler(priorityScheduler0);
      spider1.getUUID();
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      spider4.thread((ExecutorService) forkJoinPool0, 792);
      spider5.pipeline(collectorPipeline0);
      Spider spider6 = Spider.create(simplePageProcessor0);
      spider6.setExitWhenComplete(true);
      FilePipeline filePipeline0 = new FilePipeline();
      spider0.addPipeline(filePipeline0);
      JsonPathSelector jsonPathSelector0 = null;
      try {
        jsonPathSelector0 = new JsonPathSelector(", cookies=");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/jayway/jsonpath/Predicate
         //
         verifyException("us.codecraft.webmagic.selector.JsonPathSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "get a candidate rl {}";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("get a candidate rl {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      spider0.setUUID("get a candidate rl {}");
      spider0.setEmptySleepTime(0);
      Page page0 = new Page();
      Page page1 = page0.setRawText("get a candidate rl {}");
      Page page2 = page1.setSkip(true);
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("get a canddate url }");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("get a canddate url }");
      Spider spider1 = spider0.clearPipeline();
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cookies=");
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor1);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`+eK0~0", "`+eK0~0");
      Spider spider1 = spider0.setExitWhenComplete(false);
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      Spider spider3 = spider2.addPipeline(collectorPipeline0);
      Spider spider4 = spider1.setSpawnUrl(false);
      spider2.startRequest((List<Request>) null);
      spider1.setScheduler(queueScheduler0);
      spider0.getUUID();
      Spider spider5 = spider4.addPipeline(collectorPipeline0);
      spider3.getStartTime();
      spider2.getStartTime();
      FilePipeline filePipeline0 = new FilePipeline();
      spider5.pipeline(filePipeline0);
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cookies=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`+eK0~0", ", cookies=");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      spider1.getCollectorPipeline();
      Spider spider2 = spider1.scheduler(priorityScheduler0);
      Spider spider3 = spider2.clearPipeline();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      spider0.setSpawnUrl(true);
      spider0.sleep(5);
      spider3.clearPipeline();
      Spider.Status spider_Status0 = Spider.Status.fromValue(2);
      assertEquals(Spider.Status.Stopped, spider_Status0);
      
      Spider spider4 = spider1.setDownloader(phantomJSDownloader0);
      Page page0 = Page.fail();
      Page page1 = page0.setSkip(false);
      spider4.extractAndAddRequests(page1, false);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider1 = spider0.pipeline(jsonFilePipeline0);
      List<Pipeline> list0 = null;
      Spider spider2 = spider1.setPipelines((List<Pipeline>) null);
      Spider spider3 = spider2.setExitWhenComplete(true);
      Spider spider4 = spider3.thread(41);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider5 = spider4.startRequest(linkedList0);
      spider5.getUUID();
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        spider1.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      ForkJoinTask.getPool();
      spider3.setExecutorService((ExecutorService) null);
      spider3.logger = null;
      Spider.create(simplePageProcessor0);
      Spider spider4 = spider0.setExitWhenComplete(false);
      spider4.isSpawnUrl();
      Spider spider5 = spider1.setExecutorService((ExecutorService) null);
      spider5.isSpawnUrl();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("?+wo!E[6L");
      spider5.addPipeline(jsonFilePipeline0);
      assertFalse(spider1.isExitWhenComplete());
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cookies=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`+eK0~0", ", cookies=");
      spider0.setExitWhenComplete(false);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      Spider spider2 = spider1.addPipeline(collectorPipeline0);
      Spider spider3 = spider2.setSpawnUrl(true);
      spider3.startRequest((List<Request>) null);
      Spider spider4 = spider2.setScheduler(priorityScheduler0);
      Request[] requestArray0 = new Request[6];
      spider1.getUUID();
      requestArray0[0] = null;
      requestArray0[1] = null;
      requestArray0[2] = null;
      requestArray0[3] = null;
      requestArray0[4] = null;
      requestArray0[5] = null;
      spider0.addPipeline(collectorPipeline0);
      spider3.getStartTime();
      Json json0 = new Json((String) null);
      Class<String> class0 = String.class;
      json0.toList(class0);
      // Undeclared exception!
      try { 
        spider4.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider.create(simplePageProcessor0);
      Json json0 = new Json("");
      Class<Pipeline> class0 = Pipeline.class;
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = new Page();
      spider0.extractAndAddRequests(page0, false);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Request request0 = new Request((String) null);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("-");
      Spider spider0 = new Spider(simplePageProcessor0);
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      Spider spider1 = spider0.startRequest(list0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider2 = spider1.pipeline(multiPagePipeline0);
      Spider spider3 = spider2.downloader((Downloader) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "_cycle_tried_times";
      stringArray0[1] = "-";
      stringArray0[2] = null;
      // Undeclared exception!
      try { 
        spider3.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      Spider spider1 = Spider.create(simplePageProcessor0);
      Spider spider2 = spider0.setExitWhenComplete(false);
      spider2.isSpawnUrl();
      spider2.executorService = (ExecutorService) null;
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("process request ", "y} tB9%)z~u!}e");
      spider2.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "y} tB9%)z~u!}e";
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("y} tB9%)z~u!}e");
      // Undeclared exception!
      try { 
        spider1.get("gC");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("parse document error ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider1.pipeline(multiPagePipeline0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("get a canddate url }");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread((ExecutorService) null, 30000);
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(boolean0);
      
      long long0 = spider1.getPageCount();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Spider.Status.fromValue(39);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.clearPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider0.pipeline(multiPagePipeline0);
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(39, 1479, 1479, timeUnit0, linkedTransferQueue0);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) threadPoolExecutor0, (-770));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Qj%p'");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.getTotalRequestsCount(spider0);
      queueScheduler0.poll(spider0);
      Request request0 = new Request();
      queueScheduler0.poll(spider0);
      Spider spider1 = spider0.clearPipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider1.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pDA{0^sw 3Z^3`");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider.Status spider_Status0 = spider0.getStatus();
      assertEquals(Spider.Status.Init, spider_Status0);
      
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pro*cessdrequest");
      Spider spider0 = Spider.create(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.scheduler(priorityScheduler0);
      String[] stringArray0 = new String[0];
      Spider spider1 = spider0.addUrl(stringArray0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pro*cessdrequest");
      Spider spider0 = Spider.create(simplePageProcessor0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      PriorityBlockingQueue<Runnable> priorityBlockingQueue0 = new PriorityBlockingQueue<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(3, 3, 3, timeUnit0, priorityBlockingQueue0, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      Spider spider1 = spider0.thread((ExecutorService) threadPoolExecutor0, 3);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("VDM5l_\"jr", "VDM5l_\"jr");
      spider0.downloader(phantomJSDownloader0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "pro*cessdrequest";
      // Undeclared exception!
      try { 
        spider1.test(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.downloader.PhantomJSDownloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request("");
      Spider spider1 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      requestArray0[0] = request0;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("us.codecraft.webmagic.selector.Json");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      Spider spider1 = spider0.setScheduler(duplicateRemovedScheduler0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      QueueScheduler queueScheduler1 = new QueueScheduler();
      queueScheduler1.poll(spider1);
      Request request0 = new Request();
      queueScheduler0.poll(spider0);
      Request[] requestArray0 = new Request[2];
      requestArray0[0] = request0;
      requestArray0[1] = null;
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider1.isSpawnUrl();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("?+wo!E[6L");
      boolean boolean0 = spider0.isExitWhenComplete();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      Spider spider1 = spider0.addRequest(requestArray0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("h[>w~7FKdtzY%");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setSpawnUrl(false);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("X5zG[Aquwi0CpJ4A_Cn");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      Spider spider1 = spider0.scheduler(duplicateRemovedScheduler0);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cookies=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`+eK0~0", ", cookies=");
      spider0.downloader(phantomJSDownloader0);
      spider0.getCollectorPipeline();
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.setSpawnUrl(true);
      spider2.sleep(39);
      // Undeclared exception!
      try { 
        spider2.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<");
      Spider spider0 = new Spider(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("<");
      fileCacheQueueScheduler0.getDuplicateRemover();
      Spider spider1 = spider0.scheduler(fileCacheQueueScheduler0);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.FileCacheQueueScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("process request ");
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("process request ");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      spider0.setScheduler(duplicateRemovedScheduler0);
      Spider spider1 = spider0.setSpawnUrl(false);
      Request[] requestArray0 = new Request[0];
      spider1.addRequest(requestArray0);
      spider1.clearPipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        spider1.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "us.codecraft.webmagic.Spider$1";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.Spider$1");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cookies=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`+eK0~0", ", cookies=");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      Spider spider3 = spider2.addPipeline(collectorPipeline0);
      Spider spider4 = spider3.clearPipeline();
      Spider spider5 = spider4.setSpawnUrl(true);
      Spider spider6 = spider5.startRequest((List<Request>) null);
      assertTrue(spider4.isSpawnUrl());
      assertEquals(0L, spider6.getPageCount());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cookies=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`+eK0~0", ", cookies=");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider2 = spider1.addPipeline(collectorPipeline0);
      Spider spider3 = spider2.clearPipeline();
      spider0.stop();
      Spider spider4 = spider3.setSpawnUrl(true);
      spider4.startRequest((List<Request>) null);
      spider3.setEmptySleepTime(5);
      Spider spider5 = spider3.addPipeline(collectorPipeline0);
      assertEquals(Spider.Status.Init, spider5.getStatus());
      assertEquals(0L, spider5.getPageCount());
      assertTrue(spider3.isSpawnUrl());
      
      String string0 = spider0.getUUID();
      assertNull(string0);
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("o*\";o<?cVR[_`$5,");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider1 = spider0.addPipeline(consolePipeline0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider2 = spider1.startRequest(linkedList0);
      spider2.getSpiderListeners();
      spider1.setEmptySleepTime(30000);
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) synchronousQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      ForkJoinTask.getPool();
      Spider.create(simplePageProcessor0);
      spider1.isSpawnUrl();
      ForkJoinPool.ForkJoinWorkerThreadFactory forkJoinPool_ForkJoinWorkerThreadFactory0 = ForkJoinPool.defaultForkJoinWorkerThreadFactory;
      ForkJoinPool forkJoinPool0 = new ForkJoinPool(73, forkJoinPool_ForkJoinWorkerThreadFactory0, (Thread.UncaughtExceptionHandler) null, false);
      spider1.start();
      //  // Unstable assertion: assertEquals(Spider.Status.Running, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider2 = spider1.pipeline(multiPagePipeline0);
      spider2.scheduler((Scheduler) null);
      AndSelector andSelector0 = null;
      try {
        andSelector0 = new AndSelector((Selector[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.AndSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ig&$P:A");
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = 415;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(415);
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 415);
      String[] stringArray0 = new String[4];
      spider0.runAsync();
      stringArray0[0] = "Ig&$P:A";
      stringArray0[1] = "Ig&$P:A";
      stringArray0[2] = "Ig&$P:A";
      stringArray0[3] = "Ig&$P:A";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("<");
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "pro*cessdrequest";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pro*cessdrequest");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.thread(1484);
      // Undeclared exception!
      try { 
        spider0.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 39;
      Spider.Status.fromValue(39);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(39);
      Spider spider2 = spider0.downloader(phantomJSDownloader1);
      spider2.getCollectorPipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider1.getAll((Collection<String>) linkedBlockingDeque0);
      PhantomJSDownloader phantomJSDownloader2 = null;
      try {
        phantomJSDownloader2 = new PhantomJSDownloader("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((-417));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      ForkJoinTask.getPool();
      spider3.setExecutorService((ExecutorService) null);
      spider3.logger = null;
      Spider.create(simplePageProcessor0);
      Spider spider4 = spider0.setExitWhenComplete(false);
      spider4.isSpawnUrl();
      Spider spider5 = spider1.setExecutorService((ExecutorService) null);
      spider5.isSpawnUrl();
      spider1.startRequest((List<Request>) null);
      assertFalse(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("process request ");
      spider0.setSpawnUrl(false);
      spider0.sleep(2);
      spider0.getCollectorPipeline();
      // Undeclared exception!
      try { 
        spider0.run();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request[] requestArray0 = new Request[1];
      // Undeclared exception!
      try { 
        spider0.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      Request request0 = new Request();
      queueScheduler0.poll(spider1);
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("9", "KC");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      phantomJSDownloader0.setThread(1264);
      spider2.getStatus();
      Spider spider3 = spider0.setUUID("_cycle_tried_times");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "_cycle_tried_times";
      stringArray0[1] = "_cycle_tried_times";
      // Undeclared exception!
      try { 
        spider3.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      ForkJoinTask.getPool();
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setExitWhenComplete(true);
      Spider spider1 = spider0.setUUID("~*Rj|buhht,esw/xNj1");
      Request request0 = new Request();
      Request request1 = request0.setPriority(845L);
      Request request2 = request1.addCookie("=-0", "VRmN'P'fI]'v1X");
      // Undeclared exception!
      try { 
        spider1.onSuccess(request2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("get a canddate url }");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("get a canddate url }");
      spider0.getCollectorPipeline();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "_509f]_kkL!I";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("_509f]_kkL!I");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.pipeline((Pipeline) null);
      int int0 = (-98);
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-98), threadPoolExecutor_DiscardOldestPolicy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pro*cessdrequest");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Page page0 = new Page();
      // Undeclared exception!
      try { 
        spider0.extractAndAddRequests(page0, true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$");
      Spider spider0 = new Spider(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider1 = spider0.setUUID("$");
      spider1.stop();
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(3, 159, 3, timeUnit0, linkedTransferQueue0);
      Spider spider2 = spider1.pipeline(consolePipeline0);
      Spider spider3 = spider2.setExitWhenComplete(true);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("$");
      Spider.create(simplePageProcessor1);
      FilePipeline filePipeline0 = new FilePipeline();
      spider2.addPipeline(filePipeline0);
      spider3.setUUID("$");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("MyTR 6~P", "$");
      spider1.setDownloader(phantomJSDownloader0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.start();
      boolean boolean0 = spider0.isSpawnUrl();
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Spider.Status.fromValue(39);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("wLqZLF!;");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "wLqZLF!;";
      stringArray0[1] = "wLqZLF!;";
      stringArray0[2] = "";
      Request request0 = new Request("&ZjN(J}WFu~JMjH0:");
      Request request1 = request0.setMethod("");
      Request request2 = request0.setPriority(2609L);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Request request3 = request2.setExtras(hashMap0);
      Request request4 = request1.setUrl((String) null);
      request4.addHeader("", (String) null);
      Request request5 = request0.setPriority(0L);
      request5.setBinaryContent(true);
      Request request6 = new Request("_cycle_tried_times");
      // Undeclared exception!
      try { 
        spider0.onSuccess(request3);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      spider0.setExitWhenComplete(false);
      assertFalse(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cookies=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`+eK0~0", ", cookies=");
      spider0.downloader(phantomJSDownloader0);
      spider0.getCollectorPipeline();
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(30000);
      Spider spider1 = spider0.downloader(phantomJSDownloader1);
      boolean boolean0 = true;
      spider1.setExitWhenComplete(true);
      int int0 = 74;
      int int1 = 2756;
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      TimeUnit timeUnit1 = TimeUnit.MINUTES;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = null;
      try {
        scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((-419));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      Request request0 = new Request();
      queueScheduler0.poll(spider1);
      Request[] requestArray0 = new Request[0];
      Spider spider2 = spider0.addRequest(requestArray0);
      spider1.clearPipeline();
      FilePipeline filePipeline0 = new FilePipeline();
      spider2.addPipeline(filePipeline0);
      String string0 = "Xj{|Rn ";
      SpiderMonitor spiderMonitor0 = SpiderMonitor.instance();
      SpiderMonitor.MonitorSpiderListener spiderMonitor_MonitorSpiderListener0 = spiderMonitor0.new MonitorSpiderListener();
      spiderMonitor_MonitorSpiderListener0.getErrorUrls();
      Page page0 = Page.fail();
      Page page1 = page0.setSkip(true);
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Spider.Status.fromValue(39);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(39);
      Spider spider2 = spider0.downloader(phantomJSDownloader1);
      spider2.getCollectorPipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<String> list0 = spider1.getAll((Collection<String>) linkedBlockingDeque0);
      spider1.getAll((Collection<String>) list0);
      spider2.close();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider2.addPipeline(resultItemsCollectorPipeline0);
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
      
      spider2.checkIfRunning();
      assertEquals(Spider.Status.Stopped, spider2.getStatus());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pro*cessdrequest");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider1 = spider0.pipeline(resultItemsCollectorPipeline0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      ForkJoinTask.getPool();
      spider3.setExecutorService((ExecutorService) null);
      spider3.logger = null;
      Spider.create(simplePageProcessor0);
      Spider spider4 = spider0.setExitWhenComplete(false);
      FilePipeline filePipeline0 = new FilePipeline();
      Spider spider5 = spider4.addPipeline(filePipeline0);
      Spider spider6 = spider5.setUUID("O=[G");
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      Spider spider7 = spider6.setExitWhenComplete(false);
      Spider spider8 = spider7.setUUID("process request ");
      assertFalse(spider0.isExitWhenComplete());
      assertFalse(spider8.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pro*)essOrequest");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.isSpawnUrl();
      Spider spider1 = spider0.setSpawnUrl(true);
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("get a candidate url {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setUUID("get a candidate url {}");
      Page page0 = new Page();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        spider0.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cookies=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`+eK0~0", ", cookies=");
      spider0.downloader(phantomJSDownloader0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider1 = spider0.clearPipeline();
      spider1.setSpawnUrl(true);
      spider1.addPipeline(collectorPipeline0);
      spider0.getStartTime();
      Json json0 = new Json(", rawText='");
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        json0.toList(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // com/alibaba/fastjson/JSON
         //
         verifyException("us.codecraft.webmagic.selector.Json", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<";
      Request request0 = new Request("<");
      spider0.setUUID("_cycle_tried_times");
      spider0.getSite();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pro*cessdrequest");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("[P;y");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("get a candidate url {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setUUID("get a candidate url {}");
      // Undeclared exception!
      try { 
        spider0.get("get a candidate url {}");
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      ForkJoinTask.getPool();
      Spider spider2 = Spider.create(simplePageProcessor0);
      Spider spider3 = spider1.setSpawnUrl(false);
      spider3.thread(1);
      spider1.clearPipeline();
      spider1.setExecutorService((ExecutorService) null);
      assertFalse(spider1.isSpawnUrl());
      
      spider2.startRequest((List<Request>) null);
      spider2.getScheduler();
      assertTrue(spider2.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      Spider spider3 = spider2.setSpiderListeners((List<SpiderListener>) null);
      ForkJoinTask.getPool();
      spider3.setExecutorService((ExecutorService) null);
      spider3.logger = null;
      Spider.create(simplePageProcessor0);
      Spider spider4 = spider0.setExitWhenComplete(false);
      spider4.isSpawnUrl();
      queueScheduler0.poll(spider4);
      Spider spider5 = spider2.thread(200);
      spider2.clearPipeline();
      spider3.setExecutorService((ExecutorService) null);
      Spider spider6 = spider5.startRequest((List<Request>) null);
      assertFalse(spider1.isExitWhenComplete());
      assertFalse(spider6.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.getTotalRequestsCount(spider0);
      queueScheduler0.poll(spider0);
      Request request0 = new Request();
      queueScheduler0.poll(spider1);
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      spider1.clearPipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider1.onError(request0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("threadNum should be more than one!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("UbNV%nAOTtpqlc");
      Spider spider0 = new Spider(simplePageProcessor0);
      SimplePageProcessor simplePageProcessor1 = new SimplePageProcessor("Uy_v=XV/2D");
      Spider spider1 = new Spider(simplePageProcessor1);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("NX:#5eJ6<0lEs[l5", "Uy_v=XV/2D");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      CollectorPipeline collectorPipeline0 = spider2.getCollectorPipeline();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider0.addPipeline(resultItemsCollectorPipeline0);
      spider1.clearPipeline();
      spider2.stop();
      spider2.setSpawnUrl(true);
      spider2.startRequest((List<Request>) null);
      spider1.setEmptySleepTime(5);
      List<SpiderListener> list0 = spider0.getSpiderListeners();
      assertNull(list0);
      
      Spider spider3 = spider1.setSpiderListeners((List<SpiderListener>) null);
      spider3.addPipeline(collectorPipeline0);
      assertEquals(0L, spider2.getPageCount());
      assertTrue(spider2.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider2.getStatus());
      assertTrue(spider3.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cookies=");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.thread((ExecutorService) null, 4);
      spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader(")>>^d HL&gh3%%}Y", ", cookies=");
      spider1.getThreadAlive();
      spider1.getScheduler();
      System.setCurrentTimeMillis(0);
      Request request0 = new Request();
      Request request1 = request0.setPriority(1L);
      // Undeclared exception!
      try { 
        spider0.onError(request1);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider1 = spider0.pipeline(collectorPipeline0);
      Spider spider2 = spider1.setUUID("");
      spider2.setSpawnUrl(false);
      spider0.sleep(2);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.thread((ExecutorService) null, (-597));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.clearPipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("I kY6`=Fj(~Z", "");
      Spider spider1 = spider0.clearPipeline();
      Request request0 = new Request("");
      Request request1 = request0.setPriority((-1853L));
      Request request2 = request1.putExtra("I kY6`=Fj(~Z", request0);
      Request request3 = request2.addCookie("I kY6`=Fj(~Z", "page status code error, page {} , code: {}");
      // Undeclared exception!
      try { 
        spider1.onSuccess(request3);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pro*cessdrequest");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.setSpiderListeners((List<SpiderListener>) null);
      // Undeclared exception!
      try { 
        spider0.onError((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("Ig&$P:A");
      Spider spider0 = Spider.create(simplePageProcessor0);
      int int0 = 415;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(415);
      Spider spider1 = spider0.thread((ExecutorService) scheduledThreadPoolExecutor0, 415);
      String[] stringArray0 = new String[4];
      spider0.runAsync();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      spider1.scheduler(queueScheduler0);
      stringArray0[0] = "Ig&$P:A";
      stringArray0[1] = "Ig&$P:A";
      stringArray0[3] = "Ig&$P:A";
      // Undeclared exception!
      try { 
        spider1.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("get a candidate url {}");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("get a candidate url {}");
      spider1.stop();
      spider1.isSpawnUrl();
      // Undeclared exception!
      try { 
        spider0.get((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      spider0.setUUID((String) null);
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      FilePipeline filePipeline0 = new FilePipeline();
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("parse document error ");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      spider1.pipeline(multiPagePipeline0);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("q&k-k C1");
      Spider spider2 = spider1.scheduler(fileCacheQueueScheduler0);
      spider2.setScheduler(fileCacheQueueScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.setScheduler(queueScheduler0);
      LinkedList<Pipeline> linkedList0 = new LinkedList<Pipeline>();
      Spider spider2 = spider1.setPipelines(linkedList0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      // Undeclared exception!
      try { 
        spider2.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      Spider.create(simplePageProcessor0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      spider2.isSpawnUrl();
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline(", skip=");
      boolean boolean0 = spider2.isExitWhenComplete();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "A~zvd\"wuqr74%8";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("A~zvd\"wuqr74%8");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider1 = spider0.setSpiderListeners(linkedList0);
      int int0 = 2756;
      spider0.thread(2756);
      spider0.getPageCount();
      int int1 = 1103;
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider2 = spider0.pipeline(consolePipeline0);
      Spider spider3 = spider2.pipeline(collectorPipeline0);
      // Undeclared exception!
      try { 
        spider3.initComponent();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = Spider.create(simplePageProcessor0);
      LinkedTransferQueue<String> linkedTransferQueue0 = new LinkedTransferQueue<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedTransferQueue0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider1.isSpawnUrl();
      Spider spider2 = spider1.thread((ExecutorService) null, 3);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("$VALUES");
      spider2.pipeline(jsonFilePipeline0);
      assertFalse(spider2.isExitWhenComplete());
      
      Spider spider3 = spider2.setExitWhenComplete(true);
      FilePipeline filePipeline0 = new FilePipeline();
      FilePipeline filePipeline1 = new FilePipeline("");
      spider2.addPipeline(filePipeline1);
      Spider spider4 = spider3.setExitWhenComplete(true);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader((String) null, (String) null);
      spider4.setDownloader(phantomJSDownloader0);
      int int0 = spider1.getThreadAlive();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("A~zvd\"wuqr74%8");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider0.setSpiderListeners(linkedList0);
      spider0.setSpawnUrl(true);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("nTwpoO8]lP+W");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      Request request0 = new Request();
      queueScheduler0.poll(spider1);
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      Spider spider2 = spider1.clearPipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque0.add("$");
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.getThreadAlive();
      // Undeclared exception!
      try { 
        spider0.test((String[]) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", priority=");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.thread((ExecutorService) null, 34);
      boolean boolean0 = spider1.isSpawnUrl();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop fail!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      spider0.getScheduler();
      Selector[] selectorArray0 = new Selector[0];
      OrSelector orSelector0 = new OrSelector(selectorArray0);
      List<String> list0 = orSelector0.selectList(" stop fail!");
      Spider spider1 = spider0.startUrls(list0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cookies=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`+eK0~0", ", cookies=");
      spider0.setExitWhenComplete(false);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      Spider spider2 = spider1.addPipeline(collectorPipeline0);
      Spider spider3 = spider2.setSpawnUrl(true);
      Spider spider4 = spider2.setScheduler(priorityScheduler0);
      Request[] requestArray0 = new Request[6];
      spider1.getUUID();
      requestArray0[0] = null;
      requestArray0[1] = null;
      requestArray0[2] = null;
      requestArray0[3] = null;
      requestArray0[4] = null;
      requestArray0[5] = null;
      spider0.addPipeline(collectorPipeline0);
      spider3.getStartTime();
      Json json0 = new Json((String) null);
      Class<String> class0 = String.class;
      json0.toList(class0);
      // Undeclared exception!
      try { 
        spider4.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", bytes=");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.setUUID("x#H2!HaiB:!M");
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(39);
      Spider spider2 = spider0.downloader(phantomJSDownloader1);
      spider2.getCollectorPipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<String> list0 = spider1.getAll((Collection<String>) linkedBlockingDeque0);
      spider1.getAll((Collection<String>) list0);
      spider2.checkIfRunning();
      spider1.getThreadAlive();
      spider1.initComponent();
      assertEquals(Spider.Status.Stopped, spider1.getStatus());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)58;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("K");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      Spider spider2 = spider1.setUUID("K");
      Page page0 = Page.fail();
      List<Request> list0 = page0.getTargetRequests();
      spider2.startRequest(list0);
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      OrSelector orSelector0 = new OrSelector(linkedList0);
      String string0 = "";
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pro*cessdrequest");
      Spider spider0 = Spider.create(simplePageProcessor0);
      boolean boolean0 = spider0.isSpawnUrl();
      assertEquals(0L, spider0.getPageCount());
      assertTrue(spider0.isExitWhenComplete());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      ForkJoinTask.getPool();
      Spider spider1 = Spider.create(simplePageProcessor0);
      Spider spider2 = spider0.setExitWhenComplete(false);
      spider2.isSpawnUrl();
      assertFalse(spider0.isExitWhenComplete());
      
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline("?+wo!E[6L");
      boolean boolean0 = spider1.isExitWhenComplete();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("YRyIV.i!vaWRQ");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("T#<AHItAR9f*tT\"i", (String) null);
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      spider0.addPipeline(collectorPipeline0);
      Spider spider2 = spider1.clearPipeline();
      spider2.stop();
      assertTrue(spider2.isSpawnUrl());
      
      Spider spider3 = spider2.setSpawnUrl(false);
      spider3.pageProcessor = (PageProcessor) simplePageProcessor0;
      Spider.Status.fromValue(5);
      spider1.setDownloader(phantomJSDownloader0);
      assertFalse(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Spider spider0 = new Spider(simplePageProcessor0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      byte byte0 = (byte)1;
      byteArray0[1] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Spider spider1 = spider0.setUUID("");
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider2 = spider1.scheduler(queueScheduler0);
      Spider spider3 = spider2.setExitWhenComplete(false);
      String[] stringArray0 = new String[0];
      Spider spider4 = spider3.addUrl(stringArray0);
      spider4.clearPipeline();
      // Undeclared exception!
      try { 
        spider3.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<");
      Spider spider0 = new Spider(simplePageProcessor0);
      Request request0 = new Request();
      Spider spider1 = Spider.create(simplePageProcessor0);
      Request[] requestArray0 = new Request[0];
      spider1.addRequest(requestArray0);
      spider0.clearPipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      boolean boolean0 = spider0.isSpawnUrl();
      assertTrue(boolean0);
      
      spider0.getScheduler();
      spider0.setEmptySleepTime((-3266));
      assertTrue(spider0.isExitWhenComplete());
      assertEquals(0L, spider0.getPageCount());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = " stop success!";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(" stop success!");
      Spider spider0 = Spider.create(simplePageProcessor0);
      LinkedList<Request> linkedList0 = new LinkedList<Request>();
      Spider spider1 = spider0.startRequest(linkedList0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider1.startRequests = (List<Request>) linkedList0;
      Spider spider2 = spider1.setScheduler(priorityScheduler0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("Thread interrupted when sleep");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      DuplicateRemovedScheduler duplicateRemovedScheduler0 = fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      spider2.scheduler = (Scheduler) duplicateRemovedScheduler0;
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      // Undeclared exception!
      try { 
        spider1.getAll((Collection<String>) linkedBlockingDeque0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      String[] stringArray0 = new String[0];
      Spider spider2 = spider1.addUrl(stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Spider spider3 = spider2.startUrls(linkedList0);
      spider3.thread(875);
      Page page0 = Page.fail();
      Page page1 = page0.setSkip(true);
      String string1 = "waitNewUrl - interrupted, error {}";
      Page page2 = page1.setRawText("waitNewUrl - interrupted, error {}");
      // Undeclared exception!
      try { 
        simplePageProcessor0.process(page2);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/jsoup/nodes/Node
         //
         verifyException("us.codecraft.webmagic.Page", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = Spider.create(simplePageProcessor0);
      Spider spider1 = spider0.startRequest((List<Request>) null);
      Spider spider2 = spider1.setScheduler((Scheduler) null);
      Spider spider3 = spider2.scheduler((Scheduler) null);
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        spider3.startUrls((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cookies=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`+eK0~0", ", cookies=");
      Spider spider1 = spider0.setExitWhenComplete(false);
      spider1.downloader = (Downloader) phantomJSDownloader0;
      Spider spider2 = spider0.downloader(phantomJSDownloader0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      Spider spider3 = spider2.setSpiderListeners(linkedList0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider1);
      // Undeclared exception!
      try { 
        spider3.onSuccess((Request) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cookies=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`+eK0~0", ", cookies=");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      Spider spider3 = spider2.addPipeline(collectorPipeline0);
      spider3.clearPipeline();
      Request request0 = new Request("");
      Request request1 = request0.setMethod((String) null);
      Request request2 = request1.setPriority(2609L);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Request request3 = request2.setExtras(hashMap0);
      Request request4 = request3.setUrl("`+eK0~0");
      Request request5 = request4.addHeader("GXm1R3hn-I8@]I]", "q=x<\"1Z?I,60{!bz");
      request5.setBinaryContent(true);
      Request request6 = new Request("");
      // Undeclared exception!
      try { 
        spider1.onSuccess(request6);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cookies=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.scheduler(priorityScheduler0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`+eK0~0", ", cookies=");
      Spider spider2 = spider1.downloader(phantomJSDownloader0);
      CollectorPipeline collectorPipeline0 = spider1.getCollectorPipeline();
      Spider spider3 = spider2.addPipeline(collectorPipeline0);
      spider3.clearPipeline();
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      OrSelector orSelector0 = new OrSelector(linkedList0);
      List<String> list0 = orSelector0.selectList("`+eK0~0");
      Json json0 = new Json(list0);
      Class<SpiderListener> class0 = SpiderListener.class;
      Json json1 = new Json(list0);
      json1.toList(class0);
      spider2.setSpiderListeners((List<SpiderListener>) null);
      spider0.setUUID(", cookies=");
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("`+eK0~0", ", cookies=");
      spider2.setDownloader(phantomJSDownloader0);
      assertTrue(spider2.isSpawnUrl());
      assertTrue(spider2.isExitWhenComplete());
      assertEquals(0L, spider2.getPageCount());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Spider.Status.fromValue(39);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      Spider spider2 = spider0.pipeline(multiPagePipeline0);
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      spider1.addPipeline(multiPagePipeline0);
      Spider spider3 = Spider.create(simplePageProcessor0);
      Spider spider4 = spider3.clearPipeline();
      spider4.addPipeline(resultItemsCollectorPipeline0);
      Spider spider5 = spider4.setSpawnUrl(false);
      spider3.setExitWhenComplete(false);
      spider2.setSpawnUrl(false);
      Spider spider6 = spider5.startRequest((List<Request>) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        spider6.test(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/http/protocol/HttpContext
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Spider.Status.fromValue(39);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("wLqZLF!;");
      Spider spider0 = new Spider(simplePageProcessor0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "wLqZLF!;";
      stringArray0[1] = "wLqZLF!;";
      stringArray0[2] = "";
      stringArray0[3] = "wLqZLF!;";
      stringArray0[4] = "wLqZLF!;";
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/lang3/StringUtils
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("get a canddate url }");
      Spider spider0 = Spider.create(simplePageProcessor0);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("get a canddate url }");
      Spider spider1 = spider0.setScheduler(fileCacheQueueScheduler0);
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isSpawnUrl());
      assertTrue(spider1.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "<";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("<");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("<");
      Spider spider1 = spider0.addPipeline(filePipeline0);
      ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool();
      Spider spider2 = spider1.setExecutorService(forkJoinPool0);
      Request[] requestArray0 = new Request[0];
      Spider spider3 = spider2.addRequest(requestArray0);
      spider3.scheduler = (Scheduler) priorityScheduler0;
      spider3.setDownloader((Downloader) null);
      FileCacheQueueScheduler fileCacheQueueScheduler0 = new FileCacheQueueScheduler("%pT||dpXh0I;g>");
      DuplicateRemover duplicateRemover0 = fileCacheQueueScheduler0.getDuplicateRemover();
      fileCacheQueueScheduler0.setDuplicateRemover(duplicateRemover0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider2);
      Request request0 = new Request();
      Spider spider4 = spider3.addRequest(requestArray0);
      spider4.clearPipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      SmartContentSelector smartContentSelector0 = new SmartContentSelector();
      // Undeclared exception!
      try { 
        smartContentSelector0.selectList("<");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.selector.SmartContentSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cookies=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`+eK0~0", ", cookies=");
      Spider spider1 = spider0.setExitWhenComplete(false);
      Pipeline pipeline0 = null;
      spider1.addPipeline((Pipeline) null);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = null;
      try {
        threadPoolExecutor0 = new ThreadPoolExecutor((-2380), (-2380), 5, timeUnit0, linkedTransferQueue0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ThreadPoolExecutor", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Spider.Status.fromValue(39);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HH5,^H`cdRv[/>wsH.");
      Spider spider0 = new Spider(simplePageProcessor0);
      // Undeclared exception!
      try { 
        spider0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("pro*cessdrequest");
      Spider spider0 = Spider.create(simplePageProcessor0);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        spider0.addUrl(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.ConcurrentHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      Request request0 = new Request();
      spider1.getCollectorPipeline();
      ResultItemsCollectorPipeline resultItemsCollectorPipeline0 = new ResultItemsCollectorPipeline();
      Spider spider2 = spider0.addPipeline(resultItemsCollectorPipeline0);
      spider0.clearPipeline();
      spider0.stop();
      spider1.setSpawnUrl(true);
      Spider spider3 = spider1.startRequest((List<Request>) null);
      spider2.setEmptySleepTime((-487));
      Spider spider4 = spider3.addPipeline(resultItemsCollectorPipeline0);
      assertTrue(spider1.isSpawnUrl());
      assertEquals(0L, spider4.getPageCount());
      assertEquals(Spider.Status.Init, spider4.getStatus());
      assertTrue(spider4.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("x7Pg]Q@^FRa");
      Spider spider0 = Spider.create(simplePageProcessor0);
      spider0.stop();
      assertTrue(spider0.isSpawnUrl());
      assertEquals(0L, spider0.getPageCount());
      assertEquals(Spider.Status.Init, spider0.getStatus());
      assertTrue(spider0.isExitWhenComplete());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      priorityScheduler0.getTotalRequestsCount(spider0);
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      Request request0 = new Request();
      queueScheduler0.poll(spider1);
      QueueScheduler queueScheduler1 = new QueueScheduler();
      Spider spider2 = spider0.setScheduler(queueScheduler1);
      // Undeclared exception!
      try { 
        spider2.getAll((Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.utils.UrlUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = spider0.clearPipeline();
      MultiPagePipeline multiPagePipeline0 = new MultiPagePipeline();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "");
      PhantomJSDownloader phantomJSDownloader1 = phantomJSDownloader0.setRetryNum(39);
      Spider spider2 = spider0.downloader(phantomJSDownloader1);
      spider2.getCollectorPipeline();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      List<String> list0 = spider1.getAll((Collection<String>) linkedBlockingDeque0);
      spider1.getAll((Collection<String>) list0);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      assertFalse(linkedBlockingDeque1.contains(""));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("$");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      spider0.setScheduler(priorityScheduler0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      Request request0 = new Request();
      request0.setMethod("$");
      Request[] requestArray0 = new Request[0];
      spider0.addRequest(requestArray0);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("9", "KC");
      spider0.setExitWhenComplete(true);
      LinkedList<Selector> linkedList0 = new LinkedList<Selector>();
      AndSelector andSelector0 = new AndSelector(linkedList0);
      List<String> list0 = andSelector0.selectList("aV||CenRyC% ");
      Spider spider1 = spider0.startUrls(list0);
      // Undeclared exception!
      try { 
        spider1.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("");
      Spider spider0 = new Spider(simplePageProcessor0);
      Spider spider1 = new Spider(simplePageProcessor0);
      Request request0 = new Request("");
      Request request1 = request0.setPriority((-1L));
      Request request2 = request1.setBinaryContent(true);
      request1.getExtras();
      request2.setExtras((Map<String, Object>) null);
      Request request3 = request2.setCharset("");
      Request request4 = request3.setMethod("_cycle_tried_times");
      // Undeclared exception!
      try { 
        spider1.onError(request4);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/apache/commons/collections/CollectionUtils
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cookies=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`+eK0~0", ", cookies=");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider2 = spider1.addPipeline(collectorPipeline0);
      Spider spider3 = spider2.clearPipeline();
      spider0.stop();
      Spider spider4 = spider3.setSpawnUrl(true);
      spider4.startRequest((List<Request>) null);
      spider3.setEmptySleepTime(5);
      spider3.addPipeline(collectorPipeline0);
      Spider spider5 = spider4.thread((ExecutorService) null, 5);
      Spider spider6 = spider5.clearPipeline();
      spider6.getScheduler();
      assertEquals(Spider.Status.Init, spider6.getStatus());
      assertEquals(0L, spider6.getPageCount());
      assertTrue(spider6.isExitWhenComplete());
      assertTrue(spider3.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor(", cookies=");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`+eK0~0", ", cookies=");
      Spider spider1 = spider0.downloader(phantomJSDownloader0);
      CollectorPipeline collectorPipeline0 = spider0.getCollectorPipeline();
      Spider spider2 = spider1.addPipeline(collectorPipeline0);
      spider2.clearPipeline();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(5);
      spider1.thread((ExecutorService) scheduledThreadPoolExecutor0, 5);
      JsonFilePipeline jsonFilePipeline0 = new JsonFilePipeline();
      Spider spider3 = spider2.pipeline(jsonFilePipeline0);
      spider3.setExitWhenComplete(false);
      FilePipeline filePipeline0 = new FilePipeline();
      spider2.addPipeline(jsonFilePipeline0);
      spider0.setExitWhenComplete(false);
      spider1.start();
      PhantomJSDownloader phantomJSDownloader1 = new PhantomJSDownloader("us.codecraft.webmagic.scheduler.QueueScheduler", "us.codecraft.webmagic.scheduler.QueueScheduler");
      spider1.setDownloader(phantomJSDownloader1);
      spider1.getThreadAlive();
      Spider.Status.values();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "A~zvd\"wuqr74%8";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("A~zvd\"wuqr74%8");
      Spider spider0 = new Spider(simplePageProcessor0);
      LinkedList<SpiderListener> linkedList0 = new LinkedList<SpiderListener>();
      spider0.setSpiderListeners(linkedList0);
      int int0 = (-358);
      // Undeclared exception!
      try { 
        spider0.thread((-358));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // threadNum should be more than one!
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Spider.Status.fromValue(39);
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("HH5,^H`cdRv[/>wsH.");
      Spider spider0 = new Spider(simplePageProcessor0);
      FilePipeline filePipeline0 = new FilePipeline("HH5,^H`cdRv[/>wsH.");
      Spider spider1 = spider0.addPipeline(filePipeline0);
      spider1.pipeline(filePipeline0);
      Spider spider2 = spider1.clearPipeline();
      ForkJoinPool forkJoinPool0 = new ForkJoinPool();
      Spider spider3 = spider2.thread((ExecutorService) forkJoinPool0, 3);
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("", "VDM5l_\"jr");
      Spider spider4 = spider3.downloader(phantomJSDownloader0);
      // Undeclared exception!
      try { 
        spider4.test((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.Spider", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("=$");
      Spider spider0 = new Spider(simplePageProcessor0);
      ConsolePipeline consolePipeline0 = new ConsolePipeline();
      Spider spider1 = spider0.setUUID("=$");
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      LinkedTransferQueue<Runnable> linkedTransferQueue0 = new LinkedTransferQueue<Runnable>();
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(0, 3, 10L, timeUnit0, linkedTransferQueue0);
      spider0.stop();
      spider0.setSpawnUrl(true);
      Spider spider2 = spider1.startRequest((List<Request>) null);
      spider2.setEmptySleepTime(2);
      spider0.addPipeline(consolePipeline0);
      String string0 = spider1.getUUID();
      assertEquals(Spider.Status.Init, spider1.getStatus());
      assertTrue(spider1.isSpawnUrl());
      assertNotNull(string0);
      assertTrue(spider1.isExitWhenComplete());
      assertEquals(0L, spider1.getPageCount());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.selector.HtmlNode");
      Spider spider0 = new Spider(simplePageProcessor0);
      assertEquals(Spider.Status.Init, spider0.getStatus());
      
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      PhantomJSDownloader phantomJSDownloader0 = new PhantomJSDownloader("`+eK0~0", "us.codecraft.webmagic.selector.HtmlNode");
      spider0.downloader(phantomJSDownloader0);
      Spider spider1 = spider0.clearPipeline();
      assertEquals(0L, spider1.getPageCount());
      assertTrue(spider1.isExitWhenComplete());
      assertTrue(spider1.isSpawnUrl());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Spider.Status.fromValue(39);
      SimplePageProcessor simplePageProcessor0 = null;
      try {
        simplePageProcessor0 = new SimplePageProcessor((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "process request ";
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("process request ");
      Spider spider0 = Spider.create(simplePageProcessor0);
      QueueScheduler queueScheduler0 = new QueueScheduler();
      Spider spider1 = spider0.scheduler(queueScheduler0);
      Spider spider2 = spider1.setExitWhenComplete(false);
      spider2.setSpiderListeners((List<SpiderListener>) null);
      spider2.setSpawnUrl(true);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader("process request ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("us.codecraft.webmagic.selector.Html");
      Spider spider0 = new Spider(simplePageProcessor0);
      spider0.setScheduler((Scheduler) null);
      PhantomJSDownloader phantomJSDownloader0 = null;
      try {
        phantomJSDownloader0 = new PhantomJSDownloader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      SimplePageProcessor simplePageProcessor0 = new SimplePageProcessor("k");
      Spider spider0 = new Spider(simplePageProcessor0);
      PriorityScheduler priorityScheduler0 = new PriorityScheduler();
      Spider spider1 = spider0.setScheduler(priorityScheduler0);
      Request[] requestArray0 = new Request[3];
      QueueScheduler queueScheduler0 = new QueueScheduler();
      queueScheduler0.poll(spider0);
      requestArray0[0] = null;
      Request request0 = new Request();
      requestArray0[1] = request0;
      queueScheduler0.poll(spider0);
      requestArray0[2] = null;
      // Undeclared exception!
      try { 
        spider1.addRequest(requestArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("us.codecraft.webmagic.scheduler.DuplicateRemovedScheduler", e);
      }
  }
}
