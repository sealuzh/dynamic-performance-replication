/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 23 11:57:19 GMT 2019
 */

package us.codecraft.webmagic.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import us.codecraft.webmagic.utils.DoubleKeyMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoubleKeyMap_ESTest extends DoubleKeyMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<HashMap<String, Object>, Object, Object> doubleKeyMap0 = new DoubleKeyMap<HashMap<String, Object>, Object, Object>(class0);
      HashMap<Integer, Map<String, Object>> hashMap0 = new HashMap<Integer, Map<String, Object>>();
      DoubleKeyMap<Integer, String, Object> doubleKeyMap1 = new DoubleKeyMap<Integer, String, Object>(hashMap0);
      Integer integer0 = new Integer(0);
      doubleKeyMap1.put(integer0, ":-BdNyO", (Object) doubleKeyMap0);
      Map<String, Object> map0 = doubleKeyMap1.remove(integer0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoubleKeyMap<String, String, HashMap<Integer, Integer>> doubleKeyMap0 = new DoubleKeyMap<String, String, HashMap<Integer, Integer>>();
      Map<Object, Map<Integer, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Integer, Object>(map0);
      DoubleKeyMap<Integer, Object, Object> doubleKeyMap2 = new DoubleKeyMap<Integer, Object, Object>();
      Integer integer0 = new Integer(1);
      Object object0 = doubleKeyMap2.remove(integer0, (Object) doubleKeyMap1);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
      Object object0 = doubleKeyMap0.remove((Object) null, (String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>();
      Object object0 = new Object();
      Integer integer0 = new Integer(2697);
      String string0 = doubleKeyMap0.remove(object0, integer0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Object>();
      Object object0 = new Object();
      Map<Integer, Object> map0 = doubleKeyMap0.remove(object0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
      doubleKeyMap0.put((Object) null, (String) null, (Object) class0);
      Class class1 = (Class)doubleKeyMap0.remove((Object) null, (String) null);
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      Map<Object, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<Object, Object, Object> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Object>(map0, class0);
      Object object0 = new Object();
      Object object1 = doubleKeyMap1.put(object0, object0, (Object) doubleKeyMap0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      HashMap<String, Map<Object, Object>> hashMap0 = new HashMap<String, Map<Object, Object>>();
      DoubleKeyMap<String, Object, Object> doubleKeyMap0 = new DoubleKeyMap<String, Object, Object>(hashMap0);
      Object object1 = doubleKeyMap0.get((String) null, object0);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>(class0);
      Integer integer0 = doubleKeyMap0.get((Integer) null, (String) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DoubleKeyMap<Map<Integer, String>, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<Map<Integer, String>, Object, Integer>();
      HashMap<Object, Map<Object, Map<Integer, String>>> hashMap0 = new HashMap<Object, Map<Object, Map<Integer, String>>>();
      DoubleKeyMap<Object, Object, Map<Integer, String>> doubleKeyMap1 = new DoubleKeyMap<Object, Object, Map<Integer, String>>(hashMap0);
      Integer integer0 = new Integer((-1274));
      Map<Integer, String> map0 = doubleKeyMap1.get((Object) doubleKeyMap0, (Object) integer0);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      HashMap<Object, Map<Integer, Integer>> hashMap0 = new HashMap<Object, Map<Integer, Integer>>();
      DoubleKeyMap<Object, Integer, Integer> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, Integer>(hashMap0, class0);
      Map<Integer, Integer> map0 = doubleKeyMap0.get((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>();
      DoubleKeyMap<String, String, HashMap<Integer, Integer>> doubleKeyMap1 = new DoubleKeyMap<String, String, HashMap<Integer, Integer>>();
      Map<Object, Map<Integer, Object>> map0 = doubleKeyMap1.newMap();
      DoubleKeyMap<Object, Integer, Object> doubleKeyMap2 = new DoubleKeyMap<Object, Integer, Object>(map0);
      Map<Integer, Object> map1 = doubleKeyMap2.get((Object) doubleKeyMap0);
      assertNull(map1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, Map<Object, Integer>> hashMap0 = new HashMap<String, Map<Object, Integer>>();
      Class<Map> class0 = Map.class;
      DoubleKeyMap<String, Object, Integer> doubleKeyMap0 = new DoubleKeyMap<String, Object, Integer>(hashMap0, class0);
      Integer integer0 = new Integer((-240));
      // Undeclared exception!
      try { 
        doubleKeyMap0.put("", (Object) "", integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Map> class0 = Map.class;
      DoubleKeyMap<Integer, String, Integer> doubleKeyMap0 = null;
      try {
        doubleKeyMap0 = new DoubleKeyMap<Integer, String, Integer>(class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // wrong proto type map interface java.util.Map
         //
         verifyException("us.codecraft.webmagic.utils.MultiKeyMapBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DoubleKeyMap<Object, Integer, String> doubleKeyMap0 = new DoubleKeyMap<Object, Integer, String>();
      Map<Integer, String> map0 = doubleKeyMap0.remove((Object) null);
      assertNull(map0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
      doubleKeyMap0.put((Object) class0, "/)`C|AS!87vJb4l", (Object) null);
      Object object0 = doubleKeyMap0.remove((Object) class0, (String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
      doubleKeyMap0.put((Object) class0, (String) null, (Object) class0);
      Object object0 = doubleKeyMap0.put((Object) class0, (String) null, (Object) null);
      assertEquals("class java.util.HashMap", object0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Class<HashMap> class0 = HashMap.class;
      DoubleKeyMap<Object, String, Object> doubleKeyMap0 = new DoubleKeyMap<Object, String, Object>(class0);
      doubleKeyMap0.put((Object) class0, (String) null, (Object) class0);
      Class class1 = (Class)doubleKeyMap0.remove((Object) class0, (String) null);
      assertFalse(class1.isInterface());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DoubleKeyMap<String, Object, String> doubleKeyMap0 = new DoubleKeyMap<String, Object, String>();
      Map<String, Map<Object, Object>> map0 = doubleKeyMap0.newMap();
      DoubleKeyMap<String, Object, Object> doubleKeyMap1 = new DoubleKeyMap<String, Object, Object>(map0);
      doubleKeyMap1.put("^ EGXNP)ypmjaQr", (Object) doubleKeyMap0, (Object) "^ EGXNP)ypmjaQr");
      Integer integer0 = new Integer(0);
      doubleKeyMap1.get("^ EGXNP)ypmjaQr", (Object) integer0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
  }
}
