/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 07 07:51:05 GMT 2018
 */

package com.google.re2j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.re2j.Regexp;
import com.google.re2j.Simplify;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Simplify_ESTest extends Simplify_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.ALTERNATE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.STAR;
      Regexp regexp0 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.PLUS;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.name = "";
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CAPTURE;
      Regexp regexp0 = new Regexp(regexp_Op0);
      regexp0.reinit();
      Regexp regexp1 = Simplify.simplify(regexp0);
      Regexp regexp2 = Simplify.simplify(regexp1);
      Regexp regexp3 = new Regexp(regexp_Op0);
      Regexp regexp4 = new Regexp(regexp_Op0);
      Regexp regexp5 = new Regexp(regexp3);
      Regexp regexp6 = Simplify.simplify(regexp2);
      Regexp regexp7 = Simplify.simplify(regexp2);
      Regexp[] regexpArray0 = new Regexp[8];
      regexpArray0[0] = regexp5;
      regexpArray0[1] = regexp5;
      regexpArray0[2] = regexp6;
      regexpArray0[3] = regexp7;
      regexpArray0[4] = regexp5;
      regexpArray0[6] = regexp2;
      regexpArray0[7] = regexp3;
      regexp7.subs = regexpArray0;
      Regexp regexp8 = new Regexp(regexp_Op0);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.CONCAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp[] regexpArray0 = new Regexp[11];
      regexpArray0[0] = regexp0;
      regexp1.subs = regexpArray0;
      regexp0.reinit();
      Regexp.Op regexp_Op1 = Regexp.Op.END_TEXT;
      Regexp regexp2 = new Regexp(regexp_Op1);
      regexp2.reinit();
      Regexp.Op regexp_Op2 = Regexp.Op.END_TEXT;
      Regexp regexp3 = new Regexp(regexp_Op2);
      Regexp.Op regexp_Op3 = Regexp.Op.END_LINE;
      Regexp regexp4 = new Regexp(regexp_Op3);
      Simplify.simplify(regexp1);
      Simplify.simplify(regexp3);
      Regexp regexp5 = new Regexp(regexp1);
      Regexp.Op regexp_Op4 = Regexp.Op.QUEST;
      Regexp regexp6 = new Regexp(regexp_Op4);
      Regexp regexp7 = new Regexp(regexp_Op3);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp0.reinit();
      Regexp regexp2 = Simplify.simplify(regexp0);
      assertNotNull(regexp2);
      
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      regexp2.subs = regexpArray0;
      intArray0[1] = (-1);
      regexp1.reinit();
      regexp2.runes = intArray0;
      regexpArray0[1] = regexp0;
      regexp1.max = (-1);
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp1;
      regexp1.min = (-1);
      regexp2.op = regexp_Op0;
      regexpArray0[6] = regexp1;
      regexp1.subs = regexp2.subs;
      regexp1.max = (-1);
      Regexp regexp3 = Simplify.simplify(regexp0);
      Regexp regexp4 = Simplify.simplify(regexp1);
      Object object0 = new Object();
      Regexp regexp5 = new Regexp(regexp_Op0);
      regexp4.subs = regexp2.subs;
      Regexp regexp6 = new Regexp(regexp0);
      Regexp regexp7 = new Regexp(regexp6);
      Regexp.Op regexp_Op1 = Regexp.Op.VERTICAL_BAR;
      Regexp regexp8 = new Regexp(regexp_Op1);
      Simplify.simplify(regexp1);
      Regexp regexp9 = Simplify.simplify(regexp4);
      assertNotSame(regexp4, regexp9);
      
      Regexp regexp10 = Simplify.simplify(regexp5);
      Regexp regexp11 = new Regexp(regexp10);
      Simplify.simplify(regexp2);
      Regexp regexp12 = Simplify.simplify(regexp3);
      assertFalse(regexp3.equals((Object)regexp9));
      assertFalse(regexp12.equals((Object)regexp9));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp regexp2 = new Regexp(regexp1);
      Regexp[] regexpArray0 = new Regexp[11];
      regexpArray0[0] = regexp0;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      regexp2.subs = regexpArray0;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      regexp1.reinit();
      regexp2.runes = intArray0;
      regexp1.max = (-1);
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp1;
      regexp0.name = "";
      regexp1.min = (-1);
      regexpArray0[6] = regexp1;
      regexp1.subs = regexp2.subs;
      regexp1.max = (-1);
      regexp0.reinit();
      Regexp regexp3 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.WORD_BOUNDARY;
      Regexp regexp4 = new Regexp(regexp_Op1);
      Regexp regexp5 = new Regexp(regexp_Op0);
      Regexp regexp6 = new Regexp(regexp4);
      Regexp regexp7 = new Regexp(regexp1);
      Regexp regexp8 = new Regexp(regexp0);
      Regexp regexp9 = Simplify.simplify(regexp1);
      Simplify.simplify(regexp5);
      Regexp regexp10 = Simplify.simplify(regexp9);
      assertSame(regexp10, regexp9);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.name = "com.google.re2j.Simplify$1";
      regexp0.reinit();
      Regexp regexp2 = Simplify.simplify(regexp0);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexp2.reinit();
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      regexp1.max = (-1);
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp1;
      regexp1.subs = regexpArray0;
      regexp1.max = (-1);
      regexp0.reinit();
      Simplify.simplify(regexp1);
      Regexp regexp3 = new Regexp(regexp0);
      Regexp regexp4 = null;
      try {
        regexp4 = new Regexp(regexpArray0[6]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_LINE;
      regexp0.op = regexp_Op1;
      regexp0.reinit();
      Regexp regexp2 = new Regexp(regexp_Op0);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[1] = regexp0;
      regexpArray0[2] = regexp1;
      regexp1.max = (-1);
      regexpArray0[5] = regexp0;
      regexpArray0[5] = regexp2;
      regexpArray0[6] = regexp1;
      regexp1.subs = regexpArray0;
      Regexp regexp3 = new Regexp(regexp0);
      regexp3.reinit();
      Simplify.simplify(regexp2);
      Regexp regexp4 = new Regexp(regexp0);
      Regexp regexp5 = new Regexp(regexp4);
      Simplify.simplify(regexp1);
      Regexp regexp6 = null;
      try {
        regexp6 = new Regexp(regexpArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.name = "com.google.re2j.Simplify$1";
      Regexp regexp2 = new Regexp(regexp1);
      Regexp[] regexpArray0 = new Regexp[11];
      regexpArray0[0] = regexp0;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      regexp2.subs = regexpArray0;
      regexp0.reinit();
      regexp1.reinit();
      regexp2.min = (-1);
      Regexp regexp3 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.QUEST;
      Regexp regexp4 = new Regexp(regexp_Op1);
      Simplify.simplify(regexp2);
      Simplify.simplify(regexp0);
      Regexp regexp5 = new Regexp(regexp_Op1);
      // Undeclared exception!
      try { 
        Simplify.simplify(regexp4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Simplify", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      regexp0.flags = (-1);
      Regexp regexp2 = new Regexp(regexp1);
      Regexp[] regexpArray0 = new Regexp[10];
      regexpArray0[0] = regexp0;
      regexpArray0[3] = regexp0;
      regexpArray0[2] = regexp0;
      regexpArray0[4] = regexp1;
      regexpArray0[6] = regexp1;
      regexpArray0[6] = regexp1;
      regexp0.name = "B";
      regexp1.subs = regexpArray0;
      regexp1.max = 13;
      Simplify.simplify(regexpArray0[1]);
      Simplify.simplify(regexp1);
      Regexp regexp3 = new Regexp(regexp0);
      Regexp regexp4 = null;
      try {
        regexp4 = new Regexp((Regexp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.name = "com.google.re2j.Simplify$1";
      regexp0.reinit();
      Simplify.simplify(regexp0);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      int[] intArray0 = new int[14];
      intArray0[1] = 98;
      intArray0[1] = 98;
      intArray0[2] = 98;
      regexp1.reinit();
      regexpArray0[1] = regexp0;
      regexp1.max = 98;
      regexpArray0[3] = regexp0;
      regexpArray0[4] = regexp1;
      regexp1.min = 98;
      regexpArray0[6] = regexp1;
      regexp1.subs = regexpArray0;
      regexp1.max = 98;
      regexp0.reinit();
      Regexp regexp2 = new Regexp(regexp0);
      Regexp regexp3 = new Regexp(regexp0);
      Regexp regexp4 = Simplify.simplify(regexp3);
      Regexp regexp5 = new Regexp(regexp3);
      regexp3.reinit();
      Regexp regexp6 = new Regexp(regexp1);
      Regexp regexp7 = new Regexp(regexp_Op0);
      Regexp.Op regexp_Op1 = Regexp.Op.BEGIN_TEXT;
      Regexp regexp8 = new Regexp(regexp_Op1);
      Simplify.simplify(regexp8);
      Simplify.simplify(regexp7);
      regexp8.subs = regexpArray0;
      Simplify.simplify(regexp1);
      Regexp regexp9 = new Regexp(regexp4);
      Regexp regexp10 = Simplify.simplify(regexp5);
      assertFalse(regexp10.equals((Object)regexp3));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp0);
      regexp1.reinit();
      regexp0.flags = (-1);
      Regexp regexp2 = new Regexp(regexp1);
      Regexp[] regexpArray0 = new Regexp[19];
      regexpArray0[13] = regexp2;
      regexpArray0[4] = regexp1;
      regexp1.subs = regexpArray0;
      regexp1.max = (-6);
      Regexp regexp3 = Simplify.simplify(regexpArray0[1]);
      Regexp regexp4 = Simplify.simplify(regexp1);
      Regexp regexp5 = new Regexp(regexp0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-6);
      intArray0[1] = (-1);
      intArray0[2] = (-6);
      intArray0[3] = (-6);
      intArray0[4] = (-6);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      regexp4.runes = intArray0;
      Regexp regexp6 = null;
      try {
        regexp6 = new Regexp(regexp3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.re2j.Regexp", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Regexp.Op regexp_Op0 = Regexp.Op.REPEAT;
      Regexp regexp0 = new Regexp(regexp_Op0);
      Regexp regexp1 = new Regexp(regexp_Op0);
      regexp1.reinit();
      regexp0.flags = (-13);
      Regexp regexp2 = new Regexp(regexp1);
      Regexp[] regexpArray0 = new Regexp[7];
      regexpArray0[0] = regexp0;
      regexpArray0[4] = regexp1;
      regexpArray0[6] = regexp0;
      regexpArray0[6] = regexp1;
      regexp1.subs = regexpArray0;
      regexp1.max = 13;
      Regexp regexp3 = Simplify.simplify(regexp1);
      Regexp regexp4 = new Regexp(regexp0);
      Simplify.simplify(regexp1);
      Regexp.Op regexp_Op1 = Regexp.Op.EMPTY_MATCH;
      Regexp regexp5 = new Regexp(regexp_Op1);
      regexp1.min = 6;
      Simplify.simplify(regexp3);
      Regexp regexp6 = new Regexp(regexp1);
      Simplify.simplify(regexp6);
      regexp4.reinit();
      Regexp regexp7 = Simplify.simplify(regexp1);
      Regexp regexp8 = Simplify.simplify(regexp1);
      Regexp.Op regexp_Op2 = Regexp.Op.CAPTURE;
      Regexp regexp9 = new Regexp(regexp_Op2);
      Regexp regexp10 = new Regexp(regexp8);
      Regexp regexp11 = new Regexp(regexp4);
      Regexp regexp12 = new Regexp(regexp7);
      Simplify.simplify(regexp6);
      Regexp regexp13 = new Regexp(regexp11);
      assertFalse(regexp13.equals((Object)regexp12));
  }
}
